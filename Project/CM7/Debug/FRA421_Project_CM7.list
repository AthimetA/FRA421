
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104b0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  08010750  08010750  00020750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012118  08012118  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08012118  08012118  00022118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012120  08012120  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012120  08012120  00022120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012124  08012124  00022124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08012128  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  080121b0  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  08012210  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  08012270  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  08012270  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   000261d0  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00056346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a78  00000000  00000000  00059f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019d0  00000000  00000000  0005b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002381b  00000000  00000000  0009adbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00193758  00000000  00000000  000be5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00251d2e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007654  00000000  00000000  00251d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010738 	.word	0x08010738

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	08010738 	.word	0x08010738

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	3318      	adds	r3, #24
 800077e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ptrRFID->action == 1) // Card Detected
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80dc 	bne.w	8000956 <Player_Reading_Card+0x202>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3310      	adds	r3, #16
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	3301      	adds	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	3310      	adds	r3, #16
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	3310      	adds	r3, #16
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3301      	adds	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		uint8_t inpos = ptrYugiohCard_src->standPosition %6;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	799a      	ldrb	r2, [r3, #6]
 8000856:	4b42      	ldr	r3, [pc, #264]	; (8000960 <Player_Reading_Card+0x20c>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	0899      	lsrs	r1, r3, #2
 800085e:	460b      	mov	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	75fb      	strb	r3, [r7, #23]
		if(ptrYugiohCard_src->cardType == 1)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <Player_Reading_Card+0x12c>
		{

			if(inpos <= 2)
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d809      	bhi.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800087e:	e005      	b.n	800088c <Player_Reading_Card+0x138>
			}

		}
		else
		{
			if(inpos > 2)
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d902      	bls.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}


		if (player->turn == first && flag_played == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12b      	bne.n	80008ee <Player_Reading_Card+0x19a>
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d127      	bne.n	80008ee <Player_Reading_Card+0x19a>
		{


			// Update buffer
			YUGIOH_card_Buffer_Update_Player(player);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fc1f 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
			YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feec 	bl	8000684 <YUGIOH_card_copy>

			// Mod standPosition in case off 2 player
			ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	799a      	ldrb	r2, [r3, #6]
 80008b0:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <Player_Reading_Card+0x20c>)
 80008b2:	fba3 1302 	umull	r1, r3, r3, r2
 80008b6:	0899      	lsrs	r1, r3, #2
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	719a      	strb	r2, [r3, #6]
			// Card Reading So it can't attack
			ptrYugiohCard_dst->actionPoint_Atk = 0;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]
			// Card Reading Then it can use it Effect
			ptrYugiohCard_dst->actionPoint_Eff = 1;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2201      	movs	r2, #1
 80008d2:	725a      	strb	r2, [r3, #9]
			RFID_Clear_Card_Bufffer(ptrRFID);
 80008d4:	6a38      	ldr	r0, [r7, #32]
 80008d6:	f7ff ff21 	bl	800071c <RFID_Clear_Card_Bufffer>
			ptrRFID->action = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			state_game->action += 1;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
				state_game->action += 1;
			}

		}
	}
}
 80008ec:	e033      	b.n	8000956 <Player_Reading_Card+0x202>
		else if (player->turn == second && flag_played == 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d12e      	bne.n	8000956 <Player_Reading_Card+0x202>
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d12a      	bne.n	8000956 <Player_Reading_Card+0x202>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d926      	bls.n	8000956 <Player_Reading_Card+0x202>
				YUGIOH_card_Buffer_Update_Player(player);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fbea 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f7ff feb7 	bl	8000684 <YUGIOH_card_copy>
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <Player_Reading_Card+0x20c>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0899      	lsrs	r1, r3, #2
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2200      	movs	r2, #0
 8000936:	721a      	strb	r2, [r3, #8]
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	2201      	movs	r2, #1
 800093c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800093e:	6a38      	ldr	r0, [r7, #32]
 8000940:	f7ff feec 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000944:	6a3b      	ldr	r3, [r7, #32]
 8000946:	2200      	movs	r2, #0
 8000948:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	b2da      	uxtb	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	701a      	strb	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	3738      	adds	r7, #56	; 0x38
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	aaaaaaab 	.word	0xaaaaaaab

08000964 <Player_Reading_Card_Stopdef>:

void Player_Reading_Card_Stopdef(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3328      	adds	r3, #40	; 0x28
 8000974:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	2358      	movs	r3, #88	; 0x58
 800097e:	fb02 f303 	mul.w	r3, r2, r3
 8000982:	3328      	adds	r3, #40	; 0x28
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	3318      	adds	r3, #24
 800098e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000996:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3308      	adds	r3, #8
 800099c:	617b      	str	r3, [r7, #20]

	uint8_t flag_played = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t targetPos = 255;
 80009a4:	23ff      	movs	r3, #255	; 0xff
 80009a6:	74fb      	strb	r3, [r7, #19]

	if (ptrRFID->action == 1) // Card Detected
 80009a8:	6a3b      	ldr	r3, [r7, #32]
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d17d      	bne.n	8000aac <Player_Reading_Card_Stopdef+0x148>
	{

		targetPos = ptrYugiohCard_src->standPosition;
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	799b      	ldrb	r3, [r3, #6]
 80009b4:	74fb      	strb	r3, [r7, #19]
		ptrYugiohCard_played = &player->cardOnBoard[targetPos];
 80009b6:	7cfb      	ldrb	r3, [r7, #19]
 80009b8:	011b      	lsls	r3, r3, #4
 80009ba:	3308      	adds	r3, #8
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	617b      	str	r3, [r7, #20]

		if (ptrYugiohCard_played->cardData != 0 && ptrYugiohCard_played->cardState == 0)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d006      	beq.n	80009d8 <Player_Reading_Card_Stopdef+0x74>
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	789b      	ldrb	r3, [r3, #2]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d102      	bne.n	80009d8 <Player_Reading_Card_Stopdef+0x74>
		{
			flag_played = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if (player->turn == first && flag_played == 0) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d12f      	bne.n	8000a42 <Player_Reading_Card_Stopdef+0xde>
 80009e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d12b      	bne.n	8000a42 <Player_Reading_Card_Stopdef+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	799b      	ldrb	r3, [r3, #6]
 80009ee:	2b05      	cmp	r3, #5
 80009f0:	d85c      	bhi.n	8000aac <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f000 fb75 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80009f8:	69b9      	ldr	r1, [r7, #24]
 80009fa:	69f8      	ldr	r0, [r7, #28]
 80009fc:	f7ff fe42 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	799a      	ldrb	r2, [r3, #6]
 8000a04:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <Player_Reading_Card_Stopdef+0x150>)
 8000a06:	fba3 1302 	umull	r1, r3, r3, r2
 8000a0a:	0899      	lsrs	r1, r3, #2
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	440b      	add	r3, r1
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	2201      	movs	r2, #1
 8000a26:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a28:	6a38      	ldr	r0, [r7, #32]
 8000a2a:	f7ff fe77 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	2200      	movs	r2, #0
 8000a32:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a40:	e034      	b.n	8000aac <Player_Reading_Card_Stopdef+0x148>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d12f      	bne.n	8000aac <Player_Reading_Card_Stopdef+0x148>
 8000a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d12b      	bne.n	8000aac <Player_Reading_Card_Stopdef+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	799b      	ldrb	r3, [r3, #6]
 8000a58:	2b05      	cmp	r3, #5
 8000a5a:	d927      	bls.n	8000aac <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 fb40 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a62:	69b9      	ldr	r1, [r7, #24]
 8000a64:	69f8      	ldr	r0, [r7, #28]
 8000a66:	f7ff fe0d 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	799a      	ldrb	r2, [r3, #6]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <Player_Reading_Card_Stopdef+0x150>)
 8000a70:	fba3 1302 	umull	r1, r3, r3, r2
 8000a74:	0899      	lsrs	r1, r3, #2
 8000a76:	460b      	mov	r3, r1
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	440b      	add	r3, r1
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a92:	6a38      	ldr	r0, [r7, #32]
 8000a94:	f7ff fe42 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000aaa:	e7ff      	b.n	8000aac <Player_Reading_Card_Stopdef+0x148>
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	aaaaaaab 	.word	0xaaaaaaab

08000ab8 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3328      	adds	r3, #40	; 0x28
 8000ac8:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	2358      	movs	r3, #88	; 0x58
 8000ad2:	fb02 f303 	mul.w	r3, r2, r3
 8000ad6:	3328      	adds	r3, #40	; 0x28
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	3318      	adds	r3, #24
 8000ae2:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000aea:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3308      	adds	r3, #8
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	78db      	ldrb	r3, [r3, #3]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	f040 8083 	bne.w	8000c08 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3368      	adds	r3, #104	; 0x68
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	e00f      	b.n	8000b2e <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d103      	bne.n	8000b22 <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000b20:	e008      	b.n	8000b34 <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	3310      	adds	r3, #16
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	2b13      	cmp	r3, #19
 8000b32:	ddec      	ble.n	8000b0e <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d12f      	bne.n	8000b9e <Player_Reading_Card_Reborn+0xe6>
 8000b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d12b      	bne.n	8000b9e <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	799b      	ldrb	r3, [r3, #6]
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	d85c      	bhi.n	8000c08 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 fac7 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b54:	6939      	ldr	r1, [r7, #16]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff fd94 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	799a      	ldrb	r2, [r3, #6]
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <Player_Reading_Card_Reborn+0x158>)
 8000b62:	fba3 1302 	umull	r1, r3, r3, r2
 8000b66:	0899      	lsrs	r1, r3, #2
 8000b68:	460b      	mov	r3, r1
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	440b      	add	r3, r1
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	2201      	movs	r2, #1
 8000b82:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000b84:	69b8      	ldr	r0, [r7, #24]
 8000b86:	f7ff fdc9 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000b9c:	e034      	b.n	8000c08 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d12f      	bne.n	8000c08 <Player_Reading_Card_Reborn+0x150>
 8000ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d12b      	bne.n	8000c08 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	799b      	ldrb	r3, [r3, #6]
 8000bb4:	2b05      	cmp	r3, #5
 8000bb6:	d927      	bls.n	8000c08 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fa92 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bbe:	6939      	ldr	r1, [r7, #16]
 8000bc0:	6978      	ldr	r0, [r7, #20]
 8000bc2:	f7ff fd5f 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	799a      	ldrb	r2, [r3, #6]
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <Player_Reading_Card_Reborn+0x158>)
 8000bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8000bd0:	0899      	lsrs	r1, r3, #2
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	440b      	add	r3, r1
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	2200      	movs	r2, #0
 8000be6:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	2201      	movs	r2, #1
 8000bec:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000bee:	69b8      	ldr	r0, [r7, #24]
 8000bf0:	f7ff fd94 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000c06:	e7ff      	b.n	8000c08 <Player_Reading_Card_Reborn+0x150>
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	aaaaaaab 	.word	0xaaaaaaab

08000c14 <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3328      	adds	r3, #40	; 0x28
 8000c24:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2358      	movs	r3, #88	; 0x58
 8000c2e:	fb02 f303 	mul.w	r3, r2, r3
 8000c32:	3328      	adds	r3, #40	; 0x28
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	3318      	adds	r3, #24
 8000c3e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c46:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	78db      	ldrb	r3, [r3, #3]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	f040 80cb 	bne.w	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
 8000c62:	e013      	b.n	8000c8c <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 8000c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d107      	bne.n	8000c80 <Player_Reading_Card_Ancient_Rule+0x6c>
 8000c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c72:	785b      	ldrb	r3, [r3, #1]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d103      	bne.n	8000c80 <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000c7e:	e008      	b.n	8000c92 <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	3310      	adds	r3, #16
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	3301      	adds	r3, #1
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	2b05      	cmp	r3, #5
 8000c90:	dde8      	ble.n	8000c64 <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d102      	bne.n	8000cac <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3368      	adds	r3, #104	; 0x68
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
 8000cb6:	e00f      	b.n	8000cd8 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d103      	bne.n	8000ccc <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000cca:	e008      	b.n	8000cde <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 8000ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cce:	3310      	adds	r3, #16
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	2b13      	cmp	r3, #19
 8000cdc:	ddec      	ble.n	8000cb8 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e00f      	b.n	8000d0c <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d103      	bne.n	8000d00 <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000cfe:	e008      	b.n	8000d12 <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8000d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d02:	3310      	adds	r3, #16
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	ddec      	ble.n	8000cec <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	78db      	ldrb	r3, [r3, #3]
 8000d16:	2b05      	cmp	r3, #5
 8000d18:	d902      	bls.n	8000d20 <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d12f      	bne.n	8000d8a <Player_Reading_Card_Ancient_Rule+0x176>
 8000d2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d12b      	bne.n	8000d8a <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	799b      	ldrb	r3, [r3, #6]
 8000d36:	2b05      	cmp	r3, #5
 8000d38:	d85c      	bhi.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f9d1 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d40:	6939      	ldr	r1, [r7, #16]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff fc9e 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	799a      	ldrb	r2, [r3, #6]
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8000d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d52:	0899      	lsrs	r1, r3, #2
 8000d54:	460b      	mov	r3, r1
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	440b      	add	r3, r1
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	2200      	movs	r2, #0
 8000d68:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d70:	69b8      	ldr	r0, [r7, #24]
 8000d72:	f7ff fcd3 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000d88:	e034      	b.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d12f      	bne.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8000d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d12b      	bne.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	799b      	ldrb	r3, [r3, #6]
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	d927      	bls.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f99c 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000daa:	6939      	ldr	r1, [r7, #16]
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	f7ff fc69 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	799a      	ldrb	r2, [r3, #6]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8000db8:	fba3 1302 	umull	r1, r3, r3, r2
 8000dbc:	0899      	lsrs	r1, r3, #2
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	440b      	add	r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000dda:	69b8      	ldr	r0, [r7, #24]
 8000ddc:	f7ff fc9e 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	2200      	movs	r2, #0
 8000de4:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000df2:	e7ff      	b.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8000df4:	bf00      	nop
 8000df6:	3730      	adds	r7, #48	; 0x30
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	aaaaaaab 	.word	0xaaaaaaab

08000e00 <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3328      	adds	r3, #40	; 0x28
 8000e10:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	2358      	movs	r3, #88	; 0x58
 8000e1a:	fb02 f303 	mul.w	r3, r2, r3
 8000e1e:	3328      	adds	r3, #40	; 0x28
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	3318      	adds	r3, #24
 8000e2a:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000e32:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3308      	adds	r3, #8
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	78db      	ldrb	r3, [r3, #3]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	f040 80c7 	bne.w	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4e:	e00f      	b.n	8000e70 <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d103      	bne.n	8000e64 <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000e62:	e008      	b.n	8000e76 <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 8000e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e66:	3310      	adds	r3, #16
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	2b05      	cmp	r3, #5
 8000e74:	ddec      	ble.n	8000e50 <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d102      	bne.n	8000e84 <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d102      	bne.n	8000e9e <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3368      	adds	r3, #104	; 0x68
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
 8000ea8:	e00f      	b.n	8000eca <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d103      	bne.n	8000ebe <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000ebc:	e008      	b.n	8000ed0 <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 8000ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec0:	3310      	adds	r3, #16
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	2b13      	cmp	r3, #19
 8000ece:	ddec      	ble.n	8000eaa <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	e00f      	b.n	8000efe <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d103      	bne.n	8000ef2 <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000ef0:	e008      	b.n	8000f04 <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 8000ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef4:	3310      	adds	r3, #16
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	3301      	adds	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	ddec      	ble.n	8000ede <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d12f      	bne.n	8000f6e <Player_Reading_Card_Monster_Effect+0x16e>
 8000f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d12b      	bne.n	8000f6e <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	799b      	ldrb	r3, [r3, #6]
 8000f1a:	2b05      	cmp	r3, #5
 8000f1c:	d85c      	bhi.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f8df 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff fbac 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	799a      	ldrb	r2, [r3, #6]
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8000f32:	fba3 1302 	umull	r1, r3, r3, r2
 8000f36:	0899      	lsrs	r1, r3, #2
 8000f38:	460b      	mov	r3, r1
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	440b      	add	r3, r1
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	2201      	movs	r2, #1
 8000f52:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000f54:	69b8      	ldr	r0, [r7, #24]
 8000f56:	f7ff fbe1 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000f6c:	e034      	b.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d12f      	bne.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
 8000f78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d12b      	bne.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	799b      	ldrb	r3, [r3, #6]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d927      	bls.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f8aa 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000f8e:	6939      	ldr	r1, [r7, #16]
 8000f90:	6978      	ldr	r0, [r7, #20]
 8000f92:	f7ff fb77 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	799a      	ldrb	r2, [r3, #6]
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8000f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa0:	0899      	lsrs	r1, r3, #2
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	440b      	add	r3, r1
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000fbe:	69b8      	ldr	r0, [r7, #24]
 8000fc0:	f7ff fbac 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000fd6:	e7ff      	b.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
 8000fd8:	bf00      	nop
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	aaaaaaab 	.word	0xaaaaaaab

08000fe4 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001000:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001002:	2300      	movs	r3, #0
 8001004:	76fb      	strb	r3, [r7, #27]
 8001006:	e00b      	b.n	8001020 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	69f9      	ldr	r1, [r7, #28]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb38 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	3310      	adds	r3, #16
 8001018:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800101a:	7efb      	ldrb	r3, [r7, #27]
 800101c:	3301      	adds	r3, #1
 800101e:	76fb      	strb	r3, [r7, #27]
 8001020:	7efb      	ldrb	r3, [r7, #27]
 8001022:	2b05      	cmp	r3, #5
 8001024:	d9f0      	bls.n	8001008 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800104c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800104e:	2300      	movs	r3, #0
 8001050:	76fb      	strb	r3, [r7, #27]
 8001052:	e00b      	b.n	800106c <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	69f9      	ldr	r1, [r7, #28]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb12 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	3310      	adds	r3, #16
 8001064:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001066:	7efb      	ldrb	r3, [r7, #27]
 8001068:	3301      	adds	r3, #1
 800106a:	76fb      	strb	r3, [r7, #27]
 800106c:	7efb      	ldrb	r3, [r7, #27]
 800106e:	2b05      	cmp	r3, #5
 8001070:	d9f0      	bls.n	8001054 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3368      	adds	r3, #104	; 0x68
 8001076:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8001078:	2300      	movs	r3, #0
 800107a:	76bb      	strb	r3, [r7, #26]
 800107c:	e00b      	b.n	8001096 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	69f9      	ldr	r1, [r7, #28]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fafd 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3310      	adds	r3, #16
 800108e:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8001090:	7ebb      	ldrb	r3, [r7, #26]
 8001092:	3301      	adds	r3, #1
 8001094:	76bb      	strb	r3, [r7, #26]
 8001096:	7ebb      	ldrb	r3, [r7, #26]
 8001098:	2b13      	cmp	r3, #19
 800109a:	d9f0      	bls.n	800107e <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3308      	adds	r3, #8
 80010a0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80010a2:	2300      	movs	r3, #0
 80010a4:	767b      	strb	r3, [r7, #25]
 80010a6:	e00b      	b.n	80010c0 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	69f9      	ldr	r1, [r7, #28]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fae8 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	3310      	adds	r3, #16
 80010b8:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80010ba:	7e7b      	ldrb	r3, [r7, #25]
 80010bc:	3301      	adds	r3, #1
 80010be:	767b      	strb	r3, [r7, #25]
 80010c0:	7e7b      	ldrb	r3, [r7, #25]
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d9f0      	bls.n	80010a8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010cc:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	69f9      	ldr	r1, [r7, #28]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fad5 	bl	8000684 <YUGIOH_card_copy>
}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80010f0:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80010f8:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001100:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001108:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800110a:	2306      	movs	r3, #6
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e00c      	b.n	800112a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff fab6 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3b10      	subs	r3, #16
 800111c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	3b10      	subs	r3, #16
 8001122:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3b01      	subs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dcef      	bgt.n	8001110 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001148:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001150:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8001158:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8001160:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001162:	2306      	movs	r3, #6
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e02c      	b.n	80011c2 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001168:	6939      	ldr	r1, [r7, #16]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff fa8a 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3b02      	subs	r3, #2
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	1e50      	subs	r0, r2, #1
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	f500 7394 	add.w	r3, r0, #296	; 0x128
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3b02      	subs	r3, #2
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	1e50      	subs	r0, r2, #1
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3b10      	subs	r3, #16
 80011b4:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	3b10      	subs	r3, #16
 80011ba:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3b01      	subs	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	dccf      	bgt.n	8001168 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b08a      	sub	sp, #40	; 0x28
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3368      	adds	r3, #104	; 0x68
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3368      	adds	r3, #104	; 0x68
 80011fc:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001204:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001206:	2314      	movs	r3, #20
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	e00c      	b.n	8001226 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800120c:	6a39      	ldr	r1, [r7, #32]
 800120e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001210:	f7ff fa38 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	3b10      	subs	r3, #16
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	3b10      	subs	r3, #16
 800121e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3b01      	subs	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2b00      	cmp	r3, #0
 800122a:	dcef      	bgt.n	800120c <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3368      	adds	r3, #104	; 0x68
 8001234:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001236:	6a39      	ldr	r1, [r7, #32]
 8001238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800123a:	f7ff fa23 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001246:	6a38      	ldr	r0, [r7, #32]
 8001248:	f7ff fa1c 	bl	8000684 <YUGIOH_card_copy>

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af04      	add	r7, sp, #16
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3304      	adds	r3, #4
 8001262:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	3304      	adds	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3304      	adds	r3, #4
 800126e:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001276:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8001294:	2108      	movs	r1, #8
 8001296:	48ad      	ldr	r0, [pc, #692]	; (800154c <GAME_PLAY_Management+0x2f8>)
 8001298:	f009 f8f6 	bl	800a488 <HAL_GPIO_ReadPin>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 80012a4:	2102      	movs	r1, #2
 80012a6:	48aa      	ldr	r0, [pc, #680]	; (8001550 <GAME_PLAY_Management+0x2fc>)
 80012a8:	f009 f8ee 	bl	800a488 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 80012b4:	2104      	movs	r1, #4
 80012b6:	48a5      	ldr	r0, [pc, #660]	; (800154c <GAME_PLAY_Management+0x2f8>)
 80012b8:	f009 f8e6 	bl	800a488 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 80012c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c8:	48a2      	ldr	r0, [pc, #648]	; (8001554 <GAME_PLAY_Management+0x300>)
 80012ca:	f009 f8dd 	bl	800a488 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80012dc:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	3304      	adds	r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	f200 82c7 	bhi.w	8001880 <GAME_PLAY_Management+0x62c>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <GAME_PLAY_Management+0xa4>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	0800130d 	.word	0x0800130d
 80012fc:	08001589 	.word	0x08001589
 8001300:	080016e7 	.word	0x080016e7
 8001304:	08001765 	.word	0x08001765
 8001308:	0800180d 	.word	0x0800180d
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800130c:	4b92      	ldr	r3, [pc, #584]	; (8001558 <GAME_PLAY_Management+0x304>)
 800130e:	2200      	movs	r2, #0
 8001310:	9202      	str	r2, [sp, #8]
 8001312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001316:	9201      	str	r2, [sp, #4]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	9200      	str	r2, [sp, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a8f      	ldr	r2, [pc, #572]	; (800155c <GAME_PLAY_Management+0x308>)
 8001320:	2105      	movs	r1, #5
 8001322:	2005      	movs	r0, #5
 8001324:	f005 f8ed 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001328:	4b8b      	ldr	r3, [pc, #556]	; (8001558 <GAME_PLAY_Management+0x304>)
 800132a:	2200      	movs	r2, #0
 800132c:	9202      	str	r2, [sp, #8]
 800132e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001332:	9201      	str	r2, [sp, #4]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a89      	ldr	r2, [pc, #548]	; (8001560 <GAME_PLAY_Management+0x30c>)
 800133c:	210f      	movs	r1, #15
 800133e:	2000      	movs	r0, #0
 8001340:	f005 f8df 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001344:	4b87      	ldr	r3, [pc, #540]	; (8001564 <GAME_PLAY_Management+0x310>)
 8001346:	2200      	movs	r2, #0
 8001348:	9202      	str	r2, [sp, #8]
 800134a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800134e:	9201      	str	r2, [sp, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a84      	ldr	r2, [pc, #528]	; (8001568 <GAME_PLAY_Management+0x314>)
 8001358:	2123      	movs	r1, #35	; 0x23
 800135a:	2008      	movs	r0, #8
 800135c:	f005 f8d1 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8001360:	4b80      	ldr	r3, [pc, #512]	; (8001564 <GAME_PLAY_Management+0x310>)
 8001362:	2200      	movs	r2, #0
 8001364:	9202      	str	r2, [sp, #8]
 8001366:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800136a:	9201      	str	r2, [sp, #4]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	9200      	str	r2, [sp, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a7e      	ldr	r2, [pc, #504]	; (800156c <GAME_PLAY_Management+0x318>)
 8001374:	213c      	movs	r1, #60	; 0x3c
 8001376:	2019      	movs	r0, #25
 8001378:	f005 f8c3 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800137c:	4b76      	ldr	r3, [pc, #472]	; (8001558 <GAME_PLAY_Management+0x304>)
 800137e:	2200      	movs	r2, #0
 8001380:	9202      	str	r2, [sp, #8]
 8001382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001386:	9201      	str	r2, [sp, #4]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a74      	ldr	r2, [pc, #464]	; (8001560 <GAME_PLAY_Management+0x30c>)
 8001390:	214b      	movs	r1, #75	; 0x4b
 8001392:	2000      	movs	r0, #0
 8001394:	f005 f8b5 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001398:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <GAME_PLAY_Management+0x304>)
 800139a:	2200      	movs	r2, #0
 800139c:	9202      	str	r2, [sp, #8]
 800139e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a2:	9201      	str	r2, [sp, #4]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	9200      	str	r2, [sp, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a71      	ldr	r2, [pc, #452]	; (8001570 <GAME_PLAY_Management+0x31c>)
 80013ac:	215a      	movs	r1, #90	; 0x5a
 80013ae:	2000      	movs	r0, #0
 80013b0:	f005 f8a7 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <GAME_PLAY_Management+0x304>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	9202      	str	r2, [sp, #8]
 80013ba:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	9200      	str	r2, [sp, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6b      	ldr	r2, [pc, #428]	; (8001574 <GAME_PLAY_Management+0x320>)
 80013c8:	215a      	movs	r1, #90	; 0x5a
 80013ca:	205d      	movs	r0, #93	; 0x5d
 80013cc:	f005 f899 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80013d0:	4b61      	ldr	r3, [pc, #388]	; (8001558 <GAME_PLAY_Management+0x304>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	9202      	str	r2, [sp, #8]
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	9201      	str	r2, [sp, #4]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a65      	ldr	r2, [pc, #404]	; (8001578 <GAME_PLAY_Management+0x324>)
 80013e4:	2169      	movs	r1, #105	; 0x69
 80013e6:	2000      	movs	r0, #0
 80013e8:	f005 f88b 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80013ec:	4b5a      	ldr	r3, [pc, #360]	; (8001558 <GAME_PLAY_Management+0x304>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	9202      	str	r2, [sp, #8]
 80013f2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80013f6:	9201      	str	r2, [sp, #4]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a5f      	ldr	r2, [pc, #380]	; (800157c <GAME_PLAY_Management+0x328>)
 8001400:	2169      	movs	r1, #105	; 0x69
 8001402:	2064      	movs	r0, #100	; 0x64
 8001404:	f005 f87d 	bl	8006502 <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <GAME_PLAY_Management+0x304>)
 800140a:	2200      	movs	r2, #0
 800140c:	9202      	str	r2, [sp, #8]
 800140e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001412:	9201      	str	r2, [sp, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	9200      	str	r2, [sp, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a59      	ldr	r2, [pc, #356]	; (8001580 <GAME_PLAY_Management+0x32c>)
 800141c:	2105      	movs	r1, #5
 800141e:	2005      	movs	r0, #5
 8001420:	f005 f8b9 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <GAME_PLAY_Management+0x304>)
 8001426:	2200      	movs	r2, #0
 8001428:	9202      	str	r2, [sp, #8]
 800142a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142e:	9201      	str	r2, [sp, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	9200      	str	r2, [sp, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <GAME_PLAY_Management+0x30c>)
 8001438:	210f      	movs	r1, #15
 800143a:	2000      	movs	r0, #0
 800143c:	f005 f8ab 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001440:	4b48      	ldr	r3, [pc, #288]	; (8001564 <GAME_PLAY_Management+0x310>)
 8001442:	2200      	movs	r2, #0
 8001444:	9202      	str	r2, [sp, #8]
 8001446:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800144a:	9201      	str	r2, [sp, #4]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a45      	ldr	r2, [pc, #276]	; (8001568 <GAME_PLAY_Management+0x314>)
 8001454:	2123      	movs	r1, #35	; 0x23
 8001456:	2008      	movs	r0, #8
 8001458:	f005 f89d 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <GAME_PLAY_Management+0x310>)
 800145e:	2200      	movs	r2, #0
 8001460:	9202      	str	r2, [sp, #8]
 8001462:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001466:	9201      	str	r2, [sp, #4]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	9200      	str	r2, [sp, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a3f      	ldr	r2, [pc, #252]	; (800156c <GAME_PLAY_Management+0x318>)
 8001470:	213c      	movs	r1, #60	; 0x3c
 8001472:	2014      	movs	r0, #20
 8001474:	f005 f88f 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <GAME_PLAY_Management+0x304>)
 800147a:	2200      	movs	r2, #0
 800147c:	9202      	str	r2, [sp, #8]
 800147e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001482:	9201      	str	r2, [sp, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a35      	ldr	r2, [pc, #212]	; (8001560 <GAME_PLAY_Management+0x30c>)
 800148c:	214b      	movs	r1, #75	; 0x4b
 800148e:	2000      	movs	r0, #0
 8001490:	f005 f881 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <GAME_PLAY_Management+0x304>)
 8001496:	2200      	movs	r2, #0
 8001498:	9202      	str	r2, [sp, #8]
 800149a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149e:	9201      	str	r2, [sp, #4]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a32      	ldr	r2, [pc, #200]	; (8001570 <GAME_PLAY_Management+0x31c>)
 80014a8:	215a      	movs	r1, #90	; 0x5a
 80014aa:	2000      	movs	r0, #0
 80014ac:	f005 f873 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <GAME_PLAY_Management+0x304>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	9202      	str	r2, [sp, #8]
 80014b6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	9200      	str	r2, [sp, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <GAME_PLAY_Management+0x320>)
 80014c4:	215a      	movs	r1, #90	; 0x5a
 80014c6:	205d      	movs	r0, #93	; 0x5d
 80014c8:	f005 f865 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <GAME_PLAY_Management+0x304>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	9202      	str	r2, [sp, #8]
 80014d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d6:	9201      	str	r2, [sp, #4]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a26      	ldr	r2, [pc, #152]	; (8001578 <GAME_PLAY_Management+0x324>)
 80014e0:	2169      	movs	r1, #105	; 0x69
 80014e2:	2000      	movs	r0, #0
 80014e4:	f005 f857 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <GAME_PLAY_Management+0x304>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	9202      	str	r2, [sp, #8]
 80014ee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014f2:	9201      	str	r2, [sp, #4]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a20      	ldr	r2, [pc, #128]	; (800157c <GAME_PLAY_Management+0x328>)
 80014fc:	2169      	movs	r1, #105	; 0x69
 80014fe:	2064      	movs	r0, #100	; 0x64
 8001500:	f005 f849 	bl	8006596 <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8001504:	2108      	movs	r1, #8
 8001506:	481f      	ldr	r0, [pc, #124]	; (8001584 <GAME_PLAY_Management+0x330>)
 8001508:	f008 ffbe 	bl	800a488 <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10a      	bne.n	8001528 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8001512:	2000      	movs	r0, #0
 8001514:	f005 fa5c 	bl	80069d0 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001518:	2000      	movs	r0, #0
 800151a:	f005 fa6a 	bl	80069f2 <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8001526:	e1ab      	b.n	8001880 <GAME_PLAY_Management+0x62c>
			state_game->PlyerAction_State = PS_AFK;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8001548:	e19a      	b.n	8001880 <GAME_PLAY_Management+0x62c>
 800154a:	bf00      	nop
 800154c:	58020800 	.word	0x58020800
 8001550:	58020400 	.word	0x58020400
 8001554:	58021400 	.word	0x58021400
 8001558:	2400000c 	.word	0x2400000c
 800155c:	08010750 	.word	0x08010750
 8001560:	0801075c 	.word	0x0801075c
 8001564:	24000014 	.word	0x24000014
 8001568:	08010770 	.word	0x08010770
 800156c:	0801077c 	.word	0x0801077c
 8001570:	08010784 	.word	0x08010784
 8001574:	08010794 	.word	0x08010794
 8001578:	0801079c 	.word	0x0801079c
 800157c:	080107ac 	.word	0x080107ac
 8001580:	080107b0 	.word	0x080107b0
 8001584:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001588:	4b96      	ldr	r3, [pc, #600]	; (80017e4 <GAME_PLAY_Management+0x590>)
 800158a:	2200      	movs	r2, #0
 800158c:	9202      	str	r2, [sp, #8]
 800158e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001592:	9201      	str	r2, [sp, #4]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	9200      	str	r2, [sp, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a93      	ldr	r2, [pc, #588]	; (80017e8 <GAME_PLAY_Management+0x594>)
 800159c:	2105      	movs	r1, #5
 800159e:	2005      	movs	r0, #5
 80015a0:	f004 ffaf 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80015a4:	4b8f      	ldr	r3, [pc, #572]	; (80017e4 <GAME_PLAY_Management+0x590>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	9202      	str	r2, [sp, #8]
 80015aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ae:	9201      	str	r2, [sp, #4]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a8d      	ldr	r2, [pc, #564]	; (80017ec <GAME_PLAY_Management+0x598>)
 80015b8:	210f      	movs	r1, #15
 80015ba:	2000      	movs	r0, #0
 80015bc:	f004 ffa1 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80015c0:	4b8b      	ldr	r3, [pc, #556]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	9202      	str	r2, [sp, #8]
 80015c6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80015ca:	9201      	str	r2, [sp, #4]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	9200      	str	r2, [sp, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a88      	ldr	r2, [pc, #544]	; (80017f4 <GAME_PLAY_Management+0x5a0>)
 80015d4:	2123      	movs	r1, #35	; 0x23
 80015d6:	2019      	movs	r0, #25
 80015d8:	f004 ff93 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80015dc:	4b84      	ldr	r3, [pc, #528]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	9202      	str	r2, [sp, #8]
 80015e2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80015e6:	9201      	str	r2, [sp, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	9200      	str	r2, [sp, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a82      	ldr	r2, [pc, #520]	; (80017f8 <GAME_PLAY_Management+0x5a4>)
 80015f0:	213c      	movs	r1, #60	; 0x3c
 80015f2:	2021      	movs	r0, #33	; 0x21
 80015f4:	f004 ff85 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80015f8:	4b7a      	ldr	r3, [pc, #488]	; (80017e4 <GAME_PLAY_Management+0x590>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	9202      	str	r2, [sp, #8]
 80015fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001602:	9201      	str	r2, [sp, #4]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	9200      	str	r2, [sp, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a78      	ldr	r2, [pc, #480]	; (80017ec <GAME_PLAY_Management+0x598>)
 800160c:	214b      	movs	r1, #75	; 0x4b
 800160e:	2000      	movs	r0, #0
 8001610:	f004 ff77 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001614:	4b73      	ldr	r3, [pc, #460]	; (80017e4 <GAME_PLAY_Management+0x590>)
 8001616:	2200      	movs	r2, #0
 8001618:	9202      	str	r2, [sp, #8]
 800161a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161e:	9201      	str	r2, [sp, #4]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	9200      	str	r2, [sp, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a75      	ldr	r2, [pc, #468]	; (80017fc <GAME_PLAY_Management+0x5a8>)
 8001628:	2105      	movs	r1, #5
 800162a:	2005      	movs	r0, #5
 800162c:	f004 ffb3 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001630:	4b6c      	ldr	r3, [pc, #432]	; (80017e4 <GAME_PLAY_Management+0x590>)
 8001632:	2200      	movs	r2, #0
 8001634:	9202      	str	r2, [sp, #8]
 8001636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163a:	9201      	str	r2, [sp, #4]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	9200      	str	r2, [sp, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a6a      	ldr	r2, [pc, #424]	; (80017ec <GAME_PLAY_Management+0x598>)
 8001644:	210f      	movs	r1, #15
 8001646:	2000      	movs	r0, #0
 8001648:	f004 ffa5 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800164c:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 800164e:	2200      	movs	r2, #0
 8001650:	9202      	str	r2, [sp, #8]
 8001652:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	9200      	str	r2, [sp, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a65      	ldr	r2, [pc, #404]	; (80017f4 <GAME_PLAY_Management+0x5a0>)
 8001660:	2123      	movs	r1, #35	; 0x23
 8001662:	2019      	movs	r0, #25
 8001664:	f004 ff97 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8001668:	4b61      	ldr	r3, [pc, #388]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 800166a:	2200      	movs	r2, #0
 800166c:	9202      	str	r2, [sp, #8]
 800166e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001672:	9201      	str	r2, [sp, #4]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a61      	ldr	r2, [pc, #388]	; (8001800 <GAME_PLAY_Management+0x5ac>)
 800167c:	213c      	movs	r1, #60	; 0x3c
 800167e:	2025      	movs	r0, #37	; 0x25
 8001680:	f004 ff89 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001684:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <GAME_PLAY_Management+0x590>)
 8001686:	2200      	movs	r2, #0
 8001688:	9202      	str	r2, [sp, #8]
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	9201      	str	r2, [sp, #4]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a55      	ldr	r2, [pc, #340]	; (80017ec <GAME_PLAY_Management+0x598>)
 8001698:	214b      	movs	r1, #75	; 0x4b
 800169a:	2000      	movs	r0, #0
 800169c:	f004 ff7b 	bl	8006596 <ST7735_WriteString1>
		HAL_Delay(3000);
 80016a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016a4:	f005 fda2 	bl	80071ec <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f005 f991 	bl	80069d0 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f005 f99f 	bl	80069f2 <ST7735_FillScreen1>
		MainGUI();
 80016b4:	f003 fe06 	bl	80052c4 <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80016be:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80016c6:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 80016c8:	69f8      	ldr	r0, [r7, #28]
 80016ca:	f7ff fcb1 	bl	8001030 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 80016ce:	69b8      	ldr	r0, [r7, #24]
 80016d0:	f7ff fcae 	bl	8001030 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 80016e4:	e0cc      	b.n	8001880 <GAME_PLAY_Management+0x62c>
	case first_player:
		if (state_game -> F_flag == 0){
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d12b      	bne.n	8001748 <GAME_PLAY_Management+0x4f4>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 80016f0:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	9202      	str	r2, [sp, #8]
 80016f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016fa:	9201      	str	r2, [sp, #4]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	9200      	str	r2, [sp, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a40      	ldr	r2, [pc, #256]	; (8001804 <GAME_PLAY_Management+0x5b0>)
 8001704:	215a      	movs	r1, #90	; 0x5a
 8001706:	200f      	movs	r0, #15
 8001708:	f004 ff45 	bl	8006596 <ST7735_WriteString1>
			HAL_Delay(2000);
 800170c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001710:	f005 fd6c 	bl	80071ec <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2326      	movs	r3, #38	; 0x26
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	215a      	movs	r1, #90	; 0x5a
 800171e:	2000      	movs	r0, #0
 8001720:	f005 f858 	bl	80067d4 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 800172a:	3301      	adds	r3, #1
 800172c:	b2da      	uxtb	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 800173c:	4b32      	ldr	r3, [pc, #200]	; (8001808 <GAME_PLAY_Management+0x5b4>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <GAME_PLAY_Management+0x5b4>)
 8001746:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	3304      	adds	r3, #4
 800174c:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001754:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f899 	bl	8001894 <GAME_PLAY_Phase_Management>
		break;
 8001762:	e08d      	b.n	8001880 <GAME_PLAY_Management+0x62c>
	case second_player:
		if (state_game -> S_flag == 0){
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 800176a:	2b00      	cmp	r3, #0
 800176c:	d12b      	bne.n	80017c6 <GAME_PLAY_Management+0x572>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 8001770:	2200      	movs	r2, #0
 8001772:	9202      	str	r2, [sp, #8]
 8001774:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001778:	9201      	str	r2, [sp, #4]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	9200      	str	r2, [sp, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a20      	ldr	r2, [pc, #128]	; (8001804 <GAME_PLAY_Management+0x5b0>)
 8001782:	215a      	movs	r1, #90	; 0x5a
 8001784:	200f      	movs	r0, #15
 8001786:	f004 febc 	bl	8006502 <ST7735_WriteString>
			HAL_Delay(2000);
 800178a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800178e:	f005 fd2d 	bl	80071ec <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8001792:	2300      	movs	r3, #0
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2326      	movs	r3, #38	; 0x26
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	215a      	movs	r1, #90	; 0x5a
 800179c:	2000      	movs	r0, #0
 800179e:	f004 ffa5 	bl	80066ec <ST7735_FillRectangle>
			state_game->S_flag += 1;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <GAME_PLAY_Management+0x5b4>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <GAME_PLAY_Management+0x5b4>)
 80017c4:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80017cc:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	3304      	adds	r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	6839      	ldr	r1, [r7, #0]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f85a 	bl	8001894 <GAME_PLAY_Phase_Management>
		break;
 80017e0:	e04e      	b.n	8001880 <GAME_PLAY_Management+0x62c>
 80017e2:	bf00      	nop
 80017e4:	2400000c 	.word	0x2400000c
 80017e8:	08010750 	.word	0x08010750
 80017ec:	0801075c 	.word	0x0801075c
 80017f0:	24000014 	.word	0x24000014
 80017f4:	080107bc 	.word	0x080107bc
 80017f8:	080107c4 	.word	0x080107c4
 80017fc:	080107b0 	.word	0x080107b0
 8001800:	080107cc 	.word	0x080107cc
 8001804:	080107d4 	.word	0x080107d4
 8001808:	24000176 	.word	0x24000176
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2300      	movs	r3, #0
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2326      	movs	r3, #38	; 0x26
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	215a      	movs	r1, #90	; 0x5a
 800181a:	2000      	movs	r0, #0
 800181c:	f005 f84e 	bl	80068bc <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8001820:	2300      	movs	r3, #0
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	2300      	movs	r3, #0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2326      	movs	r3, #38	; 0x26
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	215a      	movs	r1, #90	; 0x5a
 800182e:	2000      	movs	r0, #0
 8001830:	f005 f844 	bl	80068bc <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 8001834:	20c8      	movs	r0, #200	; 0xc8
 8001836:	f005 fcd9 	bl	80071ec <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <GAME_PLAY_Management+0x634>)
 800183c:	2201      	movs	r2, #1
 800183e:	9203      	str	r2, [sp, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	9202      	str	r2, [sp, #8]
 8001844:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001848:	9201      	str	r2, [sp, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	9200      	str	r2, [sp, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0e      	ldr	r2, [pc, #56]	; (800188c <GAME_PLAY_Management+0x638>)
 8001852:	215a      	movs	r1, #90	; 0x5a
 8001854:	2014      	movs	r0, #20
 8001856:	f004 fee8 	bl	800662a <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <GAME_PLAY_Management+0x634>)
 800185c:	2200      	movs	r2, #0
 800185e:	9203      	str	r2, [sp, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	9202      	str	r2, [sp, #8]
 8001864:	221f      	movs	r2, #31
 8001866:	9201      	str	r2, [sp, #4]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	9200      	str	r2, [sp, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <GAME_PLAY_Management+0x63c>)
 8001870:	215a      	movs	r1, #90	; 0x5a
 8001872:	200f      	movs	r0, #15
 8001874:	f004 fed9 	bl	800662a <ST7735_WriteStringNSS>
		HAL_Delay(200);
 8001878:	20c8      	movs	r0, #200	; 0xc8
 800187a:	f005 fcb7 	bl	80071ec <HAL_Delay>
		break;
 800187e:	bf00      	nop
	}
}
 8001880:	bf00      	nop
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	24000014 	.word	0x24000014
 800188c:	080107e0 	.word	0x080107e0
 8001890:	080107e8 	.word	0x080107e8

08001894 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 800189a:	af04      	add	r7, sp, #16
 800189c:	f507 7418 	add.w	r4, r7, #608	; 0x260
 80018a0:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 80018a4:	6020      	str	r0, [r4, #0]
 80018a6:	f507 7018 	add.w	r0, r7, #608	; 0x260
 80018aa:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 80018ae:	6001      	str	r1, [r0, #0]
 80018b0:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80018b4:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 80018b8:	600a      	str	r2, [r1, #0]
 80018ba:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80018be:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80018c2:	6013      	str	r3, [r2, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 80018c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80018c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 80018d2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 80018d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80018da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 80018e4:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 80018e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80018ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80018f6:	f887 324d 	strb.w	r3, [r7, #589]	; 0x24d
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	Player dummyPlayer = {0};
 80018fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80018fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001902:	4618      	mov	r0, r3
 8001904:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8001908:	461a      	mov	r2, r3
 800190a:	2100      	movs	r1, #0
 800190c:	f00e fa9e 	bl	800fe4c <memset>

	switch (PAS) {
 8001910:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001914:	2b03      	cmp	r3, #3
 8001916:	f203 82b6 	bhi.w	8004e86 <GAME_PLAY_Phase_Management+0x35f2>
 800191a:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <GAME_PLAY_Phase_Management+0x8c>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	08004e79 	.word	0x08004e79
 8001924:	08001931 	.word	0x08001931
 8001928:	08001a89 	.word	0x08001a89
 800192c:	08003a87 	.word	0x08003a87
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 8001930:	48b5      	ldr	r0, [pc, #724]	; (8001c08 <GAME_PLAY_Phase_Management+0x374>)
 8001932:	f00b ff2f 	bl	800d794 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 8001936:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800193a:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 800193e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001942:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001946:	6811      	ldr	r1, [r2, #0]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	f003 fd7b 	bl	8005444 <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800194e:	4baf      	ldr	r3, [pc, #700]	; (8001c0c <GAME_PLAY_Phase_Management+0x378>)
 8001950:	2200      	movs	r2, #0
 8001952:	9202      	str	r2, [sp, #8]
 8001954:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001958:	9201      	str	r2, [sp, #4]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4aab      	ldr	r2, [pc, #684]	; (8001c10 <GAME_PLAY_Phase_Management+0x37c>)
 8001962:	2123      	movs	r1, #35	; 0x23
 8001964:	206e      	movs	r0, #110	; 0x6e
 8001966:	f004 fdcc 	bl	8006502 <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800196a:	4ba8      	ldr	r3, [pc, #672]	; (8001c0c <GAME_PLAY_Phase_Management+0x378>)
 800196c:	2200      	movs	r2, #0
 800196e:	9202      	str	r2, [sp, #8]
 8001970:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001974:	9201      	str	r2, [sp, #4]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	9200      	str	r2, [sp, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4aa4      	ldr	r2, [pc, #656]	; (8001c10 <GAME_PLAY_Phase_Management+0x37c>)
 800197e:	2123      	movs	r1, #35	; 0x23
 8001980:	206e      	movs	r0, #110	; 0x6e
 8001982:	f004 fe08 	bl	8006596 <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001986:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800198a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b9e      	ldr	r3, [pc, #632]	; (8001c0c <GAME_PLAY_Phase_Management+0x378>)
 8001994:	9203      	str	r2, [sp, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	9202      	str	r2, [sp, #8]
 800199a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199e:	9201      	str	r2, [sp, #4]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	9200      	str	r2, [sp, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a9b      	ldr	r2, [pc, #620]	; (8001c14 <GAME_PLAY_Phase_Management+0x380>)
 80019a8:	215a      	movs	r1, #90	; 0x5a
 80019aa:	2005      	movs	r0, #5
 80019ac:	f004 fe3d 	bl	800662a <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80019b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019b4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	4b93      	ldr	r3, [pc, #588]	; (8001c0c <GAME_PLAY_Phase_Management+0x378>)
 80019be:	9203      	str	r2, [sp, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	9202      	str	r2, [sp, #8]
 80019c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c8:	9201      	str	r2, [sp, #4]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	9200      	str	r2, [sp, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a91      	ldr	r2, [pc, #580]	; (8001c18 <GAME_PLAY_Phase_Management+0x384>)
 80019d2:	215a      	movs	r1, #90	; 0x5a
 80019d4:	2005      	movs	r0, #5
 80019d6:	f004 fe28 	bl	800662a <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80019da:	2101      	movs	r1, #1
 80019dc:	488f      	ldr	r0, [pc, #572]	; (8001c1c <GAME_PLAY_Phase_Management+0x388>)
 80019de:	f008 fd53 	bl	800a488 <HAL_GPIO_ReadPin>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f043 8249 	bne.w	8004e7c <GAME_PLAY_Phase_Management+0x35e8>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f004 fff0 	bl	80069d0 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f004 fffe 	bl	80069f2 <ST7735_FillScreen1>
			MainGUI();
 80019f6:	f003 fc65 	bl	80052c4 <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 80019fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2202      	movs	r2, #2
 8001a06:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001a0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a0e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8001a1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a1e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 8001a28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a2c:	f005 fbde 	bl	80071ec <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001a30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a34:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	781a      	ldrb	r2, [r3, #0]
 8001a3c:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <GAME_PLAY_Phase_Management+0x378>)
 8001a3e:	9203      	str	r2, [sp, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	9202      	str	r2, [sp, #8]
 8001a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a48:	9201      	str	r2, [sp, #4]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	9200      	str	r2, [sp, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a70      	ldr	r2, [pc, #448]	; (8001c14 <GAME_PLAY_Phase_Management+0x380>)
 8001a52:	215a      	movs	r1, #90	; 0x5a
 8001a54:	2005      	movs	r0, #5
 8001a56:	f004 fde8 	bl	800662a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001a5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	4b69      	ldr	r3, [pc, #420]	; (8001c0c <GAME_PLAY_Phase_Management+0x378>)
 8001a68:	9203      	str	r2, [sp, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	9202      	str	r2, [sp, #8]
 8001a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a72:	9201      	str	r2, [sp, #4]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	9200      	str	r2, [sp, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a69      	ldr	r2, [pc, #420]	; (8001c20 <GAME_PLAY_Phase_Management+0x38c>)
 8001a7c:	215a      	movs	r1, #90	; 0x5a
 8001a7e:	2005      	movs	r0, #5
 8001a80:	f004 fdd3 	bl	800662a <ST7735_WriteStringNSS>
		}
		break;
 8001a84:	f003 b9fa 	b.w	8004e7c <GAME_PLAY_Phase_Management+0x35e8>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 8001a88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a8c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8001a90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a94:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001a98:	6811      	ldr	r1, [r2, #0]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	f003 fcd2 	bl	8005444 <LCDvalue>

		switch (PMS)
 8001aa0:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8001aa4:	2b07      	cmp	r3, #7
 8001aa6:	f203 81eb 	bhi.w	8004e80 <GAME_PLAY_Phase_Management+0x35ec>
 8001aaa:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <GAME_PLAY_Phase_Management+0x21c>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08003a5d 	.word	0x08003a5d
 8001ab4:	08001ad1 	.word	0x08001ad1
 8001ab8:	08001c85 	.word	0x08001c85
 8001abc:	08001def 	.word	0x08001def
 8001ac0:	08002375 	.word	0x08002375
 8001ac4:	08002a31 	.word	0x08002a31
 8001ac8:	08002821 	.word	0x08002821
 8001acc:	08002607 	.word	0x08002607
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 8001ad0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ad4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 80a7 	bne.w	8001c30 <GAME_PLAY_Phase_Management+0x39c>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <GAME_PLAY_Phase_Management+0x378>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	9202      	str	r2, [sp, #8]
 8001ae8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001aec:	9201      	str	r2, [sp, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	9200      	str	r2, [sp, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <GAME_PLAY_Phase_Management+0x390>)
 8001af6:	2123      	movs	r1, #35	; 0x23
 8001af8:	206e      	movs	r0, #110	; 0x6e
 8001afa:	f004 fd02 	bl	8006502 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001afe:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <GAME_PLAY_Phase_Management+0x378>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	9202      	str	r2, [sp, #8]
 8001b04:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001b08:	9201      	str	r2, [sp, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a44      	ldr	r2, [pc, #272]	; (8001c24 <GAME_PLAY_Phase_Management+0x390>)
 8001b12:	2123      	movs	r1, #35	; 0x23
 8001b14:	206e      	movs	r0, #110	; 0x6e
 8001b16:	f004 fd3e 	bl	8006596 <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	483f      	ldr	r0, [pc, #252]	; (8001c1c <GAME_PLAY_Phase_Management+0x388>)
 8001b1e:	f008 fcb3 	bl	800a488 <HAL_GPIO_ReadPin>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d15b      	bne.n	8001be0 <GAME_PLAY_Phase_Management+0x34c>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f004 ff51 	bl	80069d0 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f004 ff5f 	bl	80069f2 <ST7735_FillScreen1>
					MainGUI();
 8001b34:	f003 fbc6 	bl	80052c4 <MainGUI>
					state_game->action = 50;
 8001b38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b3c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2232      	movs	r2, #50	; 0x32
 8001b44:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001b46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b4a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 8001b56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b5a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f003 fb8f 	bl	8005282 <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 8001b64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b68:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001b74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1000);
 8001b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b88:	f005 fb30 	bl	80071ec <HAL_Delay>
					ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8001b8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b90:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <GAME_PLAY_Phase_Management+0x378>)
 8001b9a:	9203      	str	r2, [sp, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	9202      	str	r2, [sp, #8]
 8001ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba4:	9201      	str	r2, [sp, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	9200      	str	r2, [sp, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <GAME_PLAY_Phase_Management+0x394>)
 8001bae:	215a      	movs	r1, #90	; 0x5a
 8001bb0:	2005      	movs	r0, #5
 8001bb2:	f004 fd3a 	bl	800662a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8001bb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001bba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <GAME_PLAY_Phase_Management+0x378>)
 8001bc4:	9203      	str	r2, [sp, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	9202      	str	r2, [sp, #8]
 8001bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bce:	9201      	str	r2, [sp, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	9200      	str	r2, [sp, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <GAME_PLAY_Phase_Management+0x398>)
 8001bd8:	215a      	movs	r1, #90	; 0x5a
 8001bda:	2005      	movs	r0, #5
 8001bdc:	f004 fd25 	bl	800662a <ST7735_WriteStringNSS>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001be0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001be4:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8001be8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001bec:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8001bf0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001bf4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	6809      	ldr	r1, [r1, #0]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	f7fe fda9 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8001c02:	f001 bf2e 	b.w	8003a62 <GAME_PLAY_Phase_Management+0x21ce>
 8001c06:	bf00      	nop
 8001c08:	240002e8 	.word	0x240002e8
 8001c0c:	2400000c 	.word	0x2400000c
 8001c10:	080107f4 	.word	0x080107f4
 8001c14:	080107f8 	.word	0x080107f8
 8001c18:	08010808 	.word	0x08010808
 8001c1c:	58020800 	.word	0x58020800
 8001c20:	08010814 	.word	0x08010814
 8001c24:	08010824 	.word	0x08010824
 8001c28:	08010828 	.word	0x08010828
 8001c2c:	08010838 	.word	0x08010838
			else if (state_game->action == 1)
 8001c30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c34:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	f041 8710 	bne.w	8003a62 <GAME_PLAY_Phase_Management+0x21ce>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001c42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c46:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2300      	movs	r3, #0
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2326      	movs	r3, #38	; 0x26
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	215a      	movs	r1, #90	; 0x5a
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f004 fe2e 	bl	80068bc <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 8001c60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c64:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 8001c70:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c74:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001c80:	f001 beef 	b.w	8003a62 <GAME_PLAY_Phase_Management+0x21ce>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001c84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	781a      	ldrb	r2, [r3, #0]
 8001c90:	4ba6      	ldr	r3, [pc, #664]	; (8001f2c <GAME_PLAY_Phase_Management+0x698>)
 8001c92:	9203      	str	r2, [sp, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	9202      	str	r2, [sp, #8]
 8001c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9c:	9201      	str	r2, [sp, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	9200      	str	r2, [sp, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4aa2      	ldr	r2, [pc, #648]	; (8001f30 <GAME_PLAY_Phase_Management+0x69c>)
 8001ca6:	215a      	movs	r1, #90	; 0x5a
 8001ca8:	2005      	movs	r0, #5
 8001caa:	f004 fcbe 	bl	800662a <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001cae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001cb2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001cbc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8001cc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001cc4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cce:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

			if (state_game->action == 1)
 8001cd2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001cd6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d147      	bne.n	8001d72 <GAME_PLAY_Phase_Management+0x4de>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8001ce2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ce6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	789b      	ldrb	r3, [r3, #2]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <GAME_PLAY_Phase_Management+0x478>
					ptrYugiohCard_src->cardState = 0;
 8001cf2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001cfa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001cfe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2202      	movs	r2, #2
 8001d06:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8001d08:	f001 beae 	b.w	8003a68 <GAME_PLAY_Phase_Management+0x21d4>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8001d0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d10:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f041 86a5 	bne.w	8003a68 <GAME_PLAY_Phase_Management+0x21d4>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 8001d1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d22:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001d26:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	f003 fa5c 	bl	80051e8 <YUGIOH_Check_Spell_On_board>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
					if (idxC != 255) {
 8001d36:	f897 3232 	ldrb.w	r3, [r7, #562]	; 0x232
 8001d3a:	2bff      	cmp	r3, #255	; 0xff
 8001d3c:	d00c      	beq.n	8001d58 <GAME_PLAY_Phase_Management+0x4c4>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 8001d3e:	f897 3232 	ldrb.w	r3, [r7, #562]	; 0x232
 8001d42:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8001d46:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	3308      	adds	r3, #8
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fccd 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 8001d58:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001d60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d64:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	701a      	strb	r2, [r3, #0]
			break;
 8001d6e:	f001 be7b 	b.w	8003a68 <GAME_PLAY_Phase_Management+0x21d4>
			else if (state_game->action == 2)
 8001d72:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d76:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	f041 8672 	bne.w	8003a68 <GAME_PLAY_Phase_Management+0x21d4>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001d84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2326      	movs	r3, #38	; 0x26
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	215a      	movs	r1, #90	; 0x5a
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f004 fd8d 	bl	80068bc <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001da2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001da6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2300      	movs	r3, #0
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2326      	movs	r3, #38	; 0x26
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	215a      	movs	r1, #90	; 0x5a
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f004 fd7e 	bl	80068bc <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001dc0:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8001dc4:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8001dc8:	f7fe fc5c 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8001dcc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001dd0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8001dda:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001dde:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2203      	movs	r2, #3
 8001de6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001dea:	f001 be3d 	b.w	8003a68 <GAME_PLAY_Phase_Management+0x21d4>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001dee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001df2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001dfc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

			if (state_game->action == 3)
 8001e00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e04:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	f041 862e 	bne.w	8003a6e <GAME_PLAY_Phase_Management+0x21da>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8001e12:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001e16:	785b      	ldrb	r3, [r3, #1]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	f040 8093 	bne.w	8001f44 <GAME_PLAY_Phase_Management+0x6b0>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001e1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e22:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <GAME_PLAY_Phase_Management+0x698>)
 8001e2c:	9203      	str	r2, [sp, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	9202      	str	r2, [sp, #8]
 8001e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e36:	9201      	str	r2, [sp, #4]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	9200      	str	r2, [sp, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3d      	ldr	r2, [pc, #244]	; (8001f34 <GAME_PLAY_Phase_Management+0x6a0>)
 8001e40:	215a      	movs	r1, #90	; 0x5a
 8001e42:	2005      	movs	r0, #5
 8001e44:	f004 fbf1 	bl	800662a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e48:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e4c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <GAME_PLAY_Phase_Management+0x698>)
 8001e56:	9203      	str	r2, [sp, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	9202      	str	r2, [sp, #8]
 8001e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e60:	9201      	str	r2, [sp, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	9200      	str	r2, [sp, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a33      	ldr	r2, [pc, #204]	; (8001f38 <GAME_PLAY_Phase_Management+0x6a4>)
 8001e6a:	215a      	movs	r1, #90	; 0x5a
 8001e6c:	2005      	movs	r0, #5
 8001e6e:	f004 fbdc 	bl	800662a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e72:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e76:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <GAME_PLAY_Phase_Management+0x698>)
 8001e80:	9203      	str	r2, [sp, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	9202      	str	r2, [sp, #8]
 8001e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8a:	9201      	str	r2, [sp, #4]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	9200      	str	r2, [sp, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <GAME_PLAY_Phase_Management+0x6a8>)
 8001e94:	2169      	movs	r1, #105	; 0x69
 8001e96:	2005      	movs	r0, #5
 8001e98:	f004 fbc7 	bl	800662a <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 8001e9c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001ea4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001ea8:	799a      	ldrb	r2, [r3, #6]
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <GAME_PLAY_Phase_Management+0x6ac>)
 8001eac:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb0:	0899      	lsrs	r1, r3, #2
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	440b      	add	r3, r1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001ec0:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8001ec4:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8001ec8:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	3308      	adds	r3, #8
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001ed8:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8001edc:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8001ee0:	f7fe fbd0 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001ee4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ee8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	f7ff f879 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001ef2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ef6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001f00:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fbbd 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8001f0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f0e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001f18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f1c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8001f28:	f001 bda1 	b.w	8003a6e <GAME_PLAY_Phase_Management+0x21da>
 8001f2c:	2400000c 	.word	0x2400000c
 8001f30:	08010848 	.word	0x08010848
 8001f34:	08010858 	.word	0x08010858
 8001f38:	08010868 	.word	0x08010868
 8001f3c:	08010878 	.word	0x08010878
 8001f40:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 2)
 8001f44:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	f040 8146 	bne.w	80021dc <GAME_PLAY_Phase_Management+0x948>
					state_game->count_chain = 1;
 8001f50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f54:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 8001f5e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001f62:	789b      	ldrb	r3, [r3, #2]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	f040 80a7 	bne.w	80020b8 <GAME_PLAY_Phase_Management+0x824>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001f6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f6e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	4b92      	ldr	r3, [pc, #584]	; (80021c0 <GAME_PLAY_Phase_Management+0x92c>)
 8001f78:	9203      	str	r2, [sp, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	9202      	str	r2, [sp, #8]
 8001f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f82:	9201      	str	r2, [sp, #4]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	9200      	str	r2, [sp, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a8e      	ldr	r2, [pc, #568]	; (80021c4 <GAME_PLAY_Phase_Management+0x930>)
 8001f8c:	215a      	movs	r1, #90	; 0x5a
 8001f8e:	2005      	movs	r0, #5
 8001f90:	f004 fb4b 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001f94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f98:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	4b87      	ldr	r3, [pc, #540]	; (80021c0 <GAME_PLAY_Phase_Management+0x92c>)
 8001fa2:	9203      	str	r2, [sp, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	9202      	str	r2, [sp, #8]
 8001fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fac:	9201      	str	r2, [sp, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	9200      	str	r2, [sp, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a84      	ldr	r2, [pc, #528]	; (80021c8 <GAME_PLAY_Phase_Management+0x934>)
 8001fb6:	215a      	movs	r1, #90	; 0x5a
 8001fb8:	2005      	movs	r0, #5
 8001fba:	f004 fb36 	bl	800662a <ST7735_WriteStringNSS>
						state_game->action = 4;
 8001fbe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fc2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8001fcc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fd0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	f7ff f8b0 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001fda:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fde:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8001fee:	f7fe fb49 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8001ff2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ff6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002000:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 800200a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800200e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002018:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8002022:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002026:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002030:	3301      	adds	r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002038:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002042:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002046:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	2300      	movs	r3, #0
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2326      	movs	r3, #38	; 0x26
 8002056:	2280      	movs	r2, #128	; 0x80
 8002058:	215a      	movs	r1, #90	; 0x5a
 800205a:	2000      	movs	r0, #0
 800205c:	f004 fc2e 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002060:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002064:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	2300      	movs	r3, #0
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2326      	movs	r3, #38	; 0x26
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	215a      	movs	r1, #90	; 0x5a
 8002078:	2000      	movs	r0, #0
 800207a:	f004 fc1f 	bl	80068bc <ST7735_FillRectangleNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800207e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002082:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	f7fe ffac 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800208c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002090:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800209a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe faf0 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 80020a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2207      	movs	r2, #7
 80020b0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80020b4:	f001 bcdb 	b.w	8003a6e <GAME_PLAY_Phase_Management+0x21da>
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80020b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	781a      	ldrb	r2, [r3, #0]
 80020c4:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <GAME_PLAY_Phase_Management+0x92c>)
 80020c6:	9203      	str	r2, [sp, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	9202      	str	r2, [sp, #8]
 80020cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d0:	9201      	str	r2, [sp, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	9200      	str	r2, [sp, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3c      	ldr	r2, [pc, #240]	; (80021cc <GAME_PLAY_Phase_Management+0x938>)
 80020da:	215a      	movs	r1, #90	; 0x5a
 80020dc:	2005      	movs	r0, #5
 80020de:	f004 faa4 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80020e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020e6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <GAME_PLAY_Phase_Management+0x92c>)
 80020f0:	9203      	str	r2, [sp, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	9202      	str	r2, [sp, #8]
 80020f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020fa:	9201      	str	r2, [sp, #4]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	9200      	str	r2, [sp, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a33      	ldr	r2, [pc, #204]	; (80021d0 <GAME_PLAY_Phase_Management+0x93c>)
 8002104:	215a      	movs	r1, #90	; 0x5a
 8002106:	2005      	movs	r0, #5
 8002108:	f004 fa8f 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800210c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002110:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <GAME_PLAY_Phase_Management+0x92c>)
 800211a:	9203      	str	r2, [sp, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	9202      	str	r2, [sp, #8]
 8002120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002124:	9201      	str	r2, [sp, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	9200      	str	r2, [sp, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <GAME_PLAY_Phase_Management+0x940>)
 800212e:	2169      	movs	r1, #105	; 0x69
 8002130:	2005      	movs	r0, #5
 8002132:	f004 fa7a 	bl	800662a <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002136:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800213a:	799a      	ldrb	r2, [r3, #6]
 800213c:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <GAME_PLAY_Phase_Management+0x944>)
 800213e:	fba3 1302 	umull	r1, r3, r3, r2
 8002142:	0899      	lsrs	r1, r3, #2
 8002144:	460b      	mov	r3, r1
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	440b      	add	r3, r1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002152:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002156:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800215a:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	3308      	adds	r3, #8
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	4413      	add	r3, r2
 8002166:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800216a:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800216e:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8002172:	f7fe fa87 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002176:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800217a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	f7fe ff30 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002184:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002188:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002192:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fa74 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 800219c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80021aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80021ba:	f001 bc58 	b.w	8003a6e <GAME_PLAY_Phase_Management+0x21da>
 80021be:	bf00      	nop
 80021c0:	2400000c 	.word	0x2400000c
 80021c4:	08010880 	.word	0x08010880
 80021c8:	08010898 	.word	0x08010898
 80021cc:	08010858 	.word	0x08010858
 80021d0:	08010868 	.word	0x08010868
 80021d4:	08010878 	.word	0x08010878
 80021d8:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 1)
 80021dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	f041 8443 	bne.w	8003a6e <GAME_PLAY_Phase_Management+0x21da>
					state_game->test = 2;
 80021e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 80021f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80021fc:	78db      	ldrb	r3, [r3, #3]
 80021fe:	2b06      	cmp	r3, #6
 8002200:	f200 80a0 	bhi.w	8002344 <GAME_PLAY_Phase_Management+0xab0>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002204:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002208:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	4bc0      	ldr	r3, [pc, #768]	; (8002514 <GAME_PLAY_Phase_Management+0xc80>)
 8002212:	9203      	str	r2, [sp, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	9202      	str	r2, [sp, #8]
 8002218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221c:	9201      	str	r2, [sp, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	9200      	str	r2, [sp, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4abc      	ldr	r2, [pc, #752]	; (8002518 <GAME_PLAY_Phase_Management+0xc84>)
 8002226:	215a      	movs	r1, #90	; 0x5a
 8002228:	2005      	movs	r0, #5
 800222a:	f004 f9fe 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 800222e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002232:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	4bb6      	ldr	r3, [pc, #728]	; (8002514 <GAME_PLAY_Phase_Management+0xc80>)
 800223c:	9203      	str	r2, [sp, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	9202      	str	r2, [sp, #8]
 8002242:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002246:	9201      	str	r2, [sp, #4]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	9200      	str	r2, [sp, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4ab3      	ldr	r2, [pc, #716]	; (800251c <GAME_PLAY_Phase_Management+0xc88>)
 8002250:	2169      	movs	r1, #105	; 0x69
 8002252:	2005      	movs	r0, #5
 8002254:	f004 f9e9 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002258:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800225c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	4bab      	ldr	r3, [pc, #684]	; (8002514 <GAME_PLAY_Phase_Management+0xc80>)
 8002266:	9203      	str	r2, [sp, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	9202      	str	r2, [sp, #8]
 800226c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002270:	9201      	str	r2, [sp, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	9200      	str	r2, [sp, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4aa9      	ldr	r2, [pc, #676]	; (8002520 <GAME_PLAY_Phase_Management+0xc8c>)
 800227a:	215a      	movs	r1, #90	; 0x5a
 800227c:	2005      	movs	r0, #5
 800227e:	f004 f9d4 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8002282:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002286:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	4ba1      	ldr	r3, [pc, #644]	; (8002514 <GAME_PLAY_Phase_Management+0xc80>)
 8002290:	9203      	str	r2, [sp, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	9202      	str	r2, [sp, #8]
 8002296:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800229a:	9201      	str	r2, [sp, #4]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	9200      	str	r2, [sp, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a9e      	ldr	r2, [pc, #632]	; (800251c <GAME_PLAY_Phase_Management+0xc88>)
 80022a4:	2169      	movs	r1, #105	; 0x69
 80022a6:	2005      	movs	r0, #5
 80022a8:	f004 f9bf 	bl	800662a <ST7735_WriteStringNSS>
						state_game->test = 1;
 80022ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80022b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80022bc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80022c0:	799a      	ldrb	r2, [r3, #6]
 80022c2:	4b98      	ldr	r3, [pc, #608]	; (8002524 <GAME_PLAY_Phase_Management+0xc90>)
 80022c4:	fba3 1302 	umull	r1, r3, r3, r2
 80022c8:	0899      	lsrs	r1, r3, #2
 80022ca:	460b      	mov	r3, r1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	440b      	add	r3, r1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80022d8:	f897 3235 	ldrb.w	r3, [r7, #565]	; 0x235
 80022dc:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80022e0:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	3308      	adds	r3, #8
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80022f0:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80022f4:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80022f8:	f7fe f9c4 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80022fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002300:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	f7fe fe6d 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800230a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800230e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002318:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f9b1 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8002322:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002326:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002330:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002334:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002340:	f001 bb95 	b.w	8003a6e <GAME_PLAY_Phase_Management+0x21da>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002344:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002348:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	f7fe fe49 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8002352:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002356:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2204      	movs	r2, #4
 800235e:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8002360:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002364:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2204      	movs	r2, #4
 800236c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002370:	f001 bb7d 	b.w	8003a6e <GAME_PLAY_Phase_Management+0x21da>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8002374:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002378:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002382:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

			if (state_game->action == 4)
 8002386:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800238a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b04      	cmp	r3, #4
 8002394:	d111      	bne.n	80023ba <GAME_PLAY_Phase_Management+0xb26>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8002396:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800239a:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800239e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023a2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80023a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023aa:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	6809      	ldr	r1, [r1, #0]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	f7fe f9ce 	bl	8000754 <Player_Reading_Card>
 80023b8:	e0cf      	b.n	800255a <GAME_PLAY_Phase_Management+0xcc6>
			}
			else if (state_game->action == 5)
 80023ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d111      	bne.n	80023ee <GAME_PLAY_Phase_Management+0xb5a>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80023ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023ce:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 80023d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023d6:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80023da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023de:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	6809      	ldr	r1, [r1, #0]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	f7fe f9b4 	bl	8000754 <Player_Reading_Card>
 80023ec:	e0b5      	b.n	800255a <GAME_PLAY_Phase_Management+0xcc6>
			}
			else if (state_game->action == 6)
 80023ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023f2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	f040 80ad 	bne.w	800255a <GAME_PLAY_Phase_Management+0xcc6>
			{
				uint8_t monsterflag = 0 ;
 8002400:	2300      	movs	r3, #0
 8002402:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 8002406:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800240a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002414:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8002418:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800241c:	78db      	ldrb	r3, [r3, #3]
 800241e:	2b04      	cmp	r3, #4
 8002420:	d804      	bhi.n	800242c <GAME_PLAY_Phase_Management+0xb98>
				{
					monsterflag += 1;
 8002422:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8002426:	3301      	adds	r3, #1
 8002428:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}
				ptrYugiohCard_dst++;
 800242c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002430:	3310      	adds	r3, #16
 8002432:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8002436:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800243a:	78db      	ldrb	r3, [r3, #3]
 800243c:	2b04      	cmp	r3, #4
 800243e:	d804      	bhi.n	800244a <GAME_PLAY_Phase_Management+0xbb6>
				{
					monsterflag += 1;
 8002440:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8002444:	3301      	adds	r3, #1
 8002446:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}

				if (monsterflag == 2)
 800244a:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 800244e:	2b02      	cmp	r3, #2
 8002450:	d16a      	bne.n	8002528 <GAME_PLAY_Phase_Management+0xc94>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002452:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002456:	799a      	ldrb	r2, [r3, #6]
 8002458:	4b32      	ldr	r3, [pc, #200]	; (8002524 <GAME_PLAY_Phase_Management+0xc90>)
 800245a:	fba3 1302 	umull	r1, r3, r3, r2
 800245e:	0899      	lsrs	r1, r3, #2
 8002460:	460b      	mov	r3, r1
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	440b      	add	r3, r1
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 800246e:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8002472:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002476:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	3308      	adds	r3, #8
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	4413      	add	r3, r2
 8002482:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002486:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800248a:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800248e:	f7fe f8f9 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 8002492:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002496:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80024a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024a4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024a8:	4611      	mov	r1, r2
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	f7fe fe91 	bl	80011d2 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 80024b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024b4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 80024be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024c2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024c6:	4611      	mov	r1, r2
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	f7fe fe82 	bl	80011d2 <YUGIOH_To_GY>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80024ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	f7fe fd84 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80024dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80024ea:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f8c8 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80024f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002502:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002506:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8002512:	e022      	b.n	800255a <GAME_PLAY_Phase_Management+0xcc6>
 8002514:	2400000c 	.word	0x2400000c
 8002518:	080108ac 	.word	0x080108ac
 800251c:	080108b8 	.word	0x080108b8
 8002520:	080108c4 	.word	0x080108c4
 8002524:	aaaaaaab 	.word	0xaaaaaaab
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002528:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800252c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	f7fe fd57 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 8002536:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800253a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8002544:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002548:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f7fe f895 	bl	8000684 <YUGIOH_card_copy>
				}
			}

			ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800255a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800255e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4ba8      	ldr	r3, [pc, #672]	; (8002808 <GAME_PLAY_Phase_Management+0xf74>)
 8002568:	9203      	str	r2, [sp, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	9202      	str	r2, [sp, #8]
 800256e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002572:	9201      	str	r2, [sp, #4]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	9200      	str	r2, [sp, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4aa4      	ldr	r2, [pc, #656]	; (800280c <GAME_PLAY_Phase_Management+0xf78>)
 800257c:	215a      	movs	r1, #90	; 0x5a
 800257e:	2005      	movs	r0, #5
 8002580:	f004 f853 	bl	800662a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8002584:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002588:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	4b9d      	ldr	r3, [pc, #628]	; (8002808 <GAME_PLAY_Phase_Management+0xf74>)
 8002592:	9203      	str	r2, [sp, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	9202      	str	r2, [sp, #8]
 8002598:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800259c:	9201      	str	r2, [sp, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	9200      	str	r2, [sp, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a9a      	ldr	r2, [pc, #616]	; (8002810 <GAME_PLAY_Phase_Management+0xf7c>)
 80025a6:	2169      	movs	r1, #105	; 0x69
 80025a8:	2005      	movs	r0, #5
 80025aa:	f004 f83e 	bl	800662a <ST7735_WriteStringNSS>

			ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80025ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025b2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	4b93      	ldr	r3, [pc, #588]	; (8002808 <GAME_PLAY_Phase_Management+0xf74>)
 80025bc:	9203      	str	r2, [sp, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	9202      	str	r2, [sp, #8]
 80025c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c6:	9201      	str	r2, [sp, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	9200      	str	r2, [sp, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a91      	ldr	r2, [pc, #580]	; (8002814 <GAME_PLAY_Phase_Management+0xf80>)
 80025d0:	215a      	movs	r1, #90	; 0x5a
 80025d2:	2005      	movs	r0, #5
 80025d4:	f004 f829 	bl	800662a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80025d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025dc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	4b88      	ldr	r3, [pc, #544]	; (8002808 <GAME_PLAY_Phase_Management+0xf74>)
 80025e6:	9203      	str	r2, [sp, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	9202      	str	r2, [sp, #8]
 80025ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80025f0:	9201      	str	r2, [sp, #4]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	9200      	str	r2, [sp, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a85      	ldr	r2, [pc, #532]	; (8002810 <GAME_PLAY_Phase_Management+0xf7c>)
 80025fa:	2169      	movs	r1, #105	; 0x69
 80025fc:	2005      	movs	r0, #5
 80025fe:	f004 f814 	bl	800662a <ST7735_WriteStringNSS>
			break;
 8002602:	f001 ba3e 	b.w	8003a82 <GAME_PLAY_Phase_Management+0x21ee>
		case chaining_main_DEF:

			// Current state_game->action = 4

			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002606:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800260a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	4b7d      	ldr	r3, [pc, #500]	; (8002808 <GAME_PLAY_Phase_Management+0xf74>)
 8002614:	9203      	str	r2, [sp, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	9202      	str	r2, [sp, #8]
 800261a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800261e:	9201      	str	r2, [sp, #4]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	9200      	str	r2, [sp, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7c      	ldr	r2, [pc, #496]	; (8002818 <GAME_PLAY_Phase_Management+0xf84>)
 8002628:	215a      	movs	r1, #90	; 0x5a
 800262a:	2005      	movs	r0, #5
 800262c:	f003 fffd 	bl	800662a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002630:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002634:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	4b72      	ldr	r3, [pc, #456]	; (8002808 <GAME_PLAY_Phase_Management+0xf74>)
 800263e:	9203      	str	r2, [sp, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	9202      	str	r2, [sp, #8]
 8002644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002648:	9201      	str	r2, [sp, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	9200      	str	r2, [sp, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a72      	ldr	r2, [pc, #456]	; (800281c <GAME_PLAY_Phase_Management+0xf88>)
 8002652:	215a      	movs	r1, #90	; 0x5a
 8002654:	2005      	movs	r0, #5
 8002656:	f003 ffe8 	bl	800662a <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 800265a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800265e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b04      	cmp	r3, #4
 8002668:	d138      	bne.n	80026dc <GAME_PLAY_Phase_Management+0xe48>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 800266a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800266e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	789b      	ldrb	r3, [r3, #2]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11d      	bne.n	80026b6 <GAME_PLAY_Phase_Management+0xe22>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800267a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800267e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	2300      	movs	r3, #0
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2326      	movs	r3, #38	; 0x26
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	215a      	movs	r1, #90	; 0x5a
 8002692:	2000      	movs	r0, #0
 8002694:	f004 f912 	bl	80068bc <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8002698:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800269c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2205      	movs	r2, #5
 80026a4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 80026a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card(RFIDmain,state_game,playerDef);
 80026b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026ba:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80026be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026c2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80026c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026ca:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	6809      	ldr	r1, [r1, #0]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	f7fe f83e 	bl	8000754 <Player_Reading_Card>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 80026d8:	f001 b9cc 	b.w	8003a74 <GAME_PLAY_Phase_Management+0x21e0>
			else if ((state_game->action == 5 )){
 80026dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	f041 81c3 	bne.w	8003a74 <GAME_PLAY_Phase_Management+0x21e0>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80026ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	2300      	movs	r3, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2326      	movs	r3, #38	; 0x26
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	215a      	movs	r1, #90	; 0x5a
 8002706:	2000      	movs	r0, #0
 8002708:	f004 f8d8 	bl	80068bc <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 800270c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002710:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800271a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 800271e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002722:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002726:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	f002 fd30 	bl	8005190 <YUGIOH_Check_Trap_On_board>
 8002730:	4603      	mov	r3, r0
 8002732:	f887 3238 	strb.w	r3, [r7, #568]	; 0x238
				if (idx != 255)
 8002736:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800273a:	2bff      	cmp	r3, #255	; 0xff
 800273c:	d05b      	beq.n	80027f6 <GAME_PLAY_Phase_Management+0xf62>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 800273e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002742:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	f7fe fcf7 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 800274c:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8002750:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002754:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	3308      	adds	r3, #8
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	4413      	add	r3, r2
 8002760:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8002764:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002768:	2200      	movs	r2, #0
 800276a:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 800276c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002770:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800277a:	4619      	mov	r1, r3
 800277c:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8002780:	f7fd ff80 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8002784:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002788:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002792:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 800279c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80027aa:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 80027b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80027c2:	3301      	adds	r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027ca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 80027d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027d8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2206      	movs	r2, #6
 80027e0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 80027e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027e8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2204      	movs	r2, #4
 80027f0:	701a      	strb	r2, [r3, #0]
			break;
 80027f2:	f001 b93f 	b.w	8003a74 <GAME_PLAY_Phase_Management+0x21e0>
					state_game->action = 4;
 80027f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027fa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2204      	movs	r2, #4
 8002802:	701a      	strb	r2, [r3, #0]
			break;
 8002804:	f001 b936 	b.w	8003a74 <GAME_PLAY_Phase_Management+0x21e0>
 8002808:	2400000c 	.word	0x2400000c
 800280c:	080108ac 	.word	0x080108ac
 8002810:	080108b8 	.word	0x080108b8
 8002814:	080108c4 	.word	0x080108c4
 8002818:	080108d4 	.word	0x080108d4
 800281c:	080108ec 	.word	0x080108ec
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002820:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002824:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	4b7d      	ldr	r3, [pc, #500]	; (8002a24 <GAME_PLAY_Phase_Management+0x1190>)
 800282e:	9203      	str	r2, [sp, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	9202      	str	r2, [sp, #8]
 8002834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002838:	9201      	str	r2, [sp, #4]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	9200      	str	r2, [sp, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a79      	ldr	r2, [pc, #484]	; (8002a28 <GAME_PLAY_Phase_Management+0x1194>)
 8002842:	215a      	movs	r1, #90	; 0x5a
 8002844:	2005      	movs	r0, #5
 8002846:	f003 fef0 	bl	800662a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800284a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800284e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	4b73      	ldr	r3, [pc, #460]	; (8002a24 <GAME_PLAY_Phase_Management+0x1190>)
 8002858:	9203      	str	r2, [sp, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	9202      	str	r2, [sp, #8]
 800285e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002862:	9201      	str	r2, [sp, #4]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	9200      	str	r2, [sp, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a70      	ldr	r2, [pc, #448]	; (8002a2c <GAME_PLAY_Phase_Management+0x1198>)
 800286c:	215a      	movs	r1, #90	; 0x5a
 800286e:	2005      	movs	r0, #5
 8002870:	f003 fedb 	bl	800662a <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8002874:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002878:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d148      	bne.n	8002916 <GAME_PLAY_Phase_Management+0x1082>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8002884:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002888:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800288c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002890:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002894:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002898:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	6809      	ldr	r1, [r1, #0]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	f7fd ff57 	bl	8000754 <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 80028a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028aa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	789b      	ldrb	r3, [r3, #2]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f041 80e1 	bne.w	8003a7a <GAME_PLAY_Phase_Management+0x21e6>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80028b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	2300      	movs	r3, #0
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2326      	movs	r3, #38	; 0x26
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	215a      	movs	r1, #90	; 0x5a
 80028d0:	2000      	movs	r0, #0
 80028d2:	f003 fff3 	bl	80068bc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80028d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028da:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	2300      	movs	r3, #0
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2326      	movs	r3, #38	; 0x26
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	215a      	movs	r1, #90	; 0x5a
 80028ee:	2000      	movs	r0, #0
 80028f0:	f003 ffe4 	bl	80068bc <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 80028f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2205      	movs	r2, #5
 8002900:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8002904:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002908:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	705a      	strb	r2, [r3, #1]
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8002912:	f001 b8b2 	b.w	8003a7a <GAME_PLAY_Phase_Management+0x21e6>
			else if ((state_game->action == 5 )){
 8002916:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800291a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b05      	cmp	r3, #5
 8002924:	f041 80a9 	bne.w	8003a7a <GAME_PLAY_Phase_Management+0x21e6>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002928:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800292c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002936:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 800293a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800293e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002942:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	f002 fc22 	bl	8005190 <YUGIOH_Check_Trap_On_board>
 800294c:	4603      	mov	r3, r0
 800294e:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
				if (idx != 255)
 8002952:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8002956:	2bff      	cmp	r3, #255	; 0xff
 8002958:	d05b      	beq.n	8002a12 <GAME_PLAY_Phase_Management+0x117e>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 800295a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800295e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	f7fe fbe9 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002968:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800296c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002970:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	3308      	adds	r3, #8
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	4413      	add	r3, r2
 800297c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8002980:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002984:	2200      	movs	r2, #0
 8002986:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8002988:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800298c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002996:	4619      	mov	r1, r3
 8002998:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800299c:	f7fd fe72 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 80029a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80029ae:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 80029b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80029c6:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 80029d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029d4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80029de:	3301      	adds	r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029e6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 80029f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2206      	movs	r2, #6
 80029fc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8002a00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a04:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	701a      	strb	r2, [r3, #0]
			break;
 8002a0e:	f001 b834 	b.w	8003a7a <GAME_PLAY_Phase_Management+0x21e6>
					state_game->action = 4;
 8002a12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a16:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	701a      	strb	r2, [r3, #0]
			break;
 8002a20:	f001 b82b 	b.w	8003a7a <GAME_PLAY_Phase_Management+0x21e6>
 8002a24:	2400000c 	.word	0x2400000c
 8002a28:	080108ec 	.word	0x080108ec
 8002a2c:	080108d4 	.word	0x080108d4
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002a30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a34:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	4b9a      	ldr	r3, [pc, #616]	; (8002ca8 <GAME_PLAY_Phase_Management+0x1414>)
 8002a3e:	9203      	str	r2, [sp, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	9202      	str	r2, [sp, #8]
 8002a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a48:	9201      	str	r2, [sp, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	9200      	str	r2, [sp, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a96      	ldr	r2, [pc, #600]	; (8002cac <GAME_PLAY_Phase_Management+0x1418>)
 8002a52:	215a      	movs	r1, #90	; 0x5a
 8002a54:	2005      	movs	r0, #5
 8002a56:	f003 fde8 	bl	800662a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8002a5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	4b90      	ldr	r3, [pc, #576]	; (8002ca8 <GAME_PLAY_Phase_Management+0x1414>)
 8002a68:	9203      	str	r2, [sp, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	9202      	str	r2, [sp, #8]
 8002a6e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002a72:	9201      	str	r2, [sp, #4]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a8d      	ldr	r2, [pc, #564]	; (8002cb0 <GAME_PLAY_Phase_Management+0x141c>)
 8002a7c:	2169      	movs	r1, #105	; 0x69
 8002a7e:	2005      	movs	r0, #5
 8002a80:	f003 fdd3 	bl	800662a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002a84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a88:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	781a      	ldrb	r2, [r3, #0]
 8002a90:	4b85      	ldr	r3, [pc, #532]	; (8002ca8 <GAME_PLAY_Phase_Management+0x1414>)
 8002a92:	9203      	str	r2, [sp, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	9202      	str	r2, [sp, #8]
 8002a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a9c:	9201      	str	r2, [sp, #4]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	9200      	str	r2, [sp, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a83      	ldr	r2, [pc, #524]	; (8002cb4 <GAME_PLAY_Phase_Management+0x1420>)
 8002aa6:	215a      	movs	r1, #90	; 0x5a
 8002aa8:	2005      	movs	r0, #5
 8002aaa:	f003 fdbe 	bl	800662a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002aae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ab2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	4b7b      	ldr	r3, [pc, #492]	; (8002ca8 <GAME_PLAY_Phase_Management+0x1414>)
 8002abc:	9203      	str	r2, [sp, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	9202      	str	r2, [sp, #8]
 8002ac2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ac6:	9201      	str	r2, [sp, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	9200      	str	r2, [sp, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a78      	ldr	r2, [pc, #480]	; (8002cb0 <GAME_PLAY_Phase_Management+0x141c>)
 8002ad0:	2169      	movs	r1, #105	; 0x69
 8002ad2:	2005      	movs	r0, #5
 8002ad4:	f003 fda9 	bl	800662a <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8002ad8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002adc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	785b      	ldrb	r3, [r3, #1]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aea:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002aee:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	3304      	adds	r3, #4
 8002afa:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8002afe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b02:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	785b      	ldrb	r3, [r3, #1]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b10:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002b14:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

			if(state_game->action == 4)
 8002b24:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b28:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	f040 82cd 	bne.w	80030d0 <GAME_PLAY_Phase_Management+0x183c>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8002b36:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b3a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	785a      	ldrb	r2, [r3, #1]
 8002b42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b46:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002b50:	429a      	cmp	r2, r3
 8002b52:	f080 825d 	bcs.w	8003010 <GAME_PLAY_Phase_Management+0x177c>
				{
					state_game->test = 165;
 8002b56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b5a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	22a5      	movs	r2, #165	; 0xa5
 8002b62:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8002b66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b6a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	4619      	mov	r1, r3
 8002b74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b78:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002b7c:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

					if (ptrYugiohCard_src->cardSignature == 11)
 8002b8c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b0b      	cmp	r3, #11
 8002b94:	f040 8096 	bne.w	8002cc4 <GAME_PLAY_Phase_Management+0x1430>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8002b98:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f002 f97c 	bl	8004e9c <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002ba4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fb0f 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 8002bb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bb8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002bd0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	4b33      	ldr	r3, [pc, #204]	; (8002ca8 <GAME_PLAY_Phase_Management+0x1414>)
 8002bda:	9203      	str	r2, [sp, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	9202      	str	r2, [sp, #8]
 8002be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be4:	9201      	str	r2, [sp, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	9200      	str	r2, [sp, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a32      	ldr	r2, [pc, #200]	; (8002cb8 <GAME_PLAY_Phase_Management+0x1424>)
 8002bee:	215a      	movs	r1, #90	; 0x5a
 8002bf0:	2005      	movs	r0, #5
 8002bf2:	f003 fd1a 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002bf6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <GAME_PLAY_Phase_Management+0x1414>)
 8002c00:	9203      	str	r2, [sp, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	9202      	str	r2, [sp, #8]
 8002c06:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c0a:	9201      	str	r2, [sp, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	9200      	str	r2, [sp, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a2a      	ldr	r2, [pc, #168]	; (8002cbc <GAME_PLAY_Phase_Management+0x1428>)
 8002c14:	2169      	movs	r1, #105	; 0x69
 8002c16:	2005      	movs	r0, #5
 8002c18:	f003 fd07 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002c1c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <GAME_PLAY_Phase_Management+0x1414>)
 8002c26:	9203      	str	r2, [sp, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	9202      	str	r2, [sp, #8]
 8002c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c30:	9201      	str	r2, [sp, #4]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	9200      	str	r2, [sp, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <GAME_PLAY_Phase_Management+0x142c>)
 8002c3a:	215a      	movs	r1, #90	; 0x5a
 8002c3c:	2005      	movs	r0, #5
 8002c3e:	f003 fcf4 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002c42:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <GAME_PLAY_Phase_Management+0x1414>)
 8002c4c:	9203      	str	r2, [sp, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	9202      	str	r2, [sp, #8]
 8002c52:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c56:	9201      	str	r2, [sp, #4]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	9200      	str	r2, [sp, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a14      	ldr	r2, [pc, #80]	; (8002cb0 <GAME_PLAY_Phase_Management+0x141c>)
 8002c60:	2169      	movs	r1, #105	; 0x69
 8002c62:	2005      	movs	r0, #5
 8002c64:	f003 fce1 	bl	800662a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c6c:	f004 fabe 	bl	80071ec <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002c70:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2326      	movs	r3, #38	; 0x26
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	215a      	movs	r1, #90	; 0x5a
 8002c84:	2000      	movs	r0, #0
 8002c86:	f003 fe19 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002c8a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	2300      	movs	r3, #0
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	2326      	movs	r3, #38	; 0x26
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	215a      	movs	r1, #90	; 0x5a
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f003 fe0c 	bl	80068bc <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 8002ca4:	f000 beec 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
 8002ca8:	2400000c 	.word	0x2400000c
 8002cac:	08010908 	.word	0x08010908
 8002cb0:	08010918 	.word	0x08010918
 8002cb4:	08010928 	.word	0x08010928
 8002cb8:	0801093c 	.word	0x0801093c
 8002cbc:	0801094c 	.word	0x0801094c
 8002cc0:	08010954 	.word	0x08010954
					else if (ptrYugiohCard_src->cardSignature == 12)
 8002cc4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	f040 808c 	bne.w	8002de8 <GAME_PLAY_Phase_Management+0x1554>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8002cd0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f002 f8fc 	bl	8004edc <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002ce4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fa6f 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 8002cf4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cf8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	785b      	ldrb	r3, [r3, #1]
 8002d00:	3301      	adds	r3, #1
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d08:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002d10:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	4bb5      	ldr	r3, [pc, #724]	; (8002ff0 <GAME_PLAY_Phase_Management+0x175c>)
 8002d1a:	9203      	str	r2, [sp, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	9202      	str	r2, [sp, #8]
 8002d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d24:	9201      	str	r2, [sp, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	9200      	str	r2, [sp, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4ab1      	ldr	r2, [pc, #708]	; (8002ff4 <GAME_PLAY_Phase_Management+0x1760>)
 8002d2e:	215a      	movs	r1, #90	; 0x5a
 8002d30:	2005      	movs	r0, #5
 8002d32:	f003 fc7a 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002d36:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	4bac      	ldr	r3, [pc, #688]	; (8002ff0 <GAME_PLAY_Phase_Management+0x175c>)
 8002d40:	9203      	str	r2, [sp, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	9202      	str	r2, [sp, #8]
 8002d46:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002d4a:	9201      	str	r2, [sp, #4]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	9200      	str	r2, [sp, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4aa9      	ldr	r2, [pc, #676]	; (8002ff8 <GAME_PLAY_Phase_Management+0x1764>)
 8002d54:	2169      	movs	r1, #105	; 0x69
 8002d56:	2005      	movs	r0, #5
 8002d58:	f003 fc67 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002d5c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	4ba2      	ldr	r3, [pc, #648]	; (8002ff0 <GAME_PLAY_Phase_Management+0x175c>)
 8002d66:	9203      	str	r2, [sp, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	9202      	str	r2, [sp, #8]
 8002d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d70:	9201      	str	r2, [sp, #4]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	9200      	str	r2, [sp, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4aa0      	ldr	r2, [pc, #640]	; (8002ffc <GAME_PLAY_Phase_Management+0x1768>)
 8002d7a:	215a      	movs	r1, #90	; 0x5a
 8002d7c:	2005      	movs	r0, #5
 8002d7e:	f003 fc54 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002d82:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	4b99      	ldr	r3, [pc, #612]	; (8002ff0 <GAME_PLAY_Phase_Management+0x175c>)
 8002d8c:	9203      	str	r2, [sp, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	9202      	str	r2, [sp, #8]
 8002d92:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002d96:	9201      	str	r2, [sp, #4]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	9200      	str	r2, [sp, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a98      	ldr	r2, [pc, #608]	; (8003000 <GAME_PLAY_Phase_Management+0x176c>)
 8002da0:	2169      	movs	r1, #105	; 0x69
 8002da2:	2005      	movs	r0, #5
 8002da4:	f003 fc41 	bl	800662a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dac:	f004 fa1e 	bl	80071ec <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002db0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2326      	movs	r3, #38	; 0x26
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	215a      	movs	r1, #90	; 0x5a
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f003 fd79 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002dca:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2326      	movs	r3, #38	; 0x26
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	215a      	movs	r1, #90	; 0x5a
 8002dde:	2000      	movs	r0, #0
 8002de0:	f003 fd6c 	bl	80068bc <ST7735_FillRectangleNSS>
			break;
 8002de4:	f000 be4c 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
					else if (ptrYugiohCard_src->cardSignature == 13)
 8002de8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b0d      	cmp	r3, #13
 8002df0:	d110      	bne.n	8002e14 <GAME_PLAY_Phase_Management+0x1580>
						state_game->test = 166;
 8002df2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002df6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	22a6      	movs	r2, #166	; 0xa6
 8002dfe:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8002e02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e06:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2205      	movs	r2, #5
 8002e0e:	701a      	strb	r2, [r3, #0]
			break;
 8002e10:	f000 be36 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8002e14:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b0e      	cmp	r3, #14
 8002e1c:	d005      	beq.n	8002e2a <GAME_PLAY_Phase_Management+0x1596>
 8002e1e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	f040 8094 	bne.w	8002f52 <GAME_PLAY_Phase_Management+0x16be>
						state_game->test = 133;
 8002e2a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e2e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2285      	movs	r2, #133	; 0x85
 8002e36:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8002e3a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4619      	mov	r1, r3
 8002e48:	4610      	mov	r0, r2
 8002e4a:	f002 f91b 	bl	8005084 <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002e4e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe f9ba 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 8002e5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e62:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	785b      	ldrb	r3, [r3, #1]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002e7a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <GAME_PLAY_Phase_Management+0x175c>)
 8002e84:	9203      	str	r2, [sp, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	9202      	str	r2, [sp, #8]
 8002e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e8e:	9201      	str	r2, [sp, #4]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	9200      	str	r2, [sp, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a5b      	ldr	r2, [pc, #364]	; (8003004 <GAME_PLAY_Phase_Management+0x1770>)
 8002e98:	215a      	movs	r1, #90	; 0x5a
 8002e9a:	2005      	movs	r0, #5
 8002e9c:	f003 fbc5 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002ea0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <GAME_PLAY_Phase_Management+0x175c>)
 8002eaa:	9203      	str	r2, [sp, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	9202      	str	r2, [sp, #8]
 8002eb0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002eb4:	9201      	str	r2, [sp, #4]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	9200      	str	r2, [sp, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a52      	ldr	r2, [pc, #328]	; (8003008 <GAME_PLAY_Phase_Management+0x1774>)
 8002ebe:	2169      	movs	r1, #105	; 0x69
 8002ec0:	2005      	movs	r0, #5
 8002ec2:	f003 fbb2 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002ec6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	4b48      	ldr	r3, [pc, #288]	; (8002ff0 <GAME_PLAY_Phase_Management+0x175c>)
 8002ed0:	9203      	str	r2, [sp, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	9202      	str	r2, [sp, #8]
 8002ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eda:	9201      	str	r2, [sp, #4]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	9200      	str	r2, [sp, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a46      	ldr	r2, [pc, #280]	; (8002ffc <GAME_PLAY_Phase_Management+0x1768>)
 8002ee4:	215a      	movs	r1, #90	; 0x5a
 8002ee6:	2005      	movs	r0, #5
 8002ee8:	f003 fb9f 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002eec:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	4b3e      	ldr	r3, [pc, #248]	; (8002ff0 <GAME_PLAY_Phase_Management+0x175c>)
 8002ef6:	9203      	str	r2, [sp, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	9202      	str	r2, [sp, #8]
 8002efc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002f00:	9201      	str	r2, [sp, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	9200      	str	r2, [sp, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a40      	ldr	r2, [pc, #256]	; (800300c <GAME_PLAY_Phase_Management+0x1778>)
 8002f0a:	2169      	movs	r1, #105	; 0x69
 8002f0c:	2005      	movs	r0, #5
 8002f0e:	f003 fb8c 	bl	800662a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f16:	f004 f969 	bl	80071ec <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002f1a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2326      	movs	r3, #38	; 0x26
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	215a      	movs	r1, #90	; 0x5a
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f003 fcc4 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002f34:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2326      	movs	r3, #38	; 0x26
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	215a      	movs	r1, #90	; 0x5a
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f003 fcb7 	bl	80068bc <ST7735_FillRectangleNSS>
			break;
 8002f4e:	f000 bd97 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
					else if(ptrYugiohCard_src->cardSignature == 16)
 8002f52:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d110      	bne.n	8002f7e <GAME_PLAY_Phase_Management+0x16ea>
						state_game->test = 124;
 8002f5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f60:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	227c      	movs	r2, #124	; 0x7c
 8002f68:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8002f6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f70:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2205      	movs	r2, #5
 8002f78:	701a      	strb	r2, [r3, #0]
			break;
 8002f7a:	f000 bd81 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8002f7e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b11      	cmp	r3, #17
 8002f86:	d108      	bne.n	8002f9a <GAME_PLAY_Phase_Management+0x1706>
						state_game->action = 5;
 8002f88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f8c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2205      	movs	r2, #5
 8002f94:	701a      	strb	r2, [r3, #0]
			break;
 8002f96:	f000 bd73 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8002f9a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b12      	cmp	r3, #18
 8002fa2:	d005      	beq.n	8002fb0 <GAME_PLAY_Phase_Management+0x171c>
 8002fa4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b13      	cmp	r3, #19
 8002fac:	f040 8568 	bne.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8002fb0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 8561 	bne.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002fbe:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe f902 	bl	80011d2 <YUGIOH_To_GY>
							state_game->count_chain++;
 8002fce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fd2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	785b      	ldrb	r3, [r3, #1]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fe2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	705a      	strb	r2, [r3, #1]
			break;
 8002fea:	f000 bd49 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
 8002fee:	bf00      	nop
 8002ff0:	2400000c 	.word	0x2400000c
 8002ff4:	0801093c 	.word	0x0801093c
 8002ff8:	08010964 	.word	0x08010964
 8002ffc:	08010954 	.word	0x08010954
 8003000:	08010918 	.word	0x08010918
 8003004:	08010970 	.word	0x08010970
 8003008:	08010980 	.word	0x08010980
 800300c:	08010990 	.word	0x08010990
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003010:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003014:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	2300      	movs	r3, #0
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2326      	movs	r3, #38	; 0x26
 8003024:	2280      	movs	r2, #128	; 0x80
 8003026:	215a      	movs	r1, #90	; 0x5a
 8003028:	2000      	movs	r0, #0
 800302a:	f003 fc47 	bl	80068bc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800302e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003032:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	2300      	movs	r3, #0
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2326      	movs	r3, #38	; 0x26
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	215a      	movs	r1, #90	; 0x5a
 8003046:	2000      	movs	r0, #0
 8003048:	f003 fc38 	bl	80068bc <ST7735_FillRectangleNSS>
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8003052:	e020      	b.n	8003096 <GAME_PLAY_Phase_Management+0x1802>
						state_game->ptrChainUser[i] = &dummyPlayer;
 8003054:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003058:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003062:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	f107 0214 	add.w	r2, r7, #20
 800306e:	605a      	str	r2, [r3, #4]
						state_game->ptrChainOpponent[i] = &dummyPlayer;
 8003070:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003074:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800307e:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	f107 0214 	add.w	r2, r7, #20
 800308a:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800308c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003090:	3301      	adds	r3, #1
 8003092:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8003096:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800309a:	2b05      	cmp	r3, #5
 800309c:	ddda      	ble.n	8003054 <GAME_PLAY_Phase_Management+0x17c0>
					state_game->ChainCount = 0;
 800309e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030a2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->action = 0;
 80030ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030b2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80030bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80030cc:	f000 bcd8 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
			else if (state_game->action == 5)
 80030d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030d4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	f040 809d 	bne.w	800321c <GAME_PLAY_Phase_Management+0x1988>
				state_game->test = 167;
 80030e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030e6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	22a7      	movs	r2, #167	; 0xa7
 80030ee:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80030f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030f6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	4619      	mov	r1, r3
 8003100:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003104:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003108:	f101 0344 	add.w	r3, r1, #68	; 0x44
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	4413      	add	r3, r2
 8003112:	3304      	adds	r3, #4
 8003114:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
				if((*ptrUser)->noBTN == GPIO_PIN_RESET)
 8003118:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	789b      	ldrb	r3, [r3, #2]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d128      	bne.n	8003176 <GAME_PLAY_Phase_Management+0x18e2>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 8003124:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd ff5a 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&(*ptrUser)->ActtionBuffer[0],&(*ptrUser)->CardInPlayed);
 8003130:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800313a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f7fd fa9c 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 4;
 800314c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003150:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2204      	movs	r2, #4
 8003158:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 800315a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800315e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	3301      	adds	r3, #1
 8003168:	b2da      	uxtb	r2, r3
 800316a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800316e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 8003176:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b0d      	cmp	r3, #13
 800317e:	d110      	bne.n	80031a2 <GAME_PLAY_Phase_Management+0x190e>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 8003180:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800318a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800318e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003192:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003196:	6809      	ldr	r1, [r1, #0]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	f7fd fc8d 	bl	8000ab8 <Player_Reading_Card_Reborn>
			break;
 800319e:	f000 bc6f 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
				else if(ptrYugiohCard_src->cardSignature == 16){
 80031a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d110      	bne.n	80031ce <GAME_PLAY_Phase_Management+0x193a>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 80031ac:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031b6:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80031ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031be:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80031c2:	6809      	ldr	r1, [r1, #0]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	f7fd fd25 	bl	8000c14 <Player_Reading_Card_Ancient_Rule>
			break;
 80031ca:	f000 bc59 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
				else if (ptrYugiohCard_src->cardSignature == 17)
 80031ce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b11      	cmp	r3, #17
 80031d6:	d110      	bne.n	80031fa <GAME_PLAY_Phase_Management+0x1966>
					Player_Reading_Card_Stopdef(RFIDmain, state_game, *ptrOpponent);
 80031d8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031e2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80031e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031ea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80031ee:	6809      	ldr	r1, [r1, #0]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	f7fd fbb7 	bl	8000964 <Player_Reading_Card_Stopdef>
			break;
 80031f6:	f000 bc43 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
				{	Player_Reading_Card(RFIDmain, state_game, *ptrUser);}
 80031fa:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003204:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003208:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800320c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003210:	6809      	ldr	r1, [r1, #0]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	f7fd fa9e 	bl	8000754 <Player_Reading_Card>
			break;
 8003218:	f000 bc32 	b.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
			else if (state_game->action == 6)
 800321c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003220:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b06      	cmp	r3, #6
 800322a:	f040 8429 	bne.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
				state_game->test = 169;
 800322e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003232:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	22a9      	movs	r2, #169	; 0xa9
 800323a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800323e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003242:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	4619      	mov	r1, r3
 800324c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003250:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003254:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
				if (ptrYugiohCard_src->cardSignature == 13){
 8003264:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b0d      	cmp	r3, #13
 800326c:	f040 819d 	bne.w	80035aa <GAME_PLAY_Phase_Management+0x1d16>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003270:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	4b66      	ldr	r3, [pc, #408]	; (8003414 <GAME_PLAY_Phase_Management+0x1b80>)
 800327a:	9203      	str	r2, [sp, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	9202      	str	r2, [sp, #8]
 8003280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003284:	9201      	str	r2, [sp, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	9200      	str	r2, [sp, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a62      	ldr	r2, [pc, #392]	; (8003418 <GAME_PLAY_Phase_Management+0x1b84>)
 800328e:	215a      	movs	r1, #90	; 0x5a
 8003290:	2005      	movs	r0, #5
 8003292:	f003 f9ca 	bl	800662a <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 8003296:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	789b      	ldrb	r3, [r3, #2]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 80c4 	bne.w	800342c <GAME_PLAY_Phase_Management+0x1b98>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80032a4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2326      	movs	r3, #38	; 0x26
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	215a      	movs	r1, #90	; 0x5a
 80032b8:	2000      	movs	r0, #0
 80032ba:	f003 faff 	bl	80068bc <ST7735_FillRectangleNSS>
						state_game->test = 170;
 80032be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032c2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	22aa      	movs	r2, #170	; 0xaa
 80032ca:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80032ce:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80032d8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 80032dc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80032e0:	2200      	movs	r2, #0
 80032e2:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80032e4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032ee:	4619      	mov	r1, r3
 80032f0:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80032f4:	f7fd f9c6 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80032f8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 fe2a 	bl	8004f58 <YUGIOH_Reborn>
						state_game->action = 4;
 8003304:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003308:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2204      	movs	r2, #4
 8003310:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003312:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd ff58 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003322:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003326:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	785b      	ldrb	r3, [r3, #1]
 800332e:	3301      	adds	r3, #1
 8003330:	b2da      	uxtb	r2, r3
 8003332:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003336:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800333e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	4b33      	ldr	r3, [pc, #204]	; (8003414 <GAME_PLAY_Phase_Management+0x1b80>)
 8003348:	9203      	str	r2, [sp, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	9202      	str	r2, [sp, #8]
 800334e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003352:	9201      	str	r2, [sp, #4]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	9200      	str	r2, [sp, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a30      	ldr	r2, [pc, #192]	; (800341c <GAME_PLAY_Phase_Management+0x1b88>)
 800335c:	215a      	movs	r1, #90	; 0x5a
 800335e:	2005      	movs	r0, #5
 8003360:	f003 f963 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003364:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	4b29      	ldr	r3, [pc, #164]	; (8003414 <GAME_PLAY_Phase_Management+0x1b80>)
 800336e:	9203      	str	r2, [sp, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	9202      	str	r2, [sp, #8]
 8003374:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003378:	9201      	str	r2, [sp, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	9200      	str	r2, [sp, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a27      	ldr	r2, [pc, #156]	; (8003420 <GAME_PLAY_Phase_Management+0x1b8c>)
 8003382:	2169      	movs	r1, #105	; 0x69
 8003384:	2005      	movs	r0, #5
 8003386:	f003 f950 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800338a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	781a      	ldrb	r2, [r3, #0]
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <GAME_PLAY_Phase_Management+0x1b80>)
 8003394:	9203      	str	r2, [sp, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	9202      	str	r2, [sp, #8]
 800339a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800339e:	9201      	str	r2, [sp, #4]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	9200      	str	r2, [sp, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <GAME_PLAY_Phase_Management+0x1b90>)
 80033a8:	215a      	movs	r1, #90	; 0x5a
 80033aa:	2005      	movs	r0, #5
 80033ac:	f003 f93d 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80033b0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	781a      	ldrb	r2, [r3, #0]
 80033b8:	4b16      	ldr	r3, [pc, #88]	; (8003414 <GAME_PLAY_Phase_Management+0x1b80>)
 80033ba:	9203      	str	r2, [sp, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	9202      	str	r2, [sp, #8]
 80033c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80033c4:	9201      	str	r2, [sp, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	9200      	str	r2, [sp, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a16      	ldr	r2, [pc, #88]	; (8003428 <GAME_PLAY_Phase_Management+0x1b94>)
 80033ce:	2169      	movs	r1, #105	; 0x69
 80033d0:	2005      	movs	r0, #5
 80033d2:	f003 f92a 	bl	800662a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80033d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033da:	f003 ff07 	bl	80071ec <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80033de:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	2300      	movs	r3, #0
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2326      	movs	r3, #38	; 0x26
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	215a      	movs	r1, #90	; 0x5a
 80033f2:	2000      	movs	r0, #0
 80033f4:	f003 fa62 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80033f8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	2300      	movs	r3, #0
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	2326      	movs	r3, #38	; 0x26
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	215a      	movs	r1, #90	; 0x5a
 800340c:	2000      	movs	r0, #0
 800340e:	f003 fa55 	bl	80068bc <ST7735_FillRectangleNSS>
			break;
 8003412:	e335      	b.n	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
 8003414:	2400000c 	.word	0x2400000c
 8003418:	08010848 	.word	0x08010848
 800341c:	0801093c 	.word	0x0801093c
 8003420:	0801099c 	.word	0x0801099c
 8003424:	08010954 	.word	0x08010954
 8003428:	08010918 	.word	0x08010918
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 800342c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 8323 	bne.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800343a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	2300      	movs	r3, #0
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2326      	movs	r3, #38	; 0x26
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	215a      	movs	r1, #90	; 0x5a
 800344e:	2000      	movs	r0, #0
 8003450:	f003 fa34 	bl	80068bc <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8003454:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003458:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	22ab      	movs	r2, #171	; 0xab
 8003460:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8003464:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800346e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 8003472:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003476:	2201      	movs	r2, #1
 8003478:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 800347a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003484:	4619      	mov	r1, r3
 8003486:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800348a:	f7fd f8fb 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 800348e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fd5f 	bl	8004f58 <YUGIOH_Reborn>
						state_game->action = 4;
 800349a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800349e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2204      	movs	r2, #4
 80034a6:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80034a8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd fe8d 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 80034b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	785b      	ldrb	r3, [r3, #1]
 80034c4:	3301      	adds	r3, #1
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80034d4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	4ba5      	ldr	r3, [pc, #660]	; (8003774 <GAME_PLAY_Phase_Management+0x1ee0>)
 80034de:	9203      	str	r2, [sp, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	9202      	str	r2, [sp, #8]
 80034e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034e8:	9201      	str	r2, [sp, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	9200      	str	r2, [sp, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4aa1      	ldr	r2, [pc, #644]	; (8003778 <GAME_PLAY_Phase_Management+0x1ee4>)
 80034f2:	215a      	movs	r1, #90	; 0x5a
 80034f4:	2005      	movs	r0, #5
 80034f6:	f003 f898 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80034fa:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	4b9c      	ldr	r3, [pc, #624]	; (8003774 <GAME_PLAY_Phase_Management+0x1ee0>)
 8003504:	9203      	str	r2, [sp, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	9202      	str	r2, [sp, #8]
 800350a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800350e:	9201      	str	r2, [sp, #4]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	9200      	str	r2, [sp, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a99      	ldr	r2, [pc, #612]	; (800377c <GAME_PLAY_Phase_Management+0x1ee8>)
 8003518:	2169      	movs	r1, #105	; 0x69
 800351a:	2005      	movs	r0, #5
 800351c:	f003 f885 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003520:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	4b92      	ldr	r3, [pc, #584]	; (8003774 <GAME_PLAY_Phase_Management+0x1ee0>)
 800352a:	9203      	str	r2, [sp, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	9202      	str	r2, [sp, #8]
 8003530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003534:	9201      	str	r2, [sp, #4]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	9200      	str	r2, [sp, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a90      	ldr	r2, [pc, #576]	; (8003780 <GAME_PLAY_Phase_Management+0x1eec>)
 800353e:	215a      	movs	r1, #90	; 0x5a
 8003540:	2005      	movs	r0, #5
 8003542:	f003 f872 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003546:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	4b89      	ldr	r3, [pc, #548]	; (8003774 <GAME_PLAY_Phase_Management+0x1ee0>)
 8003550:	9203      	str	r2, [sp, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	9202      	str	r2, [sp, #8]
 8003556:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800355a:	9201      	str	r2, [sp, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	9200      	str	r2, [sp, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a88      	ldr	r2, [pc, #544]	; (8003784 <GAME_PLAY_Phase_Management+0x1ef0>)
 8003564:	2169      	movs	r1, #105	; 0x69
 8003566:	2005      	movs	r0, #5
 8003568:	f003 f85f 	bl	800662a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 800356c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003570:	f003 fe3c 	bl	80071ec <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003574:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	2300      	movs	r3, #0
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2326      	movs	r3, #38	; 0x26
 8003584:	2280      	movs	r2, #128	; 0x80
 8003586:	215a      	movs	r1, #90	; 0x5a
 8003588:	2000      	movs	r0, #0
 800358a:	f003 f997 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800358e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	2300      	movs	r3, #0
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2326      	movs	r3, #38	; 0x26
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	215a      	movs	r1, #90	; 0x5a
 80035a2:	2000      	movs	r0, #0
 80035a4:	f003 f98a 	bl	80068bc <ST7735_FillRectangleNSS>
			break;
 80035a8:	e26a      	b.n	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
				else if(ptrYugiohCard_src->cardSignature == 16){
 80035aa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	f040 81aa 	bne.w	800390a <GAME_PLAY_Phase_Management+0x2076>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80035b6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	2300      	movs	r3, #0
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2326      	movs	r3, #38	; 0x26
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	215a      	movs	r1, #90	; 0x5a
 80035ca:	2000      	movs	r0, #0
 80035cc:	f003 f976 	bl	80068bc <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80035d0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <GAME_PLAY_Phase_Management+0x1ee0>)
 80035da:	9203      	str	r2, [sp, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	9202      	str	r2, [sp, #8]
 80035e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035e4:	9201      	str	r2, [sp, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	9200      	str	r2, [sp, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a66      	ldr	r2, [pc, #408]	; (8003788 <GAME_PLAY_Phase_Management+0x1ef4>)
 80035ee:	215a      	movs	r1, #90	; 0x5a
 80035f0:	2005      	movs	r0, #5
 80035f2:	f003 f81a 	bl	800662a <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80035f6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	789b      	ldrb	r3, [r3, #2]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f040 80c4 	bne.w	800378c <GAME_PLAY_Phase_Management+0x1ef8>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003604:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	2300      	movs	r3, #0
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	2326      	movs	r3, #38	; 0x26
 8003614:	2280      	movs	r2, #128	; 0x80
 8003616:	215a      	movs	r1, #90	; 0x5a
 8003618:	2000      	movs	r0, #0
 800361a:	f003 f94f 	bl	80068bc <ST7735_FillRectangleNSS>
						state_game->test = 170;
 800361e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003622:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	22aa      	movs	r2, #170	; 0xaa
 800362a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 800362e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003638:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 800363c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003640:	2200      	movs	r2, #0
 8003642:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8003644:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800364e:	4619      	mov	r1, r3
 8003650:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003654:	f7fd f816 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8003658:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f001 fce4 	bl	800502c <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8003664:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003668:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2204      	movs	r2, #4
 8003670:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003672:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd fda8 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003682:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003686:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	3301      	adds	r3, #1
 8003690:	b2da      	uxtb	r2, r3
 8003692:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003696:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800369e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	4b33      	ldr	r3, [pc, #204]	; (8003774 <GAME_PLAY_Phase_Management+0x1ee0>)
 80036a8:	9203      	str	r2, [sp, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	9202      	str	r2, [sp, #8]
 80036ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b2:	9201      	str	r2, [sp, #4]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	9200      	str	r2, [sp, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <GAME_PLAY_Phase_Management+0x1ee4>)
 80036bc:	215a      	movs	r1, #90	; 0x5a
 80036be:	2005      	movs	r0, #5
 80036c0:	f002 ffb3 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80036c4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	781a      	ldrb	r2, [r3, #0]
 80036cc:	4b29      	ldr	r3, [pc, #164]	; (8003774 <GAME_PLAY_Phase_Management+0x1ee0>)
 80036ce:	9203      	str	r2, [sp, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	9202      	str	r2, [sp, #8]
 80036d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80036d8:	9201      	str	r2, [sp, #4]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	9200      	str	r2, [sp, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a26      	ldr	r2, [pc, #152]	; (800377c <GAME_PLAY_Phase_Management+0x1ee8>)
 80036e2:	2169      	movs	r1, #105	; 0x69
 80036e4:	2005      	movs	r0, #5
 80036e6:	f002 ffa0 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80036ea:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <GAME_PLAY_Phase_Management+0x1ee0>)
 80036f4:	9203      	str	r2, [sp, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	9202      	str	r2, [sp, #8]
 80036fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036fe:	9201      	str	r2, [sp, #4]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	9200      	str	r2, [sp, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <GAME_PLAY_Phase_Management+0x1eec>)
 8003708:	215a      	movs	r1, #90	; 0x5a
 800370a:	2005      	movs	r0, #5
 800370c:	f002 ff8d 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003710:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	4b16      	ldr	r3, [pc, #88]	; (8003774 <GAME_PLAY_Phase_Management+0x1ee0>)
 800371a:	9203      	str	r2, [sp, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	9202      	str	r2, [sp, #8]
 8003720:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003724:	9201      	str	r2, [sp, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	9200      	str	r2, [sp, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a15      	ldr	r2, [pc, #84]	; (8003784 <GAME_PLAY_Phase_Management+0x1ef0>)
 800372e:	2169      	movs	r1, #105	; 0x69
 8003730:	2005      	movs	r0, #5
 8003732:	f002 ff7a 	bl	800662a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800373a:	f003 fd57 	bl	80071ec <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800373e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	2300      	movs	r3, #0
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2326      	movs	r3, #38	; 0x26
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	215a      	movs	r1, #90	; 0x5a
 8003752:	2000      	movs	r0, #0
 8003754:	f003 f8b2 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003758:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	2300      	movs	r3, #0
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	2326      	movs	r3, #38	; 0x26
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	215a      	movs	r1, #90	; 0x5a
 800376c:	2000      	movs	r0, #0
 800376e:	f003 f8a5 	bl	80068bc <ST7735_FillRectangleNSS>
			break;
 8003772:	e185      	b.n	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
 8003774:	2400000c 	.word	0x2400000c
 8003778:	0801093c 	.word	0x0801093c
 800377c:	0801099c 	.word	0x0801099c
 8003780:	08010954 	.word	0x08010954
 8003784:	08010918 	.word	0x08010918
 8003788:	08010848 	.word	0x08010848
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 800378c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	785b      	ldrb	r3, [r3, #1]
 8003794:	2b00      	cmp	r3, #0
 8003796:	f040 8173 	bne.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800379a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	9301      	str	r3, [sp, #4]
 80037a4:	2300      	movs	r3, #0
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2326      	movs	r3, #38	; 0x26
 80037aa:	2280      	movs	r2, #128	; 0x80
 80037ac:	215a      	movs	r1, #90	; 0x5a
 80037ae:	2000      	movs	r0, #0
 80037b0:	f003 f884 	bl	80068bc <ST7735_FillRectangleNSS>
						state_game->test = 171;
 80037b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	22ab      	movs	r2, #171	; 0xab
 80037c0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80037c4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80037ce:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 80037d2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80037d6:	2201      	movs	r2, #1
 80037d8:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80037da:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037e4:	4619      	mov	r1, r3
 80037e6:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80037ea:	f7fc ff4b 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 80037ee:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 fc19 	bl	800502c <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 80037fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2204      	movs	r2, #4
 8003806:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003808:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fcdd 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003818:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800381c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	785b      	ldrb	r3, [r3, #1]
 8003824:	3301      	adds	r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800382c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003834:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	4ba3      	ldr	r3, [pc, #652]	; (8003acc <GAME_PLAY_Phase_Management+0x2238>)
 800383e:	9203      	str	r2, [sp, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	9202      	str	r2, [sp, #8]
 8003844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003848:	9201      	str	r2, [sp, #4]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	9200      	str	r2, [sp, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a9f      	ldr	r2, [pc, #636]	; (8003ad0 <GAME_PLAY_Phase_Management+0x223c>)
 8003852:	215a      	movs	r1, #90	; 0x5a
 8003854:	2005      	movs	r0, #5
 8003856:	f002 fee8 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800385a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	4b9a      	ldr	r3, [pc, #616]	; (8003acc <GAME_PLAY_Phase_Management+0x2238>)
 8003864:	9203      	str	r2, [sp, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	9202      	str	r2, [sp, #8]
 800386a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800386e:	9201      	str	r2, [sp, #4]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	9200      	str	r2, [sp, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a97      	ldr	r2, [pc, #604]	; (8003ad4 <GAME_PLAY_Phase_Management+0x2240>)
 8003878:	2169      	movs	r1, #105	; 0x69
 800387a:	2005      	movs	r0, #5
 800387c:	f002 fed5 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003880:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	781a      	ldrb	r2, [r3, #0]
 8003888:	4b90      	ldr	r3, [pc, #576]	; (8003acc <GAME_PLAY_Phase_Management+0x2238>)
 800388a:	9203      	str	r2, [sp, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	9202      	str	r2, [sp, #8]
 8003890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003894:	9201      	str	r2, [sp, #4]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	9200      	str	r2, [sp, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a8e      	ldr	r2, [pc, #568]	; (8003ad8 <GAME_PLAY_Phase_Management+0x2244>)
 800389e:	215a      	movs	r1, #90	; 0x5a
 80038a0:	2005      	movs	r0, #5
 80038a2:	f002 fec2 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80038a6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	4b87      	ldr	r3, [pc, #540]	; (8003acc <GAME_PLAY_Phase_Management+0x2238>)
 80038b0:	9203      	str	r2, [sp, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	9202      	str	r2, [sp, #8]
 80038b6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80038ba:	9201      	str	r2, [sp, #4]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	9200      	str	r2, [sp, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a86      	ldr	r2, [pc, #536]	; (8003adc <GAME_PLAY_Phase_Management+0x2248>)
 80038c4:	2169      	movs	r1, #105	; 0x69
 80038c6:	2005      	movs	r0, #5
 80038c8:	f002 feaf 	bl	800662a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80038cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038d0:	f003 fc8c 	bl	80071ec <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80038d4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	2300      	movs	r3, #0
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2326      	movs	r3, #38	; 0x26
 80038e4:	2280      	movs	r2, #128	; 0x80
 80038e6:	215a      	movs	r1, #90	; 0x5a
 80038e8:	2000      	movs	r0, #0
 80038ea:	f002 ffe7 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80038ee:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	2300      	movs	r3, #0
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2326      	movs	r3, #38	; 0x26
 80038fe:	2280      	movs	r2, #128	; 0x80
 8003900:	215a      	movs	r1, #90	; 0x5a
 8003902:	2000      	movs	r0, #0
 8003904:	f002 ffda 	bl	80068bc <ST7735_FillRectangleNSS>
			break;
 8003908:	e0ba      	b.n	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
				else if(ptrYugiohCard_src->cardSignature == 17){
 800390a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b11      	cmp	r3, #17
 8003912:	f040 80b5 	bne.w	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
					ptrYugiohCard_dst = &(*ptrOpponent)->ActtionBuffer[0];
 8003916:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003920:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_dst,  &(*ptrUser)->ActtionBuffer[0]);
 8003924:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800392e:	4619      	mov	r1, r3
 8003930:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003934:	f7fc fea6 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8003938:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f001 fbec 	bl	8005124 <YUGIOH_Stop_Defense>
					state_game->action = 4;
 800394c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003950:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2204      	movs	r2, #4
 8003958:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800395a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd fc34 	bl	80011d2 <YUGIOH_To_GY>
					state_game->count_chain++;
 800396a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800396e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	785b      	ldrb	r3, [r3, #1]
 8003976:	3301      	adds	r3, #1
 8003978:	b2da      	uxtb	r2, r3
 800397a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800397e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003986:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	781a      	ldrb	r2, [r3, #0]
 800398e:	4b4f      	ldr	r3, [pc, #316]	; (8003acc <GAME_PLAY_Phase_Management+0x2238>)
 8003990:	9203      	str	r2, [sp, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	9202      	str	r2, [sp, #8]
 8003996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800399a:	9201      	str	r2, [sp, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	9200      	str	r2, [sp, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a4b      	ldr	r2, [pc, #300]	; (8003ad0 <GAME_PLAY_Phase_Management+0x223c>)
 80039a4:	215a      	movs	r1, #90	; 0x5a
 80039a6:	2005      	movs	r0, #5
 80039a8:	f002 fe3f 	bl	800662a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80039ac:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	4b45      	ldr	r3, [pc, #276]	; (8003acc <GAME_PLAY_Phase_Management+0x2238>)
 80039b6:	9203      	str	r2, [sp, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	9202      	str	r2, [sp, #8]
 80039bc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80039c0:	9201      	str	r2, [sp, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	9200      	str	r2, [sp, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a45      	ldr	r2, [pc, #276]	; (8003ae0 <GAME_PLAY_Phase_Management+0x224c>)
 80039ca:	2169      	movs	r1, #105	; 0x69
 80039cc:	2005      	movs	r0, #5
 80039ce:	f002 fe2c 	bl	800662a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80039d2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	781a      	ldrb	r2, [r3, #0]
 80039da:	4b3c      	ldr	r3, [pc, #240]	; (8003acc <GAME_PLAY_Phase_Management+0x2238>)
 80039dc:	9203      	str	r2, [sp, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	9202      	str	r2, [sp, #8]
 80039e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e6:	9201      	str	r2, [sp, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	9200      	str	r2, [sp, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3a      	ldr	r2, [pc, #232]	; (8003ad8 <GAME_PLAY_Phase_Management+0x2244>)
 80039f0:	215a      	movs	r1, #90	; 0x5a
 80039f2:	2005      	movs	r0, #5
 80039f4:	f002 fe19 	bl	800662a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80039f8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	4b32      	ldr	r3, [pc, #200]	; (8003acc <GAME_PLAY_Phase_Management+0x2238>)
 8003a02:	9203      	str	r2, [sp, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	9202      	str	r2, [sp, #8]
 8003a08:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003a0c:	9201      	str	r2, [sp, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	9200      	str	r2, [sp, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a31      	ldr	r2, [pc, #196]	; (8003adc <GAME_PLAY_Phase_Management+0x2248>)
 8003a16:	2169      	movs	r1, #105	; 0x69
 8003a18:	2005      	movs	r0, #5
 8003a1a:	f002 fe06 	bl	800662a <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 8003a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a22:	f003 fbe3 	bl	80071ec <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003a26:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	2300      	movs	r3, #0
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	2326      	movs	r3, #38	; 0x26
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	215a      	movs	r1, #90	; 0x5a
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f002 ff3e 	bl	80068bc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003a40:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	2326      	movs	r3, #38	; 0x26
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	215a      	movs	r1, #90	; 0x5a
 8003a54:	2000      	movs	r0, #0
 8003a56:	f002 ff31 	bl	80068bc <ST7735_FillRectangleNSS>
			break;
 8003a5a:	e011      	b.n	8003a80 <GAME_PLAY_Phase_Management+0x21ec>
			break;
 8003a5c:	bf00      	nop
 8003a5e:	f001 ba0f 	b.w	8004e80 <GAME_PLAY_Phase_Management+0x35ec>
			break;
 8003a62:	bf00      	nop
 8003a64:	f001 ba0c 	b.w	8004e80 <GAME_PLAY_Phase_Management+0x35ec>
			break;
 8003a68:	bf00      	nop
 8003a6a:	f001 ba09 	b.w	8004e80 <GAME_PLAY_Phase_Management+0x35ec>
			break;
 8003a6e:	bf00      	nop
 8003a70:	f001 ba06 	b.w	8004e80 <GAME_PLAY_Phase_Management+0x35ec>
			break;
 8003a74:	bf00      	nop
 8003a76:	f001 ba03 	b.w	8004e80 <GAME_PLAY_Phase_Management+0x35ec>
			break;
 8003a7a:	bf00      	nop
 8003a7c:	f001 ba00 	b.w	8004e80 <GAME_PLAY_Phase_Management+0x35ec>
			break;
 8003a80:	bf00      	nop
		}
		break;
 8003a82:	f001 b9fd 	b.w	8004e80 <GAME_PLAY_Phase_Management+0x35ec>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8003a86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a8a:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003a8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a92:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003a96:	6811      	ldr	r1, [r2, #0]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	f001 fcd3 	bl	8005444 <LCDvalue>
			switch(PBS){
 8003a9e:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	f201 81ee 	bhi.w	8004e84 <GAME_PLAY_Phase_Management+0x35f0>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <GAME_PLAY_Phase_Management+0x221c>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08004e61 	.word	0x08004e61
 8003ab4:	08003ae5 	.word	0x08003ae5
 8003ab8:	08004215 	.word	0x08004215
 8003abc:	08003edf 	.word	0x08003edf
 8003ac0:	08004549 	.word	0x08004549
 8003ac4:	080047b9 	.word	0x080047b9
 8003ac8:	08004cf1 	.word	0x08004cf1
 8003acc:	2400000c 	.word	0x2400000c
 8003ad0:	0801093c 	.word	0x0801093c
 8003ad4:	0801099c 	.word	0x0801099c
 8003ad8:	08010954 	.word	0x08010954
 8003adc:	08010918 	.word	0x08010918
 8003ae0:	080109ac 	.word	0x080109ac
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8003ae4:	4ba2      	ldr	r3, [pc, #648]	; (8003d70 <GAME_PLAY_Phase_Management+0x24dc>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	9202      	str	r2, [sp, #8]
 8003aea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003aee:	9201      	str	r2, [sp, #4]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	9200      	str	r2, [sp, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a9f      	ldr	r2, [pc, #636]	; (8003d74 <GAME_PLAY_Phase_Management+0x24e0>)
 8003af8:	2123      	movs	r1, #35	; 0x23
 8003afa:	206e      	movs	r0, #110	; 0x6e
 8003afc:	f002 fd01 	bl	8006502 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8003b00:	4b9b      	ldr	r3, [pc, #620]	; (8003d70 <GAME_PLAY_Phase_Management+0x24dc>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	9202      	str	r2, [sp, #8]
 8003b06:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003b0a:	9201      	str	r2, [sp, #4]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	9200      	str	r2, [sp, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a98      	ldr	r2, [pc, #608]	; (8003d74 <GAME_PLAY_Phase_Management+0x24e0>)
 8003b14:	2123      	movs	r1, #35	; 0x23
 8003b16:	206e      	movs	r0, #110	; 0x6e
 8003b18:	f002 fd3d 	bl	8006596 <ST7735_WriteString1>
				if(state_game->action == 50){
 8003b1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b20:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b32      	cmp	r3, #50	; 0x32
 8003b2a:	f040 809b 	bne.w	8003c64 <GAME_PLAY_Phase_Management+0x23d0>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 8003b2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b32:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003b36:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b3a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003b3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b42:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	6809      	ldr	r1, [r1, #0]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	f7fc fe02 	bl	8000754 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8003b50:	2101      	movs	r1, #1
 8003b52:	4889      	ldr	r0, [pc, #548]	; (8003d78 <GAME_PLAY_Phase_Management+0x24e4>)
 8003b54:	f006 fc98 	bl	800a488 <HAL_GPIO_ReadPin>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f041 8182 	bne.w	8004e64 <GAME_PLAY_Phase_Management+0x35d0>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8003b60:	4886      	ldr	r0, [pc, #536]	; (8003d7c <GAME_PLAY_Phase_Management+0x24e8>)
 8003b62:	f009 fe8f 	bl	800d884 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8003b66:	4986      	ldr	r1, [pc, #536]	; (8003d80 <GAME_PLAY_Phase_Management+0x24ec>)
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003b74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b78:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	2300      	movs	r3, #0
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2326      	movs	r3, #38	; 0x26
 8003b88:	2280      	movs	r2, #128	; 0x80
 8003b8a:	215a      	movs	r1, #90	; 0x5a
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f002 fe95 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8003b92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	4b79      	ldr	r3, [pc, #484]	; (8003d84 <GAME_PLAY_Phase_Management+0x24f0>)
 8003ba0:	9203      	str	r2, [sp, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	9202      	str	r2, [sp, #8]
 8003ba6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003baa:	9201      	str	r2, [sp, #4]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	9200      	str	r2, [sp, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a75      	ldr	r2, [pc, #468]	; (8003d88 <GAME_PLAY_Phase_Management+0x24f4>)
 8003bb4:	215a      	movs	r1, #90	; 0x5a
 8003bb6:	200f      	movs	r0, #15
 8003bb8:	f002 fd37 	bl	800662a <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8003bbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003bc0:	f003 fb14 	bl	80071ec <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003bc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003bc8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	2326      	movs	r3, #38	; 0x26
 8003bd8:	2280      	movs	r2, #128	; 0x80
 8003bda:	215a      	movs	r1, #90	; 0x5a
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f002 fe6d 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003be2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003be6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2326      	movs	r3, #38	; 0x26
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	215a      	movs	r1, #90	; 0x5a
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	f002 fe5e 	bl	80068bc <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8003c00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c04:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8003c0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c12:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	f001 fb12 	bl	8005240 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8003c1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c20:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d108      	bne.n	8003c40 <GAME_PLAY_Phase_Management+0x23ac>
							state_game->MainGame_State = second_player;
 8003c2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c32:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8003c3e:	e007      	b.n	8003c50 <GAME_PLAY_Phase_Management+0x23bc>
						}
						else{
							state_game->MainGame_State = first_player;
 8003c40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c44:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8003c50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c54:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8003c60:	f001 b900 	b.w	8004e64 <GAME_PLAY_Phase_Management+0x35d0>
				else if(state_game->action == 51){
 8003c64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c68:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b33      	cmp	r3, #51	; 0x33
 8003c72:	f041 80f7 	bne.w	8004e64 <GAME_PLAY_Phase_Management+0x35d0>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003c76:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c7a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2326      	movs	r3, #38	; 0x26
 8003c8a:	2280      	movs	r2, #128	; 0x80
 8003c8c:	215a      	movs	r1, #90	; 0x5a
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f002 fe14 	bl	80068bc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003c94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c98:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2326      	movs	r3, #38	; 0x26
 8003ca8:	2280      	movs	r2, #128	; 0x80
 8003caa:	215a      	movs	r1, #90	; 0x5a
 8003cac:	2000      	movs	r0, #0
 8003cae:	f002 fe05 	bl	80068bc <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8003cb8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cbc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003cc6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 8003cca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003cce:	799b      	ldrb	r3, [r3, #6]
 8003cd0:	f887 3239 	strb.w	r3, [r7, #569]	; 0x239
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8003cd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cd8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3338      	adds	r3, #56	; 0x38
 8003ce0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8003cea:	e013      	b.n	8003d14 <GAME_PLAY_Phase_Management+0x2480>
						if(ptrYugiohCard_dst->cardData == 0){
 8003cec:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <GAME_PLAY_Phase_Management+0x246c>
							check_def_mon++;
 8003cf6:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
						ptrYugiohCard_dst++;
 8003d00:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003d04:	3310      	adds	r3, #16
 8003d06:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8003d0a:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8003d14:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d9e7      	bls.n	8003cec <GAME_PLAY_Phase_Management+0x2458>
					uint8_t flag_can_atk = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8003d22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d26:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003d30:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8003d34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d38:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3338      	adds	r3, #56	; 0x38
 8003d40:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8003d44:	2300      	movs	r3, #0
 8003d46:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 8003d4a:	e02c      	b.n	8003da6 <GAME_PLAY_Phase_Management+0x2512>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8003d4c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d11a      	bne.n	8003d92 <GAME_PLAY_Phase_Management+0x24fe>
							if(ptrYugiohCard_dst->cardState == 1){
 8003d5c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003d60:	789b      	ldrb	r3, [r3, #2]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d112      	bne.n	8003d8c <GAME_PLAY_Phase_Management+0x24f8>
								flag_can_atk = 2;
 8003d66:	2302      	movs	r3, #2
 8003d68:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
								break;
 8003d6c:	e01f      	b.n	8003dae <GAME_PLAY_Phase_Management+0x251a>
 8003d6e:	bf00      	nop
 8003d70:	2400000c 	.word	0x2400000c
 8003d74:	080109bc 	.word	0x080109bc
 8003d78:	58020800 	.word	0x58020800
 8003d7c:	240002e8 	.word	0x240002e8
 8003d80:	24000ea0 	.word	0x24000ea0
 8003d84:	24000014 	.word	0x24000014
 8003d88:	080109c0 	.word	0x080109c0
								flag_can_atk = 1;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
						ptrYugiohCard_dst++;
 8003d92:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003d96:	3310      	adds	r3, #16
 8003d98:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8003d9c:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8003da0:	3301      	adds	r3, #1
 8003da2:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 8003da6:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d9ce      	bls.n	8003d4c <GAME_PLAY_Phase_Management+0x24b8>
					if (check_def_mon < 3)
 8003dae:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d810      	bhi.n	8003dd8 <GAME_PLAY_Phase_Management+0x2544>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 8003db6:	f897 3239 	ldrb.w	r3, [r7, #569]	; 0x239
 8003dba:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003dbe:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	4413      	add	r3, r2
 8003dca:	3304      	adds	r3, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d102      	bne.n	8003dd8 <GAME_PLAY_Phase_Management+0x2544>
							flag_can_atk = 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					if (flag_can_atk == 2) {
 8003dd8:	f897 3251 	ldrb.w	r3, [r7, #593]	; 0x251
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d165      	bne.n	8003eac <GAME_PLAY_Phase_Management+0x2618>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8003de0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003de4:	7a1b      	ldrb	r3, [r3, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d047      	beq.n	8003e7a <GAME_PLAY_Phase_Management+0x25e6>
 8003dea:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003dee:	789b      	ldrb	r3, [r3, #2]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d142      	bne.n	8003e7a <GAME_PLAY_Phase_Management+0x25e6>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 8003df4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003df8:	7a1b      	ldrb	r3, [r3, #8]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003e02:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8003e04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e08:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e12:	4619      	mov	r1, r3
 8003e14:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003e18:	f7fc fc34 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8003e1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e20:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e2a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							if(check_def_mon == 3){
 8003e2e:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d104      	bne.n	8003e40 <GAME_PLAY_Phase_Management+0x25ac>
								ptrYugiohCard_dst->targetPosition = 99;
 8003e36:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003e3a:	2263      	movs	r2, #99	; 0x63
 8003e3c:	71da      	strb	r2, [r3, #7]
 8003e3e:	e004      	b.n	8003e4a <GAME_PLAY_Phase_Management+0x25b6>
								ptrYugiohCard_dst->targetPosition = targetpos;
 8003e40:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003e44:	f897 2239 	ldrb.w	r2, [r7, #569]	; 0x239
 8003e48:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8003e4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e4e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	f7fd f8c6 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 8003e58:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e5c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2234      	movs	r2, #52	; 0x34
 8003e64:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 8003e66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e6a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2203      	movs	r2, #3
 8003e72:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003e76:	f000 bff5 	b.w	8004e64 <GAME_PLAY_Phase_Management+0x35d0>
							state_game->test = 222;
 8003e7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	22de      	movs	r2, #222	; 0xde
 8003e86:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 8003e8a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e8e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2232      	movs	r2, #50	; 0x32
 8003e96:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8003e98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e9c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003ea8:	f000 bfdc 	b.w	8004e64 <GAME_PLAY_Phase_Management+0x35d0>
						state_game->test = 223;
 8003eac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003eb0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	22df      	movs	r2, #223	; 0xdf
 8003eb8:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8003ebc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ec0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2232      	movs	r2, #50	; 0x32
 8003ec8:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8003eca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ece:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003eda:	f000 bfc3 	b.w	8004e64 <GAME_PLAY_Phase_Management+0x35d0>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003ede:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ee2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	4bc5      	ldr	r3, [pc, #788]	; (8004200 <GAME_PLAY_Phase_Management+0x296c>)
 8003eec:	9203      	str	r2, [sp, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	9202      	str	r2, [sp, #8]
 8003ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef6:	9201      	str	r2, [sp, #4]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	9200      	str	r2, [sp, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4ac1      	ldr	r2, [pc, #772]	; (8004204 <GAME_PLAY_Phase_Management+0x2970>)
 8003f00:	215a      	movs	r1, #90	; 0x5a
 8003f02:	2005      	movs	r0, #5
 8003f04:	f002 fb91 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003f08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f0c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	781a      	ldrb	r2, [r3, #0]
 8003f14:	4bba      	ldr	r3, [pc, #744]	; (8004200 <GAME_PLAY_Phase_Management+0x296c>)
 8003f16:	9203      	str	r2, [sp, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	9202      	str	r2, [sp, #8]
 8003f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f20:	9201      	str	r2, [sp, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	9200      	str	r2, [sp, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4ab7      	ldr	r2, [pc, #732]	; (8004208 <GAME_PLAY_Phase_Management+0x2974>)
 8003f2a:	2169      	movs	r1, #105	; 0x69
 8003f2c:	2005      	movs	r0, #5
 8003f2e:	f002 fb7c 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003f32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f36:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	4bb0      	ldr	r3, [pc, #704]	; (8004200 <GAME_PLAY_Phase_Management+0x296c>)
 8003f40:	9203      	str	r2, [sp, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	9202      	str	r2, [sp, #8]
 8003f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f4a:	9201      	str	r2, [sp, #4]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	9200      	str	r2, [sp, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4aae      	ldr	r2, [pc, #696]	; (800420c <GAME_PLAY_Phase_Management+0x2978>)
 8003f54:	215a      	movs	r1, #90	; 0x5a
 8003f56:	2005      	movs	r0, #5
 8003f58:	f002 fb67 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003f5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f60:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	4ba5      	ldr	r3, [pc, #660]	; (8004200 <GAME_PLAY_Phase_Management+0x296c>)
 8003f6a:	9203      	str	r2, [sp, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	9202      	str	r2, [sp, #8]
 8003f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f74:	9201      	str	r2, [sp, #4]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	9200      	str	r2, [sp, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4aa4      	ldr	r2, [pc, #656]	; (8004210 <GAME_PLAY_Phase_Management+0x297c>)
 8003f7e:	2169      	movs	r1, #105	; 0x69
 8003f80:	2005      	movs	r0, #5
 8003f82:	f002 fb52 	bl	800662a <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 8003f86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f8a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b34      	cmp	r3, #52	; 0x34
 8003f94:	d141      	bne.n	800401a <GAME_PLAY_Phase_Management+0x2786>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8003f96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f9a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	789b      	ldrb	r3, [r3, #2]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d115      	bne.n	8003fd2 <GAME_PLAY_Phase_Management+0x273e>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8003fa6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003faa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 8003fb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2236      	movs	r2, #54	; 0x36
 8003fc2:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 8003fc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8003fd2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fd6:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003fda:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fde:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003fe2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fe6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	6809      	ldr	r1, [r1, #0]
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	f7fc fbb0 	bl	8000754 <Player_Reading_Card>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 8003ff4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ff8:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003ffc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004000:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004004:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004008:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	6809      	ldr	r1, [r1, #0]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	f7fc fef5 	bl	8000e00 <Player_Reading_Card_Monster_Effect>





				break;
 8004016:	f000 bf27 	b.w	8004e68 <GAME_PLAY_Phase_Management+0x35d4>
				else if ((state_game->action == 53 ))
 800401a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800401e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b35      	cmp	r3, #53	; 0x35
 8004028:	f040 871e 	bne.w	8004e68 <GAME_PLAY_Phase_Management+0x35d4>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800402c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004030:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	2300      	movs	r3, #0
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	2326      	movs	r3, #38	; 0x26
 8004040:	2280      	movs	r2, #128	; 0x80
 8004042:	215a      	movs	r1, #90	; 0x5a
 8004044:	2000      	movs	r0, #0
 8004046:	f002 fc39 	bl	80068bc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800404a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800404e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	2300      	movs	r3, #0
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2326      	movs	r3, #38	; 0x26
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	215a      	movs	r1, #90	; 0x5a
 8004062:	2000      	movs	r0, #0
 8004064:	f002 fc2a 	bl	80068bc <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004068:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800406c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004076:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 800407a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800407e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004082:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	f001 f882 	bl	8005190 <YUGIOH_Check_Trap_On_board>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
					if(ptrYugiohCard_src->cardSignature == 3){
 8004092:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d14f      	bne.n	800413c <GAME_PLAY_Phase_Management+0x28a8>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 800409c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	f7fd f848 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 80040aa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80040ae:	2200      	movs	r2, #0
 80040b0:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80040b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040b6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80040c0:	4619      	mov	r1, r3
 80040c2:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80040c6:	f7fc fadd 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 80040ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040ce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80040d8:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 80040e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040e6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80040f0:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80040fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004108:	3301      	adds	r3, #1
 800410a:	b2da      	uxtb	r2, r3
 800410c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004110:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 800411a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800411e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 800412a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800412e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2234      	movs	r2, #52	; 0x34
 8004136:	701a      	strb	r2, [r3, #0]
				break;
 8004138:	f000 be96 	b.w	8004e68 <GAME_PLAY_Phase_Management+0x35d4>
						if (idx != 255)
 800413c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8004140:	2bff      	cmp	r3, #255	; 0xff
 8004142:	f000 8691 	beq.w	8004e68 <GAME_PLAY_Phase_Management+0x35d4>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8004146:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800414a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	f7fc fff3 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8004154:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8004158:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800415c:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	3308      	adds	r3, #8
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	4413      	add	r3, r2
 8004168:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800416c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004170:	2200      	movs	r2, #0
 8004172:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8004174:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004178:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8004182:	4619      	mov	r1, r3
 8004184:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004188:	f7fc fa7c 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 800418c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004190:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800419a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 80041a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80041b2:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 80041bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80041ca:	3301      	adds	r3, #1
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 80041dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 80041ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2234      	movs	r2, #52	; 0x34
 80041f8:	701a      	strb	r2, [r3, #0]
				break;
 80041fa:	f000 be35 	b.w	8004e68 <GAME_PLAY_Phase_Management+0x35d4>
 80041fe:	bf00      	nop
 8004200:	2400000c 	.word	0x2400000c
 8004204:	080109cc 	.word	0x080109cc
 8004208:	080109dc 	.word	0x080109dc
 800420c:	080109e8 	.word	0x080109e8
 8004210:	080109f8 	.word	0x080109f8
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004214:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004218:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	4bc4      	ldr	r3, [pc, #784]	; (8004534 <GAME_PLAY_Phase_Management+0x2ca0>)
 8004222:	9203      	str	r2, [sp, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	9202      	str	r2, [sp, #8]
 8004228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800422c:	9201      	str	r2, [sp, #4]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	9200      	str	r2, [sp, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4ac0      	ldr	r2, [pc, #768]	; (8004538 <GAME_PLAY_Phase_Management+0x2ca4>)
 8004236:	215a      	movs	r1, #90	; 0x5a
 8004238:	2005      	movs	r0, #5
 800423a:	f002 f9f6 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800423e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004242:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	4bba      	ldr	r3, [pc, #744]	; (8004534 <GAME_PLAY_Phase_Management+0x2ca0>)
 800424c:	9203      	str	r2, [sp, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	9202      	str	r2, [sp, #8]
 8004252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004256:	9201      	str	r2, [sp, #4]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	9200      	str	r2, [sp, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4ab7      	ldr	r2, [pc, #732]	; (800453c <GAME_PLAY_Phase_Management+0x2ca8>)
 8004260:	2169      	movs	r1, #105	; 0x69
 8004262:	2005      	movs	r0, #5
 8004264:	f002 f9e1 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004268:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800426c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	4baf      	ldr	r3, [pc, #700]	; (8004534 <GAME_PLAY_Phase_Management+0x2ca0>)
 8004276:	9203      	str	r2, [sp, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	9202      	str	r2, [sp, #8]
 800427c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004280:	9201      	str	r2, [sp, #4]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	9200      	str	r2, [sp, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4aad      	ldr	r2, [pc, #692]	; (8004540 <GAME_PLAY_Phase_Management+0x2cac>)
 800428a:	215a      	movs	r1, #90	; 0x5a
 800428c:	2005      	movs	r0, #5
 800428e:	f002 f9cc 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004292:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004296:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	4ba5      	ldr	r3, [pc, #660]	; (8004534 <GAME_PLAY_Phase_Management+0x2ca0>)
 80042a0:	9203      	str	r2, [sp, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	9202      	str	r2, [sp, #8]
 80042a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042aa:	9201      	str	r2, [sp, #4]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	9200      	str	r2, [sp, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4aa4      	ldr	r2, [pc, #656]	; (8004544 <GAME_PLAY_Phase_Management+0x2cb0>)
 80042b4:	2169      	movs	r1, #105	; 0x69
 80042b6:	2005      	movs	r0, #5
 80042b8:	f002 f9b7 	bl	800662a <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 80042bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b34      	cmp	r3, #52	; 0x34
 80042ca:	d141      	bne.n	8004350 <GAME_PLAY_Phase_Management+0x2abc>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 80042cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	789b      	ldrb	r3, [r3, #2]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d115      	bne.n	8004308 <GAME_PLAY_Phase_Management+0x2a74>
						//affect
						state_game->action = 54;
 80042dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2236      	movs	r2, #54	; 0x36
 80042e8:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 80042ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042ee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2204      	movs	r2, #4
 80042f6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 80042fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2200      	movs	r2, #0
 8004306:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8004308:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800430c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004310:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004314:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004318:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800431c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	6809      	ldr	r1, [r1, #0]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	f7fc fa15 	bl	8000754 <Player_Reading_Card>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 800432a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800432e:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004332:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004336:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800433a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800433e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	6809      	ldr	r1, [r1, #0]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	f7fc fd5a 	bl	8000e00 <Player_Reading_Card_Monster_Effect>
							state_game->action = 52;
						}
					}
				}

				break;
 800434c:	f000 bd8e 	b.w	8004e6c <GAME_PLAY_Phase_Management+0x35d8>
				else if ((state_game->action == 53 )){
 8004350:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004354:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b35      	cmp	r3, #53	; 0x35
 800435e:	f040 8585 	bne.w	8004e6c <GAME_PLAY_Phase_Management+0x35d8>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004362:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004366:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	2300      	movs	r3, #0
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2326      	movs	r3, #38	; 0x26
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	215a      	movs	r1, #90	; 0x5a
 800437a:	2000      	movs	r0, #0
 800437c:	f002 fa9e 	bl	80068bc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004380:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004384:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	2300      	movs	r3, #0
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	2326      	movs	r3, #38	; 0x26
 8004394:	2280      	movs	r2, #128	; 0x80
 8004396:	215a      	movs	r1, #90	; 0x5a
 8004398:	2000      	movs	r0, #0
 800439a:	f002 fa8f 	bl	80068bc <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 800439e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043a2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80043ac:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 80043b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043b4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80043b8:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	f000 fee7 	bl	8005190 <YUGIOH_Check_Trap_On_board>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 323a 	strb.w	r3, [r7, #570]	; 0x23a
					if(ptrYugiohCard_src->cardSignature == 3){
 80043c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d14f      	bne.n	8004472 <GAME_PLAY_Phase_Management+0x2bde>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 80043d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	f7fc fead 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 80043e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80043e4:	2200      	movs	r2, #0
 80043e6:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80043e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80043f6:	4619      	mov	r1, r3
 80043f8:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80043fc:	f7fc f942 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8004400:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004404:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800440e:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8004418:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800441c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004426:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8004430:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004434:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800443e:	3301      	adds	r3, #1
 8004440:	b2da      	uxtb	r2, r3
 8004442:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004446:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 8004450:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004454:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2203      	movs	r2, #3
 800445c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 8004460:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004464:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2234      	movs	r2, #52	; 0x34
 800446c:	701a      	strb	r2, [r3, #0]
				break;
 800446e:	f000 bcfd 	b.w	8004e6c <GAME_PLAY_Phase_Management+0x35d8>
						if (idx != 255)
 8004472:	f897 323a 	ldrb.w	r3, [r7, #570]	; 0x23a
 8004476:	2bff      	cmp	r3, #255	; 0xff
 8004478:	f000 84f8 	beq.w	8004e6c <GAME_PLAY_Phase_Management+0x35d8>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 800447c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004480:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	f7fc fe58 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 800448a:	f897 323a 	ldrb.w	r3, [r7, #570]	; 0x23a
 800448e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004492:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	3308      	adds	r3, #8
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	4413      	add	r3, r2
 800449e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80044a2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80044a6:	2200      	movs	r2, #0
 80044a8:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80044aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80044b8:	4619      	mov	r1, r3
 80044ba:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80044be:	f7fc f8e1 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 80044c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80044d0:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 80044da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044de:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80044e8:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 80044f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044f6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004500:	3301      	adds	r3, #1
 8004502:	b2da      	uxtb	r2, r3
 8004504:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004508:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8004512:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004516:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2202      	movs	r2, #2
 800451e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8004522:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004526:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2234      	movs	r2, #52	; 0x34
 800452e:	701a      	strb	r2, [r3, #0]
				break;
 8004530:	f000 bc9c 	b.w	8004e6c <GAME_PLAY_Phase_Management+0x35d8>
 8004534:	2400000c 	.word	0x2400000c
 8004538:	080109e8 	.word	0x080109e8
 800453c:	08010a04 	.word	0x08010a04
 8004540:	08010a0c 	.word	0x08010a0c
 8004544:	08010a1c 	.word	0x08010a1c
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004548:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800454c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	781a      	ldrb	r2, [r3, #0]
 8004554:	4bba      	ldr	r3, [pc, #744]	; (8004840 <GAME_PLAY_Phase_Management+0x2fac>)
 8004556:	9203      	str	r2, [sp, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	9202      	str	r2, [sp, #8]
 800455c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004560:	9201      	str	r2, [sp, #4]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	9200      	str	r2, [sp, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4ab6      	ldr	r2, [pc, #728]	; (8004844 <GAME_PLAY_Phase_Management+0x2fb0>)
 800456a:	215a      	movs	r1, #90	; 0x5a
 800456c:	2005      	movs	r0, #5
 800456e:	f002 f85c 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004572:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004576:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	4bb0      	ldr	r3, [pc, #704]	; (8004840 <GAME_PLAY_Phase_Management+0x2fac>)
 8004580:	9203      	str	r2, [sp, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	9202      	str	r2, [sp, #8]
 8004586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800458a:	9201      	str	r2, [sp, #4]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	9200      	str	r2, [sp, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4aac      	ldr	r2, [pc, #688]	; (8004844 <GAME_PLAY_Phase_Management+0x2fb0>)
 8004594:	215a      	movs	r1, #90	; 0x5a
 8004596:	2005      	movs	r0, #5
 8004598:	f002 f847 	bl	800662a <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 800459c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	4619      	mov	r1, r3
 80045aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045ae:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80045b2:	f501 7394 	add.w	r3, r1, #296	; 0x128
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	4413      	add	r3, r2
 80045bc:	3304      	adds	r3, #4
 80045be:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 80045c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	4619      	mov	r1, r3
 80045d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045d4:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80045d8:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	4413      	add	r3, r2
 80045e2:	3304      	adds	r3, #4
 80045e4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

				if(state_game->action == 54)
 80045e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b36      	cmp	r3, #54	; 0x36
 80045f6:	f040 843b 	bne.w	8004e70 <GAME_PLAY_Phase_Management+0x35dc>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 80045fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	785a      	ldrb	r2, [r3, #1]
 8004606:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800460a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004614:	429a      	cmp	r2, r3
 8004616:	f080 80a1 	bcs.w	800475c <GAME_PLAY_Phase_Management+0x2ec8>
					{
						state_game->test = 165;
 800461a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800461e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	22a5      	movs	r2, #165	; 0xa5
 8004626:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800462a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800462e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	4619      	mov	r1, r3
 8004638:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800463c:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004640:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	4413      	add	r3, r2
 800464a:	3304      	adds	r3, #4
 800464c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

						if (ptrYugiohCard_src->cardSignature == 3)
 8004650:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d11c      	bne.n	8004694 <GAME_PLAY_Phase_Management+0x2e00>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 800465a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2262      	movs	r2, #98	; 0x62
 8004662:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004666:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8004670:	4618      	mov	r0, r3
 8004672:	f7fc fdae 	bl	80011d2 <YUGIOH_To_GY>
							state_game->count_chain++;
 8004676:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800467a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	3301      	adds	r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800468a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 8004692:	e3ed      	b.n	8004e70 <GAME_PLAY_Phase_Management+0x35dc>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8004694:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b0e      	cmp	r3, #14
 800469c:	d004      	beq.n	80046a8 <GAME_PLAY_Phase_Management+0x2e14>
 800469e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b0f      	cmp	r3, #15
 80046a6:	d128      	bne.n	80046fa <GAME_PLAY_Phase_Management+0x2e66>
							state_game->test = 133;
 80046a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2285      	movs	r2, #133	; 0x85
 80046b4:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80046b8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f000 fcdc 	bl	8005084 <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80046cc:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fc fd7b 	bl	80011d2 <YUGIOH_To_GY>
							state_game->count_chain++;
 80046dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	3301      	adds	r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	705a      	strb	r2, [r3, #1]
				break;
 80046f8:	e3ba      	b.n	8004e70 <GAME_PLAY_Phase_Management+0x35dc>
						else if(ptrYugiohCard_src->cardSignature == 20){
 80046fa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b14      	cmp	r3, #20
 8004702:	f040 83b5 	bne.w	8004e70 <GAME_PLAY_Phase_Management+0x35dc>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004706:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8004710:	4618      	mov	r0, r3
 8004712:	f7fc fd5e 	bl	80011d2 <YUGIOH_To_GY>
							if(state_game->MainGame_State == first_player){
 8004716:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800471a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8004724:	2b02      	cmp	r3, #2
 8004726:	d108      	bne.n	800473a <GAME_PLAY_Phase_Management+0x2ea6>
								state_game->MainGame_State = second_player;
 8004728:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800472c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2203      	movs	r2, #3
 8004734:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8004738:	e007      	b.n	800474a <GAME_PLAY_Phase_Management+0x2eb6>
								state_game->MainGame_State = first_player;
 800473a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800473e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
							state_game->PlyerAction_State = Drawn_Phase;
 800474a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800474e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
				break;
 800475a:	e389      	b.n	8004e70 <GAME_PLAY_Phase_Management+0x35dc>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800475c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004760:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	2300      	movs	r3, #0
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	2326      	movs	r3, #38	; 0x26
 8004770:	2280      	movs	r2, #128	; 0x80
 8004772:	215a      	movs	r1, #90	; 0x5a
 8004774:	2000      	movs	r0, #0
 8004776:	f002 f8a1 	bl	80068bc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800477a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800477e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	2300      	movs	r3, #0
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	2326      	movs	r3, #38	; 0x26
 800478e:	2280      	movs	r2, #128	; 0x80
 8004790:	215a      	movs	r1, #90	; 0x5a
 8004792:	2000      	movs	r0, #0
 8004794:	f002 f892 	bl	80068bc <ST7735_FillRectangleNSS>
						state_game->action = 50;
 8004798:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800479c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2232      	movs	r2, #50	; 0x32
 80047a4:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 80047a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047aa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2205      	movs	r2, #5
 80047b2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80047b6:	e35b      	b.n	8004e70 <GAME_PLAY_Phase_Management+0x35dc>
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80047b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047c6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 80047ca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80047ce:	791b      	ldrb	r3, [r3, #4]
 80047d0:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247

				if(ptrYugiohCard_src->targetPosition == 99)
 80047d4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80047d8:	79db      	ldrb	r3, [r3, #7]
 80047da:	2b63      	cmp	r3, #99	; 0x63
 80047dc:	d122      	bne.n	8004824 <GAME_PLAY_Phase_Management+0x2f90>
				{
					playerDef->life_point -= atk*100;
 80047de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047e2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	889a      	ldrh	r2, [r3, #4]
 80047ea:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	4619      	mov	r1, r3
 80047f2:	0249      	lsls	r1, r1, #9
 80047f4:	1ac9      	subs	r1, r1, r3
 80047f6:	0089      	lsls	r1, r1, #2
 80047f8:	4419      	add	r1, r3
 80047fa:	00c9      	lsls	r1, r1, #3
 80047fc:	1acb      	subs	r3, r1, r3
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	b29b      	uxth	r3, r3
 8004802:	4413      	add	r3, r2
 8004804:	b29a      	uxth	r2, r3
 8004806:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800480a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8004812:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004816:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2206      	movs	r2, #6
 800481e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f

					}
				}


				break;
 8004822:	e327      	b.n	8004e74 <GAME_PLAY_Phase_Management+0x35e0>
				else if(ptrYugiohCard_src->targetPosition == 98)
 8004824:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004828:	79db      	ldrb	r3, [r3, #7]
 800482a:	2b62      	cmp	r3, #98	; 0x62
 800482c:	d10c      	bne.n	8004848 <GAME_PLAY_Phase_Management+0x2fb4>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 800482e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004832:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2206      	movs	r2, #6
 800483a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800483e:	e319      	b.n	8004e74 <GAME_PLAY_Phase_Management+0x35e0>
 8004840:	2400000c 	.word	0x2400000c
 8004844:	08010a2c 	.word	0x08010a2c
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 8004848:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800484c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3308      	adds	r3, #8
 8004854:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8004858:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800485c:	79db      	ldrb	r3, [r3, #7]
 800485e:	4619      	mov	r1, r3
 8004860:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004864:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004868:	010b      	lsls	r3, r1, #4
 800486a:	3308      	adds	r3, #8
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	4413      	add	r3, r2
 8004870:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					state_game->test = 54;
 8004874:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004878:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2236      	movs	r2, #54	; 0x36
 8004880:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8004884:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004888:	789b      	ldrb	r3, [r3, #2]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f040 8100 	bne.w	8004a90 <GAME_PLAY_Phase_Management+0x31fc>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004890:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004894:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	4b77      	ldr	r3, [pc, #476]	; (8004a7c <GAME_PLAY_Phase_Management+0x31e8>)
 800489e:	9203      	str	r2, [sp, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	9202      	str	r2, [sp, #8]
 80048a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048a8:	9201      	str	r2, [sp, #4]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	9200      	str	r2, [sp, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a73      	ldr	r2, [pc, #460]	; (8004a80 <GAME_PLAY_Phase_Management+0x31ec>)
 80048b2:	215a      	movs	r1, #90	; 0x5a
 80048b4:	2005      	movs	r0, #5
 80048b6:	f001 feb8 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80048ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	4b6d      	ldr	r3, [pc, #436]	; (8004a7c <GAME_PLAY_Phase_Management+0x31e8>)
 80048c8:	9203      	str	r2, [sp, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	9202      	str	r2, [sp, #8]
 80048ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80048d2:	9201      	str	r2, [sp, #4]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	9200      	str	r2, [sp, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a6a      	ldr	r2, [pc, #424]	; (8004a84 <GAME_PLAY_Phase_Management+0x31f0>)
 80048dc:	2169      	movs	r1, #105	; 0x69
 80048de:	2005      	movs	r0, #5
 80048e0:	f001 fea3 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80048e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048e8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	781a      	ldrb	r2, [r3, #0]
 80048f0:	4b62      	ldr	r3, [pc, #392]	; (8004a7c <GAME_PLAY_Phase_Management+0x31e8>)
 80048f2:	9203      	str	r2, [sp, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	9202      	str	r2, [sp, #8]
 80048f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048fc:	9201      	str	r2, [sp, #4]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	9200      	str	r2, [sp, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a60      	ldr	r2, [pc, #384]	; (8004a88 <GAME_PLAY_Phase_Management+0x31f4>)
 8004906:	215a      	movs	r1, #90	; 0x5a
 8004908:	2005      	movs	r0, #5
 800490a:	f001 fe8e 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800490e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004912:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	781a      	ldrb	r2, [r3, #0]
 800491a:	4b58      	ldr	r3, [pc, #352]	; (8004a7c <GAME_PLAY_Phase_Management+0x31e8>)
 800491c:	9203      	str	r2, [sp, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	9202      	str	r2, [sp, #8]
 8004922:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004926:	9201      	str	r2, [sp, #4]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	9200      	str	r2, [sp, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a57      	ldr	r2, [pc, #348]	; (8004a8c <GAME_PLAY_Phase_Management+0x31f8>)
 8004930:	2169      	movs	r1, #105	; 0x69
 8004932:	2005      	movs	r0, #5
 8004934:	f001 fe79 	bl	800662a <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 8004938:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800493c:	795b      	ldrb	r3, [r3, #5]
 800493e:	f887 3245 	strb.w	r3, [r7, #581]	; 0x245
						if(atk < def){
 8004942:	f897 2247 	ldrb.w	r2, [r7, #583]	; 0x247
 8004946:	f897 3245 	ldrb.w	r3, [r7, #581]	; 0x245
 800494a:	429a      	cmp	r2, r3
 800494c:	d25e      	bcs.n	8004a0c <GAME_PLAY_Phase_Management+0x3178>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800494e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004952:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	2300      	movs	r3, #0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2326      	movs	r3, #38	; 0x26
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	215a      	movs	r1, #90	; 0x5a
 8004966:	2000      	movs	r0, #0
 8004968:	f001 ffa8 	bl	80068bc <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800496c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004970:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	2300      	movs	r3, #0
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2326      	movs	r3, #38	; 0x26
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	215a      	movs	r1, #90	; 0x5a
 8004984:	2000      	movs	r0, #0
 8004986:	f001 ff99 	bl	80068bc <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 800498a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800498e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	889a      	ldrh	r2, [r3, #4]
 8004996:	f897 1245 	ldrb.w	r1, [r7, #581]	; 0x245
 800499a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800499e:	1acb      	subs	r3, r1, r3
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4619      	mov	r1, r3
 80049a4:	0249      	lsls	r1, r1, #9
 80049a6:	1ac9      	subs	r1, r1, r3
 80049a8:	0089      	lsls	r1, r1, #2
 80049aa:	4419      	add	r1, r3
 80049ac:	00c9      	lsls	r1, r1, #3
 80049ae:	1acb      	subs	r3, r1, r3
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 80049c4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80049c8:	799b      	ldrb	r3, [r3, #6]
 80049ca:	4619      	mov	r1, r3
 80049cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049d0:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 80049d4:	010b      	lsls	r3, r1, #4
 80049d6:	3308      	adds	r3, #8
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	441a      	add	r2, r3
 80049dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80049e4:	4611      	mov	r1, r2
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	f7fc fbf3 	bl	80011d2 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80049ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	f7fc faf5 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80049fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2206      	movs	r2, #6
 8004a06:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004a0a:	e233      	b.n	8004e74 <GAME_PLAY_Phase_Management+0x35e0>
						else if(atk > def){
 8004a0c:	f897 2247 	ldrb.w	r2, [r7, #583]	; 0x247
 8004a10:	f897 3245 	ldrb.w	r3, [r7, #581]	; 0x245
 8004a14:	429a      	cmp	r2, r3
 8004a16:	f240 822d 	bls.w	8004e74 <GAME_PLAY_Phase_Management+0x35e0>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004a1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a1e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2326      	movs	r3, #38	; 0x26
 8004a2e:	2280      	movs	r2, #128	; 0x80
 8004a30:	215a      	movs	r1, #90	; 0x5a
 8004a32:	2000      	movs	r0, #0
 8004a34:	f001 ff42 	bl	80068bc <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004a38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a3c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	2300      	movs	r3, #0
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	2326      	movs	r3, #38	; 0x26
 8004a4c:	2280      	movs	r2, #128	; 0x80
 8004a4e:	215a      	movs	r1, #90	; 0x5a
 8004a50:	2000      	movs	r0, #0
 8004a52:	f001 ff33 	bl	80068bc <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8004a56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a5a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004a5e:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	f7fc fbb5 	bl	80011d2 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004a68:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a6c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2206      	movs	r2, #6
 8004a74:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004a78:	e1fc      	b.n	8004e74 <GAME_PLAY_Phase_Management+0x35e0>
 8004a7a:	bf00      	nop
 8004a7c:	2400000c 	.word	0x2400000c
 8004a80:	08010a3c 	.word	0x08010a3c
 8004a84:	08010a4c 	.word	0x08010a4c
 8004a88:	08010a5c 	.word	0x08010a5c
 8004a8c:	08010a6c 	.word	0x08010a6c
					else if(ptrYugiohCard_dst->cardState == 1){
 8004a90:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004a94:	789b      	ldrb	r3, [r3, #2]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	f040 81ec 	bne.w	8004e74 <GAME_PLAY_Phase_Management+0x35e0>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004a9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004aa0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	781a      	ldrb	r2, [r3, #0]
 8004aa8:	4bba      	ldr	r3, [pc, #744]	; (8004d94 <GAME_PLAY_Phase_Management+0x3500>)
 8004aaa:	9203      	str	r2, [sp, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	9202      	str	r2, [sp, #8]
 8004ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ab4:	9201      	str	r2, [sp, #4]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	9200      	str	r2, [sp, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4ab6      	ldr	r2, [pc, #728]	; (8004d98 <GAME_PLAY_Phase_Management+0x3504>)
 8004abe:	215a      	movs	r1, #90	; 0x5a
 8004ac0:	2005      	movs	r0, #5
 8004ac2:	f001 fdb2 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004ac6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004aca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	4bb0      	ldr	r3, [pc, #704]	; (8004d94 <GAME_PLAY_Phase_Management+0x3500>)
 8004ad4:	9203      	str	r2, [sp, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	9202      	str	r2, [sp, #8]
 8004ada:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004ade:	9201      	str	r2, [sp, #4]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	9200      	str	r2, [sp, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4aad      	ldr	r2, [pc, #692]	; (8004d9c <GAME_PLAY_Phase_Management+0x3508>)
 8004ae8:	2169      	movs	r1, #105	; 0x69
 8004aea:	2005      	movs	r0, #5
 8004aec:	f001 fd9d 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004af0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004af4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	4ba5      	ldr	r3, [pc, #660]	; (8004d94 <GAME_PLAY_Phase_Management+0x3500>)
 8004afe:	9203      	str	r2, [sp, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	9202      	str	r2, [sp, #8]
 8004b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b08:	9201      	str	r2, [sp, #4]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	9200      	str	r2, [sp, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4aa3      	ldr	r2, [pc, #652]	; (8004da0 <GAME_PLAY_Phase_Management+0x350c>)
 8004b12:	215a      	movs	r1, #90	; 0x5a
 8004b14:	2005      	movs	r0, #5
 8004b16:	f001 fd88 	bl	800662a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8004b1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b1e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	4b9b      	ldr	r3, [pc, #620]	; (8004d94 <GAME_PLAY_Phase_Management+0x3500>)
 8004b28:	9203      	str	r2, [sp, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	9202      	str	r2, [sp, #8]
 8004b2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b32:	9201      	str	r2, [sp, #4]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	9200      	str	r2, [sp, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a9a      	ldr	r2, [pc, #616]	; (8004da4 <GAME_PLAY_Phase_Management+0x3510>)
 8004b3c:	2169      	movs	r1, #105	; 0x69
 8004b3e:	2005      	movs	r0, #5
 8004b40:	f001 fd73 	bl	800662a <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8004b44:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004b48:	791b      	ldrb	r3, [r3, #4]
 8004b4a:	f887 3246 	strb.w	r3, [r7, #582]	; 0x246
						state_game->test = 60;
 8004b4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	223c      	movs	r2, #60	; 0x3c
 8004b5a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 8004b5e:	f897 2247 	ldrb.w	r2, [r7, #583]	; 0x247
 8004b62:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d266      	bcs.n	8004c38 <GAME_PLAY_Phase_Management+0x33a4>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004b6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b6e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	2326      	movs	r3, #38	; 0x26
 8004b7e:	2280      	movs	r2, #128	; 0x80
 8004b80:	215a      	movs	r1, #90	; 0x5a
 8004b82:	2000      	movs	r0, #0
 8004b84:	f001 fe9a 	bl	80068bc <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004b88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b8c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2326      	movs	r3, #38	; 0x26
 8004b9c:	2280      	movs	r2, #128	; 0x80
 8004b9e:	215a      	movs	r1, #90	; 0x5a
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f001 fe8b 	bl	80068bc <ST7735_FillRectangleNSS>
							state_game->test = 61;
 8004ba6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004baa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	223d      	movs	r2, #61	; 0x3d
 8004bb2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 8004bb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	889a      	ldrh	r2, [r3, #4]
 8004bc2:	f897 1246 	ldrb.w	r1, [r7, #582]	; 0x246
 8004bc6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8004bca:	1acb      	subs	r3, r1, r3
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	4619      	mov	r1, r3
 8004bd0:	0249      	lsls	r1, r1, #9
 8004bd2:	1ac9      	subs	r1, r1, r3
 8004bd4:	0089      	lsls	r1, r1, #2
 8004bd6:	4419      	add	r1, r3
 8004bd8:	00c9      	lsls	r1, r1, #3
 8004bda:	1acb      	subs	r3, r1, r3
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	4413      	add	r3, r2
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004be8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8004bf0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004bf4:	799b      	ldrb	r3, [r3, #6]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bfc:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8004c00:	010b      	lsls	r3, r1, #4
 8004c02:	3308      	adds	r3, #8
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	441a      	add	r2, r3
 8004c08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c0c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004c10:	4611      	mov	r1, r2
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	f7fc fadd 	bl	80011d2 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8004c18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c1c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	f7fc f9df 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004c26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c2a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2206      	movs	r2, #6
 8004c32:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004c36:	e11d      	b.n	8004e74 <GAME_PLAY_Phase_Management+0x35e0>
						else if(atk > atk2){
 8004c38:	f897 2247 	ldrb.w	r2, [r7, #583]	; 0x247
 8004c3c:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 8004c40:	429a      	cmp	r2, r3
 8004c42:	f240 8117 	bls.w	8004e74 <GAME_PLAY_Phase_Management+0x35e0>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004c46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c4a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	2300      	movs	r3, #0
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	2326      	movs	r3, #38	; 0x26
 8004c5a:	2280      	movs	r2, #128	; 0x80
 8004c5c:	215a      	movs	r1, #90	; 0x5a
 8004c5e:	2000      	movs	r0, #0
 8004c60:	f001 fe2c 	bl	80068bc <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004c64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c68:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	2300      	movs	r3, #0
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	2326      	movs	r3, #38	; 0x26
 8004c78:	2280      	movs	r2, #128	; 0x80
 8004c7a:	215a      	movs	r1, #90	; 0x5a
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f001 fe1d 	bl	80068bc <ST7735_FillRectangleNSS>
							state_game->test = 70;
 8004c82:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c86:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2246      	movs	r2, #70	; 0x46
 8004c8e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 8004c92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c96:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	889a      	ldrh	r2, [r3, #4]
 8004c9e:	f897 1247 	ldrb.w	r1, [r7, #583]	; 0x247
 8004ca2:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 8004ca6:	1acb      	subs	r3, r1, r3
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	4619      	mov	r1, r3
 8004cac:	0249      	lsls	r1, r1, #9
 8004cae:	1ac9      	subs	r1, r1, r3
 8004cb0:	0089      	lsls	r1, r1, #2
 8004cb2:	4419      	add	r1, r3
 8004cb4:	00c9      	lsls	r1, r1, #3
 8004cb6:	1acb      	subs	r3, r1, r3
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cc4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8004ccc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cd0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004cd4:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	f7fc fa7a 	bl	80011d2 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004cde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ce2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2206      	movs	r2, #6
 8004cea:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004cee:	e0c1      	b.n	8004e74 <GAME_PLAY_Phase_Management+0x35e0>
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004cf0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cf4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	781a      	ldrb	r2, [r3, #0]
 8004cfc:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <GAME_PLAY_Phase_Management+0x3500>)
 8004cfe:	9203      	str	r2, [sp, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	9202      	str	r2, [sp, #8]
 8004d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d08:	9201      	str	r2, [sp, #4]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	9200      	str	r2, [sp, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a25      	ldr	r2, [pc, #148]	; (8004da8 <GAME_PLAY_Phase_Management+0x3514>)
 8004d12:	215a      	movs	r1, #90	; 0x5a
 8004d14:	2005      	movs	r0, #5
 8004d16:	f001 fc88 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004d1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d1e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	781a      	ldrb	r2, [r3, #0]
 8004d26:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <GAME_PLAY_Phase_Management+0x3500>)
 8004d28:	9203      	str	r2, [sp, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	9202      	str	r2, [sp, #8]
 8004d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d32:	9201      	str	r2, [sp, #4]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	9200      	str	r2, [sp, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <GAME_PLAY_Phase_Management+0x3518>)
 8004d3c:	215a      	movs	r1, #90	; 0x5a
 8004d3e:	2005      	movs	r0, #5
 8004d40:	f001 fc73 	bl	800662a <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8004d44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d48:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004d52:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
				YUGIOH_card_clear(ptrYugiohCard_src);
 8004d56:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8004d5a:	f7fb fcca 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8004d5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d62:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	889b      	ldrh	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <GAME_PLAY_Phase_Management+0x34ee>
 8004d6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d72:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	889b      	ldrh	r3, [r3, #4]
 8004d7a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d916      	bls.n	8004db0 <GAME_PLAY_Phase_Management+0x351c>
					state_game->MainGame_State = Game_Ended;
 8004d82:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d86:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8004d92:	e070      	b.n	8004e76 <GAME_PLAY_Phase_Management+0x35e2>
 8004d94:	2400000c 	.word	0x2400000c
 8004d98:	08010a3c 	.word	0x08010a3c
 8004d9c:	08010a80 	.word	0x08010a80
 8004da0:	08010a5c 	.word	0x08010a5c
 8004da4:	08010a90 	.word	0x08010a90
 8004da8:	08010aa4 	.word	0x08010aa4
 8004dac:	08010ab4 	.word	0x08010ab4
					state_game->action = 50;
 8004db0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004db4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2232      	movs	r2, #50	; 0x32
 8004dbc:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004dbe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dc2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2326      	movs	r3, #38	; 0x26
 8004dd2:	2280      	movs	r2, #128	; 0x80
 8004dd4:	215a      	movs	r1, #90	; 0x5a
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f001 fd70 	bl	80068bc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004ddc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004de0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	2300      	movs	r3, #0
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2326      	movs	r3, #38	; 0x26
 8004df0:	2280      	movs	r2, #128	; 0x80
 8004df2:	215a      	movs	r1, #90	; 0x5a
 8004df4:	2000      	movs	r0, #0
 8004df6:	f001 fd61 	bl	80068bc <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004dfa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dfe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	4b22      	ldr	r3, [pc, #136]	; (8004e90 <GAME_PLAY_Phase_Management+0x35fc>)
 8004e08:	9203      	str	r2, [sp, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	9202      	str	r2, [sp, #8]
 8004e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e12:	9201      	str	r2, [sp, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	9200      	str	r2, [sp, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	; (8004e94 <GAME_PLAY_Phase_Management+0x3600>)
 8004e1c:	215a      	movs	r1, #90	; 0x5a
 8004e1e:	2005      	movs	r0, #5
 8004e20:	f001 fc03 	bl	800662a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004e24:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e28:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <GAME_PLAY_Phase_Management+0x35fc>)
 8004e32:	9203      	str	r2, [sp, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	9202      	str	r2, [sp, #8]
 8004e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e3c:	9201      	str	r2, [sp, #4]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	9200      	str	r2, [sp, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <GAME_PLAY_Phase_Management+0x3604>)
 8004e46:	215a      	movs	r1, #90	; 0x5a
 8004e48:	2005      	movs	r0, #5
 8004e4a:	f001 fbee 	bl	800662a <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8004e4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004e5e:	e00a      	b.n	8004e76 <GAME_PLAY_Phase_Management+0x35e2>
				break;
 8004e60:	bf00      	nop
 8004e62:	e00f      	b.n	8004e84 <GAME_PLAY_Phase_Management+0x35f0>
				break;
 8004e64:	bf00      	nop
 8004e66:	e00d      	b.n	8004e84 <GAME_PLAY_Phase_Management+0x35f0>
				break;
 8004e68:	bf00      	nop
 8004e6a:	e00b      	b.n	8004e84 <GAME_PLAY_Phase_Management+0x35f0>
				break;
 8004e6c:	bf00      	nop
 8004e6e:	e009      	b.n	8004e84 <GAME_PLAY_Phase_Management+0x35f0>
				break;
 8004e70:	bf00      	nop
 8004e72:	e007      	b.n	8004e84 <GAME_PLAY_Phase_Management+0x35f0>
				break;
 8004e74:	bf00      	nop
			}
			break;
 8004e76:	e005      	b.n	8004e84 <GAME_PLAY_Phase_Management+0x35f0>
		break;
 8004e78:	bf00      	nop
 8004e7a:	e004      	b.n	8004e86 <GAME_PLAY_Phase_Management+0x35f2>
		break;
 8004e7c:	bf00      	nop
 8004e7e:	e002      	b.n	8004e86 <GAME_PLAY_Phase_Management+0x35f2>
		break;
 8004e80:	bf00      	nop
 8004e82:	e000      	b.n	8004e86 <GAME_PLAY_Phase_Management+0x35f2>
			break;
 8004e84:	bf00      	nop

	}
}
 8004e86:	bf00      	nop
 8004e88:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd90      	pop	{r4, r7, pc}
 8004e90:	2400000c 	.word	0x2400000c
 8004e94:	08010aa4 	.word	0x08010aa4
 8004e98:	08010ab4 	.word	0x08010ab4

08004e9c <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3338      	adds	r3, #56	; 0x38
 8004ea8:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8004eaa:	2300      	movs	r3, #0
 8004eac:	72fb      	strb	r3, [r7, #11]
 8004eae:	e00d      	b.n	8004ecc <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 8004eb8:	68f9      	ldr	r1, [r7, #12]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc f989 	bl	80011d2 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3310      	adds	r3, #16
 8004ec4:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	72fb      	strb	r3, [r7, #11]
 8004ecc:	7afb      	ldrb	r3, [r7, #11]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d9ee      	bls.n	8004eb0 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 8004ed2:	bf00      	nop
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3308      	adds	r3, #8
 8004eea:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3338      	adds	r3, #56	; 0x38
 8004ef0:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	3338      	adds	r3, #56	; 0x38
 8004efc:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
 8004f02:	e00d      	b.n	8004f20 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8004f0c:	6979      	ldr	r1, [r7, #20]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fc f95f 	bl	80011d2 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	3310      	adds	r3, #16
 8004f18:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	73fb      	strb	r3, [r7, #15]
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d9ee      	bls.n	8004f04 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8004f26:	2300      	movs	r3, #0
 8004f28:	73bb      	strb	r3, [r7, #14]
 8004f2a:	e00d      	b.n	8004f48 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 8004f34:	6939      	ldr	r1, [r7, #16]
 8004f36:	6838      	ldr	r0, [r7, #0]
 8004f38:	f7fc f94b 	bl	80011d2 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	3310      	adds	r3, #16
 8004f40:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8004f42:	7bbb      	ldrb	r3, [r7, #14]
 8004f44:	3301      	adds	r3, #1
 8004f46:	73bb      	strb	r3, [r7, #14]
 8004f48:	7bbb      	ldrb	r3, [r7, #14]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d9ee      	bls.n	8004f2c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f6e:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3368      	adds	r3, #104	; 0x68
 8004f74:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3368      	adds	r3, #104	; 0x68
 8004f7a:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	74fb      	strb	r3, [r7, #19]
 8004f80:	e010      	b.n	8004fa4 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d104      	bne.n	8004f98 <YUGIOH_Reborn+0x40>
			flag = 1;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	77bb      	strb	r3, [r7, #30]
			break;
 8004f96:	e008      	b.n	8004faa <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3310      	adds	r3, #16
 8004f9c:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8004f9e:	7cfb      	ldrb	r3, [r7, #19]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	74fb      	strb	r3, [r7, #19]
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	2b13      	cmp	r3, #19
 8004fa8:	d9eb      	bls.n	8004f82 <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3338      	adds	r3, #56	; 0x38
 8004fae:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 8004fb0:	7ffb      	ldrb	r3, [r7, #31]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d134      	bne.n	8005020 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	799a      	ldrb	r2, [r3, #6]
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <YUGIOH_Reborn+0xd0>)
 8004fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc0:	0899      	lsrs	r1, r3, #2
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	440b      	add	r3, r1
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 8004fce:	7afb      	ldrb	r3, [r7, #11]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	69b8      	ldr	r0, [r7, #24]
 8004fdc:	f7fb fb52 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 8004fe0:	7fbb      	ldrb	r3, [r7, #30]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	3368      	adds	r3, #104	; 0x68
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4413      	add	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 8004fee:	7fbb      	ldrb	r3, [r7, #30]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	3368      	adds	r3, #104	; 0x68
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8004ffa:	7fbb      	ldrb	r3, [r7, #30]
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e00c      	b.n	800501a <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8005000:	6979      	ldr	r1, [r7, #20]
 8005002:	69b8      	ldr	r0, [r7, #24]
 8005004:	f7fb fb3e 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	3310      	adds	r3, #16
 800500c:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3310      	adds	r3, #16
 8005012:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3301      	adds	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b13      	cmp	r3, #19
 800501e:	ddef      	ble.n	8005000 <YUGIOH_Reborn+0xa8>
		}


	}
}
 8005020:	bf00      	nop
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	aaaaaaab 	.word	0xaaaaaaab

0800502c <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800503a:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005042:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	799a      	ldrb	r2, [r3, #6]
 8005048:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <YUGIOH_Ancient_Rules+0x54>)
 800504a:	fba3 1302 	umull	r1, r3, r3, r2
 800504e:	0899      	lsrs	r1, r3, #2
 8005050:	460b      	mov	r3, r1
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	440b      	add	r3, r1
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3308      	adds	r3, #8
 8005060:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 8005062:	7cfb      	ldrb	r3, [r7, #19]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	3308      	adds	r3, #8
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4413      	add	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800506e:	68f9      	ldr	r1, [r7, #12]
 8005070:	6978      	ldr	r0, [r7, #20]
 8005072:	f7fb fb07 	bl	8000684 <YUGIOH_card_copy>

}
 8005076:	bf00      	nop
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	aaaaaaab 	.word	0xaaaaaaab

08005084 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3308      	adds	r3, #8
 8005092:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3338      	adds	r3, #56	; 0x38
 8005098:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	3308      	adds	r3, #8
 800509e:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	3338      	adds	r3, #56	; 0x38
 80050a4:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80050aa:	2300      	movs	r3, #0
 80050ac:	73bb      	strb	r3, [r7, #14]
 80050ae:	e00c      	b.n	80050ca <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d102      	bne.n	80050be <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	3301      	adds	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	3310      	adds	r3, #16
 80050c2:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80050c4:	7bbb      	ldrb	r3, [r7, #14]
 80050c6:	3301      	adds	r3, #1
 80050c8:	73bb      	strb	r3, [r7, #14]
 80050ca:	7bbb      	ldrb	r3, [r7, #14]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d9ef      	bls.n	80050b0 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80050d0:	2300      	movs	r3, #0
 80050d2:	737b      	strb	r3, [r7, #13]
 80050d4:	e00c      	b.n	80050f0 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d102      	bne.n	80050e4 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	3301      	adds	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	3310      	adds	r3, #16
 80050e8:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80050ea:	7b7b      	ldrb	r3, [r7, #13]
 80050ec:	3301      	adds	r3, #1
 80050ee:	737b      	strb	r3, [r7, #13]
 80050f0:	7b7b      	ldrb	r3, [r7, #13]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d9ef      	bls.n	80050d6 <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	889a      	ldrh	r2, [r3, #4]
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4619      	mov	r1, r3
 8005100:	0089      	lsls	r1, r1, #2
 8005102:	440b      	add	r3, r1
 8005104:	4619      	mov	r1, r3
 8005106:	0109      	lsls	r1, r1, #4
 8005108:	1acb      	subs	r3, r1, r3
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	b29b      	uxth	r3, r3
 800510e:	4413      	add	r3, r2
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	809a      	strh	r2, [r3, #4]

}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005134:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800513c:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	799a      	ldrb	r2, [r3, #6]
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <YUGIOH_Stop_Defense+0x68>)
 8005144:	fba3 1302 	umull	r1, r3, r3, r2
 8005148:	0899      	lsrs	r1, r3, #2
 800514a:	460b      	mov	r3, r1
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	440b      	add	r3, r1
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 800515c:	7cfb      	ldrb	r3, [r7, #19]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	3308      	adds	r3, #8
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	4413      	add	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	789b      	ldrb	r3, [r3, #2]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <YUGIOH_Stop_Defense+0x5a>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	709a      	strb	r2, [r3, #2]
	}

}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	aaaaaaab 	.word	0xaaaaaaab

08005190 <YUGIOH_Check_Trap_On_board>:

uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3308      	adds	r3, #8
 800519e:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 80051a0:	2300      	movs	r3, #0
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	e016      	b.n	80051d4 <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d10a      	bne.n	80051c8 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	7a5b      	ldrb	r3, [r3, #9]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d006      	beq.n	80051c8 <YUGIOH_Check_Trap_On_board+0x38>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d102      	bne.n	80051c8 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	e009      	b.n	80051dc <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3310      	adds	r3, #16
 80051cc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60bb      	str	r3, [r7, #8]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	dde5      	ble.n	80051a6 <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 80051da:	23ff      	movs	r3, #255	; 0xff
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3308      	adds	r3, #8
 80051f6:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 80051f8:	2300      	movs	r3, #0
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	e016      	b.n	800522c <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	429a      	cmp	r2, r3
 8005208:	d10a      	bne.n	8005220 <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	7a5b      	ldrb	r3, [r3, #9]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d006      	beq.n	8005220 <YUGIOH_Check_Spell_On_board+0x38>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	785b      	ldrb	r3, [r3, #1]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d102      	bne.n	8005220 <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e009      	b.n	8005234 <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3310      	adds	r3, #16
 8005224:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	3301      	adds	r3, #1
 800522a:	60bb      	str	r3, [r7, #8]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b02      	cmp	r3, #2
 8005230:	dde5      	ble.n	80051fe <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 8005232:	23ff      	movs	r3, #255	; 0xff
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3308      	adds	r3, #8
 800524c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 800524e:	2300      	movs	r3, #0
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	e00c      	b.n	800526e <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3310      	adds	r3, #16
 8005266:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	3301      	adds	r3, #1
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b02      	cmp	r3, #2
 8005272:	ddef      	ble.n	8005254 <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3338      	adds	r3, #56	; 0x38
 800528e:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8005290:	2303      	movs	r3, #3
 8005292:	60bb      	str	r3, [r7, #8]
 8005294:	e00c      	b.n	80052b0 <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3310      	adds	r3, #16
 80052a8:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	3301      	adds	r3, #1
 80052ae:	60bb      	str	r3, [r7, #8]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b05      	cmp	r3, #5
 80052b4:	ddef      	ble.n	8005296 <YUGIOH_Monster_Activated+0x14>
	}
}
 80052b6:	bf00      	nop
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <MainGUI>:
void MainGUI()
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80052ca:	4b55      	ldr	r3, [pc, #340]	; (8005420 <MainGUI+0x15c>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	9202      	str	r2, [sp, #8]
 80052d0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80052d4:	9201      	str	r2, [sp, #4]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	9200      	str	r2, [sp, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a51      	ldr	r2, [pc, #324]	; (8005424 <MainGUI+0x160>)
 80052de:	2105      	movs	r1, #5
 80052e0:	2005      	movs	r0, #5
 80052e2:	f001 f958 	bl	8006596 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80052e6:	4b4e      	ldr	r3, [pc, #312]	; (8005420 <MainGUI+0x15c>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	9202      	str	r2, [sp, #8]
 80052ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052f0:	9201      	str	r2, [sp, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	9200      	str	r2, [sp, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a4b      	ldr	r2, [pc, #300]	; (8005428 <MainGUI+0x164>)
 80052fa:	2114      	movs	r1, #20
 80052fc:	2005      	movs	r0, #5
 80052fe:	f001 f94a 	bl	8006596 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005302:	4b47      	ldr	r3, [pc, #284]	; (8005420 <MainGUI+0x15c>)
 8005304:	2200      	movs	r2, #0
 8005306:	9202      	str	r2, [sp, #8]
 8005308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800530c:	9201      	str	r2, [sp, #4]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	9200      	str	r2, [sp, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a45      	ldr	r2, [pc, #276]	; (800542c <MainGUI+0x168>)
 8005316:	2123      	movs	r1, #35	; 0x23
 8005318:	2005      	movs	r0, #5
 800531a:	f001 f93c 	bl	8006596 <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800531e:	4b40      	ldr	r3, [pc, #256]	; (8005420 <MainGUI+0x15c>)
 8005320:	2200      	movs	r2, #0
 8005322:	9202      	str	r2, [sp, #8]
 8005324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005328:	9201      	str	r2, [sp, #4]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	9200      	str	r2, [sp, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a3f      	ldr	r2, [pc, #252]	; (8005430 <MainGUI+0x16c>)
 8005332:	2123      	movs	r1, #35	; 0x23
 8005334:	203c      	movs	r0, #60	; 0x3c
 8005336:	f001 f8e4 	bl	8006502 <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800533a:	4b39      	ldr	r3, [pc, #228]	; (8005420 <MainGUI+0x15c>)
 800533c:	2200      	movs	r2, #0
 800533e:	9202      	str	r2, [sp, #8]
 8005340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005344:	9201      	str	r2, [sp, #4]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	9200      	str	r2, [sp, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a39      	ldr	r2, [pc, #228]	; (8005434 <MainGUI+0x170>)
 800534e:	2132      	movs	r1, #50	; 0x32
 8005350:	2000      	movs	r0, #0
 8005352:	f001 f920 	bl	8006596 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005356:	4b32      	ldr	r3, [pc, #200]	; (8005420 <MainGUI+0x15c>)
 8005358:	2200      	movs	r2, #0
 800535a:	9202      	str	r2, [sp, #8]
 800535c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005360:	9201      	str	r2, [sp, #4]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	9200      	str	r2, [sp, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a33      	ldr	r2, [pc, #204]	; (8005438 <MainGUI+0x174>)
 800536a:	213c      	movs	r1, #60	; 0x3c
 800536c:	2000      	movs	r0, #0
 800536e:	f001 f912 	bl	8006596 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8005372:	4b2b      	ldr	r3, [pc, #172]	; (8005420 <MainGUI+0x15c>)
 8005374:	2200      	movs	r2, #0
 8005376:	9202      	str	r2, [sp, #8]
 8005378:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800537c:	9201      	str	r2, [sp, #4]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	9200      	str	r2, [sp, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2d      	ldr	r2, [pc, #180]	; (800543c <MainGUI+0x178>)
 8005386:	2105      	movs	r1, #5
 8005388:	2005      	movs	r0, #5
 800538a:	f001 f8ba 	bl	8006502 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800538e:	4b24      	ldr	r3, [pc, #144]	; (8005420 <MainGUI+0x15c>)
 8005390:	2200      	movs	r2, #0
 8005392:	9202      	str	r2, [sp, #8]
 8005394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005398:	9201      	str	r2, [sp, #4]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	9200      	str	r2, [sp, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a21      	ldr	r2, [pc, #132]	; (8005428 <MainGUI+0x164>)
 80053a2:	2114      	movs	r1, #20
 80053a4:	2005      	movs	r0, #5
 80053a6:	f001 f8ac 	bl	8006502 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80053aa:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <MainGUI+0x15c>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	9202      	str	r2, [sp, #8]
 80053b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053b4:	9201      	str	r2, [sp, #4]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	9200      	str	r2, [sp, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a20      	ldr	r2, [pc, #128]	; (8005440 <MainGUI+0x17c>)
 80053be:	2123      	movs	r1, #35	; 0x23
 80053c0:	2005      	movs	r0, #5
 80053c2:	f001 f89e 	bl	8006502 <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80053c6:	4b16      	ldr	r3, [pc, #88]	; (8005420 <MainGUI+0x15c>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	9202      	str	r2, [sp, #8]
 80053cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053d0:	9201      	str	r2, [sp, #4]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	9200      	str	r2, [sp, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a15      	ldr	r2, [pc, #84]	; (8005430 <MainGUI+0x16c>)
 80053da:	2123      	movs	r1, #35	; 0x23
 80053dc:	203c      	movs	r0, #60	; 0x3c
 80053de:	f001 f8da 	bl	8006596 <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80053e2:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <MainGUI+0x15c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	9202      	str	r2, [sp, #8]
 80053e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053ec:	9201      	str	r2, [sp, #4]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	9200      	str	r2, [sp, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a0f      	ldr	r2, [pc, #60]	; (8005434 <MainGUI+0x170>)
 80053f6:	2132      	movs	r1, #50	; 0x32
 80053f8:	2000      	movs	r0, #0
 80053fa:	f001 f882 	bl	8006502 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80053fe:	4b08      	ldr	r3, [pc, #32]	; (8005420 <MainGUI+0x15c>)
 8005400:	2200      	movs	r2, #0
 8005402:	9202      	str	r2, [sp, #8]
 8005404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005408:	9201      	str	r2, [sp, #4]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	9200      	str	r2, [sp, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a09      	ldr	r2, [pc, #36]	; (8005438 <MainGUI+0x174>)
 8005412:	213c      	movs	r1, #60	; 0x3c
 8005414:	2000      	movs	r0, #0
 8005416:	f001 f874 	bl	8006502 <ST7735_WriteString>
}
 800541a:	bf00      	nop
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	2400000c 	.word	0x2400000c
 8005424:	080107b0 	.word	0x080107b0
 8005428:	08010ac4 	.word	0x08010ac4
 800542c:	08010ad4 	.word	0x08010ad4
 8005430:	08010adc 	.word	0x08010adc
 8005434:	08010ae4 	.word	0x08010ae4
 8005438:	0801075c 	.word	0x0801075c
 800543c:	08010750 	.word	0x08010750
 8005440:	08010af8 	.word	0x08010af8

08005444 <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af04      	add	r7, sp, #16
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 800544e:	2300      	movs	r3, #0
 8005450:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8005452:	4b49      	ldr	r3, [pc, #292]	; (8005578 <LCDvalue+0x134>)
 8005454:	881a      	ldrh	r2, [r3, #0]
 8005456:	4b49      	ldr	r3, [pc, #292]	; (800557c <LCDvalue+0x138>)
 8005458:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 800545a:	4b49      	ldr	r3, [pc, #292]	; (8005580 <LCDvalue+0x13c>)
 800545c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005460:	4a48      	ldr	r2, [pc, #288]	; (8005584 <LCDvalue+0x140>)
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	f7fa ff8b 	bl	8000380 <__aeabi_uldivmod>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4613      	mov	r3, r2
 8005470:	817b      	strh	r3, [r7, #10]
	time -= a;
 8005472:	4b42      	ldr	r3, [pc, #264]	; (800557c <LCDvalue+0x138>)
 8005474:	881a      	ldrh	r2, [r3, #0]
 8005476:	897b      	ldrh	r3, [r7, #10]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	b29a      	uxth	r2, r3
 800547c:	4b3f      	ldr	r3, [pc, #252]	; (800557c <LCDvalue+0x138>)
 800547e:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8005480:	4b3e      	ldr	r3, [pc, #248]	; (800557c <LCDvalue+0x138>)
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	4940      	ldr	r1, [pc, #256]	; (8005588 <LCDvalue+0x144>)
 8005488:	4840      	ldr	r0, [pc, #256]	; (800558c <LCDvalue+0x148>)
 800548a:	f00a fdd7 	bl	801003c <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e012      	b.n	80054ba <LCDvalue+0x76>
		if(t_c[i] == 0){
 8005494:	4a3d      	ldr	r2, [pc, #244]	; (800558c <LCDvalue+0x148>)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d109      	bne.n	80054b4 <LCDvalue+0x70>
			t_c[i] = 32;
 80054a0:	4a3a      	ldr	r2, [pc, #232]	; (800558c <LCDvalue+0x148>)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	2220      	movs	r2, #32
 80054a8:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3301      	adds	r3, #1
 80054ae:	4a37      	ldr	r2, [pc, #220]	; (800558c <LCDvalue+0x148>)
 80054b0:	2120      	movs	r1, #32
 80054b2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	dde9      	ble.n	8005494 <LCDvalue+0x50>
		}
	}
	if(time == 0){
 80054c0:	4b2e      	ldr	r3, [pc, #184]	; (800557c <LCDvalue+0x138>)
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 811d 	bne.w	8005704 <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 80054ca:	4831      	ldr	r0, [pc, #196]	; (8005590 <LCDvalue+0x14c>)
 80054cc:	f008 f9da 	bl	800d884 <HAL_TIM_Base_Stop_IT>
		time = 0;
 80054d0:	4b2a      	ldr	r3, [pc, #168]	; (800557c <LCDvalue+0x138>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 80054d6:	2000      	movs	r0, #0
 80054d8:	f001 fa7a 	bl	80069d0 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 80054dc:	2000      	movs	r0, #0
 80054de:	f001 fa88 	bl	80069f2 <ST7735_FillScreen1>
		while(time == 0){
 80054e2:	e10a      	b.n	80056fa <LCDvalue+0x2b6>
			uint8_t credit = 1;
 80054e4:	2301      	movs	r3, #1
 80054e6:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 80054e8:	7a7b      	ldrb	r3, [r7, #9]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d15e      	bne.n	80055ac <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	781a      	ldrb	r2, [r3, #0]
 80054f2:	4b28      	ldr	r3, [pc, #160]	; (8005594 <LCDvalue+0x150>)
 80054f4:	9203      	str	r2, [sp, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	9202      	str	r2, [sp, #8]
 80054fa:	221f      	movs	r2, #31
 80054fc:	9201      	str	r2, [sp, #4]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	9200      	str	r2, [sp, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a24      	ldr	r2, [pc, #144]	; (8005598 <LCDvalue+0x154>)
 8005506:	2123      	movs	r1, #35	; 0x23
 8005508:	200f      	movs	r0, #15
 800550a:	f001 f88e 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	4b22      	ldr	r3, [pc, #136]	; (800559c <LCDvalue+0x158>)
 8005514:	9203      	str	r2, [sp, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	9202      	str	r2, [sp, #8]
 800551a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800551e:	9201      	str	r2, [sp, #4]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	9200      	str	r2, [sp, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <LCDvalue+0x15c>)
 8005528:	213c      	movs	r1, #60	; 0x3c
 800552a:	2005      	movs	r0, #5
 800552c:	f001 f87d 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781a      	ldrb	r2, [r3, #0]
 8005534:	4b17      	ldr	r3, [pc, #92]	; (8005594 <LCDvalue+0x150>)
 8005536:	9203      	str	r2, [sp, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	9202      	str	r2, [sp, #8]
 800553c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005540:	9201      	str	r2, [sp, #4]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	9200      	str	r2, [sp, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <LCDvalue+0x160>)
 800554a:	2123      	movs	r1, #35	; 0x23
 800554c:	2014      	movs	r0, #20
 800554e:	f001 f86c 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781a      	ldrb	r2, [r3, #0]
 8005556:	4b11      	ldr	r3, [pc, #68]	; (800559c <LCDvalue+0x158>)
 8005558:	9203      	str	r2, [sp, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	9202      	str	r2, [sp, #8]
 800555e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005562:	9201      	str	r2, [sp, #4]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	9200      	str	r2, [sp, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a0f      	ldr	r2, [pc, #60]	; (80055a8 <LCDvalue+0x164>)
 800556c:	213c      	movs	r1, #60	; 0x3c
 800556e:	2000      	movs	r0, #0
 8005570:	f001 f85b 	bl	800662a <ST7735_WriteStringNSS>
 8005574:	e0c1      	b.n	80056fa <LCDvalue+0x2b6>
 8005576:	bf00      	nop
 8005578:	24000000 	.word	0x24000000
 800557c:	24000174 	.word	0x24000174
 8005580:	24000ea0 	.word	0x24000ea0
 8005584:	000f4240 	.word	0x000f4240
 8005588:	08010b00 	.word	0x08010b00
 800558c:	24000170 	.word	0x24000170
 8005590:	240002e8 	.word	0x240002e8
 8005594:	24000014 	.word	0x24000014
 8005598:	080107e8 	.word	0x080107e8
 800559c:	2400000c 	.word	0x2400000c
 80055a0:	08010b04 	.word	0x08010b04
 80055a4:	080107e0 	.word	0x080107e0
 80055a8:	08010b18 	.word	0x08010b18
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 80055ac:	7a7b      	ldrb	r3, [r7, #9]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	f040 80a3 	bne.w	80056fa <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	781a      	ldrb	r2, [r3, #0]
 80055b8:	4ba1      	ldr	r3, [pc, #644]	; (8005840 <LCDvalue+0x3fc>)
 80055ba:	9203      	str	r2, [sp, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	9202      	str	r2, [sp, #8]
 80055c0:	221f      	movs	r2, #31
 80055c2:	9201      	str	r2, [sp, #4]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	9200      	str	r2, [sp, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a9e      	ldr	r2, [pc, #632]	; (8005844 <LCDvalue+0x400>)
 80055cc:	2119      	movs	r1, #25
 80055ce:	200f      	movs	r0, #15
 80055d0:	f001 f82b 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	4b9b      	ldr	r3, [pc, #620]	; (8005848 <LCDvalue+0x404>)
 80055da:	9203      	str	r2, [sp, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	9202      	str	r2, [sp, #8]
 80055e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055e4:	9201      	str	r2, [sp, #4]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	9200      	str	r2, [sp, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a97      	ldr	r2, [pc, #604]	; (800584c <LCDvalue+0x408>)
 80055ee:	2132      	movs	r1, #50	; 0x32
 80055f0:	2005      	movs	r0, #5
 80055f2:	f001 f81a 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	4b91      	ldr	r3, [pc, #580]	; (8005840 <LCDvalue+0x3fc>)
 80055fc:	9203      	str	r2, [sp, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	9202      	str	r2, [sp, #8]
 8005602:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005606:	9201      	str	r2, [sp, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	9200      	str	r2, [sp, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a90      	ldr	r2, [pc, #576]	; (8005850 <LCDvalue+0x40c>)
 8005610:	2119      	movs	r1, #25
 8005612:	2014      	movs	r0, #20
 8005614:	f001 f809 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781a      	ldrb	r2, [r3, #0]
 800561c:	4b8a      	ldr	r3, [pc, #552]	; (8005848 <LCDvalue+0x404>)
 800561e:	9203      	str	r2, [sp, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	9202      	str	r2, [sp, #8]
 8005624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005628:	9201      	str	r2, [sp, #4]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	9200      	str	r2, [sp, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a88      	ldr	r2, [pc, #544]	; (8005854 <LCDvalue+0x410>)
 8005632:	2132      	movs	r1, #50	; 0x32
 8005634:	2000      	movs	r0, #0
 8005636:	f000 fff8 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 800563a:	4b83      	ldr	r3, [pc, #524]	; (8005848 <LCDvalue+0x404>)
 800563c:	2200      	movs	r2, #0
 800563e:	9203      	str	r2, [sp, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	9202      	str	r2, [sp, #8]
 8005644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005648:	9201      	str	r2, [sp, #4]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	9200      	str	r2, [sp, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a81      	ldr	r2, [pc, #516]	; (8005858 <LCDvalue+0x414>)
 8005652:	2141      	movs	r1, #65	; 0x41
 8005654:	2000      	movs	r0, #0
 8005656:	f000 ffe8 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 800565a:	4b7b      	ldr	r3, [pc, #492]	; (8005848 <LCDvalue+0x404>)
 800565c:	2201      	movs	r2, #1
 800565e:	9203      	str	r2, [sp, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	9202      	str	r2, [sp, #8]
 8005664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005668:	9201      	str	r2, [sp, #4]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	9200      	str	r2, [sp, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a79      	ldr	r2, [pc, #484]	; (8005858 <LCDvalue+0x414>)
 8005672:	2141      	movs	r1, #65	; 0x41
 8005674:	2000      	movs	r0, #0
 8005676:	f000 ffd8 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 800567a:	4b73      	ldr	r3, [pc, #460]	; (8005848 <LCDvalue+0x404>)
 800567c:	2200      	movs	r2, #0
 800567e:	9203      	str	r2, [sp, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	9202      	str	r2, [sp, #8]
 8005684:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8005688:	9201      	str	r2, [sp, #4]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	9200      	str	r2, [sp, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a72      	ldr	r2, [pc, #456]	; (800585c <LCDvalue+0x418>)
 8005692:	2164      	movs	r1, #100	; 0x64
 8005694:	2000      	movs	r0, #0
 8005696:	f000 ffc8 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 800569a:	4b6b      	ldr	r3, [pc, #428]	; (8005848 <LCDvalue+0x404>)
 800569c:	2200      	movs	r2, #0
 800569e:	9203      	str	r2, [sp, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	9202      	str	r2, [sp, #8]
 80056a4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80056a8:	9201      	str	r2, [sp, #4]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	9200      	str	r2, [sp, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a6b      	ldr	r2, [pc, #428]	; (8005860 <LCDvalue+0x41c>)
 80056b2:	2173      	movs	r1, #115	; 0x73
 80056b4:	2000      	movs	r0, #0
 80056b6:	f000 ffb8 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 80056ba:	4b63      	ldr	r3, [pc, #396]	; (8005848 <LCDvalue+0x404>)
 80056bc:	2201      	movs	r2, #1
 80056be:	9203      	str	r2, [sp, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	9202      	str	r2, [sp, #8]
 80056c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80056c8:	9201      	str	r2, [sp, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	9200      	str	r2, [sp, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a64      	ldr	r2, [pc, #400]	; (8005864 <LCDvalue+0x420>)
 80056d2:	2173      	movs	r1, #115	; 0x73
 80056d4:	2000      	movs	r0, #0
 80056d6:	f000 ffa8 	bl	800662a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 80056da:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <LCDvalue+0x404>)
 80056dc:	2201      	movs	r2, #1
 80056de:	9203      	str	r2, [sp, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	9202      	str	r2, [sp, #8]
 80056e4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80056e8:	9201      	str	r2, [sp, #4]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	9200      	str	r2, [sp, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a5d      	ldr	r2, [pc, #372]	; (8005868 <LCDvalue+0x424>)
 80056f2:	215a      	movs	r1, #90	; 0x5a
 80056f4:	2000      	movs	r0, #0
 80056f6:	f000 ff98 	bl	800662a <ST7735_WriteStringNSS>
		while(time == 0){
 80056fa:	4b5c      	ldr	r3, [pc, #368]	; (800586c <LCDvalue+0x428>)
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f43f aef0 	beq.w	80054e4 <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	889b      	ldrh	r3, [r3, #4]
 8005708:	461a      	mov	r2, r3
 800570a:	4959      	ldr	r1, [pc, #356]	; (8005870 <LCDvalue+0x42c>)
 800570c:	4859      	ldr	r0, [pc, #356]	; (8005874 <LCDvalue+0x430>)
 800570e:	f00a fc95 	bl	801003c <siprintf>
	if(C_LP_ATK[3] == 0){
 8005712:	4b58      	ldr	r3, [pc, #352]	; (8005874 <LCDvalue+0x430>)
 8005714:	78db      	ldrb	r3, [r3, #3]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10e      	bne.n	8005738 <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 800571a:	4b56      	ldr	r3, [pc, #344]	; (8005874 <LCDvalue+0x430>)
 800571c:	789a      	ldrb	r2, [r3, #2]
 800571e:	4b55      	ldr	r3, [pc, #340]	; (8005874 <LCDvalue+0x430>)
 8005720:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8005722:	4b54      	ldr	r3, [pc, #336]	; (8005874 <LCDvalue+0x430>)
 8005724:	785a      	ldrb	r2, [r3, #1]
 8005726:	4b53      	ldr	r3, [pc, #332]	; (8005874 <LCDvalue+0x430>)
 8005728:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 800572a:	4b52      	ldr	r3, [pc, #328]	; (8005874 <LCDvalue+0x430>)
 800572c:	781a      	ldrb	r2, [r3, #0]
 800572e:	4b51      	ldr	r3, [pc, #324]	; (8005874 <LCDvalue+0x430>)
 8005730:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8005732:	4b50      	ldr	r3, [pc, #320]	; (8005874 <LCDvalue+0x430>)
 8005734:	2220      	movs	r2, #32
 8005736:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	4b42      	ldr	r3, [pc, #264]	; (8005848 <LCDvalue+0x404>)
 800573e:	9203      	str	r2, [sp, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	9202      	str	r2, [sp, #8]
 8005744:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005748:	9201      	str	r2, [sp, #4]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	9200      	str	r2, [sp, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a48      	ldr	r2, [pc, #288]	; (8005874 <LCDvalue+0x430>)
 8005752:	2114      	movs	r1, #20
 8005754:	205a      	movs	r0, #90	; 0x5a
 8005756:	f000 ff68 	bl	800662a <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	781a      	ldrb	r2, [r3, #0]
 800575e:	4b3a      	ldr	r3, [pc, #232]	; (8005848 <LCDvalue+0x404>)
 8005760:	9203      	str	r2, [sp, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	9202      	str	r2, [sp, #8]
 8005766:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800576a:	9201      	str	r2, [sp, #4]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	9200      	str	r2, [sp, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a41      	ldr	r2, [pc, #260]	; (8005878 <LCDvalue+0x434>)
 8005774:	2132      	movs	r1, #50	; 0x32
 8005776:	2069      	movs	r0, #105	; 0x69
 8005778:	f000 ff57 	bl	800662a <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	889b      	ldrh	r3, [r3, #4]
 8005780:	461a      	mov	r2, r3
 8005782:	493b      	ldr	r1, [pc, #236]	; (8005870 <LCDvalue+0x42c>)
 8005784:	483d      	ldr	r0, [pc, #244]	; (800587c <LCDvalue+0x438>)
 8005786:	f00a fc59 	bl	801003c <siprintf>
	if(C_LP_DEF[3] == 0){
 800578a:	4b3c      	ldr	r3, [pc, #240]	; (800587c <LCDvalue+0x438>)
 800578c:	78db      	ldrb	r3, [r3, #3]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10e      	bne.n	80057b0 <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8005792:	4b3a      	ldr	r3, [pc, #232]	; (800587c <LCDvalue+0x438>)
 8005794:	789a      	ldrb	r2, [r3, #2]
 8005796:	4b39      	ldr	r3, [pc, #228]	; (800587c <LCDvalue+0x438>)
 8005798:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 800579a:	4b38      	ldr	r3, [pc, #224]	; (800587c <LCDvalue+0x438>)
 800579c:	785a      	ldrb	r2, [r3, #1]
 800579e:	4b37      	ldr	r3, [pc, #220]	; (800587c <LCDvalue+0x438>)
 80057a0:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 80057a2:	4b36      	ldr	r3, [pc, #216]	; (800587c <LCDvalue+0x438>)
 80057a4:	781a      	ldrb	r2, [r3, #0]
 80057a6:	4b35      	ldr	r3, [pc, #212]	; (800587c <LCDvalue+0x438>)
 80057a8:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 80057aa:	4b34      	ldr	r3, [pc, #208]	; (800587c <LCDvalue+0x438>)
 80057ac:	2220      	movs	r2, #32
 80057ae:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781a      	ldrb	r2, [r3, #0]
 80057b4:	4b24      	ldr	r3, [pc, #144]	; (8005848 <LCDvalue+0x404>)
 80057b6:	9203      	str	r2, [sp, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	9202      	str	r2, [sp, #8]
 80057bc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80057c0:	9201      	str	r2, [sp, #4]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	9200      	str	r2, [sp, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2c      	ldr	r2, [pc, #176]	; (800587c <LCDvalue+0x438>)
 80057ca:	2114      	movs	r1, #20
 80057cc:	205a      	movs	r0, #90	; 0x5a
 80057ce:	f000 ff2c 	bl	800662a <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	4b1c      	ldr	r3, [pc, #112]	; (8005848 <LCDvalue+0x404>)
 80057d8:	9203      	str	r2, [sp, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	9202      	str	r2, [sp, #8]
 80057de:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80057e2:	9201      	str	r2, [sp, #4]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	9200      	str	r2, [sp, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a25      	ldr	r2, [pc, #148]	; (8005880 <LCDvalue+0x43c>)
 80057ec:	2132      	movs	r1, #50	; 0x32
 80057ee:	2069      	movs	r0, #105	; 0x69
 80057f0:	f000 ff1b 	bl	800662a <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 80057f4:	4b23      	ldr	r3, [pc, #140]	; (8005884 <LCDvalue+0x440>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	491d      	ldr	r1, [pc, #116]	; (8005870 <LCDvalue+0x42c>)
 80057fc:	4822      	ldr	r0, [pc, #136]	; (8005888 <LCDvalue+0x444>)
 80057fe:	f00a fc1d 	bl	801003c <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8005802:	4b11      	ldr	r3, [pc, #68]	; (8005848 <LCDvalue+0x404>)
 8005804:	2200      	movs	r2, #0
 8005806:	9203      	str	r2, [sp, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	9202      	str	r2, [sp, #8]
 800580c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005810:	9201      	str	r2, [sp, #4]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	9200      	str	r2, [sp, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1b      	ldr	r2, [pc, #108]	; (8005888 <LCDvalue+0x444>)
 800581a:	2123      	movs	r1, #35	; 0x23
 800581c:	2032      	movs	r0, #50	; 0x32
 800581e:	f000 ff04 	bl	800662a <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 8005822:	4b09      	ldr	r3, [pc, #36]	; (8005848 <LCDvalue+0x404>)
 8005824:	2201      	movs	r2, #1
 8005826:	9203      	str	r2, [sp, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	9202      	str	r2, [sp, #8]
 800582c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005830:	9201      	str	r2, [sp, #4]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	9200      	str	r2, [sp, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a13      	ldr	r2, [pc, #76]	; (8005888 <LCDvalue+0x444>)
 800583a:	2123      	movs	r1, #35	; 0x23
 800583c:	2032      	movs	r0, #50	; 0x32
 800583e:	e025      	b.n	800588c <LCDvalue+0x448>
 8005840:	24000014 	.word	0x24000014
 8005844:	080107e8 	.word	0x080107e8
 8005848:	2400000c 	.word	0x2400000c
 800584c:	08010b04 	.word	0x08010b04
 8005850:	080107e0 	.word	0x080107e0
 8005854:	08010b18 	.word	0x08010b18
 8005858:	0801075c 	.word	0x0801075c
 800585c:	08010b2c 	.word	0x08010b2c
 8005860:	08010b38 	.word	0x08010b38
 8005864:	08010b48 	.word	0x08010b48
 8005868:	08010b54 	.word	0x08010b54
 800586c:	24000174 	.word	0x24000174
 8005870:	08010b00 	.word	0x08010b00
 8005874:	24000164 	.word	0x24000164
 8005878:	24000170 	.word	0x24000170
 800587c:	24000168 	.word	0x24000168
 8005880:	080107ac 	.word	0x080107ac
 8005884:	24000176 	.word	0x24000176
 8005888:	2400016c 	.word	0x2400016c
 800588c:	f000 fecd 	bl	800662a <ST7735_WriteStringNSS>

}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800589c:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <SystemInit+0xfc>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	4a3c      	ldr	r2, [pc, #240]	; (8005994 <SystemInit+0xfc>)
 80058a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80058ac:	4b39      	ldr	r3, [pc, #228]	; (8005994 <SystemInit+0xfc>)
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	4a38      	ldr	r2, [pc, #224]	; (8005994 <SystemInit+0xfc>)
 80058b2:	f043 0310 	orr.w	r3, r3, #16
 80058b6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058b8:	4b37      	ldr	r3, [pc, #220]	; (8005998 <SystemInit+0x100>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	2b06      	cmp	r3, #6
 80058c2:	d807      	bhi.n	80058d4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058c4:	4b34      	ldr	r3, [pc, #208]	; (8005998 <SystemInit+0x100>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f023 030f 	bic.w	r3, r3, #15
 80058cc:	4a32      	ldr	r2, [pc, #200]	; (8005998 <SystemInit+0x100>)
 80058ce:	f043 0307 	orr.w	r3, r3, #7
 80058d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80058d4:	4b31      	ldr	r3, [pc, #196]	; (800599c <SystemInit+0x104>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a30      	ldr	r2, [pc, #192]	; (800599c <SystemInit+0x104>)
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058e0:	4b2e      	ldr	r3, [pc, #184]	; (800599c <SystemInit+0x104>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80058e6:	4b2d      	ldr	r3, [pc, #180]	; (800599c <SystemInit+0x104>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	492c      	ldr	r1, [pc, #176]	; (800599c <SystemInit+0x104>)
 80058ec:	4b2c      	ldr	r3, [pc, #176]	; (80059a0 <SystemInit+0x108>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058f2:	4b29      	ldr	r3, [pc, #164]	; (8005998 <SystemInit+0x100>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058fe:	4b26      	ldr	r3, [pc, #152]	; (8005998 <SystemInit+0x100>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f023 030f 	bic.w	r3, r3, #15
 8005906:	4a24      	ldr	r2, [pc, #144]	; (8005998 <SystemInit+0x100>)
 8005908:	f043 0307 	orr.w	r3, r3, #7
 800590c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800590e:	4b23      	ldr	r3, [pc, #140]	; (800599c <SystemInit+0x104>)
 8005910:	2200      	movs	r2, #0
 8005912:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005914:	4b21      	ldr	r3, [pc, #132]	; (800599c <SystemInit+0x104>)
 8005916:	2200      	movs	r2, #0
 8005918:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800591a:	4b20      	ldr	r3, [pc, #128]	; (800599c <SystemInit+0x104>)
 800591c:	2200      	movs	r2, #0
 800591e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005920:	4b1e      	ldr	r3, [pc, #120]	; (800599c <SystemInit+0x104>)
 8005922:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <SystemInit+0x10c>)
 8005924:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005926:	4b1d      	ldr	r3, [pc, #116]	; (800599c <SystemInit+0x104>)
 8005928:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <SystemInit+0x110>)
 800592a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <SystemInit+0x104>)
 800592e:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <SystemInit+0x114>)
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005932:	4b1a      	ldr	r3, [pc, #104]	; (800599c <SystemInit+0x104>)
 8005934:	2200      	movs	r2, #0
 8005936:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005938:	4b18      	ldr	r3, [pc, #96]	; (800599c <SystemInit+0x104>)
 800593a:	4a1c      	ldr	r2, [pc, #112]	; (80059ac <SystemInit+0x114>)
 800593c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800593e:	4b17      	ldr	r3, [pc, #92]	; (800599c <SystemInit+0x104>)
 8005940:	2200      	movs	r2, #0
 8005942:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005944:	4b15      	ldr	r3, [pc, #84]	; (800599c <SystemInit+0x104>)
 8005946:	4a19      	ldr	r2, [pc, #100]	; (80059ac <SystemInit+0x114>)
 8005948:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800594a:	4b14      	ldr	r3, [pc, #80]	; (800599c <SystemInit+0x104>)
 800594c:	2200      	movs	r2, #0
 800594e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005950:	4b12      	ldr	r3, [pc, #72]	; (800599c <SystemInit+0x104>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a11      	ldr	r2, [pc, #68]	; (800599c <SystemInit+0x104>)
 8005956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800595c:	4b0f      	ldr	r3, [pc, #60]	; (800599c <SystemInit+0x104>)
 800595e:	2200      	movs	r2, #0
 8005960:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8005962:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <SystemInit+0x118>)
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <SystemInit+0x118>)
 8005968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800596c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800596e:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <SystemInit+0x11c>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <SystemInit+0x120>)
 8005974:	4013      	ands	r3, r2
 8005976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800597a:	d202      	bcs.n	8005982 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <SystemInit+0x124>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005982:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <SystemInit+0x128>)
 8005984:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005988:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800598a:	bf00      	nop
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	e000ed00 	.word	0xe000ed00
 8005998:	52002000 	.word	0x52002000
 800599c:	58024400 	.word	0x58024400
 80059a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80059a4:	02020200 	.word	0x02020200
 80059a8:	01ff0000 	.word	0x01ff0000
 80059ac:	01010280 	.word	0x01010280
 80059b0:	580000c0 	.word	0x580000c0
 80059b4:	5c001000 	.word	0x5c001000
 80059b8:	ffff0000 	.word	0xffff0000
 80059bc:	51008108 	.word	0x51008108
 80059c0:	52004000 	.word	0x52004000

080059c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80059ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059ce:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80059d0:	bf00      	nop
 80059d2:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <main+0xec>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <main+0x24>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	1e5a      	subs	r2, r3, #1
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dcf4      	bgt.n	80059d2 <main+0xe>
	if ( timeout < 0 )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da01      	bge.n	80059f2 <main+0x2e>
	{
		Error_Handler();
 80059ee:	f000 fbeb 	bl	80061c8 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059f2:	f001 fb69 	bl	80070c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059f6:	f000 f863 	bl	8005ac0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80059fa:	f000 f8e5 	bl	8005bc8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80059fe:	4b2c      	ldr	r3, [pc, #176]	; (8005ab0 <main+0xec>)
 8005a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a04:	4a2a      	ldr	r2, [pc, #168]	; (8005ab0 <main+0xec>)
 8005a06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a0e:	4b28      	ldr	r3, [pc, #160]	; (8005ab0 <main+0xec>)
 8005a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	f004 fd7f 	bl	800a520 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8005a22:	2100      	movs	r1, #0
 8005a24:	2000      	movs	r0, #0
 8005a26:	f004 fd95 	bl	800a554 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8005a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a2e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8005a30:	bf00      	nop
 8005a32:	4b1f      	ldr	r3, [pc, #124]	; (8005ab0 <main+0xec>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <main+0x84>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	1e5a      	subs	r2, r3, #1
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dcf4      	bgt.n	8005a32 <main+0x6e>
	if ( timeout < 0 )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	da01      	bge.n	8005a52 <main+0x8e>
	{
		Error_Handler();
 8005a4e:	f000 fbbb 	bl	80061c8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a52:	f000 fa6d 	bl	8005f30 <MX_GPIO_Init>
  MX_ETH_Init();
 8005a56:	f000 f8e9 	bl	8005c2c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8005a5a:	f000 f9c1 	bl	8005de0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8005a5e:	f000 fa3f 	bl	8005ee0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005a62:	f000 fa0b 	bl	8005e7c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8005a66:	f000 f92d 	bl	8005cc4 <MX_SPI3_Init>
  MX_TIM7_Init();
 8005a6a:	f000 f983 	bl	8005d74 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8005a6e:	f000 fcb3 	bl	80063d8 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8005a72:	2000      	movs	r0, #0
 8005a74:	f000 ffbd 	bl	80069f2 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8005a78:	2000      	movs	r0, #0
 8005a7a:	f000 ffa9 	bl	80069d0 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8005a7e:	f001 fba9 	bl	80071d4 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <main+0xf0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2bc8      	cmp	r3, #200	; 0xc8
 8005a8c:	d9f7      	bls.n	8005a7e <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 8005a8e:	f001 fba1 	bl	80071d4 <HAL_GetTick>
 8005a92:	4603      	mov	r3, r0
 8005a94:	4a07      	ldr	r2, [pc, #28]	; (8005ab4 <main+0xf0>)
 8005a96:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8005a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a9c:	4806      	ldr	r0, [pc, #24]	; (8005ab8 <main+0xf4>)
 8005a9e:	f004 fd24 	bl	800a4ea <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8005aa2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8005aa6:	4905      	ldr	r1, [pc, #20]	; (8005abc <main+0xf8>)
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fb fbd3 	bl	8001254 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8005aae:	e7e6      	b.n	8005a7e <main+0xba>
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	24000e98 	.word	0x24000e98
 8005ab8:	58020400 	.word	0x58020400
 8005abc:	240009c0 	.word	0x240009c0

08005ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b09c      	sub	sp, #112	; 0x70
 8005ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aca:	224c      	movs	r2, #76	; 0x4c
 8005acc:	2100      	movs	r1, #0
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f00a f9bc 	bl	800fe4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4618      	mov	r0, r3
 8005adc:	f00a f9b6 	bl	800fe4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8005ae0:	2004      	movs	r0, #4
 8005ae2:	f004 fe93 	bl	800a80c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	603b      	str	r3, [r7, #0]
 8005aea:	4b34      	ldr	r3, [pc, #208]	; (8005bbc <SystemClock_Config+0xfc>)
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	4a33      	ldr	r2, [pc, #204]	; (8005bbc <SystemClock_Config+0xfc>)
 8005af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005af4:	6193      	str	r3, [r2, #24]
 8005af6:	4b31      	ldr	r3, [pc, #196]	; (8005bbc <SystemClock_Config+0xfc>)
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	4b2f      	ldr	r3, [pc, #188]	; (8005bc0 <SystemClock_Config+0x100>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	4a2e      	ldr	r2, [pc, #184]	; (8005bc0 <SystemClock_Config+0x100>)
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b0c:	4b2c      	ldr	r3, [pc, #176]	; (8005bc0 <SystemClock_Config+0x100>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	603b      	str	r3, [r7, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005b18:	bf00      	nop
 8005b1a:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <SystemClock_Config+0xfc>)
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b26:	d1f8      	bne.n	8005b1a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005b28:	4b26      	ldr	r3, [pc, #152]	; (8005bc4 <SystemClock_Config+0x104>)
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	f023 0303 	bic.w	r3, r3, #3
 8005b30:	4a24      	ldr	r2, [pc, #144]	; (8005bc4 <SystemClock_Config+0x104>)
 8005b32:	f043 0302 	orr.w	r3, r3, #2
 8005b36:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005b3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b42:	2302      	movs	r3, #2
 8005b44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b46:	2302      	movs	r3, #2
 8005b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8005b4e:	2378      	movs	r3, #120	; 0x78
 8005b50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005b52:	2302      	movs	r3, #2
 8005b54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005b56:	2302      	movs	r3, #2
 8005b58:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005b5e:	230c      	movs	r3, #12
 8005b60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f004 feb6 	bl	800a8e0 <HAL_RCC_OscConfig>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8005b7a:	f000 fb25 	bl	80061c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b7e:	233f      	movs	r3, #63	; 0x3f
 8005b80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b82:	2303      	movs	r3, #3
 8005b84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005b8a:	2308      	movs	r3, #8
 8005b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005b8e:	2340      	movs	r3, #64	; 0x40
 8005b90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005b92:	2340      	movs	r3, #64	; 0x40
 8005b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005b9c:	2340      	movs	r3, #64	; 0x40
 8005b9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005ba0:	1d3b      	adds	r3, r7, #4
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f005 fac9 	bl	800b13c <HAL_RCC_ClockConfig>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8005bb0:	f000 fb0a 	bl	80061c8 <Error_Handler>
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	3770      	adds	r7, #112	; 0x70
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	58024800 	.word	0x58024800
 8005bc0:	58000400 	.word	0x58000400
 8005bc4:	58024400 	.word	0x58024400

08005bc8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b0b0      	sub	sp, #192	; 0xc0
 8005bcc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bce:	1d3b      	adds	r3, r7, #4
 8005bd0:	22bc      	movs	r2, #188	; 0xbc
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f00a f939 	bl	800fe4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8005bda:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8005bde:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8005be0:	2301      	movs	r3, #1
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8005be4:	2318      	movs	r3, #24
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8005be8:	2302      	movs	r3, #2
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8005bec:	2304      	movs	r3, #4
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8005bf4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8005c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c06:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8005c08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c10:	1d3b      	adds	r3, r7, #4
 8005c12:	4618      	mov	r0, r3
 8005c14:	f005 fe1e 	bl	800b854 <HAL_RCCEx_PeriphCLKConfig>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8005c1e:	f000 fad3 	bl	80061c8 <Error_Handler>
  }
}
 8005c22:	bf00      	nop
 8005c24:	37c0      	adds	r7, #192	; 0xc0
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8005c30:	4b1e      	ldr	r3, [pc, #120]	; (8005cac <MX_ETH_Init+0x80>)
 8005c32:	4a1f      	ldr	r2, [pc, #124]	; (8005cb0 <MX_ETH_Init+0x84>)
 8005c34:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005c36:	4b1f      	ldr	r3, [pc, #124]	; (8005cb4 <MX_ETH_Init+0x88>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8005c3c:	4b1d      	ldr	r3, [pc, #116]	; (8005cb4 <MX_ETH_Init+0x88>)
 8005c3e:	2280      	movs	r2, #128	; 0x80
 8005c40:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8005c42:	4b1c      	ldr	r3, [pc, #112]	; (8005cb4 <MX_ETH_Init+0x88>)
 8005c44:	22e1      	movs	r2, #225	; 0xe1
 8005c46:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8005c48:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <MX_ETH_Init+0x88>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8005c4e:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <MX_ETH_Init+0x88>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <MX_ETH_Init+0x88>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <MX_ETH_Init+0x80>)
 8005c5c:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <MX_ETH_Init+0x88>)
 8005c5e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005c60:	4b12      	ldr	r3, [pc, #72]	; (8005cac <MX_ETH_Init+0x80>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005c66:	4b11      	ldr	r3, [pc, #68]	; (8005cac <MX_ETH_Init+0x80>)
 8005c68:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <MX_ETH_Init+0x8c>)
 8005c6a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <MX_ETH_Init+0x80>)
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <MX_ETH_Init+0x90>)
 8005c70:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8005c72:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <MX_ETH_Init+0x80>)
 8005c74:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005c78:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8005c7a:	480c      	ldr	r0, [pc, #48]	; (8005cac <MX_ETH_Init+0x80>)
 8005c7c:	f003 fe30 	bl	80098e0 <HAL_ETH_Init>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8005c86:	f000 fa9f 	bl	80061c8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005c8a:	2238      	movs	r2, #56	; 0x38
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	480c      	ldr	r0, [pc, #48]	; (8005cc0 <MX_ETH_Init+0x94>)
 8005c90:	f00a f8dc 	bl	800fe4c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <MX_ETH_Init+0x94>)
 8005c96:	2221      	movs	r2, #33	; 0x21
 8005c98:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <MX_ETH_Init+0x94>)
 8005c9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005ca0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <MX_ETH_Init+0x94>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8005ca8:	bf00      	nop
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	240001b0 	.word	0x240001b0
 8005cb0:	40028000 	.word	0x40028000
 8005cb4:	24000ea8 	.word	0x24000ea8
 8005cb8:	240000e8 	.word	0x240000e8
 8005cbc:	24000088 	.word	0x24000088
 8005cc0:	24000178 	.word	0x24000178

08005cc4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005cca:	4a29      	ldr	r2, [pc, #164]	; (8005d70 <MX_SPI3_Init+0xac>)
 8005ccc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005cce:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005cd0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005cd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8005cd6:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005cd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cdc:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005cde:	4b23      	ldr	r3, [pc, #140]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ce4:	4b21      	ldr	r3, [pc, #132]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005cea:	4b20      	ldr	r3, [pc, #128]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005cf0:	4b1e      	ldr	r3, [pc, #120]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005cf2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005cf6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005cf8:	4b1c      	ldr	r3, [pc, #112]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cfe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d00:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d06:	4b19      	ldr	r3, [pc, #100]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d0c:	4b17      	ldr	r3, [pc, #92]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8005d12:	4b16      	ldr	r3, [pc, #88]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005d18:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d1e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8005d20:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005d32:	4b0e      	ldr	r3, [pc, #56]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005d44:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005d4a:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005d56:	4805      	ldr	r0, [pc, #20]	; (8005d6c <MX_SPI3_Init+0xa8>)
 8005d58:	f007 f8e4 	bl	800cf24 <HAL_SPI_Init>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8005d62:	f000 fa31 	bl	80061c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005d66:	bf00      	nop
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	24000260 	.word	0x24000260
 8005d70:	40003c00 	.word	0x40003c00

08005d74 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005d84:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <MX_TIM7_Init+0x64>)
 8005d86:	4a15      	ldr	r2, [pc, #84]	; (8005ddc <MX_TIM7_Init+0x68>)
 8005d88:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8005d8a:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <MX_TIM7_Init+0x64>)
 8005d8c:	22ef      	movs	r2, #239	; 0xef
 8005d8e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d90:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <MX_TIM7_Init+0x64>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <MX_TIM7_Init+0x64>)
 8005d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d9c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d9e:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <MX_TIM7_Init+0x64>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005da4:	480c      	ldr	r0, [pc, #48]	; (8005dd8 <MX_TIM7_Init+0x64>)
 8005da6:	f007 fc9e 	bl	800d6e6 <HAL_TIM_Base_Init>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005db0:	f000 fa0a 	bl	80061c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005db4:	2300      	movs	r3, #0
 8005db6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005dbc:	1d3b      	adds	r3, r7, #4
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4805      	ldr	r0, [pc, #20]	; (8005dd8 <MX_TIM7_Init+0x64>)
 8005dc2:	f007 ff6f 	bl	800dca4 <HAL_TIMEx_MasterConfigSynchronization>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005dcc:	f000 f9fc 	bl	80061c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	240002e8 	.word	0x240002e8
 8005ddc:	40001400 	.word	0x40001400

08005de0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005de4:	4b22      	ldr	r3, [pc, #136]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005de6:	4a23      	ldr	r2, [pc, #140]	; (8005e74 <MX_USART3_UART_Init+0x94>)
 8005de8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8005dea:	4b21      	ldr	r3, [pc, #132]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005dec:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <MX_USART3_UART_Init+0x98>)
 8005dee:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005df0:	4b1f      	ldr	r3, [pc, #124]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005df6:	4b1e      	ldr	r3, [pc, #120]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005dfc:	4b1c      	ldr	r3, [pc, #112]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005e02:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005e04:	220c      	movs	r2, #12
 8005e06:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e08:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e0e:	4b18      	ldr	r3, [pc, #96]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e14:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005e1a:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e20:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005e26:	4812      	ldr	r0, [pc, #72]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005e28:	f007 ffe8 	bl	800ddfc <HAL_UART_Init>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8005e32:	f000 f9c9 	bl	80061c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e36:	2100      	movs	r1, #0
 8005e38:	480d      	ldr	r0, [pc, #52]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005e3a:	f009 fc09 	bl	800f650 <HAL_UARTEx_SetTxFifoThreshold>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8005e44:	f000 f9c0 	bl	80061c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4809      	ldr	r0, [pc, #36]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005e4c:	f009 fc3e 	bl	800f6cc <HAL_UARTEx_SetRxFifoThreshold>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8005e56:	f000 f9b7 	bl	80061c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005e5a:	4805      	ldr	r0, [pc, #20]	; (8005e70 <MX_USART3_UART_Init+0x90>)
 8005e5c:	f009 fbbf 	bl	800f5de <HAL_UARTEx_DisableFifoMode>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8005e66:	f000 f9af 	bl	80061c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005e6a:	bf00      	nop
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	24000334 	.word	0x24000334
 8005e74:	40004800 	.word	0x40004800
 8005e78:	0005dc00 	.word	0x0005dc00

08005e7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005e80:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005e82:	4a16      	ldr	r2, [pc, #88]	; (8005edc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8005e84:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005e88:	2209      	movs	r2, #9
 8005e8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005e8c:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005e8e:	2202      	movs	r2, #2
 8005e90:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005e92:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005e98:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005ec2:	4805      	ldr	r0, [pc, #20]	; (8005ed8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005ec4:	f004 fb5a 	bl	800a57c <HAL_PCD_Init>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8005ece:	f000 f97b 	bl	80061c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005ed2:	bf00      	nop
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	240004b4 	.word	0x240004b4
 8005edc:	40080000 	.word	0x40080000

08005ee0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005ee6:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <MX_DMA_Init+0x4c>)
 8005ee8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005eec:	4a0f      	ldr	r2, [pc, #60]	; (8005f2c <MX_DMA_Init+0x4c>)
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <MX_DMA_Init+0x4c>)
 8005ef8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8005f04:	2200      	movs	r2, #0
 8005f06:	2100      	movs	r1, #0
 8005f08:	200c      	movs	r0, #12
 8005f0a:	f001 fa8e 	bl	800742a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005f0e:	200c      	movs	r0, #12
 8005f10:	f001 faa5 	bl	800745e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005f14:	2200      	movs	r2, #0
 8005f16:	2100      	movs	r1, #0
 8005f18:	200f      	movs	r0, #15
 8005f1a:	f001 fa86 	bl	800742a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005f1e:	200f      	movs	r0, #15
 8005f20:	f001 fa9d 	bl	800745e <HAL_NVIC_EnableIRQ>

}
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	58024400 	.word	0x58024400

08005f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08e      	sub	sp, #56	; 0x38
 8005f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	605a      	str	r2, [r3, #4]
 8005f40:	609a      	str	r2, [r3, #8]
 8005f42:	60da      	str	r2, [r3, #12]
 8005f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f46:	4b8a      	ldr	r3, [pc, #552]	; (8006170 <MX_GPIO_Init+0x240>)
 8005f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f4c:	4a88      	ldr	r2, [pc, #544]	; (8006170 <MX_GPIO_Init+0x240>)
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f56:	4b86      	ldr	r3, [pc, #536]	; (8006170 <MX_GPIO_Init+0x240>)
 8005f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	623b      	str	r3, [r7, #32]
 8005f62:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f64:	4b82      	ldr	r3, [pc, #520]	; (8006170 <MX_GPIO_Init+0x240>)
 8005f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f6a:	4a81      	ldr	r2, [pc, #516]	; (8006170 <MX_GPIO_Init+0x240>)
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f74:	4b7e      	ldr	r3, [pc, #504]	; (8006170 <MX_GPIO_Init+0x240>)
 8005f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	61fb      	str	r3, [r7, #28]
 8005f80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f82:	4b7b      	ldr	r3, [pc, #492]	; (8006170 <MX_GPIO_Init+0x240>)
 8005f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f88:	4a79      	ldr	r2, [pc, #484]	; (8006170 <MX_GPIO_Init+0x240>)
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f92:	4b77      	ldr	r3, [pc, #476]	; (8006170 <MX_GPIO_Init+0x240>)
 8005f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fa0:	4b73      	ldr	r3, [pc, #460]	; (8006170 <MX_GPIO_Init+0x240>)
 8005fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fa6:	4a72      	ldr	r2, [pc, #456]	; (8006170 <MX_GPIO_Init+0x240>)
 8005fa8:	f043 0302 	orr.w	r3, r3, #2
 8005fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fb0:	4b6f      	ldr	r3, [pc, #444]	; (8006170 <MX_GPIO_Init+0x240>)
 8005fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005fbe:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <MX_GPIO_Init+0x240>)
 8005fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fc4:	4a6a      	ldr	r2, [pc, #424]	; (8006170 <MX_GPIO_Init+0x240>)
 8005fc6:	f043 0320 	orr.w	r3, r3, #32
 8005fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fce:	4b68      	ldr	r3, [pc, #416]	; (8006170 <MX_GPIO_Init+0x240>)
 8005fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005fdc:	4b64      	ldr	r3, [pc, #400]	; (8006170 <MX_GPIO_Init+0x240>)
 8005fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fe2:	4a63      	ldr	r2, [pc, #396]	; (8006170 <MX_GPIO_Init+0x240>)
 8005fe4:	f043 0310 	orr.w	r3, r3, #16
 8005fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fec:	4b60      	ldr	r3, [pc, #384]	; (8006170 <MX_GPIO_Init+0x240>)
 8005fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ffa:	4b5d      	ldr	r3, [pc, #372]	; (8006170 <MX_GPIO_Init+0x240>)
 8005ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006000:	4a5b      	ldr	r2, [pc, #364]	; (8006170 <MX_GPIO_Init+0x240>)
 8006002:	f043 0308 	orr.w	r3, r3, #8
 8006006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800600a:	4b59      	ldr	r3, [pc, #356]	; (8006170 <MX_GPIO_Init+0x240>)
 800600c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006018:	4b55      	ldr	r3, [pc, #340]	; (8006170 <MX_GPIO_Init+0x240>)
 800601a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800601e:	4a54      	ldr	r2, [pc, #336]	; (8006170 <MX_GPIO_Init+0x240>)
 8006020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006028:	4b51      	ldr	r3, [pc, #324]	; (8006170 <MX_GPIO_Init+0x240>)
 800602a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8006036:	2201      	movs	r2, #1
 8006038:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 800603c:	484d      	ldr	r0, [pc, #308]	; (8006174 <MX_GPIO_Init+0x244>)
 800603e:	f004 fa3b 	bl	800a4b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8006042:	2200      	movs	r2, #0
 8006044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006048:	484a      	ldr	r0, [pc, #296]	; (8006174 <MX_GPIO_Init+0x244>)
 800604a:	f004 fa35 	bl	800a4b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800604e:	2200      	movs	r2, #0
 8006050:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006054:	4848      	ldr	r0, [pc, #288]	; (8006178 <MX_GPIO_Init+0x248>)
 8006056:	f004 fa2f 	bl	800a4b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800605a:	2200      	movs	r2, #0
 800605c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006060:	4846      	ldr	r0, [pc, #280]	; (800617c <MX_GPIO_Init+0x24c>)
 8006062:	f004 fa29 	bl	800a4b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8006066:	2201      	movs	r2, #1
 8006068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800606c:	4844      	ldr	r0, [pc, #272]	; (8006180 <MX_GPIO_Init+0x250>)
 800606e:	f004 fa23 	bl	800a4b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8006072:	230d      	movs	r3, #13
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006076:	2300      	movs	r3, #0
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607a:	2300      	movs	r3, #0
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800607e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006082:	4619      	mov	r1, r3
 8006084:	483f      	ldr	r0, [pc, #252]	; (8006184 <MX_GPIO_Init+0x254>)
 8006086:	f004 f84f 	bl	800a128 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 800608a:	2308      	movs	r3, #8
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800608e:	2300      	movs	r3, #0
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006092:	2300      	movs	r3, #0
 8006094:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800609a:	4619      	mov	r1, r3
 800609c:	483a      	ldr	r0, [pc, #232]	; (8006188 <MX_GPIO_Init+0x258>)
 800609e:	f004 f843 	bl	800a128 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 80060a2:	2302      	movs	r3, #2
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060a6:	2300      	movs	r3, #0
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 80060ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060b2:	4619      	mov	r1, r3
 80060b4:	4830      	ldr	r0, [pc, #192]	; (8006178 <MX_GPIO_Init+0x248>)
 80060b6:	f004 f837 	bl	800a128 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 80060ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060c0:	2300      	movs	r3, #0
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 80060c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060cc:	4619      	mov	r1, r3
 80060ce:	482f      	ldr	r0, [pc, #188]	; (800618c <MX_GPIO_Init+0x25c>)
 80060d0:	f004 f82a 	bl	800a128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 80060d4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060da:	2301      	movs	r3, #1
 80060dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060e2:	2300      	movs	r3, #0
 80060e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80060e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ea:	4619      	mov	r1, r3
 80060ec:	4821      	ldr	r0, [pc, #132]	; (8006174 <MX_GPIO_Init+0x244>)
 80060ee:	f004 f81b 	bl	800a128 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80060f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060f8:	2301      	movs	r3, #1
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006100:	2300      	movs	r3, #0
 8006102:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006108:	4619      	mov	r1, r3
 800610a:	481b      	ldr	r0, [pc, #108]	; (8006178 <MX_GPIO_Init+0x248>)
 800610c:	f004 f80c 	bl	800a128 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8006110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006116:	2301      	movs	r3, #1
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611a:	2300      	movs	r3, #0
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800611e:	2300      	movs	r3, #0
 8006120:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8006122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006126:	4619      	mov	r1, r3
 8006128:	4814      	ldr	r0, [pc, #80]	; (800617c <MX_GPIO_Init+0x24c>)
 800612a:	f003 fffd 	bl	800a128 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800612e:	2380      	movs	r3, #128	; 0x80
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006132:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006138:	2300      	movs	r3, #0
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800613c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006140:	4619      	mov	r1, r3
 8006142:	480f      	ldr	r0, [pc, #60]	; (8006180 <MX_GPIO_Init+0x250>)
 8006144:	f003 fff0 	bl	800a128 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8006148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800614e:	2301      	movs	r3, #1
 8006150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006152:	2300      	movs	r3, #0
 8006154:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006156:	2300      	movs	r3, #0
 8006158:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800615a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800615e:	4619      	mov	r1, r3
 8006160:	4807      	ldr	r0, [pc, #28]	; (8006180 <MX_GPIO_Init+0x250>)
 8006162:	f003 ffe1 	bl	800a128 <HAL_GPIO_Init>

}
 8006166:	bf00      	nop
 8006168:	3738      	adds	r7, #56	; 0x38
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	58024400 	.word	0x58024400
 8006174:	58021000 	.word	0x58021000
 8006178:	58020400 	.word	0x58020400
 800617c:	58020c00 	.word	0x58020c00
 8006180:	58021800 	.word	0x58021800
 8006184:	58020800 	.word	0x58020800
 8006188:	58020000 	.word	0x58020000
 800618c:	58021400 	.word	0x58021400

08006190 <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006190:	b4b0      	push	{r4, r5, r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d10a      	bne.n	80061b6 <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 80061a0:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061aa:	1854      	adds	r4, r2, r1
 80061ac:	f143 0500 	adc.w	r5, r3, #0
 80061b0:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80061b2:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bcb0      	pop	{r4, r5, r7}
 80061be:	4770      	bx	lr
 80061c0:	240002e8 	.word	0x240002e8
 80061c4:	24000ea0 	.word	0x24000ea0

080061c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80061cc:	b672      	cpsid	i
}
 80061ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80061d0:	e7fe      	b.n	80061d0 <Error_Handler+0x8>
	...

080061d4 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80061d8:	2200      	movs	r2, #0
 80061da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061de:	4802      	ldr	r0, [pc, #8]	; (80061e8 <ST7735_Select+0x14>)
 80061e0:	f004 f96a 	bl	800a4b8 <HAL_GPIO_WritePin>
}
 80061e4:	bf00      	nop
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	58021000 	.word	0x58021000

080061ec <ST7735_Unselect>:

void ST7735_Unselect() {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80061f0:	2201      	movs	r2, #1
 80061f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061f6:	4802      	ldr	r0, [pc, #8]	; (8006200 <ST7735_Unselect+0x14>)
 80061f8:	f004 f95e 	bl	800a4b8 <HAL_GPIO_WritePin>
}
 80061fc:	bf00      	nop
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	58021000 	.word	0x58021000

08006204 <ST7735_Select1>:
static void ST7735_Select1() {
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8006208:	2200      	movs	r2, #0
 800620a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800620e:	4802      	ldr	r0, [pc, #8]	; (8006218 <ST7735_Select1+0x14>)
 8006210:	f004 f952 	bl	800a4b8 <HAL_GPIO_WritePin>
}
 8006214:	bf00      	nop
 8006216:	bd80      	pop	{r7, pc}
 8006218:	58021000 	.word	0x58021000

0800621c <ST7735_Unselect1>:

void ST7735_Unselect1() {
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8006220:	2201      	movs	r2, #1
 8006222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006226:	4802      	ldr	r0, [pc, #8]	; (8006230 <ST7735_Unselect1+0x14>)
 8006228:	f004 f946 	bl	800a4b8 <HAL_GPIO_WritePin>
}
 800622c:	bf00      	nop
 800622e:	bd80      	pop	{r7, pc}
 8006230:	58021000 	.word	0x58021000

08006234 <ST7735_Reset>:

static void ST7735_Reset() {
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8006238:	2200      	movs	r2, #0
 800623a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800623e:	4807      	ldr	r0, [pc, #28]	; (800625c <ST7735_Reset+0x28>)
 8006240:	f004 f93a 	bl	800a4b8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8006244:	2005      	movs	r0, #5
 8006246:	f000 ffd1 	bl	80071ec <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800624a:	2201      	movs	r2, #1
 800624c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006250:	4802      	ldr	r0, [pc, #8]	; (800625c <ST7735_Reset+0x28>)
 8006252:	f004 f931 	bl	800a4b8 <HAL_GPIO_WritePin>
}
 8006256:	bf00      	nop
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	58021000 	.word	0x58021000

08006260 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800626a:	2200      	movs	r2, #0
 800626c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006270:	4806      	ldr	r0, [pc, #24]	; (800628c <ST7735_WriteCommand+0x2c>)
 8006272:	f004 f921 	bl	800a4b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006276:	1df9      	adds	r1, r7, #7
 8006278:	f04f 33ff 	mov.w	r3, #4294967295
 800627c:	2201      	movs	r2, #1
 800627e:	4804      	ldr	r0, [pc, #16]	; (8006290 <ST7735_WriteCommand+0x30>)
 8006280:	f006 ff56 	bl	800d130 <HAL_SPI_Transmit>
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	58021800 	.word	0x58021800
 8006290:	24000260 	.word	0x24000260

08006294 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800629e:	2201      	movs	r2, #1
 80062a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062a4:	4807      	ldr	r0, [pc, #28]	; (80062c4 <ST7735_WriteData+0x30>)
 80062a6:	f004 f907 	bl	800a4b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4804      	ldr	r0, [pc, #16]	; (80062c8 <ST7735_WriteData+0x34>)
 80062b6:	f006 ff3b 	bl	800d130 <HAL_SPI_Transmit>
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	58021800 	.word	0x58021800
 80062c8:	24000260 	.word	0x24000260

080062cc <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	607a      	str	r2, [r7, #4]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 80062de:	e034      	b.n	800634a <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff ffb7 	bl	8006260 <ST7735_WriteCommand>

		numArgs = *addr++;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 80062fc:	7abb      	ldrb	r3, [r7, #10]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006304:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 8006306:	7abb      	ldrb	r3, [r7, #10]
 8006308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630c:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 800630e:	7abb      	ldrb	r3, [r7, #10]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 8006314:	7abb      	ldrb	r3, [r7, #10]
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff ffbb 	bl	8006294 <ST7735_WriteData>
			addr += numArgs;
 800631e:	7abb      	ldrb	r3, [r7, #10]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4413      	add	r3, r2
 8006324:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 8006326:	89bb      	ldrh	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00e      	beq.n	800634a <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 8006336:	89bb      	ldrh	r3, [r7, #12]
 8006338:	2bff      	cmp	r3, #255	; 0xff
 800633a:	d102      	bne.n	8006342 <ST7735_ExecuteCommandList+0x76>
 800633c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006340:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 8006342:	89bb      	ldrh	r3, [r7, #12]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 ff51 	bl	80071ec <HAL_Delay>
	while(numCommands--) {
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	1e5a      	subs	r2, r3, #1
 800634e:	73fa      	strb	r2, [r7, #15]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1c5      	bne.n	80062e0 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800635e:	b590      	push	{r4, r7, lr}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	4604      	mov	r4, r0
 8006366:	4608      	mov	r0, r1
 8006368:	4611      	mov	r1, r2
 800636a:	461a      	mov	r2, r3
 800636c:	4623      	mov	r3, r4
 800636e:	71fb      	strb	r3, [r7, #7]
 8006370:	4603      	mov	r3, r0
 8006372:	71bb      	strb	r3, [r7, #6]
 8006374:	460b      	mov	r3, r1
 8006376:	717b      	strb	r3, [r7, #5]
 8006378:	4613      	mov	r3, r2
 800637a:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 800637c:	202a      	movs	r0, #42	; 0x2a
 800637e:	f7ff ff6f 	bl	8006260 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8006382:	2300      	movs	r3, #0
 8006384:	733b      	strb	r3, [r7, #12]
 8006386:	79fb      	ldrb	r3, [r7, #7]
 8006388:	3302      	adds	r3, #2
 800638a:	b2db      	uxtb	r3, r3
 800638c:	737b      	strb	r3, [r7, #13]
 800638e:	2300      	movs	r3, #0
 8006390:	73bb      	strb	r3, [r7, #14]
 8006392:	797b      	ldrb	r3, [r7, #5]
 8006394:	3302      	adds	r3, #2
 8006396:	b2db      	uxtb	r3, r3
 8006398:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 800639a:	f107 030c 	add.w	r3, r7, #12
 800639e:	2104      	movs	r1, #4
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff ff77 	bl	8006294 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 80063a6:	202b      	movs	r0, #43	; 0x2b
 80063a8:	f7ff ff5a 	bl	8006260 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 80063ac:	79bb      	ldrb	r3, [r7, #6]
 80063ae:	3301      	adds	r3, #1
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 80063b4:	793b      	ldrb	r3, [r7, #4]
 80063b6:	3301      	adds	r3, #1
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 80063bc:	f107 030c 	add.w	r3, r7, #12
 80063c0:	2104      	movs	r1, #4
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff ff66 	bl	8006294 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 80063c8:	202c      	movs	r0, #44	; 0x2c
 80063ca:	f7ff ff49 	bl	8006260 <ST7735_WriteCommand>
}
 80063ce:	bf00      	nop
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd90      	pop	{r4, r7, pc}
	...

080063d8 <ST7735_Init>:

void ST7735_Init() {
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
	ST7735_Select();
 80063dc:	f7ff fefa 	bl	80061d4 <ST7735_Select>
	ST7735_Select1();
 80063e0:	f7ff ff10 	bl	8006204 <ST7735_Select1>
	ST7735_Reset();
 80063e4:	f7ff ff26 	bl	8006234 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 80063e8:	4807      	ldr	r0, [pc, #28]	; (8006408 <ST7735_Init+0x30>)
 80063ea:	f7ff ff6f 	bl	80062cc <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 80063ee:	4807      	ldr	r0, [pc, #28]	; (800640c <ST7735_Init+0x34>)
 80063f0:	f7ff ff6c 	bl	80062cc <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 80063f4:	4806      	ldr	r0, [pc, #24]	; (8006410 <ST7735_Init+0x38>)
 80063f6:	f7ff ff69 	bl	80062cc <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 80063fa:	f7ff fef7 	bl	80061ec <ST7735_Unselect>
	ST7735_Unselect1();
 80063fe:	f7ff ff0d 	bl	800621c <ST7735_Unselect1>
}
 8006402:	bf00      	nop
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	0801203c 	.word	0x0801203c
 800640c:	08012078 	.word	0x08012078
 8006410:	08012088 	.word	0x08012088

08006414 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006414:	b082      	sub	sp, #8
 8006416:	b590      	push	{r4, r7, lr}
 8006418:	b089      	sub	sp, #36	; 0x24
 800641a:	af00      	add	r7, sp, #0
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
 800641e:	4603      	mov	r3, r0
 8006420:	80fb      	strh	r3, [r7, #6]
 8006422:	460b      	mov	r3, r1
 8006424:	80bb      	strh	r3, [r7, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	b2d8      	uxtb	r0, r3
 800642e:	88bb      	ldrh	r3, [r7, #4]
 8006430:	b2d9      	uxtb	r1, r3
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800643a:	4413      	add	r3, r2
 800643c:	b2db      	uxtb	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b2dc      	uxtb	r4, r3
 8006442:	88bb      	ldrh	r3, [r7, #4]
 8006444:	b2da      	uxtb	r2, r3
 8006446:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800644a:	4413      	add	r3, r2
 800644c:	b2db      	uxtb	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b2db      	uxtb	r3, r3
 8006452:	4622      	mov	r2, r4
 8006454:	f7ff ff83 	bl	800635e <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8006458:	2300      	movs	r3, #0
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	e043      	b.n	80064e6 <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 800645e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	3b20      	subs	r3, #32
 8006464:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	4619      	mov	r1, r3
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	440b      	add	r3, r1
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	4413      	add	r3, r2
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	e029      	b.n	80064d4 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00e      	beq.n	80064ae <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8006490:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	b29b      	uxth	r3, r3
 8006496:	b2db      	uxtb	r3, r3
 8006498:	743b      	strb	r3, [r7, #16]
 800649a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800649c:	b2db      	uxtb	r3, r3
 800649e:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 80064a0:	f107 0310 	add.w	r3, r7, #16
 80064a4:	2102      	movs	r1, #2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fef4 	bl	8006294 <ST7735_WriteData>
 80064ac:	e00f      	b.n	80064ce <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80064ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	733b      	strb	r3, [r7, #12]
 80064ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 80064c2:	f107 030c 	add.w	r3, r7, #12
 80064c6:	2102      	movs	r1, #2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff fee3 	bl	8006294 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	3301      	adds	r3, #1
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80064d8:	461a      	mov	r2, r3
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	4293      	cmp	r3, r2
 80064de:	d3cf      	bcc.n	8006480 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80064ea:	461a      	mov	r2, r3
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d3b5      	bcc.n	800645e <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	3724      	adds	r7, #36	; 0x24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80064fe:	b002      	add	sp, #8
 8006500:	4770      	bx	lr

08006502 <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006502:	b082      	sub	sp, #8
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af04      	add	r7, sp, #16
 800650a:	603a      	str	r2, [r7, #0]
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	4603      	mov	r3, r0
 8006510:	80fb      	strh	r3, [r7, #6]
 8006512:	460b      	mov	r3, r1
 8006514:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8006516:	f7ff fe5d 	bl	80061d4 <ST7735_Select>

	while(*str) {
 800651a:	e02d      	b.n	8006578 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	7d3a      	ldrb	r2, [r7, #20]
 8006520:	4413      	add	r3, r2
 8006522:	2b7f      	cmp	r3, #127	; 0x7f
 8006524:	dd13      	ble.n	800654e <ST7735_WriteString+0x4c>
			x = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800652a:	7d7b      	ldrb	r3, [r7, #21]
 800652c:	b29a      	uxth	r2, r3
 800652e:	88bb      	ldrh	r3, [r7, #4]
 8006530:	4413      	add	r3, r2
 8006532:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006534:	88bb      	ldrh	r3, [r7, #4]
 8006536:	7d7a      	ldrb	r2, [r7, #21]
 8006538:	4413      	add	r3, r2
 800653a:	2b7f      	cmp	r3, #127	; 0x7f
 800653c:	dc21      	bgt.n	8006582 <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b20      	cmp	r3, #32
 8006544:	d103      	bne.n	800654e <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	3301      	adds	r3, #1
 800654a:	603b      	str	r3, [r7, #0]
				continue;
 800654c:	e014      	b.n	8006578 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781a      	ldrb	r2, [r3, #0]
 8006552:	88b9      	ldrh	r1, [r7, #4]
 8006554:	88f8      	ldrh	r0, [r7, #6]
 8006556:	8c3b      	ldrh	r3, [r7, #32]
 8006558:	9302      	str	r3, [sp, #8]
 800655a:	8bbb      	ldrh	r3, [r7, #28]
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f7ff ff56 	bl	8006414 <ST7735_WriteChar>
		x += font.width;
 8006568:	7d3b      	ldrb	r3, [r7, #20]
 800656a:	b29a      	uxth	r2, r3
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	4413      	add	r3, r2
 8006570:	80fb      	strh	r3, [r7, #6]
		str++;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1cd      	bne.n	800651c <ST7735_WriteString+0x1a>
 8006580:	e000      	b.n	8006584 <ST7735_WriteString+0x82>
				break;
 8006582:	bf00      	nop
	}

	ST7735_Unselect();
 8006584:	f7ff fe32 	bl	80061ec <ST7735_Unselect>
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006592:	b002      	add	sp, #8
 8006594:	4770      	bx	lr

08006596 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006596:	b082      	sub	sp, #8
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af04      	add	r7, sp, #16
 800659e:	603a      	str	r2, [r7, #0]
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	4603      	mov	r3, r0
 80065a4:	80fb      	strh	r3, [r7, #6]
 80065a6:	460b      	mov	r3, r1
 80065a8:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 80065aa:	f7ff fe2b 	bl	8006204 <ST7735_Select1>

	while(*str) {
 80065ae:	e02d      	b.n	800660c <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 80065b0:	88fb      	ldrh	r3, [r7, #6]
 80065b2:	7d3a      	ldrb	r2, [r7, #20]
 80065b4:	4413      	add	r3, r2
 80065b6:	2b7f      	cmp	r3, #127	; 0x7f
 80065b8:	dd13      	ble.n	80065e2 <ST7735_WriteString1+0x4c>
			x = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80065be:	7d7b      	ldrb	r3, [r7, #21]
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	88bb      	ldrh	r3, [r7, #4]
 80065c4:	4413      	add	r3, r2
 80065c6:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80065c8:	88bb      	ldrh	r3, [r7, #4]
 80065ca:	7d7a      	ldrb	r2, [r7, #21]
 80065cc:	4413      	add	r3, r2
 80065ce:	2b7f      	cmp	r3, #127	; 0x7f
 80065d0:	dc21      	bgt.n	8006616 <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d103      	bne.n	80065e2 <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	603b      	str	r3, [r7, #0]
				continue;
 80065e0:	e014      	b.n	800660c <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	88b9      	ldrh	r1, [r7, #4]
 80065e8:	88f8      	ldrh	r0, [r7, #6]
 80065ea:	8c3b      	ldrh	r3, [r7, #32]
 80065ec:	9302      	str	r3, [sp, #8]
 80065ee:	8bbb      	ldrh	r3, [r7, #28]
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f7ff ff0c 	bl	8006414 <ST7735_WriteChar>
		x += font.width;
 80065fc:	7d3b      	ldrb	r3, [r7, #20]
 80065fe:	b29a      	uxth	r2, r3
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	4413      	add	r3, r2
 8006604:	80fb      	strh	r3, [r7, #6]
		str++;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	603b      	str	r3, [r7, #0]
	while(*str) {
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1cd      	bne.n	80065b0 <ST7735_WriteString1+0x1a>
 8006614:	e000      	b.n	8006618 <ST7735_WriteString1+0x82>
				break;
 8006616:	bf00      	nop
	}

	ST7735_Unselect1();
 8006618:	f7ff fe00 	bl	800621c <ST7735_Unselect1>
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006626:	b002      	add	sp, #8
 8006628:	4770      	bx	lr

0800662a <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 800662a:	b082      	sub	sp, #8
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af04      	add	r7, sp, #16
 8006632:	603a      	str	r2, [r7, #0]
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	4603      	mov	r3, r0
 8006638:	80fb      	strh	r3, [r7, #6]
 800663a:	460b      	mov	r3, r1
 800663c:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 800663e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	d102      	bne.n	800664c <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8006646:	f7ff fdc5 	bl	80061d4 <ST7735_Select>
 800664a:	e034      	b.n	80066b6 <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 800664c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006650:	2b01      	cmp	r3, #1
 8006652:	d130      	bne.n	80066b6 <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8006654:	f7ff fdd6 	bl	8006204 <ST7735_Select1>

	}


	while(*str) {
 8006658:	e02d      	b.n	80066b6 <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	7d3a      	ldrb	r2, [r7, #20]
 800665e:	4413      	add	r3, r2
 8006660:	2b7f      	cmp	r3, #127	; 0x7f
 8006662:	dd13      	ble.n	800668c <ST7735_WriteStringNSS+0x62>
			x = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006668:	7d7b      	ldrb	r3, [r7, #21]
 800666a:	b29a      	uxth	r2, r3
 800666c:	88bb      	ldrh	r3, [r7, #4]
 800666e:	4413      	add	r3, r2
 8006670:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006672:	88bb      	ldrh	r3, [r7, #4]
 8006674:	7d7a      	ldrb	r2, [r7, #21]
 8006676:	4413      	add	r3, r2
 8006678:	2b7f      	cmp	r3, #127	; 0x7f
 800667a:	dc21      	bgt.n	80066c0 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b20      	cmp	r3, #32
 8006682:	d103      	bne.n	800668c <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	3301      	adds	r3, #1
 8006688:	603b      	str	r3, [r7, #0]
				continue;
 800668a:	e014      	b.n	80066b6 <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781a      	ldrb	r2, [r3, #0]
 8006690:	88b9      	ldrh	r1, [r7, #4]
 8006692:	88f8      	ldrh	r0, [r7, #6]
 8006694:	8c3b      	ldrh	r3, [r7, #32]
 8006696:	9302      	str	r3, [sp, #8]
 8006698:	8bbb      	ldrh	r3, [r7, #28]
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f7ff feb7 	bl	8006414 <ST7735_WriteChar>
		x += font.width;
 80066a6:	7d3b      	ldrb	r3, [r7, #20]
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	4413      	add	r3, r2
 80066ae:	80fb      	strh	r3, [r7, #6]
		str++;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	3301      	adds	r3, #1
 80066b4:	603b      	str	r3, [r7, #0]
	while(*str) {
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1cd      	bne.n	800665a <ST7735_WriteStringNSS+0x30>
 80066be:	e000      	b.n	80066c2 <ST7735_WriteStringNSS+0x98>
				break;
 80066c0:	bf00      	nop
	}
	if(NSS == 0){
 80066c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 80066ca:	f7ff fd8f 	bl	80061ec <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 80066ce:	e005      	b.n	80066dc <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 80066d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 80066d8:	f7ff fda0 	bl	800621c <ST7735_Unselect1>
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066e6:	b002      	add	sp, #8
 80066e8:	4770      	bx	lr
	...

080066ec <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80066ec:	b590      	push	{r4, r7, lr}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	4611      	mov	r1, r2
 80066f8:	461a      	mov	r2, r3
 80066fa:	4623      	mov	r3, r4
 80066fc:	80fb      	strh	r3, [r7, #6]
 80066fe:	4603      	mov	r3, r0
 8006700:	80bb      	strh	r3, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	807b      	strh	r3, [r7, #2]
 8006706:	4613      	mov	r3, r2
 8006708:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	2b7f      	cmp	r3, #127	; 0x7f
 800670e:	d858      	bhi.n	80067c2 <ST7735_FillRectangle+0xd6>
 8006710:	88bb      	ldrh	r3, [r7, #4]
 8006712:	2b7f      	cmp	r3, #127	; 0x7f
 8006714:	d855      	bhi.n	80067c2 <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006716:	88fa      	ldrh	r2, [r7, #6]
 8006718:	887b      	ldrh	r3, [r7, #2]
 800671a:	4413      	add	r3, r2
 800671c:	2b80      	cmp	r3, #128	; 0x80
 800671e:	dd03      	ble.n	8006728 <ST7735_FillRectangle+0x3c>
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006726:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006728:	88ba      	ldrh	r2, [r7, #4]
 800672a:	883b      	ldrh	r3, [r7, #0]
 800672c:	4413      	add	r3, r2
 800672e:	2b80      	cmp	r3, #128	; 0x80
 8006730:	dd03      	ble.n	800673a <ST7735_FillRectangle+0x4e>
 8006732:	88bb      	ldrh	r3, [r7, #4]
 8006734:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006738:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 800673a:	f7ff fd4b 	bl	80061d4 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800673e:	88fb      	ldrh	r3, [r7, #6]
 8006740:	b2d8      	uxtb	r0, r3
 8006742:	88bb      	ldrh	r3, [r7, #4]
 8006744:	b2d9      	uxtb	r1, r3
 8006746:	88fb      	ldrh	r3, [r7, #6]
 8006748:	b2da      	uxtb	r2, r3
 800674a:	887b      	ldrh	r3, [r7, #2]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	4413      	add	r3, r2
 8006750:	b2db      	uxtb	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b2dc      	uxtb	r4, r3
 8006756:	88bb      	ldrh	r3, [r7, #4]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	883b      	ldrh	r3, [r7, #0]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	4413      	add	r3, r2
 8006760:	b2db      	uxtb	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b2db      	uxtb	r3, r3
 8006766:	4622      	mov	r2, r4
 8006768:	f7ff fdf9 	bl	800635e <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 800676c:	8c3b      	ldrh	r3, [r7, #32]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	b29b      	uxth	r3, r3
 8006772:	b2db      	uxtb	r3, r3
 8006774:	733b      	strb	r3, [r7, #12]
 8006776:	8c3b      	ldrh	r3, [r7, #32]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800677c:	2201      	movs	r2, #1
 800677e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006782:	4812      	ldr	r0, [pc, #72]	; (80067cc <ST7735_FillRectangle+0xe0>)
 8006784:	f003 fe98 	bl	800a4b8 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006788:	883b      	ldrh	r3, [r7, #0]
 800678a:	80bb      	strh	r3, [r7, #4]
 800678c:	e013      	b.n	80067b6 <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 800678e:	887b      	ldrh	r3, [r7, #2]
 8006790:	80fb      	strh	r3, [r7, #6]
 8006792:	e00a      	b.n	80067aa <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006794:	f107 010c 	add.w	r1, r7, #12
 8006798:	f04f 33ff 	mov.w	r3, #4294967295
 800679c:	2202      	movs	r2, #2
 800679e:	480c      	ldr	r0, [pc, #48]	; (80067d0 <ST7735_FillRectangle+0xe4>)
 80067a0:	f006 fcc6 	bl	800d130 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 80067a4:	88fb      	ldrh	r3, [r7, #6]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	80fb      	strh	r3, [r7, #6]
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f1      	bne.n	8006794 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 80067b0:	88bb      	ldrh	r3, [r7, #4]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	80bb      	strh	r3, [r7, #4]
 80067b6:	88bb      	ldrh	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e8      	bne.n	800678e <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 80067bc:	f7ff fd16 	bl	80061ec <ST7735_Unselect>
 80067c0:	e000      	b.n	80067c4 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80067c2:	bf00      	nop
}
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd90      	pop	{r4, r7, pc}
 80067ca:	bf00      	nop
 80067cc:	58021800 	.word	0x58021800
 80067d0:	24000260 	.word	0x24000260

080067d4 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4604      	mov	r4, r0
 80067dc:	4608      	mov	r0, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	461a      	mov	r2, r3
 80067e2:	4623      	mov	r3, r4
 80067e4:	80fb      	strh	r3, [r7, #6]
 80067e6:	4603      	mov	r3, r0
 80067e8:	80bb      	strh	r3, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	807b      	strh	r3, [r7, #2]
 80067ee:	4613      	mov	r3, r2
 80067f0:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	2b7f      	cmp	r3, #127	; 0x7f
 80067f6:	d858      	bhi.n	80068aa <ST7735_FillRectangle1+0xd6>
 80067f8:	88bb      	ldrh	r3, [r7, #4]
 80067fa:	2b7f      	cmp	r3, #127	; 0x7f
 80067fc:	d855      	bhi.n	80068aa <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80067fe:	88fa      	ldrh	r2, [r7, #6]
 8006800:	887b      	ldrh	r3, [r7, #2]
 8006802:	4413      	add	r3, r2
 8006804:	2b80      	cmp	r3, #128	; 0x80
 8006806:	dd03      	ble.n	8006810 <ST7735_FillRectangle1+0x3c>
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800680e:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006810:	88ba      	ldrh	r2, [r7, #4]
 8006812:	883b      	ldrh	r3, [r7, #0]
 8006814:	4413      	add	r3, r2
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	dd03      	ble.n	8006822 <ST7735_FillRectangle1+0x4e>
 800681a:	88bb      	ldrh	r3, [r7, #4]
 800681c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006820:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 8006822:	f7ff fcef 	bl	8006204 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	b2d8      	uxtb	r0, r3
 800682a:	88bb      	ldrh	r3, [r7, #4]
 800682c:	b2d9      	uxtb	r1, r3
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	887b      	ldrh	r3, [r7, #2]
 8006834:	b2db      	uxtb	r3, r3
 8006836:	4413      	add	r3, r2
 8006838:	b2db      	uxtb	r3, r3
 800683a:	3b01      	subs	r3, #1
 800683c:	b2dc      	uxtb	r4, r3
 800683e:	88bb      	ldrh	r3, [r7, #4]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	883b      	ldrh	r3, [r7, #0]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	4413      	add	r3, r2
 8006848:	b2db      	uxtb	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	4622      	mov	r2, r4
 8006850:	f7ff fd85 	bl	800635e <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006854:	8c3b      	ldrh	r3, [r7, #32]
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	b29b      	uxth	r3, r3
 800685a:	b2db      	uxtb	r3, r3
 800685c:	733b      	strb	r3, [r7, #12]
 800685e:	8c3b      	ldrh	r3, [r7, #32]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006864:	2201      	movs	r2, #1
 8006866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800686a:	4812      	ldr	r0, [pc, #72]	; (80068b4 <ST7735_FillRectangle1+0xe0>)
 800686c:	f003 fe24 	bl	800a4b8 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006870:	883b      	ldrh	r3, [r7, #0]
 8006872:	80bb      	strh	r3, [r7, #4]
 8006874:	e013      	b.n	800689e <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 8006876:	887b      	ldrh	r3, [r7, #2]
 8006878:	80fb      	strh	r3, [r7, #6]
 800687a:	e00a      	b.n	8006892 <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800687c:	f107 010c 	add.w	r1, r7, #12
 8006880:	f04f 33ff 	mov.w	r3, #4294967295
 8006884:	2202      	movs	r2, #2
 8006886:	480c      	ldr	r0, [pc, #48]	; (80068b8 <ST7735_FillRectangle1+0xe4>)
 8006888:	f006 fc52 	bl	800d130 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	3b01      	subs	r3, #1
 8006890:	80fb      	strh	r3, [r7, #6]
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1f1      	bne.n	800687c <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8006898:	88bb      	ldrh	r3, [r7, #4]
 800689a:	3b01      	subs	r3, #1
 800689c:	80bb      	strh	r3, [r7, #4]
 800689e:	88bb      	ldrh	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e8      	bne.n	8006876 <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 80068a4:	f7ff fcba 	bl	800621c <ST7735_Unselect1>
 80068a8:	e000      	b.n	80068ac <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80068aa:	bf00      	nop
}
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd90      	pop	{r4, r7, pc}
 80068b2:	bf00      	nop
 80068b4:	58021800 	.word	0x58021800
 80068b8:	24000260 	.word	0x24000260

080068bc <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 80068bc:	b590      	push	{r4, r7, lr}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4604      	mov	r4, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	4611      	mov	r1, r2
 80068c8:	461a      	mov	r2, r3
 80068ca:	4623      	mov	r3, r4
 80068cc:	80fb      	strh	r3, [r7, #6]
 80068ce:	4603      	mov	r3, r0
 80068d0:	80bb      	strh	r3, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	807b      	strh	r3, [r7, #2]
 80068d6:	4613      	mov	r3, r2
 80068d8:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	2b7f      	cmp	r3, #127	; 0x7f
 80068de:	d86e      	bhi.n	80069be <ST7735_FillRectangleNSS+0x102>
 80068e0:	88bb      	ldrh	r3, [r7, #4]
 80068e2:	2b7f      	cmp	r3, #127	; 0x7f
 80068e4:	d86b      	bhi.n	80069be <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80068e6:	88fa      	ldrh	r2, [r7, #6]
 80068e8:	887b      	ldrh	r3, [r7, #2]
 80068ea:	4413      	add	r3, r2
 80068ec:	2b80      	cmp	r3, #128	; 0x80
 80068ee:	dd03      	ble.n	80068f8 <ST7735_FillRectangleNSS+0x3c>
 80068f0:	88fb      	ldrh	r3, [r7, #6]
 80068f2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80068f6:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80068f8:	88ba      	ldrh	r2, [r7, #4]
 80068fa:	883b      	ldrh	r3, [r7, #0]
 80068fc:	4413      	add	r3, r2
 80068fe:	2b80      	cmp	r3, #128	; 0x80
 8006900:	dd03      	ble.n	800690a <ST7735_FillRectangleNSS+0x4e>
 8006902:	88bb      	ldrh	r3, [r7, #4]
 8006904:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006908:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 800690a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d102      	bne.n	8006918 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 8006912:	f7ff fc5f 	bl	80061d4 <ST7735_Select>
 8006916:	e005      	b.n	8006924 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8006918:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8006920:	f7ff fc70 	bl	8006204 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006924:	88fb      	ldrh	r3, [r7, #6]
 8006926:	b2d8      	uxtb	r0, r3
 8006928:	88bb      	ldrh	r3, [r7, #4]
 800692a:	b2d9      	uxtb	r1, r3
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	887b      	ldrh	r3, [r7, #2]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	4413      	add	r3, r2
 8006936:	b2db      	uxtb	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b2dc      	uxtb	r4, r3
 800693c:	88bb      	ldrh	r3, [r7, #4]
 800693e:	b2da      	uxtb	r2, r3
 8006940:	883b      	ldrh	r3, [r7, #0]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	4413      	add	r3, r2
 8006946:	b2db      	uxtb	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b2db      	uxtb	r3, r3
 800694c:	4622      	mov	r2, r4
 800694e:	f7ff fd06 	bl	800635e <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006952:	8c3b      	ldrh	r3, [r7, #32]
 8006954:	0a1b      	lsrs	r3, r3, #8
 8006956:	b29b      	uxth	r3, r3
 8006958:	b2db      	uxtb	r3, r3
 800695a:	733b      	strb	r3, [r7, #12]
 800695c:	8c3b      	ldrh	r3, [r7, #32]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006962:	2201      	movs	r2, #1
 8006964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006968:	4817      	ldr	r0, [pc, #92]	; (80069c8 <ST7735_FillRectangleNSS+0x10c>)
 800696a:	f003 fda5 	bl	800a4b8 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 800696e:	883b      	ldrh	r3, [r7, #0]
 8006970:	80bb      	strh	r3, [r7, #4]
 8006972:	e013      	b.n	800699c <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8006974:	887b      	ldrh	r3, [r7, #2]
 8006976:	80fb      	strh	r3, [r7, #6]
 8006978:	e00a      	b.n	8006990 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800697a:	f107 010c 	add.w	r1, r7, #12
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	2202      	movs	r2, #2
 8006984:	4811      	ldr	r0, [pc, #68]	; (80069cc <ST7735_FillRectangleNSS+0x110>)
 8006986:	f006 fbd3 	bl	800d130 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 800698a:	88fb      	ldrh	r3, [r7, #6]
 800698c:	3b01      	subs	r3, #1
 800698e:	80fb      	strh	r3, [r7, #6]
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f1      	bne.n	800697a <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 8006996:	88bb      	ldrh	r3, [r7, #4]
 8006998:	3b01      	subs	r3, #1
 800699a:	80bb      	strh	r3, [r7, #4]
 800699c:	88bb      	ldrh	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e8      	bne.n	8006974 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 80069a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d102      	bne.n	80069b0 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 80069aa:	f7ff fc1f 	bl	80061ec <ST7735_Unselect>
 80069ae:	e007      	b.n	80069c0 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 80069b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d103      	bne.n	80069c0 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 80069b8:	f7ff fc30 	bl	800621c <ST7735_Unselect1>
 80069bc:	e000      	b.n	80069c0 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80069be:	bf00      	nop
	}
}
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd90      	pop	{r4, r7, pc}
 80069c6:	bf00      	nop
 80069c8:	58021800 	.word	0x58021800
 80069cc:	24000260 	.word	0x24000260

080069d0 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	4603      	mov	r3, r0
 80069d8:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	2380      	movs	r3, #128	; 0x80
 80069e0:	2280      	movs	r2, #128	; 0x80
 80069e2:	2100      	movs	r1, #0
 80069e4:	2000      	movs	r0, #0
 80069e6:	f7ff fe81 	bl	80066ec <ST7735_FillRectangle>
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af02      	add	r7, sp, #8
 80069f8:	4603      	mov	r3, r0
 80069fa:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	2280      	movs	r2, #128	; 0x80
 8006a04:	2100      	movs	r1, #0
 8006a06:	2000      	movs	r0, #0
 8006a08:	f7ff fee4 	bl	80067d4 <ST7735_FillRectangle1>
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <HAL_MspInit+0x30>)
 8006a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a20:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <HAL_MspInit+0x30>)
 8006a22:	f043 0302 	orr.w	r3, r3, #2
 8006a26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <HAL_MspInit+0x30>)
 8006a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	607b      	str	r3, [r7, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	58024400 	.word	0x58024400

08006a48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08e      	sub	sp, #56	; 0x38
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	60da      	str	r2, [r3, #12]
 8006a5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a59      	ldr	r2, [pc, #356]	; (8006bcc <HAL_ETH_MspInit+0x184>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	f040 80ab 	bne.w	8006bc2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006a6c:	4b58      	ldr	r3, [pc, #352]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006a6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006a72:	4a57      	ldr	r2, [pc, #348]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006a7c:	4b54      	ldr	r3, [pc, #336]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a86:	623b      	str	r3, [r7, #32]
 8006a88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006a8a:	4b51      	ldr	r3, [pc, #324]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006a8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006a90:	4a4f      	ldr	r2, [pc, #316]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006a9a:	4b4d      	ldr	r3, [pc, #308]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006aa8:	4b49      	ldr	r3, [pc, #292]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006aaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006aae:	4a48      	ldr	r2, [pc, #288]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006ab8:	4b45      	ldr	r3, [pc, #276]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac2:	61bb      	str	r3, [r7, #24]
 8006ac4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ac6:	4b42      	ldr	r3, [pc, #264]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006acc:	4a40      	ldr	r2, [pc, #256]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006ace:	f043 0304 	orr.w	r3, r3, #4
 8006ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ad6:	4b3e      	ldr	r3, [pc, #248]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ae4:	4b3a      	ldr	r3, [pc, #232]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aea:	4a39      	ldr	r2, [pc, #228]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006af4:	4b36      	ldr	r3, [pc, #216]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b02:	4b33      	ldr	r3, [pc, #204]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b08:	4a31      	ldr	r2, [pc, #196]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006b0a:	f043 0302 	orr.w	r3, r3, #2
 8006b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b12:	4b2f      	ldr	r3, [pc, #188]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b20:	4b2b      	ldr	r3, [pc, #172]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b26:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b30:	4b27      	ldr	r3, [pc, #156]	; (8006bd0 <HAL_ETH_MspInit+0x188>)
 8006b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3a:	60bb      	str	r3, [r7, #8]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006b3e:	2332      	movs	r3, #50	; 0x32
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b42:	2302      	movs	r3, #2
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b4e:	230b      	movs	r3, #11
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b56:	4619      	mov	r1, r3
 8006b58:	481e      	ldr	r0, [pc, #120]	; (8006bd4 <HAL_ETH_MspInit+0x18c>)
 8006b5a:	f003 fae5 	bl	800a128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006b5e:	2386      	movs	r3, #134	; 0x86
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b62:	2302      	movs	r3, #2
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b6e:	230b      	movs	r3, #11
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b76:	4619      	mov	r1, r3
 8006b78:	4817      	ldr	r0, [pc, #92]	; (8006bd8 <HAL_ETH_MspInit+0x190>)
 8006b7a:	f003 fad5 	bl	800a128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b84:	2302      	movs	r3, #2
 8006b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b90:	230b      	movs	r3, #11
 8006b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4810      	ldr	r0, [pc, #64]	; (8006bdc <HAL_ETH_MspInit+0x194>)
 8006b9c:	f003 fac4 	bl	800a128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006ba0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006bb2:	230b      	movs	r3, #11
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4808      	ldr	r0, [pc, #32]	; (8006be0 <HAL_ETH_MspInit+0x198>)
 8006bbe:	f003 fab3 	bl	800a128 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8006bc2:	bf00      	nop
 8006bc4:	3738      	adds	r7, #56	; 0x38
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40028000 	.word	0x40028000
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	58020800 	.word	0x58020800
 8006bd8:	58020000 	.word	0x58020000
 8006bdc:	58020400 	.word	0x58020400
 8006be0:	58021800 	.word	0x58021800

08006be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a2a      	ldr	r2, [pc, #168]	; (8006cac <HAL_SPI_MspInit+0xc8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d14d      	bne.n	8006ca2 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006c06:	4b2a      	ldr	r3, [pc, #168]	; (8006cb0 <HAL_SPI_MspInit+0xcc>)
 8006c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c0c:	4a28      	ldr	r2, [pc, #160]	; (8006cb0 <HAL_SPI_MspInit+0xcc>)
 8006c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c16:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <HAL_SPI_MspInit+0xcc>)
 8006c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c24:	4b22      	ldr	r3, [pc, #136]	; (8006cb0 <HAL_SPI_MspInit+0xcc>)
 8006c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c2a:	4a21      	ldr	r2, [pc, #132]	; (8006cb0 <HAL_SPI_MspInit+0xcc>)
 8006c2c:	f043 0302 	orr.w	r3, r3, #2
 8006c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c34:	4b1e      	ldr	r3, [pc, #120]	; (8006cb0 <HAL_SPI_MspInit+0xcc>)
 8006c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c42:	4b1b      	ldr	r3, [pc, #108]	; (8006cb0 <HAL_SPI_MspInit+0xcc>)
 8006c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c48:	4a19      	ldr	r2, [pc, #100]	; (8006cb0 <HAL_SPI_MspInit+0xcc>)
 8006c4a:	f043 0304 	orr.w	r3, r3, #4
 8006c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c52:	4b17      	ldr	r3, [pc, #92]	; (8006cb0 <HAL_SPI_MspInit+0xcc>)
 8006c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	60bb      	str	r3, [r7, #8]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c60:	2304      	movs	r3, #4
 8006c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c64:	2302      	movs	r3, #2
 8006c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c68:	2302      	movs	r3, #2
 8006c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8006c70:	2307      	movs	r3, #7
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c74:	f107 0314 	add.w	r3, r7, #20
 8006c78:	4619      	mov	r1, r3
 8006c7a:	480e      	ldr	r0, [pc, #56]	; (8006cb4 <HAL_SPI_MspInit+0xd0>)
 8006c7c:	f003 fa54 	bl	800a128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c86:	2302      	movs	r3, #2
 8006c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006c92:	2306      	movs	r3, #6
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c96:	f107 0314 	add.w	r3, r7, #20
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4806      	ldr	r0, [pc, #24]	; (8006cb8 <HAL_SPI_MspInit+0xd4>)
 8006c9e:	f003 fa43 	bl	800a128 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006ca2:	bf00      	nop
 8006ca4:	3728      	adds	r7, #40	; 0x28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	40003c00 	.word	0x40003c00
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	58020400 	.word	0x58020400
 8006cb8:	58020800 	.word	0x58020800

08006cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a0e      	ldr	r2, [pc, #56]	; (8006d04 <HAL_TIM_Base_MspInit+0x48>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d116      	bne.n	8006cfc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006cce:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <HAL_TIM_Base_MspInit+0x4c>)
 8006cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cd4:	4a0c      	ldr	r2, [pc, #48]	; (8006d08 <HAL_TIM_Base_MspInit+0x4c>)
 8006cd6:	f043 0320 	orr.w	r3, r3, #32
 8006cda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <HAL_TIM_Base_MspInit+0x4c>)
 8006ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006cec:	2200      	movs	r2, #0
 8006cee:	2100      	movs	r1, #0
 8006cf0:	2037      	movs	r0, #55	; 0x37
 8006cf2:	f000 fb9a 	bl	800742a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006cf6:	2037      	movs	r0, #55	; 0x37
 8006cf8:	f000 fbb1 	bl	800745e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40001400 	.word	0x40001400
 8006d08:	58024400 	.word	0x58024400

08006d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b0b8      	sub	sp, #224	; 0xe0
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	605a      	str	r2, [r3, #4]
 8006d1e:	609a      	str	r2, [r3, #8]
 8006d20:	60da      	str	r2, [r3, #12]
 8006d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006d24:	f107 0310 	add.w	r3, r7, #16
 8006d28:	22bc      	movs	r2, #188	; 0xbc
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f009 f88d 	bl	800fe4c <memset>
  if(huart->Instance==USART3)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a57      	ldr	r2, [pc, #348]	; (8006e94 <HAL_UART_MspInit+0x188>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	f040 80a6 	bne.w	8006e8a <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006d42:	2300      	movs	r3, #0
 8006d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d48:	f107 0310 	add.w	r3, r7, #16
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f004 fd81 	bl	800b854 <HAL_RCCEx_PeriphCLKConfig>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006d58:	f7ff fa36 	bl	80061c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d5c:	4b4e      	ldr	r3, [pc, #312]	; (8006e98 <HAL_UART_MspInit+0x18c>)
 8006d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d62:	4a4d      	ldr	r2, [pc, #308]	; (8006e98 <HAL_UART_MspInit+0x18c>)
 8006d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006d6c:	4b4a      	ldr	r3, [pc, #296]	; (8006e98 <HAL_UART_MspInit+0x18c>)
 8006d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d7a:	4b47      	ldr	r3, [pc, #284]	; (8006e98 <HAL_UART_MspInit+0x18c>)
 8006d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d80:	4a45      	ldr	r2, [pc, #276]	; (8006e98 <HAL_UART_MspInit+0x18c>)
 8006d82:	f043 0308 	orr.w	r3, r3, #8
 8006d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d8a:	4b43      	ldr	r3, [pc, #268]	; (8006e98 <HAL_UART_MspInit+0x18c>)
 8006d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006d98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006da0:	2302      	movs	r3, #2
 8006da2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dac:	2300      	movs	r3, #0
 8006dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006db2:	2307      	movs	r3, #7
 8006db4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006db8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4837      	ldr	r0, [pc, #220]	; (8006e9c <HAL_UART_MspInit+0x190>)
 8006dc0:	f003 f9b2 	bl	800a128 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006dc4:	4b36      	ldr	r3, [pc, #216]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006dc6:	4a37      	ldr	r2, [pc, #220]	; (8006ea4 <HAL_UART_MspInit+0x198>)
 8006dc8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006dca:	4b35      	ldr	r3, [pc, #212]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006dcc:	222d      	movs	r2, #45	; 0x2d
 8006dce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006dd0:	4b33      	ldr	r3, [pc, #204]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dd6:	4b32      	ldr	r3, [pc, #200]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ddc:	4b30      	ldr	r3, [pc, #192]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006de2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006de4:	4b2e      	ldr	r3, [pc, #184]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dea:	4b2d      	ldr	r3, [pc, #180]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006df0:	4b2b      	ldr	r3, [pc, #172]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006df6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006df8:	4b29      	ldr	r3, [pc, #164]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006dfe:	4b28      	ldr	r3, [pc, #160]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006e04:	4826      	ldr	r0, [pc, #152]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006e06:	f000 fb45 	bl	8007494 <HAL_DMA_Init>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8006e10:	f7ff f9da 	bl	80061c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a22      	ldr	r2, [pc, #136]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006e18:	67da      	str	r2, [r3, #124]	; 0x7c
 8006e1a:	4a21      	ldr	r2, [pc, #132]	; (8006ea0 <HAL_UART_MspInit+0x194>)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8006e20:	4b21      	ldr	r3, [pc, #132]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e22:	4a22      	ldr	r2, [pc, #136]	; (8006eac <HAL_UART_MspInit+0x1a0>)
 8006e24:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006e26:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e28:	222e      	movs	r2, #46	; 0x2e
 8006e2a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e2e:	2240      	movs	r2, #64	; 0x40
 8006e30:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e32:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e38:	4b1b      	ldr	r3, [pc, #108]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e3e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e40:	4b19      	ldr	r3, [pc, #100]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e46:	4b18      	ldr	r3, [pc, #96]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006e4c:	4b16      	ldr	r3, [pc, #88]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006e52:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e58:	4b13      	ldr	r3, [pc, #76]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006e5e:	4812      	ldr	r0, [pc, #72]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e60:	f000 fb18 	bl	8007494 <HAL_DMA_Init>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8006e6a:	f7ff f9ad 	bl	80061c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a0d      	ldr	r2, [pc, #52]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e72:	679a      	str	r2, [r3, #120]	; 0x78
 8006e74:	4a0c      	ldr	r2, [pc, #48]	; (8006ea8 <HAL_UART_MspInit+0x19c>)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	2027      	movs	r0, #39	; 0x27
 8006e80:	f000 fad3 	bl	800742a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006e84:	2027      	movs	r0, #39	; 0x27
 8006e86:	f000 faea 	bl	800745e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006e8a:	bf00      	nop
 8006e8c:	37e0      	adds	r7, #224	; 0xe0
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40004800 	.word	0x40004800
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	58020c00 	.word	0x58020c00
 8006ea0:	240003c4 	.word	0x240003c4
 8006ea4:	40020028 	.word	0x40020028
 8006ea8:	2400043c 	.word	0x2400043c
 8006eac:	40020070 	.word	0x40020070

08006eb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb8:	f107 0314 	add.w	r3, r7, #20
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	605a      	str	r2, [r3, #4]
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	60da      	str	r2, [r3, #12]
 8006ec6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a22      	ldr	r2, [pc, #136]	; (8006f58 <HAL_PCD_MspInit+0xa8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d13d      	bne.n	8006f4e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8006ed2:	f003 fcf5 	bl	800a8c0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed6:	4b21      	ldr	r3, [pc, #132]	; (8006f5c <HAL_PCD_MspInit+0xac>)
 8006ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006edc:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <HAL_PCD_MspInit+0xac>)
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ee6:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <HAL_PCD_MspInit+0xac>)
 8006ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8006ef4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006efa:	2302      	movs	r3, #2
 8006efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f02:	2300      	movs	r3, #0
 8006f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8006f06:	230a      	movs	r3, #10
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f0a:	f107 0314 	add.w	r3, r7, #20
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4813      	ldr	r0, [pc, #76]	; (8006f60 <HAL_PCD_MspInit+0xb0>)
 8006f12:	f003 f909 	bl	800a128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f24:	f107 0314 	add.w	r3, r7, #20
 8006f28:	4619      	mov	r1, r3
 8006f2a:	480d      	ldr	r0, [pc, #52]	; (8006f60 <HAL_PCD_MspInit+0xb0>)
 8006f2c:	f003 f8fc 	bl	800a128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f30:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <HAL_PCD_MspInit+0xac>)
 8006f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f36:	4a09      	ldr	r2, [pc, #36]	; (8006f5c <HAL_PCD_MspInit+0xac>)
 8006f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f40:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <HAL_PCD_MspInit+0xac>)
 8006f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006f4e:	bf00      	nop
 8006f50:	3728      	adds	r7, #40	; 0x28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40080000 	.word	0x40080000
 8006f5c:	58024400 	.word	0x58024400
 8006f60:	58020000 	.word	0x58020000

08006f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f68:	e7fe      	b.n	8006f68 <NMI_Handler+0x4>

08006f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f6e:	e7fe      	b.n	8006f6e <HardFault_Handler+0x4>

08006f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f74:	e7fe      	b.n	8006f74 <MemManage_Handler+0x4>

08006f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f76:	b480      	push	{r7}
 8006f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f7a:	e7fe      	b.n	8006f7a <BusFault_Handler+0x4>

08006f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f80:	e7fe      	b.n	8006f80 <UsageFault_Handler+0x4>

08006f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f82:	b480      	push	{r7}
 8006f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f86:	bf00      	nop
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f94:	bf00      	nop
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006fa2:	bf00      	nop
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fb0:	f000 f8fc 	bl	80071ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fb4:	bf00      	nop
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006fbc:	4802      	ldr	r0, [pc, #8]	; (8006fc8 <DMA1_Stream1_IRQHandler+0x10>)
 8006fbe:	f001 fb29 	bl	8008614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006fc2:	bf00      	nop
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	240003c4 	.word	0x240003c4

08006fcc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006fd0:	4802      	ldr	r0, [pc, #8]	; (8006fdc <DMA1_Stream4_IRQHandler+0x10>)
 8006fd2:	f001 fb1f 	bl	8008614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006fd6:	bf00      	nop
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	2400043c 	.word	0x2400043c

08006fe0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006fe4:	4802      	ldr	r0, [pc, #8]	; (8006ff0 <USART3_IRQHandler+0x10>)
 8006fe6:	f006 ff59 	bl	800de9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006fea:	bf00      	nop
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	24000334 	.word	0x24000334

08006ff4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006ff8:	4802      	ldr	r0, [pc, #8]	; (8007004 <TIM7_IRQHandler+0x10>)
 8006ffa:	f006 fc72 	bl	800d8e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006ffe:	bf00      	nop
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	240002e8 	.word	0x240002e8

08007008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007010:	4a14      	ldr	r2, [pc, #80]	; (8007064 <_sbrk+0x5c>)
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <_sbrk+0x60>)
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800701c:	4b13      	ldr	r3, [pc, #76]	; (800706c <_sbrk+0x64>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007024:	4b11      	ldr	r3, [pc, #68]	; (800706c <_sbrk+0x64>)
 8007026:	4a12      	ldr	r2, [pc, #72]	; (8007070 <_sbrk+0x68>)
 8007028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800702a:	4b10      	ldr	r3, [pc, #64]	; (800706c <_sbrk+0x64>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4413      	add	r3, r2
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	429a      	cmp	r2, r3
 8007036:	d207      	bcs.n	8007048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007038:	f008 fede 	bl	800fdf8 <__errno>
 800703c:	4603      	mov	r3, r0
 800703e:	220c      	movs	r2, #12
 8007040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007042:	f04f 33ff 	mov.w	r3, #4294967295
 8007046:	e009      	b.n	800705c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <_sbrk+0x64>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <_sbrk+0x64>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	4a05      	ldr	r2, [pc, #20]	; (800706c <_sbrk+0x64>)
 8007058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800705a:	68fb      	ldr	r3, [r7, #12]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	24080000 	.word	0x24080000
 8007068:	00000400 	.word	0x00000400
 800706c:	24000eb0 	.word	0x24000eb0
 8007070:	24000ec8 	.word	0x24000ec8

08007074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007078:	f7fe fc0e 	bl	8005898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800707c:	480c      	ldr	r0, [pc, #48]	; (80070b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800707e:	490d      	ldr	r1, [pc, #52]	; (80070b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007080:	4a0d      	ldr	r2, [pc, #52]	; (80070b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007084:	e002      	b.n	800708c <LoopCopyDataInit>

08007086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800708a:	3304      	adds	r3, #4

0800708c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800708c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800708e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007090:	d3f9      	bcc.n	8007086 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007092:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007094:	4c0a      	ldr	r4, [pc, #40]	; (80070c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007098:	e001      	b.n	800709e <LoopFillZerobss>

0800709a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800709a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800709c:	3204      	adds	r2, #4

0800709e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800709e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070a0:	d3fb      	bcc.n	800709a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80070a2:	f008 feaf 	bl	800fe04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070a6:	f7fe fc8d 	bl	80059c4 <main>
  bx  lr
 80070aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80070ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80070b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80070b4:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80070b8:	08012128 	.word	0x08012128
  ldr r2, =_sbss
 80070bc:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 80070c0:	24000ec8 	.word	0x24000ec8

080070c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070c4:	e7fe      	b.n	80070c4 <ADC3_IRQHandler>
	...

080070c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070ce:	2003      	movs	r0, #3
 80070d0:	f000 f9a0 	bl	8007414 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80070d4:	f004 f9e8 	bl	800b4a8 <HAL_RCC_GetSysClockFreq>
 80070d8:	4602      	mov	r2, r0
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <HAL_Init+0x68>)
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	4913      	ldr	r1, [pc, #76]	; (8007134 <HAL_Init+0x6c>)
 80070e6:	5ccb      	ldrb	r3, [r1, r3]
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	fa22 f303 	lsr.w	r3, r2, r3
 80070f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070f2:	4b0f      	ldr	r3, [pc, #60]	; (8007130 <HAL_Init+0x68>)
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	4a0e      	ldr	r2, [pc, #56]	; (8007134 <HAL_Init+0x6c>)
 80070fc:	5cd3      	ldrb	r3, [r2, r3]
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	fa22 f303 	lsr.w	r3, r2, r3
 8007108:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <HAL_Init+0x70>)
 800710a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800710c:	4a0b      	ldr	r2, [pc, #44]	; (800713c <HAL_Init+0x74>)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007112:	2000      	movs	r0, #0
 8007114:	f000 f814 	bl	8007140 <HAL_InitTick>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e002      	b.n	8007128 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007122:	f7ff fc77 	bl	8006a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	58024400 	.word	0x58024400
 8007134:	08010b64 	.word	0x08010b64
 8007138:	24000008 	.word	0x24000008
 800713c:	24000004 	.word	0x24000004

08007140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007148:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <HAL_InitTick+0x60>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e021      	b.n	8007198 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007154:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <HAL_InitTick+0x64>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <HAL_InitTick+0x60>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	4619      	mov	r1, r3
 800715e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007162:	fbb3 f3f1 	udiv	r3, r3, r1
 8007166:	fbb2 f3f3 	udiv	r3, r2, r3
 800716a:	4618      	mov	r0, r3
 800716c:	f000 f985 	bl	800747a <HAL_SYSTICK_Config>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e00e      	b.n	8007198 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b0f      	cmp	r3, #15
 800717e:	d80a      	bhi.n	8007196 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007180:	2200      	movs	r2, #0
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	f000 f94f 	bl	800742a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800718c:	4a06      	ldr	r2, [pc, #24]	; (80071a8 <HAL_InitTick+0x68>)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e000      	b.n	8007198 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	24000020 	.word	0x24000020
 80071a4:	24000004 	.word	0x24000004
 80071a8:	2400001c 	.word	0x2400001c

080071ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80071b0:	4b06      	ldr	r3, [pc, #24]	; (80071cc <HAL_IncTick+0x20>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <HAL_IncTick+0x24>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4413      	add	r3, r2
 80071bc:	4a04      	ldr	r2, [pc, #16]	; (80071d0 <HAL_IncTick+0x24>)
 80071be:	6013      	str	r3, [r2, #0]
}
 80071c0:	bf00      	nop
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	24000020 	.word	0x24000020
 80071d0:	24000eb4 	.word	0x24000eb4

080071d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
  return uwTick;
 80071d8:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <HAL_GetTick+0x14>)
 80071da:	681b      	ldr	r3, [r3, #0]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	24000eb4 	.word	0x24000eb4

080071ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071f4:	f7ff ffee 	bl	80071d4 <HAL_GetTick>
 80071f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d005      	beq.n	8007212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007206:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <HAL_Delay+0x44>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007212:	bf00      	nop
 8007214:	f7ff ffde 	bl	80071d4 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	429a      	cmp	r2, r3
 8007222:	d8f7      	bhi.n	8007214 <HAL_Delay+0x28>
  {
  }
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	24000020 	.word	0x24000020

08007234 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007238:	4b03      	ldr	r3, [pc, #12]	; (8007248 <HAL_GetREVID+0x14>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	0c1b      	lsrs	r3, r3, #16
}
 800723e:	4618      	mov	r0, r3
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	5c001000 	.word	0x5c001000

0800724c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8007254:	4b06      	ldr	r3, [pc, #24]	; (8007270 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800725c:	4904      	ldr	r1, [pc, #16]	; (8007270 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4313      	orrs	r3, r2
 8007262:	604b      	str	r3, [r1, #4]
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	58000400 	.word	0x58000400

08007274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007284:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <__NVIC_SetPriorityGrouping+0x40>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007290:	4013      	ands	r3, r2
 8007292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <__NVIC_SetPriorityGrouping+0x44>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072a2:	4a04      	ldr	r2, [pc, #16]	; (80072b4 <__NVIC_SetPriorityGrouping+0x40>)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	60d3      	str	r3, [r2, #12]
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	e000ed00 	.word	0xe000ed00
 80072b8:	05fa0000 	.word	0x05fa0000

080072bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072c0:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <__NVIC_GetPriorityGrouping+0x18>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	0a1b      	lsrs	r3, r3, #8
 80072c6:	f003 0307 	and.w	r3, r3, #7
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	e000ed00 	.word	0xe000ed00

080072d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80072e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	db0b      	blt.n	8007302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072ea:	88fb      	ldrh	r3, [r7, #6]
 80072ec:	f003 021f 	and.w	r2, r3, #31
 80072f0:	4907      	ldr	r1, [pc, #28]	; (8007310 <__NVIC_EnableIRQ+0x38>)
 80072f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	2001      	movs	r0, #1
 80072fa:	fa00 f202 	lsl.w	r2, r0, r2
 80072fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	e000e100 	.word	0xe000e100

08007314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	6039      	str	r1, [r7, #0]
 800731e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007324:	2b00      	cmp	r3, #0
 8007326:	db0a      	blt.n	800733e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	490c      	ldr	r1, [pc, #48]	; (8007360 <__NVIC_SetPriority+0x4c>)
 800732e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007332:	0112      	lsls	r2, r2, #4
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	440b      	add	r3, r1
 8007338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800733c:	e00a      	b.n	8007354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	b2da      	uxtb	r2, r3
 8007342:	4908      	ldr	r1, [pc, #32]	; (8007364 <__NVIC_SetPriority+0x50>)
 8007344:	88fb      	ldrh	r3, [r7, #6]
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	3b04      	subs	r3, #4
 800734c:	0112      	lsls	r2, r2, #4
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	440b      	add	r3, r1
 8007352:	761a      	strb	r2, [r3, #24]
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	e000e100 	.word	0xe000e100
 8007364:	e000ed00 	.word	0xe000ed00

08007368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007368:	b480      	push	{r7}
 800736a:	b089      	sub	sp, #36	; 0x24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f1c3 0307 	rsb	r3, r3, #7
 8007382:	2b04      	cmp	r3, #4
 8007384:	bf28      	it	cs
 8007386:	2304      	movcs	r3, #4
 8007388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	3304      	adds	r3, #4
 800738e:	2b06      	cmp	r3, #6
 8007390:	d902      	bls.n	8007398 <NVIC_EncodePriority+0x30>
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	3b03      	subs	r3, #3
 8007396:	e000      	b.n	800739a <NVIC_EncodePriority+0x32>
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800739c:	f04f 32ff 	mov.w	r2, #4294967295
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	fa02 f303 	lsl.w	r3, r2, r3
 80073a6:	43da      	mvns	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	401a      	ands	r2, r3
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073b0:	f04f 31ff 	mov.w	r1, #4294967295
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ba:	43d9      	mvns	r1, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073c0:	4313      	orrs	r3, r2
         );
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3724      	adds	r7, #36	; 0x24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3b01      	subs	r3, #1
 80073dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073e0:	d301      	bcc.n	80073e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073e2:	2301      	movs	r3, #1
 80073e4:	e00f      	b.n	8007406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073e6:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <SysTick_Config+0x40>)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80073ee:	210f      	movs	r1, #15
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295
 80073f4:	f7ff ff8e 	bl	8007314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80073f8:	4b05      	ldr	r3, [pc, #20]	; (8007410 <SysTick_Config+0x40>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80073fe:	4b04      	ldr	r3, [pc, #16]	; (8007410 <SysTick_Config+0x40>)
 8007400:	2207      	movs	r2, #7
 8007402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	e000e010 	.word	0xe000e010

08007414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff ff29 	bl	8007274 <__NVIC_SetPriorityGrouping>
}
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b086      	sub	sp, #24
 800742e:	af00      	add	r7, sp, #0
 8007430:	4603      	mov	r3, r0
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]
 8007436:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007438:	f7ff ff40 	bl	80072bc <__NVIC_GetPriorityGrouping>
 800743c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	6978      	ldr	r0, [r7, #20]
 8007444:	f7ff ff90 	bl	8007368 <NVIC_EncodePriority>
 8007448:	4602      	mov	r2, r0
 800744a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800744e:	4611      	mov	r1, r2
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff ff5f 	bl	8007314 <__NVIC_SetPriority>
}
 8007456:	bf00      	nop
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b082      	sub	sp, #8
 8007462:	af00      	add	r7, sp, #0
 8007464:	4603      	mov	r3, r0
 8007466:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff ff33 	bl	80072d8 <__NVIC_EnableIRQ>
}
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff ffa4 	bl	80073d0 <SysTick_Config>
 8007488:	4603      	mov	r3, r0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800749c:	f7ff fe9a 	bl	80071d4 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e316      	b.n	8007ada <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a66      	ldr	r2, [pc, #408]	; (800764c <HAL_DMA_Init+0x1b8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d04a      	beq.n	800754c <HAL_DMA_Init+0xb8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a65      	ldr	r2, [pc, #404]	; (8007650 <HAL_DMA_Init+0x1bc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d045      	beq.n	800754c <HAL_DMA_Init+0xb8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a63      	ldr	r2, [pc, #396]	; (8007654 <HAL_DMA_Init+0x1c0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d040      	beq.n	800754c <HAL_DMA_Init+0xb8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a62      	ldr	r2, [pc, #392]	; (8007658 <HAL_DMA_Init+0x1c4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d03b      	beq.n	800754c <HAL_DMA_Init+0xb8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a60      	ldr	r2, [pc, #384]	; (800765c <HAL_DMA_Init+0x1c8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d036      	beq.n	800754c <HAL_DMA_Init+0xb8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a5f      	ldr	r2, [pc, #380]	; (8007660 <HAL_DMA_Init+0x1cc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d031      	beq.n	800754c <HAL_DMA_Init+0xb8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a5d      	ldr	r2, [pc, #372]	; (8007664 <HAL_DMA_Init+0x1d0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d02c      	beq.n	800754c <HAL_DMA_Init+0xb8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a5c      	ldr	r2, [pc, #368]	; (8007668 <HAL_DMA_Init+0x1d4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d027      	beq.n	800754c <HAL_DMA_Init+0xb8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a5a      	ldr	r2, [pc, #360]	; (800766c <HAL_DMA_Init+0x1d8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d022      	beq.n	800754c <HAL_DMA_Init+0xb8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a59      	ldr	r2, [pc, #356]	; (8007670 <HAL_DMA_Init+0x1dc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d01d      	beq.n	800754c <HAL_DMA_Init+0xb8>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a57      	ldr	r2, [pc, #348]	; (8007674 <HAL_DMA_Init+0x1e0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d018      	beq.n	800754c <HAL_DMA_Init+0xb8>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a56      	ldr	r2, [pc, #344]	; (8007678 <HAL_DMA_Init+0x1e4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <HAL_DMA_Init+0xb8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a54      	ldr	r2, [pc, #336]	; (800767c <HAL_DMA_Init+0x1e8>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <HAL_DMA_Init+0xb8>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a53      	ldr	r2, [pc, #332]	; (8007680 <HAL_DMA_Init+0x1ec>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_DMA_Init+0xb8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a51      	ldr	r2, [pc, #324]	; (8007684 <HAL_DMA_Init+0x1f0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_DMA_Init+0xb8>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a50      	ldr	r2, [pc, #320]	; (8007688 <HAL_DMA_Init+0x1f4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d101      	bne.n	8007550 <HAL_DMA_Init+0xbc>
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <HAL_DMA_Init+0xbe>
 8007550:	2300      	movs	r3, #0
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 813b 	beq.w	80077ce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a37      	ldr	r2, [pc, #220]	; (800764c <HAL_DMA_Init+0x1b8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d04a      	beq.n	8007608 <HAL_DMA_Init+0x174>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a36      	ldr	r2, [pc, #216]	; (8007650 <HAL_DMA_Init+0x1bc>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d045      	beq.n	8007608 <HAL_DMA_Init+0x174>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a34      	ldr	r2, [pc, #208]	; (8007654 <HAL_DMA_Init+0x1c0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d040      	beq.n	8007608 <HAL_DMA_Init+0x174>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a33      	ldr	r2, [pc, #204]	; (8007658 <HAL_DMA_Init+0x1c4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d03b      	beq.n	8007608 <HAL_DMA_Init+0x174>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a31      	ldr	r2, [pc, #196]	; (800765c <HAL_DMA_Init+0x1c8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d036      	beq.n	8007608 <HAL_DMA_Init+0x174>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a30      	ldr	r2, [pc, #192]	; (8007660 <HAL_DMA_Init+0x1cc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d031      	beq.n	8007608 <HAL_DMA_Init+0x174>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a2e      	ldr	r2, [pc, #184]	; (8007664 <HAL_DMA_Init+0x1d0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d02c      	beq.n	8007608 <HAL_DMA_Init+0x174>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a2d      	ldr	r2, [pc, #180]	; (8007668 <HAL_DMA_Init+0x1d4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d027      	beq.n	8007608 <HAL_DMA_Init+0x174>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2b      	ldr	r2, [pc, #172]	; (800766c <HAL_DMA_Init+0x1d8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d022      	beq.n	8007608 <HAL_DMA_Init+0x174>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a2a      	ldr	r2, [pc, #168]	; (8007670 <HAL_DMA_Init+0x1dc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d01d      	beq.n	8007608 <HAL_DMA_Init+0x174>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a28      	ldr	r2, [pc, #160]	; (8007674 <HAL_DMA_Init+0x1e0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d018      	beq.n	8007608 <HAL_DMA_Init+0x174>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a27      	ldr	r2, [pc, #156]	; (8007678 <HAL_DMA_Init+0x1e4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d013      	beq.n	8007608 <HAL_DMA_Init+0x174>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a25      	ldr	r2, [pc, #148]	; (800767c <HAL_DMA_Init+0x1e8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00e      	beq.n	8007608 <HAL_DMA_Init+0x174>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a24      	ldr	r2, [pc, #144]	; (8007680 <HAL_DMA_Init+0x1ec>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d009      	beq.n	8007608 <HAL_DMA_Init+0x174>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a22      	ldr	r2, [pc, #136]	; (8007684 <HAL_DMA_Init+0x1f0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d004      	beq.n	8007608 <HAL_DMA_Init+0x174>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a21      	ldr	r2, [pc, #132]	; (8007688 <HAL_DMA_Init+0x1f4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d108      	bne.n	800761a <HAL_DMA_Init+0x186>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0201 	bic.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e007      	b.n	800762a <HAL_DMA_Init+0x196>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0201 	bic.w	r2, r2, #1
 8007628:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800762a:	e02f      	b.n	800768c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800762c:	f7ff fdd2 	bl	80071d4 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b05      	cmp	r3, #5
 8007638:	d928      	bls.n	800768c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2220      	movs	r2, #32
 800763e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2203      	movs	r2, #3
 8007644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e246      	b.n	8007ada <HAL_DMA_Init+0x646>
 800764c:	40020010 	.word	0x40020010
 8007650:	40020028 	.word	0x40020028
 8007654:	40020040 	.word	0x40020040
 8007658:	40020058 	.word	0x40020058
 800765c:	40020070 	.word	0x40020070
 8007660:	40020088 	.word	0x40020088
 8007664:	400200a0 	.word	0x400200a0
 8007668:	400200b8 	.word	0x400200b8
 800766c:	40020410 	.word	0x40020410
 8007670:	40020428 	.word	0x40020428
 8007674:	40020440 	.word	0x40020440
 8007678:	40020458 	.word	0x40020458
 800767c:	40020470 	.word	0x40020470
 8007680:	40020488 	.word	0x40020488
 8007684:	400204a0 	.word	0x400204a0
 8007688:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1c8      	bne.n	800762c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4b83      	ldr	r3, [pc, #524]	; (80078b4 <HAL_DMA_Init+0x420>)
 80076a6:	4013      	ands	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80076b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d107      	bne.n	80076f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	4313      	orrs	r3, r2
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80076f0:	4b71      	ldr	r3, [pc, #452]	; (80078b8 <HAL_DMA_Init+0x424>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	4b71      	ldr	r3, [pc, #452]	; (80078bc <HAL_DMA_Init+0x428>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fc:	d328      	bcc.n	8007750 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2b28      	cmp	r3, #40	; 0x28
 8007704:	d903      	bls.n	800770e <HAL_DMA_Init+0x27a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b2e      	cmp	r3, #46	; 0x2e
 800770c:	d917      	bls.n	800773e <HAL_DMA_Init+0x2aa>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2b3e      	cmp	r3, #62	; 0x3e
 8007714:	d903      	bls.n	800771e <HAL_DMA_Init+0x28a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2b42      	cmp	r3, #66	; 0x42
 800771c:	d90f      	bls.n	800773e <HAL_DMA_Init+0x2aa>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2b46      	cmp	r3, #70	; 0x46
 8007724:	d903      	bls.n	800772e <HAL_DMA_Init+0x29a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2b48      	cmp	r3, #72	; 0x48
 800772c:	d907      	bls.n	800773e <HAL_DMA_Init+0x2aa>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b4e      	cmp	r3, #78	; 0x4e
 8007734:	d905      	bls.n	8007742 <HAL_DMA_Init+0x2ae>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b52      	cmp	r3, #82	; 0x52
 800773c:	d801      	bhi.n	8007742 <HAL_DMA_Init+0x2ae>
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <HAL_DMA_Init+0x2b0>
 8007742:	2300      	movs	r3, #0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800774e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f023 0307 	bic.w	r3, r3, #7
 8007766:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	2b04      	cmp	r3, #4
 8007778:	d117      	bne.n	80077aa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00e      	beq.n	80077aa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 ff1d 	bl	80095cc <DMA_CheckFifoParam>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d008      	beq.n	80077aa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2240      	movs	r2, #64	; 0x40
 800779c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e197      	b.n	8007ada <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 fe58 	bl	8009468 <DMA_CalcBaseAndBitshift>
 80077b8:	4603      	mov	r3, r0
 80077ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	223f      	movs	r2, #63	; 0x3f
 80077c6:	409a      	lsls	r2, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	609a      	str	r2, [r3, #8]
 80077cc:	e0cd      	b.n	800796a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a3b      	ldr	r2, [pc, #236]	; (80078c0 <HAL_DMA_Init+0x42c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d022      	beq.n	800781e <HAL_DMA_Init+0x38a>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a39      	ldr	r2, [pc, #228]	; (80078c4 <HAL_DMA_Init+0x430>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d01d      	beq.n	800781e <HAL_DMA_Init+0x38a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a38      	ldr	r2, [pc, #224]	; (80078c8 <HAL_DMA_Init+0x434>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d018      	beq.n	800781e <HAL_DMA_Init+0x38a>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a36      	ldr	r2, [pc, #216]	; (80078cc <HAL_DMA_Init+0x438>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d013      	beq.n	800781e <HAL_DMA_Init+0x38a>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a35      	ldr	r2, [pc, #212]	; (80078d0 <HAL_DMA_Init+0x43c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00e      	beq.n	800781e <HAL_DMA_Init+0x38a>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a33      	ldr	r2, [pc, #204]	; (80078d4 <HAL_DMA_Init+0x440>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d009      	beq.n	800781e <HAL_DMA_Init+0x38a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a32      	ldr	r2, [pc, #200]	; (80078d8 <HAL_DMA_Init+0x444>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d004      	beq.n	800781e <HAL_DMA_Init+0x38a>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a30      	ldr	r2, [pc, #192]	; (80078dc <HAL_DMA_Init+0x448>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d101      	bne.n	8007822 <HAL_DMA_Init+0x38e>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <HAL_DMA_Init+0x390>
 8007822:	2300      	movs	r3, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8097 	beq.w	8007958 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a24      	ldr	r2, [pc, #144]	; (80078c0 <HAL_DMA_Init+0x42c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d021      	beq.n	8007878 <HAL_DMA_Init+0x3e4>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a22      	ldr	r2, [pc, #136]	; (80078c4 <HAL_DMA_Init+0x430>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d01c      	beq.n	8007878 <HAL_DMA_Init+0x3e4>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a21      	ldr	r2, [pc, #132]	; (80078c8 <HAL_DMA_Init+0x434>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d017      	beq.n	8007878 <HAL_DMA_Init+0x3e4>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a1f      	ldr	r2, [pc, #124]	; (80078cc <HAL_DMA_Init+0x438>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d012      	beq.n	8007878 <HAL_DMA_Init+0x3e4>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a1e      	ldr	r2, [pc, #120]	; (80078d0 <HAL_DMA_Init+0x43c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00d      	beq.n	8007878 <HAL_DMA_Init+0x3e4>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a1c      	ldr	r2, [pc, #112]	; (80078d4 <HAL_DMA_Init+0x440>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d008      	beq.n	8007878 <HAL_DMA_Init+0x3e4>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a1b      	ldr	r2, [pc, #108]	; (80078d8 <HAL_DMA_Init+0x444>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d003      	beq.n	8007878 <HAL_DMA_Init+0x3e4>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a19      	ldr	r2, [pc, #100]	; (80078dc <HAL_DMA_Init+0x448>)
 8007876:	4293      	cmp	r3, r2
 8007878:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	4b12      	ldr	r3, [pc, #72]	; (80078e0 <HAL_DMA_Init+0x44c>)
 8007896:	4013      	ands	r3, r2
 8007898:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d020      	beq.n	80078e4 <HAL_DMA_Init+0x450>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b80      	cmp	r3, #128	; 0x80
 80078a8:	d102      	bne.n	80078b0 <HAL_DMA_Init+0x41c>
 80078aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80078ae:	e01a      	b.n	80078e6 <HAL_DMA_Init+0x452>
 80078b0:	2300      	movs	r3, #0
 80078b2:	e018      	b.n	80078e6 <HAL_DMA_Init+0x452>
 80078b4:	fe10803f 	.word	0xfe10803f
 80078b8:	5c001000 	.word	0x5c001000
 80078bc:	ffff0000 	.word	0xffff0000
 80078c0:	58025408 	.word	0x58025408
 80078c4:	5802541c 	.word	0x5802541c
 80078c8:	58025430 	.word	0x58025430
 80078cc:	58025444 	.word	0x58025444
 80078d0:	58025458 	.word	0x58025458
 80078d4:	5802546c 	.word	0x5802546c
 80078d8:	58025480 	.word	0x58025480
 80078dc:	58025494 	.word	0x58025494
 80078e0:	fffe000f 	.word	0xfffe000f
 80078e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	68d2      	ldr	r2, [r2, #12]
 80078ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80078ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80078f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80078fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007904:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800790c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007914:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	4313      	orrs	r3, r2
 800791a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	4b6e      	ldr	r3, [pc, #440]	; (8007ae4 <HAL_DMA_Init+0x650>)
 800792c:	4413      	add	r3, r2
 800792e:	4a6e      	ldr	r2, [pc, #440]	; (8007ae8 <HAL_DMA_Init+0x654>)
 8007930:	fba2 2303 	umull	r2, r3, r2, r3
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	009a      	lsls	r2, r3, #2
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 fd93 	bl	8009468 <DMA_CalcBaseAndBitshift>
 8007942:	4603      	mov	r3, r0
 8007944:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794a:	f003 031f 	and.w	r3, r3, #31
 800794e:	2201      	movs	r2, #1
 8007950:	409a      	lsls	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	e008      	b.n	800796a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2240      	movs	r2, #64	; 0x40
 800795c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2203      	movs	r2, #3
 8007962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e0b7      	b.n	8007ada <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a5f      	ldr	r2, [pc, #380]	; (8007aec <HAL_DMA_Init+0x658>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d072      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a5d      	ldr	r2, [pc, #372]	; (8007af0 <HAL_DMA_Init+0x65c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d06d      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a5c      	ldr	r2, [pc, #368]	; (8007af4 <HAL_DMA_Init+0x660>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d068      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a5a      	ldr	r2, [pc, #360]	; (8007af8 <HAL_DMA_Init+0x664>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d063      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a59      	ldr	r2, [pc, #356]	; (8007afc <HAL_DMA_Init+0x668>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d05e      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a57      	ldr	r2, [pc, #348]	; (8007b00 <HAL_DMA_Init+0x66c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d059      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a56      	ldr	r2, [pc, #344]	; (8007b04 <HAL_DMA_Init+0x670>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d054      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a54      	ldr	r2, [pc, #336]	; (8007b08 <HAL_DMA_Init+0x674>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d04f      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a53      	ldr	r2, [pc, #332]	; (8007b0c <HAL_DMA_Init+0x678>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d04a      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a51      	ldr	r2, [pc, #324]	; (8007b10 <HAL_DMA_Init+0x67c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d045      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a50      	ldr	r2, [pc, #320]	; (8007b14 <HAL_DMA_Init+0x680>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d040      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a4e      	ldr	r2, [pc, #312]	; (8007b18 <HAL_DMA_Init+0x684>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d03b      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a4d      	ldr	r2, [pc, #308]	; (8007b1c <HAL_DMA_Init+0x688>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d036      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a4b      	ldr	r2, [pc, #300]	; (8007b20 <HAL_DMA_Init+0x68c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d031      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a4a      	ldr	r2, [pc, #296]	; (8007b24 <HAL_DMA_Init+0x690>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d02c      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a48      	ldr	r2, [pc, #288]	; (8007b28 <HAL_DMA_Init+0x694>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d027      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a47      	ldr	r2, [pc, #284]	; (8007b2c <HAL_DMA_Init+0x698>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d022      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a45      	ldr	r2, [pc, #276]	; (8007b30 <HAL_DMA_Init+0x69c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d01d      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a44      	ldr	r2, [pc, #272]	; (8007b34 <HAL_DMA_Init+0x6a0>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d018      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a42      	ldr	r2, [pc, #264]	; (8007b38 <HAL_DMA_Init+0x6a4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d013      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a41      	ldr	r2, [pc, #260]	; (8007b3c <HAL_DMA_Init+0x6a8>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00e      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a3f      	ldr	r2, [pc, #252]	; (8007b40 <HAL_DMA_Init+0x6ac>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d009      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a3e      	ldr	r2, [pc, #248]	; (8007b44 <HAL_DMA_Init+0x6b0>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d004      	beq.n	8007a5a <HAL_DMA_Init+0x5c6>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a3c      	ldr	r2, [pc, #240]	; (8007b48 <HAL_DMA_Init+0x6b4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d101      	bne.n	8007a5e <HAL_DMA_Init+0x5ca>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e000      	b.n	8007a60 <HAL_DMA_Init+0x5cc>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d032      	beq.n	8007aca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fe2d 	bl	80096c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b80      	cmp	r3, #128	; 0x80
 8007a70:	d102      	bne.n	8007a78 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d010      	beq.n	8007ab8 <HAL_DMA_Init+0x624>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d80c      	bhi.n	8007ab8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 feaa 	bl	80097f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	e008      	b.n	8007aca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	a7fdabf8 	.word	0xa7fdabf8
 8007ae8:	cccccccd 	.word	0xcccccccd
 8007aec:	40020010 	.word	0x40020010
 8007af0:	40020028 	.word	0x40020028
 8007af4:	40020040 	.word	0x40020040
 8007af8:	40020058 	.word	0x40020058
 8007afc:	40020070 	.word	0x40020070
 8007b00:	40020088 	.word	0x40020088
 8007b04:	400200a0 	.word	0x400200a0
 8007b08:	400200b8 	.word	0x400200b8
 8007b0c:	40020410 	.word	0x40020410
 8007b10:	40020428 	.word	0x40020428
 8007b14:	40020440 	.word	0x40020440
 8007b18:	40020458 	.word	0x40020458
 8007b1c:	40020470 	.word	0x40020470
 8007b20:	40020488 	.word	0x40020488
 8007b24:	400204a0 	.word	0x400204a0
 8007b28:	400204b8 	.word	0x400204b8
 8007b2c:	58025408 	.word	0x58025408
 8007b30:	5802541c 	.word	0x5802541c
 8007b34:	58025430 	.word	0x58025430
 8007b38:	58025444 	.word	0x58025444
 8007b3c:	58025458 	.word	0x58025458
 8007b40:	5802546c 	.word	0x5802546c
 8007b44:	58025480 	.word	0x58025480
 8007b48:	58025494 	.word	0x58025494

08007b4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007b54:	f7ff fb3e 	bl	80071d4 <HAL_GetTick>
 8007b58:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e2dc      	b.n	800811e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d008      	beq.n	8007b82 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2280      	movs	r2, #128	; 0x80
 8007b74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e2cd      	b.n	800811e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a76      	ldr	r2, [pc, #472]	; (8007d60 <HAL_DMA_Abort+0x214>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d04a      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a74      	ldr	r2, [pc, #464]	; (8007d64 <HAL_DMA_Abort+0x218>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d045      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a73      	ldr	r2, [pc, #460]	; (8007d68 <HAL_DMA_Abort+0x21c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d040      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a71      	ldr	r2, [pc, #452]	; (8007d6c <HAL_DMA_Abort+0x220>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d03b      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a70      	ldr	r2, [pc, #448]	; (8007d70 <HAL_DMA_Abort+0x224>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d036      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a6e      	ldr	r2, [pc, #440]	; (8007d74 <HAL_DMA_Abort+0x228>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d031      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a6d      	ldr	r2, [pc, #436]	; (8007d78 <HAL_DMA_Abort+0x22c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d02c      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a6b      	ldr	r2, [pc, #428]	; (8007d7c <HAL_DMA_Abort+0x230>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d027      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a6a      	ldr	r2, [pc, #424]	; (8007d80 <HAL_DMA_Abort+0x234>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d022      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a68      	ldr	r2, [pc, #416]	; (8007d84 <HAL_DMA_Abort+0x238>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d01d      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a67      	ldr	r2, [pc, #412]	; (8007d88 <HAL_DMA_Abort+0x23c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d018      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a65      	ldr	r2, [pc, #404]	; (8007d8c <HAL_DMA_Abort+0x240>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d013      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a64      	ldr	r2, [pc, #400]	; (8007d90 <HAL_DMA_Abort+0x244>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00e      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a62      	ldr	r2, [pc, #392]	; (8007d94 <HAL_DMA_Abort+0x248>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d009      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a61      	ldr	r2, [pc, #388]	; (8007d98 <HAL_DMA_Abort+0x24c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d004      	beq.n	8007c22 <HAL_DMA_Abort+0xd6>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a5f      	ldr	r2, [pc, #380]	; (8007d9c <HAL_DMA_Abort+0x250>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d101      	bne.n	8007c26 <HAL_DMA_Abort+0xda>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e000      	b.n	8007c28 <HAL_DMA_Abort+0xdc>
 8007c26:	2300      	movs	r3, #0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d013      	beq.n	8007c54 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 021e 	bic.w	r2, r2, #30
 8007c3a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695a      	ldr	r2, [r3, #20]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c4a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	e00a      	b.n	8007c6a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 020e 	bic.w	r2, r2, #14
 8007c62:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a3c      	ldr	r2, [pc, #240]	; (8007d60 <HAL_DMA_Abort+0x214>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d072      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a3a      	ldr	r2, [pc, #232]	; (8007d64 <HAL_DMA_Abort+0x218>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d06d      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a39      	ldr	r2, [pc, #228]	; (8007d68 <HAL_DMA_Abort+0x21c>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d068      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a37      	ldr	r2, [pc, #220]	; (8007d6c <HAL_DMA_Abort+0x220>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d063      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a36      	ldr	r2, [pc, #216]	; (8007d70 <HAL_DMA_Abort+0x224>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d05e      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a34      	ldr	r2, [pc, #208]	; (8007d74 <HAL_DMA_Abort+0x228>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d059      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a33      	ldr	r2, [pc, #204]	; (8007d78 <HAL_DMA_Abort+0x22c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d054      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a31      	ldr	r2, [pc, #196]	; (8007d7c <HAL_DMA_Abort+0x230>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d04f      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a30      	ldr	r2, [pc, #192]	; (8007d80 <HAL_DMA_Abort+0x234>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d04a      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a2e      	ldr	r2, [pc, #184]	; (8007d84 <HAL_DMA_Abort+0x238>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d045      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a2d      	ldr	r2, [pc, #180]	; (8007d88 <HAL_DMA_Abort+0x23c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d040      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a2b      	ldr	r2, [pc, #172]	; (8007d8c <HAL_DMA_Abort+0x240>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d03b      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a2a      	ldr	r2, [pc, #168]	; (8007d90 <HAL_DMA_Abort+0x244>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d036      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a28      	ldr	r2, [pc, #160]	; (8007d94 <HAL_DMA_Abort+0x248>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d031      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a27      	ldr	r2, [pc, #156]	; (8007d98 <HAL_DMA_Abort+0x24c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d02c      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a25      	ldr	r2, [pc, #148]	; (8007d9c <HAL_DMA_Abort+0x250>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d027      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a24      	ldr	r2, [pc, #144]	; (8007da0 <HAL_DMA_Abort+0x254>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d022      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a22      	ldr	r2, [pc, #136]	; (8007da4 <HAL_DMA_Abort+0x258>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d01d      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a21      	ldr	r2, [pc, #132]	; (8007da8 <HAL_DMA_Abort+0x25c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d018      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a1f      	ldr	r2, [pc, #124]	; (8007dac <HAL_DMA_Abort+0x260>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d013      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1e      	ldr	r2, [pc, #120]	; (8007db0 <HAL_DMA_Abort+0x264>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00e      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a1c      	ldr	r2, [pc, #112]	; (8007db4 <HAL_DMA_Abort+0x268>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d009      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	; (8007db8 <HAL_DMA_Abort+0x26c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d004      	beq.n	8007d5a <HAL_DMA_Abort+0x20e>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a19      	ldr	r2, [pc, #100]	; (8007dbc <HAL_DMA_Abort+0x270>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d132      	bne.n	8007dc0 <HAL_DMA_Abort+0x274>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e031      	b.n	8007dc2 <HAL_DMA_Abort+0x276>
 8007d5e:	bf00      	nop
 8007d60:	40020010 	.word	0x40020010
 8007d64:	40020028 	.word	0x40020028
 8007d68:	40020040 	.word	0x40020040
 8007d6c:	40020058 	.word	0x40020058
 8007d70:	40020070 	.word	0x40020070
 8007d74:	40020088 	.word	0x40020088
 8007d78:	400200a0 	.word	0x400200a0
 8007d7c:	400200b8 	.word	0x400200b8
 8007d80:	40020410 	.word	0x40020410
 8007d84:	40020428 	.word	0x40020428
 8007d88:	40020440 	.word	0x40020440
 8007d8c:	40020458 	.word	0x40020458
 8007d90:	40020470 	.word	0x40020470
 8007d94:	40020488 	.word	0x40020488
 8007d98:	400204a0 	.word	0x400204a0
 8007d9c:	400204b8 	.word	0x400204b8
 8007da0:	58025408 	.word	0x58025408
 8007da4:	5802541c 	.word	0x5802541c
 8007da8:	58025430 	.word	0x58025430
 8007dac:	58025444 	.word	0x58025444
 8007db0:	58025458 	.word	0x58025458
 8007db4:	5802546c 	.word	0x5802546c
 8007db8:	58025480 	.word	0x58025480
 8007dbc:	58025494 	.word	0x58025494
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a6d      	ldr	r2, [pc, #436]	; (8007f90 <HAL_DMA_Abort+0x444>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d04a      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a6b      	ldr	r2, [pc, #428]	; (8007f94 <HAL_DMA_Abort+0x448>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d045      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a6a      	ldr	r2, [pc, #424]	; (8007f98 <HAL_DMA_Abort+0x44c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d040      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a68      	ldr	r2, [pc, #416]	; (8007f9c <HAL_DMA_Abort+0x450>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d03b      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a67      	ldr	r2, [pc, #412]	; (8007fa0 <HAL_DMA_Abort+0x454>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d036      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a65      	ldr	r2, [pc, #404]	; (8007fa4 <HAL_DMA_Abort+0x458>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d031      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a64      	ldr	r2, [pc, #400]	; (8007fa8 <HAL_DMA_Abort+0x45c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d02c      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a62      	ldr	r2, [pc, #392]	; (8007fac <HAL_DMA_Abort+0x460>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d027      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a61      	ldr	r2, [pc, #388]	; (8007fb0 <HAL_DMA_Abort+0x464>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d022      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a5f      	ldr	r2, [pc, #380]	; (8007fb4 <HAL_DMA_Abort+0x468>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d01d      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a5e      	ldr	r2, [pc, #376]	; (8007fb8 <HAL_DMA_Abort+0x46c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d018      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a5c      	ldr	r2, [pc, #368]	; (8007fbc <HAL_DMA_Abort+0x470>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d013      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a5b      	ldr	r2, [pc, #364]	; (8007fc0 <HAL_DMA_Abort+0x474>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00e      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a59      	ldr	r2, [pc, #356]	; (8007fc4 <HAL_DMA_Abort+0x478>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d009      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a58      	ldr	r2, [pc, #352]	; (8007fc8 <HAL_DMA_Abort+0x47c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d004      	beq.n	8007e76 <HAL_DMA_Abort+0x32a>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a56      	ldr	r2, [pc, #344]	; (8007fcc <HAL_DMA_Abort+0x480>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d108      	bne.n	8007e88 <HAL_DMA_Abort+0x33c>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0201 	bic.w	r2, r2, #1
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	e007      	b.n	8007e98 <HAL_DMA_Abort+0x34c>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0201 	bic.w	r2, r2, #1
 8007e96:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007e98:	e013      	b.n	8007ec2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e9a:	f7ff f99b 	bl	80071d4 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b05      	cmp	r3, #5
 8007ea6:	d90c      	bls.n	8007ec2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e12d      	b.n	800811e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e5      	bne.n	8007e9a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a2f      	ldr	r2, [pc, #188]	; (8007f90 <HAL_DMA_Abort+0x444>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d04a      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a2d      	ldr	r2, [pc, #180]	; (8007f94 <HAL_DMA_Abort+0x448>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d045      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a2c      	ldr	r2, [pc, #176]	; (8007f98 <HAL_DMA_Abort+0x44c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d040      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a2a      	ldr	r2, [pc, #168]	; (8007f9c <HAL_DMA_Abort+0x450>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d03b      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a29      	ldr	r2, [pc, #164]	; (8007fa0 <HAL_DMA_Abort+0x454>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d036      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a27      	ldr	r2, [pc, #156]	; (8007fa4 <HAL_DMA_Abort+0x458>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d031      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a26      	ldr	r2, [pc, #152]	; (8007fa8 <HAL_DMA_Abort+0x45c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d02c      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a24      	ldr	r2, [pc, #144]	; (8007fac <HAL_DMA_Abort+0x460>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d027      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a23      	ldr	r2, [pc, #140]	; (8007fb0 <HAL_DMA_Abort+0x464>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d022      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a21      	ldr	r2, [pc, #132]	; (8007fb4 <HAL_DMA_Abort+0x468>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d01d      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a20      	ldr	r2, [pc, #128]	; (8007fb8 <HAL_DMA_Abort+0x46c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d018      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a1e      	ldr	r2, [pc, #120]	; (8007fbc <HAL_DMA_Abort+0x470>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d013      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a1d      	ldr	r2, [pc, #116]	; (8007fc0 <HAL_DMA_Abort+0x474>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d00e      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a1b      	ldr	r2, [pc, #108]	; (8007fc4 <HAL_DMA_Abort+0x478>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d009      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a1a      	ldr	r2, [pc, #104]	; (8007fc8 <HAL_DMA_Abort+0x47c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d004      	beq.n	8007f6e <HAL_DMA_Abort+0x422>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a18      	ldr	r2, [pc, #96]	; (8007fcc <HAL_DMA_Abort+0x480>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d101      	bne.n	8007f72 <HAL_DMA_Abort+0x426>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e000      	b.n	8007f74 <HAL_DMA_Abort+0x428>
 8007f72:	2300      	movs	r3, #0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d02b      	beq.n	8007fd0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	223f      	movs	r2, #63	; 0x3f
 8007f88:	409a      	lsls	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	609a      	str	r2, [r3, #8]
 8007f8e:	e02a      	b.n	8007fe6 <HAL_DMA_Abort+0x49a>
 8007f90:	40020010 	.word	0x40020010
 8007f94:	40020028 	.word	0x40020028
 8007f98:	40020040 	.word	0x40020040
 8007f9c:	40020058 	.word	0x40020058
 8007fa0:	40020070 	.word	0x40020070
 8007fa4:	40020088 	.word	0x40020088
 8007fa8:	400200a0 	.word	0x400200a0
 8007fac:	400200b8 	.word	0x400200b8
 8007fb0:	40020410 	.word	0x40020410
 8007fb4:	40020428 	.word	0x40020428
 8007fb8:	40020440 	.word	0x40020440
 8007fbc:	40020458 	.word	0x40020458
 8007fc0:	40020470 	.word	0x40020470
 8007fc4:	40020488 	.word	0x40020488
 8007fc8:	400204a0 	.word	0x400204a0
 8007fcc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	2201      	movs	r2, #1
 8007fe0:	409a      	lsls	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a4f      	ldr	r2, [pc, #316]	; (8008128 <HAL_DMA_Abort+0x5dc>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d072      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a4d      	ldr	r2, [pc, #308]	; (800812c <HAL_DMA_Abort+0x5e0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d06d      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a4c      	ldr	r2, [pc, #304]	; (8008130 <HAL_DMA_Abort+0x5e4>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d068      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a4a      	ldr	r2, [pc, #296]	; (8008134 <HAL_DMA_Abort+0x5e8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d063      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a49      	ldr	r2, [pc, #292]	; (8008138 <HAL_DMA_Abort+0x5ec>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d05e      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a47      	ldr	r2, [pc, #284]	; (800813c <HAL_DMA_Abort+0x5f0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d059      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a46      	ldr	r2, [pc, #280]	; (8008140 <HAL_DMA_Abort+0x5f4>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d054      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a44      	ldr	r2, [pc, #272]	; (8008144 <HAL_DMA_Abort+0x5f8>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d04f      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a43      	ldr	r2, [pc, #268]	; (8008148 <HAL_DMA_Abort+0x5fc>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d04a      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a41      	ldr	r2, [pc, #260]	; (800814c <HAL_DMA_Abort+0x600>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d045      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a40      	ldr	r2, [pc, #256]	; (8008150 <HAL_DMA_Abort+0x604>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d040      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a3e      	ldr	r2, [pc, #248]	; (8008154 <HAL_DMA_Abort+0x608>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d03b      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a3d      	ldr	r2, [pc, #244]	; (8008158 <HAL_DMA_Abort+0x60c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d036      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a3b      	ldr	r2, [pc, #236]	; (800815c <HAL_DMA_Abort+0x610>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d031      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a3a      	ldr	r2, [pc, #232]	; (8008160 <HAL_DMA_Abort+0x614>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d02c      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a38      	ldr	r2, [pc, #224]	; (8008164 <HAL_DMA_Abort+0x618>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d027      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a37      	ldr	r2, [pc, #220]	; (8008168 <HAL_DMA_Abort+0x61c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d022      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a35      	ldr	r2, [pc, #212]	; (800816c <HAL_DMA_Abort+0x620>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d01d      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a34      	ldr	r2, [pc, #208]	; (8008170 <HAL_DMA_Abort+0x624>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d018      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a32      	ldr	r2, [pc, #200]	; (8008174 <HAL_DMA_Abort+0x628>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d013      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a31      	ldr	r2, [pc, #196]	; (8008178 <HAL_DMA_Abort+0x62c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00e      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a2f      	ldr	r2, [pc, #188]	; (800817c <HAL_DMA_Abort+0x630>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d009      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a2e      	ldr	r2, [pc, #184]	; (8008180 <HAL_DMA_Abort+0x634>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d004      	beq.n	80080d6 <HAL_DMA_Abort+0x58a>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a2c      	ldr	r2, [pc, #176]	; (8008184 <HAL_DMA_Abort+0x638>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d101      	bne.n	80080da <HAL_DMA_Abort+0x58e>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <HAL_DMA_Abort+0x590>
 80080da:	2300      	movs	r3, #0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d015      	beq.n	800810c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80080e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00c      	beq.n	800810c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008100:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800810a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	40020010 	.word	0x40020010
 800812c:	40020028 	.word	0x40020028
 8008130:	40020040 	.word	0x40020040
 8008134:	40020058 	.word	0x40020058
 8008138:	40020070 	.word	0x40020070
 800813c:	40020088 	.word	0x40020088
 8008140:	400200a0 	.word	0x400200a0
 8008144:	400200b8 	.word	0x400200b8
 8008148:	40020410 	.word	0x40020410
 800814c:	40020428 	.word	0x40020428
 8008150:	40020440 	.word	0x40020440
 8008154:	40020458 	.word	0x40020458
 8008158:	40020470 	.word	0x40020470
 800815c:	40020488 	.word	0x40020488
 8008160:	400204a0 	.word	0x400204a0
 8008164:	400204b8 	.word	0x400204b8
 8008168:	58025408 	.word	0x58025408
 800816c:	5802541c 	.word	0x5802541c
 8008170:	58025430 	.word	0x58025430
 8008174:	58025444 	.word	0x58025444
 8008178:	58025458 	.word	0x58025458
 800817c:	5802546c 	.word	0x5802546c
 8008180:	58025480 	.word	0x58025480
 8008184:	58025494 	.word	0x58025494

08008188 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e237      	b.n	800860a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d004      	beq.n	80081b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2280      	movs	r2, #128	; 0x80
 80081aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e22c      	b.n	800860a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a5c      	ldr	r2, [pc, #368]	; (8008328 <HAL_DMA_Abort_IT+0x1a0>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d04a      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a5b      	ldr	r2, [pc, #364]	; (800832c <HAL_DMA_Abort_IT+0x1a4>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d045      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a59      	ldr	r2, [pc, #356]	; (8008330 <HAL_DMA_Abort_IT+0x1a8>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d040      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a58      	ldr	r2, [pc, #352]	; (8008334 <HAL_DMA_Abort_IT+0x1ac>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d03b      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a56      	ldr	r2, [pc, #344]	; (8008338 <HAL_DMA_Abort_IT+0x1b0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d036      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a55      	ldr	r2, [pc, #340]	; (800833c <HAL_DMA_Abort_IT+0x1b4>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d031      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a53      	ldr	r2, [pc, #332]	; (8008340 <HAL_DMA_Abort_IT+0x1b8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d02c      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a52      	ldr	r2, [pc, #328]	; (8008344 <HAL_DMA_Abort_IT+0x1bc>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d027      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a50      	ldr	r2, [pc, #320]	; (8008348 <HAL_DMA_Abort_IT+0x1c0>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d022      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a4f      	ldr	r2, [pc, #316]	; (800834c <HAL_DMA_Abort_IT+0x1c4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d01d      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a4d      	ldr	r2, [pc, #308]	; (8008350 <HAL_DMA_Abort_IT+0x1c8>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d018      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a4c      	ldr	r2, [pc, #304]	; (8008354 <HAL_DMA_Abort_IT+0x1cc>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d013      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a4a      	ldr	r2, [pc, #296]	; (8008358 <HAL_DMA_Abort_IT+0x1d0>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d00e      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a49      	ldr	r2, [pc, #292]	; (800835c <HAL_DMA_Abort_IT+0x1d4>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d009      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a47      	ldr	r2, [pc, #284]	; (8008360 <HAL_DMA_Abort_IT+0x1d8>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d004      	beq.n	8008250 <HAL_DMA_Abort_IT+0xc8>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a46      	ldr	r2, [pc, #280]	; (8008364 <HAL_DMA_Abort_IT+0x1dc>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d101      	bne.n	8008254 <HAL_DMA_Abort_IT+0xcc>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <HAL_DMA_Abort_IT+0xce>
 8008254:	2300      	movs	r3, #0
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 8086 	beq.w	8008368 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2204      	movs	r2, #4
 8008260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a2f      	ldr	r2, [pc, #188]	; (8008328 <HAL_DMA_Abort_IT+0x1a0>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d04a      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a2e      	ldr	r2, [pc, #184]	; (800832c <HAL_DMA_Abort_IT+0x1a4>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d045      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a2c      	ldr	r2, [pc, #176]	; (8008330 <HAL_DMA_Abort_IT+0x1a8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d040      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a2b      	ldr	r2, [pc, #172]	; (8008334 <HAL_DMA_Abort_IT+0x1ac>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d03b      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a29      	ldr	r2, [pc, #164]	; (8008338 <HAL_DMA_Abort_IT+0x1b0>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d036      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a28      	ldr	r2, [pc, #160]	; (800833c <HAL_DMA_Abort_IT+0x1b4>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d031      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a26      	ldr	r2, [pc, #152]	; (8008340 <HAL_DMA_Abort_IT+0x1b8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d02c      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a25      	ldr	r2, [pc, #148]	; (8008344 <HAL_DMA_Abort_IT+0x1bc>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d027      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a23      	ldr	r2, [pc, #140]	; (8008348 <HAL_DMA_Abort_IT+0x1c0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d022      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a22      	ldr	r2, [pc, #136]	; (800834c <HAL_DMA_Abort_IT+0x1c4>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d01d      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a20      	ldr	r2, [pc, #128]	; (8008350 <HAL_DMA_Abort_IT+0x1c8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d018      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a1f      	ldr	r2, [pc, #124]	; (8008354 <HAL_DMA_Abort_IT+0x1cc>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d013      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1d      	ldr	r2, [pc, #116]	; (8008358 <HAL_DMA_Abort_IT+0x1d0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00e      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1c      	ldr	r2, [pc, #112]	; (800835c <HAL_DMA_Abort_IT+0x1d4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d009      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a1a      	ldr	r2, [pc, #104]	; (8008360 <HAL_DMA_Abort_IT+0x1d8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_DMA_Abort_IT+0x17c>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a19      	ldr	r2, [pc, #100]	; (8008364 <HAL_DMA_Abort_IT+0x1dc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d108      	bne.n	8008316 <HAL_DMA_Abort_IT+0x18e>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0201 	bic.w	r2, r2, #1
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	e178      	b.n	8008608 <HAL_DMA_Abort_IT+0x480>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0201 	bic.w	r2, r2, #1
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	e16f      	b.n	8008608 <HAL_DMA_Abort_IT+0x480>
 8008328:	40020010 	.word	0x40020010
 800832c:	40020028 	.word	0x40020028
 8008330:	40020040 	.word	0x40020040
 8008334:	40020058 	.word	0x40020058
 8008338:	40020070 	.word	0x40020070
 800833c:	40020088 	.word	0x40020088
 8008340:	400200a0 	.word	0x400200a0
 8008344:	400200b8 	.word	0x400200b8
 8008348:	40020410 	.word	0x40020410
 800834c:	40020428 	.word	0x40020428
 8008350:	40020440 	.word	0x40020440
 8008354:	40020458 	.word	0x40020458
 8008358:	40020470 	.word	0x40020470
 800835c:	40020488 	.word	0x40020488
 8008360:	400204a0 	.word	0x400204a0
 8008364:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 020e 	bic.w	r2, r2, #14
 8008376:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a6c      	ldr	r2, [pc, #432]	; (8008530 <HAL_DMA_Abort_IT+0x3a8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d04a      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a6b      	ldr	r2, [pc, #428]	; (8008534 <HAL_DMA_Abort_IT+0x3ac>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d045      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a69      	ldr	r2, [pc, #420]	; (8008538 <HAL_DMA_Abort_IT+0x3b0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d040      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a68      	ldr	r2, [pc, #416]	; (800853c <HAL_DMA_Abort_IT+0x3b4>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d03b      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a66      	ldr	r2, [pc, #408]	; (8008540 <HAL_DMA_Abort_IT+0x3b8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d036      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a65      	ldr	r2, [pc, #404]	; (8008544 <HAL_DMA_Abort_IT+0x3bc>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d031      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a63      	ldr	r2, [pc, #396]	; (8008548 <HAL_DMA_Abort_IT+0x3c0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d02c      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a62      	ldr	r2, [pc, #392]	; (800854c <HAL_DMA_Abort_IT+0x3c4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d027      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a60      	ldr	r2, [pc, #384]	; (8008550 <HAL_DMA_Abort_IT+0x3c8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d022      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a5f      	ldr	r2, [pc, #380]	; (8008554 <HAL_DMA_Abort_IT+0x3cc>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d01d      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a5d      	ldr	r2, [pc, #372]	; (8008558 <HAL_DMA_Abort_IT+0x3d0>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d018      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a5c      	ldr	r2, [pc, #368]	; (800855c <HAL_DMA_Abort_IT+0x3d4>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d013      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a5a      	ldr	r2, [pc, #360]	; (8008560 <HAL_DMA_Abort_IT+0x3d8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00e      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a59      	ldr	r2, [pc, #356]	; (8008564 <HAL_DMA_Abort_IT+0x3dc>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d009      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a57      	ldr	r2, [pc, #348]	; (8008568 <HAL_DMA_Abort_IT+0x3e0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d004      	beq.n	8008418 <HAL_DMA_Abort_IT+0x290>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a56      	ldr	r2, [pc, #344]	; (800856c <HAL_DMA_Abort_IT+0x3e4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d108      	bne.n	800842a <HAL_DMA_Abort_IT+0x2a2>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0201 	bic.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	e007      	b.n	800843a <HAL_DMA_Abort_IT+0x2b2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0201 	bic.w	r2, r2, #1
 8008438:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a3c      	ldr	r2, [pc, #240]	; (8008530 <HAL_DMA_Abort_IT+0x3a8>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d072      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a3a      	ldr	r2, [pc, #232]	; (8008534 <HAL_DMA_Abort_IT+0x3ac>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d06d      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a39      	ldr	r2, [pc, #228]	; (8008538 <HAL_DMA_Abort_IT+0x3b0>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d068      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a37      	ldr	r2, [pc, #220]	; (800853c <HAL_DMA_Abort_IT+0x3b4>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d063      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a36      	ldr	r2, [pc, #216]	; (8008540 <HAL_DMA_Abort_IT+0x3b8>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d05e      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a34      	ldr	r2, [pc, #208]	; (8008544 <HAL_DMA_Abort_IT+0x3bc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d059      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a33      	ldr	r2, [pc, #204]	; (8008548 <HAL_DMA_Abort_IT+0x3c0>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d054      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a31      	ldr	r2, [pc, #196]	; (800854c <HAL_DMA_Abort_IT+0x3c4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d04f      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a30      	ldr	r2, [pc, #192]	; (8008550 <HAL_DMA_Abort_IT+0x3c8>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d04a      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a2e      	ldr	r2, [pc, #184]	; (8008554 <HAL_DMA_Abort_IT+0x3cc>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d045      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a2d      	ldr	r2, [pc, #180]	; (8008558 <HAL_DMA_Abort_IT+0x3d0>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d040      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a2b      	ldr	r2, [pc, #172]	; (800855c <HAL_DMA_Abort_IT+0x3d4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d03b      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a2a      	ldr	r2, [pc, #168]	; (8008560 <HAL_DMA_Abort_IT+0x3d8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d036      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a28      	ldr	r2, [pc, #160]	; (8008564 <HAL_DMA_Abort_IT+0x3dc>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d031      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a27      	ldr	r2, [pc, #156]	; (8008568 <HAL_DMA_Abort_IT+0x3e0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d02c      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a25      	ldr	r2, [pc, #148]	; (800856c <HAL_DMA_Abort_IT+0x3e4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d027      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a24      	ldr	r2, [pc, #144]	; (8008570 <HAL_DMA_Abort_IT+0x3e8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d022      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a22      	ldr	r2, [pc, #136]	; (8008574 <HAL_DMA_Abort_IT+0x3ec>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d01d      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a21      	ldr	r2, [pc, #132]	; (8008578 <HAL_DMA_Abort_IT+0x3f0>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d018      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a1f      	ldr	r2, [pc, #124]	; (800857c <HAL_DMA_Abort_IT+0x3f4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d013      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a1e      	ldr	r2, [pc, #120]	; (8008580 <HAL_DMA_Abort_IT+0x3f8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00e      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1c      	ldr	r2, [pc, #112]	; (8008584 <HAL_DMA_Abort_IT+0x3fc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d009      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a1b      	ldr	r2, [pc, #108]	; (8008588 <HAL_DMA_Abort_IT+0x400>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d004      	beq.n	800852a <HAL_DMA_Abort_IT+0x3a2>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a19      	ldr	r2, [pc, #100]	; (800858c <HAL_DMA_Abort_IT+0x404>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d132      	bne.n	8008590 <HAL_DMA_Abort_IT+0x408>
 800852a:	2301      	movs	r3, #1
 800852c:	e031      	b.n	8008592 <HAL_DMA_Abort_IT+0x40a>
 800852e:	bf00      	nop
 8008530:	40020010 	.word	0x40020010
 8008534:	40020028 	.word	0x40020028
 8008538:	40020040 	.word	0x40020040
 800853c:	40020058 	.word	0x40020058
 8008540:	40020070 	.word	0x40020070
 8008544:	40020088 	.word	0x40020088
 8008548:	400200a0 	.word	0x400200a0
 800854c:	400200b8 	.word	0x400200b8
 8008550:	40020410 	.word	0x40020410
 8008554:	40020428 	.word	0x40020428
 8008558:	40020440 	.word	0x40020440
 800855c:	40020458 	.word	0x40020458
 8008560:	40020470 	.word	0x40020470
 8008564:	40020488 	.word	0x40020488
 8008568:	400204a0 	.word	0x400204a0
 800856c:	400204b8 	.word	0x400204b8
 8008570:	58025408 	.word	0x58025408
 8008574:	5802541c 	.word	0x5802541c
 8008578:	58025430 	.word	0x58025430
 800857c:	58025444 	.word	0x58025444
 8008580:	58025458 	.word	0x58025458
 8008584:	5802546c 	.word	0x5802546c
 8008588:	58025480 	.word	0x58025480
 800858c:	58025494 	.word	0x58025494
 8008590:	2300      	movs	r3, #0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d028      	beq.n	80085e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b0:	f003 031f 	and.w	r3, r3, #31
 80085b4:	2201      	movs	r2, #1
 80085b6:	409a      	lsls	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80085c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00c      	beq.n	80085e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80085e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop

08008614 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08a      	sub	sp, #40	; 0x28
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008620:	4b67      	ldr	r3, [pc, #412]	; (80087c0 <HAL_DMA_IRQHandler+0x1ac>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a67      	ldr	r2, [pc, #412]	; (80087c4 <HAL_DMA_IRQHandler+0x1b0>)
 8008626:	fba2 2303 	umull	r2, r3, r2, r3
 800862a:	0a9b      	lsrs	r3, r3, #10
 800862c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008632:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008638:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a5f      	ldr	r2, [pc, #380]	; (80087c8 <HAL_DMA_IRQHandler+0x1b4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d04a      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a5d      	ldr	r2, [pc, #372]	; (80087cc <HAL_DMA_IRQHandler+0x1b8>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d045      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a5c      	ldr	r2, [pc, #368]	; (80087d0 <HAL_DMA_IRQHandler+0x1bc>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d040      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a5a      	ldr	r2, [pc, #360]	; (80087d4 <HAL_DMA_IRQHandler+0x1c0>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d03b      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a59      	ldr	r2, [pc, #356]	; (80087d8 <HAL_DMA_IRQHandler+0x1c4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d036      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a57      	ldr	r2, [pc, #348]	; (80087dc <HAL_DMA_IRQHandler+0x1c8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d031      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a56      	ldr	r2, [pc, #344]	; (80087e0 <HAL_DMA_IRQHandler+0x1cc>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d02c      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a54      	ldr	r2, [pc, #336]	; (80087e4 <HAL_DMA_IRQHandler+0x1d0>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d027      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a53      	ldr	r2, [pc, #332]	; (80087e8 <HAL_DMA_IRQHandler+0x1d4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d022      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a51      	ldr	r2, [pc, #324]	; (80087ec <HAL_DMA_IRQHandler+0x1d8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01d      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a50      	ldr	r2, [pc, #320]	; (80087f0 <HAL_DMA_IRQHandler+0x1dc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d018      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a4e      	ldr	r2, [pc, #312]	; (80087f4 <HAL_DMA_IRQHandler+0x1e0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d013      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a4d      	ldr	r2, [pc, #308]	; (80087f8 <HAL_DMA_IRQHandler+0x1e4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00e      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a4b      	ldr	r2, [pc, #300]	; (80087fc <HAL_DMA_IRQHandler+0x1e8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d009      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a4a      	ldr	r2, [pc, #296]	; (8008800 <HAL_DMA_IRQHandler+0x1ec>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d004      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xd2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a48      	ldr	r2, [pc, #288]	; (8008804 <HAL_DMA_IRQHandler+0x1f0>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d101      	bne.n	80086ea <HAL_DMA_IRQHandler+0xd6>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <HAL_DMA_IRQHandler+0xd8>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 842b 	beq.w	8008f48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f6:	f003 031f 	and.w	r3, r3, #31
 80086fa:	2208      	movs	r2, #8
 80086fc:	409a      	lsls	r2, r3
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	4013      	ands	r3, r2
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 80a2 	beq.w	800884c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a2e      	ldr	r2, [pc, #184]	; (80087c8 <HAL_DMA_IRQHandler+0x1b4>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d04a      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a2d      	ldr	r2, [pc, #180]	; (80087cc <HAL_DMA_IRQHandler+0x1b8>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d045      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a2b      	ldr	r2, [pc, #172]	; (80087d0 <HAL_DMA_IRQHandler+0x1bc>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d040      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a2a      	ldr	r2, [pc, #168]	; (80087d4 <HAL_DMA_IRQHandler+0x1c0>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d03b      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a28      	ldr	r2, [pc, #160]	; (80087d8 <HAL_DMA_IRQHandler+0x1c4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d036      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a27      	ldr	r2, [pc, #156]	; (80087dc <HAL_DMA_IRQHandler+0x1c8>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d031      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a25      	ldr	r2, [pc, #148]	; (80087e0 <HAL_DMA_IRQHandler+0x1cc>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d02c      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a24      	ldr	r2, [pc, #144]	; (80087e4 <HAL_DMA_IRQHandler+0x1d0>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d027      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a22      	ldr	r2, [pc, #136]	; (80087e8 <HAL_DMA_IRQHandler+0x1d4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d022      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a21      	ldr	r2, [pc, #132]	; (80087ec <HAL_DMA_IRQHandler+0x1d8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d01d      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a1f      	ldr	r2, [pc, #124]	; (80087f0 <HAL_DMA_IRQHandler+0x1dc>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d018      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <HAL_DMA_IRQHandler+0x1e0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d013      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a1c      	ldr	r2, [pc, #112]	; (80087f8 <HAL_DMA_IRQHandler+0x1e4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00e      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a1b      	ldr	r2, [pc, #108]	; (80087fc <HAL_DMA_IRQHandler+0x1e8>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d009      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a19      	ldr	r2, [pc, #100]	; (8008800 <HAL_DMA_IRQHandler+0x1ec>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d004      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x194>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a18      	ldr	r2, [pc, #96]	; (8008804 <HAL_DMA_IRQHandler+0x1f0>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d12f      	bne.n	8008808 <HAL_DMA_IRQHandler+0x1f4>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bf14      	ite	ne
 80087b6:	2301      	movne	r3, #1
 80087b8:	2300      	moveq	r3, #0
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	e02e      	b.n	800881c <HAL_DMA_IRQHandler+0x208>
 80087be:	bf00      	nop
 80087c0:	24000004 	.word	0x24000004
 80087c4:	1b4e81b5 	.word	0x1b4e81b5
 80087c8:	40020010 	.word	0x40020010
 80087cc:	40020028 	.word	0x40020028
 80087d0:	40020040 	.word	0x40020040
 80087d4:	40020058 	.word	0x40020058
 80087d8:	40020070 	.word	0x40020070
 80087dc:	40020088 	.word	0x40020088
 80087e0:	400200a0 	.word	0x400200a0
 80087e4:	400200b8 	.word	0x400200b8
 80087e8:	40020410 	.word	0x40020410
 80087ec:	40020428 	.word	0x40020428
 80087f0:	40020440 	.word	0x40020440
 80087f4:	40020458 	.word	0x40020458
 80087f8:	40020470 	.word	0x40020470
 80087fc:	40020488 	.word	0x40020488
 8008800:	400204a0 	.word	0x400204a0
 8008804:	400204b8 	.word	0x400204b8
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0308 	and.w	r3, r3, #8
 8008812:	2b00      	cmp	r3, #0
 8008814:	bf14      	ite	ne
 8008816:	2301      	movne	r3, #1
 8008818:	2300      	moveq	r3, #0
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	d015      	beq.n	800884c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0204 	bic.w	r2, r2, #4
 800882e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008834:	f003 031f 	and.w	r3, r3, #31
 8008838:	2208      	movs	r2, #8
 800883a:	409a      	lsls	r2, r3
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008844:	f043 0201 	orr.w	r2, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008850:	f003 031f 	and.w	r3, r3, #31
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	fa22 f303 	lsr.w	r3, r2, r3
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d06e      	beq.n	8008940 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a69      	ldr	r2, [pc, #420]	; (8008a0c <HAL_DMA_IRQHandler+0x3f8>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d04a      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a67      	ldr	r2, [pc, #412]	; (8008a10 <HAL_DMA_IRQHandler+0x3fc>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d045      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a66      	ldr	r2, [pc, #408]	; (8008a14 <HAL_DMA_IRQHandler+0x400>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d040      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a64      	ldr	r2, [pc, #400]	; (8008a18 <HAL_DMA_IRQHandler+0x404>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d03b      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a63      	ldr	r2, [pc, #396]	; (8008a1c <HAL_DMA_IRQHandler+0x408>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d036      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a61      	ldr	r2, [pc, #388]	; (8008a20 <HAL_DMA_IRQHandler+0x40c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d031      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a60      	ldr	r2, [pc, #384]	; (8008a24 <HAL_DMA_IRQHandler+0x410>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d02c      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a5e      	ldr	r2, [pc, #376]	; (8008a28 <HAL_DMA_IRQHandler+0x414>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d027      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a5d      	ldr	r2, [pc, #372]	; (8008a2c <HAL_DMA_IRQHandler+0x418>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d022      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a5b      	ldr	r2, [pc, #364]	; (8008a30 <HAL_DMA_IRQHandler+0x41c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d01d      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a5a      	ldr	r2, [pc, #360]	; (8008a34 <HAL_DMA_IRQHandler+0x420>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d018      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a58      	ldr	r2, [pc, #352]	; (8008a38 <HAL_DMA_IRQHandler+0x424>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d013      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a57      	ldr	r2, [pc, #348]	; (8008a3c <HAL_DMA_IRQHandler+0x428>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00e      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a55      	ldr	r2, [pc, #340]	; (8008a40 <HAL_DMA_IRQHandler+0x42c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d009      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a54      	ldr	r2, [pc, #336]	; (8008a44 <HAL_DMA_IRQHandler+0x430>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d004      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2ee>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a52      	ldr	r2, [pc, #328]	; (8008a48 <HAL_DMA_IRQHandler+0x434>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d10a      	bne.n	8008918 <HAL_DMA_IRQHandler+0x304>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800890c:	2b00      	cmp	r3, #0
 800890e:	bf14      	ite	ne
 8008910:	2301      	movne	r3, #1
 8008912:	2300      	moveq	r3, #0
 8008914:	b2db      	uxtb	r3, r3
 8008916:	e003      	b.n	8008920 <HAL_DMA_IRQHandler+0x30c>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2300      	movs	r3, #0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00d      	beq.n	8008940 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008928:	f003 031f 	and.w	r3, r3, #31
 800892c:	2201      	movs	r2, #1
 800892e:	409a      	lsls	r2, r3
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008938:	f043 0202 	orr.w	r2, r3, #2
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008944:	f003 031f 	and.w	r3, r3, #31
 8008948:	2204      	movs	r2, #4
 800894a:	409a      	lsls	r2, r3
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	4013      	ands	r3, r2
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 808f 	beq.w	8008a74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a2c      	ldr	r2, [pc, #176]	; (8008a0c <HAL_DMA_IRQHandler+0x3f8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d04a      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a2a      	ldr	r2, [pc, #168]	; (8008a10 <HAL_DMA_IRQHandler+0x3fc>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d045      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a29      	ldr	r2, [pc, #164]	; (8008a14 <HAL_DMA_IRQHandler+0x400>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d040      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a27      	ldr	r2, [pc, #156]	; (8008a18 <HAL_DMA_IRQHandler+0x404>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d03b      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a26      	ldr	r2, [pc, #152]	; (8008a1c <HAL_DMA_IRQHandler+0x408>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d036      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a24      	ldr	r2, [pc, #144]	; (8008a20 <HAL_DMA_IRQHandler+0x40c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d031      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a23      	ldr	r2, [pc, #140]	; (8008a24 <HAL_DMA_IRQHandler+0x410>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d02c      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a21      	ldr	r2, [pc, #132]	; (8008a28 <HAL_DMA_IRQHandler+0x414>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d027      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a20      	ldr	r2, [pc, #128]	; (8008a2c <HAL_DMA_IRQHandler+0x418>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d022      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1e      	ldr	r2, [pc, #120]	; (8008a30 <HAL_DMA_IRQHandler+0x41c>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d01d      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <HAL_DMA_IRQHandler+0x420>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d018      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a1b      	ldr	r2, [pc, #108]	; (8008a38 <HAL_DMA_IRQHandler+0x424>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d013      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a1a      	ldr	r2, [pc, #104]	; (8008a3c <HAL_DMA_IRQHandler+0x428>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00e      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a18      	ldr	r2, [pc, #96]	; (8008a40 <HAL_DMA_IRQHandler+0x42c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d009      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a17      	ldr	r2, [pc, #92]	; (8008a44 <HAL_DMA_IRQHandler+0x430>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d004      	beq.n	80089f6 <HAL_DMA_IRQHandler+0x3e2>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a15      	ldr	r2, [pc, #84]	; (8008a48 <HAL_DMA_IRQHandler+0x434>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d12a      	bne.n	8008a4c <HAL_DMA_IRQHandler+0x438>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	bf14      	ite	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	2300      	moveq	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	e023      	b.n	8008a54 <HAL_DMA_IRQHandler+0x440>
 8008a0c:	40020010 	.word	0x40020010
 8008a10:	40020028 	.word	0x40020028
 8008a14:	40020040 	.word	0x40020040
 8008a18:	40020058 	.word	0x40020058
 8008a1c:	40020070 	.word	0x40020070
 8008a20:	40020088 	.word	0x40020088
 8008a24:	400200a0 	.word	0x400200a0
 8008a28:	400200b8 	.word	0x400200b8
 8008a2c:	40020410 	.word	0x40020410
 8008a30:	40020428 	.word	0x40020428
 8008a34:	40020440 	.word	0x40020440
 8008a38:	40020458 	.word	0x40020458
 8008a3c:	40020470 	.word	0x40020470
 8008a40:	40020488 	.word	0x40020488
 8008a44:	400204a0 	.word	0x400204a0
 8008a48:	400204b8 	.word	0x400204b8
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2300      	movs	r3, #0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00d      	beq.n	8008a74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a5c:	f003 031f 	and.w	r3, r3, #31
 8008a60:	2204      	movs	r2, #4
 8008a62:	409a      	lsls	r2, r3
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6c:	f043 0204 	orr.w	r2, r3, #4
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a78:	f003 031f 	and.w	r3, r3, #31
 8008a7c:	2210      	movs	r2, #16
 8008a7e:	409a      	lsls	r2, r3
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	4013      	ands	r3, r2
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 80a6 	beq.w	8008bd6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a85      	ldr	r2, [pc, #532]	; (8008ca4 <HAL_DMA_IRQHandler+0x690>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d04a      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a83      	ldr	r2, [pc, #524]	; (8008ca8 <HAL_DMA_IRQHandler+0x694>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d045      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a82      	ldr	r2, [pc, #520]	; (8008cac <HAL_DMA_IRQHandler+0x698>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d040      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a80      	ldr	r2, [pc, #512]	; (8008cb0 <HAL_DMA_IRQHandler+0x69c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d03b      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a7f      	ldr	r2, [pc, #508]	; (8008cb4 <HAL_DMA_IRQHandler+0x6a0>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d036      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a7d      	ldr	r2, [pc, #500]	; (8008cb8 <HAL_DMA_IRQHandler+0x6a4>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d031      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a7c      	ldr	r2, [pc, #496]	; (8008cbc <HAL_DMA_IRQHandler+0x6a8>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d02c      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a7a      	ldr	r2, [pc, #488]	; (8008cc0 <HAL_DMA_IRQHandler+0x6ac>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d027      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a79      	ldr	r2, [pc, #484]	; (8008cc4 <HAL_DMA_IRQHandler+0x6b0>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d022      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a77      	ldr	r2, [pc, #476]	; (8008cc8 <HAL_DMA_IRQHandler+0x6b4>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d01d      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a76      	ldr	r2, [pc, #472]	; (8008ccc <HAL_DMA_IRQHandler+0x6b8>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d018      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a74      	ldr	r2, [pc, #464]	; (8008cd0 <HAL_DMA_IRQHandler+0x6bc>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d013      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a73      	ldr	r2, [pc, #460]	; (8008cd4 <HAL_DMA_IRQHandler+0x6c0>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d00e      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a71      	ldr	r2, [pc, #452]	; (8008cd8 <HAL_DMA_IRQHandler+0x6c4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d009      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a70      	ldr	r2, [pc, #448]	; (8008cdc <HAL_DMA_IRQHandler+0x6c8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d004      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x516>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a6e      	ldr	r2, [pc, #440]	; (8008ce0 <HAL_DMA_IRQHandler+0x6cc>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d10a      	bne.n	8008b40 <HAL_DMA_IRQHandler+0x52c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0308 	and.w	r3, r3, #8
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	bf14      	ite	ne
 8008b38:	2301      	movne	r3, #1
 8008b3a:	2300      	moveq	r3, #0
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	e009      	b.n	8008b54 <HAL_DMA_IRQHandler+0x540>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	bf14      	ite	ne
 8008b4e:	2301      	movne	r3, #1
 8008b50:	2300      	moveq	r3, #0
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d03e      	beq.n	8008bd6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b5c:	f003 031f 	and.w	r3, r3, #31
 8008b60:	2210      	movs	r2, #16
 8008b62:	409a      	lsls	r2, r3
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d018      	beq.n	8008ba8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d108      	bne.n	8008b96 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d024      	beq.n	8008bd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	4798      	blx	r3
 8008b94:	e01f      	b.n	8008bd6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d01b      	beq.n	8008bd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	4798      	blx	r3
 8008ba6:	e016      	b.n	8008bd6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d107      	bne.n	8008bc6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 0208 	bic.w	r2, r2, #8
 8008bc4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bda:	f003 031f 	and.w	r3, r3, #31
 8008bde:	2220      	movs	r2, #32
 8008be0:	409a      	lsls	r2, r3
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	4013      	ands	r3, r2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 8110 	beq.w	8008e0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a2c      	ldr	r2, [pc, #176]	; (8008ca4 <HAL_DMA_IRQHandler+0x690>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d04a      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a2b      	ldr	r2, [pc, #172]	; (8008ca8 <HAL_DMA_IRQHandler+0x694>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d045      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a29      	ldr	r2, [pc, #164]	; (8008cac <HAL_DMA_IRQHandler+0x698>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d040      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a28      	ldr	r2, [pc, #160]	; (8008cb0 <HAL_DMA_IRQHandler+0x69c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d03b      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a26      	ldr	r2, [pc, #152]	; (8008cb4 <HAL_DMA_IRQHandler+0x6a0>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d036      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a25      	ldr	r2, [pc, #148]	; (8008cb8 <HAL_DMA_IRQHandler+0x6a4>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d031      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a23      	ldr	r2, [pc, #140]	; (8008cbc <HAL_DMA_IRQHandler+0x6a8>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d02c      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a22      	ldr	r2, [pc, #136]	; (8008cc0 <HAL_DMA_IRQHandler+0x6ac>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d027      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a20      	ldr	r2, [pc, #128]	; (8008cc4 <HAL_DMA_IRQHandler+0x6b0>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d022      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1f      	ldr	r2, [pc, #124]	; (8008cc8 <HAL_DMA_IRQHandler+0x6b4>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d01d      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1d      	ldr	r2, [pc, #116]	; (8008ccc <HAL_DMA_IRQHandler+0x6b8>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d018      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1c      	ldr	r2, [pc, #112]	; (8008cd0 <HAL_DMA_IRQHandler+0x6bc>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d013      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a1a      	ldr	r2, [pc, #104]	; (8008cd4 <HAL_DMA_IRQHandler+0x6c0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00e      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a19      	ldr	r2, [pc, #100]	; (8008cd8 <HAL_DMA_IRQHandler+0x6c4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d009      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a17      	ldr	r2, [pc, #92]	; (8008cdc <HAL_DMA_IRQHandler+0x6c8>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d004      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x678>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a16      	ldr	r2, [pc, #88]	; (8008ce0 <HAL_DMA_IRQHandler+0x6cc>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d12b      	bne.n	8008ce4 <HAL_DMA_IRQHandler+0x6d0>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0310 	and.w	r3, r3, #16
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bf14      	ite	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	2300      	moveq	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	e02a      	b.n	8008cf8 <HAL_DMA_IRQHandler+0x6e4>
 8008ca2:	bf00      	nop
 8008ca4:	40020010 	.word	0x40020010
 8008ca8:	40020028 	.word	0x40020028
 8008cac:	40020040 	.word	0x40020040
 8008cb0:	40020058 	.word	0x40020058
 8008cb4:	40020070 	.word	0x40020070
 8008cb8:	40020088 	.word	0x40020088
 8008cbc:	400200a0 	.word	0x400200a0
 8008cc0:	400200b8 	.word	0x400200b8
 8008cc4:	40020410 	.word	0x40020410
 8008cc8:	40020428 	.word	0x40020428
 8008ccc:	40020440 	.word	0x40020440
 8008cd0:	40020458 	.word	0x40020458
 8008cd4:	40020470 	.word	0x40020470
 8008cd8:	40020488 	.word	0x40020488
 8008cdc:	400204a0 	.word	0x400204a0
 8008ce0:	400204b8 	.word	0x400204b8
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bf14      	ite	ne
 8008cf2:	2301      	movne	r3, #1
 8008cf4:	2300      	moveq	r3, #0
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 8087 	beq.w	8008e0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d02:	f003 031f 	and.w	r3, r3, #31
 8008d06:	2220      	movs	r2, #32
 8008d08:	409a      	lsls	r2, r3
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d139      	bne.n	8008d8e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0216 	bic.w	r2, r2, #22
 8008d28:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	695a      	ldr	r2, [r3, #20]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d38:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d103      	bne.n	8008d4a <HAL_DMA_IRQHandler+0x736>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d007      	beq.n	8008d5a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0208 	bic.w	r2, r2, #8
 8008d58:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	223f      	movs	r2, #63	; 0x3f
 8008d64:	409a      	lsls	r2, r3
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 834a 	beq.w	8009418 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	4798      	blx	r3
          }
          return;
 8008d8c:	e344      	b.n	8009418 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d018      	beq.n	8008dce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d108      	bne.n	8008dbc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d02c      	beq.n	8008e0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	4798      	blx	r3
 8008dba:	e027      	b.n	8008e0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d023      	beq.n	8008e0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	4798      	blx	r3
 8008dcc:	e01e      	b.n	8008e0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10f      	bne.n	8008dfc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 0210 	bic.w	r2, r2, #16
 8008dea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 8306 	beq.w	8009422 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 8088 	beq.w	8008f34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2204      	movs	r2, #4
 8008e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a7a      	ldr	r2, [pc, #488]	; (800901c <HAL_DMA_IRQHandler+0xa08>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d04a      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a79      	ldr	r2, [pc, #484]	; (8009020 <HAL_DMA_IRQHandler+0xa0c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d045      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a77      	ldr	r2, [pc, #476]	; (8009024 <HAL_DMA_IRQHandler+0xa10>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d040      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a76      	ldr	r2, [pc, #472]	; (8009028 <HAL_DMA_IRQHandler+0xa14>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d03b      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a74      	ldr	r2, [pc, #464]	; (800902c <HAL_DMA_IRQHandler+0xa18>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d036      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a73      	ldr	r2, [pc, #460]	; (8009030 <HAL_DMA_IRQHandler+0xa1c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d031      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a71      	ldr	r2, [pc, #452]	; (8009034 <HAL_DMA_IRQHandler+0xa20>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d02c      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a70      	ldr	r2, [pc, #448]	; (8009038 <HAL_DMA_IRQHandler+0xa24>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d027      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a6e      	ldr	r2, [pc, #440]	; (800903c <HAL_DMA_IRQHandler+0xa28>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d022      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a6d      	ldr	r2, [pc, #436]	; (8009040 <HAL_DMA_IRQHandler+0xa2c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d01d      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a6b      	ldr	r2, [pc, #428]	; (8009044 <HAL_DMA_IRQHandler+0xa30>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d018      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a6a      	ldr	r2, [pc, #424]	; (8009048 <HAL_DMA_IRQHandler+0xa34>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d013      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a68      	ldr	r2, [pc, #416]	; (800904c <HAL_DMA_IRQHandler+0xa38>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d00e      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a67      	ldr	r2, [pc, #412]	; (8009050 <HAL_DMA_IRQHandler+0xa3c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d009      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a65      	ldr	r2, [pc, #404]	; (8009054 <HAL_DMA_IRQHandler+0xa40>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d004      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x8b8>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a64      	ldr	r2, [pc, #400]	; (8009058 <HAL_DMA_IRQHandler+0xa44>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d108      	bne.n	8008ede <HAL_DMA_IRQHandler+0x8ca>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0201 	bic.w	r2, r2, #1
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	e007      	b.n	8008eee <HAL_DMA_IRQHandler+0x8da>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0201 	bic.w	r2, r2, #1
 8008eec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d307      	bcc.n	8008f0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1f2      	bne.n	8008eee <HAL_DMA_IRQHandler+0x8da>
 8008f08:	e000      	b.n	8008f0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008f0a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008f22:	e003      	b.n	8008f2c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 8272 	beq.w	8009422 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	4798      	blx	r3
 8008f46:	e26c      	b.n	8009422 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a43      	ldr	r2, [pc, #268]	; (800905c <HAL_DMA_IRQHandler+0xa48>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d022      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x984>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a42      	ldr	r2, [pc, #264]	; (8009060 <HAL_DMA_IRQHandler+0xa4c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d01d      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x984>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a40      	ldr	r2, [pc, #256]	; (8009064 <HAL_DMA_IRQHandler+0xa50>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d018      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x984>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a3f      	ldr	r2, [pc, #252]	; (8009068 <HAL_DMA_IRQHandler+0xa54>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d013      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x984>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a3d      	ldr	r2, [pc, #244]	; (800906c <HAL_DMA_IRQHandler+0xa58>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00e      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x984>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a3c      	ldr	r2, [pc, #240]	; (8009070 <HAL_DMA_IRQHandler+0xa5c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d009      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x984>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a3a      	ldr	r2, [pc, #232]	; (8009074 <HAL_DMA_IRQHandler+0xa60>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d004      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x984>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a39      	ldr	r2, [pc, #228]	; (8009078 <HAL_DMA_IRQHandler+0xa64>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d101      	bne.n	8008f9c <HAL_DMA_IRQHandler+0x988>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <HAL_DMA_IRQHandler+0x98a>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 823f 	beq.w	8009422 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	2204      	movs	r2, #4
 8008fb6:	409a      	lsls	r2, r3
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 80cd 	beq.w	800915c <HAL_DMA_IRQHandler+0xb48>
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 80c7 	beq.w	800915c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd2:	f003 031f 	and.w	r3, r3, #31
 8008fd6:	2204      	movs	r2, #4
 8008fd8:	409a      	lsls	r2, r3
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d049      	beq.n	800907c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d109      	bne.n	8009006 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 8210 	beq.w	800941c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009004:	e20a      	b.n	800941c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 8206 	beq.w	800941c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009018:	e200      	b.n	800941c <HAL_DMA_IRQHandler+0xe08>
 800901a:	bf00      	nop
 800901c:	40020010 	.word	0x40020010
 8009020:	40020028 	.word	0x40020028
 8009024:	40020040 	.word	0x40020040
 8009028:	40020058 	.word	0x40020058
 800902c:	40020070 	.word	0x40020070
 8009030:	40020088 	.word	0x40020088
 8009034:	400200a0 	.word	0x400200a0
 8009038:	400200b8 	.word	0x400200b8
 800903c:	40020410 	.word	0x40020410
 8009040:	40020428 	.word	0x40020428
 8009044:	40020440 	.word	0x40020440
 8009048:	40020458 	.word	0x40020458
 800904c:	40020470 	.word	0x40020470
 8009050:	40020488 	.word	0x40020488
 8009054:	400204a0 	.word	0x400204a0
 8009058:	400204b8 	.word	0x400204b8
 800905c:	58025408 	.word	0x58025408
 8009060:	5802541c 	.word	0x5802541c
 8009064:	58025430 	.word	0x58025430
 8009068:	58025444 	.word	0x58025444
 800906c:	58025458 	.word	0x58025458
 8009070:	5802546c 	.word	0x5802546c
 8009074:	58025480 	.word	0x58025480
 8009078:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f003 0320 	and.w	r3, r3, #32
 8009082:	2b00      	cmp	r3, #0
 8009084:	d160      	bne.n	8009148 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a7f      	ldr	r2, [pc, #508]	; (8009288 <HAL_DMA_IRQHandler+0xc74>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d04a      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a7d      	ldr	r2, [pc, #500]	; (800928c <HAL_DMA_IRQHandler+0xc78>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d045      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a7c      	ldr	r2, [pc, #496]	; (8009290 <HAL_DMA_IRQHandler+0xc7c>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d040      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a7a      	ldr	r2, [pc, #488]	; (8009294 <HAL_DMA_IRQHandler+0xc80>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d03b      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a79      	ldr	r2, [pc, #484]	; (8009298 <HAL_DMA_IRQHandler+0xc84>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d036      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a77      	ldr	r2, [pc, #476]	; (800929c <HAL_DMA_IRQHandler+0xc88>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d031      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a76      	ldr	r2, [pc, #472]	; (80092a0 <HAL_DMA_IRQHandler+0xc8c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d02c      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a74      	ldr	r2, [pc, #464]	; (80092a4 <HAL_DMA_IRQHandler+0xc90>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d027      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a73      	ldr	r2, [pc, #460]	; (80092a8 <HAL_DMA_IRQHandler+0xc94>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d022      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a71      	ldr	r2, [pc, #452]	; (80092ac <HAL_DMA_IRQHandler+0xc98>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d01d      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a70      	ldr	r2, [pc, #448]	; (80092b0 <HAL_DMA_IRQHandler+0xc9c>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d018      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a6e      	ldr	r2, [pc, #440]	; (80092b4 <HAL_DMA_IRQHandler+0xca0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d013      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a6d      	ldr	r2, [pc, #436]	; (80092b8 <HAL_DMA_IRQHandler+0xca4>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00e      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a6b      	ldr	r2, [pc, #428]	; (80092bc <HAL_DMA_IRQHandler+0xca8>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d009      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a6a      	ldr	r2, [pc, #424]	; (80092c0 <HAL_DMA_IRQHandler+0xcac>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d004      	beq.n	8009126 <HAL_DMA_IRQHandler+0xb12>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a68      	ldr	r2, [pc, #416]	; (80092c4 <HAL_DMA_IRQHandler+0xcb0>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d108      	bne.n	8009138 <HAL_DMA_IRQHandler+0xb24>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0208 	bic.w	r2, r2, #8
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	e007      	b.n	8009148 <HAL_DMA_IRQHandler+0xb34>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f022 0204 	bic.w	r2, r2, #4
 8009146:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 8165 	beq.w	800941c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800915a:	e15f      	b.n	800941c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009160:	f003 031f 	and.w	r3, r3, #31
 8009164:	2202      	movs	r2, #2
 8009166:	409a      	lsls	r2, r3
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	4013      	ands	r3, r2
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 80c5 	beq.w	80092fc <HAL_DMA_IRQHandler+0xce8>
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 80bf 	beq.w	80092fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009182:	f003 031f 	and.w	r3, r3, #31
 8009186:	2202      	movs	r2, #2
 8009188:	409a      	lsls	r2, r3
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d018      	beq.n	80091ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 813a 	beq.w	8009420 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091b4:	e134      	b.n	8009420 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 8130 	beq.w	8009420 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091c8:	e12a      	b.n	8009420 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f003 0320 	and.w	r3, r3, #32
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f040 8089 	bne.w	80092e8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a2b      	ldr	r2, [pc, #172]	; (8009288 <HAL_DMA_IRQHandler+0xc74>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d04a      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a29      	ldr	r2, [pc, #164]	; (800928c <HAL_DMA_IRQHandler+0xc78>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d045      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a28      	ldr	r2, [pc, #160]	; (8009290 <HAL_DMA_IRQHandler+0xc7c>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d040      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a26      	ldr	r2, [pc, #152]	; (8009294 <HAL_DMA_IRQHandler+0xc80>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d03b      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a25      	ldr	r2, [pc, #148]	; (8009298 <HAL_DMA_IRQHandler+0xc84>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d036      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a23      	ldr	r2, [pc, #140]	; (800929c <HAL_DMA_IRQHandler+0xc88>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d031      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a22      	ldr	r2, [pc, #136]	; (80092a0 <HAL_DMA_IRQHandler+0xc8c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d02c      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a20      	ldr	r2, [pc, #128]	; (80092a4 <HAL_DMA_IRQHandler+0xc90>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d027      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a1f      	ldr	r2, [pc, #124]	; (80092a8 <HAL_DMA_IRQHandler+0xc94>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d022      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a1d      	ldr	r2, [pc, #116]	; (80092ac <HAL_DMA_IRQHandler+0xc98>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d01d      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a1c      	ldr	r2, [pc, #112]	; (80092b0 <HAL_DMA_IRQHandler+0xc9c>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d018      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a1a      	ldr	r2, [pc, #104]	; (80092b4 <HAL_DMA_IRQHandler+0xca0>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d013      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a19      	ldr	r2, [pc, #100]	; (80092b8 <HAL_DMA_IRQHandler+0xca4>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d00e      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a17      	ldr	r2, [pc, #92]	; (80092bc <HAL_DMA_IRQHandler+0xca8>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d009      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a16      	ldr	r2, [pc, #88]	; (80092c0 <HAL_DMA_IRQHandler+0xcac>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d004      	beq.n	8009276 <HAL_DMA_IRQHandler+0xc62>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a14      	ldr	r2, [pc, #80]	; (80092c4 <HAL_DMA_IRQHandler+0xcb0>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d128      	bne.n	80092c8 <HAL_DMA_IRQHandler+0xcb4>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0214 	bic.w	r2, r2, #20
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	e027      	b.n	80092d8 <HAL_DMA_IRQHandler+0xcc4>
 8009288:	40020010 	.word	0x40020010
 800928c:	40020028 	.word	0x40020028
 8009290:	40020040 	.word	0x40020040
 8009294:	40020058 	.word	0x40020058
 8009298:	40020070 	.word	0x40020070
 800929c:	40020088 	.word	0x40020088
 80092a0:	400200a0 	.word	0x400200a0
 80092a4:	400200b8 	.word	0x400200b8
 80092a8:	40020410 	.word	0x40020410
 80092ac:	40020428 	.word	0x40020428
 80092b0:	40020440 	.word	0x40020440
 80092b4:	40020458 	.word	0x40020458
 80092b8:	40020470 	.word	0x40020470
 80092bc:	40020488 	.word	0x40020488
 80092c0:	400204a0 	.word	0x400204a0
 80092c4:	400204b8 	.word	0x400204b8
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 020a 	bic.w	r2, r2, #10
 80092d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 8097 	beq.w	8009420 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092fa:	e091      	b.n	8009420 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009300:	f003 031f 	and.w	r3, r3, #31
 8009304:	2208      	movs	r2, #8
 8009306:	409a      	lsls	r2, r3
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	4013      	ands	r3, r2
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 8088 	beq.w	8009422 <HAL_DMA_IRQHandler+0xe0e>
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f003 0308 	and.w	r3, r3, #8
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 8082 	beq.w	8009422 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a41      	ldr	r2, [pc, #260]	; (8009428 <HAL_DMA_IRQHandler+0xe14>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d04a      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a3f      	ldr	r2, [pc, #252]	; (800942c <HAL_DMA_IRQHandler+0xe18>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d045      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a3e      	ldr	r2, [pc, #248]	; (8009430 <HAL_DMA_IRQHandler+0xe1c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d040      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a3c      	ldr	r2, [pc, #240]	; (8009434 <HAL_DMA_IRQHandler+0xe20>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d03b      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a3b      	ldr	r2, [pc, #236]	; (8009438 <HAL_DMA_IRQHandler+0xe24>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d036      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a39      	ldr	r2, [pc, #228]	; (800943c <HAL_DMA_IRQHandler+0xe28>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d031      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a38      	ldr	r2, [pc, #224]	; (8009440 <HAL_DMA_IRQHandler+0xe2c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d02c      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a36      	ldr	r2, [pc, #216]	; (8009444 <HAL_DMA_IRQHandler+0xe30>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d027      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a35      	ldr	r2, [pc, #212]	; (8009448 <HAL_DMA_IRQHandler+0xe34>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d022      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a33      	ldr	r2, [pc, #204]	; (800944c <HAL_DMA_IRQHandler+0xe38>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d01d      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a32      	ldr	r2, [pc, #200]	; (8009450 <HAL_DMA_IRQHandler+0xe3c>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d018      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a30      	ldr	r2, [pc, #192]	; (8009454 <HAL_DMA_IRQHandler+0xe40>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d013      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a2f      	ldr	r2, [pc, #188]	; (8009458 <HAL_DMA_IRQHandler+0xe44>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d00e      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a2d      	ldr	r2, [pc, #180]	; (800945c <HAL_DMA_IRQHandler+0xe48>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d009      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a2c      	ldr	r2, [pc, #176]	; (8009460 <HAL_DMA_IRQHandler+0xe4c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d004      	beq.n	80093be <HAL_DMA_IRQHandler+0xdaa>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a2a      	ldr	r2, [pc, #168]	; (8009464 <HAL_DMA_IRQHandler+0xe50>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d108      	bne.n	80093d0 <HAL_DMA_IRQHandler+0xdbc>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 021c 	bic.w	r2, r2, #28
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	e007      	b.n	80093e0 <HAL_DMA_IRQHandler+0xdcc>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f022 020e 	bic.w	r2, r2, #14
 80093de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093e4:	f003 031f 	and.w	r3, r3, #31
 80093e8:	2201      	movs	r2, #1
 80093ea:	409a      	lsls	r2, r3
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d009      	beq.n	8009422 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	4798      	blx	r3
 8009416:	e004      	b.n	8009422 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009418:	bf00      	nop
 800941a:	e002      	b.n	8009422 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800941c:	bf00      	nop
 800941e:	e000      	b.n	8009422 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009420:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009422:	3728      	adds	r7, #40	; 0x28
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	40020010 	.word	0x40020010
 800942c:	40020028 	.word	0x40020028
 8009430:	40020040 	.word	0x40020040
 8009434:	40020058 	.word	0x40020058
 8009438:	40020070 	.word	0x40020070
 800943c:	40020088 	.word	0x40020088
 8009440:	400200a0 	.word	0x400200a0
 8009444:	400200b8 	.word	0x400200b8
 8009448:	40020410 	.word	0x40020410
 800944c:	40020428 	.word	0x40020428
 8009450:	40020440 	.word	0x40020440
 8009454:	40020458 	.word	0x40020458
 8009458:	40020470 	.word	0x40020470
 800945c:	40020488 	.word	0x40020488
 8009460:	400204a0 	.word	0x400204a0
 8009464:	400204b8 	.word	0x400204b8

08009468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a42      	ldr	r2, [pc, #264]	; (8009580 <DMA_CalcBaseAndBitshift+0x118>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d04a      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a41      	ldr	r2, [pc, #260]	; (8009584 <DMA_CalcBaseAndBitshift+0x11c>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d045      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a3f      	ldr	r2, [pc, #252]	; (8009588 <DMA_CalcBaseAndBitshift+0x120>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d040      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a3e      	ldr	r2, [pc, #248]	; (800958c <DMA_CalcBaseAndBitshift+0x124>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d03b      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a3c      	ldr	r2, [pc, #240]	; (8009590 <DMA_CalcBaseAndBitshift+0x128>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d036      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a3b      	ldr	r2, [pc, #236]	; (8009594 <DMA_CalcBaseAndBitshift+0x12c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d031      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a39      	ldr	r2, [pc, #228]	; (8009598 <DMA_CalcBaseAndBitshift+0x130>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d02c      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a38      	ldr	r2, [pc, #224]	; (800959c <DMA_CalcBaseAndBitshift+0x134>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d027      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a36      	ldr	r2, [pc, #216]	; (80095a0 <DMA_CalcBaseAndBitshift+0x138>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d022      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a35      	ldr	r2, [pc, #212]	; (80095a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d01d      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a33      	ldr	r2, [pc, #204]	; (80095a8 <DMA_CalcBaseAndBitshift+0x140>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d018      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a32      	ldr	r2, [pc, #200]	; (80095ac <DMA_CalcBaseAndBitshift+0x144>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d013      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a30      	ldr	r2, [pc, #192]	; (80095b0 <DMA_CalcBaseAndBitshift+0x148>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d00e      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a2f      	ldr	r2, [pc, #188]	; (80095b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d009      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a2d      	ldr	r2, [pc, #180]	; (80095b8 <DMA_CalcBaseAndBitshift+0x150>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d004      	beq.n	8009510 <DMA_CalcBaseAndBitshift+0xa8>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a2c      	ldr	r2, [pc, #176]	; (80095bc <DMA_CalcBaseAndBitshift+0x154>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d101      	bne.n	8009514 <DMA_CalcBaseAndBitshift+0xac>
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <DMA_CalcBaseAndBitshift+0xae>
 8009514:	2300      	movs	r3, #0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d024      	beq.n	8009564 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	b2db      	uxtb	r3, r3
 8009520:	3b10      	subs	r3, #16
 8009522:	4a27      	ldr	r2, [pc, #156]	; (80095c0 <DMA_CalcBaseAndBitshift+0x158>)
 8009524:	fba2 2303 	umull	r2, r3, r2, r3
 8009528:	091b      	lsrs	r3, r3, #4
 800952a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f003 0307 	and.w	r3, r3, #7
 8009532:	4a24      	ldr	r2, [pc, #144]	; (80095c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8009534:	5cd3      	ldrb	r3, [r2, r3]
 8009536:	461a      	mov	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b03      	cmp	r3, #3
 8009540:	d908      	bls.n	8009554 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	4b1f      	ldr	r3, [pc, #124]	; (80095c8 <DMA_CalcBaseAndBitshift+0x160>)
 800954a:	4013      	ands	r3, r2
 800954c:	1d1a      	adds	r2, r3, #4
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	659a      	str	r2, [r3, #88]	; 0x58
 8009552:	e00d      	b.n	8009570 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	4b1b      	ldr	r3, [pc, #108]	; (80095c8 <DMA_CalcBaseAndBitshift+0x160>)
 800955c:	4013      	ands	r3, r2
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6593      	str	r3, [r2, #88]	; 0x58
 8009562:	e005      	b.n	8009570 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	40020010 	.word	0x40020010
 8009584:	40020028 	.word	0x40020028
 8009588:	40020040 	.word	0x40020040
 800958c:	40020058 	.word	0x40020058
 8009590:	40020070 	.word	0x40020070
 8009594:	40020088 	.word	0x40020088
 8009598:	400200a0 	.word	0x400200a0
 800959c:	400200b8 	.word	0x400200b8
 80095a0:	40020410 	.word	0x40020410
 80095a4:	40020428 	.word	0x40020428
 80095a8:	40020440 	.word	0x40020440
 80095ac:	40020458 	.word	0x40020458
 80095b0:	40020470 	.word	0x40020470
 80095b4:	40020488 	.word	0x40020488
 80095b8:	400204a0 	.word	0x400204a0
 80095bc:	400204b8 	.word	0x400204b8
 80095c0:	aaaaaaab 	.word	0xaaaaaaab
 80095c4:	080120b4 	.word	0x080120b4
 80095c8:	fffffc00 	.word	0xfffffc00

080095cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d120      	bne.n	8009622 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e4:	2b03      	cmp	r3, #3
 80095e6:	d858      	bhi.n	800969a <DMA_CheckFifoParam+0xce>
 80095e8:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <DMA_CheckFifoParam+0x24>)
 80095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ee:	bf00      	nop
 80095f0:	08009601 	.word	0x08009601
 80095f4:	08009613 	.word	0x08009613
 80095f8:	08009601 	.word	0x08009601
 80095fc:	0800969b 	.word	0x0800969b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d048      	beq.n	800969e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009610:	e045      	b.n	800969e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009616:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800961a:	d142      	bne.n	80096a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009620:	e03f      	b.n	80096a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800962a:	d123      	bne.n	8009674 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009630:	2b03      	cmp	r3, #3
 8009632:	d838      	bhi.n	80096a6 <DMA_CheckFifoParam+0xda>
 8009634:	a201      	add	r2, pc, #4	; (adr r2, 800963c <DMA_CheckFifoParam+0x70>)
 8009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963a:	bf00      	nop
 800963c:	0800964d 	.word	0x0800964d
 8009640:	08009653 	.word	0x08009653
 8009644:	0800964d 	.word	0x0800964d
 8009648:	08009665 	.word	0x08009665
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	73fb      	strb	r3, [r7, #15]
        break;
 8009650:	e030      	b.n	80096b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d025      	beq.n	80096aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009662:	e022      	b.n	80096aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800966c:	d11f      	bne.n	80096ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009672:	e01c      	b.n	80096ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009678:	2b02      	cmp	r3, #2
 800967a:	d902      	bls.n	8009682 <DMA_CheckFifoParam+0xb6>
 800967c:	2b03      	cmp	r3, #3
 800967e:	d003      	beq.n	8009688 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009680:	e018      	b.n	80096b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	73fb      	strb	r3, [r7, #15]
        break;
 8009686:	e015      	b.n	80096b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00e      	beq.n	80096b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	73fb      	strb	r3, [r7, #15]
    break;
 8009698:	e00b      	b.n	80096b2 <DMA_CheckFifoParam+0xe6>
        break;
 800969a:	bf00      	nop
 800969c:	e00a      	b.n	80096b4 <DMA_CheckFifoParam+0xe8>
        break;
 800969e:	bf00      	nop
 80096a0:	e008      	b.n	80096b4 <DMA_CheckFifoParam+0xe8>
        break;
 80096a2:	bf00      	nop
 80096a4:	e006      	b.n	80096b4 <DMA_CheckFifoParam+0xe8>
        break;
 80096a6:	bf00      	nop
 80096a8:	e004      	b.n	80096b4 <DMA_CheckFifoParam+0xe8>
        break;
 80096aa:	bf00      	nop
 80096ac:	e002      	b.n	80096b4 <DMA_CheckFifoParam+0xe8>
        break;
 80096ae:	bf00      	nop
 80096b0:	e000      	b.n	80096b4 <DMA_CheckFifoParam+0xe8>
    break;
 80096b2:	bf00      	nop
    }
  }

  return status;
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop

080096c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a38      	ldr	r2, [pc, #224]	; (80097b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d022      	beq.n	8009722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a36      	ldr	r2, [pc, #216]	; (80097bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d01d      	beq.n	8009722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a35      	ldr	r2, [pc, #212]	; (80097c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d018      	beq.n	8009722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a33      	ldr	r2, [pc, #204]	; (80097c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d013      	beq.n	8009722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a32      	ldr	r2, [pc, #200]	; (80097c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d00e      	beq.n	8009722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a30      	ldr	r2, [pc, #192]	; (80097cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d009      	beq.n	8009722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a2f      	ldr	r2, [pc, #188]	; (80097d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d004      	beq.n	8009722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a2d      	ldr	r2, [pc, #180]	; (80097d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d101      	bne.n	8009726 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009726:	2300      	movs	r3, #0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d01a      	beq.n	8009762 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	b2db      	uxtb	r3, r3
 8009732:	3b08      	subs	r3, #8
 8009734:	4a28      	ldr	r2, [pc, #160]	; (80097d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009736:	fba2 2303 	umull	r2, r3, r2, r3
 800973a:	091b      	lsrs	r3, r3, #4
 800973c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	4b26      	ldr	r3, [pc, #152]	; (80097dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	461a      	mov	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a24      	ldr	r2, [pc, #144]	; (80097e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009750:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f003 031f 	and.w	r3, r3, #31
 8009758:	2201      	movs	r2, #1
 800975a:	409a      	lsls	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009760:	e024      	b.n	80097ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	3b10      	subs	r3, #16
 800976a:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800976c:	fba2 2303 	umull	r2, r3, r2, r3
 8009770:	091b      	lsrs	r3, r3, #4
 8009772:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4a1c      	ldr	r2, [pc, #112]	; (80097e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d806      	bhi.n	800978a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4a1b      	ldr	r2, [pc, #108]	; (80097ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d902      	bls.n	800978a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3308      	adds	r3, #8
 8009788:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	4b18      	ldr	r3, [pc, #96]	; (80097f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800978e:	4413      	add	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	461a      	mov	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a16      	ldr	r2, [pc, #88]	; (80097f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800979c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f003 031f 	and.w	r3, r3, #31
 80097a4:	2201      	movs	r2, #1
 80097a6:	409a      	lsls	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80097ac:	bf00      	nop
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	58025408 	.word	0x58025408
 80097bc:	5802541c 	.word	0x5802541c
 80097c0:	58025430 	.word	0x58025430
 80097c4:	58025444 	.word	0x58025444
 80097c8:	58025458 	.word	0x58025458
 80097cc:	5802546c 	.word	0x5802546c
 80097d0:	58025480 	.word	0x58025480
 80097d4:	58025494 	.word	0x58025494
 80097d8:	cccccccd 	.word	0xcccccccd
 80097dc:	16009600 	.word	0x16009600
 80097e0:	58025880 	.word	0x58025880
 80097e4:	aaaaaaab 	.word	0xaaaaaaab
 80097e8:	400204b8 	.word	0x400204b8
 80097ec:	4002040f 	.word	0x4002040f
 80097f0:	10008200 	.word	0x10008200
 80097f4:	40020880 	.word	0x40020880

080097f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d04a      	beq.n	80098a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b08      	cmp	r3, #8
 8009812:	d847      	bhi.n	80098a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a25      	ldr	r2, [pc, #148]	; (80098b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d022      	beq.n	8009864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a24      	ldr	r2, [pc, #144]	; (80098b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d01d      	beq.n	8009864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a22      	ldr	r2, [pc, #136]	; (80098b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d018      	beq.n	8009864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a21      	ldr	r2, [pc, #132]	; (80098bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d013      	beq.n	8009864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a1f      	ldr	r2, [pc, #124]	; (80098c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d00e      	beq.n	8009864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a1e      	ldr	r2, [pc, #120]	; (80098c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d009      	beq.n	8009864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a1c      	ldr	r2, [pc, #112]	; (80098c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d004      	beq.n	8009864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a1b      	ldr	r2, [pc, #108]	; (80098cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d101      	bne.n	8009868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009864:	2301      	movs	r3, #1
 8009866:	e000      	b.n	800986a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009868:	2300      	movs	r3, #0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00a      	beq.n	8009884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	461a      	mov	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a15      	ldr	r2, [pc, #84]	; (80098d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009880:	671a      	str	r2, [r3, #112]	; 0x70
 8009882:	e009      	b.n	8009898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	461a      	mov	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a11      	ldr	r2, [pc, #68]	; (80098dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009896:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3b01      	subs	r3, #1
 800989c:	2201      	movs	r2, #1
 800989e:	409a      	lsls	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80098a4:	bf00      	nop
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	58025408 	.word	0x58025408
 80098b4:	5802541c 	.word	0x5802541c
 80098b8:	58025430 	.word	0x58025430
 80098bc:	58025444 	.word	0x58025444
 80098c0:	58025458 	.word	0x58025458
 80098c4:	5802546c 	.word	0x5802546c
 80098c8:	58025480 	.word	0x58025480
 80098cc:	58025494 	.word	0x58025494
 80098d0:	1600963f 	.word	0x1600963f
 80098d4:	58025940 	.word	0x58025940
 80098d8:	1000823f 	.word	0x1000823f
 80098dc:	40020940 	.word	0x40020940

080098e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e0cf      	b.n	8009a92 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d106      	bne.n	800990a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2223      	movs	r2, #35	; 0x23
 8009900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7fd f89f 	bl	8006a48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800990a:	4b64      	ldr	r3, [pc, #400]	; (8009a9c <HAL_ETH_Init+0x1bc>)
 800990c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009910:	4a62      	ldr	r2, [pc, #392]	; (8009a9c <HAL_ETH_Init+0x1bc>)
 8009912:	f043 0302 	orr.w	r3, r3, #2
 8009916:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800991a:	4b60      	ldr	r3, [pc, #384]	; (8009a9c <HAL_ETH_Init+0x1bc>)
 800991c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	60bb      	str	r3, [r7, #8]
 8009926:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	7a1b      	ldrb	r3, [r3, #8]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d103      	bne.n	8009938 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009930:	2000      	movs	r0, #0
 8009932:	f7fd fc8b 	bl	800724c <HAL_SYSCFG_ETHInterfaceSelect>
 8009936:	e003      	b.n	8009940 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009938:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800993c:	f7fd fc86 	bl	800724c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009940:	4b57      	ldr	r3, [pc, #348]	; (8009aa0 <HAL_ETH_Init+0x1c0>)
 8009942:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	6812      	ldr	r2, [r2, #0]
 8009952:	f043 0301 	orr.w	r3, r3, #1
 8009956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800995a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800995c:	f7fd fc3a 	bl	80071d4 <HAL_GetTick>
 8009960:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009962:	e011      	b.n	8009988 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009964:	f7fd fc36 	bl	80071d4 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009972:	d909      	bls.n	8009988 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2204      	movs	r2, #4
 8009978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	22e0      	movs	r2, #224	; 0xe0
 8009980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e084      	b.n	8009a92 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e4      	bne.n	8009964 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f886 	bl	8009aac <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80099a0:	f001 fefc 	bl	800b79c <HAL_RCC_GetHCLKFreq>
 80099a4:	4603      	mov	r3, r0
 80099a6:	4a3f      	ldr	r2, [pc, #252]	; (8009aa4 <HAL_ETH_Init+0x1c4>)
 80099a8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ac:	0c9a      	lsrs	r2, r3, #18
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3a01      	subs	r2, #1
 80099b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fa71 	bl	8009ea0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80099ca:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	6812      	ldr	r2, [r2, #0]
 80099d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099da:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	f003 0303 	and.w	r3, r3, #3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	22e0      	movs	r2, #224	; 0xe0
 80099f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e049      	b.n	8009a92 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a06:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8009a0a:	4b27      	ldr	r3, [pc, #156]	; (8009aa8 <HAL_ETH_Init+0x1c8>)
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	6952      	ldr	r2, [r2, #20]
 8009a12:	0051      	lsls	r1, r2, #1
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	6812      	ldr	r2, [r2, #0]
 8009a18:	430b      	orrs	r3, r1
 8009a1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a1e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fad9 	bl	8009fda <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fb1f 	bl	800a06c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	3305      	adds	r3, #5
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	021a      	lsls	r2, r3, #8
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	4619      	mov	r1, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	3303      	adds	r3, #3
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	061a      	lsls	r2, r3, #24
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	3302      	adds	r3, #2
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	041b      	lsls	r3, r3, #16
 8009a60:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	3301      	adds	r3, #1
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009a6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009a7a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009a7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2210      	movs	r2, #16
 8009a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	58024400 	.word	0x58024400
 8009aa0:	58000400 	.word	0x58000400
 8009aa4:	431bde83 	.word	0x431bde83
 8009aa8:	ffff8001 	.word	0xffff8001

08009aac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009ac6:	f001 fe69 	bl	800b79c <HAL_RCC_GetHCLKFreq>
 8009aca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	4a1e      	ldr	r2, [pc, #120]	; (8009b48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d908      	bls.n	8009ae6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	4a1d      	ldr	r2, [pc, #116]	; (8009b4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d804      	bhi.n	8009ae6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	e027      	b.n	8009b36 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	4a18      	ldr	r2, [pc, #96]	; (8009b4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d908      	bls.n	8009b00 <HAL_ETH_SetMDIOClockRange+0x54>
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	4a17      	ldr	r2, [pc, #92]	; (8009b50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d204      	bcs.n	8009b00 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	e01a      	b.n	8009b36 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	4a13      	ldr	r2, [pc, #76]	; (8009b50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d303      	bcc.n	8009b10 <HAL_ETH_SetMDIOClockRange+0x64>
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4a12      	ldr	r2, [pc, #72]	; (8009b54 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d911      	bls.n	8009b34 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4a10      	ldr	r2, [pc, #64]	; (8009b54 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d908      	bls.n	8009b2a <HAL_ETH_SetMDIOClockRange+0x7e>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	4a0f      	ldr	r2, [pc, #60]	; (8009b58 <HAL_ETH_SetMDIOClockRange+0xac>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d804      	bhi.n	8009b2a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	e005      	b.n	8009b36 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	e000      	b.n	8009b36 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009b34:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8009b40:	bf00      	nop
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	01312cff 	.word	0x01312cff
 8009b4c:	02160ebf 	.word	0x02160ebf
 8009b50:	03938700 	.word	0x03938700
 8009b54:	05f5e0ff 	.word	0x05f5e0ff
 8009b58:	08f0d17f 	.word	0x08f0d17f

08009b5c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8009b6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	791b      	ldrb	r3, [r3, #4]
 8009b74:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8009b76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	7b1b      	ldrb	r3, [r3, #12]
 8009b7c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009b7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	7b5b      	ldrb	r3, [r3, #13]
 8009b84:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009b86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	7b9b      	ldrb	r3, [r3, #14]
 8009b8c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009b8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	7bdb      	ldrb	r3, [r3, #15]
 8009b94:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009b96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	7c12      	ldrb	r2, [r2, #16]
 8009b9c:	2a00      	cmp	r2, #0
 8009b9e:	d102      	bne.n	8009ba6 <ETH_SetMACConfig+0x4a>
 8009ba0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009ba4:	e000      	b.n	8009ba8 <ETH_SetMACConfig+0x4c>
 8009ba6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009ba8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	7c52      	ldrb	r2, [r2, #17]
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	d102      	bne.n	8009bb8 <ETH_SetMACConfig+0x5c>
 8009bb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009bb6:	e000      	b.n	8009bba <ETH_SetMACConfig+0x5e>
 8009bb8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009bba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	7c9b      	ldrb	r3, [r3, #18]
 8009bc0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009bc2:	431a      	orrs	r2, r3
               macconf->Speed |
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009bc8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8009bce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	7f1b      	ldrb	r3, [r3, #28]
 8009bd4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8009bd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	7f5b      	ldrb	r3, [r3, #29]
 8009bdc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009bde:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	7f92      	ldrb	r2, [r2, #30]
 8009be4:	2a00      	cmp	r2, #0
 8009be6:	d102      	bne.n	8009bee <ETH_SetMACConfig+0x92>
 8009be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bec:	e000      	b.n	8009bf0 <ETH_SetMACConfig+0x94>
 8009bee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009bf0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	7fdb      	ldrb	r3, [r3, #31]
 8009bf6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009bf8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009c00:	2a00      	cmp	r2, #0
 8009c02:	d102      	bne.n	8009c0a <ETH_SetMACConfig+0xae>
 8009c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c08:	e000      	b.n	8009c0c <ETH_SetMACConfig+0xb0>
 8009c0a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009c0c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009c12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c1a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8009c1c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	4b56      	ldr	r3, [pc, #344]	; (8009d88 <ETH_SetMACConfig+0x22c>)
 8009c2e:	4013      	ands	r3, r2
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	6812      	ldr	r2, [r2, #0]
 8009c34:	68f9      	ldr	r1, [r7, #12]
 8009c36:	430b      	orrs	r3, r1
 8009c38:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c46:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009c48:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c50:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009c52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009c5a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009c5c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	d102      	bne.n	8009c6e <ETH_SetMACConfig+0x112>
 8009c68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009c6c:	e000      	b.n	8009c70 <ETH_SetMACConfig+0x114>
 8009c6e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009c70:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685a      	ldr	r2, [r3, #4]
 8009c80:	4b42      	ldr	r3, [pc, #264]	; (8009d8c <ETH_SetMACConfig+0x230>)
 8009c82:	4013      	ands	r3, r2
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6812      	ldr	r2, [r2, #0]
 8009c88:	68f9      	ldr	r1, [r7, #12]
 8009c8a:	430b      	orrs	r3, r1
 8009c8c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c94:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68da      	ldr	r2, [r3, #12]
 8009ca4:	4b3a      	ldr	r3, [pc, #232]	; (8009d90 <ETH_SetMACConfig+0x234>)
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	6812      	ldr	r2, [r2, #0]
 8009cac:	68f9      	ldr	r1, [r7, #12]
 8009cae:	430b      	orrs	r3, r1
 8009cb0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009cb8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009cbe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8009cc6:	2a00      	cmp	r2, #0
 8009cc8:	d101      	bne.n	8009cce <ETH_SetMACConfig+0x172>
 8009cca:	2280      	movs	r2, #128	; 0x80
 8009ccc:	e000      	b.n	8009cd0 <ETH_SetMACConfig+0x174>
 8009cce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009cd0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cd6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ce2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6812      	ldr	r2, [r2, #0]
 8009cec:	68f9      	ldr	r1, [r7, #12]
 8009cee:	430b      	orrs	r3, r1
 8009cf0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009cf8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009d00:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d0e:	f023 0103 	bic.w	r1, r3, #3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8009d26:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8009d42:	2a00      	cmp	r2, #0
 8009d44:	d101      	bne.n	8009d4a <ETH_SetMACConfig+0x1ee>
 8009d46:	2240      	movs	r2, #64	; 0x40
 8009d48:	e000      	b.n	8009d4c <ETH_SetMACConfig+0x1f0>
 8009d4a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009d4c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009d54:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009d56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009d5e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8009d6c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8009d7c:	bf00      	nop
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	00048083 	.word	0x00048083
 8009d8c:	c0f88000 	.word	0xc0f88000
 8009d90:	fffffef0 	.word	0xfffffef0

08009d94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	4b38      	ldr	r3, [pc, #224]	; (8009e8c <ETH_SetDMAConfig+0xf8>)
 8009daa:	4013      	ands	r3, r2
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	6811      	ldr	r1, [r2, #0]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	6812      	ldr	r2, [r2, #0]
 8009db4:	430b      	orrs	r3, r1
 8009db6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009dba:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	791b      	ldrb	r3, [r3, #4]
 8009dc0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009dc6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	7b1b      	ldrb	r3, [r3, #12]
 8009dcc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	4b2c      	ldr	r3, [pc, #176]	; (8009e90 <ETH_SetDMAConfig+0xfc>)
 8009dde:	4013      	ands	r3, r2
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6812      	ldr	r2, [r2, #0]
 8009de4:	68f9      	ldr	r1, [r7, #12]
 8009de6:	430b      	orrs	r3, r1
 8009de8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009dec:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	7b5b      	ldrb	r3, [r3, #13]
 8009df2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e04:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8009e08:	4b22      	ldr	r3, [pc, #136]	; (8009e94 <ETH_SetDMAConfig+0x100>)
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	6812      	ldr	r2, [r2, #0]
 8009e10:	68f9      	ldr	r1, [r7, #12]
 8009e12:	430b      	orrs	r3, r1
 8009e14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e18:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	7d1b      	ldrb	r3, [r3, #20]
 8009e24:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009e26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	7f5b      	ldrb	r3, [r3, #29]
 8009e2c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e3a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8009e3e:	4b16      	ldr	r3, [pc, #88]	; (8009e98 <ETH_SetDMAConfig+0x104>)
 8009e40:	4013      	ands	r3, r2
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	6812      	ldr	r2, [r2, #0]
 8009e46:	68f9      	ldr	r1, [r7, #12]
 8009e48:	430b      	orrs	r3, r1
 8009e4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e4e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	7f1b      	ldrb	r3, [r3, #28]
 8009e56:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e68:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8009e6c:	4b0b      	ldr	r3, [pc, #44]	; (8009e9c <ETH_SetDMAConfig+0x108>)
 8009e6e:	4013      	ands	r3, r2
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	6812      	ldr	r2, [r2, #0]
 8009e74:	68f9      	ldr	r1, [r7, #12]
 8009e76:	430b      	orrs	r3, r1
 8009e78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e7c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8009e80:	bf00      	nop
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	ffff87fd 	.word	0xffff87fd
 8009e90:	ffff2ffe 	.word	0xffff2ffe
 8009e94:	fffec000 	.word	0xfffec000
 8009e98:	ffc0efef 	.word	0xffc0efef
 8009e9c:	7fc0ffff 	.word	0x7fc0ffff

08009ea0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b0a4      	sub	sp, #144	; 0x90
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ee0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8009eec:	2300      	movs	r3, #0
 8009eee:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009ef8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8009efc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8009efe:	2300      	movs	r3, #0
 8009f00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009f04:	2300      	movs	r3, #0
 8009f06:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8009f22:	2300      	movs	r3, #0
 8009f24:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009f26:	2300      	movs	r3, #0
 8009f28:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009f38:	2320      	movs	r3, #32
 8009f3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009f44:	2300      	movs	r3, #0
 8009f46:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8009f4a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8009f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8009f50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f54:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8009f56:	2300      	movs	r3, #0
 8009f58:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009f62:	2300      	movs	r3, #0
 8009f64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8009f74:	2301      	movs	r3, #1
 8009f76:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7ff fde6 	bl	8009b5c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009f90:	2301      	movs	r3, #1
 8009f92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009f94:	2301      	movs	r3, #1
 8009f96:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009faa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009fae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009fb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8009fc0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009fc6:	f107 0308 	add.w	r3, r7, #8
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7ff fee1 	bl	8009d94 <ETH_SetDMAConfig>
}
 8009fd2:	bf00      	nop
 8009fd4:	3790      	adds	r7, #144	; 0x90
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b085      	sub	sp, #20
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	e01d      	b.n	800a024 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68d9      	ldr	r1, [r3, #12]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	4413      	add	r3, r2
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	440b      	add	r3, r1
 8009ff8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2200      	movs	r2, #0
 800a004:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2200      	movs	r2, #0
 800a00a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2200      	movs	r2, #0
 800a010:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a012:	68b9      	ldr	r1, [r7, #8]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	3206      	adds	r2, #6
 800a01a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3301      	adds	r3, #1
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b03      	cmp	r3, #3
 800a028:	d9de      	bls.n	8009fe8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a038:	461a      	mov	r2, r3
 800a03a:	2303      	movs	r3, #3
 800a03c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68da      	ldr	r2, [r3, #12]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a04c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a05c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800a060:	bf00      	nop
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a074:	2300      	movs	r3, #0
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	e023      	b.n	800a0c2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6919      	ldr	r1, [r3, #16]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	4613      	mov	r3, r2
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	4413      	add	r3, r2
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	440b      	add	r3, r1
 800a08a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2200      	movs	r2, #0
 800a096:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2200      	movs	r2, #0
 800a09c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	3212      	adds	r2, #18
 800a0b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	60fb      	str	r3, [r7, #12]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d9d8      	bls.n	800a07a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	691a      	ldr	r2, [r3, #16]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a102:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a116:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800a11a:	bf00      	nop
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
	...

0800a128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a128:	b480      	push	{r7}
 800a12a:	b089      	sub	sp, #36	; 0x24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a132:	2300      	movs	r3, #0
 800a134:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a136:	4b89      	ldr	r3, [pc, #548]	; (800a35c <HAL_GPIO_Init+0x234>)
 800a138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a13a:	e194      	b.n	800a466 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	2101      	movs	r1, #1
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	fa01 f303 	lsl.w	r3, r1, r3
 800a148:	4013      	ands	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 8186 	beq.w	800a460 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f003 0303 	and.w	r3, r3, #3
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d005      	beq.n	800a16c <HAL_GPIO_Init+0x44>
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f003 0303 	and.w	r3, r3, #3
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d130      	bne.n	800a1ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	2203      	movs	r2, #3
 800a178:	fa02 f303 	lsl.w	r3, r2, r3
 800a17c:	43db      	mvns	r3, r3
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	4013      	ands	r3, r2
 800a182:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	68da      	ldr	r2, [r3, #12]
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	fa02 f303 	lsl.w	r3, r2, r3
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	4313      	orrs	r3, r2
 800a194:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1aa:	43db      	mvns	r3, r3
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	091b      	lsrs	r3, r3, #4
 800a1b8:	f003 0201 	and.w	r2, r3, #1
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f003 0303 	and.w	r3, r3, #3
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d017      	beq.n	800a20a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	2203      	movs	r2, #3
 800a1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ea:	43db      	mvns	r3, r3
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	689a      	ldr	r2, [r3, #8]
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fe:	69ba      	ldr	r2, [r7, #24]
 800a200:	4313      	orrs	r3, r2
 800a202:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	69ba      	ldr	r2, [r7, #24]
 800a208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	f003 0303 	and.w	r3, r3, #3
 800a212:	2b02      	cmp	r3, #2
 800a214:	d123      	bne.n	800a25e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	08da      	lsrs	r2, r3, #3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3208      	adds	r2, #8
 800a21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	220f      	movs	r2, #15
 800a22e:	fa02 f303 	lsl.w	r3, r2, r3
 800a232:	43db      	mvns	r3, r3
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	4013      	ands	r3, r2
 800a238:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	691a      	ldr	r2, [r3, #16]
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	f003 0307 	and.w	r3, r3, #7
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	fa02 f303 	lsl.w	r3, r2, r3
 800a24a:	69ba      	ldr	r2, [r7, #24]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	08da      	lsrs	r2, r3, #3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3208      	adds	r2, #8
 800a258:	69b9      	ldr	r1, [r7, #24]
 800a25a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	2203      	movs	r2, #3
 800a26a:	fa02 f303 	lsl.w	r3, r2, r3
 800a26e:	43db      	mvns	r3, r3
 800a270:	69ba      	ldr	r2, [r7, #24]
 800a272:	4013      	ands	r3, r2
 800a274:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f003 0203 	and.w	r2, r3, #3
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	005b      	lsls	r3, r3, #1
 800a282:	fa02 f303 	lsl.w	r3, r2, r3
 800a286:	69ba      	ldr	r2, [r7, #24]
 800a288:	4313      	orrs	r3, r2
 800a28a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	69ba      	ldr	r2, [r7, #24]
 800a290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 80e0 	beq.w	800a460 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2a0:	4b2f      	ldr	r3, [pc, #188]	; (800a360 <HAL_GPIO_Init+0x238>)
 800a2a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a2a6:	4a2e      	ldr	r2, [pc, #184]	; (800a360 <HAL_GPIO_Init+0x238>)
 800a2a8:	f043 0302 	orr.w	r3, r3, #2
 800a2ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a2b0:	4b2b      	ldr	r3, [pc, #172]	; (800a360 <HAL_GPIO_Init+0x238>)
 800a2b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a2b6:	f003 0302 	and.w	r3, r3, #2
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a2be:	4a29      	ldr	r2, [pc, #164]	; (800a364 <HAL_GPIO_Init+0x23c>)
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	089b      	lsrs	r3, r3, #2
 800a2c4:	3302      	adds	r3, #2
 800a2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	f003 0303 	and.w	r3, r3, #3
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	220f      	movs	r2, #15
 800a2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2da:	43db      	mvns	r3, r3
 800a2dc:	69ba      	ldr	r2, [r7, #24]
 800a2de:	4013      	ands	r3, r2
 800a2e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a20      	ldr	r2, [pc, #128]	; (800a368 <HAL_GPIO_Init+0x240>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d052      	beq.n	800a390 <HAL_GPIO_Init+0x268>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a1f      	ldr	r2, [pc, #124]	; (800a36c <HAL_GPIO_Init+0x244>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d031      	beq.n	800a356 <HAL_GPIO_Init+0x22e>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a1e      	ldr	r2, [pc, #120]	; (800a370 <HAL_GPIO_Init+0x248>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d02b      	beq.n	800a352 <HAL_GPIO_Init+0x22a>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a1d      	ldr	r2, [pc, #116]	; (800a374 <HAL_GPIO_Init+0x24c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d025      	beq.n	800a34e <HAL_GPIO_Init+0x226>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a1c      	ldr	r2, [pc, #112]	; (800a378 <HAL_GPIO_Init+0x250>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d01f      	beq.n	800a34a <HAL_GPIO_Init+0x222>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a1b      	ldr	r2, [pc, #108]	; (800a37c <HAL_GPIO_Init+0x254>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d019      	beq.n	800a346 <HAL_GPIO_Init+0x21e>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a1a      	ldr	r2, [pc, #104]	; (800a380 <HAL_GPIO_Init+0x258>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d013      	beq.n	800a342 <HAL_GPIO_Init+0x21a>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a19      	ldr	r2, [pc, #100]	; (800a384 <HAL_GPIO_Init+0x25c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d00d      	beq.n	800a33e <HAL_GPIO_Init+0x216>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a18      	ldr	r2, [pc, #96]	; (800a388 <HAL_GPIO_Init+0x260>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d007      	beq.n	800a33a <HAL_GPIO_Init+0x212>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a17      	ldr	r2, [pc, #92]	; (800a38c <HAL_GPIO_Init+0x264>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d101      	bne.n	800a336 <HAL_GPIO_Init+0x20e>
 800a332:	2309      	movs	r3, #9
 800a334:	e02d      	b.n	800a392 <HAL_GPIO_Init+0x26a>
 800a336:	230a      	movs	r3, #10
 800a338:	e02b      	b.n	800a392 <HAL_GPIO_Init+0x26a>
 800a33a:	2308      	movs	r3, #8
 800a33c:	e029      	b.n	800a392 <HAL_GPIO_Init+0x26a>
 800a33e:	2307      	movs	r3, #7
 800a340:	e027      	b.n	800a392 <HAL_GPIO_Init+0x26a>
 800a342:	2306      	movs	r3, #6
 800a344:	e025      	b.n	800a392 <HAL_GPIO_Init+0x26a>
 800a346:	2305      	movs	r3, #5
 800a348:	e023      	b.n	800a392 <HAL_GPIO_Init+0x26a>
 800a34a:	2304      	movs	r3, #4
 800a34c:	e021      	b.n	800a392 <HAL_GPIO_Init+0x26a>
 800a34e:	2303      	movs	r3, #3
 800a350:	e01f      	b.n	800a392 <HAL_GPIO_Init+0x26a>
 800a352:	2302      	movs	r3, #2
 800a354:	e01d      	b.n	800a392 <HAL_GPIO_Init+0x26a>
 800a356:	2301      	movs	r3, #1
 800a358:	e01b      	b.n	800a392 <HAL_GPIO_Init+0x26a>
 800a35a:	bf00      	nop
 800a35c:	58000080 	.word	0x58000080
 800a360:	58024400 	.word	0x58024400
 800a364:	58000400 	.word	0x58000400
 800a368:	58020000 	.word	0x58020000
 800a36c:	58020400 	.word	0x58020400
 800a370:	58020800 	.word	0x58020800
 800a374:	58020c00 	.word	0x58020c00
 800a378:	58021000 	.word	0x58021000
 800a37c:	58021400 	.word	0x58021400
 800a380:	58021800 	.word	0x58021800
 800a384:	58021c00 	.word	0x58021c00
 800a388:	58022000 	.word	0x58022000
 800a38c:	58022400 	.word	0x58022400
 800a390:	2300      	movs	r3, #0
 800a392:	69fa      	ldr	r2, [r7, #28]
 800a394:	f002 0203 	and.w	r2, r2, #3
 800a398:	0092      	lsls	r2, r2, #2
 800a39a:	4093      	lsls	r3, r2
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a3a2:	4938      	ldr	r1, [pc, #224]	; (800a484 <HAL_GPIO_Init+0x35c>)
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	089b      	lsrs	r3, r3, #2
 800a3a8:	3302      	adds	r3, #2
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a3b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	43db      	mvns	r3, r3
 800a3bc:	69ba      	ldr	r2, [r7, #24]
 800a3be:	4013      	ands	r3, r2
 800a3c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a3d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a3de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	43db      	mvns	r3, r3
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d003      	beq.n	800a404 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	4313      	orrs	r3, r2
 800a402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	43db      	mvns	r3, r3
 800a416:	69ba      	ldr	r2, [r7, #24]
 800a418:	4013      	ands	r3, r2
 800a41a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d003      	beq.n	800a430 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	69ba      	ldr	r2, [r7, #24]
 800a434:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	43db      	mvns	r3, r3
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	4013      	ands	r3, r2
 800a444:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a452:	69ba      	ldr	r2, [r7, #24]
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	4313      	orrs	r3, r2
 800a458:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	3301      	adds	r3, #1
 800a464:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	fa22 f303 	lsr.w	r3, r2, r3
 800a470:	2b00      	cmp	r3, #0
 800a472:	f47f ae63 	bne.w	800a13c <HAL_GPIO_Init+0x14>
  }
}
 800a476:	bf00      	nop
 800a478:	bf00      	nop
 800a47a:	3724      	adds	r7, #36	; 0x24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	58000400 	.word	0x58000400

0800a488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	691a      	ldr	r2, [r3, #16]
 800a498:	887b      	ldrh	r3, [r7, #2]
 800a49a:	4013      	ands	r3, r2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]
 800a4a4:	e001      	b.n	800a4aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	807b      	strh	r3, [r7, #2]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a4c8:	787b      	ldrb	r3, [r7, #1]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a4ce:	887a      	ldrh	r2, [r7, #2]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a4d4:	e003      	b.n	800a4de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a4d6:	887b      	ldrh	r3, [r7, #2]
 800a4d8:	041a      	lsls	r2, r3, #16
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	619a      	str	r2, [r3, #24]
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b085      	sub	sp, #20
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a4fc:	887a      	ldrh	r2, [r7, #2]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4013      	ands	r3, r2
 800a502:	041a      	lsls	r2, r3, #16
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	43d9      	mvns	r1, r3
 800a508:	887b      	ldrh	r3, [r7, #2]
 800a50a:	400b      	ands	r3, r1
 800a50c:	431a      	orrs	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	619a      	str	r2, [r3, #24]
}
 800a512:	bf00      	nop
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
	...

0800a520 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800a528:	4a08      	ldr	r2, [pc, #32]	; (800a54c <HAL_HSEM_FastTake+0x2c>)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3320      	adds	r3, #32
 800a52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a532:	4a07      	ldr	r2, [pc, #28]	; (800a550 <HAL_HSEM_FastTake+0x30>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d101      	bne.n	800a53c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	e000      	b.n	800a53e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
}
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	58026400 	.word	0x58026400
 800a550:	80000300 	.word	0x80000300

0800a554 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800a55e:	4906      	ldr	r1, [pc, #24]	; (800a578 <HAL_HSEM_Release+0x24>)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	58026400 	.word	0x58026400

0800a57c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a57e:	b08f      	sub	sp, #60	; 0x3c
 800a580:	af0a      	add	r7, sp, #40	; 0x28
 800a582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e116      	b.n	800a7bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d106      	bne.n	800a5ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7fc fc81 	bl	8006eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2203      	movs	r2, #3
 800a5b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d102      	bne.n	800a5c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f005 f977 	bl	800f8c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	603b      	str	r3, [r7, #0]
 800a5d8:	687e      	ldr	r6, [r7, #4]
 800a5da:	466d      	mov	r5, sp
 800a5dc:	f106 0410 	add.w	r4, r6, #16
 800a5e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a5e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a5e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a5e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a5e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a5ec:	e885 0003 	stmia.w	r5, {r0, r1}
 800a5f0:	1d33      	adds	r3, r6, #4
 800a5f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a5f4:	6838      	ldr	r0, [r7, #0]
 800a5f6:	f005 f8f5 	bl	800f7e4 <USB_CoreInit>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2202      	movs	r2, #2
 800a604:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e0d7      	b.n	800a7bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2100      	movs	r1, #0
 800a612:	4618      	mov	r0, r3
 800a614:	f005 f965 	bl	800f8e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a618:	2300      	movs	r3, #0
 800a61a:	73fb      	strb	r3, [r7, #15]
 800a61c:	e04a      	b.n	800a6b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a61e:	7bfa      	ldrb	r2, [r7, #15]
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	4613      	mov	r3, r2
 800a624:	00db      	lsls	r3, r3, #3
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	440b      	add	r3, r1
 800a62c:	333d      	adds	r3, #61	; 0x3d
 800a62e:	2201      	movs	r2, #1
 800a630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a632:	7bfa      	ldrb	r2, [r7, #15]
 800a634:	6879      	ldr	r1, [r7, #4]
 800a636:	4613      	mov	r3, r2
 800a638:	00db      	lsls	r3, r3, #3
 800a63a:	4413      	add	r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	440b      	add	r3, r1
 800a640:	333c      	adds	r3, #60	; 0x3c
 800a642:	7bfa      	ldrb	r2, [r7, #15]
 800a644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a646:	7bfa      	ldrb	r2, [r7, #15]
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	b298      	uxth	r0, r3
 800a64c:	6879      	ldr	r1, [r7, #4]
 800a64e:	4613      	mov	r3, r2
 800a650:	00db      	lsls	r3, r3, #3
 800a652:	4413      	add	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	440b      	add	r3, r1
 800a658:	3344      	adds	r3, #68	; 0x44
 800a65a:	4602      	mov	r2, r0
 800a65c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a65e:	7bfa      	ldrb	r2, [r7, #15]
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	4613      	mov	r3, r2
 800a664:	00db      	lsls	r3, r3, #3
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	440b      	add	r3, r1
 800a66c:	3340      	adds	r3, #64	; 0x40
 800a66e:	2200      	movs	r2, #0
 800a670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a672:	7bfa      	ldrb	r2, [r7, #15]
 800a674:	6879      	ldr	r1, [r7, #4]
 800a676:	4613      	mov	r3, r2
 800a678:	00db      	lsls	r3, r3, #3
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	440b      	add	r3, r1
 800a680:	3348      	adds	r3, #72	; 0x48
 800a682:	2200      	movs	r2, #0
 800a684:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a686:	7bfa      	ldrb	r2, [r7, #15]
 800a688:	6879      	ldr	r1, [r7, #4]
 800a68a:	4613      	mov	r3, r2
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	4413      	add	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	440b      	add	r3, r1
 800a694:	334c      	adds	r3, #76	; 0x4c
 800a696:	2200      	movs	r2, #0
 800a698:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a69a:	7bfa      	ldrb	r2, [r7, #15]
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	00db      	lsls	r3, r3, #3
 800a6a2:	4413      	add	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	3354      	adds	r3, #84	; 0x54
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	73fb      	strb	r3, [r7, #15]
 800a6b4:	7bfa      	ldrb	r2, [r7, #15]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d3af      	bcc.n	800a61e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6be:	2300      	movs	r3, #0
 800a6c0:	73fb      	strb	r3, [r7, #15]
 800a6c2:	e044      	b.n	800a74e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a6c4:	7bfa      	ldrb	r2, [r7, #15]
 800a6c6:	6879      	ldr	r1, [r7, #4]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	440b      	add	r3, r1
 800a6d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a6da:	7bfa      	ldrb	r2, [r7, #15]
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	440b      	add	r3, r1
 800a6e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a6ec:	7bfa      	ldrb	r2, [r7, #15]
 800a6ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a6f0:	7bfa      	ldrb	r2, [r7, #15]
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	4413      	add	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	440b      	add	r3, r1
 800a6fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a702:	2200      	movs	r2, #0
 800a704:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a706:	7bfa      	ldrb	r2, [r7, #15]
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	4613      	mov	r3, r2
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	4413      	add	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	440b      	add	r3, r1
 800a714:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a718:	2200      	movs	r2, #0
 800a71a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a71c:	7bfa      	ldrb	r2, [r7, #15]
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	4613      	mov	r3, r2
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	4413      	add	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	440b      	add	r3, r1
 800a72a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a732:	7bfa      	ldrb	r2, [r7, #15]
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	4613      	mov	r3, r2
 800a738:	00db      	lsls	r3, r3, #3
 800a73a:	4413      	add	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
 800a740:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a744:	2200      	movs	r2, #0
 800a746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	3301      	adds	r3, #1
 800a74c:	73fb      	strb	r3, [r7, #15]
 800a74e:	7bfa      	ldrb	r2, [r7, #15]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	429a      	cmp	r2, r3
 800a756:	d3b5      	bcc.n	800a6c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	603b      	str	r3, [r7, #0]
 800a75e:	687e      	ldr	r6, [r7, #4]
 800a760:	466d      	mov	r5, sp
 800a762:	f106 0410 	add.w	r4, r6, #16
 800a766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a76a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a76c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a76e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a772:	e885 0003 	stmia.w	r5, {r0, r1}
 800a776:	1d33      	adds	r3, r6, #4
 800a778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a77a:	6838      	ldr	r0, [r7, #0]
 800a77c:	f005 f8fe 	bl	800f97c <USB_DevInit>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d005      	beq.n	800a792 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2202      	movs	r2, #2
 800a78a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	e014      	b.n	800a7bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d102      	bne.n	800a7b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f80a 	bl	800a7c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f005 fabc 	bl	800fd32 <USB_DevDisconnect>

  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7f2:	4b05      	ldr	r3, [pc, #20]	; (800a808 <HAL_PCDEx_ActivateLPM+0x44>)
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	10000003 	.word	0x10000003

0800a80c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a814:	4b29      	ldr	r3, [pc, #164]	; (800a8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	2b06      	cmp	r3, #6
 800a81e:	d00a      	beq.n	800a836 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a820:	4b26      	ldr	r3, [pc, #152]	; (800a8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d001      	beq.n	800a832 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e040      	b.n	800a8b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	e03e      	b.n	800a8b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a836:	4b21      	ldr	r3, [pc, #132]	; (800a8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a83e:	491f      	ldr	r1, [pc, #124]	; (800a8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4313      	orrs	r3, r2
 800a844:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a846:	f7fc fcc5 	bl	80071d4 <HAL_GetTick>
 800a84a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a84c:	e009      	b.n	800a862 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a84e:	f7fc fcc1 	bl	80071d4 <HAL_GetTick>
 800a852:	4602      	mov	r2, r0
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a85c:	d901      	bls.n	800a862 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e028      	b.n	800a8b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a862:	4b16      	ldr	r3, [pc, #88]	; (800a8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a86a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a86e:	d1ee      	bne.n	800a84e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b1e      	cmp	r3, #30
 800a874:	d008      	beq.n	800a888 <HAL_PWREx_ConfigSupply+0x7c>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b2e      	cmp	r3, #46	; 0x2e
 800a87a:	d005      	beq.n	800a888 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b1d      	cmp	r3, #29
 800a880:	d002      	beq.n	800a888 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b2d      	cmp	r3, #45	; 0x2d
 800a886:	d114      	bne.n	800a8b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a888:	f7fc fca4 	bl	80071d4 <HAL_GetTick>
 800a88c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a88e:	e009      	b.n	800a8a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a890:	f7fc fca0 	bl	80071d4 <HAL_GetTick>
 800a894:	4602      	mov	r2, r0
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a89e:	d901      	bls.n	800a8a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e007      	b.n	800a8b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b0:	d1ee      	bne.n	800a890 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	58024800 	.word	0x58024800

0800a8c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a8c4:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	4a04      	ldr	r2, [pc, #16]	; (800a8dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a8ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8ce:	60d3      	str	r3, [r2, #12]
}
 800a8d0:	bf00      	nop
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	58024800 	.word	0x58024800

0800a8e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08c      	sub	sp, #48	; 0x30
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d102      	bne.n	800a8f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	f000 bc1d 	b.w	800b12e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 8087 	beq.w	800aa10 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a902:	4b99      	ldr	r3, [pc, #612]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a90a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a90c:	4b96      	ldr	r3, [pc, #600]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a910:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	2b10      	cmp	r3, #16
 800a916:	d007      	beq.n	800a928 <HAL_RCC_OscConfig+0x48>
 800a918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91a:	2b18      	cmp	r3, #24
 800a91c:	d110      	bne.n	800a940 <HAL_RCC_OscConfig+0x60>
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	f003 0303 	and.w	r3, r3, #3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d10b      	bne.n	800a940 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a928:	4b8f      	ldr	r3, [pc, #572]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d06c      	beq.n	800aa0e <HAL_RCC_OscConfig+0x12e>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d168      	bne.n	800aa0e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e3f6      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a948:	d106      	bne.n	800a958 <HAL_RCC_OscConfig+0x78>
 800a94a:	4b87      	ldr	r3, [pc, #540]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a86      	ldr	r2, [pc, #536]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	e02e      	b.n	800a9b6 <HAL_RCC_OscConfig+0xd6>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10c      	bne.n	800a97a <HAL_RCC_OscConfig+0x9a>
 800a960:	4b81      	ldr	r3, [pc, #516]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a80      	ldr	r2, [pc, #512]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	4b7e      	ldr	r3, [pc, #504]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a7d      	ldr	r2, [pc, #500]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a976:	6013      	str	r3, [r2, #0]
 800a978:	e01d      	b.n	800a9b6 <HAL_RCC_OscConfig+0xd6>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a982:	d10c      	bne.n	800a99e <HAL_RCC_OscConfig+0xbe>
 800a984:	4b78      	ldr	r3, [pc, #480]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a77      	ldr	r2, [pc, #476]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a98a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	4b75      	ldr	r3, [pc, #468]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a74      	ldr	r2, [pc, #464]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	e00b      	b.n	800a9b6 <HAL_RCC_OscConfig+0xd6>
 800a99e:	4b72      	ldr	r3, [pc, #456]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a71      	ldr	r2, [pc, #452]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a9a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	4b6f      	ldr	r3, [pc, #444]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a6e      	ldr	r2, [pc, #440]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a9b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d013      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9be:	f7fc fc09 	bl	80071d4 <HAL_GetTick>
 800a9c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9c4:	e008      	b.n	800a9d8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9c6:	f7fc fc05 	bl	80071d4 <HAL_GetTick>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	2b64      	cmp	r3, #100	; 0x64
 800a9d2:	d901      	bls.n	800a9d8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e3aa      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9d8:	4b63      	ldr	r3, [pc, #396]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d0f0      	beq.n	800a9c6 <HAL_RCC_OscConfig+0xe6>
 800a9e4:	e014      	b.n	800aa10 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e6:	f7fc fbf5 	bl	80071d4 <HAL_GetTick>
 800a9ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a9ec:	e008      	b.n	800aa00 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9ee:	f7fc fbf1 	bl	80071d4 <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	2b64      	cmp	r3, #100	; 0x64
 800a9fa:	d901      	bls.n	800aa00 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e396      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa00:	4b59      	ldr	r3, [pc, #356]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1f0      	bne.n	800a9ee <HAL_RCC_OscConfig+0x10e>
 800aa0c:	e000      	b.n	800aa10 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0302 	and.w	r3, r3, #2
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 80cb 	beq.w	800abb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa1e:	4b52      	ldr	r3, [pc, #328]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa26:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa28:	4b4f      	ldr	r3, [pc, #316]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aa2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d007      	beq.n	800aa44 <HAL_RCC_OscConfig+0x164>
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	2b18      	cmp	r3, #24
 800aa38:	d156      	bne.n	800aae8 <HAL_RCC_OscConfig+0x208>
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	f003 0303 	and.w	r3, r3, #3
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d151      	bne.n	800aae8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa44:	4b48      	ldr	r3, [pc, #288]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 0304 	and.w	r3, r3, #4
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d005      	beq.n	800aa5c <HAL_RCC_OscConfig+0x17c>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e368      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa5c:	4b42      	ldr	r3, [pc, #264]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f023 0219 	bic.w	r2, r3, #25
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	493f      	ldr	r1, [pc, #252]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aa6e:	f7fc fbb1 	bl	80071d4 <HAL_GetTick>
 800aa72:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa74:	e008      	b.n	800aa88 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa76:	f7fc fbad 	bl	80071d4 <HAL_GetTick>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d901      	bls.n	800aa88 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e352      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa88:	4b37      	ldr	r3, [pc, #220]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0304 	and.w	r3, r3, #4
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0f0      	beq.n	800aa76 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa94:	f7fc fbce 	bl	8007234 <HAL_GetREVID>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	f241 0203 	movw	r2, #4099	; 0x1003
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d817      	bhi.n	800aad2 <HAL_RCC_OscConfig+0x1f2>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	2b40      	cmp	r3, #64	; 0x40
 800aaa8:	d108      	bne.n	800aabc <HAL_RCC_OscConfig+0x1dc>
 800aaaa:	4b2f      	ldr	r3, [pc, #188]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800aab2:	4a2d      	ldr	r2, [pc, #180]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aab8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aaba:	e07b      	b.n	800abb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aabc:	4b2a      	ldr	r3, [pc, #168]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	031b      	lsls	r3, r3, #12
 800aaca:	4927      	ldr	r1, [pc, #156]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aacc:	4313      	orrs	r3, r2
 800aace:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aad0:	e070      	b.n	800abb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aad2:	4b25      	ldr	r3, [pc, #148]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	061b      	lsls	r3, r3, #24
 800aae0:	4921      	ldr	r1, [pc, #132]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aae2:	4313      	orrs	r3, r2
 800aae4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aae6:	e065      	b.n	800abb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d048      	beq.n	800ab82 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aaf0:	4b1d      	ldr	r3, [pc, #116]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f023 0219 	bic.w	r2, r3, #25
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	491a      	ldr	r1, [pc, #104]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800aafe:	4313      	orrs	r3, r2
 800ab00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab02:	f7fc fb67 	bl	80071d4 <HAL_GetTick>
 800ab06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab08:	e008      	b.n	800ab1c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab0a:	f7fc fb63 	bl	80071d4 <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d901      	bls.n	800ab1c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e308      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab1c:	4b12      	ldr	r3, [pc, #72]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0f0      	beq.n	800ab0a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab28:	f7fc fb84 	bl	8007234 <HAL_GetREVID>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d81a      	bhi.n	800ab6c <HAL_RCC_OscConfig+0x28c>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	2b40      	cmp	r3, #64	; 0x40
 800ab3c:	d108      	bne.n	800ab50 <HAL_RCC_OscConfig+0x270>
 800ab3e:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ab46:	4a08      	ldr	r2, [pc, #32]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800ab48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab4c:	6053      	str	r3, [r2, #4]
 800ab4e:	e031      	b.n	800abb4 <HAL_RCC_OscConfig+0x2d4>
 800ab50:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	031b      	lsls	r3, r3, #12
 800ab5e:	4902      	ldr	r1, [pc, #8]	; (800ab68 <HAL_RCC_OscConfig+0x288>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	604b      	str	r3, [r1, #4]
 800ab64:	e026      	b.n	800abb4 <HAL_RCC_OscConfig+0x2d4>
 800ab66:	bf00      	nop
 800ab68:	58024400 	.word	0x58024400
 800ab6c:	4b9a      	ldr	r3, [pc, #616]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	061b      	lsls	r3, r3, #24
 800ab7a:	4997      	ldr	r1, [pc, #604]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	604b      	str	r3, [r1, #4]
 800ab80:	e018      	b.n	800abb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab82:	4b95      	ldr	r3, [pc, #596]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a94      	ldr	r2, [pc, #592]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ab88:	f023 0301 	bic.w	r3, r3, #1
 800ab8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab8e:	f7fc fb21 	bl	80071d4 <HAL_GetTick>
 800ab92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab94:	e008      	b.n	800aba8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab96:	f7fc fb1d 	bl	80071d4 <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d901      	bls.n	800aba8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e2c2      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aba8:	4b8b      	ldr	r3, [pc, #556]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 0304 	and.w	r3, r3, #4
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1f0      	bne.n	800ab96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0310 	and.w	r3, r3, #16
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 80a9 	beq.w	800ad14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abc2:	4b85      	ldr	r3, [pc, #532]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800abcc:	4b82      	ldr	r3, [pc, #520]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	2b08      	cmp	r3, #8
 800abd6:	d007      	beq.n	800abe8 <HAL_RCC_OscConfig+0x308>
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	2b18      	cmp	r3, #24
 800abdc:	d13a      	bne.n	800ac54 <HAL_RCC_OscConfig+0x374>
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f003 0303 	and.w	r3, r3, #3
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d135      	bne.n	800ac54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800abe8:	4b7b      	ldr	r3, [pc, #492]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d005      	beq.n	800ac00 <HAL_RCC_OscConfig+0x320>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	2b80      	cmp	r3, #128	; 0x80
 800abfa:	d001      	beq.n	800ac00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e296      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac00:	f7fc fb18 	bl	8007234 <HAL_GetREVID>
 800ac04:	4603      	mov	r3, r0
 800ac06:	f241 0203 	movw	r2, #4099	; 0x1003
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d817      	bhi.n	800ac3e <HAL_RCC_OscConfig+0x35e>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	d108      	bne.n	800ac28 <HAL_RCC_OscConfig+0x348>
 800ac16:	4b70      	ldr	r3, [pc, #448]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ac1e:	4a6e      	ldr	r2, [pc, #440]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ac20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac24:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac26:	e075      	b.n	800ad14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac28:	4b6b      	ldr	r3, [pc, #428]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	069b      	lsls	r3, r3, #26
 800ac36:	4968      	ldr	r1, [pc, #416]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac3c:	e06a      	b.n	800ad14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac3e:	4b66      	ldr	r3, [pc, #408]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	061b      	lsls	r3, r3, #24
 800ac4c:	4962      	ldr	r1, [pc, #392]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac52:	e05f      	b.n	800ad14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d042      	beq.n	800ace2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ac5c:	4b5e      	ldr	r3, [pc, #376]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a5d      	ldr	r2, [pc, #372]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ac62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac68:	f7fc fab4 	bl	80071d4 <HAL_GetTick>
 800ac6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac6e:	e008      	b.n	800ac82 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ac70:	f7fc fab0 	bl	80071d4 <HAL_GetTick>
 800ac74:	4602      	mov	r2, r0
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	1ad3      	subs	r3, r2, r3
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d901      	bls.n	800ac82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	e255      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac82:	4b55      	ldr	r3, [pc, #340]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0f0      	beq.n	800ac70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac8e:	f7fc fad1 	bl	8007234 <HAL_GetREVID>
 800ac92:	4603      	mov	r3, r0
 800ac94:	f241 0203 	movw	r2, #4099	; 0x1003
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d817      	bhi.n	800accc <HAL_RCC_OscConfig+0x3ec>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
 800aca0:	2b20      	cmp	r3, #32
 800aca2:	d108      	bne.n	800acb6 <HAL_RCC_OscConfig+0x3d6>
 800aca4:	4b4c      	ldr	r3, [pc, #304]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800acac:	4a4a      	ldr	r2, [pc, #296]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800acae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acb2:	6053      	str	r3, [r2, #4]
 800acb4:	e02e      	b.n	800ad14 <HAL_RCC_OscConfig+0x434>
 800acb6:	4b48      	ldr	r3, [pc, #288]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	069b      	lsls	r3, r3, #26
 800acc4:	4944      	ldr	r1, [pc, #272]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800acc6:	4313      	orrs	r3, r2
 800acc8:	604b      	str	r3, [r1, #4]
 800acca:	e023      	b.n	800ad14 <HAL_RCC_OscConfig+0x434>
 800accc:	4b42      	ldr	r3, [pc, #264]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	061b      	lsls	r3, r3, #24
 800acda:	493f      	ldr	r1, [pc, #252]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800acdc:	4313      	orrs	r3, r2
 800acde:	60cb      	str	r3, [r1, #12]
 800ace0:	e018      	b.n	800ad14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ace2:	4b3d      	ldr	r3, [pc, #244]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a3c      	ldr	r2, [pc, #240]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ace8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acee:	f7fc fa71 	bl	80071d4 <HAL_GetTick>
 800acf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800acf4:	e008      	b.n	800ad08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800acf6:	f7fc fa6d 	bl	80071d4 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d901      	bls.n	800ad08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e212      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad08:	4b33      	ldr	r3, [pc, #204]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1f0      	bne.n	800acf6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0308 	and.w	r3, r3, #8
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d036      	beq.n	800ad8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d019      	beq.n	800ad5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad28:	4b2b      	ldr	r3, [pc, #172]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ad2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad2c:	4a2a      	ldr	r2, [pc, #168]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ad2e:	f043 0301 	orr.w	r3, r3, #1
 800ad32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad34:	f7fc fa4e 	bl	80071d4 <HAL_GetTick>
 800ad38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad3a:	e008      	b.n	800ad4e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ad3c:	f7fc fa4a 	bl	80071d4 <HAL_GetTick>
 800ad40:	4602      	mov	r2, r0
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d901      	bls.n	800ad4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e1ef      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad4e:	4b22      	ldr	r3, [pc, #136]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ad50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad52:	f003 0302 	and.w	r3, r3, #2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d0f0      	beq.n	800ad3c <HAL_RCC_OscConfig+0x45c>
 800ad5a:	e018      	b.n	800ad8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad5c:	4b1e      	ldr	r3, [pc, #120]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ad5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad60:	4a1d      	ldr	r2, [pc, #116]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ad62:	f023 0301 	bic.w	r3, r3, #1
 800ad66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad68:	f7fc fa34 	bl	80071d4 <HAL_GetTick>
 800ad6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ad6e:	e008      	b.n	800ad82 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ad70:	f7fc fa30 	bl	80071d4 <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d901      	bls.n	800ad82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e1d5      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ad82:	4b15      	ldr	r3, [pc, #84]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ad84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1f0      	bne.n	800ad70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0320 	and.w	r3, r3, #32
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d039      	beq.n	800ae0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d01c      	beq.n	800addc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ada2:	4b0d      	ldr	r3, [pc, #52]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a0c      	ldr	r2, [pc, #48]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800ada8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800adac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800adae:	f7fc fa11 	bl	80071d4 <HAL_GetTick>
 800adb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800adb4:	e008      	b.n	800adc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800adb6:	f7fc fa0d 	bl	80071d4 <HAL_GetTick>
 800adba:	4602      	mov	r2, r0
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d901      	bls.n	800adc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e1b2      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800adc8:	4b03      	ldr	r3, [pc, #12]	; (800add8 <HAL_RCC_OscConfig+0x4f8>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0f0      	beq.n	800adb6 <HAL_RCC_OscConfig+0x4d6>
 800add4:	e01b      	b.n	800ae0e <HAL_RCC_OscConfig+0x52e>
 800add6:	bf00      	nop
 800add8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800addc:	4b9b      	ldr	r3, [pc, #620]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a9a      	ldr	r2, [pc, #616]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ade2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ade6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ade8:	f7fc f9f4 	bl	80071d4 <HAL_GetTick>
 800adec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800adee:	e008      	b.n	800ae02 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800adf0:	f7fc f9f0 	bl	80071d4 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d901      	bls.n	800ae02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e195      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae02:	4b92      	ldr	r3, [pc, #584]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1f0      	bne.n	800adf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 0304 	and.w	r3, r3, #4
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 8081 	beq.w	800af1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ae1c:	4b8c      	ldr	r3, [pc, #560]	; (800b050 <HAL_RCC_OscConfig+0x770>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a8b      	ldr	r2, [pc, #556]	; (800b050 <HAL_RCC_OscConfig+0x770>)
 800ae22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae28:	f7fc f9d4 	bl	80071d4 <HAL_GetTick>
 800ae2c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae2e:	e008      	b.n	800ae42 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ae30:	f7fc f9d0 	bl	80071d4 <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	2b64      	cmp	r3, #100	; 0x64
 800ae3c:	d901      	bls.n	800ae42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e175      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae42:	4b83      	ldr	r3, [pc, #524]	; (800b050 <HAL_RCC_OscConfig+0x770>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0f0      	beq.n	800ae30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d106      	bne.n	800ae64 <HAL_RCC_OscConfig+0x584>
 800ae56:	4b7d      	ldr	r3, [pc, #500]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ae58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae5a:	4a7c      	ldr	r2, [pc, #496]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ae5c:	f043 0301 	orr.w	r3, r3, #1
 800ae60:	6713      	str	r3, [r2, #112]	; 0x70
 800ae62:	e02d      	b.n	800aec0 <HAL_RCC_OscConfig+0x5e0>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10c      	bne.n	800ae86 <HAL_RCC_OscConfig+0x5a6>
 800ae6c:	4b77      	ldr	r3, [pc, #476]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ae6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae70:	4a76      	ldr	r2, [pc, #472]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ae72:	f023 0301 	bic.w	r3, r3, #1
 800ae76:	6713      	str	r3, [r2, #112]	; 0x70
 800ae78:	4b74      	ldr	r3, [pc, #464]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ae7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae7c:	4a73      	ldr	r2, [pc, #460]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ae7e:	f023 0304 	bic.w	r3, r3, #4
 800ae82:	6713      	str	r3, [r2, #112]	; 0x70
 800ae84:	e01c      	b.n	800aec0 <HAL_RCC_OscConfig+0x5e0>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	2b05      	cmp	r3, #5
 800ae8c:	d10c      	bne.n	800aea8 <HAL_RCC_OscConfig+0x5c8>
 800ae8e:	4b6f      	ldr	r3, [pc, #444]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ae90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae92:	4a6e      	ldr	r2, [pc, #440]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ae94:	f043 0304 	orr.w	r3, r3, #4
 800ae98:	6713      	str	r3, [r2, #112]	; 0x70
 800ae9a:	4b6c      	ldr	r3, [pc, #432]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800ae9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae9e:	4a6b      	ldr	r2, [pc, #428]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800aea0:	f043 0301 	orr.w	r3, r3, #1
 800aea4:	6713      	str	r3, [r2, #112]	; 0x70
 800aea6:	e00b      	b.n	800aec0 <HAL_RCC_OscConfig+0x5e0>
 800aea8:	4b68      	ldr	r3, [pc, #416]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800aeaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeac:	4a67      	ldr	r2, [pc, #412]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800aeae:	f023 0301 	bic.w	r3, r3, #1
 800aeb2:	6713      	str	r3, [r2, #112]	; 0x70
 800aeb4:	4b65      	ldr	r3, [pc, #404]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800aeb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeb8:	4a64      	ldr	r2, [pc, #400]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800aeba:	f023 0304 	bic.w	r3, r3, #4
 800aebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d015      	beq.n	800aef4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aec8:	f7fc f984 	bl	80071d4 <HAL_GetTick>
 800aecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aece:	e00a      	b.n	800aee6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aed0:	f7fc f980 	bl	80071d4 <HAL_GetTick>
 800aed4:	4602      	mov	r2, r0
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	f241 3288 	movw	r2, #5000	; 0x1388
 800aede:	4293      	cmp	r3, r2
 800aee0:	d901      	bls.n	800aee6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e123      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aee6:	4b59      	ldr	r3, [pc, #356]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800aee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0ee      	beq.n	800aed0 <HAL_RCC_OscConfig+0x5f0>
 800aef2:	e014      	b.n	800af1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aef4:	f7fc f96e 	bl	80071d4 <HAL_GetTick>
 800aef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aefa:	e00a      	b.n	800af12 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aefc:	f7fc f96a 	bl	80071d4 <HAL_GetTick>
 800af00:	4602      	mov	r2, r0
 800af02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	f241 3288 	movw	r2, #5000	; 0x1388
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d901      	bls.n	800af12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	e10d      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af12:	4b4e      	ldr	r3, [pc, #312]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800af14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af16:	f003 0302 	and.w	r3, r3, #2
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1ee      	bne.n	800aefc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 8102 	beq.w	800b12c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800af28:	4b48      	ldr	r3, [pc, #288]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af30:	2b18      	cmp	r3, #24
 800af32:	f000 80bd 	beq.w	800b0b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	f040 809e 	bne.w	800b07c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af40:	4b42      	ldr	r3, [pc, #264]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a41      	ldr	r2, [pc, #260]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800af46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af4c:	f7fc f942 	bl	80071d4 <HAL_GetTick>
 800af50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af52:	e008      	b.n	800af66 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af54:	f7fc f93e 	bl	80071d4 <HAL_GetTick>
 800af58:	4602      	mov	r2, r0
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d901      	bls.n	800af66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e0e3      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af66:	4b39      	ldr	r3, [pc, #228]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1f0      	bne.n	800af54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af72:	4b36      	ldr	r3, [pc, #216]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800af74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af76:	4b37      	ldr	r3, [pc, #220]	; (800b054 <HAL_RCC_OscConfig+0x774>)
 800af78:	4013      	ands	r3, r2
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af82:	0112      	lsls	r2, r2, #4
 800af84:	430a      	orrs	r2, r1
 800af86:	4931      	ldr	r1, [pc, #196]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800af88:	4313      	orrs	r3, r2
 800af8a:	628b      	str	r3, [r1, #40]	; 0x28
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af90:	3b01      	subs	r3, #1
 800af92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af9a:	3b01      	subs	r3, #1
 800af9c:	025b      	lsls	r3, r3, #9
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	431a      	orrs	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa6:	3b01      	subs	r3, #1
 800afa8:	041b      	lsls	r3, r3, #16
 800afaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800afae:	431a      	orrs	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb4:	3b01      	subs	r3, #1
 800afb6:	061b      	lsls	r3, r3, #24
 800afb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800afbc:	4923      	ldr	r1, [pc, #140]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800afbe:	4313      	orrs	r3, r2
 800afc0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800afc2:	4b22      	ldr	r3, [pc, #136]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc6:	4a21      	ldr	r2, [pc, #132]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800afc8:	f023 0301 	bic.w	r3, r3, #1
 800afcc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800afce:	4b1f      	ldr	r3, [pc, #124]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800afd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afd2:	4b21      	ldr	r3, [pc, #132]	; (800b058 <HAL_RCC_OscConfig+0x778>)
 800afd4:	4013      	ands	r3, r2
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800afda:	00d2      	lsls	r2, r2, #3
 800afdc:	491b      	ldr	r1, [pc, #108]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800afde:	4313      	orrs	r3, r2
 800afe0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800afe2:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800afe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe6:	f023 020c 	bic.w	r2, r3, #12
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afee:	4917      	ldr	r1, [pc, #92]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800aff0:	4313      	orrs	r3, r2
 800aff2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aff4:	4b15      	ldr	r3, [pc, #84]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800aff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff8:	f023 0202 	bic.w	r2, r3, #2
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b000:	4912      	ldr	r1, [pc, #72]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b002:	4313      	orrs	r3, r2
 800b004:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b006:	4b11      	ldr	r3, [pc, #68]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00a:	4a10      	ldr	r2, [pc, #64]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b00c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b012:	4b0e      	ldr	r3, [pc, #56]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b016:	4a0d      	ldr	r2, [pc, #52]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b01c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b01e:	4b0b      	ldr	r3, [pc, #44]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b022:	4a0a      	ldr	r2, [pc, #40]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b02a:	4b08      	ldr	r3, [pc, #32]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02e:	4a07      	ldr	r2, [pc, #28]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b030:	f043 0301 	orr.w	r3, r3, #1
 800b034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b036:	4b05      	ldr	r3, [pc, #20]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a04      	ldr	r2, [pc, #16]	; (800b04c <HAL_RCC_OscConfig+0x76c>)
 800b03c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b042:	f7fc f8c7 	bl	80071d4 <HAL_GetTick>
 800b046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b048:	e011      	b.n	800b06e <HAL_RCC_OscConfig+0x78e>
 800b04a:	bf00      	nop
 800b04c:	58024400 	.word	0x58024400
 800b050:	58024800 	.word	0x58024800
 800b054:	fffffc0c 	.word	0xfffffc0c
 800b058:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b05c:	f7fc f8ba 	bl	80071d4 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	2b02      	cmp	r3, #2
 800b068:	d901      	bls.n	800b06e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e05f      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b06e:	4b32      	ldr	r3, [pc, #200]	; (800b138 <HAL_RCC_OscConfig+0x858>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d0f0      	beq.n	800b05c <HAL_RCC_OscConfig+0x77c>
 800b07a:	e057      	b.n	800b12c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b07c:	4b2e      	ldr	r3, [pc, #184]	; (800b138 <HAL_RCC_OscConfig+0x858>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a2d      	ldr	r2, [pc, #180]	; (800b138 <HAL_RCC_OscConfig+0x858>)
 800b082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b088:	f7fc f8a4 	bl	80071d4 <HAL_GetTick>
 800b08c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b08e:	e008      	b.n	800b0a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b090:	f7fc f8a0 	bl	80071d4 <HAL_GetTick>
 800b094:	4602      	mov	r2, r0
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d901      	bls.n	800b0a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e045      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0a2:	4b25      	ldr	r3, [pc, #148]	; (800b138 <HAL_RCC_OscConfig+0x858>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1f0      	bne.n	800b090 <HAL_RCC_OscConfig+0x7b0>
 800b0ae:	e03d      	b.n	800b12c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b0b0:	4b21      	ldr	r3, [pc, #132]	; (800b138 <HAL_RCC_OscConfig+0x858>)
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b0b6:	4b20      	ldr	r3, [pc, #128]	; (800b138 <HAL_RCC_OscConfig+0x858>)
 800b0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d031      	beq.n	800b128 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	f003 0203 	and.w	r2, r3, #3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d12a      	bne.n	800b128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	091b      	lsrs	r3, r3, #4
 800b0d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d122      	bne.n	800b128 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d11a      	bne.n	800b128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	0a5b      	lsrs	r3, r3, #9
 800b0f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b100:	429a      	cmp	r2, r3
 800b102:	d111      	bne.n	800b128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	0c1b      	lsrs	r3, r3, #16
 800b108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b110:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b112:	429a      	cmp	r2, r3
 800b114:	d108      	bne.n	800b128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	0e1b      	lsrs	r3, r3, #24
 800b11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b122:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b124:	429a      	cmp	r2, r3
 800b126:	d001      	beq.n	800b12c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	e000      	b.n	800b12e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3730      	adds	r7, #48	; 0x30
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	58024400 	.word	0x58024400

0800b13c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	e19c      	b.n	800b48a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b150:	4b8a      	ldr	r3, [pc, #552]	; (800b37c <HAL_RCC_ClockConfig+0x240>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 030f 	and.w	r3, r3, #15
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d910      	bls.n	800b180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b15e:	4b87      	ldr	r3, [pc, #540]	; (800b37c <HAL_RCC_ClockConfig+0x240>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f023 020f 	bic.w	r2, r3, #15
 800b166:	4985      	ldr	r1, [pc, #532]	; (800b37c <HAL_RCC_ClockConfig+0x240>)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b16e:	4b83      	ldr	r3, [pc, #524]	; (800b37c <HAL_RCC_ClockConfig+0x240>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 030f 	and.w	r3, r3, #15
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d001      	beq.n	800b180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e184      	b.n	800b48a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0304 	and.w	r3, r3, #4
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d010      	beq.n	800b1ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	691a      	ldr	r2, [r3, #16]
 800b190:	4b7b      	ldr	r3, [pc, #492]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b198:	429a      	cmp	r2, r3
 800b19a:	d908      	bls.n	800b1ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b19c:	4b78      	ldr	r3, [pc, #480]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	4975      	ldr	r1, [pc, #468]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0308 	and.w	r3, r3, #8
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d010      	beq.n	800b1dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	695a      	ldr	r2, [r3, #20]
 800b1be:	4b70      	ldr	r3, [pc, #448]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d908      	bls.n	800b1dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b1ca:	4b6d      	ldr	r3, [pc, #436]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b1cc:	69db      	ldr	r3, [r3, #28]
 800b1ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	695b      	ldr	r3, [r3, #20]
 800b1d6:	496a      	ldr	r1, [pc, #424]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 0310 	and.w	r3, r3, #16
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d010      	beq.n	800b20a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	699a      	ldr	r2, [r3, #24]
 800b1ec:	4b64      	ldr	r3, [pc, #400]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d908      	bls.n	800b20a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b1f8:	4b61      	ldr	r3, [pc, #388]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	495e      	ldr	r1, [pc, #376]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b206:	4313      	orrs	r3, r2
 800b208:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 0320 	and.w	r3, r3, #32
 800b212:	2b00      	cmp	r3, #0
 800b214:	d010      	beq.n	800b238 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69da      	ldr	r2, [r3, #28]
 800b21a:	4b59      	ldr	r3, [pc, #356]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b222:	429a      	cmp	r2, r3
 800b224:	d908      	bls.n	800b238 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b226:	4b56      	ldr	r3, [pc, #344]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	4953      	ldr	r1, [pc, #332]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b234:	4313      	orrs	r3, r2
 800b236:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 0302 	and.w	r3, r3, #2
 800b240:	2b00      	cmp	r3, #0
 800b242:	d010      	beq.n	800b266 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68da      	ldr	r2, [r3, #12]
 800b248:	4b4d      	ldr	r3, [pc, #308]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	f003 030f 	and.w	r3, r3, #15
 800b250:	429a      	cmp	r2, r3
 800b252:	d908      	bls.n	800b266 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b254:	4b4a      	ldr	r3, [pc, #296]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	f023 020f 	bic.w	r2, r3, #15
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	4947      	ldr	r1, [pc, #284]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b262:	4313      	orrs	r3, r2
 800b264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d055      	beq.n	800b31e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b272:	4b43      	ldr	r3, [pc, #268]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	4940      	ldr	r1, [pc, #256]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b280:	4313      	orrs	r3, r2
 800b282:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d107      	bne.n	800b29c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b28c:	4b3c      	ldr	r3, [pc, #240]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d121      	bne.n	800b2dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e0f6      	b.n	800b48a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d107      	bne.n	800b2b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b2a4:	4b36      	ldr	r3, [pc, #216]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d115      	bne.n	800b2dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e0ea      	b.n	800b48a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d107      	bne.n	800b2cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b2bc:	4b30      	ldr	r3, [pc, #192]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d109      	bne.n	800b2dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e0de      	b.n	800b48a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b2cc:	4b2c      	ldr	r3, [pc, #176]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e0d6      	b.n	800b48a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b2dc:	4b28      	ldr	r3, [pc, #160]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	f023 0207 	bic.w	r2, r3, #7
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	4925      	ldr	r1, [pc, #148]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2ee:	f7fb ff71 	bl	80071d4 <HAL_GetTick>
 800b2f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2f4:	e00a      	b.n	800b30c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2f6:	f7fb ff6d 	bl	80071d4 <HAL_GetTick>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	f241 3288 	movw	r2, #5000	; 0x1388
 800b304:	4293      	cmp	r3, r2
 800b306:	d901      	bls.n	800b30c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e0be      	b.n	800b48a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b30c:	4b1c      	ldr	r3, [pc, #112]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	00db      	lsls	r3, r3, #3
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d1eb      	bne.n	800b2f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0302 	and.w	r3, r3, #2
 800b326:	2b00      	cmp	r3, #0
 800b328:	d010      	beq.n	800b34c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	68da      	ldr	r2, [r3, #12]
 800b32e:	4b14      	ldr	r3, [pc, #80]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	f003 030f 	and.w	r3, r3, #15
 800b336:	429a      	cmp	r2, r3
 800b338:	d208      	bcs.n	800b34c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b33a:	4b11      	ldr	r3, [pc, #68]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	f023 020f 	bic.w	r2, r3, #15
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	490e      	ldr	r1, [pc, #56]	; (800b380 <HAL_RCC_ClockConfig+0x244>)
 800b348:	4313      	orrs	r3, r2
 800b34a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b34c:	4b0b      	ldr	r3, [pc, #44]	; (800b37c <HAL_RCC_ClockConfig+0x240>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f003 030f 	and.w	r3, r3, #15
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	429a      	cmp	r2, r3
 800b358:	d214      	bcs.n	800b384 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b35a:	4b08      	ldr	r3, [pc, #32]	; (800b37c <HAL_RCC_ClockConfig+0x240>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f023 020f 	bic.w	r2, r3, #15
 800b362:	4906      	ldr	r1, [pc, #24]	; (800b37c <HAL_RCC_ClockConfig+0x240>)
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	4313      	orrs	r3, r2
 800b368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b36a:	4b04      	ldr	r3, [pc, #16]	; (800b37c <HAL_RCC_ClockConfig+0x240>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 030f 	and.w	r3, r3, #15
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	429a      	cmp	r2, r3
 800b376:	d005      	beq.n	800b384 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	e086      	b.n	800b48a <HAL_RCC_ClockConfig+0x34e>
 800b37c:	52002000 	.word	0x52002000
 800b380:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d010      	beq.n	800b3b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	691a      	ldr	r2, [r3, #16]
 800b394:	4b3f      	ldr	r3, [pc, #252]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d208      	bcs.n	800b3b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b3a0:	4b3c      	ldr	r3, [pc, #240]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b3a2:	699b      	ldr	r3, [r3, #24]
 800b3a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	4939      	ldr	r1, [pc, #228]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 0308 	and.w	r3, r3, #8
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d010      	beq.n	800b3e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	695a      	ldr	r2, [r3, #20]
 800b3c2:	4b34      	ldr	r3, [pc, #208]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d208      	bcs.n	800b3e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b3ce:	4b31      	ldr	r3, [pc, #196]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b3d0:	69db      	ldr	r3, [r3, #28]
 800b3d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	492e      	ldr	r1, [pc, #184]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0310 	and.w	r3, r3, #16
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d010      	beq.n	800b40e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	699a      	ldr	r2, [r3, #24]
 800b3f0:	4b28      	ldr	r3, [pc, #160]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d208      	bcs.n	800b40e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b3fc:	4b25      	ldr	r3, [pc, #148]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b3fe:	69db      	ldr	r3, [r3, #28]
 800b400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	4922      	ldr	r1, [pc, #136]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b40a:	4313      	orrs	r3, r2
 800b40c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 0320 	and.w	r3, r3, #32
 800b416:	2b00      	cmp	r3, #0
 800b418:	d010      	beq.n	800b43c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	69da      	ldr	r2, [r3, #28]
 800b41e:	4b1d      	ldr	r3, [pc, #116]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b426:	429a      	cmp	r2, r3
 800b428:	d208      	bcs.n	800b43c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b42a:	4b1a      	ldr	r3, [pc, #104]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	69db      	ldr	r3, [r3, #28]
 800b436:	4917      	ldr	r1, [pc, #92]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b438:	4313      	orrs	r3, r2
 800b43a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b43c:	f000 f834 	bl	800b4a8 <HAL_RCC_GetSysClockFreq>
 800b440:	4602      	mov	r2, r0
 800b442:	4b14      	ldr	r3, [pc, #80]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	0a1b      	lsrs	r3, r3, #8
 800b448:	f003 030f 	and.w	r3, r3, #15
 800b44c:	4912      	ldr	r1, [pc, #72]	; (800b498 <HAL_RCC_ClockConfig+0x35c>)
 800b44e:	5ccb      	ldrb	r3, [r1, r3]
 800b450:	f003 031f 	and.w	r3, r3, #31
 800b454:	fa22 f303 	lsr.w	r3, r2, r3
 800b458:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b45a:	4b0e      	ldr	r3, [pc, #56]	; (800b494 <HAL_RCC_ClockConfig+0x358>)
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	f003 030f 	and.w	r3, r3, #15
 800b462:	4a0d      	ldr	r2, [pc, #52]	; (800b498 <HAL_RCC_ClockConfig+0x35c>)
 800b464:	5cd3      	ldrb	r3, [r2, r3]
 800b466:	f003 031f 	and.w	r3, r3, #31
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	fa22 f303 	lsr.w	r3, r2, r3
 800b470:	4a0a      	ldr	r2, [pc, #40]	; (800b49c <HAL_RCC_ClockConfig+0x360>)
 800b472:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b474:	4a0a      	ldr	r2, [pc, #40]	; (800b4a0 <HAL_RCC_ClockConfig+0x364>)
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b47a:	4b0a      	ldr	r3, [pc, #40]	; (800b4a4 <HAL_RCC_ClockConfig+0x368>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fb fe5e 	bl	8007140 <HAL_InitTick>
 800b484:	4603      	mov	r3, r0
 800b486:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	58024400 	.word	0x58024400
 800b498:	08010b64 	.word	0x08010b64
 800b49c:	24000008 	.word	0x24000008
 800b4a0:	24000004 	.word	0x24000004
 800b4a4:	2400001c 	.word	0x2400001c

0800b4a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b089      	sub	sp, #36	; 0x24
 800b4ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b4ae:	4bb3      	ldr	r3, [pc, #716]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4b6:	2b18      	cmp	r3, #24
 800b4b8:	f200 8155 	bhi.w	800b766 <HAL_RCC_GetSysClockFreq+0x2be>
 800b4bc:	a201      	add	r2, pc, #4	; (adr r2, 800b4c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c2:	bf00      	nop
 800b4c4:	0800b529 	.word	0x0800b529
 800b4c8:	0800b767 	.word	0x0800b767
 800b4cc:	0800b767 	.word	0x0800b767
 800b4d0:	0800b767 	.word	0x0800b767
 800b4d4:	0800b767 	.word	0x0800b767
 800b4d8:	0800b767 	.word	0x0800b767
 800b4dc:	0800b767 	.word	0x0800b767
 800b4e0:	0800b767 	.word	0x0800b767
 800b4e4:	0800b54f 	.word	0x0800b54f
 800b4e8:	0800b767 	.word	0x0800b767
 800b4ec:	0800b767 	.word	0x0800b767
 800b4f0:	0800b767 	.word	0x0800b767
 800b4f4:	0800b767 	.word	0x0800b767
 800b4f8:	0800b767 	.word	0x0800b767
 800b4fc:	0800b767 	.word	0x0800b767
 800b500:	0800b767 	.word	0x0800b767
 800b504:	0800b555 	.word	0x0800b555
 800b508:	0800b767 	.word	0x0800b767
 800b50c:	0800b767 	.word	0x0800b767
 800b510:	0800b767 	.word	0x0800b767
 800b514:	0800b767 	.word	0x0800b767
 800b518:	0800b767 	.word	0x0800b767
 800b51c:	0800b767 	.word	0x0800b767
 800b520:	0800b767 	.word	0x0800b767
 800b524:	0800b55b 	.word	0x0800b55b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b528:	4b94      	ldr	r3, [pc, #592]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 0320 	and.w	r3, r3, #32
 800b530:	2b00      	cmp	r3, #0
 800b532:	d009      	beq.n	800b548 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b534:	4b91      	ldr	r3, [pc, #580]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	08db      	lsrs	r3, r3, #3
 800b53a:	f003 0303 	and.w	r3, r3, #3
 800b53e:	4a90      	ldr	r2, [pc, #576]	; (800b780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b540:	fa22 f303 	lsr.w	r3, r2, r3
 800b544:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b546:	e111      	b.n	800b76c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b548:	4b8d      	ldr	r3, [pc, #564]	; (800b780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b54a:	61bb      	str	r3, [r7, #24]
    break;
 800b54c:	e10e      	b.n	800b76c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b54e:	4b8d      	ldr	r3, [pc, #564]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b550:	61bb      	str	r3, [r7, #24]
    break;
 800b552:	e10b      	b.n	800b76c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b554:	4b8c      	ldr	r3, [pc, #560]	; (800b788 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b556:	61bb      	str	r3, [r7, #24]
    break;
 800b558:	e108      	b.n	800b76c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b55a:	4b88      	ldr	r3, [pc, #544]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55e:	f003 0303 	and.w	r3, r3, #3
 800b562:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b564:	4b85      	ldr	r3, [pc, #532]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b568:	091b      	lsrs	r3, r3, #4
 800b56a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b56e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b570:	4b82      	ldr	r3, [pc, #520]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b574:	f003 0301 	and.w	r3, r3, #1
 800b578:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b57a:	4b80      	ldr	r3, [pc, #512]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57e:	08db      	lsrs	r3, r3, #3
 800b580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	fb02 f303 	mul.w	r3, r2, r3
 800b58a:	ee07 3a90 	vmov	s15, r3
 800b58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b592:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 80e1 	beq.w	800b760 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	f000 8083 	beq.w	800b6ac <HAL_RCC_GetSysClockFreq+0x204>
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	f200 80a1 	bhi.w	800b6f0 <HAL_RCC_GetSysClockFreq+0x248>
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d003      	beq.n	800b5bc <HAL_RCC_GetSysClockFreq+0x114>
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d056      	beq.n	800b668 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b5ba:	e099      	b.n	800b6f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5bc:	4b6f      	ldr	r3, [pc, #444]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0320 	and.w	r3, r3, #32
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d02d      	beq.n	800b624 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b5c8:	4b6c      	ldr	r3, [pc, #432]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	08db      	lsrs	r3, r3, #3
 800b5ce:	f003 0303 	and.w	r3, r3, #3
 800b5d2:	4a6b      	ldr	r2, [pc, #428]	; (800b780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	ee07 3a90 	vmov	s15, r3
 800b5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f2:	4b62      	ldr	r3, [pc, #392]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fa:	ee07 3a90 	vmov	s15, r3
 800b5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b602:	ed97 6a02 	vldr	s12, [r7, #8]
 800b606:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b78c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b622:	e087      	b.n	800b734 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	ee07 3a90 	vmov	s15, r3
 800b62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b790 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b636:	4b51      	ldr	r3, [pc, #324]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b646:	ed97 6a02 	vldr	s12, [r7, #8]
 800b64a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b78c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b666:	e065      	b.n	800b734 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b672:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b794 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b67a:	4b40      	ldr	r3, [pc, #256]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b68a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b68e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b78c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b69a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b69e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6aa:	e043      	b.n	800b734 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	ee07 3a90 	vmov	s15, r3
 800b6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b798 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6be:	4b2f      	ldr	r3, [pc, #188]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b78c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6ee:	e021      	b.n	800b734 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	ee07 3a90 	vmov	s15, r3
 800b6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b794 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b702:	4b1e      	ldr	r3, [pc, #120]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b70a:	ee07 3a90 	vmov	s15, r3
 800b70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b712:	ed97 6a02 	vldr	s12, [r7, #8]
 800b716:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b78c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b71a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b71e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b72e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b732:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b734:	4b11      	ldr	r3, [pc, #68]	; (800b77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b738:	0a5b      	lsrs	r3, r3, #9
 800b73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b73e:	3301      	adds	r3, #1
 800b740:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	ee07 3a90 	vmov	s15, r3
 800b748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b74c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b758:	ee17 3a90 	vmov	r3, s15
 800b75c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b75e:	e005      	b.n	800b76c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b760:	2300      	movs	r3, #0
 800b762:	61bb      	str	r3, [r7, #24]
    break;
 800b764:	e002      	b.n	800b76c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b766:	4b07      	ldr	r3, [pc, #28]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b768:	61bb      	str	r3, [r7, #24]
    break;
 800b76a:	bf00      	nop
  }

  return sysclockfreq;
 800b76c:	69bb      	ldr	r3, [r7, #24]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3724      	adds	r7, #36	; 0x24
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	58024400 	.word	0x58024400
 800b780:	03d09000 	.word	0x03d09000
 800b784:	003d0900 	.word	0x003d0900
 800b788:	007a1200 	.word	0x007a1200
 800b78c:	46000000 	.word	0x46000000
 800b790:	4c742400 	.word	0x4c742400
 800b794:	4a742400 	.word	0x4a742400
 800b798:	4af42400 	.word	0x4af42400

0800b79c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7a2:	f7ff fe81 	bl	800b4a8 <HAL_RCC_GetSysClockFreq>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	4b10      	ldr	r3, [pc, #64]	; (800b7ec <HAL_RCC_GetHCLKFreq+0x50>)
 800b7aa:	699b      	ldr	r3, [r3, #24]
 800b7ac:	0a1b      	lsrs	r3, r3, #8
 800b7ae:	f003 030f 	and.w	r3, r3, #15
 800b7b2:	490f      	ldr	r1, [pc, #60]	; (800b7f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b7b4:	5ccb      	ldrb	r3, [r1, r3]
 800b7b6:	f003 031f 	and.w	r3, r3, #31
 800b7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b7be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <HAL_RCC_GetHCLKFreq+0x50>)
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	f003 030f 	and.w	r3, r3, #15
 800b7c8:	4a09      	ldr	r2, [pc, #36]	; (800b7f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b7ca:	5cd3      	ldrb	r3, [r2, r3]
 800b7cc:	f003 031f 	and.w	r3, r3, #31
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7d6:	4a07      	ldr	r2, [pc, #28]	; (800b7f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b7d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b7da:	4a07      	ldr	r2, [pc, #28]	; (800b7f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b7e0:	4b04      	ldr	r3, [pc, #16]	; (800b7f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	58024400 	.word	0x58024400
 800b7f0:	08010b64 	.word	0x08010b64
 800b7f4:	24000008 	.word	0x24000008
 800b7f8:	24000004 	.word	0x24000004

0800b7fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b800:	f7ff ffcc 	bl	800b79c <HAL_RCC_GetHCLKFreq>
 800b804:	4602      	mov	r2, r0
 800b806:	4b06      	ldr	r3, [pc, #24]	; (800b820 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b808:	69db      	ldr	r3, [r3, #28]
 800b80a:	091b      	lsrs	r3, r3, #4
 800b80c:	f003 0307 	and.w	r3, r3, #7
 800b810:	4904      	ldr	r1, [pc, #16]	; (800b824 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b812:	5ccb      	ldrb	r3, [r1, r3]
 800b814:	f003 031f 	and.w	r3, r3, #31
 800b818:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	58024400 	.word	0x58024400
 800b824:	08010b64 	.word	0x08010b64

0800b828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b82c:	f7ff ffb6 	bl	800b79c <HAL_RCC_GetHCLKFreq>
 800b830:	4602      	mov	r2, r0
 800b832:	4b06      	ldr	r3, [pc, #24]	; (800b84c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b834:	69db      	ldr	r3, [r3, #28]
 800b836:	0a1b      	lsrs	r3, r3, #8
 800b838:	f003 0307 	and.w	r3, r3, #7
 800b83c:	4904      	ldr	r1, [pc, #16]	; (800b850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b83e:	5ccb      	ldrb	r3, [r1, r3]
 800b840:	f003 031f 	and.w	r3, r3, #31
 800b844:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b848:	4618      	mov	r0, r3
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	58024400 	.word	0x58024400
 800b850:	08010b64 	.word	0x08010b64

0800b854 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b85c:	2300      	movs	r3, #0
 800b85e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b860:	2300      	movs	r3, #0
 800b862:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d03f      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b874:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b878:	d02a      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b87a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b87e:	d824      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b884:	d018      	beq.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b88a:	d81e      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d003      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b894:	d007      	beq.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b896:	e018      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b898:	4ba3      	ldr	r3, [pc, #652]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89c:	4aa2      	ldr	r2, [pc, #648]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b89e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b8a4:	e015      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	2102      	movs	r1, #2
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f001 f9d5 	bl	800cc5c <RCCEx_PLL2_Config>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b8b6:	e00c      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	3324      	adds	r3, #36	; 0x24
 800b8bc:	2102      	movs	r1, #2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f001 fa7e 	bl	800cdc0 <RCCEx_PLL3_Config>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b8c8:	e003      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	75fb      	strb	r3, [r7, #23]
      break;
 800b8ce:	e000      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b8d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d109      	bne.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b8d8:	4b93      	ldr	r3, [pc, #588]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8e4:	4990      	ldr	r1, [pc, #576]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	650b      	str	r3, [r1, #80]	; 0x50
 800b8ea:	e001      	b.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
 800b8ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d03d      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b900:	2b04      	cmp	r3, #4
 800b902:	d826      	bhi.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b904:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90a:	bf00      	nop
 800b90c:	0800b921 	.word	0x0800b921
 800b910:	0800b92f 	.word	0x0800b92f
 800b914:	0800b941 	.word	0x0800b941
 800b918:	0800b959 	.word	0x0800b959
 800b91c:	0800b959 	.word	0x0800b959
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b920:	4b81      	ldr	r3, [pc, #516]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	4a80      	ldr	r2, [pc, #512]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b92a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b92c:	e015      	b.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	3304      	adds	r3, #4
 800b932:	2100      	movs	r1, #0
 800b934:	4618      	mov	r0, r3
 800b936:	f001 f991 	bl	800cc5c <RCCEx_PLL2_Config>
 800b93a:	4603      	mov	r3, r0
 800b93c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b93e:	e00c      	b.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	3324      	adds	r3, #36	; 0x24
 800b944:	2100      	movs	r1, #0
 800b946:	4618      	mov	r0, r3
 800b948:	f001 fa3a 	bl	800cdc0 <RCCEx_PLL3_Config>
 800b94c:	4603      	mov	r3, r0
 800b94e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b950:	e003      	b.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	75fb      	strb	r3, [r7, #23]
      break;
 800b956:	e000      	b.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d109      	bne.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b960:	4b71      	ldr	r3, [pc, #452]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b964:	f023 0207 	bic.w	r2, r3, #7
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b96c:	496e      	ldr	r1, [pc, #440]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b96e:	4313      	orrs	r3, r2
 800b970:	650b      	str	r3, [r1, #80]	; 0x50
 800b972:	e001      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b980:	2b00      	cmp	r3, #0
 800b982:	d042      	beq.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b98c:	d02b      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b98e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b992:	d825      	bhi.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b994:	2bc0      	cmp	r3, #192	; 0xc0
 800b996:	d028      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b998:	2bc0      	cmp	r3, #192	; 0xc0
 800b99a:	d821      	bhi.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b99c:	2b80      	cmp	r3, #128	; 0x80
 800b99e:	d016      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b9a0:	2b80      	cmp	r3, #128	; 0x80
 800b9a2:	d81d      	bhi.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b9a8:	2b40      	cmp	r3, #64	; 0x40
 800b9aa:	d007      	beq.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b9ac:	e018      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ae:	4b5e      	ldr	r3, [pc, #376]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b2:	4a5d      	ldr	r2, [pc, #372]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b9ba:	e017      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	3304      	adds	r3, #4
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 f94a 	bl	800cc5c <RCCEx_PLL2_Config>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b9cc:	e00e      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	3324      	adds	r3, #36	; 0x24
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f001 f9f3 	bl	800cdc0 <RCCEx_PLL3_Config>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b9de:	e005      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b9e4:	e002      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b9e6:	bf00      	nop
 800b9e8:	e000      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b9ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d109      	bne.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b9f2:	4b4d      	ldr	r3, [pc, #308]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9fe:	494a      	ldr	r1, [pc, #296]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba00:	4313      	orrs	r3, r2
 800ba02:	650b      	str	r3, [r1, #80]	; 0x50
 800ba04:	e001      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
 800ba08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d049      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba20:	d030      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ba22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba26:	d82a      	bhi.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ba28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba2c:	d02c      	beq.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ba2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba32:	d824      	bhi.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ba34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba38:	d018      	beq.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ba3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba3e:	d81e      	bhi.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d003      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ba44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba48:	d007      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ba4a:	e018      	b.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba4c:	4b36      	ldr	r3, [pc, #216]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba50:	4a35      	ldr	r2, [pc, #212]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba58:	e017      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	2100      	movs	r1, #0
 800ba60:	4618      	mov	r0, r3
 800ba62:	f001 f8fb 	bl	800cc5c <RCCEx_PLL2_Config>
 800ba66:	4603      	mov	r3, r0
 800ba68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ba6a:	e00e      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	3324      	adds	r3, #36	; 0x24
 800ba70:	2100      	movs	r1, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f001 f9a4 	bl	800cdc0 <RCCEx_PLL3_Config>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba7c:	e005      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	75fb      	strb	r3, [r7, #23]
      break;
 800ba82:	e002      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ba84:	bf00      	nop
 800ba86:	e000      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ba88:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba8a:	7dfb      	ldrb	r3, [r7, #23]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10a      	bne.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ba90:	4b25      	ldr	r3, [pc, #148]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba9e:	4922      	ldr	r1, [pc, #136]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800baa0:	4313      	orrs	r3, r2
 800baa2:	658b      	str	r3, [r1, #88]	; 0x58
 800baa4:	e001      	b.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa6:	7dfb      	ldrb	r3, [r7, #23]
 800baa8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d04b      	beq.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800babc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bac0:	d030      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800bac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bac6:	d82a      	bhi.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bac8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bacc:	d02e      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800bace:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bad2:	d824      	bhi.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bad4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bad8:	d018      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bade:	d81e      	bhi.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bae8:	d007      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800baea:	e018      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baec:	4b0e      	ldr	r3, [pc, #56]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800baee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf0:	4a0d      	ldr	r2, [pc, #52]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800baf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800baf8:	e019      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	3304      	adds	r3, #4
 800bafe:	2100      	movs	r1, #0
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 f8ab 	bl	800cc5c <RCCEx_PLL2_Config>
 800bb06:	4603      	mov	r3, r0
 800bb08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bb0a:	e010      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3324      	adds	r3, #36	; 0x24
 800bb10:	2100      	movs	r1, #0
 800bb12:	4618      	mov	r0, r3
 800bb14:	f001 f954 	bl	800cdc0 <RCCEx_PLL3_Config>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb1c:	e007      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	75fb      	strb	r3, [r7, #23]
      break;
 800bb22:	e004      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800bb24:	bf00      	nop
 800bb26:	e002      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bb28:	58024400 	.word	0x58024400
      break;
 800bb2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10a      	bne.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bb34:	4b99      	ldr	r3, [pc, #612]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb38:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb42:	4996      	ldr	r1, [pc, #600]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb44:	4313      	orrs	r3, r2
 800bb46:	658b      	str	r3, [r1, #88]	; 0x58
 800bb48:	e001      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb4a:	7dfb      	ldrb	r3, [r7, #23]
 800bb4c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d032      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb5e:	2b30      	cmp	r3, #48	; 0x30
 800bb60:	d01c      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800bb62:	2b30      	cmp	r3, #48	; 0x30
 800bb64:	d817      	bhi.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bb66:	2b20      	cmp	r3, #32
 800bb68:	d00c      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800bb6a:	2b20      	cmp	r3, #32
 800bb6c:	d813      	bhi.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d016      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800bb72:	2b10      	cmp	r3, #16
 800bb74:	d10f      	bne.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb76:	4b89      	ldr	r3, [pc, #548]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7a:	4a88      	ldr	r2, [pc, #544]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bb82:	e00e      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	3304      	adds	r3, #4
 800bb88:	2102      	movs	r1, #2
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f001 f866 	bl	800cc5c <RCCEx_PLL2_Config>
 800bb90:	4603      	mov	r3, r0
 800bb92:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bb94:	e005      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	75fb      	strb	r3, [r7, #23]
      break;
 800bb9a:	e002      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bb9c:	bf00      	nop
 800bb9e:	e000      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d109      	bne.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bba8:	4b7c      	ldr	r3, [pc, #496]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbb4:	4979      	ldr	r1, [pc, #484]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bbba:	e001      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
 800bbbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d047      	beq.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbd4:	d030      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bbd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbda:	d82a      	bhi.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bbdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbe0:	d02c      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800bbe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbe6:	d824      	bhi.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bbe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbec:	d018      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800bbee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbf2:	d81e      	bhi.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d003      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800bbf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbfc:	d007      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800bbfe:	e018      	b.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc00:	4b66      	ldr	r3, [pc, #408]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc04:	4a65      	ldr	r2, [pc, #404]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bc0c:	e017      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	3304      	adds	r3, #4
 800bc12:	2100      	movs	r1, #0
 800bc14:	4618      	mov	r0, r3
 800bc16:	f001 f821 	bl	800cc5c <RCCEx_PLL2_Config>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bc1e:	e00e      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	3324      	adds	r3, #36	; 0x24
 800bc24:	2100      	movs	r1, #0
 800bc26:	4618      	mov	r0, r3
 800bc28:	f001 f8ca 	bl	800cdc0 <RCCEx_PLL3_Config>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bc30:	e005      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	75fb      	strb	r3, [r7, #23]
      break;
 800bc36:	e002      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bc38:	bf00      	nop
 800bc3a:	e000      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bc3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d109      	bne.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bc44:	4b55      	ldr	r3, [pc, #340]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc50:	4952      	ldr	r1, [pc, #328]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc52:	4313      	orrs	r3, r2
 800bc54:	650b      	str	r3, [r1, #80]	; 0x50
 800bc56:	e001      	b.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
 800bc5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d049      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc70:	d02e      	beq.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bc72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc76:	d828      	bhi.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bc78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc7c:	d02a      	beq.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800bc7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc82:	d822      	bhi.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bc84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc88:	d026      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800bc8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc8e:	d81c      	bhi.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bc90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc94:	d010      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800bc96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc9a:	d816      	bhi.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d01d      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x488>
 800bca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bca4:	d111      	bne.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3304      	adds	r3, #4
 800bcaa:	2101      	movs	r1, #1
 800bcac:	4618      	mov	r0, r3
 800bcae:	f000 ffd5 	bl	800cc5c <RCCEx_PLL2_Config>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bcb6:	e012      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	3324      	adds	r3, #36	; 0x24
 800bcbc:	2101      	movs	r1, #1
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f001 f87e 	bl	800cdc0 <RCCEx_PLL3_Config>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bcc8:	e009      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	75fb      	strb	r3, [r7, #23]
      break;
 800bcce:	e006      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bcd0:	bf00      	nop
 800bcd2:	e004      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bcd4:	bf00      	nop
 800bcd6:	e002      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bcd8:	bf00      	nop
 800bcda:	e000      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bcdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d109      	bne.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bce4:	4b2d      	ldr	r3, [pc, #180]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bce8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcf0:	492a      	ldr	r1, [pc, #168]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	650b      	str	r3, [r1, #80]	; 0x50
 800bcf6:	e001      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
 800bcfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d04d      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd12:	d02e      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bd14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd18:	d828      	bhi.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd1e:	d02a      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800bd20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd24:	d822      	bhi.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bd26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd2a:	d026      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800bd2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd30:	d81c      	bhi.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bd32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd36:	d010      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bd38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd3c:	d816      	bhi.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d01d      	beq.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800bd42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd46:	d111      	bne.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 ff84 	bl	800cc5c <RCCEx_PLL2_Config>
 800bd54:	4603      	mov	r3, r0
 800bd56:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bd58:	e012      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	3324      	adds	r3, #36	; 0x24
 800bd5e:	2101      	movs	r1, #1
 800bd60:	4618      	mov	r0, r3
 800bd62:	f001 f82d 	bl	800cdc0 <RCCEx_PLL3_Config>
 800bd66:	4603      	mov	r3, r0
 800bd68:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bd6a:	e009      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd70:	e006      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bd72:	bf00      	nop
 800bd74:	e004      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bd76:	bf00      	nop
 800bd78:	e002      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bd7a:	bf00      	nop
 800bd7c:	e000      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bd7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10c      	bne.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bd86:	4b05      	ldr	r3, [pc, #20]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd94:	4901      	ldr	r1, [pc, #4]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd96:	4313      	orrs	r3, r2
 800bd98:	658b      	str	r3, [r1, #88]	; 0x58
 800bd9a:	e003      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800bd9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
 800bda2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d02f      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdb8:	d00e      	beq.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800bdba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdbe:	d814      	bhi.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x596>
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d015      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800bdc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdc8:	d10f      	bne.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdca:	4baf      	ldr	r3, [pc, #700]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdce:	4aae      	ldr	r2, [pc, #696]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bdd6:	e00c      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	3304      	adds	r3, #4
 800bddc:	2101      	movs	r1, #1
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 ff3c 	bl	800cc5c <RCCEx_PLL2_Config>
 800bde4:	4603      	mov	r3, r0
 800bde6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bde8:	e003      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	75fb      	strb	r3, [r7, #23]
      break;
 800bdee:	e000      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800bdf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d109      	bne.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bdf8:	4ba3      	ldr	r3, [pc, #652]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdfc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be04:	49a0      	ldr	r1, [pc, #640]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be06:	4313      	orrs	r3, r2
 800be08:	650b      	str	r3, [r1, #80]	; 0x50
 800be0a:	e001      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
 800be0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d032      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be20:	2b03      	cmp	r3, #3
 800be22:	d81b      	bhi.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800be24:	a201      	add	r2, pc, #4	; (adr r2, 800be2c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800be26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2a:	bf00      	nop
 800be2c:	0800be63 	.word	0x0800be63
 800be30:	0800be3d 	.word	0x0800be3d
 800be34:	0800be4b 	.word	0x0800be4b
 800be38:	0800be63 	.word	0x0800be63
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be3c:	4b92      	ldr	r3, [pc, #584]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be40:	4a91      	ldr	r2, [pc, #580]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800be48:	e00c      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	3304      	adds	r3, #4
 800be4e:	2102      	movs	r1, #2
 800be50:	4618      	mov	r0, r3
 800be52:	f000 ff03 	bl	800cc5c <RCCEx_PLL2_Config>
 800be56:	4603      	mov	r3, r0
 800be58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800be5a:	e003      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	75fb      	strb	r3, [r7, #23]
      break;
 800be60:	e000      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800be62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be64:	7dfb      	ldrb	r3, [r7, #23]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d109      	bne.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800be6a:	4b87      	ldr	r3, [pc, #540]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be6e:	f023 0203 	bic.w	r2, r3, #3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be76:	4984      	ldr	r1, [pc, #528]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be78:	4313      	orrs	r3, r2
 800be7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800be7c:	e001      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be7e:	7dfb      	ldrb	r3, [r7, #23]
 800be80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 8086 	beq.w	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be90:	4b7e      	ldr	r3, [pc, #504]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a7d      	ldr	r2, [pc, #500]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800be96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be9c:	f7fb f99a 	bl	80071d4 <HAL_GetTick>
 800bea0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bea2:	e009      	b.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bea4:	f7fb f996 	bl	80071d4 <HAL_GetTick>
 800bea8:	4602      	mov	r2, r0
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	1ad3      	subs	r3, r2, r3
 800beae:	2b64      	cmp	r3, #100	; 0x64
 800beb0:	d902      	bls.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	75fb      	strb	r3, [r7, #23]
        break;
 800beb6:	e005      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800beb8:	4b74      	ldr	r3, [pc, #464]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d0ef      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d166      	bne.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800beca:	4b6f      	ldr	r3, [pc, #444]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800becc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bed4:	4053      	eors	r3, r2
 800bed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d013      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bede:	4b6a      	ldr	r3, [pc, #424]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bee6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bee8:	4b67      	ldr	r3, [pc, #412]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800beea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beec:	4a66      	ldr	r2, [pc, #408]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800beee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bef2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bef4:	4b64      	ldr	r3, [pc, #400]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bef8:	4a63      	ldr	r2, [pc, #396]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800befa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800befe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bf00:	4a61      	ldr	r2, [pc, #388]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf10:	d115      	bne.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf12:	f7fb f95f 	bl	80071d4 <HAL_GetTick>
 800bf16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf18:	e00b      	b.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf1a:	f7fb f95b 	bl	80071d4 <HAL_GetTick>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d902      	bls.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	75fb      	strb	r3, [r7, #23]
            break;
 800bf30:	e005      	b.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf32:	4b55      	ldr	r3, [pc, #340]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bf34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf36:	f003 0302 	and.w	r3, r3, #2
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0ed      	beq.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d126      	bne.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf52:	d10d      	bne.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800bf54:	4b4c      	ldr	r3, [pc, #304]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf62:	0919      	lsrs	r1, r3, #4
 800bf64:	4b4a      	ldr	r3, [pc, #296]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800bf66:	400b      	ands	r3, r1
 800bf68:	4947      	ldr	r1, [pc, #284]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	610b      	str	r3, [r1, #16]
 800bf6e:	e005      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800bf70:	4b45      	ldr	r3, [pc, #276]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	4a44      	ldr	r2, [pc, #272]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bf76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bf7a:	6113      	str	r3, [r2, #16]
 800bf7c:	4b42      	ldr	r3, [pc, #264]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bf7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf8a:	493f      	ldr	r1, [pc, #252]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	670b      	str	r3, [r1, #112]	; 0x70
 800bf90:	e004      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	75bb      	strb	r3, [r7, #22]
 800bf96:	e001      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf98:	7dfb      	ldrb	r3, [r7, #23]
 800bf9a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 8085 	beq.w	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfae:	2b28      	cmp	r3, #40	; 0x28
 800bfb0:	d866      	bhi.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800bfb2:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800bfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb8:	0800c095 	.word	0x0800c095
 800bfbc:	0800c081 	.word	0x0800c081
 800bfc0:	0800c081 	.word	0x0800c081
 800bfc4:	0800c081 	.word	0x0800c081
 800bfc8:	0800c081 	.word	0x0800c081
 800bfcc:	0800c081 	.word	0x0800c081
 800bfd0:	0800c081 	.word	0x0800c081
 800bfd4:	0800c081 	.word	0x0800c081
 800bfd8:	0800c05d 	.word	0x0800c05d
 800bfdc:	0800c081 	.word	0x0800c081
 800bfe0:	0800c081 	.word	0x0800c081
 800bfe4:	0800c081 	.word	0x0800c081
 800bfe8:	0800c081 	.word	0x0800c081
 800bfec:	0800c081 	.word	0x0800c081
 800bff0:	0800c081 	.word	0x0800c081
 800bff4:	0800c081 	.word	0x0800c081
 800bff8:	0800c06f 	.word	0x0800c06f
 800bffc:	0800c081 	.word	0x0800c081
 800c000:	0800c081 	.word	0x0800c081
 800c004:	0800c081 	.word	0x0800c081
 800c008:	0800c081 	.word	0x0800c081
 800c00c:	0800c081 	.word	0x0800c081
 800c010:	0800c081 	.word	0x0800c081
 800c014:	0800c081 	.word	0x0800c081
 800c018:	0800c095 	.word	0x0800c095
 800c01c:	0800c081 	.word	0x0800c081
 800c020:	0800c081 	.word	0x0800c081
 800c024:	0800c081 	.word	0x0800c081
 800c028:	0800c081 	.word	0x0800c081
 800c02c:	0800c081 	.word	0x0800c081
 800c030:	0800c081 	.word	0x0800c081
 800c034:	0800c081 	.word	0x0800c081
 800c038:	0800c095 	.word	0x0800c095
 800c03c:	0800c081 	.word	0x0800c081
 800c040:	0800c081 	.word	0x0800c081
 800c044:	0800c081 	.word	0x0800c081
 800c048:	0800c081 	.word	0x0800c081
 800c04c:	0800c081 	.word	0x0800c081
 800c050:	0800c081 	.word	0x0800c081
 800c054:	0800c081 	.word	0x0800c081
 800c058:	0800c095 	.word	0x0800c095
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	3304      	adds	r3, #4
 800c060:	2101      	movs	r1, #1
 800c062:	4618      	mov	r0, r3
 800c064:	f000 fdfa 	bl	800cc5c <RCCEx_PLL2_Config>
 800c068:	4603      	mov	r3, r0
 800c06a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c06c:	e013      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3324      	adds	r3, #36	; 0x24
 800c072:	2101      	movs	r1, #1
 800c074:	4618      	mov	r0, r3
 800c076:	f000 fea3 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c07a:	4603      	mov	r3, r0
 800c07c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c07e:	e00a      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	75fb      	strb	r3, [r7, #23]
      break;
 800c084:	e007      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c086:	bf00      	nop
 800c088:	58024400 	.word	0x58024400
 800c08c:	58024800 	.word	0x58024800
 800c090:	00ffffcf 	.word	0x00ffffcf
      break;
 800c094:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c096:	7dfb      	ldrb	r3, [r7, #23]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d109      	bne.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c09c:	4b96      	ldr	r3, [pc, #600]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0a8:	4993      	ldr	r1, [pc, #588]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	654b      	str	r3, [r1, #84]	; 0x54
 800c0ae:	e001      	b.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b0:	7dfb      	ldrb	r3, [r7, #23]
 800c0b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 0302 	and.w	r3, r3, #2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d038      	beq.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0c4:	2b05      	cmp	r3, #5
 800c0c6:	d821      	bhi.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800c0c8:	a201      	add	r2, pc, #4	; (adr r2, 800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800c0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ce:	bf00      	nop
 800c0d0:	0800c113 	.word	0x0800c113
 800c0d4:	0800c0e9 	.word	0x0800c0e9
 800c0d8:	0800c0fb 	.word	0x0800c0fb
 800c0dc:	0800c113 	.word	0x0800c113
 800c0e0:	0800c113 	.word	0x0800c113
 800c0e4:	0800c113 	.word	0x0800c113
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	2101      	movs	r1, #1
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 fdb4 	bl	800cc5c <RCCEx_PLL2_Config>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c0f8:	e00c      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	3324      	adds	r3, #36	; 0x24
 800c0fe:	2101      	movs	r1, #1
 800c100:	4618      	mov	r0, r3
 800c102:	f000 fe5d 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c106:	4603      	mov	r3, r0
 800c108:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c10a:	e003      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	75fb      	strb	r3, [r7, #23]
      break;
 800c110:	e000      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800c112:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c114:	7dfb      	ldrb	r3, [r7, #23]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d109      	bne.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c11a:	4b77      	ldr	r3, [pc, #476]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c11e:	f023 0207 	bic.w	r2, r3, #7
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c126:	4974      	ldr	r1, [pc, #464]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c128:	4313      	orrs	r3, r2
 800c12a:	654b      	str	r3, [r1, #84]	; 0x54
 800c12c:	e001      	b.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12e:	7dfb      	ldrb	r3, [r7, #23]
 800c130:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0304 	and.w	r3, r3, #4
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d03a      	beq.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c144:	2b05      	cmp	r3, #5
 800c146:	d821      	bhi.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c148:	a201      	add	r2, pc, #4	; (adr r2, 800c150 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14e:	bf00      	nop
 800c150:	0800c193 	.word	0x0800c193
 800c154:	0800c169 	.word	0x0800c169
 800c158:	0800c17b 	.word	0x0800c17b
 800c15c:	0800c193 	.word	0x0800c193
 800c160:	0800c193 	.word	0x0800c193
 800c164:	0800c193 	.word	0x0800c193
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3304      	adds	r3, #4
 800c16c:	2101      	movs	r1, #1
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 fd74 	bl	800cc5c <RCCEx_PLL2_Config>
 800c174:	4603      	mov	r3, r0
 800c176:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c178:	e00c      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3324      	adds	r3, #36	; 0x24
 800c17e:	2101      	movs	r1, #1
 800c180:	4618      	mov	r0, r3
 800c182:	f000 fe1d 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c186:	4603      	mov	r3, r0
 800c188:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c18a:	e003      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	75fb      	strb	r3, [r7, #23]
      break;
 800c190:	e000      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c192:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c194:	7dfb      	ldrb	r3, [r7, #23]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10a      	bne.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c19a:	4b57      	ldr	r3, [pc, #348]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c19e:	f023 0207 	bic.w	r2, r3, #7
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1a8:	4953      	ldr	r1, [pc, #332]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	658b      	str	r3, [r1, #88]	; 0x58
 800c1ae:	e001      	b.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1b0:	7dfb      	ldrb	r3, [r7, #23]
 800c1b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 0320 	and.w	r3, r3, #32
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d04b      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1ca:	d02e      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c1cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1d0:	d828      	bhi.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1d6:	d02a      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1dc:	d822      	bhi.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c1de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1e2:	d026      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c1e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1e8:	d81c      	bhi.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c1ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1ee:	d010      	beq.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c1f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1f4:	d816      	bhi.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d01d      	beq.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c1fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1fe:	d111      	bne.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	3304      	adds	r3, #4
 800c204:	2100      	movs	r1, #0
 800c206:	4618      	mov	r0, r3
 800c208:	f000 fd28 	bl	800cc5c <RCCEx_PLL2_Config>
 800c20c:	4603      	mov	r3, r0
 800c20e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c210:	e012      	b.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	3324      	adds	r3, #36	; 0x24
 800c216:	2102      	movs	r1, #2
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 fdd1 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c21e:	4603      	mov	r3, r0
 800c220:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c222:	e009      	b.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	75fb      	strb	r3, [r7, #23]
      break;
 800c228:	e006      	b.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c22a:	bf00      	nop
 800c22c:	e004      	b.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c22e:	bf00      	nop
 800c230:	e002      	b.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c232:	bf00      	nop
 800c234:	e000      	b.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c236:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d10a      	bne.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c23e:	4b2e      	ldr	r3, [pc, #184]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c242:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c24c:	492a      	ldr	r1, [pc, #168]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c24e:	4313      	orrs	r3, r2
 800c250:	654b      	str	r3, [r1, #84]	; 0x54
 800c252:	e001      	b.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c254:	7dfb      	ldrb	r3, [r7, #23]
 800c256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c260:	2b00      	cmp	r3, #0
 800c262:	d04d      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c26a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c26e:	d02e      	beq.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c270:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c274:	d828      	bhi.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c27a:	d02a      	beq.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c27c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c280:	d822      	bhi.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c286:	d026      	beq.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c28c:	d81c      	bhi.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c28e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c292:	d010      	beq.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c298:	d816      	bhi.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d01d      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c29e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2a2:	d111      	bne.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 fcd6 	bl	800cc5c <RCCEx_PLL2_Config>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c2b4:	e012      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	3324      	adds	r3, #36	; 0x24
 800c2ba:	2102      	movs	r1, #2
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 fd7f 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c2c6:	e009      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	75fb      	strb	r3, [r7, #23]
      break;
 800c2cc:	e006      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c2ce:	bf00      	nop
 800c2d0:	e004      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c2d2:	bf00      	nop
 800c2d4:	e002      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c2d6:	bf00      	nop
 800c2d8:	e000      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c2da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10c      	bne.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c2e2:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c2e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2f0:	4901      	ldr	r1, [pc, #4]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	658b      	str	r3, [r1, #88]	; 0x58
 800c2f6:	e003      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c2f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2fc:	7dfb      	ldrb	r3, [r7, #23]
 800c2fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d04b      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c312:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c316:	d02e      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c318:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c31c:	d828      	bhi.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c31e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c322:	d02a      	beq.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c328:	d822      	bhi.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c32a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c32e:	d026      	beq.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c330:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c334:	d81c      	bhi.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c33a:	d010      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c33c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c340:	d816      	bhi.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c342:	2b00      	cmp	r3, #0
 800c344:	d01d      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c34a:	d111      	bne.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3304      	adds	r3, #4
 800c350:	2100      	movs	r1, #0
 800c352:	4618      	mov	r0, r3
 800c354:	f000 fc82 	bl	800cc5c <RCCEx_PLL2_Config>
 800c358:	4603      	mov	r3, r0
 800c35a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c35c:	e012      	b.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	3324      	adds	r3, #36	; 0x24
 800c362:	2102      	movs	r1, #2
 800c364:	4618      	mov	r0, r3
 800c366:	f000 fd2b 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c36a:	4603      	mov	r3, r0
 800c36c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c36e:	e009      	b.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c370:	2301      	movs	r3, #1
 800c372:	75fb      	strb	r3, [r7, #23]
      break;
 800c374:	e006      	b.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c376:	bf00      	nop
 800c378:	e004      	b.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c37a:	bf00      	nop
 800c37c:	e002      	b.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c37e:	bf00      	nop
 800c380:	e000      	b.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c382:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c384:	7dfb      	ldrb	r3, [r7, #23]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10a      	bne.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c38a:	4b9d      	ldr	r3, [pc, #628]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c38c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c38e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c398:	4999      	ldr	r1, [pc, #612]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c39a:	4313      	orrs	r3, r2
 800c39c:	658b      	str	r3, [r1, #88]	; 0x58
 800c39e:	e001      	b.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3a0:	7dfb      	ldrb	r3, [r7, #23]
 800c3a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0308 	and.w	r3, r3, #8
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d01a      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3ba:	d10a      	bne.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3324      	adds	r3, #36	; 0x24
 800c3c0:	2102      	movs	r1, #2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f000 fcfc 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c3d2:	4b8b      	ldr	r3, [pc, #556]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3e0:	4987      	ldr	r1, [pc, #540]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f003 0310 	and.w	r3, r3, #16
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d01a      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3fc:	d10a      	bne.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3324      	adds	r3, #36	; 0x24
 800c402:	2102      	movs	r1, #2
 800c404:	4618      	mov	r0, r3
 800c406:	f000 fcdb 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c410:	2301      	movs	r3, #1
 800c412:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c414:	4b7a      	ldr	r3, [pc, #488]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c422:	4977      	ldr	r1, [pc, #476]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c424:	4313      	orrs	r3, r2
 800c426:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c430:	2b00      	cmp	r3, #0
 800c432:	d034      	beq.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c43a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c43e:	d01d      	beq.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c444:	d817      	bhi.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c44a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c44e:	d009      	beq.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c450:	e011      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	3304      	adds	r3, #4
 800c456:	2100      	movs	r1, #0
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 fbff 	bl	800cc5c <RCCEx_PLL2_Config>
 800c45e:	4603      	mov	r3, r0
 800c460:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c462:	e00c      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3324      	adds	r3, #36	; 0x24
 800c468:	2102      	movs	r1, #2
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 fca8 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c470:	4603      	mov	r3, r0
 800c472:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c474:	e003      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c476:	2301      	movs	r3, #1
 800c478:	75fb      	strb	r3, [r7, #23]
      break;
 800c47a:	e000      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800c47c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10a      	bne.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c484:	4b5e      	ldr	r3, [pc, #376]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c492:	495b      	ldr	r1, [pc, #364]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c494:	4313      	orrs	r3, r2
 800c496:	658b      	str	r3, [r1, #88]	; 0x58
 800c498:	e001      	b.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c49a:	7dfb      	ldrb	r3, [r7, #23]
 800c49c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d033      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c4b4:	d01c      	beq.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800c4b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c4ba:	d816      	bhi.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800c4bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4c0:	d003      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800c4c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4c6:	d007      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800c4c8:	e00f      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4ca:	4b4d      	ldr	r3, [pc, #308]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ce:	4a4c      	ldr	r2, [pc, #304]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c4d6:	e00c      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	3324      	adds	r3, #36	; 0x24
 800c4dc:	2101      	movs	r1, #1
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 fc6e 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c4e8:	e003      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	75fb      	strb	r3, [r7, #23]
      break;
 800c4ee:	e000      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800c4f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4f2:	7dfb      	ldrb	r3, [r7, #23]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10a      	bne.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4f8:	4b41      	ldr	r3, [pc, #260]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c506:	493e      	ldr	r1, [pc, #248]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c508:	4313      	orrs	r3, r2
 800c50a:	654b      	str	r3, [r1, #84]	; 0x54
 800c50c:	e001      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d029      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c522:	2b00      	cmp	r3, #0
 800c524:	d003      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800c526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c52a:	d007      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c52c:	e00f      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c52e:	4b34      	ldr	r3, [pc, #208]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c532:	4a33      	ldr	r2, [pc, #204]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c53a:	e00b      	b.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3304      	adds	r3, #4
 800c540:	2102      	movs	r1, #2
 800c542:	4618      	mov	r0, r3
 800c544:	f000 fb8a 	bl	800cc5c <RCCEx_PLL2_Config>
 800c548:	4603      	mov	r3, r0
 800c54a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c54c:	e002      	b.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	75fb      	strb	r3, [r7, #23]
      break;
 800c552:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c554:	7dfb      	ldrb	r3, [r7, #23]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d109      	bne.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c55a:	4b29      	ldr	r3, [pc, #164]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c55e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c566:	4926      	ldr	r1, [pc, #152]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c568:	4313      	orrs	r3, r2
 800c56a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c56c:	e001      	b.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00a      	beq.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	3324      	adds	r3, #36	; 0x24
 800c582:	2102      	movs	r1, #2
 800c584:	4618      	mov	r0, r3
 800c586:	f000 fc1b 	bl	800cdc0 <RCCEx_PLL3_Config>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d001      	beq.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d033      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5a8:	d017      	beq.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c5aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5ae:	d811      	bhi.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c5b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5b4:	d013      	beq.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c5b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5ba:	d80b      	bhi.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d010      	beq.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800c5c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5c4:	d106      	bne.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5c6:	4b0e      	ldr	r3, [pc, #56]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ca:	4a0d      	ldr	r2, [pc, #52]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c5cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c5d2:	e007      	b.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	75fb      	strb	r3, [r7, #23]
      break;
 800c5d8:	e004      	b.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c5da:	bf00      	nop
 800c5dc:	e002      	b.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c5de:	bf00      	nop
 800c5e0:	e000      	b.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c5e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5e4:	7dfb      	ldrb	r3, [r7, #23]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10c      	bne.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c5ea:	4b05      	ldr	r3, [pc, #20]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5f6:	4902      	ldr	r1, [pc, #8]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	654b      	str	r3, [r1, #84]	; 0x54
 800c5fc:	e004      	b.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800c5fe:	bf00      	nop
 800c600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c604:	7dfb      	ldrb	r3, [r7, #23]
 800c606:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c610:	2b00      	cmp	r3, #0
 800c612:	d008      	beq.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c614:	4b31      	ldr	r3, [pc, #196]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c618:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c620:	492e      	ldr	r1, [pc, #184]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c622:	4313      	orrs	r3, r2
 800c624:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d009      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c632:	4b2a      	ldr	r3, [pc, #168]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c640:	4926      	ldr	r1, [pc, #152]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c642:	4313      	orrs	r3, r2
 800c644:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d008      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c652:	4b22      	ldr	r3, [pc, #136]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c656:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c65e:	491f      	ldr	r1, [pc, #124]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c660:	4313      	orrs	r3, r2
 800c662:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00d      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c670:	4b1a      	ldr	r3, [pc, #104]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	4a19      	ldr	r2, [pc, #100]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c676:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c67a:	6113      	str	r3, [r2, #16]
 800c67c:	4b17      	ldr	r3, [pc, #92]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c67e:	691a      	ldr	r2, [r3, #16]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c686:	4915      	ldr	r1, [pc, #84]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c688:	4313      	orrs	r3, r2
 800c68a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	da08      	bge.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c694:	4b11      	ldr	r3, [pc, #68]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c698:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6a0:	490e      	ldr	r1, [pc, #56]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d009      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c6b2:	4b0a      	ldr	r3, [pc, #40]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6c0:	4906      	ldr	r1, [pc, #24]	; (800c6dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c6c6:	7dbb      	ldrb	r3, [r7, #22]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	e000      	b.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	58024400 	.word	0x58024400

0800c6e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c6e4:	f7ff f85a 	bl	800b79c <HAL_RCC_GetHCLKFreq>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	4b06      	ldr	r3, [pc, #24]	; (800c704 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c6ec:	6a1b      	ldr	r3, [r3, #32]
 800c6ee:	091b      	lsrs	r3, r3, #4
 800c6f0:	f003 0307 	and.w	r3, r3, #7
 800c6f4:	4904      	ldr	r1, [pc, #16]	; (800c708 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c6f6:	5ccb      	ldrb	r3, [r1, r3]
 800c6f8:	f003 031f 	and.w	r3, r3, #31
 800c6fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c700:	4618      	mov	r0, r3
 800c702:	bd80      	pop	{r7, pc}
 800c704:	58024400 	.word	0x58024400
 800c708:	08010b64 	.word	0x08010b64

0800c70c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b089      	sub	sp, #36	; 0x24
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c714:	4ba1      	ldr	r3, [pc, #644]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c718:	f003 0303 	and.w	r3, r3, #3
 800c71c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c71e:	4b9f      	ldr	r3, [pc, #636]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c722:	0b1b      	lsrs	r3, r3, #12
 800c724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c728:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c72a:	4b9c      	ldr	r3, [pc, #624]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72e:	091b      	lsrs	r3, r3, #4
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c736:	4b99      	ldr	r3, [pc, #612]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c73a:	08db      	lsrs	r3, r3, #3
 800c73c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	fb02 f303 	mul.w	r3, r2, r3
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 8111 	beq.w	800c97c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	f000 8083 	beq.w	800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	2b02      	cmp	r3, #2
 800c766:	f200 80a1 	bhi.w	800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d056      	beq.n	800c824 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c776:	e099      	b.n	800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c778:	4b88      	ldr	r3, [pc, #544]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 0320 	and.w	r3, r3, #32
 800c780:	2b00      	cmp	r3, #0
 800c782:	d02d      	beq.n	800c7e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c784:	4b85      	ldr	r3, [pc, #532]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	08db      	lsrs	r3, r3, #3
 800c78a:	f003 0303 	and.w	r3, r3, #3
 800c78e:	4a84      	ldr	r2, [pc, #528]	; (800c9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c790:	fa22 f303 	lsr.w	r3, r2, r3
 800c794:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	ee07 3a90 	vmov	s15, r3
 800c79c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	ee07 3a90 	vmov	s15, r3
 800c7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ae:	4b7b      	ldr	r3, [pc, #492]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b6:	ee07 3a90 	vmov	s15, r3
 800c7ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7be:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c7de:	e087      	b.n	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	ee07 3a90 	vmov	s15, r3
 800c7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c7ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7f2:	4b6a      	ldr	r3, [pc, #424]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7fa:	ee07 3a90 	vmov	s15, r3
 800c7fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c802:	ed97 6a03 	vldr	s12, [r7, #12]
 800c806:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c80a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c80e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c81a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c81e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c822:	e065      	b.n	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	ee07 3a90 	vmov	s15, r3
 800c82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c82e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c9ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c836:	4b59      	ldr	r3, [pc, #356]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c83e:	ee07 3a90 	vmov	s15, r3
 800c842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c846:	ed97 6a03 	vldr	s12, [r7, #12]
 800c84a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c84e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c85a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c85e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c862:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c866:	e043      	b.n	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	ee07 3a90 	vmov	s15, r3
 800c86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c872:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c87a:	4b48      	ldr	r3, [pc, #288]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c882:	ee07 3a90 	vmov	s15, r3
 800c886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c88a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c88e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c89a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c89e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8aa:	e021      	b.n	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	ee07 3a90 	vmov	s15, r3
 800c8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c8ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8be:	4b37      	ldr	r3, [pc, #220]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c6:	ee07 3a90 	vmov	s15, r3
 800c8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c8f0:	4b2a      	ldr	r3, [pc, #168]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f4:	0a5b      	lsrs	r3, r3, #9
 800c8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8fa:	ee07 3a90 	vmov	s15, r3
 800c8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c90a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c90e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c916:	ee17 2a90 	vmov	r2, s15
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c91e:	4b1f      	ldr	r3, [pc, #124]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c922:	0c1b      	lsrs	r3, r3, #16
 800c924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c928:	ee07 3a90 	vmov	s15, r3
 800c92c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c934:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c938:	edd7 6a07 	vldr	s13, [r7, #28]
 800c93c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c944:	ee17 2a90 	vmov	r2, s15
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c94c:	4b13      	ldr	r3, [pc, #76]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c950:	0e1b      	lsrs	r3, r3, #24
 800c952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c956:	ee07 3a90 	vmov	s15, r3
 800c95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c95e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c962:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c966:	edd7 6a07 	vldr	s13, [r7, #28]
 800c96a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c96e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c972:	ee17 2a90 	vmov	r2, s15
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c97a:	e008      	b.n	800c98e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	609a      	str	r2, [r3, #8]
}
 800c98e:	bf00      	nop
 800c990:	3724      	adds	r7, #36	; 0x24
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	58024400 	.word	0x58024400
 800c9a0:	03d09000 	.word	0x03d09000
 800c9a4:	46000000 	.word	0x46000000
 800c9a8:	4c742400 	.word	0x4c742400
 800c9ac:	4a742400 	.word	0x4a742400
 800c9b0:	4af42400 	.word	0x4af42400

0800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b089      	sub	sp, #36	; 0x24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9bc:	4ba1      	ldr	r3, [pc, #644]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c0:	f003 0303 	and.w	r3, r3, #3
 800c9c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c9c6:	4b9f      	ldr	r3, [pc, #636]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ca:	0d1b      	lsrs	r3, r3, #20
 800c9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c9d2:	4b9c      	ldr	r3, [pc, #624]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d6:	0a1b      	lsrs	r3, r3, #8
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c9de:	4b99      	ldr	r3, [pc, #612]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9e2:	08db      	lsrs	r3, r3, #3
 800c9e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	fb02 f303 	mul.w	r3, r2, r3
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 8111 	beq.w	800cc24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	f000 8083 	beq.w	800cb10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	f200 80a1 	bhi.w	800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d003      	beq.n	800ca20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d056      	beq.n	800cacc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ca1e:	e099      	b.n	800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca20:	4b88      	ldr	r3, [pc, #544]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f003 0320 	and.w	r3, r3, #32
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d02d      	beq.n	800ca88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ca2c:	4b85      	ldr	r3, [pc, #532]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	08db      	lsrs	r3, r3, #3
 800ca32:	f003 0303 	and.w	r3, r3, #3
 800ca36:	4a84      	ldr	r2, [pc, #528]	; (800cc48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ca38:	fa22 f303 	lsr.w	r3, r2, r3
 800ca3c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	ee07 3a90 	vmov	s15, r3
 800ca44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca56:	4b7b      	ldr	r3, [pc, #492]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ca86:	e087      	b.n	800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	ee07 3a90 	vmov	s15, r3
 800ca8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ca96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca9a:	4b6a      	ldr	r3, [pc, #424]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa2:	ee07 3a90 	vmov	s15, r3
 800caa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800caae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800caca:	e065      	b.n	800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	ee07 3a90 	vmov	s15, r3
 800cad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cad6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cade:	4b59      	ldr	r3, [pc, #356]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae6:	ee07 3a90 	vmov	s15, r3
 800caea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caee:	ed97 6a03 	vldr	s12, [r7, #12]
 800caf2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cafa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cafe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb0e:	e043      	b.n	800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	ee07 3a90 	vmov	s15, r3
 800cb16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cb1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb22:	4b48      	ldr	r3, [pc, #288]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb2a:	ee07 3a90 	vmov	s15, r3
 800cb2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb32:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb36:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb52:	e021      	b.n	800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	ee07 3a90 	vmov	s15, r3
 800cb5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cb62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb66:	4b37      	ldr	r3, [pc, #220]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb6e:	ee07 3a90 	vmov	s15, r3
 800cb72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb76:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800cb98:	4b2a      	ldr	r3, [pc, #168]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9c:	0a5b      	lsrs	r3, r3, #9
 800cb9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cba2:	ee07 3a90 	vmov	s15, r3
 800cba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbbe:	ee17 2a90 	vmov	r2, s15
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800cbc6:	4b1f      	ldr	r3, [pc, #124]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbca:	0c1b      	lsrs	r3, r3, #16
 800cbcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd0:	ee07 3a90 	vmov	s15, r3
 800cbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbec:	ee17 2a90 	vmov	r2, s15
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cbf4:	4b13      	ldr	r3, [pc, #76]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf8:	0e1b      	lsrs	r3, r3, #24
 800cbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbfe:	ee07 3a90 	vmov	s15, r3
 800cc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc1a:	ee17 2a90 	vmov	r2, s15
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cc22:	e008      	b.n	800cc36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	609a      	str	r2, [r3, #8]
}
 800cc36:	bf00      	nop
 800cc38:	3724      	adds	r7, #36	; 0x24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	58024400 	.word	0x58024400
 800cc48:	03d09000 	.word	0x03d09000
 800cc4c:	46000000 	.word	0x46000000
 800cc50:	4c742400 	.word	0x4c742400
 800cc54:	4a742400 	.word	0x4a742400
 800cc58:	4af42400 	.word	0x4af42400

0800cc5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc6a:	4b53      	ldr	r3, [pc, #332]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6e:	f003 0303 	and.w	r3, r3, #3
 800cc72:	2b03      	cmp	r3, #3
 800cc74:	d101      	bne.n	800cc7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e099      	b.n	800cdae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cc7a:	4b4f      	ldr	r3, [pc, #316]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a4e      	ldr	r2, [pc, #312]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cc80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc86:	f7fa faa5 	bl	80071d4 <HAL_GetTick>
 800cc8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc8c:	e008      	b.n	800cca0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cc8e:	f7fa faa1 	bl	80071d4 <HAL_GetTick>
 800cc92:	4602      	mov	r2, r0
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d901      	bls.n	800cca0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	e086      	b.n	800cdae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cca0:	4b45      	ldr	r3, [pc, #276]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1f0      	bne.n	800cc8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ccac:	4b42      	ldr	r3, [pc, #264]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800ccae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	031b      	lsls	r3, r3, #12
 800ccba:	493f      	ldr	r1, [pc, #252]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	628b      	str	r3, [r1, #40]	; 0x28
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	025b      	lsls	r3, r3, #9
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	431a      	orrs	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	041b      	lsls	r3, r3, #16
 800ccde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cce2:	431a      	orrs	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	3b01      	subs	r3, #1
 800ccea:	061b      	lsls	r3, r3, #24
 800ccec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ccf0:	4931      	ldr	r1, [pc, #196]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ccf6:	4b30      	ldr	r3, [pc, #192]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800ccf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	695b      	ldr	r3, [r3, #20]
 800cd02:	492d      	ldr	r1, [pc, #180]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd04:	4313      	orrs	r3, r2
 800cd06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd08:	4b2b      	ldr	r3, [pc, #172]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0c:	f023 0220 	bic.w	r2, r3, #32
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	699b      	ldr	r3, [r3, #24]
 800cd14:	4928      	ldr	r1, [pc, #160]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd16:	4313      	orrs	r3, r2
 800cd18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd1a:	4b27      	ldr	r3, [pc, #156]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1e:	4a26      	ldr	r2, [pc, #152]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd20:	f023 0310 	bic.w	r3, r3, #16
 800cd24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd26:	4b24      	ldr	r3, [pc, #144]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd2a:	4b24      	ldr	r3, [pc, #144]	; (800cdbc <RCCEx_PLL2_Config+0x160>)
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	69d2      	ldr	r2, [r2, #28]
 800cd32:	00d2      	lsls	r2, r2, #3
 800cd34:	4920      	ldr	r1, [pc, #128]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd36:	4313      	orrs	r3, r2
 800cd38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd3a:	4b1f      	ldr	r3, [pc, #124]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3e:	4a1e      	ldr	r2, [pc, #120]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd40:	f043 0310 	orr.w	r3, r3, #16
 800cd44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d106      	bne.n	800cd5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cd4c:	4b1a      	ldr	r3, [pc, #104]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd50:	4a19      	ldr	r2, [pc, #100]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd58:	e00f      	b.n	800cd7a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d106      	bne.n	800cd6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cd60:	4b15      	ldr	r3, [pc, #84]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd64:	4a14      	ldr	r2, [pc, #80]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd6c:	e005      	b.n	800cd7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cd6e:	4b12      	ldr	r3, [pc, #72]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd72:	4a11      	ldr	r2, [pc, #68]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cd7a:	4b0f      	ldr	r3, [pc, #60]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a0e      	ldr	r2, [pc, #56]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cd80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd86:	f7fa fa25 	bl	80071d4 <HAL_GetTick>
 800cd8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd8c:	e008      	b.n	800cda0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cd8e:	f7fa fa21 	bl	80071d4 <HAL_GetTick>
 800cd92:	4602      	mov	r2, r0
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	1ad3      	subs	r3, r2, r3
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d901      	bls.n	800cda0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd9c:	2303      	movs	r3, #3
 800cd9e:	e006      	b.n	800cdae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cda0:	4b05      	ldr	r3, [pc, #20]	; (800cdb8 <RCCEx_PLL2_Config+0x15c>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d0f0      	beq.n	800cd8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cdac:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	58024400 	.word	0x58024400
 800cdbc:	ffff0007 	.word	0xffff0007

0800cdc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdce:	4b53      	ldr	r3, [pc, #332]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800cdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd2:	f003 0303 	and.w	r3, r3, #3
 800cdd6:	2b03      	cmp	r3, #3
 800cdd8:	d101      	bne.n	800cdde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e099      	b.n	800cf12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cdde:	4b4f      	ldr	r3, [pc, #316]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a4e      	ldr	r2, [pc, #312]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800cde4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cde8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdea:	f7fa f9f3 	bl	80071d4 <HAL_GetTick>
 800cdee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cdf0:	e008      	b.n	800ce04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cdf2:	f7fa f9ef 	bl	80071d4 <HAL_GetTick>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	d901      	bls.n	800ce04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce00:	2303      	movs	r3, #3
 800ce02:	e086      	b.n	800cf12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce04:	4b45      	ldr	r3, [pc, #276]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d1f0      	bne.n	800cdf2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce10:	4b42      	ldr	r3, [pc, #264]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	051b      	lsls	r3, r3, #20
 800ce1e:	493f      	ldr	r1, [pc, #252]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce20:	4313      	orrs	r3, r2
 800ce22:	628b      	str	r3, [r1, #40]	; 0x28
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	3b01      	subs	r3, #1
 800ce34:	025b      	lsls	r3, r3, #9
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	431a      	orrs	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	041b      	lsls	r3, r3, #16
 800ce42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce46:	431a      	orrs	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	061b      	lsls	r3, r3, #24
 800ce50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce54:	4931      	ldr	r1, [pc, #196]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce56:	4313      	orrs	r3, r2
 800ce58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ce5a:	4b30      	ldr	r3, [pc, #192]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	695b      	ldr	r3, [r3, #20]
 800ce66:	492d      	ldr	r1, [pc, #180]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ce6c:	4b2b      	ldr	r3, [pc, #172]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	699b      	ldr	r3, [r3, #24]
 800ce78:	4928      	ldr	r1, [pc, #160]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ce7e:	4b27      	ldr	r3, [pc, #156]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce82:	4a26      	ldr	r2, [pc, #152]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce8a:	4b24      	ldr	r3, [pc, #144]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce8e:	4b24      	ldr	r3, [pc, #144]	; (800cf20 <RCCEx_PLL3_Config+0x160>)
 800ce90:	4013      	ands	r3, r2
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	69d2      	ldr	r2, [r2, #28]
 800ce96:	00d2      	lsls	r2, r2, #3
 800ce98:	4920      	ldr	r1, [pc, #128]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ce9e:	4b1f      	ldr	r3, [pc, #124]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800cea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea2:	4a1e      	ldr	r2, [pc, #120]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800cea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d106      	bne.n	800cebe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ceb0:	4b1a      	ldr	r3, [pc, #104]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	4a19      	ldr	r2, [pc, #100]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ceb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ceba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cebc:	e00f      	b.n	800cede <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d106      	bne.n	800ced2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cec4:	4b15      	ldr	r3, [pc, #84]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800cec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec8:	4a14      	ldr	r2, [pc, #80]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ceca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cece:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ced0:	e005      	b.n	800cede <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ced2:	4b12      	ldr	r3, [pc, #72]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ced4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced6:	4a11      	ldr	r2, [pc, #68]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800ced8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cedc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cede:	4b0f      	ldr	r3, [pc, #60]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a0e      	ldr	r2, [pc, #56]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800cee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceea:	f7fa f973 	bl	80071d4 <HAL_GetTick>
 800ceee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cef0:	e008      	b.n	800cf04 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cef2:	f7fa f96f 	bl	80071d4 <HAL_GetTick>
 800cef6:	4602      	mov	r2, r0
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d901      	bls.n	800cf04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf00:	2303      	movs	r3, #3
 800cf02:	e006      	b.n	800cf12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf04:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <RCCEx_PLL3_Config+0x15c>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d0f0      	beq.n	800cef2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	58024400 	.word	0x58024400
 800cf20:	ffff0007 	.word	0xffff0007

0800cf24 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e0f1      	b.n	800d11a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a78      	ldr	r2, [pc, #480]	; (800d124 <HAL_SPI_Init+0x200>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d00f      	beq.n	800cf66 <HAL_SPI_Init+0x42>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a77      	ldr	r2, [pc, #476]	; (800d128 <HAL_SPI_Init+0x204>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d00a      	beq.n	800cf66 <HAL_SPI_Init+0x42>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a75      	ldr	r2, [pc, #468]	; (800d12c <HAL_SPI_Init+0x208>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d005      	beq.n	800cf66 <HAL_SPI_Init+0x42>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	2b0f      	cmp	r3, #15
 800cf60:	d901      	bls.n	800cf66 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e0d9      	b.n	800d11a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fba2 	bl	800d6b0 <SPI_GetPacketSize>
 800cf6c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a6c      	ldr	r2, [pc, #432]	; (800d124 <HAL_SPI_Init+0x200>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d00c      	beq.n	800cf92 <HAL_SPI_Init+0x6e>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a6a      	ldr	r2, [pc, #424]	; (800d128 <HAL_SPI_Init+0x204>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d007      	beq.n	800cf92 <HAL_SPI_Init+0x6e>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a69      	ldr	r2, [pc, #420]	; (800d12c <HAL_SPI_Init+0x208>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d002      	beq.n	800cf92 <HAL_SPI_Init+0x6e>
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2b08      	cmp	r3, #8
 800cf90:	d811      	bhi.n	800cfb6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf96:	4a63      	ldr	r2, [pc, #396]	; (800d124 <HAL_SPI_Init+0x200>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d009      	beq.n	800cfb0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a61      	ldr	r2, [pc, #388]	; (800d128 <HAL_SPI_Init+0x204>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d004      	beq.n	800cfb0 <HAL_SPI_Init+0x8c>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a60      	ldr	r2, [pc, #384]	; (800d12c <HAL_SPI_Init+0x208>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d104      	bne.n	800cfba <HAL_SPI_Init+0x96>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2b10      	cmp	r3, #16
 800cfb4:	d901      	bls.n	800cfba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e0af      	b.n	800d11a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d106      	bne.n	800cfd4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7f9 fe08 	bl	8006be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2202      	movs	r2, #2
 800cfd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f022 0201 	bic.w	r2, r2, #1
 800cfea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cff6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d000:	d119      	bne.n	800d036 <HAL_SPI_Init+0x112>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d00a:	d103      	bne.n	800d014 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d010:	2b00      	cmp	r3, #0
 800d012:	d008      	beq.n	800d026 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10c      	bne.n	800d036 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d024:	d107      	bne.n	800d036 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d034:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	69da      	ldr	r2, [r3, #28]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03e:	431a      	orrs	r2, r3
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	431a      	orrs	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d048:	ea42 0103 	orr.w	r1, r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68da      	ldr	r2, [r3, #12]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	430a      	orrs	r2, r1
 800d056:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d060:	431a      	orrs	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d066:	431a      	orrs	r2, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	431a      	orrs	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	431a      	orrs	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	695b      	ldr	r3, [r3, #20]
 800d078:	431a      	orrs	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	431a      	orrs	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	431a      	orrs	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d08a:	431a      	orrs	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	431a      	orrs	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d096:	ea42 0103 	orr.w	r1, r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	430a      	orrs	r2, r1
 800d0a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d113      	bne.n	800d0d6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d0d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f022 0201 	bic.w	r2, r2, #1
 800d0e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00a      	beq.n	800d108 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	430a      	orrs	r2, r1
 800d106:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	40013000 	.word	0x40013000
 800d128:	40003800 	.word	0x40003800
 800d12c:	40003c00 	.word	0x40003c00

0800d130 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08a      	sub	sp, #40	; 0x28
 800d134:	af02      	add	r7, sp, #8
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	603b      	str	r3, [r7, #0]
 800d13c:	4613      	mov	r3, r2
 800d13e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	3320      	adds	r3, #32
 800d146:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d152:	2b01      	cmp	r3, #1
 800d154:	d101      	bne.n	800d15a <HAL_SPI_Transmit+0x2a>
 800d156:	2302      	movs	r3, #2
 800d158:	e1d7      	b.n	800d50a <HAL_SPI_Transmit+0x3da>
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2201      	movs	r2, #1
 800d15e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d162:	f7fa f837 	bl	80071d4 <HAL_GetTick>
 800d166:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	2b01      	cmp	r3, #1
 800d172:	d007      	beq.n	800d184 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d174:	2302      	movs	r3, #2
 800d176:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d180:	7efb      	ldrb	r3, [r7, #27]
 800d182:	e1c2      	b.n	800d50a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d002      	beq.n	800d190 <HAL_SPI_Transmit+0x60>
 800d18a:	88fb      	ldrh	r3, [r7, #6]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d107      	bne.n	800d1a0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d19c:	7efb      	ldrb	r3, [r7, #27]
 800d19e:	e1b4      	b.n	800d50a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2203      	movs	r2, #3
 800d1a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	88fa      	ldrh	r2, [r7, #6]
 800d1ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	88fa      	ldrh	r2, [r7, #6]
 800d1c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d1f0:	d107      	bne.n	800d202 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d200:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	4b96      	ldr	r3, [pc, #600]	; (800d464 <HAL_SPI_Transmit+0x334>)
 800d20a:	4013      	ands	r3, r2
 800d20c:	88f9      	ldrh	r1, [r7, #6]
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	6812      	ldr	r2, [r2, #0]
 800d212:	430b      	orrs	r3, r1
 800d214:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f042 0201 	orr.w	r2, r2, #1
 800d224:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d22e:	d107      	bne.n	800d240 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d23e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	2b0f      	cmp	r3, #15
 800d246:	d947      	bls.n	800d2d8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d248:	e03f      	b.n	800d2ca <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	695b      	ldr	r3, [r3, #20]
 800d250:	f003 0302 	and.w	r3, r3, #2
 800d254:	2b02      	cmp	r3, #2
 800d256:	d114      	bne.n	800d282 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6812      	ldr	r2, [r2, #0]
 800d262:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d268:	1d1a      	adds	r2, r3, #4
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d274:	b29b      	uxth	r3, r3
 800d276:	3b01      	subs	r3, #1
 800d278:	b29a      	uxth	r2, r3
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d280:	e023      	b.n	800d2ca <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d282:	f7f9 ffa7 	bl	80071d4 <HAL_GetTick>
 800d286:	4602      	mov	r2, r0
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d803      	bhi.n	800d29a <HAL_SPI_Transmit+0x16a>
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d298:	d102      	bne.n	800d2a0 <HAL_SPI_Transmit+0x170>
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d114      	bne.n	800d2ca <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f000 f937 	bl	800d514 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d2c6:	2303      	movs	r3, #3
 800d2c8:	e11f      	b.n	800d50a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1b9      	bne.n	800d24a <HAL_SPI_Transmit+0x11a>
 800d2d6:	e0f2      	b.n	800d4be <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	2b07      	cmp	r3, #7
 800d2de:	f240 80e7 	bls.w	800d4b0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d2e2:	e05d      	b.n	800d3a0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	f003 0302 	and.w	r3, r3, #2
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d132      	bne.n	800d358 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d918      	bls.n	800d330 <HAL_SPI_Transmit+0x200>
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d302:	2b00      	cmp	r3, #0
 800d304:	d014      	beq.n	800d330 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6812      	ldr	r2, [r2, #0]
 800d310:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d316:	1d1a      	adds	r2, r3, #4
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d322:	b29b      	uxth	r3, r3
 800d324:	3b02      	subs	r3, #2
 800d326:	b29a      	uxth	r2, r3
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d32e:	e037      	b.n	800d3a0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d334:	881a      	ldrh	r2, [r3, #0]
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d33e:	1c9a      	adds	r2, r3, #2
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	3b01      	subs	r3, #1
 800d34e:	b29a      	uxth	r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d356:	e023      	b.n	800d3a0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d358:	f7f9 ff3c 	bl	80071d4 <HAL_GetTick>
 800d35c:	4602      	mov	r2, r0
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	683a      	ldr	r2, [r7, #0]
 800d364:	429a      	cmp	r2, r3
 800d366:	d803      	bhi.n	800d370 <HAL_SPI_Transmit+0x240>
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d36e:	d102      	bne.n	800d376 <HAL_SPI_Transmit+0x246>
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d114      	bne.n	800d3a0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f000 f8cc 	bl	800d514 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d38a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e0b4      	b.n	800d50a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d19b      	bne.n	800d2e4 <HAL_SPI_Transmit+0x1b4>
 800d3ac:	e087      	b.n	800d4be <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	695b      	ldr	r3, [r3, #20]
 800d3b4:	f003 0302 	and.w	r3, r3, #2
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	d155      	bne.n	800d468 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	2b03      	cmp	r3, #3
 800d3c6:	d918      	bls.n	800d3fa <HAL_SPI_Transmit+0x2ca>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3cc:	2b40      	cmp	r3, #64	; 0x40
 800d3ce:	d914      	bls.n	800d3fa <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	6812      	ldr	r2, [r2, #0]
 800d3da:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3e0:	1d1a      	adds	r2, r3, #4
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	3b04      	subs	r3, #4
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d3f8:	e05a      	b.n	800d4b0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d400:	b29b      	uxth	r3, r3
 800d402:	2b01      	cmp	r3, #1
 800d404:	d917      	bls.n	800d436 <HAL_SPI_Transmit+0x306>
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d013      	beq.n	800d436 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d412:	881a      	ldrh	r2, [r3, #0]
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d41c:	1c9a      	adds	r2, r3, #2
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d428:	b29b      	uxth	r3, r3
 800d42a:	3b02      	subs	r3, #2
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d434:	e03c      	b.n	800d4b0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3320      	adds	r3, #32
 800d440:	7812      	ldrb	r2, [r2, #0]
 800d442:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d454:	b29b      	uxth	r3, r3
 800d456:	3b01      	subs	r3, #1
 800d458:	b29a      	uxth	r2, r3
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d460:	e026      	b.n	800d4b0 <HAL_SPI_Transmit+0x380>
 800d462:	bf00      	nop
 800d464:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d468:	f7f9 feb4 	bl	80071d4 <HAL_GetTick>
 800d46c:	4602      	mov	r2, r0
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	429a      	cmp	r2, r3
 800d476:	d803      	bhi.n	800d480 <HAL_SPI_Transmit+0x350>
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d47e:	d102      	bne.n	800d486 <HAL_SPI_Transmit+0x356>
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d114      	bne.n	800d4b0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f000 f844 	bl	800d514 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d49a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d4ac:	2303      	movs	r3, #3
 800d4ae:	e02c      	b.n	800d50a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	f47f af78 	bne.w	800d3ae <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	2108      	movs	r1, #8
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f000 f8c3 	bl	800d654 <SPI_WaitOnFlagUntilTimeout>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d007      	beq.n	800d4e4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4da:	f043 0220 	orr.w	r2, r3, #32
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f000 f815 	bl	800d514 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	e000      	b.n	800d50a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d508:	7efb      	ldrb	r3, [r7, #27]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3720      	adds	r7, #32
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop

0800d514 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	699a      	ldr	r2, [r3, #24]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f042 0208 	orr.w	r2, r2, #8
 800d532:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	699a      	ldr	r2, [r3, #24]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f042 0210 	orr.w	r2, r2, #16
 800d542:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f022 0201 	bic.w	r2, r2, #1
 800d552:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6919      	ldr	r1, [r3, #16]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	4b3c      	ldr	r3, [pc, #240]	; (800d650 <SPI_CloseTransfer+0x13c>)
 800d560:	400b      	ands	r3, r1
 800d562:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	689a      	ldr	r2, [r3, #8]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d572:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b04      	cmp	r3, #4
 800d57e:	d014      	beq.n	800d5aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f003 0320 	and.w	r3, r3, #32
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00f      	beq.n	800d5aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d590:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	699a      	ldr	r2, [r3, #24]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f042 0220 	orr.w	r2, r2, #32
 800d5a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	2b03      	cmp	r3, #3
 800d5b4:	d014      	beq.n	800d5e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d00f      	beq.n	800d5e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5c6:	f043 0204 	orr.w	r2, r3, #4
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	699a      	ldr	r2, [r3, #24]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00f      	beq.n	800d60a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5f0:	f043 0201 	orr.w	r2, r3, #1
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	699a      	ldr	r2, [r3, #24]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d608:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d610:	2b00      	cmp	r3, #0
 800d612:	d00f      	beq.n	800d634 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d61a:	f043 0208 	orr.w	r2, r3, #8
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	699a      	ldr	r2, [r3, #24]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d632:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d644:	bf00      	nop
 800d646:	3714      	adds	r7, #20
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	fffffc90 	.word	0xfffffc90

0800d654 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	603b      	str	r3, [r7, #0]
 800d660:	4613      	mov	r3, r2
 800d662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d664:	e010      	b.n	800d688 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d666:	f7f9 fdb5 	bl	80071d4 <HAL_GetTick>
 800d66a:	4602      	mov	r2, r0
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	69ba      	ldr	r2, [r7, #24]
 800d672:	429a      	cmp	r2, r3
 800d674:	d803      	bhi.n	800d67e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d67c:	d102      	bne.n	800d684 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d684:	2303      	movs	r3, #3
 800d686:	e00f      	b.n	800d6a8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	695a      	ldr	r2, [r3, #20]
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	4013      	ands	r3, r2
 800d692:	68ba      	ldr	r2, [r7, #8]
 800d694:	429a      	cmp	r2, r3
 800d696:	bf0c      	ite	eq
 800d698:	2301      	moveq	r3, #1
 800d69a:	2300      	movne	r3, #0
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	461a      	mov	r2, r3
 800d6a0:	79fb      	ldrb	r3, [r7, #7]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d0df      	beq.n	800d666 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d6a6:	2300      	movs	r3, #0
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6bc:	095b      	lsrs	r3, r3, #5
 800d6be:	3301      	adds	r3, #1
 800d6c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	3307      	adds	r3, #7
 800d6ce:	08db      	lsrs	r3, r3, #3
 800d6d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	fb02 f303 	mul.w	r3, r2, r3
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b082      	sub	sp, #8
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d101      	bne.n	800d6f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e049      	b.n	800d78c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	2b00      	cmp	r3, #0
 800d702:	d106      	bne.n	800d712 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f7f9 fad5 	bl	8006cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2202      	movs	r2, #2
 800d716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	3304      	adds	r3, #4
 800d722:	4619      	mov	r1, r3
 800d724:	4610      	mov	r0, r2
 800d726:	f000 fa23 	bl	800db70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2201      	movs	r2, #1
 800d736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2201      	movs	r2, #1
 800d73e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2201      	movs	r2, #1
 800d74e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2201      	movs	r2, #1
 800d756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2201      	movs	r2, #1
 800d766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2201      	movs	r2, #1
 800d776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2201      	movs	r2, #1
 800d77e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2201      	movs	r2, #1
 800d786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d001      	beq.n	800d7ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	e054      	b.n	800d856 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2202      	movs	r2, #2
 800d7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	68da      	ldr	r2, [r3, #12]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f042 0201 	orr.w	r2, r2, #1
 800d7c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a26      	ldr	r2, [pc, #152]	; (800d864 <HAL_TIM_Base_Start_IT+0xd0>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d022      	beq.n	800d814 <HAL_TIM_Base_Start_IT+0x80>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7d6:	d01d      	beq.n	800d814 <HAL_TIM_Base_Start_IT+0x80>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4a22      	ldr	r2, [pc, #136]	; (800d868 <HAL_TIM_Base_Start_IT+0xd4>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d018      	beq.n	800d814 <HAL_TIM_Base_Start_IT+0x80>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4a21      	ldr	r2, [pc, #132]	; (800d86c <HAL_TIM_Base_Start_IT+0xd8>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d013      	beq.n	800d814 <HAL_TIM_Base_Start_IT+0x80>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a1f      	ldr	r2, [pc, #124]	; (800d870 <HAL_TIM_Base_Start_IT+0xdc>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d00e      	beq.n	800d814 <HAL_TIM_Base_Start_IT+0x80>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a1e      	ldr	r2, [pc, #120]	; (800d874 <HAL_TIM_Base_Start_IT+0xe0>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d009      	beq.n	800d814 <HAL_TIM_Base_Start_IT+0x80>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a1c      	ldr	r2, [pc, #112]	; (800d878 <HAL_TIM_Base_Start_IT+0xe4>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d004      	beq.n	800d814 <HAL_TIM_Base_Start_IT+0x80>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4a1b      	ldr	r2, [pc, #108]	; (800d87c <HAL_TIM_Base_Start_IT+0xe8>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d115      	bne.n	800d840 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	689a      	ldr	r2, [r3, #8]
 800d81a:	4b19      	ldr	r3, [pc, #100]	; (800d880 <HAL_TIM_Base_Start_IT+0xec>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2b06      	cmp	r3, #6
 800d824:	d015      	beq.n	800d852 <HAL_TIM_Base_Start_IT+0xbe>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d82c:	d011      	beq.n	800d852 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f042 0201 	orr.w	r2, r2, #1
 800d83c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d83e:	e008      	b.n	800d852 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f042 0201 	orr.w	r2, r2, #1
 800d84e:	601a      	str	r2, [r3, #0]
 800d850:	e000      	b.n	800d854 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d852:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3714      	adds	r7, #20
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	40010000 	.word	0x40010000
 800d868:	40000400 	.word	0x40000400
 800d86c:	40000800 	.word	0x40000800
 800d870:	40000c00 	.word	0x40000c00
 800d874:	40010400 	.word	0x40010400
 800d878:	40001800 	.word	0x40001800
 800d87c:	40014000 	.word	0x40014000
 800d880:	00010007 	.word	0x00010007

0800d884 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	68da      	ldr	r2, [r3, #12]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f022 0201 	bic.w	r2, r2, #1
 800d89a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6a1a      	ldr	r2, [r3, #32]
 800d8a2:	f241 1311 	movw	r3, #4369	; 0x1111
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10f      	bne.n	800d8cc <HAL_TIM_Base_Stop_IT+0x48>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6a1a      	ldr	r2, [r3, #32]
 800d8b2:	f240 4344 	movw	r3, #1092	; 0x444
 800d8b6:	4013      	ands	r3, r2
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d107      	bne.n	800d8cc <HAL_TIM_Base_Stop_IT+0x48>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f022 0201 	bic.w	r2, r2, #1
 800d8ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	370c      	adds	r7, #12
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b082      	sub	sp, #8
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	691b      	ldr	r3, [r3, #16]
 800d8f0:	f003 0302 	and.w	r3, r3, #2
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d122      	bne.n	800d93e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	f003 0302 	and.w	r3, r3, #2
 800d902:	2b02      	cmp	r3, #2
 800d904:	d11b      	bne.n	800d93e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f06f 0202 	mvn.w	r2, #2
 800d90e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2201      	movs	r2, #1
 800d914:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	699b      	ldr	r3, [r3, #24]
 800d91c:	f003 0303 	and.w	r3, r3, #3
 800d920:	2b00      	cmp	r3, #0
 800d922:	d003      	beq.n	800d92c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 f905 	bl	800db34 <HAL_TIM_IC_CaptureCallback>
 800d92a:	e005      	b.n	800d938 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 f8f7 	bl	800db20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f908 	bl	800db48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	f003 0304 	and.w	r3, r3, #4
 800d948:	2b04      	cmp	r3, #4
 800d94a:	d122      	bne.n	800d992 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	f003 0304 	and.w	r3, r3, #4
 800d956:	2b04      	cmp	r3, #4
 800d958:	d11b      	bne.n	800d992 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f06f 0204 	mvn.w	r2, #4
 800d962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2202      	movs	r2, #2
 800d968:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	699b      	ldr	r3, [r3, #24]
 800d970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d974:	2b00      	cmp	r3, #0
 800d976:	d003      	beq.n	800d980 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 f8db 	bl	800db34 <HAL_TIM_IC_CaptureCallback>
 800d97e:	e005      	b.n	800d98c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f8cd 	bl	800db20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 f8de 	bl	800db48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	f003 0308 	and.w	r3, r3, #8
 800d99c:	2b08      	cmp	r3, #8
 800d99e:	d122      	bne.n	800d9e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	f003 0308 	and.w	r3, r3, #8
 800d9aa:	2b08      	cmp	r3, #8
 800d9ac:	d11b      	bne.n	800d9e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f06f 0208 	mvn.w	r2, #8
 800d9b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2204      	movs	r2, #4
 800d9bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	69db      	ldr	r3, [r3, #28]
 800d9c4:	f003 0303 	and.w	r3, r3, #3
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d003      	beq.n	800d9d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f8b1 	bl	800db34 <HAL_TIM_IC_CaptureCallback>
 800d9d2:	e005      	b.n	800d9e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f8a3 	bl	800db20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f8b4 	bl	800db48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	f003 0310 	and.w	r3, r3, #16
 800d9f0:	2b10      	cmp	r3, #16
 800d9f2:	d122      	bne.n	800da3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	f003 0310 	and.w	r3, r3, #16
 800d9fe:	2b10      	cmp	r3, #16
 800da00:	d11b      	bne.n	800da3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f06f 0210 	mvn.w	r2, #16
 800da0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2208      	movs	r2, #8
 800da10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	69db      	ldr	r3, [r3, #28]
 800da18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d003      	beq.n	800da28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f887 	bl	800db34 <HAL_TIM_IC_CaptureCallback>
 800da26:	e005      	b.n	800da34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 f879 	bl	800db20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f88a 	bl	800db48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	691b      	ldr	r3, [r3, #16]
 800da40:	f003 0301 	and.w	r3, r3, #1
 800da44:	2b01      	cmp	r3, #1
 800da46:	d10e      	bne.n	800da66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	f003 0301 	and.w	r3, r3, #1
 800da52:	2b01      	cmp	r3, #1
 800da54:	d107      	bne.n	800da66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f06f 0201 	mvn.w	r2, #1
 800da5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7f8 fb95 	bl	8006190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	691b      	ldr	r3, [r3, #16]
 800da6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da70:	2b80      	cmp	r3, #128	; 0x80
 800da72:	d10e      	bne.n	800da92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da7e:	2b80      	cmp	r3, #128	; 0x80
 800da80:	d107      	bne.n	800da92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800da8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f9a1 	bl	800ddd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daa0:	d10e      	bne.n	800dac0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daac:	2b80      	cmp	r3, #128	; 0x80
 800daae:	d107      	bne.n	800dac0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 f994 	bl	800dde8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	691b      	ldr	r3, [r3, #16]
 800dac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daca:	2b40      	cmp	r3, #64	; 0x40
 800dacc:	d10e      	bne.n	800daec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dad8:	2b40      	cmp	r3, #64	; 0x40
 800dada:	d107      	bne.n	800daec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 f838 	bl	800db5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	691b      	ldr	r3, [r3, #16]
 800daf2:	f003 0320 	and.w	r3, r3, #32
 800daf6:	2b20      	cmp	r3, #32
 800daf8:	d10e      	bne.n	800db18 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	f003 0320 	and.w	r3, r3, #32
 800db04:	2b20      	cmp	r3, #32
 800db06:	d107      	bne.n	800db18 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f06f 0220 	mvn.w	r2, #32
 800db10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 f954 	bl	800ddc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db18:	bf00      	nop
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db28:	bf00      	nop
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db3c:	bf00      	nop
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db50:	bf00      	nop
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800db70:	b480      	push	{r7}
 800db72:	b085      	sub	sp, #20
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	4a40      	ldr	r2, [pc, #256]	; (800dc84 <TIM_Base_SetConfig+0x114>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d013      	beq.n	800dbb0 <TIM_Base_SetConfig+0x40>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db8e:	d00f      	beq.n	800dbb0 <TIM_Base_SetConfig+0x40>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	4a3d      	ldr	r2, [pc, #244]	; (800dc88 <TIM_Base_SetConfig+0x118>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d00b      	beq.n	800dbb0 <TIM_Base_SetConfig+0x40>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	4a3c      	ldr	r2, [pc, #240]	; (800dc8c <TIM_Base_SetConfig+0x11c>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d007      	beq.n	800dbb0 <TIM_Base_SetConfig+0x40>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	4a3b      	ldr	r2, [pc, #236]	; (800dc90 <TIM_Base_SetConfig+0x120>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d003      	beq.n	800dbb0 <TIM_Base_SetConfig+0x40>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a3a      	ldr	r2, [pc, #232]	; (800dc94 <TIM_Base_SetConfig+0x124>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d108      	bne.n	800dbc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	4a2f      	ldr	r2, [pc, #188]	; (800dc84 <TIM_Base_SetConfig+0x114>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d01f      	beq.n	800dc0a <TIM_Base_SetConfig+0x9a>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbd0:	d01b      	beq.n	800dc0a <TIM_Base_SetConfig+0x9a>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4a2c      	ldr	r2, [pc, #176]	; (800dc88 <TIM_Base_SetConfig+0x118>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d017      	beq.n	800dc0a <TIM_Base_SetConfig+0x9a>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4a2b      	ldr	r2, [pc, #172]	; (800dc8c <TIM_Base_SetConfig+0x11c>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d013      	beq.n	800dc0a <TIM_Base_SetConfig+0x9a>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4a2a      	ldr	r2, [pc, #168]	; (800dc90 <TIM_Base_SetConfig+0x120>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d00f      	beq.n	800dc0a <TIM_Base_SetConfig+0x9a>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4a29      	ldr	r2, [pc, #164]	; (800dc94 <TIM_Base_SetConfig+0x124>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d00b      	beq.n	800dc0a <TIM_Base_SetConfig+0x9a>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4a28      	ldr	r2, [pc, #160]	; (800dc98 <TIM_Base_SetConfig+0x128>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d007      	beq.n	800dc0a <TIM_Base_SetConfig+0x9a>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4a27      	ldr	r2, [pc, #156]	; (800dc9c <TIM_Base_SetConfig+0x12c>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d003      	beq.n	800dc0a <TIM_Base_SetConfig+0x9a>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a26      	ldr	r2, [pc, #152]	; (800dca0 <TIM_Base_SetConfig+0x130>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d108      	bne.n	800dc1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	695b      	ldr	r3, [r3, #20]
 800dc26:	4313      	orrs	r3, r2
 800dc28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	689a      	ldr	r2, [r3, #8]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4a10      	ldr	r2, [pc, #64]	; (800dc84 <TIM_Base_SetConfig+0x114>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d00f      	beq.n	800dc68 <TIM_Base_SetConfig+0xf8>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	4a12      	ldr	r2, [pc, #72]	; (800dc94 <TIM_Base_SetConfig+0x124>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d00b      	beq.n	800dc68 <TIM_Base_SetConfig+0xf8>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	4a11      	ldr	r2, [pc, #68]	; (800dc98 <TIM_Base_SetConfig+0x128>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d007      	beq.n	800dc68 <TIM_Base_SetConfig+0xf8>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	4a10      	ldr	r2, [pc, #64]	; (800dc9c <TIM_Base_SetConfig+0x12c>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d003      	beq.n	800dc68 <TIM_Base_SetConfig+0xf8>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	4a0f      	ldr	r2, [pc, #60]	; (800dca0 <TIM_Base_SetConfig+0x130>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d103      	bne.n	800dc70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	691a      	ldr	r2, [r3, #16]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2201      	movs	r2, #1
 800dc74:	615a      	str	r2, [r3, #20]
}
 800dc76:	bf00      	nop
 800dc78:	3714      	adds	r7, #20
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	40010000 	.word	0x40010000
 800dc88:	40000400 	.word	0x40000400
 800dc8c:	40000800 	.word	0x40000800
 800dc90:	40000c00 	.word	0x40000c00
 800dc94:	40010400 	.word	0x40010400
 800dc98:	40014000 	.word	0x40014000
 800dc9c:	40014400 	.word	0x40014400
 800dca0:	40014800 	.word	0x40014800

0800dca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b085      	sub	sp, #20
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d101      	bne.n	800dcbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dcb8:	2302      	movs	r3, #2
 800dcba:	e06d      	b.n	800dd98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a30      	ldr	r2, [pc, #192]	; (800dda4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d004      	beq.n	800dcf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a2f      	ldr	r2, [pc, #188]	; (800dda8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d108      	bne.n	800dd02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dcf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	4313      	orrs	r3, r2
 800dd12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a20      	ldr	r2, [pc, #128]	; (800dda4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d022      	beq.n	800dd6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd2e:	d01d      	beq.n	800dd6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a1d      	ldr	r2, [pc, #116]	; (800ddac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d018      	beq.n	800dd6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a1c      	ldr	r2, [pc, #112]	; (800ddb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d013      	beq.n	800dd6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a1a      	ldr	r2, [pc, #104]	; (800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d00e      	beq.n	800dd6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a15      	ldr	r2, [pc, #84]	; (800dda8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d009      	beq.n	800dd6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a16      	ldr	r2, [pc, #88]	; (800ddb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d004      	beq.n	800dd6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a15      	ldr	r2, [pc, #84]	; (800ddbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d10c      	bne.n	800dd86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	68ba      	ldr	r2, [r7, #8]
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	68ba      	ldr	r2, [r7, #8]
 800dd84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3714      	adds	r7, #20
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	40010000 	.word	0x40010000
 800dda8:	40010400 	.word	0x40010400
 800ddac:	40000400 	.word	0x40000400
 800ddb0:	40000800 	.word	0x40000800
 800ddb4:	40000c00 	.word	0x40000c00
 800ddb8:	40001800 	.word	0x40001800
 800ddbc:	40014000 	.word	0x40014000

0800ddc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddc8:	bf00      	nop
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dddc:	bf00      	nop
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ddf0:	bf00      	nop
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d101      	bne.n	800de0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de0a:	2301      	movs	r3, #1
 800de0c:	e042      	b.n	800de94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de14:	2b00      	cmp	r3, #0
 800de16:	d106      	bne.n	800de26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7f8 ff73 	bl	8006d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2224      	movs	r2, #36	; 0x24
 800de2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f022 0201 	bic.w	r2, r2, #1
 800de3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fbea 	bl	800e618 <UART_SetConfig>
 800de44:	4603      	mov	r3, r0
 800de46:	2b01      	cmp	r3, #1
 800de48:	d101      	bne.n	800de4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e022      	b.n	800de94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de52:	2b00      	cmp	r3, #0
 800de54:	d002      	beq.n	800de5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f001 f946 	bl	800f0e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	685a      	ldr	r2, [r3, #4]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	689a      	ldr	r2, [r3, #8]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f042 0201 	orr.w	r2, r2, #1
 800de8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f001 f9cd 	bl	800f22c <UART_CheckIdleState>
 800de92:	4603      	mov	r3, r0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b0ba      	sub	sp, #232	; 0xe8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	69db      	ldr	r3, [r3, #28]
 800deaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dec2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dec6:	f640 030f 	movw	r3, #2063	; 0x80f
 800deca:	4013      	ands	r3, r2
 800decc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ded0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d11b      	bne.n	800df10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ded8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dedc:	f003 0320 	and.w	r3, r3, #32
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d015      	beq.n	800df10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dee8:	f003 0320 	and.w	r3, r3, #32
 800deec:	2b00      	cmp	r3, #0
 800deee:	d105      	bne.n	800defc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800def0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800def4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800def8:	2b00      	cmp	r3, #0
 800defa:	d009      	beq.n	800df10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df00:	2b00      	cmp	r3, #0
 800df02:	f000 835a 	beq.w	800e5ba <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	4798      	blx	r3
      }
      return;
 800df0e:	e354      	b.n	800e5ba <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800df10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df14:	2b00      	cmp	r3, #0
 800df16:	f000 811f 	beq.w	800e158 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800df1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800df1e:	4b8b      	ldr	r3, [pc, #556]	; (800e14c <HAL_UART_IRQHandler+0x2b0>)
 800df20:	4013      	ands	r3, r2
 800df22:	2b00      	cmp	r3, #0
 800df24:	d106      	bne.n	800df34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800df26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800df2a:	4b89      	ldr	r3, [pc, #548]	; (800e150 <HAL_UART_IRQHandler+0x2b4>)
 800df2c:	4013      	ands	r3, r2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f000 8112 	beq.w	800e158 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800df34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df38:	f003 0301 	and.w	r3, r3, #1
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d011      	beq.n	800df64 <HAL_UART_IRQHandler+0xc8>
 800df40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00b      	beq.n	800df64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2201      	movs	r2, #1
 800df52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df5a:	f043 0201 	orr.w	r2, r3, #1
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df68:	f003 0302 	and.w	r3, r3, #2
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d011      	beq.n	800df94 <HAL_UART_IRQHandler+0xf8>
 800df70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df74:	f003 0301 	and.w	r3, r3, #1
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00b      	beq.n	800df94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2202      	movs	r2, #2
 800df82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df8a:	f043 0204 	orr.w	r2, r3, #4
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df98:	f003 0304 	and.w	r3, r3, #4
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d011      	beq.n	800dfc4 <HAL_UART_IRQHandler+0x128>
 800dfa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfa4:	f003 0301 	and.w	r3, r3, #1
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00b      	beq.n	800dfc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2204      	movs	r2, #4
 800dfb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfba:	f043 0202 	orr.w	r2, r3, #2
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dfc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfc8:	f003 0308 	and.w	r3, r3, #8
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d017      	beq.n	800e000 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dfd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfd4:	f003 0320 	and.w	r3, r3, #32
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d105      	bne.n	800dfe8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dfdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dfe0:	4b5a      	ldr	r3, [pc, #360]	; (800e14c <HAL_UART_IRQHandler+0x2b0>)
 800dfe2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00b      	beq.n	800e000 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2208      	movs	r2, #8
 800dfee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dff6:	f043 0208 	orr.w	r2, r3, #8
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d012      	beq.n	800e032 <HAL_UART_IRQHandler+0x196>
 800e00c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00c      	beq.n	800e032 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e028:	f043 0220 	orr.w	r2, r3, #32
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f000 82c0 	beq.w	800e5be <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e042:	f003 0320 	and.w	r3, r3, #32
 800e046:	2b00      	cmp	r3, #0
 800e048:	d013      	beq.n	800e072 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e04a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e04e:	f003 0320 	and.w	r3, r3, #32
 800e052:	2b00      	cmp	r3, #0
 800e054:	d105      	bne.n	800e062 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e05a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d007      	beq.n	800e072 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e066:	2b00      	cmp	r3, #0
 800e068:	d003      	beq.n	800e072 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e078:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e086:	2b40      	cmp	r3, #64	; 0x40
 800e088:	d005      	beq.n	800e096 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e08a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e08e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e092:	2b00      	cmp	r3, #0
 800e094:	d04f      	beq.n	800e136 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f001 f9dc 	bl	800f454 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0a6:	2b40      	cmp	r3, #64	; 0x40
 800e0a8:	d141      	bne.n	800e12e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0b8:	e853 3f00 	ldrex	r3, [r3]
 800e0bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e0c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e0c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	3308      	adds	r3, #8
 800e0d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e0d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e0da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e0e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e0e6:	e841 2300 	strex	r3, r2, [r1]
 800e0ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e0ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d1d9      	bne.n	800e0aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d013      	beq.n	800e126 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e102:	4a14      	ldr	r2, [pc, #80]	; (800e154 <HAL_UART_IRQHandler+0x2b8>)
 800e104:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fa f83c 	bl	8008188 <HAL_DMA_Abort_IT>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d017      	beq.n	800e146 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e120:	4610      	mov	r0, r2
 800e122:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e124:	e00f      	b.n	800e146 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 fa60 	bl	800e5ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e12c:	e00b      	b.n	800e146 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fa5c 	bl	800e5ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e134:	e007      	b.n	800e146 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 fa58 	bl	800e5ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e144:	e23b      	b.n	800e5be <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e146:	bf00      	nop
    return;
 800e148:	e239      	b.n	800e5be <HAL_UART_IRQHandler+0x722>
 800e14a:	bf00      	nop
 800e14c:	10000001 	.word	0x10000001
 800e150:	04000120 	.word	0x04000120
 800e154:	0800f521 	.word	0x0800f521

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	f040 81ce 	bne.w	800e4fe <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e166:	f003 0310 	and.w	r3, r3, #16
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f000 81c7 	beq.w	800e4fe <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e174:	f003 0310 	and.w	r3, r3, #16
 800e178:	2b00      	cmp	r3, #0
 800e17a:	f000 81c0 	beq.w	800e4fe <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2210      	movs	r2, #16
 800e184:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e190:	2b40      	cmp	r3, #64	; 0x40
 800e192:	f040 813b 	bne.w	800e40c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a8b      	ldr	r2, [pc, #556]	; (800e3cc <HAL_UART_IRQHandler+0x530>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d059      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a89      	ldr	r2, [pc, #548]	; (800e3d0 <HAL_UART_IRQHandler+0x534>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d053      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a87      	ldr	r2, [pc, #540]	; (800e3d4 <HAL_UART_IRQHandler+0x538>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d04d      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a85      	ldr	r2, [pc, #532]	; (800e3d8 <HAL_UART_IRQHandler+0x53c>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d047      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a83      	ldr	r2, [pc, #524]	; (800e3dc <HAL_UART_IRQHandler+0x540>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d041      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a81      	ldr	r2, [pc, #516]	; (800e3e0 <HAL_UART_IRQHandler+0x544>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d03b      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4a7f      	ldr	r2, [pc, #508]	; (800e3e4 <HAL_UART_IRQHandler+0x548>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d035      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4a7d      	ldr	r2, [pc, #500]	; (800e3e8 <HAL_UART_IRQHandler+0x54c>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d02f      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a7b      	ldr	r2, [pc, #492]	; (800e3ec <HAL_UART_IRQHandler+0x550>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d029      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a79      	ldr	r2, [pc, #484]	; (800e3f0 <HAL_UART_IRQHandler+0x554>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d023      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a77      	ldr	r2, [pc, #476]	; (800e3f4 <HAL_UART_IRQHandler+0x558>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d01d      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a75      	ldr	r2, [pc, #468]	; (800e3f8 <HAL_UART_IRQHandler+0x55c>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d017      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a73      	ldr	r2, [pc, #460]	; (800e3fc <HAL_UART_IRQHandler+0x560>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d011      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a71      	ldr	r2, [pc, #452]	; (800e400 <HAL_UART_IRQHandler+0x564>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d00b      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a6f      	ldr	r2, [pc, #444]	; (800e404 <HAL_UART_IRQHandler+0x568>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d005      	beq.n	800e256 <HAL_UART_IRQHandler+0x3ba>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a6d      	ldr	r2, [pc, #436]	; (800e408 <HAL_UART_IRQHandler+0x56c>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d105      	bne.n	800e262 <HAL_UART_IRQHandler+0x3c6>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	b29b      	uxth	r3, r3
 800e260:	e004      	b.n	800e26c <HAL_UART_IRQHandler+0x3d0>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e274:	2b00      	cmp	r3, #0
 800e276:	f000 81a4 	beq.w	800e5c2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e280:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e284:	429a      	cmp	r2, r3
 800e286:	f080 819c 	bcs.w	800e5c2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e290:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e298:	69db      	ldr	r3, [r3, #28]
 800e29a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e29e:	f000 8086 	beq.w	800e3ae <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e2ae:	e853 3f00 	ldrex	r3, [r3]
 800e2b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e2b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e2ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e2cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e2d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e2d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e2dc:	e841 2300 	strex	r3, r2, [r1]
 800e2e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e2e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1da      	bne.n	800e2a2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2f6:	e853 3f00 	ldrex	r3, [r3]
 800e2fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e2fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2fe:	f023 0301 	bic.w	r3, r3, #1
 800e302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	3308      	adds	r3, #8
 800e30c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e310:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e314:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e316:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e318:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e31c:	e841 2300 	strex	r3, r2, [r1]
 800e320:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1e1      	bne.n	800e2ec <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	3308      	adds	r3, #8
 800e32e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e332:	e853 3f00 	ldrex	r3, [r3]
 800e336:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e33a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e33e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	3308      	adds	r3, #8
 800e348:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e34c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e34e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e350:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e352:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e354:	e841 2300 	strex	r3, r2, [r1]
 800e358:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e35a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d1e3      	bne.n	800e328 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2220      	movs	r2, #32
 800e364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2200      	movs	r2, #0
 800e36c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e376:	e853 3f00 	ldrex	r3, [r3]
 800e37a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e37c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e37e:	f023 0310 	bic.w	r3, r3, #16
 800e382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	461a      	mov	r2, r3
 800e38c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e390:	65bb      	str	r3, [r7, #88]	; 0x58
 800e392:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e398:	e841 2300 	strex	r3, r2, [r1]
 800e39c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e39e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d1e4      	bne.n	800e36e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7f9 fbcf 	bl	8007b4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f91c 	bl	800e600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e3c8:	e0fb      	b.n	800e5c2 <HAL_UART_IRQHandler+0x726>
 800e3ca:	bf00      	nop
 800e3cc:	40020010 	.word	0x40020010
 800e3d0:	40020028 	.word	0x40020028
 800e3d4:	40020040 	.word	0x40020040
 800e3d8:	40020058 	.word	0x40020058
 800e3dc:	40020070 	.word	0x40020070
 800e3e0:	40020088 	.word	0x40020088
 800e3e4:	400200a0 	.word	0x400200a0
 800e3e8:	400200b8 	.word	0x400200b8
 800e3ec:	40020410 	.word	0x40020410
 800e3f0:	40020428 	.word	0x40020428
 800e3f4:	40020440 	.word	0x40020440
 800e3f8:	40020458 	.word	0x40020458
 800e3fc:	40020470 	.word	0x40020470
 800e400:	40020488 	.word	0x40020488
 800e404:	400204a0 	.word	0x400204a0
 800e408:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e418:	b29b      	uxth	r3, r3
 800e41a:	1ad3      	subs	r3, r2, r3
 800e41c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e426:	b29b      	uxth	r3, r3
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f000 80cc 	beq.w	800e5c6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e42e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e432:	2b00      	cmp	r3, #0
 800e434:	f000 80c7 	beq.w	800e5c6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e440:	e853 3f00 	ldrex	r3, [r3]
 800e444:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e44c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	461a      	mov	r2, r3
 800e456:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e45a:	647b      	str	r3, [r7, #68]	; 0x44
 800e45c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e462:	e841 2300 	strex	r3, r2, [r1]
 800e466:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1e4      	bne.n	800e438 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	3308      	adds	r3, #8
 800e474:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e478:	e853 3f00 	ldrex	r3, [r3]
 800e47c:	623b      	str	r3, [r7, #32]
   return(result);
 800e47e:	6a3a      	ldr	r2, [r7, #32]
 800e480:	4b54      	ldr	r3, [pc, #336]	; (800e5d4 <HAL_UART_IRQHandler+0x738>)
 800e482:	4013      	ands	r3, r2
 800e484:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	3308      	adds	r3, #8
 800e48e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e492:	633a      	str	r2, [r7, #48]	; 0x30
 800e494:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e49a:	e841 2300 	strex	r3, r2, [r1]
 800e49e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1e3      	bne.n	800e46e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2220      	movs	r2, #32
 800e4aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	e853 3f00 	ldrex	r3, [r3]
 800e4c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f023 0310 	bic.w	r3, r3, #16
 800e4ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e4dc:	61fb      	str	r3, [r7, #28]
 800e4de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e0:	69b9      	ldr	r1, [r7, #24]
 800e4e2:	69fa      	ldr	r2, [r7, #28]
 800e4e4:	e841 2300 	strex	r3, r2, [r1]
 800e4e8:	617b      	str	r3, [r7, #20]
   return(result);
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1e4      	bne.n	800e4ba <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e4f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f882 	bl	800e600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e4fc:	e063      	b.n	800e5c6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00e      	beq.n	800e528 <HAL_UART_IRQHandler+0x68c>
 800e50a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e50e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e512:	2b00      	cmp	r3, #0
 800e514:	d008      	beq.n	800e528 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e51e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f001 f83e 	bl	800f5a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e526:	e051      	b.n	800e5cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e52c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e530:	2b00      	cmp	r3, #0
 800e532:	d014      	beq.n	800e55e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d105      	bne.n	800e54c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e544:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d008      	beq.n	800e55e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e550:	2b00      	cmp	r3, #0
 800e552:	d03a      	beq.n	800e5ca <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	4798      	blx	r3
    }
    return;
 800e55c:	e035      	b.n	800e5ca <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e566:	2b00      	cmp	r3, #0
 800e568:	d009      	beq.n	800e57e <HAL_UART_IRQHandler+0x6e2>
 800e56a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e56e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e572:	2b00      	cmp	r3, #0
 800e574:	d003      	beq.n	800e57e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 ffe8 	bl	800f54c <UART_EndTransmit_IT>
    return;
 800e57c:	e026      	b.n	800e5cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e586:	2b00      	cmp	r3, #0
 800e588:	d009      	beq.n	800e59e <HAL_UART_IRQHandler+0x702>
 800e58a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e58e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e592:	2b00      	cmp	r3, #0
 800e594:	d003      	beq.n	800e59e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f001 f817 	bl	800f5ca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e59c:	e016      	b.n	800e5cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d010      	beq.n	800e5cc <HAL_UART_IRQHandler+0x730>
 800e5aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	da0c      	bge.n	800e5cc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 ffff 	bl	800f5b6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e5b8:	e008      	b.n	800e5cc <HAL_UART_IRQHandler+0x730>
      return;
 800e5ba:	bf00      	nop
 800e5bc:	e006      	b.n	800e5cc <HAL_UART_IRQHandler+0x730>
    return;
 800e5be:	bf00      	nop
 800e5c0:	e004      	b.n	800e5cc <HAL_UART_IRQHandler+0x730>
      return;
 800e5c2:	bf00      	nop
 800e5c4:	e002      	b.n	800e5cc <HAL_UART_IRQHandler+0x730>
      return;
 800e5c6:	bf00      	nop
 800e5c8:	e000      	b.n	800e5cc <HAL_UART_IRQHandler+0x730>
    return;
 800e5ca:	bf00      	nop
  }
}
 800e5cc:	37e8      	adds	r7, #232	; 0xe8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	effffffe 	.word	0xeffffffe

0800e5d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e5f4:	bf00      	nop
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	460b      	mov	r3, r1
 800e60a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e60c:	bf00      	nop
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e61c:	b092      	sub	sp, #72	; 0x48
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e622:	2300      	movs	r3, #0
 800e624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	689a      	ldr	r2, [r3, #8]
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	691b      	ldr	r3, [r3, #16]
 800e630:	431a      	orrs	r2, r3
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	695b      	ldr	r3, [r3, #20]
 800e636:	431a      	orrs	r2, r3
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	69db      	ldr	r3, [r3, #28]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	4bbe      	ldr	r3, [pc, #760]	; (800e940 <UART_SetConfig+0x328>)
 800e648:	4013      	ands	r3, r2
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	6812      	ldr	r2, [r2, #0]
 800e64e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e650:	430b      	orrs	r3, r1
 800e652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	68da      	ldr	r2, [r3, #12]
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	430a      	orrs	r2, r1
 800e668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	699b      	ldr	r3, [r3, #24]
 800e66e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4ab3      	ldr	r2, [pc, #716]	; (800e944 <UART_SetConfig+0x32c>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d004      	beq.n	800e684 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	6a1b      	ldr	r3, [r3, #32]
 800e67e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e680:	4313      	orrs	r3, r2
 800e682:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	689a      	ldr	r2, [r3, #8]
 800e68a:	4baf      	ldr	r3, [pc, #700]	; (800e948 <UART_SetConfig+0x330>)
 800e68c:	4013      	ands	r3, r2
 800e68e:	697a      	ldr	r2, [r7, #20]
 800e690:	6812      	ldr	r2, [r2, #0]
 800e692:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e694:	430b      	orrs	r3, r1
 800e696:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e69e:	f023 010f 	bic.w	r1, r3, #15
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	430a      	orrs	r2, r1
 800e6ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4aa6      	ldr	r2, [pc, #664]	; (800e94c <UART_SetConfig+0x334>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d177      	bne.n	800e7a8 <UART_SetConfig+0x190>
 800e6b8:	4ba5      	ldr	r3, [pc, #660]	; (800e950 <UART_SetConfig+0x338>)
 800e6ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e6c0:	2b28      	cmp	r3, #40	; 0x28
 800e6c2:	d86d      	bhi.n	800e7a0 <UART_SetConfig+0x188>
 800e6c4:	a201      	add	r2, pc, #4	; (adr r2, 800e6cc <UART_SetConfig+0xb4>)
 800e6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ca:	bf00      	nop
 800e6cc:	0800e771 	.word	0x0800e771
 800e6d0:	0800e7a1 	.word	0x0800e7a1
 800e6d4:	0800e7a1 	.word	0x0800e7a1
 800e6d8:	0800e7a1 	.word	0x0800e7a1
 800e6dc:	0800e7a1 	.word	0x0800e7a1
 800e6e0:	0800e7a1 	.word	0x0800e7a1
 800e6e4:	0800e7a1 	.word	0x0800e7a1
 800e6e8:	0800e7a1 	.word	0x0800e7a1
 800e6ec:	0800e779 	.word	0x0800e779
 800e6f0:	0800e7a1 	.word	0x0800e7a1
 800e6f4:	0800e7a1 	.word	0x0800e7a1
 800e6f8:	0800e7a1 	.word	0x0800e7a1
 800e6fc:	0800e7a1 	.word	0x0800e7a1
 800e700:	0800e7a1 	.word	0x0800e7a1
 800e704:	0800e7a1 	.word	0x0800e7a1
 800e708:	0800e7a1 	.word	0x0800e7a1
 800e70c:	0800e781 	.word	0x0800e781
 800e710:	0800e7a1 	.word	0x0800e7a1
 800e714:	0800e7a1 	.word	0x0800e7a1
 800e718:	0800e7a1 	.word	0x0800e7a1
 800e71c:	0800e7a1 	.word	0x0800e7a1
 800e720:	0800e7a1 	.word	0x0800e7a1
 800e724:	0800e7a1 	.word	0x0800e7a1
 800e728:	0800e7a1 	.word	0x0800e7a1
 800e72c:	0800e789 	.word	0x0800e789
 800e730:	0800e7a1 	.word	0x0800e7a1
 800e734:	0800e7a1 	.word	0x0800e7a1
 800e738:	0800e7a1 	.word	0x0800e7a1
 800e73c:	0800e7a1 	.word	0x0800e7a1
 800e740:	0800e7a1 	.word	0x0800e7a1
 800e744:	0800e7a1 	.word	0x0800e7a1
 800e748:	0800e7a1 	.word	0x0800e7a1
 800e74c:	0800e791 	.word	0x0800e791
 800e750:	0800e7a1 	.word	0x0800e7a1
 800e754:	0800e7a1 	.word	0x0800e7a1
 800e758:	0800e7a1 	.word	0x0800e7a1
 800e75c:	0800e7a1 	.word	0x0800e7a1
 800e760:	0800e7a1 	.word	0x0800e7a1
 800e764:	0800e7a1 	.word	0x0800e7a1
 800e768:	0800e7a1 	.word	0x0800e7a1
 800e76c:	0800e799 	.word	0x0800e799
 800e770:	2301      	movs	r3, #1
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e222      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e778:	2304      	movs	r3, #4
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77e:	e21e      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e780:	2308      	movs	r3, #8
 800e782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e786:	e21a      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e788:	2310      	movs	r3, #16
 800e78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e78e:	e216      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e790:	2320      	movs	r3, #32
 800e792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e796:	e212      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e798:	2340      	movs	r3, #64	; 0x40
 800e79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79e:	e20e      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e7a0:	2380      	movs	r3, #128	; 0x80
 800e7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7a6:	e20a      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a69      	ldr	r2, [pc, #420]	; (800e954 <UART_SetConfig+0x33c>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d130      	bne.n	800e814 <UART_SetConfig+0x1fc>
 800e7b2:	4b67      	ldr	r3, [pc, #412]	; (800e950 <UART_SetConfig+0x338>)
 800e7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7b6:	f003 0307 	and.w	r3, r3, #7
 800e7ba:	2b05      	cmp	r3, #5
 800e7bc:	d826      	bhi.n	800e80c <UART_SetConfig+0x1f4>
 800e7be:	a201      	add	r2, pc, #4	; (adr r2, 800e7c4 <UART_SetConfig+0x1ac>)
 800e7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c4:	0800e7dd 	.word	0x0800e7dd
 800e7c8:	0800e7e5 	.word	0x0800e7e5
 800e7cc:	0800e7ed 	.word	0x0800e7ed
 800e7d0:	0800e7f5 	.word	0x0800e7f5
 800e7d4:	0800e7fd 	.word	0x0800e7fd
 800e7d8:	0800e805 	.word	0x0800e805
 800e7dc:	2300      	movs	r3, #0
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e2:	e1ec      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e7e4:	2304      	movs	r3, #4
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ea:	e1e8      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e7ec:	2308      	movs	r3, #8
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f2:	e1e4      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e7f4:	2310      	movs	r3, #16
 800e7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fa:	e1e0      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e7fc:	2320      	movs	r3, #32
 800e7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e802:	e1dc      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e804:	2340      	movs	r3, #64	; 0x40
 800e806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80a:	e1d8      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e80c:	2380      	movs	r3, #128	; 0x80
 800e80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e812:	e1d4      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a4f      	ldr	r2, [pc, #316]	; (800e958 <UART_SetConfig+0x340>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d130      	bne.n	800e880 <UART_SetConfig+0x268>
 800e81e:	4b4c      	ldr	r3, [pc, #304]	; (800e950 <UART_SetConfig+0x338>)
 800e820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e822:	f003 0307 	and.w	r3, r3, #7
 800e826:	2b05      	cmp	r3, #5
 800e828:	d826      	bhi.n	800e878 <UART_SetConfig+0x260>
 800e82a:	a201      	add	r2, pc, #4	; (adr r2, 800e830 <UART_SetConfig+0x218>)
 800e82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e830:	0800e849 	.word	0x0800e849
 800e834:	0800e851 	.word	0x0800e851
 800e838:	0800e859 	.word	0x0800e859
 800e83c:	0800e861 	.word	0x0800e861
 800e840:	0800e869 	.word	0x0800e869
 800e844:	0800e871 	.word	0x0800e871
 800e848:	2300      	movs	r3, #0
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84e:	e1b6      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e850:	2304      	movs	r3, #4
 800e852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e856:	e1b2      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e858:	2308      	movs	r3, #8
 800e85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85e:	e1ae      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e860:	2310      	movs	r3, #16
 800e862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e866:	e1aa      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e868:	2320      	movs	r3, #32
 800e86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86e:	e1a6      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e870:	2340      	movs	r3, #64	; 0x40
 800e872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e876:	e1a2      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e878:	2380      	movs	r3, #128	; 0x80
 800e87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87e:	e19e      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a35      	ldr	r2, [pc, #212]	; (800e95c <UART_SetConfig+0x344>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d130      	bne.n	800e8ec <UART_SetConfig+0x2d4>
 800e88a:	4b31      	ldr	r3, [pc, #196]	; (800e950 <UART_SetConfig+0x338>)
 800e88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e88e:	f003 0307 	and.w	r3, r3, #7
 800e892:	2b05      	cmp	r3, #5
 800e894:	d826      	bhi.n	800e8e4 <UART_SetConfig+0x2cc>
 800e896:	a201      	add	r2, pc, #4	; (adr r2, 800e89c <UART_SetConfig+0x284>)
 800e898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89c:	0800e8b5 	.word	0x0800e8b5
 800e8a0:	0800e8bd 	.word	0x0800e8bd
 800e8a4:	0800e8c5 	.word	0x0800e8c5
 800e8a8:	0800e8cd 	.word	0x0800e8cd
 800e8ac:	0800e8d5 	.word	0x0800e8d5
 800e8b0:	0800e8dd 	.word	0x0800e8dd
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ba:	e180      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e8bc:	2304      	movs	r3, #4
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c2:	e17c      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e8c4:	2308      	movs	r3, #8
 800e8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ca:	e178      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e8cc:	2310      	movs	r3, #16
 800e8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8d2:	e174      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e8d4:	2320      	movs	r3, #32
 800e8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8da:	e170      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e8dc:	2340      	movs	r3, #64	; 0x40
 800e8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8e2:	e16c      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e8e4:	2380      	movs	r3, #128	; 0x80
 800e8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ea:	e168      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a1b      	ldr	r2, [pc, #108]	; (800e960 <UART_SetConfig+0x348>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d142      	bne.n	800e97c <UART_SetConfig+0x364>
 800e8f6:	4b16      	ldr	r3, [pc, #88]	; (800e950 <UART_SetConfig+0x338>)
 800e8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8fa:	f003 0307 	and.w	r3, r3, #7
 800e8fe:	2b05      	cmp	r3, #5
 800e900:	d838      	bhi.n	800e974 <UART_SetConfig+0x35c>
 800e902:	a201      	add	r2, pc, #4	; (adr r2, 800e908 <UART_SetConfig+0x2f0>)
 800e904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e908:	0800e921 	.word	0x0800e921
 800e90c:	0800e929 	.word	0x0800e929
 800e910:	0800e931 	.word	0x0800e931
 800e914:	0800e939 	.word	0x0800e939
 800e918:	0800e965 	.word	0x0800e965
 800e91c:	0800e96d 	.word	0x0800e96d
 800e920:	2300      	movs	r3, #0
 800e922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e926:	e14a      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e928:	2304      	movs	r3, #4
 800e92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e92e:	e146      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e930:	2308      	movs	r3, #8
 800e932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e936:	e142      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e938:	2310      	movs	r3, #16
 800e93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e93e:	e13e      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e940:	cfff69f3 	.word	0xcfff69f3
 800e944:	58000c00 	.word	0x58000c00
 800e948:	11fff4ff 	.word	0x11fff4ff
 800e94c:	40011000 	.word	0x40011000
 800e950:	58024400 	.word	0x58024400
 800e954:	40004400 	.word	0x40004400
 800e958:	40004800 	.word	0x40004800
 800e95c:	40004c00 	.word	0x40004c00
 800e960:	40005000 	.word	0x40005000
 800e964:	2320      	movs	r3, #32
 800e966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96a:	e128      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e96c:	2340      	movs	r3, #64	; 0x40
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e972:	e124      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e974:	2380      	movs	r3, #128	; 0x80
 800e976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97a:	e120      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4acb      	ldr	r2, [pc, #812]	; (800ecb0 <UART_SetConfig+0x698>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d176      	bne.n	800ea74 <UART_SetConfig+0x45c>
 800e986:	4bcb      	ldr	r3, [pc, #812]	; (800ecb4 <UART_SetConfig+0x69c>)
 800e988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e98a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e98e:	2b28      	cmp	r3, #40	; 0x28
 800e990:	d86c      	bhi.n	800ea6c <UART_SetConfig+0x454>
 800e992:	a201      	add	r2, pc, #4	; (adr r2, 800e998 <UART_SetConfig+0x380>)
 800e994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e998:	0800ea3d 	.word	0x0800ea3d
 800e99c:	0800ea6d 	.word	0x0800ea6d
 800e9a0:	0800ea6d 	.word	0x0800ea6d
 800e9a4:	0800ea6d 	.word	0x0800ea6d
 800e9a8:	0800ea6d 	.word	0x0800ea6d
 800e9ac:	0800ea6d 	.word	0x0800ea6d
 800e9b0:	0800ea6d 	.word	0x0800ea6d
 800e9b4:	0800ea6d 	.word	0x0800ea6d
 800e9b8:	0800ea45 	.word	0x0800ea45
 800e9bc:	0800ea6d 	.word	0x0800ea6d
 800e9c0:	0800ea6d 	.word	0x0800ea6d
 800e9c4:	0800ea6d 	.word	0x0800ea6d
 800e9c8:	0800ea6d 	.word	0x0800ea6d
 800e9cc:	0800ea6d 	.word	0x0800ea6d
 800e9d0:	0800ea6d 	.word	0x0800ea6d
 800e9d4:	0800ea6d 	.word	0x0800ea6d
 800e9d8:	0800ea4d 	.word	0x0800ea4d
 800e9dc:	0800ea6d 	.word	0x0800ea6d
 800e9e0:	0800ea6d 	.word	0x0800ea6d
 800e9e4:	0800ea6d 	.word	0x0800ea6d
 800e9e8:	0800ea6d 	.word	0x0800ea6d
 800e9ec:	0800ea6d 	.word	0x0800ea6d
 800e9f0:	0800ea6d 	.word	0x0800ea6d
 800e9f4:	0800ea6d 	.word	0x0800ea6d
 800e9f8:	0800ea55 	.word	0x0800ea55
 800e9fc:	0800ea6d 	.word	0x0800ea6d
 800ea00:	0800ea6d 	.word	0x0800ea6d
 800ea04:	0800ea6d 	.word	0x0800ea6d
 800ea08:	0800ea6d 	.word	0x0800ea6d
 800ea0c:	0800ea6d 	.word	0x0800ea6d
 800ea10:	0800ea6d 	.word	0x0800ea6d
 800ea14:	0800ea6d 	.word	0x0800ea6d
 800ea18:	0800ea5d 	.word	0x0800ea5d
 800ea1c:	0800ea6d 	.word	0x0800ea6d
 800ea20:	0800ea6d 	.word	0x0800ea6d
 800ea24:	0800ea6d 	.word	0x0800ea6d
 800ea28:	0800ea6d 	.word	0x0800ea6d
 800ea2c:	0800ea6d 	.word	0x0800ea6d
 800ea30:	0800ea6d 	.word	0x0800ea6d
 800ea34:	0800ea6d 	.word	0x0800ea6d
 800ea38:	0800ea65 	.word	0x0800ea65
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea42:	e0bc      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ea44:	2304      	movs	r3, #4
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4a:	e0b8      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ea4c:	2308      	movs	r3, #8
 800ea4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea52:	e0b4      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ea54:	2310      	movs	r3, #16
 800ea56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5a:	e0b0      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ea5c:	2320      	movs	r3, #32
 800ea5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea62:	e0ac      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ea64:	2340      	movs	r3, #64	; 0x40
 800ea66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea6a:	e0a8      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ea6c:	2380      	movs	r3, #128	; 0x80
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea72:	e0a4      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a8f      	ldr	r2, [pc, #572]	; (800ecb8 <UART_SetConfig+0x6a0>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d130      	bne.n	800eae0 <UART_SetConfig+0x4c8>
 800ea7e:	4b8d      	ldr	r3, [pc, #564]	; (800ecb4 <UART_SetConfig+0x69c>)
 800ea80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea82:	f003 0307 	and.w	r3, r3, #7
 800ea86:	2b05      	cmp	r3, #5
 800ea88:	d826      	bhi.n	800ead8 <UART_SetConfig+0x4c0>
 800ea8a:	a201      	add	r2, pc, #4	; (adr r2, 800ea90 <UART_SetConfig+0x478>)
 800ea8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea90:	0800eaa9 	.word	0x0800eaa9
 800ea94:	0800eab1 	.word	0x0800eab1
 800ea98:	0800eab9 	.word	0x0800eab9
 800ea9c:	0800eac1 	.word	0x0800eac1
 800eaa0:	0800eac9 	.word	0x0800eac9
 800eaa4:	0800ead1 	.word	0x0800ead1
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaae:	e086      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eab0:	2304      	movs	r3, #4
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab6:	e082      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eab8:	2308      	movs	r3, #8
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eabe:	e07e      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eac0:	2310      	movs	r3, #16
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac6:	e07a      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eac8:	2320      	movs	r3, #32
 800eaca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eace:	e076      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ead0:	2340      	movs	r3, #64	; 0x40
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ead6:	e072      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ead8:	2380      	movs	r3, #128	; 0x80
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eade:	e06e      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a75      	ldr	r2, [pc, #468]	; (800ecbc <UART_SetConfig+0x6a4>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d130      	bne.n	800eb4c <UART_SetConfig+0x534>
 800eaea:	4b72      	ldr	r3, [pc, #456]	; (800ecb4 <UART_SetConfig+0x69c>)
 800eaec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaee:	f003 0307 	and.w	r3, r3, #7
 800eaf2:	2b05      	cmp	r3, #5
 800eaf4:	d826      	bhi.n	800eb44 <UART_SetConfig+0x52c>
 800eaf6:	a201      	add	r2, pc, #4	; (adr r2, 800eafc <UART_SetConfig+0x4e4>)
 800eaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafc:	0800eb15 	.word	0x0800eb15
 800eb00:	0800eb1d 	.word	0x0800eb1d
 800eb04:	0800eb25 	.word	0x0800eb25
 800eb08:	0800eb2d 	.word	0x0800eb2d
 800eb0c:	0800eb35 	.word	0x0800eb35
 800eb10:	0800eb3d 	.word	0x0800eb3d
 800eb14:	2300      	movs	r3, #0
 800eb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb1a:	e050      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eb1c:	2304      	movs	r3, #4
 800eb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb22:	e04c      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eb24:	2308      	movs	r3, #8
 800eb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb2a:	e048      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eb2c:	2310      	movs	r3, #16
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb32:	e044      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eb34:	2320      	movs	r3, #32
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3a:	e040      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eb3c:	2340      	movs	r3, #64	; 0x40
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb42:	e03c      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eb44:	2380      	movs	r3, #128	; 0x80
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4a:	e038      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4a5b      	ldr	r2, [pc, #364]	; (800ecc0 <UART_SetConfig+0x6a8>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d130      	bne.n	800ebb8 <UART_SetConfig+0x5a0>
 800eb56:	4b57      	ldr	r3, [pc, #348]	; (800ecb4 <UART_SetConfig+0x69c>)
 800eb58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb5a:	f003 0307 	and.w	r3, r3, #7
 800eb5e:	2b05      	cmp	r3, #5
 800eb60:	d826      	bhi.n	800ebb0 <UART_SetConfig+0x598>
 800eb62:	a201      	add	r2, pc, #4	; (adr r2, 800eb68 <UART_SetConfig+0x550>)
 800eb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb68:	0800eb81 	.word	0x0800eb81
 800eb6c:	0800eb89 	.word	0x0800eb89
 800eb70:	0800eb91 	.word	0x0800eb91
 800eb74:	0800eb99 	.word	0x0800eb99
 800eb78:	0800eba1 	.word	0x0800eba1
 800eb7c:	0800eba9 	.word	0x0800eba9
 800eb80:	2302      	movs	r3, #2
 800eb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb86:	e01a      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eb88:	2304      	movs	r3, #4
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8e:	e016      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eb90:	2308      	movs	r3, #8
 800eb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb96:	e012      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eb98:	2310      	movs	r3, #16
 800eb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb9e:	e00e      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eba0:	2320      	movs	r3, #32
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eba6:	e00a      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800eba8:	2340      	movs	r3, #64	; 0x40
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebae:	e006      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ebb0:	2380      	movs	r3, #128	; 0x80
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebb6:	e002      	b.n	800ebbe <UART_SetConfig+0x5a6>
 800ebb8:	2380      	movs	r3, #128	; 0x80
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	4a3f      	ldr	r2, [pc, #252]	; (800ecc0 <UART_SetConfig+0x6a8>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	f040 80f8 	bne.w	800edba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ebca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ebce:	2b20      	cmp	r3, #32
 800ebd0:	dc46      	bgt.n	800ec60 <UART_SetConfig+0x648>
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	f2c0 8082 	blt.w	800ecdc <UART_SetConfig+0x6c4>
 800ebd8:	3b02      	subs	r3, #2
 800ebda:	2b1e      	cmp	r3, #30
 800ebdc:	d87e      	bhi.n	800ecdc <UART_SetConfig+0x6c4>
 800ebde:	a201      	add	r2, pc, #4	; (adr r2, 800ebe4 <UART_SetConfig+0x5cc>)
 800ebe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe4:	0800ec67 	.word	0x0800ec67
 800ebe8:	0800ecdd 	.word	0x0800ecdd
 800ebec:	0800ec6f 	.word	0x0800ec6f
 800ebf0:	0800ecdd 	.word	0x0800ecdd
 800ebf4:	0800ecdd 	.word	0x0800ecdd
 800ebf8:	0800ecdd 	.word	0x0800ecdd
 800ebfc:	0800ec7f 	.word	0x0800ec7f
 800ec00:	0800ecdd 	.word	0x0800ecdd
 800ec04:	0800ecdd 	.word	0x0800ecdd
 800ec08:	0800ecdd 	.word	0x0800ecdd
 800ec0c:	0800ecdd 	.word	0x0800ecdd
 800ec10:	0800ecdd 	.word	0x0800ecdd
 800ec14:	0800ecdd 	.word	0x0800ecdd
 800ec18:	0800ecdd 	.word	0x0800ecdd
 800ec1c:	0800ec8f 	.word	0x0800ec8f
 800ec20:	0800ecdd 	.word	0x0800ecdd
 800ec24:	0800ecdd 	.word	0x0800ecdd
 800ec28:	0800ecdd 	.word	0x0800ecdd
 800ec2c:	0800ecdd 	.word	0x0800ecdd
 800ec30:	0800ecdd 	.word	0x0800ecdd
 800ec34:	0800ecdd 	.word	0x0800ecdd
 800ec38:	0800ecdd 	.word	0x0800ecdd
 800ec3c:	0800ecdd 	.word	0x0800ecdd
 800ec40:	0800ecdd 	.word	0x0800ecdd
 800ec44:	0800ecdd 	.word	0x0800ecdd
 800ec48:	0800ecdd 	.word	0x0800ecdd
 800ec4c:	0800ecdd 	.word	0x0800ecdd
 800ec50:	0800ecdd 	.word	0x0800ecdd
 800ec54:	0800ecdd 	.word	0x0800ecdd
 800ec58:	0800ecdd 	.word	0x0800ecdd
 800ec5c:	0800eccf 	.word	0x0800eccf
 800ec60:	2b40      	cmp	r3, #64	; 0x40
 800ec62:	d037      	beq.n	800ecd4 <UART_SetConfig+0x6bc>
 800ec64:	e03a      	b.n	800ecdc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ec66:	f7fd fd3b 	bl	800c6e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ec6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec6c:	e03c      	b.n	800ece8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fd fd4a 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec7c:	e034      	b.n	800ece8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec7e:	f107 0318 	add.w	r3, r7, #24
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fd fe96 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec8c:	e02c      	b.n	800ece8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec8e:	4b09      	ldr	r3, [pc, #36]	; (800ecb4 <UART_SetConfig+0x69c>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f003 0320 	and.w	r3, r3, #32
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d016      	beq.n	800ecc8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec9a:	4b06      	ldr	r3, [pc, #24]	; (800ecb4 <UART_SetConfig+0x69c>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	08db      	lsrs	r3, r3, #3
 800eca0:	f003 0303 	and.w	r3, r3, #3
 800eca4:	4a07      	ldr	r2, [pc, #28]	; (800ecc4 <UART_SetConfig+0x6ac>)
 800eca6:	fa22 f303 	lsr.w	r3, r2, r3
 800ecaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ecac:	e01c      	b.n	800ece8 <UART_SetConfig+0x6d0>
 800ecae:	bf00      	nop
 800ecb0:	40011400 	.word	0x40011400
 800ecb4:	58024400 	.word	0x58024400
 800ecb8:	40007800 	.word	0x40007800
 800ecbc:	40007c00 	.word	0x40007c00
 800ecc0:	58000c00 	.word	0x58000c00
 800ecc4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ecc8:	4b9d      	ldr	r3, [pc, #628]	; (800ef40 <UART_SetConfig+0x928>)
 800ecca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eccc:	e00c      	b.n	800ece8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ecce:	4b9d      	ldr	r3, [pc, #628]	; (800ef44 <UART_SetConfig+0x92c>)
 800ecd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecd2:	e009      	b.n	800ece8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ecd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecda:	e005      	b.n	800ece8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ece0:	2301      	movs	r3, #1
 800ece2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ece6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ece8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 81de 	beq.w	800f0ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf4:	4a94      	ldr	r2, [pc, #592]	; (800ef48 <UART_SetConfig+0x930>)
 800ecf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecfe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed02:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	685a      	ldr	r2, [r3, #4]
 800ed08:	4613      	mov	r3, r2
 800ed0a:	005b      	lsls	r3, r3, #1
 800ed0c:	4413      	add	r3, r2
 800ed0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d305      	bcc.n	800ed20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d903      	bls.n	800ed28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ed20:	2301      	movs	r3, #1
 800ed22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ed26:	e1c1      	b.n	800f0ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	60bb      	str	r3, [r7, #8]
 800ed2e:	60fa      	str	r2, [r7, #12]
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed34:	4a84      	ldr	r2, [pc, #528]	; (800ef48 <UART_SetConfig+0x930>)
 800ed36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	603b      	str	r3, [r7, #0]
 800ed40:	607a      	str	r2, [r7, #4]
 800ed42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ed4a:	f7f1 fb19 	bl	8000380 <__aeabi_uldivmod>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	460b      	mov	r3, r1
 800ed52:	4610      	mov	r0, r2
 800ed54:	4619      	mov	r1, r3
 800ed56:	f04f 0200 	mov.w	r2, #0
 800ed5a:	f04f 0300 	mov.w	r3, #0
 800ed5e:	020b      	lsls	r3, r1, #8
 800ed60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ed64:	0202      	lsls	r2, r0, #8
 800ed66:	6979      	ldr	r1, [r7, #20]
 800ed68:	6849      	ldr	r1, [r1, #4]
 800ed6a:	0849      	lsrs	r1, r1, #1
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	460c      	mov	r4, r1
 800ed70:	4605      	mov	r5, r0
 800ed72:	eb12 0804 	adds.w	r8, r2, r4
 800ed76:	eb43 0905 	adc.w	r9, r3, r5
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	469a      	mov	sl, r3
 800ed82:	4693      	mov	fp, r2
 800ed84:	4652      	mov	r2, sl
 800ed86:	465b      	mov	r3, fp
 800ed88:	4640      	mov	r0, r8
 800ed8a:	4649      	mov	r1, r9
 800ed8c:	f7f1 faf8 	bl	8000380 <__aeabi_uldivmod>
 800ed90:	4602      	mov	r2, r0
 800ed92:	460b      	mov	r3, r1
 800ed94:	4613      	mov	r3, r2
 800ed96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ed98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed9e:	d308      	bcc.n	800edb2 <UART_SetConfig+0x79a>
 800eda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eda6:	d204      	bcs.n	800edb2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edae:	60da      	str	r2, [r3, #12]
 800edb0:	e17c      	b.n	800f0ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800edb2:	2301      	movs	r3, #1
 800edb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800edb8:	e178      	b.n	800f0ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	69db      	ldr	r3, [r3, #28]
 800edbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edc2:	f040 80c5 	bne.w	800ef50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800edc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800edca:	2b20      	cmp	r3, #32
 800edcc:	dc48      	bgt.n	800ee60 <UART_SetConfig+0x848>
 800edce:	2b00      	cmp	r3, #0
 800edd0:	db7b      	blt.n	800eeca <UART_SetConfig+0x8b2>
 800edd2:	2b20      	cmp	r3, #32
 800edd4:	d879      	bhi.n	800eeca <UART_SetConfig+0x8b2>
 800edd6:	a201      	add	r2, pc, #4	; (adr r2, 800eddc <UART_SetConfig+0x7c4>)
 800edd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eddc:	0800ee67 	.word	0x0800ee67
 800ede0:	0800ee6f 	.word	0x0800ee6f
 800ede4:	0800eecb 	.word	0x0800eecb
 800ede8:	0800eecb 	.word	0x0800eecb
 800edec:	0800ee77 	.word	0x0800ee77
 800edf0:	0800eecb 	.word	0x0800eecb
 800edf4:	0800eecb 	.word	0x0800eecb
 800edf8:	0800eecb 	.word	0x0800eecb
 800edfc:	0800ee87 	.word	0x0800ee87
 800ee00:	0800eecb 	.word	0x0800eecb
 800ee04:	0800eecb 	.word	0x0800eecb
 800ee08:	0800eecb 	.word	0x0800eecb
 800ee0c:	0800eecb 	.word	0x0800eecb
 800ee10:	0800eecb 	.word	0x0800eecb
 800ee14:	0800eecb 	.word	0x0800eecb
 800ee18:	0800eecb 	.word	0x0800eecb
 800ee1c:	0800ee97 	.word	0x0800ee97
 800ee20:	0800eecb 	.word	0x0800eecb
 800ee24:	0800eecb 	.word	0x0800eecb
 800ee28:	0800eecb 	.word	0x0800eecb
 800ee2c:	0800eecb 	.word	0x0800eecb
 800ee30:	0800eecb 	.word	0x0800eecb
 800ee34:	0800eecb 	.word	0x0800eecb
 800ee38:	0800eecb 	.word	0x0800eecb
 800ee3c:	0800eecb 	.word	0x0800eecb
 800ee40:	0800eecb 	.word	0x0800eecb
 800ee44:	0800eecb 	.word	0x0800eecb
 800ee48:	0800eecb 	.word	0x0800eecb
 800ee4c:	0800eecb 	.word	0x0800eecb
 800ee50:	0800eecb 	.word	0x0800eecb
 800ee54:	0800eecb 	.word	0x0800eecb
 800ee58:	0800eecb 	.word	0x0800eecb
 800ee5c:	0800eebd 	.word	0x0800eebd
 800ee60:	2b40      	cmp	r3, #64	; 0x40
 800ee62:	d02e      	beq.n	800eec2 <UART_SetConfig+0x8aa>
 800ee64:	e031      	b.n	800eeca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee66:	f7fc fcc9 	bl	800b7fc <HAL_RCC_GetPCLK1Freq>
 800ee6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ee6c:	e033      	b.n	800eed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee6e:	f7fc fcdb 	bl	800b828 <HAL_RCC_GetPCLK2Freq>
 800ee72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ee74:	e02f      	b.n	800eed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fd fc46 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee84:	e027      	b.n	800eed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee86:	f107 0318 	add.w	r3, r7, #24
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fd fd92 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee94:	e01f      	b.n	800eed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee96:	4b2d      	ldr	r3, [pc, #180]	; (800ef4c <UART_SetConfig+0x934>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f003 0320 	and.w	r3, r3, #32
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d009      	beq.n	800eeb6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eea2:	4b2a      	ldr	r3, [pc, #168]	; (800ef4c <UART_SetConfig+0x934>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	08db      	lsrs	r3, r3, #3
 800eea8:	f003 0303 	and.w	r3, r3, #3
 800eeac:	4a24      	ldr	r2, [pc, #144]	; (800ef40 <UART_SetConfig+0x928>)
 800eeae:	fa22 f303 	lsr.w	r3, r2, r3
 800eeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eeb4:	e00f      	b.n	800eed6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800eeb6:	4b22      	ldr	r3, [pc, #136]	; (800ef40 <UART_SetConfig+0x928>)
 800eeb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eeba:	e00c      	b.n	800eed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eebc:	4b21      	ldr	r3, [pc, #132]	; (800ef44 <UART_SetConfig+0x92c>)
 800eebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eec0:	e009      	b.n	800eed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eec8:	e005      	b.n	800eed6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800eeca:	2300      	movs	r3, #0
 800eecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eece:	2301      	movs	r3, #1
 800eed0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f000 80e7 	beq.w	800f0ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee2:	4a19      	ldr	r2, [pc, #100]	; (800ef48 <UART_SetConfig+0x930>)
 800eee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eee8:	461a      	mov	r2, r3
 800eeea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeec:	fbb3 f3f2 	udiv	r3, r3, r2
 800eef0:	005a      	lsls	r2, r3, #1
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	085b      	lsrs	r3, r3, #1
 800eef8:	441a      	add	r2, r3
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef06:	2b0f      	cmp	r3, #15
 800ef08:	d916      	bls.n	800ef38 <UART_SetConfig+0x920>
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef10:	d212      	bcs.n	800ef38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	f023 030f 	bic.w	r3, r3, #15
 800ef1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1e:	085b      	lsrs	r3, r3, #1
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	f003 0307 	and.w	r3, r3, #7
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ef34:	60da      	str	r2, [r3, #12]
 800ef36:	e0b9      	b.n	800f0ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef3e:	e0b5      	b.n	800f0ac <UART_SetConfig+0xa94>
 800ef40:	03d09000 	.word	0x03d09000
 800ef44:	003d0900 	.word	0x003d0900
 800ef48:	080120bc 	.word	0x080120bc
 800ef4c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ef50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ef54:	2b20      	cmp	r3, #32
 800ef56:	dc49      	bgt.n	800efec <UART_SetConfig+0x9d4>
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	db7c      	blt.n	800f056 <UART_SetConfig+0xa3e>
 800ef5c:	2b20      	cmp	r3, #32
 800ef5e:	d87a      	bhi.n	800f056 <UART_SetConfig+0xa3e>
 800ef60:	a201      	add	r2, pc, #4	; (adr r2, 800ef68 <UART_SetConfig+0x950>)
 800ef62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef66:	bf00      	nop
 800ef68:	0800eff3 	.word	0x0800eff3
 800ef6c:	0800effb 	.word	0x0800effb
 800ef70:	0800f057 	.word	0x0800f057
 800ef74:	0800f057 	.word	0x0800f057
 800ef78:	0800f003 	.word	0x0800f003
 800ef7c:	0800f057 	.word	0x0800f057
 800ef80:	0800f057 	.word	0x0800f057
 800ef84:	0800f057 	.word	0x0800f057
 800ef88:	0800f013 	.word	0x0800f013
 800ef8c:	0800f057 	.word	0x0800f057
 800ef90:	0800f057 	.word	0x0800f057
 800ef94:	0800f057 	.word	0x0800f057
 800ef98:	0800f057 	.word	0x0800f057
 800ef9c:	0800f057 	.word	0x0800f057
 800efa0:	0800f057 	.word	0x0800f057
 800efa4:	0800f057 	.word	0x0800f057
 800efa8:	0800f023 	.word	0x0800f023
 800efac:	0800f057 	.word	0x0800f057
 800efb0:	0800f057 	.word	0x0800f057
 800efb4:	0800f057 	.word	0x0800f057
 800efb8:	0800f057 	.word	0x0800f057
 800efbc:	0800f057 	.word	0x0800f057
 800efc0:	0800f057 	.word	0x0800f057
 800efc4:	0800f057 	.word	0x0800f057
 800efc8:	0800f057 	.word	0x0800f057
 800efcc:	0800f057 	.word	0x0800f057
 800efd0:	0800f057 	.word	0x0800f057
 800efd4:	0800f057 	.word	0x0800f057
 800efd8:	0800f057 	.word	0x0800f057
 800efdc:	0800f057 	.word	0x0800f057
 800efe0:	0800f057 	.word	0x0800f057
 800efe4:	0800f057 	.word	0x0800f057
 800efe8:	0800f049 	.word	0x0800f049
 800efec:	2b40      	cmp	r3, #64	; 0x40
 800efee:	d02e      	beq.n	800f04e <UART_SetConfig+0xa36>
 800eff0:	e031      	b.n	800f056 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eff2:	f7fc fc03 	bl	800b7fc <HAL_RCC_GetPCLK1Freq>
 800eff6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eff8:	e033      	b.n	800f062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800effa:	f7fc fc15 	bl	800b828 <HAL_RCC_GetPCLK2Freq>
 800effe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f000:	e02f      	b.n	800f062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f006:	4618      	mov	r0, r3
 800f008:	f7fd fb80 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f010:	e027      	b.n	800f062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f012:	f107 0318 	add.w	r3, r7, #24
 800f016:	4618      	mov	r0, r3
 800f018:	f7fd fccc 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f01c:	69fb      	ldr	r3, [r7, #28]
 800f01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f020:	e01f      	b.n	800f062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f022:	4b2d      	ldr	r3, [pc, #180]	; (800f0d8 <UART_SetConfig+0xac0>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f003 0320 	and.w	r3, r3, #32
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d009      	beq.n	800f042 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f02e:	4b2a      	ldr	r3, [pc, #168]	; (800f0d8 <UART_SetConfig+0xac0>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	08db      	lsrs	r3, r3, #3
 800f034:	f003 0303 	and.w	r3, r3, #3
 800f038:	4a28      	ldr	r2, [pc, #160]	; (800f0dc <UART_SetConfig+0xac4>)
 800f03a:	fa22 f303 	lsr.w	r3, r2, r3
 800f03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f040:	e00f      	b.n	800f062 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f042:	4b26      	ldr	r3, [pc, #152]	; (800f0dc <UART_SetConfig+0xac4>)
 800f044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f046:	e00c      	b.n	800f062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f048:	4b25      	ldr	r3, [pc, #148]	; (800f0e0 <UART_SetConfig+0xac8>)
 800f04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f04c:	e009      	b.n	800f062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f04e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f054:	e005      	b.n	800f062 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f056:	2300      	movs	r3, #0
 800f058:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f05a:	2301      	movs	r3, #1
 800f05c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f060:	bf00      	nop
    }

    if (pclk != 0U)
 800f062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f064:	2b00      	cmp	r3, #0
 800f066:	d021      	beq.n	800f0ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f06c:	4a1d      	ldr	r2, [pc, #116]	; (800f0e4 <UART_SetConfig+0xacc>)
 800f06e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f072:	461a      	mov	r2, r3
 800f074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f076:	fbb3 f2f2 	udiv	r2, r3, r2
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	085b      	lsrs	r3, r3, #1
 800f080:	441a      	add	r2, r3
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	fbb2 f3f3 	udiv	r3, r2, r3
 800f08a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08e:	2b0f      	cmp	r3, #15
 800f090:	d909      	bls.n	800f0a6 <UART_SetConfig+0xa8e>
 800f092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f098:	d205      	bcs.n	800f0a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09c:	b29a      	uxth	r2, r3
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	60da      	str	r2, [r3, #12]
 800f0a4:	e002      	b.n	800f0ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f0c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3748      	adds	r7, #72	; 0x48
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f0d6:	bf00      	nop
 800f0d8:	58024400 	.word	0x58024400
 800f0dc:	03d09000 	.word	0x03d09000
 800f0e0:	003d0900 	.word	0x003d0900
 800f0e4:	080120bc 	.word	0x080120bc

0800f0e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f4:	f003 0301 	and.w	r3, r3, #1
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00a      	beq.n	800f112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	430a      	orrs	r2, r1
 800f110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f116:	f003 0302 	and.w	r3, r3, #2
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00a      	beq.n	800f134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	430a      	orrs	r2, r1
 800f132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f138:	f003 0304 	and.w	r3, r3, #4
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00a      	beq.n	800f156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	430a      	orrs	r2, r1
 800f154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f15a:	f003 0308 	and.w	r3, r3, #8
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00a      	beq.n	800f178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	430a      	orrs	r2, r1
 800f176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f17c:	f003 0310 	and.w	r3, r3, #16
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00a      	beq.n	800f19a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	689b      	ldr	r3, [r3, #8]
 800f18a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	430a      	orrs	r2, r1
 800f198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f19e:	f003 0320 	and.w	r3, r3, #32
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d00a      	beq.n	800f1bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	430a      	orrs	r2, r1
 800f1ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d01a      	beq.n	800f1fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	430a      	orrs	r2, r1
 800f1dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1e6:	d10a      	bne.n	800f1fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	430a      	orrs	r2, r1
 800f1fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f206:	2b00      	cmp	r3, #0
 800f208:	d00a      	beq.n	800f220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	430a      	orrs	r2, r1
 800f21e:	605a      	str	r2, [r3, #4]
  }
}
 800f220:	bf00      	nop
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr

0800f22c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b086      	sub	sp, #24
 800f230:	af02      	add	r7, sp, #8
 800f232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f23c:	f7f7 ffca 	bl	80071d4 <HAL_GetTick>
 800f240:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f003 0308 	and.w	r3, r3, #8
 800f24c:	2b08      	cmp	r3, #8
 800f24e:	d10e      	bne.n	800f26e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f254:	9300      	str	r3, [sp, #0]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2200      	movs	r2, #0
 800f25a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f000 f82f 	bl	800f2c2 <UART_WaitOnFlagUntilTimeout>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d001      	beq.n	800f26e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f26a:	2303      	movs	r3, #3
 800f26c:	e025      	b.n	800f2ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f003 0304 	and.w	r3, r3, #4
 800f278:	2b04      	cmp	r3, #4
 800f27a:	d10e      	bne.n	800f29a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f27c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2200      	movs	r2, #0
 800f286:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 f819 	bl	800f2c2 <UART_WaitOnFlagUntilTimeout>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d001      	beq.n	800f29a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f296:	2303      	movs	r3, #3
 800f298:	e00f      	b.n	800f2ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2220      	movs	r2, #32
 800f29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2220      	movs	r2, #32
 800f2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b09c      	sub	sp, #112	; 0x70
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	60f8      	str	r0, [r7, #12]
 800f2ca:	60b9      	str	r1, [r7, #8]
 800f2cc:	603b      	str	r3, [r7, #0]
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2d2:	e0a9      	b.n	800f428 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2da:	f000 80a5 	beq.w	800f428 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2de:	f7f7 ff79 	bl	80071d4 <HAL_GetTick>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	1ad3      	subs	r3, r2, r3
 800f2e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d302      	bcc.n	800f2f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800f2ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d140      	bne.n	800f376 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2fc:	e853 3f00 	ldrex	r3, [r3]
 800f300:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f308:	667b      	str	r3, [r7, #100]	; 0x64
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	461a      	mov	r2, r3
 800f310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f312:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f314:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f318:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f31a:	e841 2300 	strex	r3, r2, [r1]
 800f31e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f322:	2b00      	cmp	r3, #0
 800f324:	d1e6      	bne.n	800f2f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	3308      	adds	r3, #8
 800f32c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f330:	e853 3f00 	ldrex	r3, [r3]
 800f334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f338:	f023 0301 	bic.w	r3, r3, #1
 800f33c:	663b      	str	r3, [r7, #96]	; 0x60
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	3308      	adds	r3, #8
 800f344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f346:	64ba      	str	r2, [r7, #72]	; 0x48
 800f348:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f34a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f34c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f34e:	e841 2300 	strex	r3, r2, [r1]
 800f352:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1e5      	bne.n	800f326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2220      	movs	r2, #32
 800f35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2220      	movs	r2, #32
 800f366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f372:	2303      	movs	r3, #3
 800f374:	e069      	b.n	800f44a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f003 0304 	and.w	r3, r3, #4
 800f380:	2b00      	cmp	r3, #0
 800f382:	d051      	beq.n	800f428 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	69db      	ldr	r3, [r3, #28]
 800f38a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f38e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f392:	d149      	bne.n	800f428 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f39c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a6:	e853 3f00 	ldrex	r3, [r3]
 800f3aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f3b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f3bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f3be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f3c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3c4:	e841 2300 	strex	r3, r2, [r1]
 800f3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1e6      	bne.n	800f39e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	3308      	adds	r3, #8
 800f3d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	e853 3f00 	ldrex	r3, [r3]
 800f3de:	613b      	str	r3, [r7, #16]
   return(result);
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	f023 0301 	bic.w	r3, r3, #1
 800f3e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f3f0:	623a      	str	r2, [r7, #32]
 800f3f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3f4:	69f9      	ldr	r1, [r7, #28]
 800f3f6:	6a3a      	ldr	r2, [r7, #32]
 800f3f8:	e841 2300 	strex	r3, r2, [r1]
 800f3fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d1e5      	bne.n	800f3d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2220      	movs	r2, #32
 800f408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2220      	movs	r2, #32
 800f410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2220      	movs	r2, #32
 800f418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2200      	movs	r2, #0
 800f420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f424:	2303      	movs	r3, #3
 800f426:	e010      	b.n	800f44a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	69da      	ldr	r2, [r3, #28]
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	4013      	ands	r3, r2
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	429a      	cmp	r2, r3
 800f436:	bf0c      	ite	eq
 800f438:	2301      	moveq	r3, #1
 800f43a:	2300      	movne	r3, #0
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	461a      	mov	r2, r3
 800f440:	79fb      	ldrb	r3, [r7, #7]
 800f442:	429a      	cmp	r2, r3
 800f444:	f43f af46 	beq.w	800f2d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f448:	2300      	movs	r3, #0
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3770      	adds	r7, #112	; 0x70
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
	...

0800f454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f454:	b480      	push	{r7}
 800f456:	b095      	sub	sp, #84	; 0x54
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f464:	e853 3f00 	ldrex	r3, [r3]
 800f468:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f470:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	461a      	mov	r2, r3
 800f478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f47a:	643b      	str	r3, [r7, #64]	; 0x40
 800f47c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f47e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f482:	e841 2300 	strex	r3, r2, [r1]
 800f486:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1e6      	bne.n	800f45c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	3308      	adds	r3, #8
 800f494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f496:	6a3b      	ldr	r3, [r7, #32]
 800f498:	e853 3f00 	ldrex	r3, [r3]
 800f49c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f49e:	69fa      	ldr	r2, [r7, #28]
 800f4a0:	4b1e      	ldr	r3, [pc, #120]	; (800f51c <UART_EndRxTransfer+0xc8>)
 800f4a2:	4013      	ands	r3, r2
 800f4a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f4b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4b6:	e841 2300 	strex	r3, r2, [r1]
 800f4ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1e5      	bne.n	800f48e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d118      	bne.n	800f4fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	e853 3f00 	ldrex	r3, [r3]
 800f4d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	f023 0310 	bic.w	r3, r3, #16
 800f4de:	647b      	str	r3, [r7, #68]	; 0x44
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4e8:	61bb      	str	r3, [r7, #24]
 800f4ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ec:	6979      	ldr	r1, [r7, #20]
 800f4ee:	69ba      	ldr	r2, [r7, #24]
 800f4f0:	e841 2300 	strex	r3, r2, [r1]
 800f4f4:	613b      	str	r3, [r7, #16]
   return(result);
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1e6      	bne.n	800f4ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2220      	movs	r2, #32
 800f500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f510:	bf00      	nop
 800f512:	3754      	adds	r7, #84	; 0x54
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr
 800f51c:	effffffe 	.word	0xeffffffe

0800f520 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f52c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2200      	movs	r2, #0
 800f532:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2200      	movs	r2, #0
 800f53a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	f7ff f854 	bl	800e5ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f544:	bf00      	nop
 800f546:	3710      	adds	r7, #16
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b088      	sub	sp, #32
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	e853 3f00 	ldrex	r3, [r3]
 800f560:	60bb      	str	r3, [r7, #8]
   return(result);
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f568:	61fb      	str	r3, [r7, #28]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	461a      	mov	r2, r3
 800f570:	69fb      	ldr	r3, [r7, #28]
 800f572:	61bb      	str	r3, [r7, #24]
 800f574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f576:	6979      	ldr	r1, [r7, #20]
 800f578:	69ba      	ldr	r2, [r7, #24]
 800f57a:	e841 2300 	strex	r3, r2, [r1]
 800f57e:	613b      	str	r3, [r7, #16]
   return(result);
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d1e6      	bne.n	800f554 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2220      	movs	r2, #32
 800f58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2200      	movs	r2, #0
 800f592:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f7ff f81f 	bl	800e5d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f59a:	bf00      	nop
 800f59c:	3720      	adds	r7, #32
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f5a2:	b480      	push	{r7}
 800f5a4:	b083      	sub	sp, #12
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f5aa:	bf00      	nop
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f5be:	bf00      	nop
 800f5c0:	370c      	adds	r7, #12
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr

0800f5ca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f5ca:	b480      	push	{r7}
 800f5cc:	b083      	sub	sp, #12
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f5d2:	bf00      	nop
 800f5d4:	370c      	adds	r7, #12
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr

0800f5de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f5de:	b480      	push	{r7}
 800f5e0:	b085      	sub	sp, #20
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d101      	bne.n	800f5f4 <HAL_UARTEx_DisableFifoMode+0x16>
 800f5f0:	2302      	movs	r3, #2
 800f5f2:	e027      	b.n	800f644 <HAL_UARTEx_DisableFifoMode+0x66>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2224      	movs	r2, #36	; 0x24
 800f600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f022 0201 	bic.w	r2, r2, #1
 800f61a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f622:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2200      	movs	r2, #0
 800f628:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	68fa      	ldr	r2, [r7, #12]
 800f630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2220      	movs	r2, #32
 800f636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f642:	2300      	movs	r3, #0
}
 800f644:	4618      	mov	r0, r3
 800f646:	3714      	adds	r7, #20
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f660:	2b01      	cmp	r3, #1
 800f662:	d101      	bne.n	800f668 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f664:	2302      	movs	r3, #2
 800f666:	e02d      	b.n	800f6c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2201      	movs	r2, #1
 800f66c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2224      	movs	r2, #36	; 0x24
 800f674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f022 0201 	bic.w	r2, r2, #1
 800f68e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	689b      	ldr	r3, [r3, #8]
 800f696:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	683a      	ldr	r2, [r7, #0]
 800f6a0:	430a      	orrs	r2, r1
 800f6a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 f84f 	bl	800f748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2220      	movs	r2, #32
 800f6b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f6c2:	2300      	movs	r3, #0
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3710      	adds	r7, #16
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	d101      	bne.n	800f6e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f6e0:	2302      	movs	r3, #2
 800f6e2:	e02d      	b.n	800f740 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2224      	movs	r2, #36	; 0x24
 800f6f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f022 0201 	bic.w	r2, r2, #1
 800f70a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	683a      	ldr	r2, [r7, #0]
 800f71c:	430a      	orrs	r2, r1
 800f71e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f000 f811 	bl	800f748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2220      	movs	r2, #32
 800f732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2200      	movs	r2, #0
 800f73a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f748:	b480      	push	{r7}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f754:	2b00      	cmp	r3, #0
 800f756:	d108      	bne.n	800f76a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2201      	movs	r2, #1
 800f75c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2201      	movs	r2, #1
 800f764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f768:	e031      	b.n	800f7ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f76a:	2310      	movs	r3, #16
 800f76c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f76e:	2310      	movs	r3, #16
 800f770:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	0e5b      	lsrs	r3, r3, #25
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	f003 0307 	and.w	r3, r3, #7
 800f780:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	689b      	ldr	r3, [r3, #8]
 800f788:	0f5b      	lsrs	r3, r3, #29
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	f003 0307 	and.w	r3, r3, #7
 800f790:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f792:	7bbb      	ldrb	r3, [r7, #14]
 800f794:	7b3a      	ldrb	r2, [r7, #12]
 800f796:	4911      	ldr	r1, [pc, #68]	; (800f7dc <UARTEx_SetNbDataToProcess+0x94>)
 800f798:	5c8a      	ldrb	r2, [r1, r2]
 800f79a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f79e:	7b3a      	ldrb	r2, [r7, #12]
 800f7a0:	490f      	ldr	r1, [pc, #60]	; (800f7e0 <UARTEx_SetNbDataToProcess+0x98>)
 800f7a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f7a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7a8:	b29a      	uxth	r2, r3
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7b0:	7bfb      	ldrb	r3, [r7, #15]
 800f7b2:	7b7a      	ldrb	r2, [r7, #13]
 800f7b4:	4909      	ldr	r1, [pc, #36]	; (800f7dc <UARTEx_SetNbDataToProcess+0x94>)
 800f7b6:	5c8a      	ldrb	r2, [r1, r2]
 800f7b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f7bc:	7b7a      	ldrb	r2, [r7, #13]
 800f7be:	4908      	ldr	r1, [pc, #32]	; (800f7e0 <UARTEx_SetNbDataToProcess+0x98>)
 800f7c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7c6:	b29a      	uxth	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f7ce:	bf00      	nop
 800f7d0:	3714      	adds	r7, #20
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr
 800f7da:	bf00      	nop
 800f7dc:	080120d4 	.word	0x080120d4
 800f7e0:	080120dc 	.word	0x080120dc

0800f7e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f7e4:	b084      	sub	sp, #16
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b084      	sub	sp, #16
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	f107 001c 	add.w	r0, r7, #28
 800f7f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	d120      	bne.n	800f83e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f800:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	68da      	ldr	r2, [r3, #12]
 800f80c:	4b2a      	ldr	r3, [pc, #168]	; (800f8b8 <USB_CoreInit+0xd4>)
 800f80e:	4013      	ands	r3, r2
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f822:	2b01      	cmp	r3, #1
 800f824:	d105      	bne.n	800f832 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 faac 	bl	800fd90 <USB_CoreReset>
 800f838:	4603      	mov	r3, r0
 800f83a:	73fb      	strb	r3, [r7, #15]
 800f83c:	e01a      	b.n	800f874 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 faa0 	bl	800fd90 <USB_CoreReset>
 800f850:	4603      	mov	r3, r0
 800f852:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f856:	2b00      	cmp	r3, #0
 800f858:	d106      	bne.n	800f868 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f85e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	639a      	str	r2, [r3, #56]	; 0x38
 800f866:	e005      	b.n	800f874 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f86c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f876:	2b01      	cmp	r3, #1
 800f878:	d116      	bne.n	800f8a8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f87e:	b29a      	uxth	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f888:	4b0c      	ldr	r3, [pc, #48]	; (800f8bc <USB_CoreInit+0xd8>)
 800f88a:	4313      	orrs	r3, r2
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	689b      	ldr	r3, [r3, #8]
 800f894:	f043 0206 	orr.w	r2, r3, #6
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	f043 0220 	orr.w	r2, r3, #32
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f8b4:	b004      	add	sp, #16
 800f8b6:	4770      	bx	lr
 800f8b8:	ffbdffbf 	.word	0xffbdffbf
 800f8bc:	03ee0000 	.word	0x03ee0000

0800f8c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	689b      	ldr	r3, [r3, #8]
 800f8cc:	f023 0201 	bic.w	r2, r3, #1
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f8d4:	2300      	movs	r3, #0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	370c      	adds	r7, #12
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr

0800f8e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b084      	sub	sp, #16
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
 800f8ea:	460b      	mov	r3, r1
 800f8ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	68db      	ldr	r3, [r3, #12]
 800f8f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f8fe:	78fb      	ldrb	r3, [r7, #3]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d115      	bne.n	800f930 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f910:	2001      	movs	r0, #1
 800f912:	f7f7 fc6b 	bl	80071ec <HAL_Delay>
      ms++;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	3301      	adds	r3, #1
 800f91a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 fa29 	bl	800fd74 <USB_GetMode>
 800f922:	4603      	mov	r3, r0
 800f924:	2b01      	cmp	r3, #1
 800f926:	d01e      	beq.n	800f966 <USB_SetCurrentMode+0x84>
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2b31      	cmp	r3, #49	; 0x31
 800f92c:	d9f0      	bls.n	800f910 <USB_SetCurrentMode+0x2e>
 800f92e:	e01a      	b.n	800f966 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f930:	78fb      	ldrb	r3, [r7, #3]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d115      	bne.n	800f962 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f942:	2001      	movs	r0, #1
 800f944:	f7f7 fc52 	bl	80071ec <HAL_Delay>
      ms++;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	3301      	adds	r3, #1
 800f94c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 fa10 	bl	800fd74 <USB_GetMode>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d005      	beq.n	800f966 <USB_SetCurrentMode+0x84>
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2b31      	cmp	r3, #49	; 0x31
 800f95e:	d9f0      	bls.n	800f942 <USB_SetCurrentMode+0x60>
 800f960:	e001      	b.n	800f966 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f962:	2301      	movs	r3, #1
 800f964:	e005      	b.n	800f972 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2b32      	cmp	r3, #50	; 0x32
 800f96a:	d101      	bne.n	800f970 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f96c:	2301      	movs	r3, #1
 800f96e:	e000      	b.n	800f972 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f970:	2300      	movs	r3, #0
}
 800f972:	4618      	mov	r0, r3
 800f974:	3710      	adds	r7, #16
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
	...

0800f97c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f97c:	b084      	sub	sp, #16
 800f97e:	b580      	push	{r7, lr}
 800f980:	b086      	sub	sp, #24
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
 800f986:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f98a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f98e:	2300      	movs	r3, #0
 800f990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f996:	2300      	movs	r3, #0
 800f998:	613b      	str	r3, [r7, #16]
 800f99a:	e009      	b.n	800f9b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	3340      	adds	r3, #64	; 0x40
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	613b      	str	r3, [r7, #16]
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	2b0e      	cmp	r3, #14
 800f9b4:	d9f2      	bls.n	800f99c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d11c      	bne.n	800f9f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9ca:	f043 0302 	orr.w	r3, r3, #2
 800f9ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	601a      	str	r2, [r3, #0]
 800f9f4:	e005      	b.n	800fa02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa08:	461a      	mov	r2, r3
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa14:	4619      	mov	r1, r3
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	680b      	ldr	r3, [r1, #0]
 800fa20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d10c      	bne.n	800fa42 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d104      	bne.n	800fa38 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fa2e:	2100      	movs	r1, #0
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f000 f965 	bl	800fd00 <USB_SetDevSpeed>
 800fa36:	e008      	b.n	800fa4a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fa38:	2101      	movs	r1, #1
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 f960 	bl	800fd00 <USB_SetDevSpeed>
 800fa40:	e003      	b.n	800fa4a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fa42:	2103      	movs	r1, #3
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 f95b 	bl	800fd00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fa4a:	2110      	movs	r1, #16
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f000 f8f3 	bl	800fc38 <USB_FlushTxFifo>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fa58:	2301      	movs	r3, #1
 800fa5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 f91f 	bl	800fca0 <USB_FlushRxFifo>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d001      	beq.n	800fa6c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa72:	461a      	mov	r2, r3
 800fa74:	2300      	movs	r3, #0
 800fa76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa7e:	461a      	mov	r2, r3
 800fa80:	2300      	movs	r3, #0
 800fa82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa90:	2300      	movs	r3, #0
 800fa92:	613b      	str	r3, [r7, #16]
 800fa94:	e043      	b.n	800fb1e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	015a      	lsls	r2, r3, #5
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800faa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800faac:	d118      	bne.n	800fae0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d10a      	bne.n	800faca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	015a      	lsls	r2, r3, #5
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	4413      	add	r3, r2
 800fabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fac0:	461a      	mov	r2, r3
 800fac2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fac6:	6013      	str	r3, [r2, #0]
 800fac8:	e013      	b.n	800faf2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	015a      	lsls	r2, r3, #5
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	4413      	add	r3, r2
 800fad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fad6:	461a      	mov	r2, r3
 800fad8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fadc:	6013      	str	r3, [r2, #0]
 800fade:	e008      	b.n	800faf2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	015a      	lsls	r2, r3, #5
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	4413      	add	r3, r2
 800fae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faec:	461a      	mov	r2, r3
 800faee:	2300      	movs	r3, #0
 800faf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	015a      	lsls	r2, r3, #5
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	4413      	add	r3, r2
 800fafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fafe:	461a      	mov	r2, r3
 800fb00:	2300      	movs	r3, #0
 800fb02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	015a      	lsls	r2, r3, #5
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	4413      	add	r3, r2
 800fb0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb10:	461a      	mov	r2, r3
 800fb12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fb16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	613b      	str	r3, [r7, #16]
 800fb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb20:	693a      	ldr	r2, [r7, #16]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d3b7      	bcc.n	800fa96 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb26:	2300      	movs	r3, #0
 800fb28:	613b      	str	r3, [r7, #16]
 800fb2a:	e043      	b.n	800fbb4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	015a      	lsls	r2, r3, #5
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	4413      	add	r3, r2
 800fb34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb42:	d118      	bne.n	800fb76 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d10a      	bne.n	800fb60 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	015a      	lsls	r2, r3, #5
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	4413      	add	r3, r2
 800fb52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb56:	461a      	mov	r2, r3
 800fb58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fb5c:	6013      	str	r3, [r2, #0]
 800fb5e:	e013      	b.n	800fb88 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	015a      	lsls	r2, r3, #5
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	4413      	add	r3, r2
 800fb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fb72:	6013      	str	r3, [r2, #0]
 800fb74:	e008      	b.n	800fb88 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	015a      	lsls	r2, r3, #5
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb82:	461a      	mov	r2, r3
 800fb84:	2300      	movs	r3, #0
 800fb86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	015a      	lsls	r2, r3, #5
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	4413      	add	r3, r2
 800fb90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb94:	461a      	mov	r2, r3
 800fb96:	2300      	movs	r3, #0
 800fb98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	015a      	lsls	r2, r3, #5
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	4413      	add	r3, r2
 800fba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fba6:	461a      	mov	r2, r3
 800fba8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fbac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	613b      	str	r3, [r7, #16]
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb6:	693a      	ldr	r2, [r7, #16]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d3b7      	bcc.n	800fb2c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbc2:	691b      	ldr	r3, [r3, #16]
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fbdc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d105      	bne.n	800fbf0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	699b      	ldr	r3, [r3, #24]
 800fbe8:	f043 0210 	orr.w	r2, r3, #16
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	699a      	ldr	r2, [r3, #24]
 800fbf4:	4b0e      	ldr	r3, [pc, #56]	; (800fc30 <USB_DevInit+0x2b4>)
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d005      	beq.n	800fc0e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	699b      	ldr	r3, [r3, #24]
 800fc06:	f043 0208 	orr.w	r2, r3, #8
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fc0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d105      	bne.n	800fc20 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	699a      	ldr	r2, [r3, #24]
 800fc18:	4b06      	ldr	r3, [pc, #24]	; (800fc34 <USB_DevInit+0x2b8>)
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fc20:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3718      	adds	r7, #24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc2c:	b004      	add	sp, #16
 800fc2e:	4770      	bx	lr
 800fc30:	803c3800 	.word	0x803c3800
 800fc34:	40000004 	.word	0x40000004

0800fc38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fc42:	2300      	movs	r3, #0
 800fc44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	3301      	adds	r3, #1
 800fc4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	4a13      	ldr	r2, [pc, #76]	; (800fc9c <USB_FlushTxFifo+0x64>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d901      	bls.n	800fc58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fc54:	2303      	movs	r3, #3
 800fc56:	e01b      	b.n	800fc90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	daf2      	bge.n	800fc46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fc60:	2300      	movs	r3, #0
 800fc62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	019b      	lsls	r3, r3, #6
 800fc68:	f043 0220 	orr.w	r2, r3, #32
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	3301      	adds	r3, #1
 800fc74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	4a08      	ldr	r2, [pc, #32]	; (800fc9c <USB_FlushTxFifo+0x64>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d901      	bls.n	800fc82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fc7e:	2303      	movs	r3, #3
 800fc80:	e006      	b.n	800fc90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	691b      	ldr	r3, [r3, #16]
 800fc86:	f003 0320 	and.w	r3, r3, #32
 800fc8a:	2b20      	cmp	r3, #32
 800fc8c:	d0f0      	beq.n	800fc70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3714      	adds	r7, #20
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	00030d40 	.word	0x00030d40

0800fca0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	4a11      	ldr	r2, [pc, #68]	; (800fcfc <USB_FlushRxFifo+0x5c>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d901      	bls.n	800fcbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fcba:	2303      	movs	r3, #3
 800fcbc:	e018      	b.n	800fcf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	691b      	ldr	r3, [r3, #16]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	daf2      	bge.n	800fcac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2210      	movs	r2, #16
 800fcce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	4a08      	ldr	r2, [pc, #32]	; (800fcfc <USB_FlushRxFifo+0x5c>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d901      	bls.n	800fce2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fcde:	2303      	movs	r3, #3
 800fce0:	e006      	b.n	800fcf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	691b      	ldr	r3, [r3, #16]
 800fce6:	f003 0310 	and.w	r3, r3, #16
 800fcea:	2b10      	cmp	r3, #16
 800fcec:	d0f0      	beq.n	800fcd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3714      	adds	r7, #20
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfa:	4770      	bx	lr
 800fcfc:	00030d40 	.word	0x00030d40

0800fd00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b085      	sub	sp, #20
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	78fb      	ldrb	r3, [r7, #3]
 800fd1a:	68f9      	ldr	r1, [r7, #12]
 800fd1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd20:	4313      	orrs	r3, r2
 800fd22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr

0800fd32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fd32:	b480      	push	{r7}
 800fd34:	b085      	sub	sp, #20
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68fa      	ldr	r2, [r7, #12]
 800fd48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd4c:	f023 0303 	bic.w	r3, r3, #3
 800fd50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	68fa      	ldr	r2, [r7, #12]
 800fd5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd60:	f043 0302 	orr.w	r3, r3, #2
 800fd64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3714      	adds	r7, #20
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	695b      	ldr	r3, [r3, #20]
 800fd80:	f003 0301 	and.w	r3, r3, #1
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	370c      	adds	r7, #12
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr

0800fd90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fd90:	b480      	push	{r7}
 800fd92:	b085      	sub	sp, #20
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	3301      	adds	r3, #1
 800fda0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	4a13      	ldr	r2, [pc, #76]	; (800fdf4 <USB_CoreReset+0x64>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d901      	bls.n	800fdae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fdaa:	2303      	movs	r3, #3
 800fdac:	e01b      	b.n	800fde6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	691b      	ldr	r3, [r3, #16]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	daf2      	bge.n	800fd9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	691b      	ldr	r3, [r3, #16]
 800fdbe:	f043 0201 	orr.w	r2, r3, #1
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	3301      	adds	r3, #1
 800fdca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	4a09      	ldr	r2, [pc, #36]	; (800fdf4 <USB_CoreReset+0x64>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d901      	bls.n	800fdd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fdd4:	2303      	movs	r3, #3
 800fdd6:	e006      	b.n	800fde6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	691b      	ldr	r3, [r3, #16]
 800fddc:	f003 0301 	and.w	r3, r3, #1
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d0f0      	beq.n	800fdc6 <USB_CoreReset+0x36>

  return HAL_OK;
 800fde4:	2300      	movs	r3, #0
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3714      	adds	r7, #20
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	00030d40 	.word	0x00030d40

0800fdf8 <__errno>:
 800fdf8:	4b01      	ldr	r3, [pc, #4]	; (800fe00 <__errno+0x8>)
 800fdfa:	6818      	ldr	r0, [r3, #0]
 800fdfc:	4770      	bx	lr
 800fdfe:	bf00      	nop
 800fe00:	24000024 	.word	0x24000024

0800fe04 <__libc_init_array>:
 800fe04:	b570      	push	{r4, r5, r6, lr}
 800fe06:	4d0d      	ldr	r5, [pc, #52]	; (800fe3c <__libc_init_array+0x38>)
 800fe08:	4c0d      	ldr	r4, [pc, #52]	; (800fe40 <__libc_init_array+0x3c>)
 800fe0a:	1b64      	subs	r4, r4, r5
 800fe0c:	10a4      	asrs	r4, r4, #2
 800fe0e:	2600      	movs	r6, #0
 800fe10:	42a6      	cmp	r6, r4
 800fe12:	d109      	bne.n	800fe28 <__libc_init_array+0x24>
 800fe14:	4d0b      	ldr	r5, [pc, #44]	; (800fe44 <__libc_init_array+0x40>)
 800fe16:	4c0c      	ldr	r4, [pc, #48]	; (800fe48 <__libc_init_array+0x44>)
 800fe18:	f000 fc8e 	bl	8010738 <_init>
 800fe1c:	1b64      	subs	r4, r4, r5
 800fe1e:	10a4      	asrs	r4, r4, #2
 800fe20:	2600      	movs	r6, #0
 800fe22:	42a6      	cmp	r6, r4
 800fe24:	d105      	bne.n	800fe32 <__libc_init_array+0x2e>
 800fe26:	bd70      	pop	{r4, r5, r6, pc}
 800fe28:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe2c:	4798      	blx	r3
 800fe2e:	3601      	adds	r6, #1
 800fe30:	e7ee      	b.n	800fe10 <__libc_init_array+0xc>
 800fe32:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe36:	4798      	blx	r3
 800fe38:	3601      	adds	r6, #1
 800fe3a:	e7f2      	b.n	800fe22 <__libc_init_array+0x1e>
 800fe3c:	08012120 	.word	0x08012120
 800fe40:	08012120 	.word	0x08012120
 800fe44:	08012120 	.word	0x08012120
 800fe48:	08012124 	.word	0x08012124

0800fe4c <memset>:
 800fe4c:	4402      	add	r2, r0
 800fe4e:	4603      	mov	r3, r0
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d100      	bne.n	800fe56 <memset+0xa>
 800fe54:	4770      	bx	lr
 800fe56:	f803 1b01 	strb.w	r1, [r3], #1
 800fe5a:	e7f9      	b.n	800fe50 <memset+0x4>

0800fe5c <_free_r>:
 800fe5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe5e:	2900      	cmp	r1, #0
 800fe60:	d044      	beq.n	800feec <_free_r+0x90>
 800fe62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe66:	9001      	str	r0, [sp, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f1a1 0404 	sub.w	r4, r1, #4
 800fe6e:	bfb8      	it	lt
 800fe70:	18e4      	addlt	r4, r4, r3
 800fe72:	f000 f903 	bl	801007c <__malloc_lock>
 800fe76:	4a1e      	ldr	r2, [pc, #120]	; (800fef0 <_free_r+0x94>)
 800fe78:	9801      	ldr	r0, [sp, #4]
 800fe7a:	6813      	ldr	r3, [r2, #0]
 800fe7c:	b933      	cbnz	r3, 800fe8c <_free_r+0x30>
 800fe7e:	6063      	str	r3, [r4, #4]
 800fe80:	6014      	str	r4, [r2, #0]
 800fe82:	b003      	add	sp, #12
 800fe84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe88:	f000 b8fe 	b.w	8010088 <__malloc_unlock>
 800fe8c:	42a3      	cmp	r3, r4
 800fe8e:	d908      	bls.n	800fea2 <_free_r+0x46>
 800fe90:	6825      	ldr	r5, [r4, #0]
 800fe92:	1961      	adds	r1, r4, r5
 800fe94:	428b      	cmp	r3, r1
 800fe96:	bf01      	itttt	eq
 800fe98:	6819      	ldreq	r1, [r3, #0]
 800fe9a:	685b      	ldreq	r3, [r3, #4]
 800fe9c:	1949      	addeq	r1, r1, r5
 800fe9e:	6021      	streq	r1, [r4, #0]
 800fea0:	e7ed      	b.n	800fe7e <_free_r+0x22>
 800fea2:	461a      	mov	r2, r3
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	b10b      	cbz	r3, 800feac <_free_r+0x50>
 800fea8:	42a3      	cmp	r3, r4
 800feaa:	d9fa      	bls.n	800fea2 <_free_r+0x46>
 800feac:	6811      	ldr	r1, [r2, #0]
 800feae:	1855      	adds	r5, r2, r1
 800feb0:	42a5      	cmp	r5, r4
 800feb2:	d10b      	bne.n	800fecc <_free_r+0x70>
 800feb4:	6824      	ldr	r4, [r4, #0]
 800feb6:	4421      	add	r1, r4
 800feb8:	1854      	adds	r4, r2, r1
 800feba:	42a3      	cmp	r3, r4
 800febc:	6011      	str	r1, [r2, #0]
 800febe:	d1e0      	bne.n	800fe82 <_free_r+0x26>
 800fec0:	681c      	ldr	r4, [r3, #0]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	6053      	str	r3, [r2, #4]
 800fec6:	4421      	add	r1, r4
 800fec8:	6011      	str	r1, [r2, #0]
 800feca:	e7da      	b.n	800fe82 <_free_r+0x26>
 800fecc:	d902      	bls.n	800fed4 <_free_r+0x78>
 800fece:	230c      	movs	r3, #12
 800fed0:	6003      	str	r3, [r0, #0]
 800fed2:	e7d6      	b.n	800fe82 <_free_r+0x26>
 800fed4:	6825      	ldr	r5, [r4, #0]
 800fed6:	1961      	adds	r1, r4, r5
 800fed8:	428b      	cmp	r3, r1
 800feda:	bf04      	itt	eq
 800fedc:	6819      	ldreq	r1, [r3, #0]
 800fede:	685b      	ldreq	r3, [r3, #4]
 800fee0:	6063      	str	r3, [r4, #4]
 800fee2:	bf04      	itt	eq
 800fee4:	1949      	addeq	r1, r1, r5
 800fee6:	6021      	streq	r1, [r4, #0]
 800fee8:	6054      	str	r4, [r2, #4]
 800feea:	e7ca      	b.n	800fe82 <_free_r+0x26>
 800feec:	b003      	add	sp, #12
 800feee:	bd30      	pop	{r4, r5, pc}
 800fef0:	24000eb8 	.word	0x24000eb8

0800fef4 <sbrk_aligned>:
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	4e0e      	ldr	r6, [pc, #56]	; (800ff30 <sbrk_aligned+0x3c>)
 800fef8:	460c      	mov	r4, r1
 800fefa:	6831      	ldr	r1, [r6, #0]
 800fefc:	4605      	mov	r5, r0
 800fefe:	b911      	cbnz	r1, 800ff06 <sbrk_aligned+0x12>
 800ff00:	f000 f88c 	bl	801001c <_sbrk_r>
 800ff04:	6030      	str	r0, [r6, #0]
 800ff06:	4621      	mov	r1, r4
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f000 f887 	bl	801001c <_sbrk_r>
 800ff0e:	1c43      	adds	r3, r0, #1
 800ff10:	d00a      	beq.n	800ff28 <sbrk_aligned+0x34>
 800ff12:	1cc4      	adds	r4, r0, #3
 800ff14:	f024 0403 	bic.w	r4, r4, #3
 800ff18:	42a0      	cmp	r0, r4
 800ff1a:	d007      	beq.n	800ff2c <sbrk_aligned+0x38>
 800ff1c:	1a21      	subs	r1, r4, r0
 800ff1e:	4628      	mov	r0, r5
 800ff20:	f000 f87c 	bl	801001c <_sbrk_r>
 800ff24:	3001      	adds	r0, #1
 800ff26:	d101      	bne.n	800ff2c <sbrk_aligned+0x38>
 800ff28:	f04f 34ff 	mov.w	r4, #4294967295
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}
 800ff30:	24000ebc 	.word	0x24000ebc

0800ff34 <_malloc_r>:
 800ff34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff38:	1ccd      	adds	r5, r1, #3
 800ff3a:	f025 0503 	bic.w	r5, r5, #3
 800ff3e:	3508      	adds	r5, #8
 800ff40:	2d0c      	cmp	r5, #12
 800ff42:	bf38      	it	cc
 800ff44:	250c      	movcc	r5, #12
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	4607      	mov	r7, r0
 800ff4a:	db01      	blt.n	800ff50 <_malloc_r+0x1c>
 800ff4c:	42a9      	cmp	r1, r5
 800ff4e:	d905      	bls.n	800ff5c <_malloc_r+0x28>
 800ff50:	230c      	movs	r3, #12
 800ff52:	603b      	str	r3, [r7, #0]
 800ff54:	2600      	movs	r6, #0
 800ff56:	4630      	mov	r0, r6
 800ff58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff5c:	4e2e      	ldr	r6, [pc, #184]	; (8010018 <_malloc_r+0xe4>)
 800ff5e:	f000 f88d 	bl	801007c <__malloc_lock>
 800ff62:	6833      	ldr	r3, [r6, #0]
 800ff64:	461c      	mov	r4, r3
 800ff66:	bb34      	cbnz	r4, 800ffb6 <_malloc_r+0x82>
 800ff68:	4629      	mov	r1, r5
 800ff6a:	4638      	mov	r0, r7
 800ff6c:	f7ff ffc2 	bl	800fef4 <sbrk_aligned>
 800ff70:	1c43      	adds	r3, r0, #1
 800ff72:	4604      	mov	r4, r0
 800ff74:	d14d      	bne.n	8010012 <_malloc_r+0xde>
 800ff76:	6834      	ldr	r4, [r6, #0]
 800ff78:	4626      	mov	r6, r4
 800ff7a:	2e00      	cmp	r6, #0
 800ff7c:	d140      	bne.n	8010000 <_malloc_r+0xcc>
 800ff7e:	6823      	ldr	r3, [r4, #0]
 800ff80:	4631      	mov	r1, r6
 800ff82:	4638      	mov	r0, r7
 800ff84:	eb04 0803 	add.w	r8, r4, r3
 800ff88:	f000 f848 	bl	801001c <_sbrk_r>
 800ff8c:	4580      	cmp	r8, r0
 800ff8e:	d13a      	bne.n	8010006 <_malloc_r+0xd2>
 800ff90:	6821      	ldr	r1, [r4, #0]
 800ff92:	3503      	adds	r5, #3
 800ff94:	1a6d      	subs	r5, r5, r1
 800ff96:	f025 0503 	bic.w	r5, r5, #3
 800ff9a:	3508      	adds	r5, #8
 800ff9c:	2d0c      	cmp	r5, #12
 800ff9e:	bf38      	it	cc
 800ffa0:	250c      	movcc	r5, #12
 800ffa2:	4629      	mov	r1, r5
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	f7ff ffa5 	bl	800fef4 <sbrk_aligned>
 800ffaa:	3001      	adds	r0, #1
 800ffac:	d02b      	beq.n	8010006 <_malloc_r+0xd2>
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	442b      	add	r3, r5
 800ffb2:	6023      	str	r3, [r4, #0]
 800ffb4:	e00e      	b.n	800ffd4 <_malloc_r+0xa0>
 800ffb6:	6822      	ldr	r2, [r4, #0]
 800ffb8:	1b52      	subs	r2, r2, r5
 800ffba:	d41e      	bmi.n	800fffa <_malloc_r+0xc6>
 800ffbc:	2a0b      	cmp	r2, #11
 800ffbe:	d916      	bls.n	800ffee <_malloc_r+0xba>
 800ffc0:	1961      	adds	r1, r4, r5
 800ffc2:	42a3      	cmp	r3, r4
 800ffc4:	6025      	str	r5, [r4, #0]
 800ffc6:	bf18      	it	ne
 800ffc8:	6059      	strne	r1, [r3, #4]
 800ffca:	6863      	ldr	r3, [r4, #4]
 800ffcc:	bf08      	it	eq
 800ffce:	6031      	streq	r1, [r6, #0]
 800ffd0:	5162      	str	r2, [r4, r5]
 800ffd2:	604b      	str	r3, [r1, #4]
 800ffd4:	4638      	mov	r0, r7
 800ffd6:	f104 060b 	add.w	r6, r4, #11
 800ffda:	f000 f855 	bl	8010088 <__malloc_unlock>
 800ffde:	f026 0607 	bic.w	r6, r6, #7
 800ffe2:	1d23      	adds	r3, r4, #4
 800ffe4:	1af2      	subs	r2, r6, r3
 800ffe6:	d0b6      	beq.n	800ff56 <_malloc_r+0x22>
 800ffe8:	1b9b      	subs	r3, r3, r6
 800ffea:	50a3      	str	r3, [r4, r2]
 800ffec:	e7b3      	b.n	800ff56 <_malloc_r+0x22>
 800ffee:	6862      	ldr	r2, [r4, #4]
 800fff0:	42a3      	cmp	r3, r4
 800fff2:	bf0c      	ite	eq
 800fff4:	6032      	streq	r2, [r6, #0]
 800fff6:	605a      	strne	r2, [r3, #4]
 800fff8:	e7ec      	b.n	800ffd4 <_malloc_r+0xa0>
 800fffa:	4623      	mov	r3, r4
 800fffc:	6864      	ldr	r4, [r4, #4]
 800fffe:	e7b2      	b.n	800ff66 <_malloc_r+0x32>
 8010000:	4634      	mov	r4, r6
 8010002:	6876      	ldr	r6, [r6, #4]
 8010004:	e7b9      	b.n	800ff7a <_malloc_r+0x46>
 8010006:	230c      	movs	r3, #12
 8010008:	603b      	str	r3, [r7, #0]
 801000a:	4638      	mov	r0, r7
 801000c:	f000 f83c 	bl	8010088 <__malloc_unlock>
 8010010:	e7a1      	b.n	800ff56 <_malloc_r+0x22>
 8010012:	6025      	str	r5, [r4, #0]
 8010014:	e7de      	b.n	800ffd4 <_malloc_r+0xa0>
 8010016:	bf00      	nop
 8010018:	24000eb8 	.word	0x24000eb8

0801001c <_sbrk_r>:
 801001c:	b538      	push	{r3, r4, r5, lr}
 801001e:	4d06      	ldr	r5, [pc, #24]	; (8010038 <_sbrk_r+0x1c>)
 8010020:	2300      	movs	r3, #0
 8010022:	4604      	mov	r4, r0
 8010024:	4608      	mov	r0, r1
 8010026:	602b      	str	r3, [r5, #0]
 8010028:	f7f6 ffee 	bl	8007008 <_sbrk>
 801002c:	1c43      	adds	r3, r0, #1
 801002e:	d102      	bne.n	8010036 <_sbrk_r+0x1a>
 8010030:	682b      	ldr	r3, [r5, #0]
 8010032:	b103      	cbz	r3, 8010036 <_sbrk_r+0x1a>
 8010034:	6023      	str	r3, [r4, #0]
 8010036:	bd38      	pop	{r3, r4, r5, pc}
 8010038:	24000ec0 	.word	0x24000ec0

0801003c <siprintf>:
 801003c:	b40e      	push	{r1, r2, r3}
 801003e:	b500      	push	{lr}
 8010040:	b09c      	sub	sp, #112	; 0x70
 8010042:	ab1d      	add	r3, sp, #116	; 0x74
 8010044:	9002      	str	r0, [sp, #8]
 8010046:	9006      	str	r0, [sp, #24]
 8010048:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801004c:	4809      	ldr	r0, [pc, #36]	; (8010074 <siprintf+0x38>)
 801004e:	9107      	str	r1, [sp, #28]
 8010050:	9104      	str	r1, [sp, #16]
 8010052:	4909      	ldr	r1, [pc, #36]	; (8010078 <siprintf+0x3c>)
 8010054:	f853 2b04 	ldr.w	r2, [r3], #4
 8010058:	9105      	str	r1, [sp, #20]
 801005a:	6800      	ldr	r0, [r0, #0]
 801005c:	9301      	str	r3, [sp, #4]
 801005e:	a902      	add	r1, sp, #8
 8010060:	f000 f874 	bl	801014c <_svfiprintf_r>
 8010064:	9b02      	ldr	r3, [sp, #8]
 8010066:	2200      	movs	r2, #0
 8010068:	701a      	strb	r2, [r3, #0]
 801006a:	b01c      	add	sp, #112	; 0x70
 801006c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010070:	b003      	add	sp, #12
 8010072:	4770      	bx	lr
 8010074:	24000024 	.word	0x24000024
 8010078:	ffff0208 	.word	0xffff0208

0801007c <__malloc_lock>:
 801007c:	4801      	ldr	r0, [pc, #4]	; (8010084 <__malloc_lock+0x8>)
 801007e:	f000 baf9 	b.w	8010674 <__retarget_lock_acquire_recursive>
 8010082:	bf00      	nop
 8010084:	24000ec4 	.word	0x24000ec4

08010088 <__malloc_unlock>:
 8010088:	4801      	ldr	r0, [pc, #4]	; (8010090 <__malloc_unlock+0x8>)
 801008a:	f000 baf4 	b.w	8010676 <__retarget_lock_release_recursive>
 801008e:	bf00      	nop
 8010090:	24000ec4 	.word	0x24000ec4

08010094 <__ssputs_r>:
 8010094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010098:	688e      	ldr	r6, [r1, #8]
 801009a:	429e      	cmp	r6, r3
 801009c:	4682      	mov	sl, r0
 801009e:	460c      	mov	r4, r1
 80100a0:	4690      	mov	r8, r2
 80100a2:	461f      	mov	r7, r3
 80100a4:	d838      	bhi.n	8010118 <__ssputs_r+0x84>
 80100a6:	898a      	ldrh	r2, [r1, #12]
 80100a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80100ac:	d032      	beq.n	8010114 <__ssputs_r+0x80>
 80100ae:	6825      	ldr	r5, [r4, #0]
 80100b0:	6909      	ldr	r1, [r1, #16]
 80100b2:	eba5 0901 	sub.w	r9, r5, r1
 80100b6:	6965      	ldr	r5, [r4, #20]
 80100b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100c0:	3301      	adds	r3, #1
 80100c2:	444b      	add	r3, r9
 80100c4:	106d      	asrs	r5, r5, #1
 80100c6:	429d      	cmp	r5, r3
 80100c8:	bf38      	it	cc
 80100ca:	461d      	movcc	r5, r3
 80100cc:	0553      	lsls	r3, r2, #21
 80100ce:	d531      	bpl.n	8010134 <__ssputs_r+0xa0>
 80100d0:	4629      	mov	r1, r5
 80100d2:	f7ff ff2f 	bl	800ff34 <_malloc_r>
 80100d6:	4606      	mov	r6, r0
 80100d8:	b950      	cbnz	r0, 80100f0 <__ssputs_r+0x5c>
 80100da:	230c      	movs	r3, #12
 80100dc:	f8ca 3000 	str.w	r3, [sl]
 80100e0:	89a3      	ldrh	r3, [r4, #12]
 80100e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100e6:	81a3      	strh	r3, [r4, #12]
 80100e8:	f04f 30ff 	mov.w	r0, #4294967295
 80100ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100f0:	6921      	ldr	r1, [r4, #16]
 80100f2:	464a      	mov	r2, r9
 80100f4:	f000 fac0 	bl	8010678 <memcpy>
 80100f8:	89a3      	ldrh	r3, [r4, #12]
 80100fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010102:	81a3      	strh	r3, [r4, #12]
 8010104:	6126      	str	r6, [r4, #16]
 8010106:	6165      	str	r5, [r4, #20]
 8010108:	444e      	add	r6, r9
 801010a:	eba5 0509 	sub.w	r5, r5, r9
 801010e:	6026      	str	r6, [r4, #0]
 8010110:	60a5      	str	r5, [r4, #8]
 8010112:	463e      	mov	r6, r7
 8010114:	42be      	cmp	r6, r7
 8010116:	d900      	bls.n	801011a <__ssputs_r+0x86>
 8010118:	463e      	mov	r6, r7
 801011a:	6820      	ldr	r0, [r4, #0]
 801011c:	4632      	mov	r2, r6
 801011e:	4641      	mov	r1, r8
 8010120:	f000 fab8 	bl	8010694 <memmove>
 8010124:	68a3      	ldr	r3, [r4, #8]
 8010126:	1b9b      	subs	r3, r3, r6
 8010128:	60a3      	str	r3, [r4, #8]
 801012a:	6823      	ldr	r3, [r4, #0]
 801012c:	4433      	add	r3, r6
 801012e:	6023      	str	r3, [r4, #0]
 8010130:	2000      	movs	r0, #0
 8010132:	e7db      	b.n	80100ec <__ssputs_r+0x58>
 8010134:	462a      	mov	r2, r5
 8010136:	f000 fac7 	bl	80106c8 <_realloc_r>
 801013a:	4606      	mov	r6, r0
 801013c:	2800      	cmp	r0, #0
 801013e:	d1e1      	bne.n	8010104 <__ssputs_r+0x70>
 8010140:	6921      	ldr	r1, [r4, #16]
 8010142:	4650      	mov	r0, sl
 8010144:	f7ff fe8a 	bl	800fe5c <_free_r>
 8010148:	e7c7      	b.n	80100da <__ssputs_r+0x46>
	...

0801014c <_svfiprintf_r>:
 801014c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010150:	4698      	mov	r8, r3
 8010152:	898b      	ldrh	r3, [r1, #12]
 8010154:	061b      	lsls	r3, r3, #24
 8010156:	b09d      	sub	sp, #116	; 0x74
 8010158:	4607      	mov	r7, r0
 801015a:	460d      	mov	r5, r1
 801015c:	4614      	mov	r4, r2
 801015e:	d50e      	bpl.n	801017e <_svfiprintf_r+0x32>
 8010160:	690b      	ldr	r3, [r1, #16]
 8010162:	b963      	cbnz	r3, 801017e <_svfiprintf_r+0x32>
 8010164:	2140      	movs	r1, #64	; 0x40
 8010166:	f7ff fee5 	bl	800ff34 <_malloc_r>
 801016a:	6028      	str	r0, [r5, #0]
 801016c:	6128      	str	r0, [r5, #16]
 801016e:	b920      	cbnz	r0, 801017a <_svfiprintf_r+0x2e>
 8010170:	230c      	movs	r3, #12
 8010172:	603b      	str	r3, [r7, #0]
 8010174:	f04f 30ff 	mov.w	r0, #4294967295
 8010178:	e0d1      	b.n	801031e <_svfiprintf_r+0x1d2>
 801017a:	2340      	movs	r3, #64	; 0x40
 801017c:	616b      	str	r3, [r5, #20]
 801017e:	2300      	movs	r3, #0
 8010180:	9309      	str	r3, [sp, #36]	; 0x24
 8010182:	2320      	movs	r3, #32
 8010184:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010188:	f8cd 800c 	str.w	r8, [sp, #12]
 801018c:	2330      	movs	r3, #48	; 0x30
 801018e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010338 <_svfiprintf_r+0x1ec>
 8010192:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010196:	f04f 0901 	mov.w	r9, #1
 801019a:	4623      	mov	r3, r4
 801019c:	469a      	mov	sl, r3
 801019e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101a2:	b10a      	cbz	r2, 80101a8 <_svfiprintf_r+0x5c>
 80101a4:	2a25      	cmp	r2, #37	; 0x25
 80101a6:	d1f9      	bne.n	801019c <_svfiprintf_r+0x50>
 80101a8:	ebba 0b04 	subs.w	fp, sl, r4
 80101ac:	d00b      	beq.n	80101c6 <_svfiprintf_r+0x7a>
 80101ae:	465b      	mov	r3, fp
 80101b0:	4622      	mov	r2, r4
 80101b2:	4629      	mov	r1, r5
 80101b4:	4638      	mov	r0, r7
 80101b6:	f7ff ff6d 	bl	8010094 <__ssputs_r>
 80101ba:	3001      	adds	r0, #1
 80101bc:	f000 80aa 	beq.w	8010314 <_svfiprintf_r+0x1c8>
 80101c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101c2:	445a      	add	r2, fp
 80101c4:	9209      	str	r2, [sp, #36]	; 0x24
 80101c6:	f89a 3000 	ldrb.w	r3, [sl]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f000 80a2 	beq.w	8010314 <_svfiprintf_r+0x1c8>
 80101d0:	2300      	movs	r3, #0
 80101d2:	f04f 32ff 	mov.w	r2, #4294967295
 80101d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101da:	f10a 0a01 	add.w	sl, sl, #1
 80101de:	9304      	str	r3, [sp, #16]
 80101e0:	9307      	str	r3, [sp, #28]
 80101e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101e6:	931a      	str	r3, [sp, #104]	; 0x68
 80101e8:	4654      	mov	r4, sl
 80101ea:	2205      	movs	r2, #5
 80101ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f0:	4851      	ldr	r0, [pc, #324]	; (8010338 <_svfiprintf_r+0x1ec>)
 80101f2:	f7f0 f875 	bl	80002e0 <memchr>
 80101f6:	9a04      	ldr	r2, [sp, #16]
 80101f8:	b9d8      	cbnz	r0, 8010232 <_svfiprintf_r+0xe6>
 80101fa:	06d0      	lsls	r0, r2, #27
 80101fc:	bf44      	itt	mi
 80101fe:	2320      	movmi	r3, #32
 8010200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010204:	0711      	lsls	r1, r2, #28
 8010206:	bf44      	itt	mi
 8010208:	232b      	movmi	r3, #43	; 0x2b
 801020a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801020e:	f89a 3000 	ldrb.w	r3, [sl]
 8010212:	2b2a      	cmp	r3, #42	; 0x2a
 8010214:	d015      	beq.n	8010242 <_svfiprintf_r+0xf6>
 8010216:	9a07      	ldr	r2, [sp, #28]
 8010218:	4654      	mov	r4, sl
 801021a:	2000      	movs	r0, #0
 801021c:	f04f 0c0a 	mov.w	ip, #10
 8010220:	4621      	mov	r1, r4
 8010222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010226:	3b30      	subs	r3, #48	; 0x30
 8010228:	2b09      	cmp	r3, #9
 801022a:	d94e      	bls.n	80102ca <_svfiprintf_r+0x17e>
 801022c:	b1b0      	cbz	r0, 801025c <_svfiprintf_r+0x110>
 801022e:	9207      	str	r2, [sp, #28]
 8010230:	e014      	b.n	801025c <_svfiprintf_r+0x110>
 8010232:	eba0 0308 	sub.w	r3, r0, r8
 8010236:	fa09 f303 	lsl.w	r3, r9, r3
 801023a:	4313      	orrs	r3, r2
 801023c:	9304      	str	r3, [sp, #16]
 801023e:	46a2      	mov	sl, r4
 8010240:	e7d2      	b.n	80101e8 <_svfiprintf_r+0x9c>
 8010242:	9b03      	ldr	r3, [sp, #12]
 8010244:	1d19      	adds	r1, r3, #4
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	9103      	str	r1, [sp, #12]
 801024a:	2b00      	cmp	r3, #0
 801024c:	bfbb      	ittet	lt
 801024e:	425b      	neglt	r3, r3
 8010250:	f042 0202 	orrlt.w	r2, r2, #2
 8010254:	9307      	strge	r3, [sp, #28]
 8010256:	9307      	strlt	r3, [sp, #28]
 8010258:	bfb8      	it	lt
 801025a:	9204      	strlt	r2, [sp, #16]
 801025c:	7823      	ldrb	r3, [r4, #0]
 801025e:	2b2e      	cmp	r3, #46	; 0x2e
 8010260:	d10c      	bne.n	801027c <_svfiprintf_r+0x130>
 8010262:	7863      	ldrb	r3, [r4, #1]
 8010264:	2b2a      	cmp	r3, #42	; 0x2a
 8010266:	d135      	bne.n	80102d4 <_svfiprintf_r+0x188>
 8010268:	9b03      	ldr	r3, [sp, #12]
 801026a:	1d1a      	adds	r2, r3, #4
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	9203      	str	r2, [sp, #12]
 8010270:	2b00      	cmp	r3, #0
 8010272:	bfb8      	it	lt
 8010274:	f04f 33ff 	movlt.w	r3, #4294967295
 8010278:	3402      	adds	r4, #2
 801027a:	9305      	str	r3, [sp, #20]
 801027c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010348 <_svfiprintf_r+0x1fc>
 8010280:	7821      	ldrb	r1, [r4, #0]
 8010282:	2203      	movs	r2, #3
 8010284:	4650      	mov	r0, sl
 8010286:	f7f0 f82b 	bl	80002e0 <memchr>
 801028a:	b140      	cbz	r0, 801029e <_svfiprintf_r+0x152>
 801028c:	2340      	movs	r3, #64	; 0x40
 801028e:	eba0 000a 	sub.w	r0, r0, sl
 8010292:	fa03 f000 	lsl.w	r0, r3, r0
 8010296:	9b04      	ldr	r3, [sp, #16]
 8010298:	4303      	orrs	r3, r0
 801029a:	3401      	adds	r4, #1
 801029c:	9304      	str	r3, [sp, #16]
 801029e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102a2:	4826      	ldr	r0, [pc, #152]	; (801033c <_svfiprintf_r+0x1f0>)
 80102a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102a8:	2206      	movs	r2, #6
 80102aa:	f7f0 f819 	bl	80002e0 <memchr>
 80102ae:	2800      	cmp	r0, #0
 80102b0:	d038      	beq.n	8010324 <_svfiprintf_r+0x1d8>
 80102b2:	4b23      	ldr	r3, [pc, #140]	; (8010340 <_svfiprintf_r+0x1f4>)
 80102b4:	bb1b      	cbnz	r3, 80102fe <_svfiprintf_r+0x1b2>
 80102b6:	9b03      	ldr	r3, [sp, #12]
 80102b8:	3307      	adds	r3, #7
 80102ba:	f023 0307 	bic.w	r3, r3, #7
 80102be:	3308      	adds	r3, #8
 80102c0:	9303      	str	r3, [sp, #12]
 80102c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102c4:	4433      	add	r3, r6
 80102c6:	9309      	str	r3, [sp, #36]	; 0x24
 80102c8:	e767      	b.n	801019a <_svfiprintf_r+0x4e>
 80102ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80102ce:	460c      	mov	r4, r1
 80102d0:	2001      	movs	r0, #1
 80102d2:	e7a5      	b.n	8010220 <_svfiprintf_r+0xd4>
 80102d4:	2300      	movs	r3, #0
 80102d6:	3401      	adds	r4, #1
 80102d8:	9305      	str	r3, [sp, #20]
 80102da:	4619      	mov	r1, r3
 80102dc:	f04f 0c0a 	mov.w	ip, #10
 80102e0:	4620      	mov	r0, r4
 80102e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102e6:	3a30      	subs	r2, #48	; 0x30
 80102e8:	2a09      	cmp	r2, #9
 80102ea:	d903      	bls.n	80102f4 <_svfiprintf_r+0x1a8>
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d0c5      	beq.n	801027c <_svfiprintf_r+0x130>
 80102f0:	9105      	str	r1, [sp, #20]
 80102f2:	e7c3      	b.n	801027c <_svfiprintf_r+0x130>
 80102f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80102f8:	4604      	mov	r4, r0
 80102fa:	2301      	movs	r3, #1
 80102fc:	e7f0      	b.n	80102e0 <_svfiprintf_r+0x194>
 80102fe:	ab03      	add	r3, sp, #12
 8010300:	9300      	str	r3, [sp, #0]
 8010302:	462a      	mov	r2, r5
 8010304:	4b0f      	ldr	r3, [pc, #60]	; (8010344 <_svfiprintf_r+0x1f8>)
 8010306:	a904      	add	r1, sp, #16
 8010308:	4638      	mov	r0, r7
 801030a:	f3af 8000 	nop.w
 801030e:	1c42      	adds	r2, r0, #1
 8010310:	4606      	mov	r6, r0
 8010312:	d1d6      	bne.n	80102c2 <_svfiprintf_r+0x176>
 8010314:	89ab      	ldrh	r3, [r5, #12]
 8010316:	065b      	lsls	r3, r3, #25
 8010318:	f53f af2c 	bmi.w	8010174 <_svfiprintf_r+0x28>
 801031c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801031e:	b01d      	add	sp, #116	; 0x74
 8010320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010324:	ab03      	add	r3, sp, #12
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	462a      	mov	r2, r5
 801032a:	4b06      	ldr	r3, [pc, #24]	; (8010344 <_svfiprintf_r+0x1f8>)
 801032c:	a904      	add	r1, sp, #16
 801032e:	4638      	mov	r0, r7
 8010330:	f000 f87a 	bl	8010428 <_printf_i>
 8010334:	e7eb      	b.n	801030e <_svfiprintf_r+0x1c2>
 8010336:	bf00      	nop
 8010338:	080120e4 	.word	0x080120e4
 801033c:	080120ee 	.word	0x080120ee
 8010340:	00000000 	.word	0x00000000
 8010344:	08010095 	.word	0x08010095
 8010348:	080120ea 	.word	0x080120ea

0801034c <_printf_common>:
 801034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010350:	4616      	mov	r6, r2
 8010352:	4699      	mov	r9, r3
 8010354:	688a      	ldr	r2, [r1, #8]
 8010356:	690b      	ldr	r3, [r1, #16]
 8010358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801035c:	4293      	cmp	r3, r2
 801035e:	bfb8      	it	lt
 8010360:	4613      	movlt	r3, r2
 8010362:	6033      	str	r3, [r6, #0]
 8010364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010368:	4607      	mov	r7, r0
 801036a:	460c      	mov	r4, r1
 801036c:	b10a      	cbz	r2, 8010372 <_printf_common+0x26>
 801036e:	3301      	adds	r3, #1
 8010370:	6033      	str	r3, [r6, #0]
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	0699      	lsls	r1, r3, #26
 8010376:	bf42      	ittt	mi
 8010378:	6833      	ldrmi	r3, [r6, #0]
 801037a:	3302      	addmi	r3, #2
 801037c:	6033      	strmi	r3, [r6, #0]
 801037e:	6825      	ldr	r5, [r4, #0]
 8010380:	f015 0506 	ands.w	r5, r5, #6
 8010384:	d106      	bne.n	8010394 <_printf_common+0x48>
 8010386:	f104 0a19 	add.w	sl, r4, #25
 801038a:	68e3      	ldr	r3, [r4, #12]
 801038c:	6832      	ldr	r2, [r6, #0]
 801038e:	1a9b      	subs	r3, r3, r2
 8010390:	42ab      	cmp	r3, r5
 8010392:	dc26      	bgt.n	80103e2 <_printf_common+0x96>
 8010394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010398:	1e13      	subs	r3, r2, #0
 801039a:	6822      	ldr	r2, [r4, #0]
 801039c:	bf18      	it	ne
 801039e:	2301      	movne	r3, #1
 80103a0:	0692      	lsls	r2, r2, #26
 80103a2:	d42b      	bmi.n	80103fc <_printf_common+0xb0>
 80103a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80103a8:	4649      	mov	r1, r9
 80103aa:	4638      	mov	r0, r7
 80103ac:	47c0      	blx	r8
 80103ae:	3001      	adds	r0, #1
 80103b0:	d01e      	beq.n	80103f0 <_printf_common+0xa4>
 80103b2:	6823      	ldr	r3, [r4, #0]
 80103b4:	68e5      	ldr	r5, [r4, #12]
 80103b6:	6832      	ldr	r2, [r6, #0]
 80103b8:	f003 0306 	and.w	r3, r3, #6
 80103bc:	2b04      	cmp	r3, #4
 80103be:	bf08      	it	eq
 80103c0:	1aad      	subeq	r5, r5, r2
 80103c2:	68a3      	ldr	r3, [r4, #8]
 80103c4:	6922      	ldr	r2, [r4, #16]
 80103c6:	bf0c      	ite	eq
 80103c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103cc:	2500      	movne	r5, #0
 80103ce:	4293      	cmp	r3, r2
 80103d0:	bfc4      	itt	gt
 80103d2:	1a9b      	subgt	r3, r3, r2
 80103d4:	18ed      	addgt	r5, r5, r3
 80103d6:	2600      	movs	r6, #0
 80103d8:	341a      	adds	r4, #26
 80103da:	42b5      	cmp	r5, r6
 80103dc:	d11a      	bne.n	8010414 <_printf_common+0xc8>
 80103de:	2000      	movs	r0, #0
 80103e0:	e008      	b.n	80103f4 <_printf_common+0xa8>
 80103e2:	2301      	movs	r3, #1
 80103e4:	4652      	mov	r2, sl
 80103e6:	4649      	mov	r1, r9
 80103e8:	4638      	mov	r0, r7
 80103ea:	47c0      	blx	r8
 80103ec:	3001      	adds	r0, #1
 80103ee:	d103      	bne.n	80103f8 <_printf_common+0xac>
 80103f0:	f04f 30ff 	mov.w	r0, #4294967295
 80103f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103f8:	3501      	adds	r5, #1
 80103fa:	e7c6      	b.n	801038a <_printf_common+0x3e>
 80103fc:	18e1      	adds	r1, r4, r3
 80103fe:	1c5a      	adds	r2, r3, #1
 8010400:	2030      	movs	r0, #48	; 0x30
 8010402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010406:	4422      	add	r2, r4
 8010408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801040c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010410:	3302      	adds	r3, #2
 8010412:	e7c7      	b.n	80103a4 <_printf_common+0x58>
 8010414:	2301      	movs	r3, #1
 8010416:	4622      	mov	r2, r4
 8010418:	4649      	mov	r1, r9
 801041a:	4638      	mov	r0, r7
 801041c:	47c0      	blx	r8
 801041e:	3001      	adds	r0, #1
 8010420:	d0e6      	beq.n	80103f0 <_printf_common+0xa4>
 8010422:	3601      	adds	r6, #1
 8010424:	e7d9      	b.n	80103da <_printf_common+0x8e>
	...

08010428 <_printf_i>:
 8010428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801042c:	7e0f      	ldrb	r7, [r1, #24]
 801042e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010430:	2f78      	cmp	r7, #120	; 0x78
 8010432:	4691      	mov	r9, r2
 8010434:	4680      	mov	r8, r0
 8010436:	460c      	mov	r4, r1
 8010438:	469a      	mov	sl, r3
 801043a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801043e:	d807      	bhi.n	8010450 <_printf_i+0x28>
 8010440:	2f62      	cmp	r7, #98	; 0x62
 8010442:	d80a      	bhi.n	801045a <_printf_i+0x32>
 8010444:	2f00      	cmp	r7, #0
 8010446:	f000 80d8 	beq.w	80105fa <_printf_i+0x1d2>
 801044a:	2f58      	cmp	r7, #88	; 0x58
 801044c:	f000 80a3 	beq.w	8010596 <_printf_i+0x16e>
 8010450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010458:	e03a      	b.n	80104d0 <_printf_i+0xa8>
 801045a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801045e:	2b15      	cmp	r3, #21
 8010460:	d8f6      	bhi.n	8010450 <_printf_i+0x28>
 8010462:	a101      	add	r1, pc, #4	; (adr r1, 8010468 <_printf_i+0x40>)
 8010464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010468:	080104c1 	.word	0x080104c1
 801046c:	080104d5 	.word	0x080104d5
 8010470:	08010451 	.word	0x08010451
 8010474:	08010451 	.word	0x08010451
 8010478:	08010451 	.word	0x08010451
 801047c:	08010451 	.word	0x08010451
 8010480:	080104d5 	.word	0x080104d5
 8010484:	08010451 	.word	0x08010451
 8010488:	08010451 	.word	0x08010451
 801048c:	08010451 	.word	0x08010451
 8010490:	08010451 	.word	0x08010451
 8010494:	080105e1 	.word	0x080105e1
 8010498:	08010505 	.word	0x08010505
 801049c:	080105c3 	.word	0x080105c3
 80104a0:	08010451 	.word	0x08010451
 80104a4:	08010451 	.word	0x08010451
 80104a8:	08010603 	.word	0x08010603
 80104ac:	08010451 	.word	0x08010451
 80104b0:	08010505 	.word	0x08010505
 80104b4:	08010451 	.word	0x08010451
 80104b8:	08010451 	.word	0x08010451
 80104bc:	080105cb 	.word	0x080105cb
 80104c0:	682b      	ldr	r3, [r5, #0]
 80104c2:	1d1a      	adds	r2, r3, #4
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	602a      	str	r2, [r5, #0]
 80104c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104d0:	2301      	movs	r3, #1
 80104d2:	e0a3      	b.n	801061c <_printf_i+0x1f4>
 80104d4:	6820      	ldr	r0, [r4, #0]
 80104d6:	6829      	ldr	r1, [r5, #0]
 80104d8:	0606      	lsls	r6, r0, #24
 80104da:	f101 0304 	add.w	r3, r1, #4
 80104de:	d50a      	bpl.n	80104f6 <_printf_i+0xce>
 80104e0:	680e      	ldr	r6, [r1, #0]
 80104e2:	602b      	str	r3, [r5, #0]
 80104e4:	2e00      	cmp	r6, #0
 80104e6:	da03      	bge.n	80104f0 <_printf_i+0xc8>
 80104e8:	232d      	movs	r3, #45	; 0x2d
 80104ea:	4276      	negs	r6, r6
 80104ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104f0:	485e      	ldr	r0, [pc, #376]	; (801066c <_printf_i+0x244>)
 80104f2:	230a      	movs	r3, #10
 80104f4:	e019      	b.n	801052a <_printf_i+0x102>
 80104f6:	680e      	ldr	r6, [r1, #0]
 80104f8:	602b      	str	r3, [r5, #0]
 80104fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80104fe:	bf18      	it	ne
 8010500:	b236      	sxthne	r6, r6
 8010502:	e7ef      	b.n	80104e4 <_printf_i+0xbc>
 8010504:	682b      	ldr	r3, [r5, #0]
 8010506:	6820      	ldr	r0, [r4, #0]
 8010508:	1d19      	adds	r1, r3, #4
 801050a:	6029      	str	r1, [r5, #0]
 801050c:	0601      	lsls	r1, r0, #24
 801050e:	d501      	bpl.n	8010514 <_printf_i+0xec>
 8010510:	681e      	ldr	r6, [r3, #0]
 8010512:	e002      	b.n	801051a <_printf_i+0xf2>
 8010514:	0646      	lsls	r6, r0, #25
 8010516:	d5fb      	bpl.n	8010510 <_printf_i+0xe8>
 8010518:	881e      	ldrh	r6, [r3, #0]
 801051a:	4854      	ldr	r0, [pc, #336]	; (801066c <_printf_i+0x244>)
 801051c:	2f6f      	cmp	r7, #111	; 0x6f
 801051e:	bf0c      	ite	eq
 8010520:	2308      	moveq	r3, #8
 8010522:	230a      	movne	r3, #10
 8010524:	2100      	movs	r1, #0
 8010526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801052a:	6865      	ldr	r5, [r4, #4]
 801052c:	60a5      	str	r5, [r4, #8]
 801052e:	2d00      	cmp	r5, #0
 8010530:	bfa2      	ittt	ge
 8010532:	6821      	ldrge	r1, [r4, #0]
 8010534:	f021 0104 	bicge.w	r1, r1, #4
 8010538:	6021      	strge	r1, [r4, #0]
 801053a:	b90e      	cbnz	r6, 8010540 <_printf_i+0x118>
 801053c:	2d00      	cmp	r5, #0
 801053e:	d04d      	beq.n	80105dc <_printf_i+0x1b4>
 8010540:	4615      	mov	r5, r2
 8010542:	fbb6 f1f3 	udiv	r1, r6, r3
 8010546:	fb03 6711 	mls	r7, r3, r1, r6
 801054a:	5dc7      	ldrb	r7, [r0, r7]
 801054c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010550:	4637      	mov	r7, r6
 8010552:	42bb      	cmp	r3, r7
 8010554:	460e      	mov	r6, r1
 8010556:	d9f4      	bls.n	8010542 <_printf_i+0x11a>
 8010558:	2b08      	cmp	r3, #8
 801055a:	d10b      	bne.n	8010574 <_printf_i+0x14c>
 801055c:	6823      	ldr	r3, [r4, #0]
 801055e:	07de      	lsls	r6, r3, #31
 8010560:	d508      	bpl.n	8010574 <_printf_i+0x14c>
 8010562:	6923      	ldr	r3, [r4, #16]
 8010564:	6861      	ldr	r1, [r4, #4]
 8010566:	4299      	cmp	r1, r3
 8010568:	bfde      	ittt	le
 801056a:	2330      	movle	r3, #48	; 0x30
 801056c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010570:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010574:	1b52      	subs	r2, r2, r5
 8010576:	6122      	str	r2, [r4, #16]
 8010578:	f8cd a000 	str.w	sl, [sp]
 801057c:	464b      	mov	r3, r9
 801057e:	aa03      	add	r2, sp, #12
 8010580:	4621      	mov	r1, r4
 8010582:	4640      	mov	r0, r8
 8010584:	f7ff fee2 	bl	801034c <_printf_common>
 8010588:	3001      	adds	r0, #1
 801058a:	d14c      	bne.n	8010626 <_printf_i+0x1fe>
 801058c:	f04f 30ff 	mov.w	r0, #4294967295
 8010590:	b004      	add	sp, #16
 8010592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010596:	4835      	ldr	r0, [pc, #212]	; (801066c <_printf_i+0x244>)
 8010598:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801059c:	6829      	ldr	r1, [r5, #0]
 801059e:	6823      	ldr	r3, [r4, #0]
 80105a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80105a4:	6029      	str	r1, [r5, #0]
 80105a6:	061d      	lsls	r5, r3, #24
 80105a8:	d514      	bpl.n	80105d4 <_printf_i+0x1ac>
 80105aa:	07df      	lsls	r7, r3, #31
 80105ac:	bf44      	itt	mi
 80105ae:	f043 0320 	orrmi.w	r3, r3, #32
 80105b2:	6023      	strmi	r3, [r4, #0]
 80105b4:	b91e      	cbnz	r6, 80105be <_printf_i+0x196>
 80105b6:	6823      	ldr	r3, [r4, #0]
 80105b8:	f023 0320 	bic.w	r3, r3, #32
 80105bc:	6023      	str	r3, [r4, #0]
 80105be:	2310      	movs	r3, #16
 80105c0:	e7b0      	b.n	8010524 <_printf_i+0xfc>
 80105c2:	6823      	ldr	r3, [r4, #0]
 80105c4:	f043 0320 	orr.w	r3, r3, #32
 80105c8:	6023      	str	r3, [r4, #0]
 80105ca:	2378      	movs	r3, #120	; 0x78
 80105cc:	4828      	ldr	r0, [pc, #160]	; (8010670 <_printf_i+0x248>)
 80105ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105d2:	e7e3      	b.n	801059c <_printf_i+0x174>
 80105d4:	0659      	lsls	r1, r3, #25
 80105d6:	bf48      	it	mi
 80105d8:	b2b6      	uxthmi	r6, r6
 80105da:	e7e6      	b.n	80105aa <_printf_i+0x182>
 80105dc:	4615      	mov	r5, r2
 80105de:	e7bb      	b.n	8010558 <_printf_i+0x130>
 80105e0:	682b      	ldr	r3, [r5, #0]
 80105e2:	6826      	ldr	r6, [r4, #0]
 80105e4:	6961      	ldr	r1, [r4, #20]
 80105e6:	1d18      	adds	r0, r3, #4
 80105e8:	6028      	str	r0, [r5, #0]
 80105ea:	0635      	lsls	r5, r6, #24
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	d501      	bpl.n	80105f4 <_printf_i+0x1cc>
 80105f0:	6019      	str	r1, [r3, #0]
 80105f2:	e002      	b.n	80105fa <_printf_i+0x1d2>
 80105f4:	0670      	lsls	r0, r6, #25
 80105f6:	d5fb      	bpl.n	80105f0 <_printf_i+0x1c8>
 80105f8:	8019      	strh	r1, [r3, #0]
 80105fa:	2300      	movs	r3, #0
 80105fc:	6123      	str	r3, [r4, #16]
 80105fe:	4615      	mov	r5, r2
 8010600:	e7ba      	b.n	8010578 <_printf_i+0x150>
 8010602:	682b      	ldr	r3, [r5, #0]
 8010604:	1d1a      	adds	r2, r3, #4
 8010606:	602a      	str	r2, [r5, #0]
 8010608:	681d      	ldr	r5, [r3, #0]
 801060a:	6862      	ldr	r2, [r4, #4]
 801060c:	2100      	movs	r1, #0
 801060e:	4628      	mov	r0, r5
 8010610:	f7ef fe66 	bl	80002e0 <memchr>
 8010614:	b108      	cbz	r0, 801061a <_printf_i+0x1f2>
 8010616:	1b40      	subs	r0, r0, r5
 8010618:	6060      	str	r0, [r4, #4]
 801061a:	6863      	ldr	r3, [r4, #4]
 801061c:	6123      	str	r3, [r4, #16]
 801061e:	2300      	movs	r3, #0
 8010620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010624:	e7a8      	b.n	8010578 <_printf_i+0x150>
 8010626:	6923      	ldr	r3, [r4, #16]
 8010628:	462a      	mov	r2, r5
 801062a:	4649      	mov	r1, r9
 801062c:	4640      	mov	r0, r8
 801062e:	47d0      	blx	sl
 8010630:	3001      	adds	r0, #1
 8010632:	d0ab      	beq.n	801058c <_printf_i+0x164>
 8010634:	6823      	ldr	r3, [r4, #0]
 8010636:	079b      	lsls	r3, r3, #30
 8010638:	d413      	bmi.n	8010662 <_printf_i+0x23a>
 801063a:	68e0      	ldr	r0, [r4, #12]
 801063c:	9b03      	ldr	r3, [sp, #12]
 801063e:	4298      	cmp	r0, r3
 8010640:	bfb8      	it	lt
 8010642:	4618      	movlt	r0, r3
 8010644:	e7a4      	b.n	8010590 <_printf_i+0x168>
 8010646:	2301      	movs	r3, #1
 8010648:	4632      	mov	r2, r6
 801064a:	4649      	mov	r1, r9
 801064c:	4640      	mov	r0, r8
 801064e:	47d0      	blx	sl
 8010650:	3001      	adds	r0, #1
 8010652:	d09b      	beq.n	801058c <_printf_i+0x164>
 8010654:	3501      	adds	r5, #1
 8010656:	68e3      	ldr	r3, [r4, #12]
 8010658:	9903      	ldr	r1, [sp, #12]
 801065a:	1a5b      	subs	r3, r3, r1
 801065c:	42ab      	cmp	r3, r5
 801065e:	dcf2      	bgt.n	8010646 <_printf_i+0x21e>
 8010660:	e7eb      	b.n	801063a <_printf_i+0x212>
 8010662:	2500      	movs	r5, #0
 8010664:	f104 0619 	add.w	r6, r4, #25
 8010668:	e7f5      	b.n	8010656 <_printf_i+0x22e>
 801066a:	bf00      	nop
 801066c:	080120f5 	.word	0x080120f5
 8010670:	08012106 	.word	0x08012106

08010674 <__retarget_lock_acquire_recursive>:
 8010674:	4770      	bx	lr

08010676 <__retarget_lock_release_recursive>:
 8010676:	4770      	bx	lr

08010678 <memcpy>:
 8010678:	440a      	add	r2, r1
 801067a:	4291      	cmp	r1, r2
 801067c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010680:	d100      	bne.n	8010684 <memcpy+0xc>
 8010682:	4770      	bx	lr
 8010684:	b510      	push	{r4, lr}
 8010686:	f811 4b01 	ldrb.w	r4, [r1], #1
 801068a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801068e:	4291      	cmp	r1, r2
 8010690:	d1f9      	bne.n	8010686 <memcpy+0xe>
 8010692:	bd10      	pop	{r4, pc}

08010694 <memmove>:
 8010694:	4288      	cmp	r0, r1
 8010696:	b510      	push	{r4, lr}
 8010698:	eb01 0402 	add.w	r4, r1, r2
 801069c:	d902      	bls.n	80106a4 <memmove+0x10>
 801069e:	4284      	cmp	r4, r0
 80106a0:	4623      	mov	r3, r4
 80106a2:	d807      	bhi.n	80106b4 <memmove+0x20>
 80106a4:	1e43      	subs	r3, r0, #1
 80106a6:	42a1      	cmp	r1, r4
 80106a8:	d008      	beq.n	80106bc <memmove+0x28>
 80106aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106b2:	e7f8      	b.n	80106a6 <memmove+0x12>
 80106b4:	4402      	add	r2, r0
 80106b6:	4601      	mov	r1, r0
 80106b8:	428a      	cmp	r2, r1
 80106ba:	d100      	bne.n	80106be <memmove+0x2a>
 80106bc:	bd10      	pop	{r4, pc}
 80106be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80106c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106c6:	e7f7      	b.n	80106b8 <memmove+0x24>

080106c8 <_realloc_r>:
 80106c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106cc:	4680      	mov	r8, r0
 80106ce:	4614      	mov	r4, r2
 80106d0:	460e      	mov	r6, r1
 80106d2:	b921      	cbnz	r1, 80106de <_realloc_r+0x16>
 80106d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106d8:	4611      	mov	r1, r2
 80106da:	f7ff bc2b 	b.w	800ff34 <_malloc_r>
 80106de:	b92a      	cbnz	r2, 80106ec <_realloc_r+0x24>
 80106e0:	f7ff fbbc 	bl	800fe5c <_free_r>
 80106e4:	4625      	mov	r5, r4
 80106e6:	4628      	mov	r0, r5
 80106e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ec:	f000 f81b 	bl	8010726 <_malloc_usable_size_r>
 80106f0:	4284      	cmp	r4, r0
 80106f2:	4607      	mov	r7, r0
 80106f4:	d802      	bhi.n	80106fc <_realloc_r+0x34>
 80106f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80106fa:	d812      	bhi.n	8010722 <_realloc_r+0x5a>
 80106fc:	4621      	mov	r1, r4
 80106fe:	4640      	mov	r0, r8
 8010700:	f7ff fc18 	bl	800ff34 <_malloc_r>
 8010704:	4605      	mov	r5, r0
 8010706:	2800      	cmp	r0, #0
 8010708:	d0ed      	beq.n	80106e6 <_realloc_r+0x1e>
 801070a:	42bc      	cmp	r4, r7
 801070c:	4622      	mov	r2, r4
 801070e:	4631      	mov	r1, r6
 8010710:	bf28      	it	cs
 8010712:	463a      	movcs	r2, r7
 8010714:	f7ff ffb0 	bl	8010678 <memcpy>
 8010718:	4631      	mov	r1, r6
 801071a:	4640      	mov	r0, r8
 801071c:	f7ff fb9e 	bl	800fe5c <_free_r>
 8010720:	e7e1      	b.n	80106e6 <_realloc_r+0x1e>
 8010722:	4635      	mov	r5, r6
 8010724:	e7df      	b.n	80106e6 <_realloc_r+0x1e>

08010726 <_malloc_usable_size_r>:
 8010726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801072a:	1f18      	subs	r0, r3, #4
 801072c:	2b00      	cmp	r3, #0
 801072e:	bfbc      	itt	lt
 8010730:	580b      	ldrlt	r3, [r1, r0]
 8010732:	18c0      	addlt	r0, r0, r3
 8010734:	4770      	bx	lr
	...

08010738 <_init>:
 8010738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073a:	bf00      	nop
 801073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801073e:	bc08      	pop	{r3}
 8010740:	469e      	mov	lr, r3
 8010742:	4770      	bx	lr

08010744 <_fini>:
 8010744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010746:	bf00      	nop
 8010748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801074a:	bc08      	pop	{r3}
 801074c:	469e      	mov	lr, r3
 801074e:	4770      	bx	lr
