
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab08  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800ada0  0800ada0  0001ada0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae58  0800ae58  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae58  0800ae58  0001ae58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae60  0800ae60  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae60  0800ae60  0001ae60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae64  0800ae64  0001ae64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800ae68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800ae78  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800aed8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000c6c  240000d0  0800af38  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000d3c  0800af38  00020d3c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f774  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003510  00000000  00000000  0003f872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001430  00000000  00000000  00042d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001370  00000000  00000000  000441b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c1ba  00000000  00000000  00045528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bb33  00000000  00000000  000816e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186e3c  00000000  00000000  0009d215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00224051  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000055ec  00000000  00000000  002240a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ad88 	.word	0x0800ad88

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800ad88 	.word	0x0800ad88

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	68da      	ldr	r2, [r3, #12]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	789a      	ldrb	r2, [r3, #2]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	785a      	ldrb	r2, [r3, #1]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	78da      	ldrb	r2, [r3, #3]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791a      	ldrb	r2, [r3, #4]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	795a      	ldrb	r2, [r3, #5]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	799a      	ldrb	r2, [r3, #6]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	79da      	ldrb	r2, [r3, #7]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7a1a      	ldrb	r2, [r3, #8]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a5a      	ldrb	r2, [r3, #9]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	725a      	strb	r2, [r3, #9]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ffb8 	bl	80005dc <YUGIOH_card_copy>
}
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3318      	adds	r3, #24
 8000680:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000682:	2300      	movs	r3, #0
 8000684:	72fb      	strb	r3, [r7, #11]
 8000686:	e008      	b.n	800069a <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f7ff ffde 	bl	800064a <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3310      	adds	r3, #16
 8000692:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	3301      	adds	r3, #1
 8000698:	72fb      	strb	r3, [r7, #11]
 800069a:	7afb      	ldrb	r3, [r7, #11]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d9f3      	bls.n	8000688 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3328      	adds	r3, #40	; 0x28
 80006bc:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	2358      	movs	r3, #88	; 0x58
 80006c6:	fb02 f303 	mul.w	r3, r2, r3
 80006ca:	3328      	adds	r3, #40	; 0x28
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	3318      	adds	r3, #24
 80006d6:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80006de:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3308      	adds	r3, #8
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	78db      	ldrb	r3, [r3, #3]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d17f      	bne.n	80007f4 <Player_Reading_Card+0x148>
	{

		for (int i  = 0;  i < 6; ++i) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
 80006f8:	e00f      	b.n	800071a <Player_Reading_Card+0x6e>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	429a      	cmp	r2, r3
 8000704:	d103      	bne.n	800070e <Player_Reading_Card+0x62>
				flag_played = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 800070c:	e008      	b.n	8000720 <Player_Reading_Card+0x74>
			}
			ptrYugiohCard_played++;
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	3310      	adds	r3, #16
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	3301      	adds	r3, #1
 8000718:	61fb      	str	r3, [r7, #28]
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	2b05      	cmp	r3, #5
 800071e:	ddec      	ble.n	80006fa <Player_Reading_Card+0x4e>
		}

		if (player->turnSignature == first && flag_played == 0) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000726:	2b00      	cmp	r3, #0
 8000728:	d12f      	bne.n	800078a <Player_Reading_Card+0xde>
 800072a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800072e:	2b00      	cmp	r3, #0
 8000730:	d12b      	bne.n	800078a <Player_Reading_Card+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	799b      	ldrb	r3, [r3, #6]
 8000736:	2b05      	cmp	r3, #5
 8000738:	d85c      	bhi.n	80007f4 <Player_Reading_Card+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f8df 	bl	80008fe <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000740:	6939      	ldr	r1, [r7, #16]
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f7ff ff4a 	bl	80005dc <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	799a      	ldrb	r2, [r3, #6]
 800074c:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <Player_Reading_Card+0x150>)
 800074e:	fba3 1302 	umull	r1, r3, r3, r2
 8000752:	0899      	lsrs	r1, r3, #2
 8000754:	460b      	mov	r3, r1
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	440b      	add	r3, r1
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	b2da      	uxtb	r2, r3
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	2200      	movs	r2, #0
 8000768:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	2201      	movs	r2, #1
 800076e:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000770:	69b8      	ldr	r0, [r7, #24]
 8000772:	f7ff ff7f 	bl	8000674 <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	2200      	movs	r2, #0
 800077a:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000788:	e034      	b.n	80007f4 <Player_Reading_Card+0x148>
			}

		}
		else if (player->turnSignature == second && flag_played == 0) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000790:	2b01      	cmp	r3, #1
 8000792:	d12f      	bne.n	80007f4 <Player_Reading_Card+0x148>
 8000794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000798:	2b00      	cmp	r3, #0
 800079a:	d12b      	bne.n	80007f4 <Player_Reading_Card+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	799b      	ldrb	r3, [r3, #6]
 80007a0:	2b05      	cmp	r3, #5
 80007a2:	d927      	bls.n	80007f4 <Player_Reading_Card+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f8aa 	bl	80008fe <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80007aa:	6939      	ldr	r1, [r7, #16]
 80007ac:	6978      	ldr	r0, [r7, #20]
 80007ae:	f7ff ff15 	bl	80005dc <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	799a      	ldrb	r2, [r3, #6]
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <Player_Reading_Card+0x150>)
 80007b8:	fba3 1302 	umull	r1, r3, r3, r2
 80007bc:	0899      	lsrs	r1, r3, #2
 80007be:	460b      	mov	r3, r1
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	440b      	add	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	2200      	movs	r2, #0
 80007d2:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	2201      	movs	r2, #1
 80007d8:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80007da:	69b8      	ldr	r0, [r7, #24]
 80007dc:	f7ff ff4a 	bl	8000674 <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	2200      	movs	r2, #0
 80007e4:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 80007f2:	e7ff      	b.n	80007f4 <Player_Reading_Card+0x148>
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	aaaaaaab 	.word	0xaaaaaaab

08000800 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800081c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800081e:	2300      	movs	r3, #0
 8000820:	76fb      	strb	r3, [r7, #27]
 8000822:	e00b      	b.n	800083c <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	69f9      	ldr	r1, [r7, #28]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fed6 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	3310      	adds	r3, #16
 8000834:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000836:	7efb      	ldrb	r3, [r7, #27]
 8000838:	3301      	adds	r3, #1
 800083a:	76fb      	strb	r3, [r7, #27]
 800083c:	7efb      	ldrb	r3, [r7, #27]
 800083e:	2b05      	cmp	r3, #5
 8000840:	d9f0      	bls.n	8000824 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000868:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800086a:	2300      	movs	r3, #0
 800086c:	76fb      	strb	r3, [r7, #27]
 800086e:	e00b      	b.n	8000888 <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	69f9      	ldr	r1, [r7, #28]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff feb0 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	3310      	adds	r3, #16
 8000880:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000882:	7efb      	ldrb	r3, [r7, #27]
 8000884:	3301      	adds	r3, #1
 8000886:	76fb      	strb	r3, [r7, #27]
 8000888:	7efb      	ldrb	r3, [r7, #27]
 800088a:	2b05      	cmp	r3, #5
 800088c:	d9f0      	bls.n	8000870 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3368      	adds	r3, #104	; 0x68
 8000892:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8000894:	2300      	movs	r3, #0
 8000896:	76bb      	strb	r3, [r7, #26]
 8000898:	e00b      	b.n	80008b2 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	69f9      	ldr	r1, [r7, #28]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe9b 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3310      	adds	r3, #16
 80008aa:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80008ac:	7ebb      	ldrb	r3, [r7, #26]
 80008ae:	3301      	adds	r3, #1
 80008b0:	76bb      	strb	r3, [r7, #26]
 80008b2:	7ebb      	ldrb	r3, [r7, #26]
 80008b4:	2b13      	cmp	r3, #19
 80008b6:	d9f0      	bls.n	800089a <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3308      	adds	r3, #8
 80008bc:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80008be:	2300      	movs	r3, #0
 80008c0:	767b      	strb	r3, [r7, #25]
 80008c2:	e00b      	b.n	80008dc <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	69f9      	ldr	r1, [r7, #28]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe86 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	3310      	adds	r3, #16
 80008d4:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80008d6:	7e7b      	ldrb	r3, [r7, #25]
 80008d8:	3301      	adds	r3, #1
 80008da:	767b      	strb	r3, [r7, #25]
 80008dc:	7e7b      	ldrb	r3, [r7, #25]
 80008de:	2b05      	cmp	r3, #5
 80008e0:	d9f0      	bls.n	80008c4 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80008e8:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	69f9      	ldr	r1, [r7, #28]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe73 	bl	80005dc <YUGIOH_card_copy>
}
 80008f6:	bf00      	nop
 80008f8:	3720      	adds	r7, #32
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800090c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000914:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800091c:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000924:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000926:	2306      	movs	r3, #6
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	e00c      	b.n	8000946 <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800092c:	6939      	ldr	r1, [r7, #16]
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f7ff fe54 	bl	80005dc <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3b10      	subs	r3, #16
 8000938:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	3b10      	subs	r3, #16
 800093e:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3b01      	subs	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	dcef      	bgt.n	800092c <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8000956:	b580      	push	{r7, lr}
 8000958:	b08a      	sub	sp, #40	; 0x28
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3368      	adds	r3, #104	; 0x68
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3368      	adds	r3, #104	; 0x68
 8000980:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000988:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 800098a:	2314      	movs	r3, #20
 800098c:	61fb      	str	r3, [r7, #28]
 800098e:	e00c      	b.n	80009aa <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000990:	6a39      	ldr	r1, [r7, #32]
 8000992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000994:	f7ff fe22 	bl	80005dc <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	3b10      	subs	r3, #16
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	3b10      	subs	r3, #16
 80009a2:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	dcef      	bgt.n	8000990 <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3368      	adds	r3, #104	; 0x68
 80009b8:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80009ba:	6a39      	ldr	r1, [r7, #32]
 80009bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009be:	f7ff fe0d 	bl	80005dc <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 80009c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009ca:	6a38      	ldr	r0, [r7, #32]
 80009cc:	f7ff fe06 	bl	80005dc <YUGIOH_card_copy>

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	3304      	adds	r3, #4
 80009e6:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	3304      	adds	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3304      	adds	r3, #4
 80009f2:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80009fa:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 80009fc:	2108      	movs	r1, #8
 80009fe:	484a      	ldr	r0, [pc, #296]	; (8000b28 <GAME_PLAY_Management+0x150>)
 8000a00:	f005 f868 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4847      	ldr	r0, [pc, #284]	; (8000b2c <GAME_PLAY_Management+0x154>)
 8000a10:	f005 f860 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4842      	ldr	r0, [pc, #264]	; (8000b28 <GAME_PLAY_Management+0x150>)
 8000a20:	f005 f858 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8000a2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a30:	483f      	ldr	r0, [pc, #252]	; (8000b30 <GAME_PLAY_Management+0x158>)
 8000a32:	f005 f84f 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8000a44:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d862      	bhi.n	8000b1e <GAME_PLAY_Management+0x146>
 8000a58:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <GAME_PLAY_Management+0x88>)
 8000a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5e:	bf00      	nop
 8000a60:	08000a75 	.word	0x08000a75
 8000a64:	08000aa7 	.word	0x08000aa7
 8000a68:	08000ae5 	.word	0x08000ae5
 8000a6c:	08000b01 	.word	0x08000b01
 8000a70:	08000b1d 	.word	0x08000b1d
	case Game_not_start:
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000a74:	2108      	movs	r1, #8
 8000a76:	482f      	ldr	r0, [pc, #188]	; (8000b34 <GAME_PLAY_Management+0x15c>)
 8000a78:	f005 f82c 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d104      	bne.n	8000a8c <GAME_PLAY_Management+0xb4>
				== GPIO_PIN_RESET) {
			state_game->MainGame_State = Game_init;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2201      	movs	r2, #1
 8000a86:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		{
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
		}
		break;
 8000a8a:	e048      	b.n	8000b1e <GAME_PLAY_Management+0x146>
			state_game->PlyerAction_State = PS_AFK;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
		break;
 8000aa4:	e03b      	b.n	8000b1e <GAME_PLAY_Management+0x146>
	case Game_init:

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000aac:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ab4:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8000ab6:	69f8      	ldr	r0, [r7, #28]
 8000ab8:	f7ff fec8 	bl	800084c <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 8000abc:	69b8      	ldr	r0, [r7, #24]
 8000abe:	f7ff fec5 	bl	800084c <YUGIOH_Clear_Card_All>

		ptrPlayer1->turnSignature = first;
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		ptrPlayer2->turnSignature = second;
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	2201      	movs	r2, #1
 8000ace:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

		state_game->MainGame_State = first_player;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2201      	movs	r2, #1
 8000ade:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8000ae2:	e01c      	b.n	8000b1e <GAME_PLAY_Management+0x146>
	case first_player:
		ptrPlayerAtk = &state_game->player[0];
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000af0:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	6839      	ldr	r1, [r7, #0]
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f81d 	bl	8000b38 <GAME_PLAY_Phase_Management>
		break;
 8000afe:	e00e      	b.n	8000b1e <GAME_PLAY_Management+0x146>
	case second_player:
		ptrPlayerAtk = &state_game->player[1];
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000b06:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	6839      	ldr	r1, [r7, #0]
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 f80f 	bl	8000b38 <GAME_PLAY_Phase_Management>
		break;
 8000b1a:	e000      	b.n	8000b1e <GAME_PLAY_Management+0x146>
	case Game_Ended:
		break;
 8000b1c:	bf00      	nop
	}
}
 8000b1e:	bf00      	nop
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	58020800 	.word	0x58020800
 8000b2c:	58020400 	.word	0x58020400
 8000b30:	58021400 	.word	0x58021400
 8000b34:	58020000 	.word	0x58020000

08000b38 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8000b4c:	77bb      	strb	r3, [r7, #30]

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8000b54:	777b      	strb	r3, [r7, #29]

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8000b5c:	773b      	strb	r3, [r7, #28]

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (PAS) {
 8000b5e:	7fbb      	ldrb	r3, [r7, #30]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	f200 8447 	bhi.w	80013f4 <GAME_PLAY_Phase_Management+0x8bc>
 8000b66:	a201      	add	r2, pc, #4	; (adr r2, 8000b6c <GAME_PLAY_Phase_Management+0x34>)
 8000b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6c:	080013e7 	.word	0x080013e7
 8000b70:	08000b7d 	.word	0x08000b7d
 8000b74:	08000baf 	.word	0x08000baf
 8000b78:	08000feb 	.word	0x08000feb
	case PS_AFK:
		break;
	case Drawn_Phase:
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	48b0      	ldr	r0, [pc, #704]	; (8000e40 <GAME_PLAY_Phase_Management+0x308>)
 8000b80:	f004 ffa8 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 842f 	bne.w	80013ea <GAME_PLAY_Phase_Management+0x8b2>
				== GPIO_PIN_RESET) {
			state_game->PlyerAction_State = Main_Phase;
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	2202      	movs	r2, #2
 8000b90:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8000ba2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ba6:	f001 fe47 	bl	8002838 <HAL_Delay>
		}
		break;
 8000baa:	f000 bc1e 	b.w	80013ea <GAME_PLAY_Phase_Management+0x8b2>
	case Main_Phase:

		switch (PMS)
 8000bae:	7f7b      	ldrb	r3, [r7, #29]
 8000bb0:	2b07      	cmp	r3, #7
 8000bb2:	f200 841c 	bhi.w	80013ee <GAME_PLAY_Phase_Management+0x8b6>
 8000bb6:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <GAME_PLAY_Phase_Management+0x84>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000fcf 	.word	0x08000fcf
 8000bc0:	08000bdd 	.word	0x08000bdd
 8000bc4:	08000c3f 	.word	0x08000c3f
 8000bc8:	08000ca7 	.word	0x08000ca7
 8000bcc:	08000e25 	.word	0x08000e25
 8000bd0:	08000fcf 	.word	0x08000fcf
 8000bd4:	08000f87 	.word	0x08000f87
 8000bd8:	08000f2f 	.word	0x08000f2f
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:
			if (state_game->action == 0)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d122      	bne.n	8000c2a <GAME_PLAY_Phase_Management+0xf2>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000be4:	2101      	movs	r1, #1
 8000be6:	4896      	ldr	r0, [pc, #600]	; (8000e40 <GAME_PLAY_Phase_Management+0x308>)
 8000be8:	f004 ff74 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d115      	bne.n	8000c1e <GAME_PLAY_Phase_Management+0xe6>
						== GPIO_PIN_RESET){
					state_game->action = 50;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2232      	movs	r2, #50	; 0x32
 8000bf6:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->PlyerAction_State = Battle_Phase;
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2203      	movs	r2, #3
 8000c04:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f

					// ADD ATK point to all Monster
					GAME_PLAY_Add_ATK_Point(playerAtk);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 fbf3 	bl	80013fc <GAME_PLAY_Add_ATK_Point>

					HAL_Delay(1500);
 8000c16:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c1a:	f001 fe0d 	bl	8002838 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff fd42 	bl	80006ac <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8000c28:	e1d3      	b.n	8000fd2 <GAME_PLAY_Phase_Management+0x49a>
			else if (state_game->action == 1)
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	f040 81cf 	bne.w	8000fd2 <GAME_PLAY_Phase_Management+0x49a>
				state_game->PlyerAction_Main_Substate = select_position;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2202      	movs	r2, #2
 8000c38:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000c3c:	e1c9      	b.n	8000fd2 <GAME_PLAY_Phase_Management+0x49a>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ChainBuffer[0];
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c44:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24

			if (state_game->action == 1)
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d116      	bne.n	8000c84 <GAME_PLAY_Phase_Management+0x14c>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	789b      	ldrb	r3, [r3, #2]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d106      	bne.n	8000c6c <GAME_PLAY_Phase_Management+0x134>
					ptrYugiohCard_src->cardState = 0;
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2200      	movs	r2, #0
 8000c62:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2202      	movs	r2, #2
 8000c68:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8000c6a:	e1b4      	b.n	8000fd6 <GAME_PLAY_Phase_Management+0x49e>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	785b      	ldrb	r3, [r3, #1]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f040 81b0 	bne.w	8000fd6 <GAME_PLAY_Phase_Management+0x49e>
					ptrYugiohCard_src->cardState = 1;
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2202      	movs	r2, #2
 8000c80:	701a      	strb	r2, [r3, #0]
			break;
 8000c82:	e1a8      	b.n	8000fd6 <GAME_PLAY_Phase_Management+0x49e>
			else if (state_game->action == 2)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	f040 81a4 	bne.w	8000fd6 <GAME_PLAY_Phase_Management+0x49e>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c90:	69b8      	ldr	r0, [r7, #24]
 8000c92:	f7ff fca3 	bl	80005dc <YUGIOH_card_copy>
				state_game->action = 3;
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	2203      	movs	r2, #3
 8000c9a:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000ca4:	e197      	b.n	8000fd6 <GAME_PLAY_Phase_Management+0x49e>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000cac:	61bb      	str	r3, [r7, #24]

			if (state_game->action == 3)
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	f040 8191 	bne.w	8000fda <GAME_PLAY_Phase_Management+0x4a2>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	785b      	ldrb	r3, [r3, #1]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d127      	bne.n	8000d10 <GAME_PLAY_Phase_Management+0x1d8>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	799a      	ldrb	r2, [r3, #6]
 8000cc4:	4b5f      	ldr	r3, [pc, #380]	; (8000e44 <GAME_PLAY_Phase_Management+0x30c>)
 8000cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8000cca:	0899      	lsrs	r1, r3, #2
 8000ccc:	460b      	mov	r3, r1
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	440b      	add	r3, r1
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	747b      	strb	r3, [r7, #17]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000cd8:	7c7b      	ldrb	r3, [r7, #17]
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	3308      	adds	r3, #8
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ce6:	69b8      	ldr	r0, [r7, #24]
 8000ce8:	f7ff fc78 	bl	80005dc <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fd87 	bl	8000800 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000cf8:	69b9      	ldr	r1, [r7, #24]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fc6e 	bl	80005dc <YUGIOH_card_copy>

					state_game->action = 0;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8000d0e:	e164      	b.n	8000fda <GAME_PLAY_Phase_Management+0x4a2>
				else if (ptrYugiohCard_src->cardType == 2)
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d141      	bne.n	8000d9c <GAME_PLAY_Phase_Management+0x264>
					state_game->count_chain = 1;
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->standPosition == 1){
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	799b      	ldrb	r3, [r3, #6]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d112      	bne.n	8000d4c <GAME_PLAY_Phase_Management+0x214>
						state_game->test = 33;
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2221      	movs	r2, #33	; 0x21
 8000d2a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fd66 	bl	8000800 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	2204      	movs	r2, #4
 8000d38:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &playerAtk->ChainBuffer[0];
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2207      	movs	r2, #7
 8000d46:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000d4a:	e146      	b.n	8000fda <GAME_PLAY_Phase_Management+0x4a2>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	799a      	ldrb	r2, [r3, #6]
 8000d50:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <GAME_PLAY_Phase_Management+0x30c>)
 8000d52:	fba3 1302 	umull	r1, r3, r3, r2
 8000d56:	0899      	lsrs	r1, r3, #2
 8000d58:	460b      	mov	r3, r1
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	440b      	add	r3, r1
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	74bb      	strb	r3, [r7, #18]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000d64:	7cbb      	ldrb	r3, [r7, #18]
 8000d66:	011b      	lsls	r3, r3, #4
 8000d68:	3308      	adds	r3, #8
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d72:	69b8      	ldr	r0, [r7, #24]
 8000d74:	f7ff fc32 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff fd41 	bl	8000800 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000d84:	69b9      	ldr	r1, [r7, #24]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fc28 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000d9a:	e11e      	b.n	8000fda <GAME_PLAY_Phase_Management+0x4a2>
				else if (ptrYugiohCard_src->cardType == 1)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	785b      	ldrb	r3, [r3, #1]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	f040 811a 	bne.w	8000fda <GAME_PLAY_Phase_Management+0x4a2>
					state_game->test = 2;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2202      	movs	r2, #2
 8000daa:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
					if (ptrYugiohCard_src->cardLevel < 7)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	78db      	ldrb	r3, [r3, #3]
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d82b      	bhi.n	8000e0e <GAME_PLAY_Phase_Management+0x2d6>
						state_game->test = 1;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	799a      	ldrb	r2, [r3, #6]
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <GAME_PLAY_Phase_Management+0x30c>)
 8000dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8000dc8:	0899      	lsrs	r1, r3, #2
 8000dca:	460b      	mov	r3, r1
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	440b      	add	r3, r1
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	74fb      	strb	r3, [r7, #19]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000dd6:	7cfb      	ldrb	r3, [r7, #19]
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	3308      	adds	r3, #8
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000de2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000de4:	69b8      	ldr	r0, [r7, #24]
 8000de6:	f7ff fbf9 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fd08 	bl	8000800 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fbef 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000e0c:	e0e5      	b.n	8000fda <GAME_PLAY_Phase_Management+0x4a2>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fcf6 	bl	8000800 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2204      	movs	r2, #4
 8000e18:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000e22:	e0da      	b.n	8000fda <GAME_PLAY_Phase_Management+0x4a2>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e2a:	61bb      	str	r3, [r7, #24]

			if (state_game->action == 4)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d109      	bne.n	8000e48 <GAME_PLAY_Phase_Management+0x310>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f7ff fc37 	bl	80006ac <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], &playerAtk->CardInPlayed);
				}
			}
			break;
 8000e3e:	e0ce      	b.n	8000fde <GAME_PLAY_Phase_Management+0x4a6>
 8000e40:	58020800 	.word	0x58020800
 8000e44:	aaaaaaab 	.word	0xaaaaaaab
			else if (state_game->action == 5)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d105      	bne.n	8000e5c <GAME_PLAY_Phase_Management+0x324>
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	68b9      	ldr	r1, [r7, #8]
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f7ff fc29 	bl	80006ac <Player_Reading_Card>
			break;
 8000e5a:	e0c0      	b.n	8000fde <GAME_PLAY_Phase_Management+0x4a6>
			else if (state_game->action == 6)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b06      	cmp	r3, #6
 8000e62:	f040 80bc 	bne.w	8000fde <GAME_PLAY_Phase_Management+0x4a6>
				uint8_t monsterflag = 0 ;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst = &playerAtk->ChainBuffer[0];
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	78db      	ldrb	r3, [r3, #3]
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	d804      	bhi.n	8000e86 <GAME_PLAY_Phase_Management+0x34e>
					monsterflag += 1;
 8000e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e80:	3301      	adds	r3, #1
 8000e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst++;
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	3310      	adds	r3, #16
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	78db      	ldrb	r3, [r3, #3]
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d804      	bhi.n	8000e9e <GAME_PLAY_Phase_Management+0x366>
					monsterflag += 1;
 8000e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e98:	3301      	adds	r3, #1
 8000e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if (monsterflag == 2)
 8000e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d135      	bne.n	8000f12 <GAME_PLAY_Phase_Management+0x3da>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	799a      	ldrb	r2, [r3, #6]
 8000eaa:	4ba6      	ldr	r3, [pc, #664]	; (8001144 <GAME_PLAY_Phase_Management+0x60c>)
 8000eac:	fba3 1302 	umull	r1, r3, r3, r2
 8000eb0:	0899      	lsrs	r1, r3, #2
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	440b      	add	r3, r1
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	753b      	strb	r3, [r7, #20]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000ebe:	7d3b      	ldrb	r3, [r7, #20]
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ecc:	69b8      	ldr	r0, [r7, #24]
 8000ece:	f7ff fb85 	bl	80005dc <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ChainBuffer[0]);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ed8:	4619      	mov	r1, r3
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fd3b 	bl	8000956 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ChainBuffer[1]);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff fd34 	bl	8000956 <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fc86 	bl	8000800 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000efa:	69b9      	ldr	r1, [r7, #24]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb6d 	bl	80005dc <YUGIOH_card_copy>
					state_game->action = 0;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000f10:	e065      	b.n	8000fde <GAME_PLAY_Phase_Management+0x4a6>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fc74 	bl	8000800 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], &playerAtk->CardInPlayed);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f7ff fb58 	bl	80005dc <YUGIOH_card_copy>
			break;
 8000f2c:	e057      	b.n	8000fde <GAME_PLAY_Phase_Management+0x4a6>
		case chaining_main_DEF:
			state_game->test = 34;
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	2222      	movs	r2, #34	; 0x22
 8000f32:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
			if(state_game->action == 4)
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d111      	bne.n	8000f62 <GAME_PLAY_Phase_Management+0x42a>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f7ff fbb2 	bl	80006ac <Player_Reading_Card>
				state_game->test = 35;
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2223      	movs	r2, #35	; 0x23
 8000f4c:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440

				if (playerDef->noBTN == GPIO_PIN_RESET){
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	789b      	ldrb	r3, [r3, #2]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d144      	bne.n	8000fe2 <GAME_PLAY_Phase_Management+0x4aa>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->PlyerAction_Main_Substate = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 8000f60:	e03f      	b.n	8000fe2 <GAME_PLAY_Phase_Management+0x4aa>
			else if ((state_game->action == 5 )){
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d13b      	bne.n	8000fe2 <GAME_PLAY_Phase_Management+0x4aa>
				state_game->count_chain += 1;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	785b      	ldrb	r3, [r3, #1]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	705a      	strb	r2, [r3, #1]
				state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2206      	movs	r2, #6
 8000f7a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2204      	movs	r2, #4
 8000f82:	701a      	strb	r2, [r3, #0]
			break;
 8000f84:	e02d      	b.n	8000fe2 <GAME_PLAY_Phase_Management+0x4aa>
		case chaining_main_ATK:
			if(state_game->action == 4)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d10d      	bne.n	8000faa <GAME_PLAY_Phase_Management+0x472>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f7ff fb8a 	bl	80006ac <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	789b      	ldrb	r3, [r3, #2]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d122      	bne.n	8000fe6 <GAME_PLAY_Phase_Management+0x4ae>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 8000fa8:	e01d      	b.n	8000fe6 <GAME_PLAY_Phase_Management+0x4ae>
			else if ((state_game->action == 5 )){
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d119      	bne.n	8000fe6 <GAME_PLAY_Phase_Management+0x4ae>
				state_game->count_chain += 1;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	785b      	ldrb	r3, [r3, #1]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	705a      	strb	r2, [r3, #1]
				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2204      	movs	r2, #4
 8000fca:	701a      	strb	r2, [r3, #0]
			break;
 8000fcc:	e00b      	b.n	8000fe6 <GAME_PLAY_Phase_Management+0x4ae>
			break;
 8000fce:	bf00      	nop
 8000fd0:	e20d      	b.n	80013ee <GAME_PLAY_Phase_Management+0x8b6>
			break;
 8000fd2:	bf00      	nop
 8000fd4:	e20b      	b.n	80013ee <GAME_PLAY_Phase_Management+0x8b6>
			break;
 8000fd6:	bf00      	nop
 8000fd8:	e209      	b.n	80013ee <GAME_PLAY_Phase_Management+0x8b6>
			break;
 8000fda:	bf00      	nop
 8000fdc:	e207      	b.n	80013ee <GAME_PLAY_Phase_Management+0x8b6>
			break;
 8000fde:	bf00      	nop
 8000fe0:	e205      	b.n	80013ee <GAME_PLAY_Phase_Management+0x8b6>
			break;
 8000fe2:	bf00      	nop
 8000fe4:	e203      	b.n	80013ee <GAME_PLAY_Phase_Management+0x8b6>
			break;
 8000fe6:	bf00      	nop
			//				state_game->action = 0;
			//				state_game->MAIN = await;
			//			}
			break;
		}
		break;
 8000fe8:	e201      	b.n	80013ee <GAME_PLAY_Phase_Management+0x8b6>
		case Battle_Phase:

			switch(PBS){
 8000fea:	7f3b      	ldrb	r3, [r7, #28]
 8000fec:	2b06      	cmp	r3, #6
 8000fee:	f200 8200 	bhi.w	80013f2 <GAME_PLAY_Phase_Management+0x8ba>
 8000ff2:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <GAME_PLAY_Phase_Management+0x4c0>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	080013d3 	.word	0x080013d3
 8000ffc:	08001015 	.word	0x08001015
 8001000:	080011e7 	.word	0x080011e7
 8001004:	0800119b 	.word	0x0800119b
 8001008:	080013d3 	.word	0x080013d3
 800100c:	08001233 	.word	0x08001233
 8001010:	08001397 	.word	0x08001397
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				if(state_game->action == 50){
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b32      	cmp	r3, #50	; 0x32
 800101a:	d122      	bne.n	8001062 <GAME_PLAY_Phase_Management+0x52a>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f7ff fb43 	bl	80006ac <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001026:	2101      	movs	r1, #1
 8001028:	4847      	ldr	r0, [pc, #284]	; (8001148 <GAME_PLAY_Phase_Management+0x610>)
 800102a:	f004 fd53 	bl	8005ad4 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	f040 81d0 	bne.w	80013d6 <GAME_PLAY_Phase_Management+0x89e>
							== GPIO_PIN_RESET){
						state_game->action = 0;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
						if(state_game->MainGame_State == first_player){
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8001042:	2b02      	cmp	r3, #2
 8001044:	d104      	bne.n	8001050 <GAME_PLAY_Phase_Management+0x518>
							state_game->MainGame_State = second_player;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2203      	movs	r2, #3
 800104a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800104e:	e003      	b.n	8001058 <GAME_PLAY_Phase_Management+0x520>
						}
						else{
							state_game->MainGame_State = first_player;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2202      	movs	r2, #2
 8001054:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8001060:	e1b9      	b.n	80013d6 <GAME_PLAY_Phase_Management+0x89e>
				else if(state_game->action == 51){
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b33      	cmp	r3, #51	; 0x33
 8001068:	f040 81b5 	bne.w	80013d6 <GAME_PLAY_Phase_Management+0x89e>
					uint8_t check_def_mon = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	3338      	adds	r3, #56	; 0x38
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
					for(uint8_t i = 0;i < 3; ++i){
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800107e:	e010      	b.n	80010a2 <GAME_PLAY_Phase_Management+0x56a>
						if(ptrYugiohCard_dst->cardData == 0){
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d104      	bne.n	8001092 <GAME_PLAY_Phase_Management+0x55a>
							check_def_mon++;
 8001088:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800108c:	3301      	adds	r3, #1
 800108e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						ptrYugiohCard_dst++;
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	3310      	adds	r3, #16
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
					for(uint8_t i = 0;i < 3; ++i){
 8001098:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800109c:	3301      	adds	r3, #1
 800109e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80010a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d9ea      	bls.n	8001080 <GAME_PLAY_Phase_Management+0x548>
					uint8_t flag_can_atk = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 3020 	strb.w	r3, [r7, #32]
					ptrYugiohCard_src = &playerDef->ChainBuffer[0];
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80010b6:	61bb      	str	r3, [r7, #24]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3338      	adds	r3, #56	; 0x38
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 80010be:	2300      	movs	r3, #0
 80010c0:	77fb      	strb	r3, [r7, #31]
 80010c2:	e016      	b.n	80010f2 <GAME_PLAY_Phase_Management+0x5ba>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d10a      	bne.n	80010e6 <GAME_PLAY_Phase_Management+0x5ae>
							if(ptrYugiohCard_dst->cardState == 1){
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	789b      	ldrb	r3, [r3, #2]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d103      	bne.n	80010e0 <GAME_PLAY_Phase_Management+0x5a8>
								flag_can_atk = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	f887 3020 	strb.w	r3, [r7, #32]
								break;
 80010de:	e00b      	b.n	80010f8 <GAME_PLAY_Phase_Management+0x5c0>
								flag_can_atk = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	f887 3020 	strb.w	r3, [r7, #32]
						ptrYugiohCard_dst++;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3310      	adds	r3, #16
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 80010ec:	7ffb      	ldrb	r3, [r7, #31]
 80010ee:	3301      	adds	r3, #1
 80010f0:	77fb      	strb	r3, [r7, #31]
 80010f2:	7ffb      	ldrb	r3, [r7, #31]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d9e5      	bls.n	80010c4 <GAME_PLAY_Phase_Management+0x58c>
					if (flag_can_atk == 2) {
 80010f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d140      	bne.n	8001182 <GAME_PLAY_Phase_Management+0x64a>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	7a1b      	ldrb	r3, [r3, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d030      	beq.n	800116a <GAME_PLAY_Phase_Management+0x632>
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	789b      	ldrb	r3, [r3, #2]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d12c      	bne.n	800116a <GAME_PLAY_Phase_Management+0x632>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	7a1b      	ldrb	r3, [r3, #8]
 8001114:	3b01      	subs	r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001122:	4619      	mov	r1, r3
 8001124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001126:	f7ff fa59 	bl	80005dc <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
							if(check_def_mon == 3){
 8001132:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001136:	2b03      	cmp	r3, #3
 8001138:	d108      	bne.n	800114c <GAME_PLAY_Phase_Management+0x614>
								ptrYugiohCard_dst->targetPosition = 99;
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	2263      	movs	r2, #99	; 0x63
 800113e:	71da      	strb	r2, [r3, #7]
 8001140:	e008      	b.n	8001154 <GAME_PLAY_Phase_Management+0x61c>
 8001142:	bf00      	nop
 8001144:	aaaaaaab 	.word	0xaaaaaaab
 8001148:	58020800 	.word	0x58020800
								ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	799a      	ldrb	r2, [r3, #6]
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f7ff fb53 	bl	8000800 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2234      	movs	r2, #52	; 0x34
 800115e:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2203      	movs	r2, #3
 8001164:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001168:	e135      	b.n	80013d6 <GAME_PLAY_Phase_Management+0x89e>
							state_game->test = 222;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	22de      	movs	r2, #222	; 0xde
 800116e:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
							state_game->action = 50;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2232      	movs	r2, #50	; 0x32
 8001176:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001180:	e129      	b.n	80013d6 <GAME_PLAY_Phase_Management+0x89e>
						state_game->test = 223;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	22df      	movs	r2, #223	; 0xdf
 8001186:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						state_game->action = 50;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2232      	movs	r2, #50	; 0x32
 800118e:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001198:	e11d      	b.n	80013d6 <GAME_PLAY_Phase_Management+0x89e>
			case counter_DEF:
				//action 52
				//				state_game->test = 34;
				if(state_game->action == 52)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b34      	cmp	r3, #52	; 0x34
 80011a0:	d10e      	bne.n	80011c0 <GAME_PLAY_Phase_Management+0x688>
				{
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f7ff fa80 	bl	80006ac <Player_Reading_Card>
					//					state_game->test = 35;
					if (playerDef->noBTN == GPIO_PIN_RESET){
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	789b      	ldrb	r3, [r3, #2]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f040 8112 	bne.w	80013da <GAME_PLAY_Phase_Management+0x8a2>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	2205      	movs	r2, #5
 80011ba:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					//				ptrYugiohCard_dst++;
					state_game->count_chain += 1;
					state_game->PlyerAction_Battle_Substate = counter_ATK;
					state_game->action = 54;
				}
				break;
 80011be:	e10c      	b.n	80013da <GAME_PLAY_Phase_Management+0x8a2>
				else if ((state_game->action == 53 )){
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b35      	cmp	r3, #53	; 0x35
 80011c6:	f040 8108 	bne.w	80013da <GAME_PLAY_Phase_Management+0x8a2>
					state_game->count_chain += 1;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	705a      	strb	r2, [r3, #1]
					state_game->PlyerAction_Battle_Substate = counter_ATK;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2202      	movs	r2, #2
 80011da:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2236      	movs	r2, #54	; 0x36
 80011e2:	701a      	strb	r2, [r3, #0]
				break;
 80011e4:	e0f9      	b.n	80013da <GAME_PLAY_Phase_Management+0x8a2>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b36      	cmp	r3, #54	; 0x36
 80011ec:	d10e      	bne.n	800120c <GAME_PLAY_Phase_Management+0x6d4>
				{
					Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f7ff fa5a 	bl	80006ac <Player_Reading_Card>
					if (playerAtk->noBTN == GPIO_PIN_RESET){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	789b      	ldrb	r3, [r3, #2]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f040 80ee 	bne.w	80013de <GAME_PLAY_Phase_Management+0x8a6>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2205      	movs	r2, #5
 8001206:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				else if ((state_game->action == 55 )){
					state_game->count_chain += 1;
					state_game->PlyerAction_Battle_Substate = counter_DEF;
					state_game->action = 52;
				}
				break;
 800120a:	e0e8      	b.n	80013de <GAME_PLAY_Phase_Management+0x8a6>
				else if ((state_game->action == 55 )){
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b37      	cmp	r3, #55	; 0x37
 8001212:	f040 80e4 	bne.w	80013de <GAME_PLAY_Phase_Management+0x8a6>
					state_game->count_chain += 1;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	785b      	ldrb	r3, [r3, #1]
 800121a:	3301      	adds	r3, #1
 800121c:	b2da      	uxtb	r2, r3
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	705a      	strb	r2, [r3, #1]
					state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2203      	movs	r2, #3
 8001226:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 52;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2234      	movs	r2, #52	; 0x34
 800122e:	701a      	strb	r2, [r3, #0]
				break;
 8001230:	e0d5      	b.n	80013de <GAME_PLAY_Phase_Management+0x8a6>
			case chain_effect:

				break;
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001238:	61bb      	str	r3, [r7, #24]

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	75fb      	strb	r3, [r7, #23]

				if(ptrYugiohCard_src->targetPosition == 99){
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	79db      	ldrb	r3, [r3, #7]
 8001244:	2b63      	cmp	r3, #99	; 0x63
 8001246:	d114      	bne.n	8001272 <GAME_PLAY_Phase_Management+0x73a>
					playerDef->life_point -= atk*100;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	889a      	ldrh	r2, [r3, #4]
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	b29b      	uxth	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	0249      	lsls	r1, r1, #9
 8001254:	1ac9      	subs	r1, r1, r3
 8001256:	0089      	lsls	r1, r1, #2
 8001258:	4419      	add	r1, r3
 800125a:	00c9      	lsls	r1, r1, #3
 800125c:	1acb      	subs	r3, r1, r3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	b29b      	uxth	r3, r3
 8001262:	4413      	add	r3, r2
 8001264:	b29a      	uxth	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2206      	movs	r2, #6
 800126e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				}

				ptrYugiohCard_dst = playerDef->cardOnBoard;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	3308      	adds	r3, #8
 8001276:	627b      	str	r3, [r7, #36]	; 0x24

				ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	799b      	ldrb	r3, [r3, #6]
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	3308      	adds	r3, #8
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	4413      	add	r3, r2
 8001284:	627b      	str	r3, [r7, #36]	; 0x24

				state_game->test = 54;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2236      	movs	r2, #54	; 0x36
 800128a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
				if(ptrYugiohCard_dst->cardState == 0){
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	789b      	ldrb	r3, [r3, #2]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d12c      	bne.n	80012f0 <GAME_PLAY_Phase_Management+0x7b8>
					//					uint8_t atk = ptrYugiohCard_src->cardAtk;
					uint8_t def = ptrYugiohCard_dst->cardDef;
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	795b      	ldrb	r3, [r3, #5]
 800129a:	757b      	strb	r3, [r7, #21]
					if(atk < def){
 800129c:	7dfa      	ldrb	r2, [r7, #23]
 800129e:	7d7b      	ldrb	r3, [r7, #21]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d217      	bcs.n	80012d4 <GAME_PLAY_Phase_Management+0x79c>
						playerAtk->life_point -= (def-atk)*100;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	889a      	ldrh	r2, [r3, #4]
 80012a8:	7d79      	ldrb	r1, [r7, #21]
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	1acb      	subs	r3, r1, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	0249      	lsls	r1, r1, #9
 80012b4:	1ac9      	subs	r1, r1, r3
 80012b6:	0089      	lsls	r1, r1, #2
 80012b8:	4419      	add	r1, r3
 80012ba:	00c9      	lsls	r1, r1, #3
 80012bc:	1acb      	subs	r3, r1, r3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2206      	movs	r2, #6
 80012ce:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						playerDef->life_point -= (atk-atk2)*100;
						state_game->PlyerAction_Battle_Substate = after_calculate;
					}

				}
				break;
 80012d2:	e086      	b.n	80013e2 <GAME_PLAY_Phase_Management+0x8aa>
					else if(atk > def){
 80012d4:	7dfa      	ldrb	r2, [r7, #23]
 80012d6:	7d7b      	ldrb	r3, [r7, #21]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f240 8082 	bls.w	80013e2 <GAME_PLAY_Phase_Management+0x8aa>
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 80012de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012e0:	6838      	ldr	r0, [r7, #0]
 80012e2:	f7ff fb38 	bl	8000956 <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2206      	movs	r2, #6
 80012ea:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80012ee:	e078      	b.n	80013e2 <GAME_PLAY_Phase_Management+0x8aa>
				else if(ptrYugiohCard_dst->cardState == 1){
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	789b      	ldrb	r3, [r3, #2]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d174      	bne.n	80013e2 <GAME_PLAY_Phase_Management+0x8aa>
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	75bb      	strb	r3, [r7, #22]
					state_game->test = 60;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	223c      	movs	r2, #60	; 0x3c
 8001302:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
					if(atk < atk2){
 8001306:	7dfa      	ldrb	r2, [r7, #23]
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	429a      	cmp	r2, r3
 800130c:	d21f      	bcs.n	800134e <GAME_PLAY_Phase_Management+0x816>
						state_game->test = 61;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	223d      	movs	r2, #61	; 0x3d
 8001312:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						playerAtk->life_point -= (atk2-atk)*100;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	889a      	ldrh	r2, [r3, #4]
 800131a:	7db9      	ldrb	r1, [r7, #22]
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	1acb      	subs	r3, r1, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	4619      	mov	r1, r3
 8001324:	0249      	lsls	r1, r1, #9
 8001326:	1ac9      	subs	r1, r1, r3
 8001328:	0089      	lsls	r1, r1, #2
 800132a:	4419      	add	r1, r3
 800132c:	00c9      	lsls	r1, r1, #3
 800132e:	1acb      	subs	r3, r1, r3
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	b29b      	uxth	r3, r3
 8001334:	4413      	add	r3, r2
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	809a      	strh	r2, [r3, #4]
						YUGIOH_To_GY(playerAtk, ptrYugiohCard_src);
 800133c:	69b9      	ldr	r1, [r7, #24]
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fb09 	bl	8000956 <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2206      	movs	r2, #6
 8001348:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800134c:	e049      	b.n	80013e2 <GAME_PLAY_Phase_Management+0x8aa>
					else if(atk > atk2){
 800134e:	7dfa      	ldrb	r2, [r7, #23]
 8001350:	7dbb      	ldrb	r3, [r7, #22]
 8001352:	429a      	cmp	r2, r3
 8001354:	d945      	bls.n	80013e2 <GAME_PLAY_Phase_Management+0x8aa>
						state_game->test = 70;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2246      	movs	r2, #70	; 0x46
 800135a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 800135e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff faf8 	bl	8000956 <YUGIOH_To_GY>
						playerDef->life_point -= (atk-atk2)*100;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	889a      	ldrh	r2, [r3, #4]
 800136a:	7df9      	ldrb	r1, [r7, #23]
 800136c:	7dbb      	ldrb	r3, [r7, #22]
 800136e:	1acb      	subs	r3, r1, r3
 8001370:	b29b      	uxth	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	0249      	lsls	r1, r1, #9
 8001376:	1ac9      	subs	r1, r1, r3
 8001378:	0089      	lsls	r1, r1, #2
 800137a:	4419      	add	r1, r3
 800137c:	00c9      	lsls	r1, r1, #3
 800137e:	1acb      	subs	r3, r1, r3
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	b29b      	uxth	r3, r3
 8001384:	4413      	add	r3, r2
 8001386:	b29a      	uxth	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2206      	movs	r2, #6
 8001390:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001394:	e025      	b.n	80013e2 <GAME_PLAY_Phase_Management+0x8aa>
			case after_calculate:

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800139c:	61bb      	str	r3, [r7, #24]
				YUGIOH_card_clear(ptrYugiohCard_src);
 800139e:	69b8      	ldr	r0, [r7, #24]
 80013a0:	f7ff f953 	bl	800064a <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	889b      	ldrh	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <GAME_PLAY_Phase_Management+0x880>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	889b      	ldrh	r3, [r3, #4]
 80013b0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d904      	bls.n	80013c2 <GAME_PLAY_Phase_Management+0x88a>
					state_game->MainGame_State = Game_Ended;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2204      	movs	r2, #4
 80013bc:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				}
				else{
					state_game->action = 50;
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 80013c0:	e010      	b.n	80013e4 <GAME_PLAY_Phase_Management+0x8ac>
					state_game->action = 50;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	2232      	movs	r2, #50	; 0x32
 80013c6:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80013d0:	e008      	b.n	80013e4 <GAME_PLAY_Phase_Management+0x8ac>
				break;
 80013d2:	bf00      	nop
 80013d4:	e00d      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x8ba>
				break;
 80013d6:	bf00      	nop
 80013d8:	e00b      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x8ba>
				break;
 80013da:	bf00      	nop
 80013dc:	e009      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x8ba>
				break;
 80013de:	bf00      	nop
 80013e0:	e007      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x8ba>
				break;
 80013e2:	bf00      	nop
			}
			break;
 80013e4:	e005      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x8ba>
		break;
 80013e6:	bf00      	nop
 80013e8:	e004      	b.n	80013f4 <GAME_PLAY_Phase_Management+0x8bc>
		break;
 80013ea:	bf00      	nop
 80013ec:	e002      	b.n	80013f4 <GAME_PLAY_Phase_Management+0x8bc>
		break;
 80013ee:	bf00      	nop
 80013f0:	e000      	b.n	80013f4 <GAME_PLAY_Phase_Management+0x8bc>
			break;
 80013f2:	bf00      	nop

	}
}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <GAME_PLAY_Add_ATK_Point>:

void GAME_PLAY_Add_ATK_Point(Player *player)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3338      	adds	r3, #56	; 0x38
 8001408:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800140a:	2300      	movs	r3, #0
 800140c:	72fb      	strb	r3, [r7, #11]
 800140e:	e010      	b.n	8001432 <GAME_PLAY_Add_ATK_Point+0x36>
		if (ptrYUGIOHCard->cardState == 1) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	789b      	ldrb	r3, [r3, #2]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d103      	bne.n	8001420 <GAME_PLAY_Add_ATK_Point+0x24>
			ptrYUGIOHCard->actionPoint_Atk = 1;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2201      	movs	r2, #1
 800141c:	721a      	strb	r2, [r3, #8]
 800141e:	e002      	b.n	8001426 <GAME_PLAY_Add_ATK_Point+0x2a>
		}
		else{
			ptrYUGIOHCard->actionPoint_Atk = 0;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	721a      	strb	r2, [r3, #8]
		}
		ptrYUGIOHCard++;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3310      	adds	r3, #16
 800142a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800142c:	7afb      	ldrb	r3, [r7, #11]
 800142e:	3301      	adds	r3, #1
 8001430:	72fb      	strb	r3, [r7, #11]
 8001432:	7afb      	ldrb	r3, [r7, #11]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d9eb      	bls.n	8001410 <GAME_PLAY_Add_ATK_Point+0x14>
	}
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800144c:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <SystemInit+0xfc>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <SystemInit+0xfc>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800145c:	4b39      	ldr	r3, [pc, #228]	; (8001544 <SystemInit+0xfc>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	4a38      	ldr	r2, [pc, #224]	; (8001544 <SystemInit+0xfc>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001468:	4b37      	ldr	r3, [pc, #220]	; (8001548 <SystemInit+0x100>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	2b06      	cmp	r3, #6
 8001472:	d807      	bhi.n	8001484 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <SystemInit+0x100>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 030f 	bic.w	r3, r3, #15
 800147c:	4a32      	ldr	r2, [pc, #200]	; (8001548 <SystemInit+0x100>)
 800147e:	f043 0307 	orr.w	r3, r3, #7
 8001482:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <SystemInit+0x104>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a30      	ldr	r2, [pc, #192]	; (800154c <SystemInit+0x104>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001490:	4b2e      	ldr	r3, [pc, #184]	; (800154c <SystemInit+0x104>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <SystemInit+0x104>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	492c      	ldr	r1, [pc, #176]	; (800154c <SystemInit+0x104>)
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <SystemInit+0x108>)
 800149e:	4013      	ands	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <SystemInit+0x100>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <SystemInit+0x100>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 030f 	bic.w	r3, r3, #15
 80014b6:	4a24      	ldr	r2, [pc, #144]	; (8001548 <SystemInit+0x100>)
 80014b8:	f043 0307 	orr.w	r3, r3, #7
 80014bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <SystemInit+0x104>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <SystemInit+0x104>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <SystemInit+0x104>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <SystemInit+0x104>)
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <SystemInit+0x10c>)
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <SystemInit+0x104>)
 80014d8:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <SystemInit+0x110>)
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <SystemInit+0x104>)
 80014de:	4a1f      	ldr	r2, [pc, #124]	; (800155c <SystemInit+0x114>)
 80014e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <SystemInit+0x104>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <SystemInit+0x104>)
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <SystemInit+0x114>)
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <SystemInit+0x104>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <SystemInit+0x104>)
 80014f6:	4a19      	ldr	r2, [pc, #100]	; (800155c <SystemInit+0x114>)
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <SystemInit+0x104>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <SystemInit+0x104>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a11      	ldr	r2, [pc, #68]	; (800154c <SystemInit+0x104>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <SystemInit+0x104>)
 800150e:	2200      	movs	r2, #0
 8001510:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <SystemInit+0x118>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <SystemInit+0x118>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <SystemInit+0x11c>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <SystemInit+0x120>)
 8001524:	4013      	ands	r3, r2
 8001526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800152a:	d202      	bcs.n	8001532 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <SystemInit+0x124>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <SystemInit+0x128>)
 8001534:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001538:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	52002000 	.word	0x52002000
 800154c:	58024400 	.word	0x58024400
 8001550:	eaf6ed7f 	.word	0xeaf6ed7f
 8001554:	02020200 	.word	0x02020200
 8001558:	01ff0000 	.word	0x01ff0000
 800155c:	01010280 	.word	0x01010280
 8001560:	580000c0 	.word	0x580000c0
 8001564:	5c001000 	.word	0x5c001000
 8001568:	ffff0000 	.word	0xffff0000
 800156c:	51008108 	.word	0x51008108
 8001570:	52004000 	.word	0x52004000

08001574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800157a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001580:	bf00      	nop
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <main+0xe8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <main+0x24>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	1e5a      	subs	r2, r3, #1
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	dcf4      	bgt.n	8001582 <main+0xe>
	if ( timeout < 0 )
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	da01      	bge.n	80015a2 <main+0x2e>
	{
		Error_Handler();
 800159e:	f000 fb97 	bl	8001cd0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a2:	f001 f8b7 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a6:	f000 f861 	bl	800166c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015aa:	f000 f8e3 	bl	8001774 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <main+0xe8>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	4a29      	ldr	r2, [pc, #164]	; (800165c <main+0xe8>)
 80015b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <main+0xe8>)
 80015c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f004 facd 	bl	8005b6c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80015d2:	2100      	movs	r1, #0
 80015d4:	2000      	movs	r0, #0
 80015d6:	f004 fae3 	bl	8005ba0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80015da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015de:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80015e0:	bf00      	nop
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <main+0xe8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d104      	bne.n	80015f8 <main+0x84>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	dcf4      	bgt.n	80015e2 <main+0x6e>
	if ( timeout < 0 )
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da01      	bge.n	8001602 <main+0x8e>
	{
		Error_Handler();
 80015fe:	f000 fb67 	bl	8001cd0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001602:	f000 fa35 	bl	8001a70 <MX_GPIO_Init>
  MX_ETH_Init();
 8001606:	f000 f8e7 	bl	80017d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800160a:	f000 f989 	bl	8001920 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800160e:	f000 fa07 	bl	8001a20 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001612:	f000 f9d3 	bl	80019bc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8001616:	f000 f92b 	bl	8001870 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 800161a:	f000 fc61 	bl	8001ee0 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 800161e:	2000      	movs	r0, #0
 8001620:	f000 fd75 	bl	800210e <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8001624:	2000      	movs	r0, #0
 8001626:	f000 fd61 	bl	80020ec <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 800162a:	f001 f8f9 	bl	8002820 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <main+0xec>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2bc8      	cmp	r3, #200	; 0xc8
 8001638:	d9f7      	bls.n	800162a <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 800163a:	f001 f8f1 	bl	8002820 <HAL_GetTick>
 800163e:	4603      	mov	r3, r0
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <main+0xec>)
 8001642:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <main+0xf0>)
 800164a:	f004 fa74 	bl	8005b36 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 800164e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001652:	4905      	ldr	r1, [pc, #20]	; (8001668 <main+0xf4>)
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff f9bf 	bl	80009d8 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 800165a:	e7e6      	b.n	800162a <main+0xb6>
 800165c:	58024400 	.word	0x58024400
 8001660:	24000d2c 	.word	0x24000d2c
 8001664:	58020400 	.word	0x58020400
 8001668:	240008e8 	.word	0x240008e8

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b09c      	sub	sp, #112	; 0x70
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001676:	224c      	movs	r2, #76	; 0x4c
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f009 fb7c 	bl	800ad78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2220      	movs	r2, #32
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f009 fb76 	bl	800ad78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800168c:	2004      	movs	r0, #4
 800168e:	f004 fbe3 	bl	8005e58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <SystemClock_Config+0xfc>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4a33      	ldr	r2, [pc, #204]	; (8001768 <SystemClock_Config+0xfc>)
 800169c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016a0:	6193      	str	r3, [r2, #24]
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <SystemClock_Config+0xfc>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <SystemClock_Config+0x100>)
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	4a2e      	ldr	r2, [pc, #184]	; (800176c <SystemClock_Config+0x100>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <SystemClock_Config+0x100>)
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016c4:	bf00      	nop
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <SystemClock_Config+0xfc>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016d2:	d1f8      	bne.n	80016c6 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <SystemClock_Config+0x104>)
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	f023 0303 	bic.w	r3, r3, #3
 80016dc:	4a24      	ldr	r2, [pc, #144]	; (8001770 <SystemClock_Config+0x104>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	2302      	movs	r3, #2
 80016f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f2:	2302      	movs	r3, #2
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016f6:	2301      	movs	r3, #1
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80016fa:	2378      	movs	r3, #120	; 0x78
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016fe:	2302      	movs	r3, #2
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001702:	2302      	movs	r3, #2
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001706:	2302      	movs	r3, #2
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800170a:	230c      	movs	r3, #12
 800170c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800170e:	2300      	movs	r3, #0
 8001710:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fc06 	bl	8005f2c <HAL_RCC_OscConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001726:	f000 fad3 	bl	8001cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172a:	233f      	movs	r3, #63	; 0x3f
 800172c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172e:	2303      	movs	r3, #3
 8001730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001736:	2308      	movs	r3, #8
 8001738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800173a:	2340      	movs	r3, #64	; 0x40
 800173c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800173e:	2340      	movs	r3, #64	; 0x40
 8001740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001746:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001748:	2340      	movs	r3, #64	; 0x40
 800174a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2104      	movs	r1, #4
 8001750:	4618      	mov	r0, r3
 8001752:	f005 f819 	bl	8006788 <HAL_RCC_ClockConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800175c:	f000 fab8 	bl	8001cd0 <Error_Handler>
  }
}
 8001760:	bf00      	nop
 8001762:	3770      	adds	r7, #112	; 0x70
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	58024800 	.word	0x58024800
 800176c:	58000400 	.word	0x58000400
 8001770:	58024400 	.word	0x58024400

08001774 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b0b0      	sub	sp, #192	; 0xc0
 8001778:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	22bc      	movs	r2, #188	; 0xbc
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f009 faf9 	bl	800ad78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8001786:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 800178a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800178c:	2301      	movs	r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001790:	2318      	movs	r3, #24
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001794:	2302      	movs	r3, #2
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001798:	2304      	movs	r3, #4
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800179c:	2302      	movs	r3, #2
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80017a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80017ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b2:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80017b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fb6e 	bl	8006ea0 <HAL_RCCEx_PeriphCLKConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80017ca:	f000 fa81 	bl	8001cd0 <Error_Handler>
  }
}
 80017ce:	bf00      	nop
 80017d0:	37c0      	adds	r7, #192	; 0xc0
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_ETH_Init+0x80>)
 80017de:	4a1f      	ldr	r2, [pc, #124]	; (800185c <MX_ETH_Init+0x84>)
 80017e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MX_ETH_Init+0x88>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_ETH_Init+0x88>)
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_ETH_Init+0x88>)
 80017f0:	22e1      	movs	r2, #225	; 0xe1
 80017f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_ETH_Init+0x88>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <MX_ETH_Init+0x88>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_ETH_Init+0x88>)
 8001802:	2200      	movs	r2, #0
 8001804:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_ETH_Init+0x80>)
 8001808:	4a15      	ldr	r2, [pc, #84]	; (8001860 <MX_ETH_Init+0x88>)
 800180a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_ETH_Init+0x80>)
 800180e:	2201      	movs	r2, #1
 8001810:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_ETH_Init+0x80>)
 8001814:	4a13      	ldr	r2, [pc, #76]	; (8001864 <MX_ETH_Init+0x8c>)
 8001816:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_ETH_Init+0x80>)
 800181a:	4a13      	ldr	r2, [pc, #76]	; (8001868 <MX_ETH_Init+0x90>)
 800181c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_ETH_Init+0x80>)
 8001820:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001824:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001826:	480c      	ldr	r0, [pc, #48]	; (8001858 <MX_ETH_Init+0x80>)
 8001828:	f003 fb80 	bl	8004f2c <HAL_ETH_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001832:	f000 fa4d 	bl	8001cd0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001836:	2238      	movs	r2, #56	; 0x38
 8001838:	2100      	movs	r1, #0
 800183a:	480c      	ldr	r0, [pc, #48]	; (800186c <MX_ETH_Init+0x94>)
 800183c:	f009 fa9c 	bl	800ad78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <MX_ETH_Init+0x94>)
 8001842:	2221      	movs	r2, #33	; 0x21
 8001844:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_ETH_Init+0x94>)
 8001848:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800184c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <MX_ETH_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	24000124 	.word	0x24000124
 800185c:	40028000 	.word	0x40028000
 8001860:	24000d30 	.word	0x24000d30
 8001864:	24000070 	.word	0x24000070
 8001868:	24000010 	.word	0x24000010
 800186c:	240000ec 	.word	0x240000ec

08001870 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_SPI3_Init+0xa8>)
 8001876:	4a29      	ldr	r2, [pc, #164]	; (800191c <MX_SPI3_Init+0xac>)
 8001878:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <MX_SPI3_Init+0xa8>)
 800187c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001880:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_SPI3_Init+0xa8>)
 8001884:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001888:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <MX_SPI3_Init+0xa8>)
 800188c:	2207      	movs	r2, #7
 800188e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_SPI3_Init+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <MX_SPI3_Init+0xa8>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_SPI3_Init+0xa8>)
 800189e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018a4:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_SPI3_Init+0xa8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_SPI3_Init+0xa8>)
 8001904:	f006 fe34 	bl	8008570 <HAL_SPI_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800190e:	f000 f9df 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	240001d4 	.word	0x240001d4
 800191c:	40003c00 	.word	0x40003c00

08001920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 8001926:	4a23      	ldr	r2, [pc, #140]	; (80019b4 <MX_USART3_UART_Init+0x94>)
 8001928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 800192c:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <MX_USART3_UART_Init+0x98>)
 800192e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 8001944:	220c      	movs	r2, #12
 8001946:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 8001956:	2200      	movs	r2, #0
 8001958:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 8001962:	2200      	movs	r2, #0
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001966:	4812      	ldr	r0, [pc, #72]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 8001968:	f007 f9e3 	bl	8008d32 <HAL_UART_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001972:	f000 f9ad 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001976:	2100      	movs	r1, #0
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 800197a:	f008 fe05 	bl	800a588 <HAL_UARTEx_SetTxFifoThreshold>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001984:	f000 f9a4 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001988:	2100      	movs	r1, #0
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 800198c:	f008 fe3a 	bl	800a604 <HAL_UARTEx_SetRxFifoThreshold>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001996:	f000 f99b 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART3_UART_Init+0x90>)
 800199c:	f008 fdbb 	bl	800a516 <HAL_UARTEx_DisableFifoMode>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80019a6:	f000 f993 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2400025c 	.word	0x2400025c
 80019b4:	40004800 	.word	0x40004800
 80019b8:	0005dc00 	.word	0x0005dc00

080019bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019c2:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80019c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019c8:	2209      	movs	r2, #9
 80019ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ce:	2202      	movs	r2, #2
 80019d0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019da:	2202      	movs	r2, #2
 80019dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a04:	f004 f8e0 	bl	8005bc8 <HAL_PCD_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001a0e:	f000 f95f 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	240003dc 	.word	0x240003dc
 8001a1c:	40080000 	.word	0x40080000

08001a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_DMA_Init+0x4c>)
 8001a28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <MX_DMA_Init+0x4c>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <MX_DMA_Init+0x4c>)
 8001a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	200c      	movs	r0, #12
 8001a4a:	f001 f814 	bl	8002a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a4e:	200c      	movs	r0, #12
 8001a50:	f001 f82b 	bl	8002aaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	200f      	movs	r0, #15
 8001a5a:	f001 f80c 	bl	8002a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a5e:	200f      	movs	r0, #15
 8001a60:	f001 f823 	bl	8002aaa <HAL_NVIC_EnableIRQ>

}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	58024400 	.word	0x58024400

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8c:	4a88      	ldr	r2, [pc, #544]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a96:	4b86      	ldr	r3, [pc, #536]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa4:	4b82      	ldr	r3, [pc, #520]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aaa:	4a81      	ldr	r2, [pc, #516]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab4:	4b7e      	ldr	r3, [pc, #504]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac8:	4a79      	ldr	r2, [pc, #484]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad2:	4b77      	ldr	r3, [pc, #476]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae0:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae6:	4a72      	ldr	r2, [pc, #456]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af0:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001afe:	4b6c      	ldr	r3, [pc, #432]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b04:	4a6a      	ldr	r2, [pc, #424]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b06:	f043 0320 	orr.w	r3, r3, #32
 8001b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0e:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1c:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b24:	f043 0310 	orr.w	r3, r3, #16
 8001b28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2c:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	4a5b      	ldr	r2, [pc, #364]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b42:	f043 0308 	orr.w	r3, r3, #8
 8001b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4a:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b58:	4b55      	ldr	r3, [pc, #340]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	4a54      	ldr	r2, [pc, #336]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b68:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8001b7c:	484d      	ldr	r0, [pc, #308]	; (8001cb4 <MX_GPIO_Init+0x244>)
 8001b7e:	f003 ffc1 	bl	8005b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b88:	484a      	ldr	r0, [pc, #296]	; (8001cb4 <MX_GPIO_Init+0x244>)
 8001b8a:	f003 ffbb 	bl	8005b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b94:	4848      	ldr	r0, [pc, #288]	; (8001cb8 <MX_GPIO_Init+0x248>)
 8001b96:	f003 ffb5 	bl	8005b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ba0:	4846      	ldr	r0, [pc, #280]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001ba2:	f003 ffaf 	bl	8005b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bac:	4844      	ldr	r0, [pc, #272]	; (8001cc0 <MX_GPIO_Init+0x250>)
 8001bae:	f003 ffa9 	bl	8005b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8001bb2:	230d      	movs	r3, #13
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	483f      	ldr	r0, [pc, #252]	; (8001cc4 <MX_GPIO_Init+0x254>)
 8001bc6:	f003 fdd5 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001bca:	2308      	movs	r3, #8
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bda:	4619      	mov	r1, r3
 8001bdc:	483a      	ldr	r0, [pc, #232]	; (8001cc8 <MX_GPIO_Init+0x258>)
 8001bde:	f003 fdc9 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8001be2:	2302      	movs	r3, #2
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4830      	ldr	r0, [pc, #192]	; (8001cb8 <MX_GPIO_Init+0x248>)
 8001bf6:	f003 fdbd 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8001bfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	482f      	ldr	r0, [pc, #188]	; (8001ccc <MX_GPIO_Init+0x25c>)
 8001c10:	f003 fdb0 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8001c14:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4821      	ldr	r0, [pc, #132]	; (8001cb4 <MX_GPIO_Init+0x244>)
 8001c2e:	f003 fda1 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001c32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481b      	ldr	r0, [pc, #108]	; (8001cb8 <MX_GPIO_Init+0x248>)
 8001c4c:	f003 fd92 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4814      	ldr	r0, [pc, #80]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001c6a:	f003 fd83 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	4619      	mov	r1, r3
 8001c82:	480f      	ldr	r0, [pc, #60]	; (8001cc0 <MX_GPIO_Init+0x250>)
 8001c84:	f003 fd76 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_GPIO_Init+0x250>)
 8001ca2:	f003 fd67 	bl	8005774 <HAL_GPIO_Init>

}
 8001ca6:	bf00      	nop
 8001ca8:	3738      	adds	r7, #56	; 0x38
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	58024400 	.word	0x58024400
 8001cb4:	58021000 	.word	0x58021000
 8001cb8:	58020400 	.word	0x58020400
 8001cbc:	58020c00 	.word	0x58020c00
 8001cc0:	58021800 	.word	0x58021800
 8001cc4:	58020800 	.word	0x58020800
 8001cc8:	58020000 	.word	0x58020000
 8001ccc:	58021400 	.word	0x58021400

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <Error_Handler+0x8>
	...

08001cdc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce6:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <ST7735_Select+0x14>)
 8001ce8:	f003 ff0c 	bl	8005b04 <HAL_GPIO_WritePin>
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	58021000 	.word	0x58021000

08001cf4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cfe:	4802      	ldr	r0, [pc, #8]	; (8001d08 <ST7735_Unselect+0x14>)
 8001d00:	f003 ff00 	bl	8005b04 <HAL_GPIO_WritePin>
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	58021000 	.word	0x58021000

08001d0c <ST7735_Select1>:
static void ST7735_Select1() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d16:	4802      	ldr	r0, [pc, #8]	; (8001d20 <ST7735_Select1+0x14>)
 8001d18:	f003 fef4 	bl	8005b04 <HAL_GPIO_WritePin>
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	58021000 	.word	0x58021000

08001d24 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d2e:	4802      	ldr	r0, [pc, #8]	; (8001d38 <ST7735_Unselect1+0x14>)
 8001d30:	f003 fee8 	bl	8005b04 <HAL_GPIO_WritePin>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	58021000 	.word	0x58021000

08001d3c <ST7735_Reset>:

static void ST7735_Reset() {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <ST7735_Reset+0x28>)
 8001d48:	f003 fedc 	bl	8005b04 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001d4c:	2005      	movs	r0, #5
 8001d4e:	f000 fd73 	bl	8002838 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <ST7735_Reset+0x28>)
 8001d5a:	f003 fed3 	bl	8005b04 <HAL_GPIO_WritePin>
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	58021000 	.word	0x58021000

08001d68 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d78:	4806      	ldr	r0, [pc, #24]	; (8001d94 <ST7735_WriteCommand+0x2c>)
 8001d7a:	f003 fec3 	bl	8005b04 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001d7e:	1df9      	adds	r1, r7, #7
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
 8001d84:	2201      	movs	r2, #1
 8001d86:	4804      	ldr	r0, [pc, #16]	; (8001d98 <ST7735_WriteCommand+0x30>)
 8001d88:	f006 fcf8 	bl	800877c <HAL_SPI_Transmit>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	58021800 	.word	0x58021800
 8001d98:	240001d4 	.word	0x240001d4

08001d9c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <ST7735_WriteData+0x30>)
 8001dae:	f003 fea9 	bl	8005b04 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <ST7735_WriteData+0x34>)
 8001dbe:	f006 fcdd 	bl	800877c <HAL_SPI_Transmit>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	58021800 	.word	0x58021800
 8001dd0:	240001d4 	.word	0x240001d4

08001dd4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001de6:	e034      	b.n	8001e52 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ffb7 	bl	8001d68 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001e04:	7abb      	ldrb	r3, [r7, #10]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001e0e:	7abb      	ldrb	r3, [r7, #10]
 8001e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e14:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001e16:	7abb      	ldrb	r3, [r7, #10]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001e1c:	7abb      	ldrb	r3, [r7, #10]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ffbb 	bl	8001d9c <ST7735_WriteData>
            addr += numArgs;
 8001e26:	7abb      	ldrb	r3, [r7, #10]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001e2e:	89bb      	ldrh	r3, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001e3e:	89bb      	ldrh	r3, [r7, #12]
 8001e40:	2bff      	cmp	r3, #255	; 0xff
 8001e42:	d102      	bne.n	8001e4a <ST7735_ExecuteCommandList+0x76>
 8001e44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e48:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001e4a:	89bb      	ldrh	r3, [r7, #12]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fcf3 	bl	8002838 <HAL_Delay>
    while(numCommands--) {
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	73fa      	strb	r2, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1c5      	bne.n	8001de8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001e66:	b590      	push	{r4, r7, lr}
 8001e68:	b085      	sub	sp, #20
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	4608      	mov	r0, r1
 8001e70:	4611      	mov	r1, r2
 8001e72:	461a      	mov	r2, r3
 8001e74:	4623      	mov	r3, r4
 8001e76:	71fb      	strb	r3, [r7, #7]
 8001e78:	4603      	mov	r3, r0
 8001e7a:	71bb      	strb	r3, [r7, #6]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	717b      	strb	r3, [r7, #5]
 8001e80:	4613      	mov	r3, r2
 8001e82:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001e84:	202a      	movs	r0, #42	; 0x2a
 8001e86:	f7ff ff6f 	bl	8001d68 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	733b      	strb	r3, [r7, #12]
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	3302      	adds	r3, #2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	737b      	strb	r3, [r7, #13]
 8001e96:	2300      	movs	r3, #0
 8001e98:	73bb      	strb	r3, [r7, #14]
 8001e9a:	797b      	ldrb	r3, [r7, #5]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff77 	bl	8001d9c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001eae:	202b      	movs	r0, #43	; 0x2b
 8001eb0:	f7ff ff5a 	bl	8001d68 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001ebc:	793b      	ldrb	r3, [r7, #4]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	2104      	movs	r1, #4
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff66 	bl	8001d9c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001ed0:	202c      	movs	r0, #44	; 0x2c
 8001ed2:	f7ff ff49 	bl	8001d68 <ST7735_WriteCommand>
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}
	...

08001ee0 <ST7735_Init>:

void ST7735_Init() {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001ee4:	f7ff fefa 	bl	8001cdc <ST7735_Select>
    ST7735_Select1();
 8001ee8:	f7ff ff10 	bl	8001d0c <ST7735_Select1>
    ST7735_Reset();
 8001eec:	f7ff ff26 	bl	8001d3c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001ef0:	4807      	ldr	r0, [pc, #28]	; (8001f10 <ST7735_Init+0x30>)
 8001ef2:	f7ff ff6f 	bl	8001dd4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001ef6:	4807      	ldr	r0, [pc, #28]	; (8001f14 <ST7735_Init+0x34>)
 8001ef8:	f7ff ff6c 	bl	8001dd4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001efc:	4806      	ldr	r0, [pc, #24]	; (8001f18 <ST7735_Init+0x38>)
 8001efe:	f7ff ff69 	bl	8001dd4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001f02:	f7ff fef7 	bl	8001cf4 <ST7735_Unselect>
    ST7735_Unselect1();
 8001f06:	f7ff ff0d 	bl	8001d24 <ST7735_Unselect1>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	0800adb0 	.word	0x0800adb0
 8001f14:	0800adec 	.word	0x0800adec
 8001f18:	0800adfc 	.word	0x0800adfc

08001f1c <ST7735_FillRectangle>:
    }

    ST7735_Unselect1();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4604      	mov	r4, r0
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	80fb      	strh	r3, [r7, #6]
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80bb      	strh	r3, [r7, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	807b      	strh	r3, [r7, #2]
 8001f36:	4613      	mov	r3, r2
 8001f38:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f3e:	d858      	bhi.n	8001ff2 <ST7735_FillRectangle+0xd6>
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	2b7f      	cmp	r3, #127	; 0x7f
 8001f44:	d855      	bhi.n	8001ff2 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	2b80      	cmp	r3, #128	; 0x80
 8001f4e:	dd03      	ble.n	8001f58 <ST7735_FillRectangle+0x3c>
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001f56:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001f58:	88ba      	ldrh	r2, [r7, #4]
 8001f5a:	883b      	ldrh	r3, [r7, #0]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2b80      	cmp	r3, #128	; 0x80
 8001f60:	dd03      	ble.n	8001f6a <ST7735_FillRectangle+0x4e>
 8001f62:	88bb      	ldrh	r3, [r7, #4]
 8001f64:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001f68:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001f6a:	f7ff feb7 	bl	8001cdc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	b2d8      	uxtb	r0, r3
 8001f72:	88bb      	ldrh	r3, [r7, #4]
 8001f74:	b2d9      	uxtb	r1, r3
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b2dc      	uxtb	r4, r3
 8001f86:	88bb      	ldrh	r3, [r7, #4]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	883b      	ldrh	r3, [r7, #0]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	4622      	mov	r2, r4
 8001f98:	f7ff ff65 	bl	8001e66 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001f9c:	8c3b      	ldrh	r3, [r7, #32]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	733b      	strb	r3, [r7, #12]
 8001fa6:	8c3b      	ldrh	r3, [r7, #32]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb2:	4812      	ldr	r0, [pc, #72]	; (8001ffc <ST7735_FillRectangle+0xe0>)
 8001fb4:	f003 fda6 	bl	8005b04 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001fb8:	883b      	ldrh	r3, [r7, #0]
 8001fba:	80bb      	strh	r3, [r7, #4]
 8001fbc:	e013      	b.n	8001fe6 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	80fb      	strh	r3, [r7, #6]
 8001fc2:	e00a      	b.n	8001fda <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001fc4:	f107 010c 	add.w	r1, r7, #12
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fcc:	2202      	movs	r2, #2
 8001fce:	480c      	ldr	r0, [pc, #48]	; (8002000 <ST7735_FillRectangle+0xe4>)
 8001fd0:	f006 fbd4 	bl	800877c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	80fb      	strh	r3, [r7, #6]
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f1      	bne.n	8001fc4 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8001fe0:	88bb      	ldrh	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	80bb      	strh	r3, [r7, #4]
 8001fe6:	88bb      	ldrh	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e8      	bne.n	8001fbe <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8001fec:	f7ff fe82 	bl	8001cf4 <ST7735_Unselect>
 8001ff0:	e000      	b.n	8001ff4 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001ff2:	bf00      	nop
}
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	58021800 	.word	0x58021800
 8002000:	240001d4 	.word	0x240001d4

08002004 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	4604      	mov	r4, r0
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4623      	mov	r3, r4
 8002014:	80fb      	strh	r3, [r7, #6]
 8002016:	4603      	mov	r3, r0
 8002018:	80bb      	strh	r3, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	807b      	strh	r3, [r7, #2]
 800201e:	4613      	mov	r3, r2
 8002020:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	2b7f      	cmp	r3, #127	; 0x7f
 8002026:	d858      	bhi.n	80020da <ST7735_FillRectangle1+0xd6>
 8002028:	88bb      	ldrh	r3, [r7, #4]
 800202a:	2b7f      	cmp	r3, #127	; 0x7f
 800202c:	d855      	bhi.n	80020da <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800202e:	88fa      	ldrh	r2, [r7, #6]
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	4413      	add	r3, r2
 8002034:	2b80      	cmp	r3, #128	; 0x80
 8002036:	dd03      	ble.n	8002040 <ST7735_FillRectangle1+0x3c>
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800203e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002040:	88ba      	ldrh	r2, [r7, #4]
 8002042:	883b      	ldrh	r3, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	2b80      	cmp	r3, #128	; 0x80
 8002048:	dd03      	ble.n	8002052 <ST7735_FillRectangle1+0x4e>
 800204a:	88bb      	ldrh	r3, [r7, #4]
 800204c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002050:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 8002052:	f7ff fe5b 	bl	8001d0c <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	b2d8      	uxtb	r0, r3
 800205a:	88bb      	ldrh	r3, [r7, #4]
 800205c:	b2d9      	uxtb	r1, r3
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	4413      	add	r3, r2
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b2dc      	uxtb	r4, r3
 800206e:	88bb      	ldrh	r3, [r7, #4]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	883b      	ldrh	r3, [r7, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4413      	add	r3, r2
 8002078:	b2db      	uxtb	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	4622      	mov	r2, r4
 8002080:	f7ff fef1 	bl	8001e66 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002084:	8c3b      	ldrh	r3, [r7, #32]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	b29b      	uxth	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	733b      	strb	r3, [r7, #12]
 800208e:	8c3b      	ldrh	r3, [r7, #32]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002094:	2201      	movs	r2, #1
 8002096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800209a:	4812      	ldr	r0, [pc, #72]	; (80020e4 <ST7735_FillRectangle1+0xe0>)
 800209c:	f003 fd32 	bl	8005b04 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80020a0:	883b      	ldrh	r3, [r7, #0]
 80020a2:	80bb      	strh	r3, [r7, #4]
 80020a4:	e013      	b.n	80020ce <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 80020a6:	887b      	ldrh	r3, [r7, #2]
 80020a8:	80fb      	strh	r3, [r7, #6]
 80020aa:	e00a      	b.n	80020c2 <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80020ac:	f107 010c 	add.w	r1, r7, #12
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295
 80020b4:	2202      	movs	r2, #2
 80020b6:	480c      	ldr	r0, [pc, #48]	; (80020e8 <ST7735_FillRectangle1+0xe4>)
 80020b8:	f006 fb60 	bl	800877c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	3b01      	subs	r3, #1
 80020c0:	80fb      	strh	r3, [r7, #6]
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f1      	bne.n	80020ac <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 80020c8:	88bb      	ldrh	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	80bb      	strh	r3, [r7, #4]
 80020ce:	88bb      	ldrh	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e8      	bne.n	80020a6 <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 80020d4:	f7ff fe26 	bl	8001d24 <ST7735_Unselect1>
 80020d8:	e000      	b.n	80020dc <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80020da:	bf00      	nop
}
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	58021800 	.word	0x58021800
 80020e8:	240001d4 	.word	0x240001d4

080020ec <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	2100      	movs	r1, #0
 8002100:	2000      	movs	r0, #0
 8002102:	f7ff ff0b 	bl	8001f1c <ST7735_FillRectangle>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af02      	add	r7, sp, #8
 8002114:	4603      	mov	r3, r0
 8002116:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	2100      	movs	r1, #0
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff ff6e 	bl	8002004 <ST7735_FillRectangle1>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_MspInit+0x30>)
 8002138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800213c:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_MspInit+0x30>)
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_MspInit+0x30>)
 8002148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	58024400 	.word	0x58024400

08002164 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08e      	sub	sp, #56	; 0x38
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a59      	ldr	r2, [pc, #356]	; (80022e8 <HAL_ETH_MspInit+0x184>)
 8002182:	4293      	cmp	r3, r2
 8002184:	f040 80ab 	bne.w	80022de <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002188:	4b58      	ldr	r3, [pc, #352]	; (80022ec <HAL_ETH_MspInit+0x188>)
 800218a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800218e:	4a57      	ldr	r2, [pc, #348]	; (80022ec <HAL_ETH_MspInit+0x188>)
 8002190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002194:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002198:	4b54      	ldr	r3, [pc, #336]	; (80022ec <HAL_ETH_MspInit+0x188>)
 800219a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800219e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a2:	623b      	str	r3, [r7, #32]
 80021a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80021a6:	4b51      	ldr	r3, [pc, #324]	; (80022ec <HAL_ETH_MspInit+0x188>)
 80021a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021ac:	4a4f      	ldr	r2, [pc, #316]	; (80022ec <HAL_ETH_MspInit+0x188>)
 80021ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021b6:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <HAL_ETH_MspInit+0x188>)
 80021b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80021c4:	4b49      	ldr	r3, [pc, #292]	; (80022ec <HAL_ETH_MspInit+0x188>)
 80021c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021ca:	4a48      	ldr	r2, [pc, #288]	; (80022ec <HAL_ETH_MspInit+0x188>)
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021d4:	4b45      	ldr	r3, [pc, #276]	; (80022ec <HAL_ETH_MspInit+0x188>)
 80021d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_ETH_MspInit+0x188>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e8:	4a40      	ldr	r2, [pc, #256]	; (80022ec <HAL_ETH_MspInit+0x188>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f2:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <HAL_ETH_MspInit+0x188>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_ETH_MspInit+0x188>)
 8002202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002206:	4a39      	ldr	r2, [pc, #228]	; (80022ec <HAL_ETH_MspInit+0x188>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_ETH_MspInit+0x188>)
 8002212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_ETH_MspInit+0x188>)
 8002220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002224:	4a31      	ldr	r2, [pc, #196]	; (80022ec <HAL_ETH_MspInit+0x188>)
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800222e:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_ETH_MspInit+0x188>)
 8002230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_ETH_MspInit+0x188>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002242:	4a2a      	ldr	r2, [pc, #168]	; (80022ec <HAL_ETH_MspInit+0x188>)
 8002244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_ETH_MspInit+0x188>)
 800224e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800225a:	2332      	movs	r3, #50	; 0x32
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800226a:	230b      	movs	r3, #11
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002272:	4619      	mov	r1, r3
 8002274:	481e      	ldr	r0, [pc, #120]	; (80022f0 <HAL_ETH_MspInit+0x18c>)
 8002276:	f003 fa7d 	bl	8005774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800227a:	2386      	movs	r3, #134	; 0x86
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800228a:	230b      	movs	r3, #11
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002292:	4619      	mov	r1, r3
 8002294:	4817      	ldr	r0, [pc, #92]	; (80022f4 <HAL_ETH_MspInit+0x190>)
 8002296:	f003 fa6d 	bl	8005774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800229a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022ac:	230b      	movs	r3, #11
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b4:	4619      	mov	r1, r3
 80022b6:	4810      	ldr	r0, [pc, #64]	; (80022f8 <HAL_ETH_MspInit+0x194>)
 80022b8:	f003 fa5c 	bl	8005774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80022bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022ce:	230b      	movs	r3, #11
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d6:	4619      	mov	r1, r3
 80022d8:	4808      	ldr	r0, [pc, #32]	; (80022fc <HAL_ETH_MspInit+0x198>)
 80022da:	f003 fa4b 	bl	8005774 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80022de:	bf00      	nop
 80022e0:	3738      	adds	r7, #56	; 0x38
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40028000 	.word	0x40028000
 80022ec:	58024400 	.word	0x58024400
 80022f0:	58020800 	.word	0x58020800
 80022f4:	58020000 	.word	0x58020000
 80022f8:	58020400 	.word	0x58020400
 80022fc:	58021800 	.word	0x58021800

08002300 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <HAL_SPI_MspInit+0xc8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d14d      	bne.n	80023be <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_SPI_MspInit+0xcc>)
 8002324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002328:	4a28      	ldr	r2, [pc, #160]	; (80023cc <HAL_SPI_MspInit+0xcc>)
 800232a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <HAL_SPI_MspInit+0xcc>)
 8002334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_SPI_MspInit+0xcc>)
 8002342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002346:	4a21      	ldr	r2, [pc, #132]	; (80023cc <HAL_SPI_MspInit+0xcc>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002350:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <HAL_SPI_MspInit+0xcc>)
 8002352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_SPI_MspInit+0xcc>)
 8002360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002364:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_SPI_MspInit+0xcc>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_SPI_MspInit+0xcc>)
 8002370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800237c:	2304      	movs	r3, #4
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002384:	2302      	movs	r3, #2
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800238c:	2307      	movs	r3, #7
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	480e      	ldr	r0, [pc, #56]	; (80023d0 <HAL_SPI_MspInit+0xd0>)
 8002398:	f003 f9ec 	bl	8005774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800239c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023ae:	2306      	movs	r3, #6
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4806      	ldr	r0, [pc, #24]	; (80023d4 <HAL_SPI_MspInit+0xd4>)
 80023ba:	f003 f9db 	bl	8005774 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40003c00 	.word	0x40003c00
 80023cc:	58024400 	.word	0x58024400
 80023d0:	58020400 	.word	0x58020400
 80023d4:	58020800 	.word	0x58020800

080023d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b0b8      	sub	sp, #224	; 0xe0
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023f0:	f107 0310 	add.w	r3, r7, #16
 80023f4:	22bc      	movs	r2, #188	; 0xbc
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f008 fcbd 	bl	800ad78 <memset>
  if(huart->Instance==USART3)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a57      	ldr	r2, [pc, #348]	; (8002560 <HAL_UART_MspInit+0x188>)
 8002404:	4293      	cmp	r3, r2
 8002406:	f040 80a6 	bne.w	8002556 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800240a:	2302      	movs	r3, #2
 800240c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800240e:	2300      	movs	r3, #0
 8002410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	4618      	mov	r0, r3
 800241a:	f004 fd41 	bl	8006ea0 <HAL_RCCEx_PeriphCLKConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002424:	f7ff fc54 	bl	8001cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002428:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <HAL_UART_MspInit+0x18c>)
 800242a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800242e:	4a4d      	ldr	r2, [pc, #308]	; (8002564 <HAL_UART_MspInit+0x18c>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002434:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002438:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_UART_MspInit+0x18c>)
 800243a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800243e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_UART_MspInit+0x18c>)
 8002448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244c:	4a45      	ldr	r2, [pc, #276]	; (8002564 <HAL_UART_MspInit+0x18c>)
 800244e:	f043 0308 	orr.w	r3, r3, #8
 8002452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002456:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_UART_MspInit+0x18c>)
 8002458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002464:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002468:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800247e:	2307      	movs	r3, #7
 8002480:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002484:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002488:	4619      	mov	r1, r3
 800248a:	4837      	ldr	r0, [pc, #220]	; (8002568 <HAL_UART_MspInit+0x190>)
 800248c:	f003 f972 	bl	8005774 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_UART_MspInit+0x194>)
 8002492:	4a37      	ldr	r2, [pc, #220]	; (8002570 <HAL_UART_MspInit+0x198>)
 8002494:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002496:	4b35      	ldr	r3, [pc, #212]	; (800256c <HAL_UART_MspInit+0x194>)
 8002498:	222d      	movs	r2, #45	; 0x2d
 800249a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800249c:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_UART_MspInit+0x194>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a2:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_UART_MspInit+0x194>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <HAL_UART_MspInit+0x194>)
 80024aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <HAL_UART_MspInit+0x194>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_UART_MspInit+0x194>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80024bc:	4b2b      	ldr	r3, [pc, #172]	; (800256c <HAL_UART_MspInit+0x194>)
 80024be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_UART_MspInit+0x194>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_UART_MspInit+0x194>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80024d0:	4826      	ldr	r0, [pc, #152]	; (800256c <HAL_UART_MspInit+0x194>)
 80024d2:	f000 fb05 	bl	8002ae0 <HAL_DMA_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80024dc:	f7ff fbf8 	bl	8001cd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a22      	ldr	r2, [pc, #136]	; (800256c <HAL_UART_MspInit+0x194>)
 80024e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80024e6:	4a21      	ldr	r2, [pc, #132]	; (800256c <HAL_UART_MspInit+0x194>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_UART_MspInit+0x19c>)
 80024ee:	4a22      	ldr	r2, [pc, #136]	; (8002578 <HAL_UART_MspInit+0x1a0>)
 80024f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_UART_MspInit+0x19c>)
 80024f4:	222e      	movs	r2, #46	; 0x2e
 80024f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_UART_MspInit+0x19c>)
 80024fa:	2240      	movs	r2, #64	; 0x40
 80024fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_UART_MspInit+0x19c>)
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_UART_MspInit+0x19c>)
 8002506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800250a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_UART_MspInit+0x19c>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_UART_MspInit+0x19c>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <HAL_UART_MspInit+0x19c>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_UART_MspInit+0x19c>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_UART_MspInit+0x19c>)
 8002526:	2200      	movs	r2, #0
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800252a:	4812      	ldr	r0, [pc, #72]	; (8002574 <HAL_UART_MspInit+0x19c>)
 800252c:	f000 fad8 	bl	8002ae0 <HAL_DMA_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8002536:	f7ff fbcb 	bl	8001cd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <HAL_UART_MspInit+0x19c>)
 800253e:	679a      	str	r2, [r3, #120]	; 0x78
 8002540:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <HAL_UART_MspInit+0x19c>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2027      	movs	r0, #39	; 0x27
 800254c:	f000 fa93 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002550:	2027      	movs	r0, #39	; 0x27
 8002552:	f000 faaa 	bl	8002aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002556:	bf00      	nop
 8002558:	37e0      	adds	r7, #224	; 0xe0
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40004800 	.word	0x40004800
 8002564:	58024400 	.word	0x58024400
 8002568:	58020c00 	.word	0x58020c00
 800256c:	240002ec 	.word	0x240002ec
 8002570:	40020028 	.word	0x40020028
 8002574:	24000364 	.word	0x24000364
 8002578:	40020070 	.word	0x40020070

0800257c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a22      	ldr	r2, [pc, #136]	; (8002624 <HAL_PCD_MspInit+0xa8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d13d      	bne.n	800261a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800259e:	f003 fcb5 	bl	8005f0c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_PCD_MspInit+0xac>)
 80025a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a8:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_PCD_MspInit+0xac>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_PCD_MspInit+0xac>)
 80025b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80025c0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80025d2:	230a      	movs	r3, #10
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4813      	ldr	r0, [pc, #76]	; (800262c <HAL_PCD_MspInit+0xb0>)
 80025de:	f003 f8c9 	bl	8005774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	480d      	ldr	r0, [pc, #52]	; (800262c <HAL_PCD_MspInit+0xb0>)
 80025f8:	f003 f8bc 	bl	8005774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_PCD_MspInit+0xac>)
 80025fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <HAL_PCD_MspInit+0xac>)
 8002604:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002608:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_PCD_MspInit+0xac>)
 800260e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800261a:	bf00      	nop
 800261c:	3728      	adds	r7, #40	; 0x28
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40080000 	.word	0x40080000
 8002628:	58024400 	.word	0x58024400
 800262c:	58020000 	.word	0x58020000

08002630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <NMI_Handler+0x4>

08002636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <HardFault_Handler+0x4>

0800263c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <MemManage_Handler+0x4>

08002642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <BusFault_Handler+0x4>

08002648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <UsageFault_Handler+0x4>

0800264e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800267c:	f000 f8bc 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <DMA1_Stream1_IRQHandler+0x10>)
 800268a:	f001 fae9 	bl	8003c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	240002ec 	.word	0x240002ec

08002698 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <DMA1_Stream4_IRQHandler+0x10>)
 800269e:	f001 fadf 	bl	8003c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	24000364 	.word	0x24000364

080026ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <USART3_IRQHandler+0x10>)
 80026b2:	f006 fb8f 	bl	8008dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2400025c 	.word	0x2400025c

080026c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c4:	f7fe fec0 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c8:	480c      	ldr	r0, [pc, #48]	; (80026fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ca:	490d      	ldr	r1, [pc, #52]	; (8002700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026e0:	4c0a      	ldr	r4, [pc, #40]	; (800270c <LoopFillZerobss+0x22>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ee:	f008 fb1f 	bl	800ad30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f2:	f7fe ff3f 	bl	8001574 <main>
  bx  lr
 80026f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002700:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002704:	0800ae68 	.word	0x0800ae68
  ldr r2, =_sbss
 8002708:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800270c:	24000d3c 	.word	0x24000d3c

08002710 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC3_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271a:	2003      	movs	r0, #3
 800271c:	f000 f9a0 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002720:	f004 f9e8 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_Init+0x68>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	4913      	ldr	r1, [pc, #76]	; (8002780 <HAL_Init+0x6c>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
 800273c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <HAL_Init+0x68>)
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <HAL_Init+0x6c>)
 8002748:	5cd3      	ldrb	r3, [r2, r3]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_Init+0x70>)
 8002756:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002758:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <HAL_Init+0x74>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275e:	2000      	movs	r0, #0
 8002760:	f000 f814 	bl	800278c <HAL_InitTick>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e002      	b.n	8002774 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800276e:	f7ff fcdf 	bl	8002130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	58024400 	.word	0x58024400
 8002780:	0800ada0 	.word	0x0800ada0
 8002784:	24000004 	.word	0x24000004
 8002788:	24000000 	.word	0x24000000

0800278c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_InitTick+0x60>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e021      	b.n	80027e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_InitTick+0x64>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_InitTick+0x60>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f985 	bl	8002ac6 <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00e      	b.n	80027e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d80a      	bhi.n	80027e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f000 f94f 	bl	8002a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <HAL_InitTick+0x68>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	2400000c 	.word	0x2400000c
 80027f0:	24000000 	.word	0x24000000
 80027f4:	24000008 	.word	0x24000008

080027f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x20>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x24>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_IncTick+0x24>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	2400000c 	.word	0x2400000c
 800281c:	24000d38 	.word	0x24000d38

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	24000d38 	.word	0x24000d38

08002838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff ffee 	bl	8002820 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d005      	beq.n	800285e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_Delay+0x44>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800285e:	bf00      	nop
 8002860:	f7ff ffde 	bl	8002820 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d8f7      	bhi.n	8002860 <HAL_Delay+0x28>
  {
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2400000c 	.word	0x2400000c

08002880 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_GetREVID+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0c1b      	lsrs	r3, r3, #16
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	5c001000 	.word	0x5c001000

08002898 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80028a8:	4904      	ldr	r1, [pc, #16]	; (80028bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	58000400 	.word	0x58000400

080028c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <__NVIC_SetPriorityGrouping+0x40>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028dc:	4013      	ands	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__NVIC_SetPriorityGrouping+0x40>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00
 8002904:	05fa0000 	.word	0x05fa0000

08002908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <__NVIC_GetPriorityGrouping+0x18>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	f003 0307 	and.w	r3, r3, #7
}
 8002916:	4618      	mov	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800292e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002932:	2b00      	cmp	r3, #0
 8002934:	db0b      	blt.n	800294e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <__NVIC_EnableIRQ+0x38>)
 800293e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	2001      	movs	r0, #1
 8002946:	fa00 f202 	lsl.w	r2, r0, r2
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000e100 	.word	0xe000e100

08002960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	6039      	str	r1, [r7, #0]
 800296a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800296c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002970:	2b00      	cmp	r3, #0
 8002972:	db0a      	blt.n	800298a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	490c      	ldr	r1, [pc, #48]	; (80029ac <__NVIC_SetPriority+0x4c>)
 800297a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	440b      	add	r3, r1
 8002984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002988:	e00a      	b.n	80029a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <__NVIC_SetPriority+0x50>)
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3b04      	subs	r3, #4
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	440b      	add	r3, r1
 800299e:	761a      	strb	r2, [r3, #24]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000e100 	.word	0xe000e100
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f1c3 0307 	rsb	r3, r3, #7
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	bf28      	it	cs
 80029d2:	2304      	movcs	r3, #4
 80029d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3304      	adds	r3, #4
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d902      	bls.n	80029e4 <NVIC_EncodePriority+0x30>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3b03      	subs	r3, #3
 80029e2:	e000      	b.n	80029e6 <NVIC_EncodePriority+0x32>
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	401a      	ands	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43d9      	mvns	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	4313      	orrs	r3, r2
         );
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f7ff ff8e 	bl	8002960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff29 	bl	80028c0 <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a84:	f7ff ff40 	bl	8002908 <__NVIC_GetPriorityGrouping>
 8002a88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	6978      	ldr	r0, [r7, #20]
 8002a90:	f7ff ff90 	bl	80029b4 <NVIC_EncodePriority>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff5f 	bl	8002960 <__NVIC_SetPriority>
}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff33 	bl	8002924 <__NVIC_EnableIRQ>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ffa4 	bl	8002a1c <SysTick_Config>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff fe9a 	bl	8002820 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e316      	b.n	8003126 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a66      	ldr	r2, [pc, #408]	; (8002c98 <HAL_DMA_Init+0x1b8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d04a      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a65      	ldr	r2, [pc, #404]	; (8002c9c <HAL_DMA_Init+0x1bc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d045      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a63      	ldr	r2, [pc, #396]	; (8002ca0 <HAL_DMA_Init+0x1c0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d040      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a62      	ldr	r2, [pc, #392]	; (8002ca4 <HAL_DMA_Init+0x1c4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d03b      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a60      	ldr	r2, [pc, #384]	; (8002ca8 <HAL_DMA_Init+0x1c8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d036      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a5f      	ldr	r2, [pc, #380]	; (8002cac <HAL_DMA_Init+0x1cc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d031      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a5d      	ldr	r2, [pc, #372]	; (8002cb0 <HAL_DMA_Init+0x1d0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02c      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5c      	ldr	r2, [pc, #368]	; (8002cb4 <HAL_DMA_Init+0x1d4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d027      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a5a      	ldr	r2, [pc, #360]	; (8002cb8 <HAL_DMA_Init+0x1d8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d022      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a59      	ldr	r2, [pc, #356]	; (8002cbc <HAL_DMA_Init+0x1dc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d01d      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a57      	ldr	r2, [pc, #348]	; (8002cc0 <HAL_DMA_Init+0x1e0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d018      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a56      	ldr	r2, [pc, #344]	; (8002cc4 <HAL_DMA_Init+0x1e4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a54      	ldr	r2, [pc, #336]	; (8002cc8 <HAL_DMA_Init+0x1e8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00e      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a53      	ldr	r2, [pc, #332]	; (8002ccc <HAL_DMA_Init+0x1ec>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a51      	ldr	r2, [pc, #324]	; (8002cd0 <HAL_DMA_Init+0x1f0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_DMA_Init+0xb8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a50      	ldr	r2, [pc, #320]	; (8002cd4 <HAL_DMA_Init+0x1f4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_DMA_Init+0xbc>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_DMA_Init+0xbe>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 813b 	beq.w	8002e1a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a37      	ldr	r2, [pc, #220]	; (8002c98 <HAL_DMA_Init+0x1b8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d04a      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a36      	ldr	r2, [pc, #216]	; (8002c9c <HAL_DMA_Init+0x1bc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d045      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a34      	ldr	r2, [pc, #208]	; (8002ca0 <HAL_DMA_Init+0x1c0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d040      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a33      	ldr	r2, [pc, #204]	; (8002ca4 <HAL_DMA_Init+0x1c4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d03b      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a31      	ldr	r2, [pc, #196]	; (8002ca8 <HAL_DMA_Init+0x1c8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d036      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a30      	ldr	r2, [pc, #192]	; (8002cac <HAL_DMA_Init+0x1cc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d031      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <HAL_DMA_Init+0x1d0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d02c      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2d      	ldr	r2, [pc, #180]	; (8002cb4 <HAL_DMA_Init+0x1d4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d027      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a2b      	ldr	r2, [pc, #172]	; (8002cb8 <HAL_DMA_Init+0x1d8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d022      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a2a      	ldr	r2, [pc, #168]	; (8002cbc <HAL_DMA_Init+0x1dc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d01d      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a28      	ldr	r2, [pc, #160]	; (8002cc0 <HAL_DMA_Init+0x1e0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d018      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <HAL_DMA_Init+0x1e4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <HAL_DMA_Init+0x1e8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00e      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a24      	ldr	r2, [pc, #144]	; (8002ccc <HAL_DMA_Init+0x1ec>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_DMA_Init+0x1f0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_DMA_Init+0x174>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <HAL_DMA_Init+0x1f4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d108      	bne.n	8002c66 <HAL_DMA_Init+0x186>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e007      	b.n	8002c76 <HAL_DMA_Init+0x196>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0201 	bic.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c76:	e02f      	b.n	8002cd8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c78:	f7ff fdd2 	bl	8002820 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d928      	bls.n	8002cd8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e246      	b.n	8003126 <HAL_DMA_Init+0x646>
 8002c98:	40020010 	.word	0x40020010
 8002c9c:	40020028 	.word	0x40020028
 8002ca0:	40020040 	.word	0x40020040
 8002ca4:	40020058 	.word	0x40020058
 8002ca8:	40020070 	.word	0x40020070
 8002cac:	40020088 	.word	0x40020088
 8002cb0:	400200a0 	.word	0x400200a0
 8002cb4:	400200b8 	.word	0x400200b8
 8002cb8:	40020410 	.word	0x40020410
 8002cbc:	40020428 	.word	0x40020428
 8002cc0:	40020440 	.word	0x40020440
 8002cc4:	40020458 	.word	0x40020458
 8002cc8:	40020470 	.word	0x40020470
 8002ccc:	40020488 	.word	0x40020488
 8002cd0:	400204a0 	.word	0x400204a0
 8002cd4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1c8      	bne.n	8002c78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4b83      	ldr	r3, [pc, #524]	; (8002f00 <HAL_DMA_Init+0x420>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002cfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d107      	bne.n	8002d3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4313      	orrs	r3, r2
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002d3c:	4b71      	ldr	r3, [pc, #452]	; (8002f04 <HAL_DMA_Init+0x424>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b71      	ldr	r3, [pc, #452]	; (8002f08 <HAL_DMA_Init+0x428>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d48:	d328      	bcc.n	8002d9c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b28      	cmp	r3, #40	; 0x28
 8002d50:	d903      	bls.n	8002d5a <HAL_DMA_Init+0x27a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b2e      	cmp	r3, #46	; 0x2e
 8002d58:	d917      	bls.n	8002d8a <HAL_DMA_Init+0x2aa>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d60:	d903      	bls.n	8002d6a <HAL_DMA_Init+0x28a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b42      	cmp	r3, #66	; 0x42
 8002d68:	d90f      	bls.n	8002d8a <HAL_DMA_Init+0x2aa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b46      	cmp	r3, #70	; 0x46
 8002d70:	d903      	bls.n	8002d7a <HAL_DMA_Init+0x29a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b48      	cmp	r3, #72	; 0x48
 8002d78:	d907      	bls.n	8002d8a <HAL_DMA_Init+0x2aa>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b4e      	cmp	r3, #78	; 0x4e
 8002d80:	d905      	bls.n	8002d8e <HAL_DMA_Init+0x2ae>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b52      	cmp	r3, #82	; 0x52
 8002d88:	d801      	bhi.n	8002d8e <HAL_DMA_Init+0x2ae>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_DMA_Init+0x2b0>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f023 0307 	bic.w	r3, r3, #7
 8002db2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d117      	bne.n	8002df6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00e      	beq.n	8002df6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f001 ff1d 	bl	8004c18 <DMA_CheckFifoParam>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2240      	movs	r2, #64	; 0x40
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e197      	b.n	8003126 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 fe58 	bl	8004ab4 <DMA_CalcBaseAndBitshift>
 8002e04:	4603      	mov	r3, r0
 8002e06:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	223f      	movs	r2, #63	; 0x3f
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	e0cd      	b.n	8002fb6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a3b      	ldr	r2, [pc, #236]	; (8002f0c <HAL_DMA_Init+0x42c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d022      	beq.n	8002e6a <HAL_DMA_Init+0x38a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a39      	ldr	r2, [pc, #228]	; (8002f10 <HAL_DMA_Init+0x430>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01d      	beq.n	8002e6a <HAL_DMA_Init+0x38a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a38      	ldr	r2, [pc, #224]	; (8002f14 <HAL_DMA_Init+0x434>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d018      	beq.n	8002e6a <HAL_DMA_Init+0x38a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a36      	ldr	r2, [pc, #216]	; (8002f18 <HAL_DMA_Init+0x438>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_DMA_Init+0x38a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a35      	ldr	r2, [pc, #212]	; (8002f1c <HAL_DMA_Init+0x43c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00e      	beq.n	8002e6a <HAL_DMA_Init+0x38a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a33      	ldr	r2, [pc, #204]	; (8002f20 <HAL_DMA_Init+0x440>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d009      	beq.n	8002e6a <HAL_DMA_Init+0x38a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a32      	ldr	r2, [pc, #200]	; (8002f24 <HAL_DMA_Init+0x444>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d004      	beq.n	8002e6a <HAL_DMA_Init+0x38a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a30      	ldr	r2, [pc, #192]	; (8002f28 <HAL_DMA_Init+0x448>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_DMA_Init+0x38e>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <HAL_DMA_Init+0x390>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8097 	beq.w	8002fa4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <HAL_DMA_Init+0x42c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d021      	beq.n	8002ec4 <HAL_DMA_Init+0x3e4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <HAL_DMA_Init+0x430>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d01c      	beq.n	8002ec4 <HAL_DMA_Init+0x3e4>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <HAL_DMA_Init+0x434>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d017      	beq.n	8002ec4 <HAL_DMA_Init+0x3e4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <HAL_DMA_Init+0x438>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d012      	beq.n	8002ec4 <HAL_DMA_Init+0x3e4>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <HAL_DMA_Init+0x43c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00d      	beq.n	8002ec4 <HAL_DMA_Init+0x3e4>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <HAL_DMA_Init+0x440>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d008      	beq.n	8002ec4 <HAL_DMA_Init+0x3e4>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_DMA_Init+0x444>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <HAL_DMA_Init+0x3e4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <HAL_DMA_Init+0x448>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_DMA_Init+0x44c>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d020      	beq.n	8002f30 <HAL_DMA_Init+0x450>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b80      	cmp	r3, #128	; 0x80
 8002ef4:	d102      	bne.n	8002efc <HAL_DMA_Init+0x41c>
 8002ef6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002efa:	e01a      	b.n	8002f32 <HAL_DMA_Init+0x452>
 8002efc:	2300      	movs	r3, #0
 8002efe:	e018      	b.n	8002f32 <HAL_DMA_Init+0x452>
 8002f00:	fe10803f 	.word	0xfe10803f
 8002f04:	5c001000 	.word	0x5c001000
 8002f08:	ffff0000 	.word	0xffff0000
 8002f0c:	58025408 	.word	0x58025408
 8002f10:	5802541c 	.word	0x5802541c
 8002f14:	58025430 	.word	0x58025430
 8002f18:	58025444 	.word	0x58025444
 8002f1c:	58025458 	.word	0x58025458
 8002f20:	5802546c 	.word	0x5802546c
 8002f24:	58025480 	.word	0x58025480
 8002f28:	58025494 	.word	0x58025494
 8002f2c:	fffe000f 	.word	0xfffe000f
 8002f30:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68d2      	ldr	r2, [r2, #12]
 8002f36:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f60:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b6e      	ldr	r3, [pc, #440]	; (8003130 <HAL_DMA_Init+0x650>)
 8002f78:	4413      	add	r3, r2
 8002f7a:	4a6e      	ldr	r2, [pc, #440]	; (8003134 <HAL_DMA_Init+0x654>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	009a      	lsls	r2, r3, #2
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f001 fd93 	bl	8004ab4 <DMA_CalcBaseAndBitshift>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	e008      	b.n	8002fb6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2240      	movs	r2, #64	; 0x40
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2203      	movs	r2, #3
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0b7      	b.n	8003126 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5f      	ldr	r2, [pc, #380]	; (8003138 <HAL_DMA_Init+0x658>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d072      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a5d      	ldr	r2, [pc, #372]	; (800313c <HAL_DMA_Init+0x65c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d06d      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a5c      	ldr	r2, [pc, #368]	; (8003140 <HAL_DMA_Init+0x660>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d068      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5a      	ldr	r2, [pc, #360]	; (8003144 <HAL_DMA_Init+0x664>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d063      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a59      	ldr	r2, [pc, #356]	; (8003148 <HAL_DMA_Init+0x668>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d05e      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a57      	ldr	r2, [pc, #348]	; (800314c <HAL_DMA_Init+0x66c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d059      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a56      	ldr	r2, [pc, #344]	; (8003150 <HAL_DMA_Init+0x670>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d054      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a54      	ldr	r2, [pc, #336]	; (8003154 <HAL_DMA_Init+0x674>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d04f      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a53      	ldr	r2, [pc, #332]	; (8003158 <HAL_DMA_Init+0x678>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d04a      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a51      	ldr	r2, [pc, #324]	; (800315c <HAL_DMA_Init+0x67c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d045      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a50      	ldr	r2, [pc, #320]	; (8003160 <HAL_DMA_Init+0x680>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d040      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a4e      	ldr	r2, [pc, #312]	; (8003164 <HAL_DMA_Init+0x684>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d03b      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a4d      	ldr	r2, [pc, #308]	; (8003168 <HAL_DMA_Init+0x688>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d036      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a4b      	ldr	r2, [pc, #300]	; (800316c <HAL_DMA_Init+0x68c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d031      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a4a      	ldr	r2, [pc, #296]	; (8003170 <HAL_DMA_Init+0x690>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d02c      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a48      	ldr	r2, [pc, #288]	; (8003174 <HAL_DMA_Init+0x694>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d027      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a47      	ldr	r2, [pc, #284]	; (8003178 <HAL_DMA_Init+0x698>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a45      	ldr	r2, [pc, #276]	; (800317c <HAL_DMA_Init+0x69c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01d      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a44      	ldr	r2, [pc, #272]	; (8003180 <HAL_DMA_Init+0x6a0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a42      	ldr	r2, [pc, #264]	; (8003184 <HAL_DMA_Init+0x6a4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a41      	ldr	r2, [pc, #260]	; (8003188 <HAL_DMA_Init+0x6a8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a3f      	ldr	r2, [pc, #252]	; (800318c <HAL_DMA_Init+0x6ac>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a3e      	ldr	r2, [pc, #248]	; (8003190 <HAL_DMA_Init+0x6b0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_DMA_Init+0x5c6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3c      	ldr	r2, [pc, #240]	; (8003194 <HAL_DMA_Init+0x6b4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_DMA_Init+0x5ca>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_DMA_Init+0x5cc>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d032      	beq.n	8003116 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f001 fe2d 	bl	8004d10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b80      	cmp	r3, #128	; 0x80
 80030bc:	d102      	bne.n	80030c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d010      	beq.n	8003104 <HAL_DMA_Init+0x624>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d80c      	bhi.n	8003104 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f001 feaa 	bl	8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	e008      	b.n	8003116 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	a7fdabf8 	.word	0xa7fdabf8
 8003134:	cccccccd 	.word	0xcccccccd
 8003138:	40020010 	.word	0x40020010
 800313c:	40020028 	.word	0x40020028
 8003140:	40020040 	.word	0x40020040
 8003144:	40020058 	.word	0x40020058
 8003148:	40020070 	.word	0x40020070
 800314c:	40020088 	.word	0x40020088
 8003150:	400200a0 	.word	0x400200a0
 8003154:	400200b8 	.word	0x400200b8
 8003158:	40020410 	.word	0x40020410
 800315c:	40020428 	.word	0x40020428
 8003160:	40020440 	.word	0x40020440
 8003164:	40020458 	.word	0x40020458
 8003168:	40020470 	.word	0x40020470
 800316c:	40020488 	.word	0x40020488
 8003170:	400204a0 	.word	0x400204a0
 8003174:	400204b8 	.word	0x400204b8
 8003178:	58025408 	.word	0x58025408
 800317c:	5802541c 	.word	0x5802541c
 8003180:	58025430 	.word	0x58025430
 8003184:	58025444 	.word	0x58025444
 8003188:	58025458 	.word	0x58025458
 800318c:	5802546c 	.word	0x5802546c
 8003190:	58025480 	.word	0x58025480
 8003194:	58025494 	.word	0x58025494

08003198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff fb3e 	bl	8002820 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e2dc      	b.n	800376a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d008      	beq.n	80031ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e2cd      	b.n	800376a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a76      	ldr	r2, [pc, #472]	; (80033ac <HAL_DMA_Abort+0x214>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d04a      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a74      	ldr	r2, [pc, #464]	; (80033b0 <HAL_DMA_Abort+0x218>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d045      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a73      	ldr	r2, [pc, #460]	; (80033b4 <HAL_DMA_Abort+0x21c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d040      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a71      	ldr	r2, [pc, #452]	; (80033b8 <HAL_DMA_Abort+0x220>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d03b      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a70      	ldr	r2, [pc, #448]	; (80033bc <HAL_DMA_Abort+0x224>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d036      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6e      	ldr	r2, [pc, #440]	; (80033c0 <HAL_DMA_Abort+0x228>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d031      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6d      	ldr	r2, [pc, #436]	; (80033c4 <HAL_DMA_Abort+0x22c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d02c      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a6b      	ldr	r2, [pc, #428]	; (80033c8 <HAL_DMA_Abort+0x230>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d027      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6a      	ldr	r2, [pc, #424]	; (80033cc <HAL_DMA_Abort+0x234>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <HAL_DMA_Abort+0x238>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01d      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <HAL_DMA_Abort+0x23c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d018      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a65      	ldr	r2, [pc, #404]	; (80033d8 <HAL_DMA_Abort+0x240>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a64      	ldr	r2, [pc, #400]	; (80033dc <HAL_DMA_Abort+0x244>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a62      	ldr	r2, [pc, #392]	; (80033e0 <HAL_DMA_Abort+0x248>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a61      	ldr	r2, [pc, #388]	; (80033e4 <HAL_DMA_Abort+0x24c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_DMA_Abort+0xd6>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a5f      	ldr	r2, [pc, #380]	; (80033e8 <HAL_DMA_Abort+0x250>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <HAL_DMA_Abort+0xda>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_DMA_Abort+0xdc>
 8003272:	2300      	movs	r3, #0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 021e 	bic.w	r2, r2, #30
 8003286:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003296:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e00a      	b.n	80032b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 020e 	bic.w	r2, r2, #14
 80032ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a3c      	ldr	r2, [pc, #240]	; (80033ac <HAL_DMA_Abort+0x214>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d072      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a3a      	ldr	r2, [pc, #232]	; (80033b0 <HAL_DMA_Abort+0x218>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d06d      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a39      	ldr	r2, [pc, #228]	; (80033b4 <HAL_DMA_Abort+0x21c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d068      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a37      	ldr	r2, [pc, #220]	; (80033b8 <HAL_DMA_Abort+0x220>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d063      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a36      	ldr	r2, [pc, #216]	; (80033bc <HAL_DMA_Abort+0x224>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d05e      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a34      	ldr	r2, [pc, #208]	; (80033c0 <HAL_DMA_Abort+0x228>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d059      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a33      	ldr	r2, [pc, #204]	; (80033c4 <HAL_DMA_Abort+0x22c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d054      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a31      	ldr	r2, [pc, #196]	; (80033c8 <HAL_DMA_Abort+0x230>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d04f      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a30      	ldr	r2, [pc, #192]	; (80033cc <HAL_DMA_Abort+0x234>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d04a      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2e      	ldr	r2, [pc, #184]	; (80033d0 <HAL_DMA_Abort+0x238>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d045      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <HAL_DMA_Abort+0x23c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d040      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <HAL_DMA_Abort+0x240>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d03b      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2a      	ldr	r2, [pc, #168]	; (80033dc <HAL_DMA_Abort+0x244>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d036      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a28      	ldr	r2, [pc, #160]	; (80033e0 <HAL_DMA_Abort+0x248>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d031      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a27      	ldr	r2, [pc, #156]	; (80033e4 <HAL_DMA_Abort+0x24c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d02c      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <HAL_DMA_Abort+0x250>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d027      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a24      	ldr	r2, [pc, #144]	; (80033ec <HAL_DMA_Abort+0x254>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d022      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <HAL_DMA_Abort+0x258>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01d      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a21      	ldr	r2, [pc, #132]	; (80033f4 <HAL_DMA_Abort+0x25c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d018      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <HAL_DMA_Abort+0x260>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <HAL_DMA_Abort+0x264>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_DMA_Abort+0x268>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <HAL_DMA_Abort+0x26c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_DMA_Abort+0x20e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a19      	ldr	r2, [pc, #100]	; (8003408 <HAL_DMA_Abort+0x270>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d132      	bne.n	800340c <HAL_DMA_Abort+0x274>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e031      	b.n	800340e <HAL_DMA_Abort+0x276>
 80033aa:	bf00      	nop
 80033ac:	40020010 	.word	0x40020010
 80033b0:	40020028 	.word	0x40020028
 80033b4:	40020040 	.word	0x40020040
 80033b8:	40020058 	.word	0x40020058
 80033bc:	40020070 	.word	0x40020070
 80033c0:	40020088 	.word	0x40020088
 80033c4:	400200a0 	.word	0x400200a0
 80033c8:	400200b8 	.word	0x400200b8
 80033cc:	40020410 	.word	0x40020410
 80033d0:	40020428 	.word	0x40020428
 80033d4:	40020440 	.word	0x40020440
 80033d8:	40020458 	.word	0x40020458
 80033dc:	40020470 	.word	0x40020470
 80033e0:	40020488 	.word	0x40020488
 80033e4:	400204a0 	.word	0x400204a0
 80033e8:	400204b8 	.word	0x400204b8
 80033ec:	58025408 	.word	0x58025408
 80033f0:	5802541c 	.word	0x5802541c
 80033f4:	58025430 	.word	0x58025430
 80033f8:	58025444 	.word	0x58025444
 80033fc:	58025458 	.word	0x58025458
 8003400:	5802546c 	.word	0x5802546c
 8003404:	58025480 	.word	0x58025480
 8003408:	58025494 	.word	0x58025494
 800340c:	2300      	movs	r3, #0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003420:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6d      	ldr	r2, [pc, #436]	; (80035dc <HAL_DMA_Abort+0x444>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d04a      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a6b      	ldr	r2, [pc, #428]	; (80035e0 <HAL_DMA_Abort+0x448>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d045      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6a      	ldr	r2, [pc, #424]	; (80035e4 <HAL_DMA_Abort+0x44c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d040      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <HAL_DMA_Abort+0x450>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d03b      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a67      	ldr	r2, [pc, #412]	; (80035ec <HAL_DMA_Abort+0x454>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d036      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <HAL_DMA_Abort+0x458>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d031      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a64      	ldr	r2, [pc, #400]	; (80035f4 <HAL_DMA_Abort+0x45c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d02c      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a62      	ldr	r2, [pc, #392]	; (80035f8 <HAL_DMA_Abort+0x460>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d027      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a61      	ldr	r2, [pc, #388]	; (80035fc <HAL_DMA_Abort+0x464>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5f      	ldr	r2, [pc, #380]	; (8003600 <HAL_DMA_Abort+0x468>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a5e      	ldr	r2, [pc, #376]	; (8003604 <HAL_DMA_Abort+0x46c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5c      	ldr	r2, [pc, #368]	; (8003608 <HAL_DMA_Abort+0x470>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a5b      	ldr	r2, [pc, #364]	; (800360c <HAL_DMA_Abort+0x474>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a59      	ldr	r2, [pc, #356]	; (8003610 <HAL_DMA_Abort+0x478>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a58      	ldr	r2, [pc, #352]	; (8003614 <HAL_DMA_Abort+0x47c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_Abort+0x32a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a56      	ldr	r2, [pc, #344]	; (8003618 <HAL_DMA_Abort+0x480>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d108      	bne.n	80034d4 <HAL_DMA_Abort+0x33c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e007      	b.n	80034e4 <HAL_DMA_Abort+0x34c>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034e4:	e013      	b.n	800350e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034e6:	f7ff f99b 	bl	8002820 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d90c      	bls.n	800350e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2203      	movs	r2, #3
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e12d      	b.n	800376a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e5      	bne.n	80034e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <HAL_DMA_Abort+0x444>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d04a      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2d      	ldr	r2, [pc, #180]	; (80035e0 <HAL_DMA_Abort+0x448>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d045      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <HAL_DMA_Abort+0x44c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d040      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2a      	ldr	r2, [pc, #168]	; (80035e8 <HAL_DMA_Abort+0x450>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d03b      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_DMA_Abort+0x454>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d036      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <HAL_DMA_Abort+0x458>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d031      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <HAL_DMA_Abort+0x45c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d02c      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a24      	ldr	r2, [pc, #144]	; (80035f8 <HAL_DMA_Abort+0x460>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d027      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a23      	ldr	r2, [pc, #140]	; (80035fc <HAL_DMA_Abort+0x464>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a21      	ldr	r2, [pc, #132]	; (8003600 <HAL_DMA_Abort+0x468>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a20      	ldr	r2, [pc, #128]	; (8003604 <HAL_DMA_Abort+0x46c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d018      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <HAL_DMA_Abort+0x470>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_DMA_Abort+0x474>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_DMA_Abort+0x478>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_DMA_Abort+0x47c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_DMA_Abort+0x422>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a18      	ldr	r2, [pc, #96]	; (8003618 <HAL_DMA_Abort+0x480>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_DMA_Abort+0x426>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_DMA_Abort+0x428>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d02b      	beq.n	800361c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	223f      	movs	r2, #63	; 0x3f
 80035d4:	409a      	lsls	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	609a      	str	r2, [r3, #8]
 80035da:	e02a      	b.n	8003632 <HAL_DMA_Abort+0x49a>
 80035dc:	40020010 	.word	0x40020010
 80035e0:	40020028 	.word	0x40020028
 80035e4:	40020040 	.word	0x40020040
 80035e8:	40020058 	.word	0x40020058
 80035ec:	40020070 	.word	0x40020070
 80035f0:	40020088 	.word	0x40020088
 80035f4:	400200a0 	.word	0x400200a0
 80035f8:	400200b8 	.word	0x400200b8
 80035fc:	40020410 	.word	0x40020410
 8003600:	40020428 	.word	0x40020428
 8003604:	40020440 	.word	0x40020440
 8003608:	40020458 	.word	0x40020458
 800360c:	40020470 	.word	0x40020470
 8003610:	40020488 	.word	0x40020488
 8003614:	400204a0 	.word	0x400204a0
 8003618:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	2201      	movs	r2, #1
 800362c:	409a      	lsls	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a4f      	ldr	r2, [pc, #316]	; (8003774 <HAL_DMA_Abort+0x5dc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d072      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a4d      	ldr	r2, [pc, #308]	; (8003778 <HAL_DMA_Abort+0x5e0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d06d      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a4c      	ldr	r2, [pc, #304]	; (800377c <HAL_DMA_Abort+0x5e4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d068      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a4a      	ldr	r2, [pc, #296]	; (8003780 <HAL_DMA_Abort+0x5e8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d063      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a49      	ldr	r2, [pc, #292]	; (8003784 <HAL_DMA_Abort+0x5ec>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d05e      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a47      	ldr	r2, [pc, #284]	; (8003788 <HAL_DMA_Abort+0x5f0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d059      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a46      	ldr	r2, [pc, #280]	; (800378c <HAL_DMA_Abort+0x5f4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d054      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a44      	ldr	r2, [pc, #272]	; (8003790 <HAL_DMA_Abort+0x5f8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d04f      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a43      	ldr	r2, [pc, #268]	; (8003794 <HAL_DMA_Abort+0x5fc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d04a      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a41      	ldr	r2, [pc, #260]	; (8003798 <HAL_DMA_Abort+0x600>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d045      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a40      	ldr	r2, [pc, #256]	; (800379c <HAL_DMA_Abort+0x604>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d040      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a3e      	ldr	r2, [pc, #248]	; (80037a0 <HAL_DMA_Abort+0x608>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d03b      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a3d      	ldr	r2, [pc, #244]	; (80037a4 <HAL_DMA_Abort+0x60c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d036      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a3b      	ldr	r2, [pc, #236]	; (80037a8 <HAL_DMA_Abort+0x610>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d031      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3a      	ldr	r2, [pc, #232]	; (80037ac <HAL_DMA_Abort+0x614>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d02c      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a38      	ldr	r2, [pc, #224]	; (80037b0 <HAL_DMA_Abort+0x618>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d027      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a37      	ldr	r2, [pc, #220]	; (80037b4 <HAL_DMA_Abort+0x61c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d022      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a35      	ldr	r2, [pc, #212]	; (80037b8 <HAL_DMA_Abort+0x620>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01d      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a34      	ldr	r2, [pc, #208]	; (80037bc <HAL_DMA_Abort+0x624>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a32      	ldr	r2, [pc, #200]	; (80037c0 <HAL_DMA_Abort+0x628>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a31      	ldr	r2, [pc, #196]	; (80037c4 <HAL_DMA_Abort+0x62c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <HAL_DMA_Abort+0x630>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2e      	ldr	r2, [pc, #184]	; (80037cc <HAL_DMA_Abort+0x634>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_DMA_Abort+0x58a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <HAL_DMA_Abort+0x638>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_DMA_Abort+0x58e>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_DMA_Abort+0x590>
 8003726:	2300      	movs	r3, #0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d015      	beq.n	8003758 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003734:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800374c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003756:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40020010 	.word	0x40020010
 8003778:	40020028 	.word	0x40020028
 800377c:	40020040 	.word	0x40020040
 8003780:	40020058 	.word	0x40020058
 8003784:	40020070 	.word	0x40020070
 8003788:	40020088 	.word	0x40020088
 800378c:	400200a0 	.word	0x400200a0
 8003790:	400200b8 	.word	0x400200b8
 8003794:	40020410 	.word	0x40020410
 8003798:	40020428 	.word	0x40020428
 800379c:	40020440 	.word	0x40020440
 80037a0:	40020458 	.word	0x40020458
 80037a4:	40020470 	.word	0x40020470
 80037a8:	40020488 	.word	0x40020488
 80037ac:	400204a0 	.word	0x400204a0
 80037b0:	400204b8 	.word	0x400204b8
 80037b4:	58025408 	.word	0x58025408
 80037b8:	5802541c 	.word	0x5802541c
 80037bc:	58025430 	.word	0x58025430
 80037c0:	58025444 	.word	0x58025444
 80037c4:	58025458 	.word	0x58025458
 80037c8:	5802546c 	.word	0x5802546c
 80037cc:	58025480 	.word	0x58025480
 80037d0:	58025494 	.word	0x58025494

080037d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e237      	b.n	8003c56 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d004      	beq.n	80037fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2280      	movs	r2, #128	; 0x80
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e22c      	b.n	8003c56 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a5c      	ldr	r2, [pc, #368]	; (8003974 <HAL_DMA_Abort_IT+0x1a0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04a      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5b      	ldr	r2, [pc, #364]	; (8003978 <HAL_DMA_Abort_IT+0x1a4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d045      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a59      	ldr	r2, [pc, #356]	; (800397c <HAL_DMA_Abort_IT+0x1a8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d040      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a58      	ldr	r2, [pc, #352]	; (8003980 <HAL_DMA_Abort_IT+0x1ac>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d03b      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a56      	ldr	r2, [pc, #344]	; (8003984 <HAL_DMA_Abort_IT+0x1b0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d036      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a55      	ldr	r2, [pc, #340]	; (8003988 <HAL_DMA_Abort_IT+0x1b4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d031      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a53      	ldr	r2, [pc, #332]	; (800398c <HAL_DMA_Abort_IT+0x1b8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d02c      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_DMA_Abort_IT+0x1bc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d027      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a50      	ldr	r2, [pc, #320]	; (8003994 <HAL_DMA_Abort_IT+0x1c0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d022      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a4f      	ldr	r2, [pc, #316]	; (8003998 <HAL_DMA_Abort_IT+0x1c4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d01d      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a4d      	ldr	r2, [pc, #308]	; (800399c <HAL_DMA_Abort_IT+0x1c8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a4c      	ldr	r2, [pc, #304]	; (80039a0 <HAL_DMA_Abort_IT+0x1cc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a4a      	ldr	r2, [pc, #296]	; (80039a4 <HAL_DMA_Abort_IT+0x1d0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00e      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a49      	ldr	r2, [pc, #292]	; (80039a8 <HAL_DMA_Abort_IT+0x1d4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a47      	ldr	r2, [pc, #284]	; (80039ac <HAL_DMA_Abort_IT+0x1d8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a46      	ldr	r2, [pc, #280]	; (80039b0 <HAL_DMA_Abort_IT+0x1dc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_DMA_Abort_IT+0xcc>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_DMA_Abort_IT+0xce>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8086 	beq.w	80039b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <HAL_DMA_Abort_IT+0x1a0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2e      	ldr	r2, [pc, #184]	; (8003978 <HAL_DMA_Abort_IT+0x1a4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2c      	ldr	r2, [pc, #176]	; (800397c <HAL_DMA_Abort_IT+0x1a8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2b      	ldr	r2, [pc, #172]	; (8003980 <HAL_DMA_Abort_IT+0x1ac>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <HAL_DMA_Abort_IT+0x1b0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a28      	ldr	r2, [pc, #160]	; (8003988 <HAL_DMA_Abort_IT+0x1b4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <HAL_DMA_Abort_IT+0x1b8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a25      	ldr	r2, [pc, #148]	; (8003990 <HAL_DMA_Abort_IT+0x1bc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a23      	ldr	r2, [pc, #140]	; (8003994 <HAL_DMA_Abort_IT+0x1c0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a22      	ldr	r2, [pc, #136]	; (8003998 <HAL_DMA_Abort_IT+0x1c4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_DMA_Abort_IT+0x1c8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <HAL_DMA_Abort_IT+0x1cc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <HAL_DMA_Abort_IT+0x1d0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1c      	ldr	r2, [pc, #112]	; (80039a8 <HAL_DMA_Abort_IT+0x1d4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <HAL_DMA_Abort_IT+0x1d8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <HAL_DMA_Abort_IT+0x1dc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <HAL_DMA_Abort_IT+0x18e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e178      	b.n	8003c54 <HAL_DMA_Abort_IT+0x480>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e16f      	b.n	8003c54 <HAL_DMA_Abort_IT+0x480>
 8003974:	40020010 	.word	0x40020010
 8003978:	40020028 	.word	0x40020028
 800397c:	40020040 	.word	0x40020040
 8003980:	40020058 	.word	0x40020058
 8003984:	40020070 	.word	0x40020070
 8003988:	40020088 	.word	0x40020088
 800398c:	400200a0 	.word	0x400200a0
 8003990:	400200b8 	.word	0x400200b8
 8003994:	40020410 	.word	0x40020410
 8003998:	40020428 	.word	0x40020428
 800399c:	40020440 	.word	0x40020440
 80039a0:	40020458 	.word	0x40020458
 80039a4:	40020470 	.word	0x40020470
 80039a8:	40020488 	.word	0x40020488
 80039ac:	400204a0 	.word	0x400204a0
 80039b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 020e 	bic.w	r2, r2, #14
 80039c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a6c      	ldr	r2, [pc, #432]	; (8003b7c <HAL_DMA_Abort_IT+0x3a8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d04a      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6b      	ldr	r2, [pc, #428]	; (8003b80 <HAL_DMA_Abort_IT+0x3ac>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d045      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a69      	ldr	r2, [pc, #420]	; (8003b84 <HAL_DMA_Abort_IT+0x3b0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d040      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a68      	ldr	r2, [pc, #416]	; (8003b88 <HAL_DMA_Abort_IT+0x3b4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d03b      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a66      	ldr	r2, [pc, #408]	; (8003b8c <HAL_DMA_Abort_IT+0x3b8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d036      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a65      	ldr	r2, [pc, #404]	; (8003b90 <HAL_DMA_Abort_IT+0x3bc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d031      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a63      	ldr	r2, [pc, #396]	; (8003b94 <HAL_DMA_Abort_IT+0x3c0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02c      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a62      	ldr	r2, [pc, #392]	; (8003b98 <HAL_DMA_Abort_IT+0x3c4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d027      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a60      	ldr	r2, [pc, #384]	; (8003b9c <HAL_DMA_Abort_IT+0x3c8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a5f      	ldr	r2, [pc, #380]	; (8003ba0 <HAL_DMA_Abort_IT+0x3cc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01d      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5d      	ldr	r2, [pc, #372]	; (8003ba4 <HAL_DMA_Abort_IT+0x3d0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5c      	ldr	r2, [pc, #368]	; (8003ba8 <HAL_DMA_Abort_IT+0x3d4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a5a      	ldr	r2, [pc, #360]	; (8003bac <HAL_DMA_Abort_IT+0x3d8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a59      	ldr	r2, [pc, #356]	; (8003bb0 <HAL_DMA_Abort_IT+0x3dc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a57      	ldr	r2, [pc, #348]	; (8003bb4 <HAL_DMA_Abort_IT+0x3e0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a56      	ldr	r2, [pc, #344]	; (8003bb8 <HAL_DMA_Abort_IT+0x3e4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d108      	bne.n	8003a76 <HAL_DMA_Abort_IT+0x2a2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e007      	b.n	8003a86 <HAL_DMA_Abort_IT+0x2b2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a3c      	ldr	r2, [pc, #240]	; (8003b7c <HAL_DMA_Abort_IT+0x3a8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d072      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a3a      	ldr	r2, [pc, #232]	; (8003b80 <HAL_DMA_Abort_IT+0x3ac>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d06d      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a39      	ldr	r2, [pc, #228]	; (8003b84 <HAL_DMA_Abort_IT+0x3b0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d068      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a37      	ldr	r2, [pc, #220]	; (8003b88 <HAL_DMA_Abort_IT+0x3b4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d063      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a36      	ldr	r2, [pc, #216]	; (8003b8c <HAL_DMA_Abort_IT+0x3b8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d05e      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <HAL_DMA_Abort_IT+0x3bc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d059      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <HAL_DMA_Abort_IT+0x3c0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d054      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <HAL_DMA_Abort_IT+0x3c4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d04f      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <HAL_DMA_Abort_IT+0x3c8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d04a      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a2e      	ldr	r2, [pc, #184]	; (8003ba0 <HAL_DMA_Abort_IT+0x3cc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d045      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a2d      	ldr	r2, [pc, #180]	; (8003ba4 <HAL_DMA_Abort_IT+0x3d0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d040      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <HAL_DMA_Abort_IT+0x3d4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d03b      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <HAL_DMA_Abort_IT+0x3d8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d036      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a28      	ldr	r2, [pc, #160]	; (8003bb0 <HAL_DMA_Abort_IT+0x3dc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d031      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a27      	ldr	r2, [pc, #156]	; (8003bb4 <HAL_DMA_Abort_IT+0x3e0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d02c      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <HAL_DMA_Abort_IT+0x3e4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d027      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <HAL_DMA_Abort_IT+0x3e8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d022      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <HAL_DMA_Abort_IT+0x3ec>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01d      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <HAL_DMA_Abort_IT+0x3f0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d018      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <HAL_DMA_Abort_IT+0x3f4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_DMA_Abort_IT+0x3f8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1c      	ldr	r2, [pc, #112]	; (8003bd0 <HAL_DMA_Abort_IT+0x3fc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1b      	ldr	r2, [pc, #108]	; (8003bd4 <HAL_DMA_Abort_IT+0x400>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a19      	ldr	r2, [pc, #100]	; (8003bd8 <HAL_DMA_Abort_IT+0x404>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d132      	bne.n	8003bdc <HAL_DMA_Abort_IT+0x408>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e031      	b.n	8003bde <HAL_DMA_Abort_IT+0x40a>
 8003b7a:	bf00      	nop
 8003b7c:	40020010 	.word	0x40020010
 8003b80:	40020028 	.word	0x40020028
 8003b84:	40020040 	.word	0x40020040
 8003b88:	40020058 	.word	0x40020058
 8003b8c:	40020070 	.word	0x40020070
 8003b90:	40020088 	.word	0x40020088
 8003b94:	400200a0 	.word	0x400200a0
 8003b98:	400200b8 	.word	0x400200b8
 8003b9c:	40020410 	.word	0x40020410
 8003ba0:	40020428 	.word	0x40020428
 8003ba4:	40020440 	.word	0x40020440
 8003ba8:	40020458 	.word	0x40020458
 8003bac:	40020470 	.word	0x40020470
 8003bb0:	40020488 	.word	0x40020488
 8003bb4:	400204a0 	.word	0x400204a0
 8003bb8:	400204b8 	.word	0x400204b8
 8003bbc:	58025408 	.word	0x58025408
 8003bc0:	5802541c 	.word	0x5802541c
 8003bc4:	58025430 	.word	0x58025430
 8003bc8:	58025444 	.word	0x58025444
 8003bcc:	58025458 	.word	0x58025458
 8003bd0:	5802546c 	.word	0x5802546c
 8003bd4:	58025480 	.word	0x58025480
 8003bd8:	58025494 	.word	0x58025494
 8003bdc:	2300      	movs	r3, #0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d028      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	2201      	movs	r2, #1
 8003c02:	409a      	lsls	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00c      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop

08003c60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c6c:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <HAL_DMA_IRQHandler+0x1ac>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a67      	ldr	r2, [pc, #412]	; (8003e10 <HAL_DMA_IRQHandler+0x1b0>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	0a9b      	lsrs	r3, r3, #10
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a5f      	ldr	r2, [pc, #380]	; (8003e14 <HAL_DMA_IRQHandler+0x1b4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d04a      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5d      	ldr	r2, [pc, #372]	; (8003e18 <HAL_DMA_IRQHandler+0x1b8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d045      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5c      	ldr	r2, [pc, #368]	; (8003e1c <HAL_DMA_IRQHandler+0x1bc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d040      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a5a      	ldr	r2, [pc, #360]	; (8003e20 <HAL_DMA_IRQHandler+0x1c0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d03b      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a59      	ldr	r2, [pc, #356]	; (8003e24 <HAL_DMA_IRQHandler+0x1c4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d036      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a57      	ldr	r2, [pc, #348]	; (8003e28 <HAL_DMA_IRQHandler+0x1c8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d031      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a56      	ldr	r2, [pc, #344]	; (8003e2c <HAL_DMA_IRQHandler+0x1cc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d02c      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a54      	ldr	r2, [pc, #336]	; (8003e30 <HAL_DMA_IRQHandler+0x1d0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d027      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a53      	ldr	r2, [pc, #332]	; (8003e34 <HAL_DMA_IRQHandler+0x1d4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d022      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a51      	ldr	r2, [pc, #324]	; (8003e38 <HAL_DMA_IRQHandler+0x1d8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01d      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a50      	ldr	r2, [pc, #320]	; (8003e3c <HAL_DMA_IRQHandler+0x1dc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d018      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a4e      	ldr	r2, [pc, #312]	; (8003e40 <HAL_DMA_IRQHandler+0x1e0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4d      	ldr	r2, [pc, #308]	; (8003e44 <HAL_DMA_IRQHandler+0x1e4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a4b      	ldr	r2, [pc, #300]	; (8003e48 <HAL_DMA_IRQHandler+0x1e8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a4a      	ldr	r2, [pc, #296]	; (8003e4c <HAL_DMA_IRQHandler+0x1ec>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a48      	ldr	r2, [pc, #288]	; (8003e50 <HAL_DMA_IRQHandler+0x1f0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_DMA_IRQHandler+0xd6>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_DMA_IRQHandler+0xd8>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 842b 	beq.w	8004594 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	2208      	movs	r2, #8
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80a2 	beq.w	8003e98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2e      	ldr	r2, [pc, #184]	; (8003e14 <HAL_DMA_IRQHandler+0x1b4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d04a      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a2d      	ldr	r2, [pc, #180]	; (8003e18 <HAL_DMA_IRQHandler+0x1b8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d045      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a2b      	ldr	r2, [pc, #172]	; (8003e1c <HAL_DMA_IRQHandler+0x1bc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d040      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <HAL_DMA_IRQHandler+0x1c0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d03b      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a28      	ldr	r2, [pc, #160]	; (8003e24 <HAL_DMA_IRQHandler+0x1c4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d036      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a27      	ldr	r2, [pc, #156]	; (8003e28 <HAL_DMA_IRQHandler+0x1c8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d031      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a25      	ldr	r2, [pc, #148]	; (8003e2c <HAL_DMA_IRQHandler+0x1cc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02c      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a24      	ldr	r2, [pc, #144]	; (8003e30 <HAL_DMA_IRQHandler+0x1d0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d027      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a22      	ldr	r2, [pc, #136]	; (8003e34 <HAL_DMA_IRQHandler+0x1d4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d022      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <HAL_DMA_IRQHandler+0x1d8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d01d      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_DMA_IRQHandler+0x1dc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d018      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <HAL_DMA_IRQHandler+0x1e0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <HAL_DMA_IRQHandler+0x1e4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00e      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_DMA_IRQHandler+0x1e8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <HAL_DMA_IRQHandler+0x1ec>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <HAL_DMA_IRQHandler+0x1f0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d12f      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x1f4>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	e02e      	b.n	8003e68 <HAL_DMA_IRQHandler+0x208>
 8003e0a:	bf00      	nop
 8003e0c:	24000000 	.word	0x24000000
 8003e10:	1b4e81b5 	.word	0x1b4e81b5
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf14      	ite	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	2300      	moveq	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0204 	bic.w	r2, r2, #4
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2208      	movs	r2, #8
 8003e86:	409a      	lsls	r2, r3
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	f043 0201 	orr.w	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d06e      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a69      	ldr	r2, [pc, #420]	; (8004058 <HAL_DMA_IRQHandler+0x3f8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04a      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a67      	ldr	r2, [pc, #412]	; (800405c <HAL_DMA_IRQHandler+0x3fc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d045      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a66      	ldr	r2, [pc, #408]	; (8004060 <HAL_DMA_IRQHandler+0x400>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a64      	ldr	r2, [pc, #400]	; (8004064 <HAL_DMA_IRQHandler+0x404>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a63      	ldr	r2, [pc, #396]	; (8004068 <HAL_DMA_IRQHandler+0x408>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d036      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a61      	ldr	r2, [pc, #388]	; (800406c <HAL_DMA_IRQHandler+0x40c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d031      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a60      	ldr	r2, [pc, #384]	; (8004070 <HAL_DMA_IRQHandler+0x410>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02c      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5e      	ldr	r2, [pc, #376]	; (8004074 <HAL_DMA_IRQHandler+0x414>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d027      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5d      	ldr	r2, [pc, #372]	; (8004078 <HAL_DMA_IRQHandler+0x418>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a5b      	ldr	r2, [pc, #364]	; (800407c <HAL_DMA_IRQHandler+0x41c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5a      	ldr	r2, [pc, #360]	; (8004080 <HAL_DMA_IRQHandler+0x420>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a58      	ldr	r2, [pc, #352]	; (8004084 <HAL_DMA_IRQHandler+0x424>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a57      	ldr	r2, [pc, #348]	; (8004088 <HAL_DMA_IRQHandler+0x428>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a55      	ldr	r2, [pc, #340]	; (800408c <HAL_DMA_IRQHandler+0x42c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a54      	ldr	r2, [pc, #336]	; (8004090 <HAL_DMA_IRQHandler+0x430>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_DMA_IRQHandler+0x434>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10a      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x304>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	e003      	b.n	8003f6c <HAL_DMA_IRQHandler+0x30c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	2201      	movs	r2, #1
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	f043 0202 	orr.w	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2204      	movs	r2, #4
 8003f96:	409a      	lsls	r2, r3
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 808f 	beq.w	80040c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2c      	ldr	r2, [pc, #176]	; (8004058 <HAL_DMA_IRQHandler+0x3f8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d04a      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	; (800405c <HAL_DMA_IRQHandler+0x3fc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d045      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a29      	ldr	r2, [pc, #164]	; (8004060 <HAL_DMA_IRQHandler+0x400>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d040      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	; (8004064 <HAL_DMA_IRQHandler+0x404>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d03b      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a26      	ldr	r2, [pc, #152]	; (8004068 <HAL_DMA_IRQHandler+0x408>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d036      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a24      	ldr	r2, [pc, #144]	; (800406c <HAL_DMA_IRQHandler+0x40c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d031      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a23      	ldr	r2, [pc, #140]	; (8004070 <HAL_DMA_IRQHandler+0x410>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d02c      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a21      	ldr	r2, [pc, #132]	; (8004074 <HAL_DMA_IRQHandler+0x414>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d027      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a20      	ldr	r2, [pc, #128]	; (8004078 <HAL_DMA_IRQHandler+0x418>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1e      	ldr	r2, [pc, #120]	; (800407c <HAL_DMA_IRQHandler+0x41c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01d      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <HAL_DMA_IRQHandler+0x420>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <HAL_DMA_IRQHandler+0x424>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <HAL_DMA_IRQHandler+0x428>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_DMA_IRQHandler+0x42c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a17      	ldr	r2, [pc, #92]	; (8004090 <HAL_DMA_IRQHandler+0x430>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <HAL_DMA_IRQHandler+0x434>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d12a      	bne.n	8004098 <HAL_DMA_IRQHandler+0x438>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e023      	b.n	80040a0 <HAL_DMA_IRQHandler+0x440>
 8004058:	40020010 	.word	0x40020010
 800405c:	40020028 	.word	0x40020028
 8004060:	40020040 	.word	0x40020040
 8004064:	40020058 	.word	0x40020058
 8004068:	40020070 	.word	0x40020070
 800406c:	40020088 	.word	0x40020088
 8004070:	400200a0 	.word	0x400200a0
 8004074:	400200b8 	.word	0x400200b8
 8004078:	40020410 	.word	0x40020410
 800407c:	40020428 	.word	0x40020428
 8004080:	40020440 	.word	0x40020440
 8004084:	40020458 	.word	0x40020458
 8004088:	40020470 	.word	0x40020470
 800408c:	40020488 	.word	0x40020488
 8004090:	400204a0 	.word	0x400204a0
 8004094:	400204b8 	.word	0x400204b8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2204      	movs	r2, #4
 80040ae:	409a      	lsls	r2, r3
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	f043 0204 	orr.w	r2, r3, #4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2210      	movs	r2, #16
 80040ca:	409a      	lsls	r2, r3
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80a6 	beq.w	8004222 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a85      	ldr	r2, [pc, #532]	; (80042f0 <HAL_DMA_IRQHandler+0x690>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04a      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a83      	ldr	r2, [pc, #524]	; (80042f4 <HAL_DMA_IRQHandler+0x694>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d045      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a82      	ldr	r2, [pc, #520]	; (80042f8 <HAL_DMA_IRQHandler+0x698>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d040      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a80      	ldr	r2, [pc, #512]	; (80042fc <HAL_DMA_IRQHandler+0x69c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d03b      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7f      	ldr	r2, [pc, #508]	; (8004300 <HAL_DMA_IRQHandler+0x6a0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d036      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a7d      	ldr	r2, [pc, #500]	; (8004304 <HAL_DMA_IRQHandler+0x6a4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d031      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a7c      	ldr	r2, [pc, #496]	; (8004308 <HAL_DMA_IRQHandler+0x6a8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d02c      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7a      	ldr	r2, [pc, #488]	; (800430c <HAL_DMA_IRQHandler+0x6ac>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d027      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a79      	ldr	r2, [pc, #484]	; (8004310 <HAL_DMA_IRQHandler+0x6b0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a77      	ldr	r2, [pc, #476]	; (8004314 <HAL_DMA_IRQHandler+0x6b4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a76      	ldr	r2, [pc, #472]	; (8004318 <HAL_DMA_IRQHandler+0x6b8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a74      	ldr	r2, [pc, #464]	; (800431c <HAL_DMA_IRQHandler+0x6bc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a73      	ldr	r2, [pc, #460]	; (8004320 <HAL_DMA_IRQHandler+0x6c0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a71      	ldr	r2, [pc, #452]	; (8004324 <HAL_DMA_IRQHandler+0x6c4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a70      	ldr	r2, [pc, #448]	; (8004328 <HAL_DMA_IRQHandler+0x6c8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6e      	ldr	r2, [pc, #440]	; (800432c <HAL_DMA_IRQHandler+0x6cc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d10a      	bne.n	800418c <HAL_DMA_IRQHandler+0x52c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e009      	b.n	80041a0 <HAL_DMA_IRQHandler+0x540>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf14      	ite	ne
 800419a:	2301      	movne	r3, #1
 800419c:	2300      	moveq	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03e      	beq.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2210      	movs	r2, #16
 80041ae:	409a      	lsls	r2, r3
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d018      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d108      	bne.n	80041e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d024      	beq.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4798      	blx	r3
 80041e0:	e01f      	b.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01b      	beq.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
 80041f2:	e016      	b.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0208 	bic.w	r2, r2, #8
 8004210:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2220      	movs	r2, #32
 800422c:	409a      	lsls	r2, r3
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8110 	beq.w	8004458 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <HAL_DMA_IRQHandler+0x690>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d04a      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2b      	ldr	r2, [pc, #172]	; (80042f4 <HAL_DMA_IRQHandler+0x694>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d045      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <HAL_DMA_IRQHandler+0x698>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d040      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a28      	ldr	r2, [pc, #160]	; (80042fc <HAL_DMA_IRQHandler+0x69c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d03b      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a26      	ldr	r2, [pc, #152]	; (8004300 <HAL_DMA_IRQHandler+0x6a0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d036      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a25      	ldr	r2, [pc, #148]	; (8004304 <HAL_DMA_IRQHandler+0x6a4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d031      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a23      	ldr	r2, [pc, #140]	; (8004308 <HAL_DMA_IRQHandler+0x6a8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d02c      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a22      	ldr	r2, [pc, #136]	; (800430c <HAL_DMA_IRQHandler+0x6ac>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d027      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a20      	ldr	r2, [pc, #128]	; (8004310 <HAL_DMA_IRQHandler+0x6b0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d022      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <HAL_DMA_IRQHandler+0x6b4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d01d      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <HAL_DMA_IRQHandler+0x6b8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d018      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1c      	ldr	r2, [pc, #112]	; (800431c <HAL_DMA_IRQHandler+0x6bc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1a      	ldr	r2, [pc, #104]	; (8004320 <HAL_DMA_IRQHandler+0x6c0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a19      	ldr	r2, [pc, #100]	; (8004324 <HAL_DMA_IRQHandler+0x6c4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d009      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a17      	ldr	r2, [pc, #92]	; (8004328 <HAL_DMA_IRQHandler+0x6c8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a16      	ldr	r2, [pc, #88]	; (800432c <HAL_DMA_IRQHandler+0x6cc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d12b      	bne.n	8004330 <HAL_DMA_IRQHandler+0x6d0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bf14      	ite	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	2300      	moveq	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	e02a      	b.n	8004344 <HAL_DMA_IRQHandler+0x6e4>
 80042ee:	bf00      	nop
 80042f0:	40020010 	.word	0x40020010
 80042f4:	40020028 	.word	0x40020028
 80042f8:	40020040 	.word	0x40020040
 80042fc:	40020058 	.word	0x40020058
 8004300:	40020070 	.word	0x40020070
 8004304:	40020088 	.word	0x40020088
 8004308:	400200a0 	.word	0x400200a0
 800430c:	400200b8 	.word	0x400200b8
 8004310:	40020410 	.word	0x40020410
 8004314:	40020428 	.word	0x40020428
 8004318:	40020440 	.word	0x40020440
 800431c:	40020458 	.word	0x40020458
 8004320:	40020470 	.word	0x40020470
 8004324:	40020488 	.word	0x40020488
 8004328:	400204a0 	.word	0x400204a0
 800432c:	400204b8 	.word	0x400204b8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	bf14      	ite	ne
 800433e:	2301      	movne	r3, #1
 8004340:	2300      	moveq	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8087 	beq.w	8004458 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2220      	movs	r2, #32
 8004354:	409a      	lsls	r2, r3
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b04      	cmp	r3, #4
 8004364:	d139      	bne.n	80043da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0216 	bic.w	r2, r2, #22
 8004374:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004384:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <HAL_DMA_IRQHandler+0x736>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0208 	bic.w	r2, r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	223f      	movs	r2, #63	; 0x3f
 80043b0:	409a      	lsls	r2, r3
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 834a 	beq.w	8004a64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
          }
          return;
 80043d8:	e344      	b.n	8004a64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d018      	beq.n	800441a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d108      	bne.n	8004408 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d02c      	beq.n	8004458 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
 8004406:	e027      	b.n	8004458 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d023      	beq.n	8004458 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
 8004418:	e01e      	b.n	8004458 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10f      	bne.n	8004448 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0210 	bic.w	r2, r2, #16
 8004436:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8306 	beq.w	8004a6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8088 	beq.w	8004580 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2204      	movs	r2, #4
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a7a      	ldr	r2, [pc, #488]	; (8004668 <HAL_DMA_IRQHandler+0xa08>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d04a      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a79      	ldr	r2, [pc, #484]	; (800466c <HAL_DMA_IRQHandler+0xa0c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d045      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a77      	ldr	r2, [pc, #476]	; (8004670 <HAL_DMA_IRQHandler+0xa10>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d040      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a76      	ldr	r2, [pc, #472]	; (8004674 <HAL_DMA_IRQHandler+0xa14>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d03b      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a74      	ldr	r2, [pc, #464]	; (8004678 <HAL_DMA_IRQHandler+0xa18>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d036      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a73      	ldr	r2, [pc, #460]	; (800467c <HAL_DMA_IRQHandler+0xa1c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d031      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a71      	ldr	r2, [pc, #452]	; (8004680 <HAL_DMA_IRQHandler+0xa20>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d02c      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a70      	ldr	r2, [pc, #448]	; (8004684 <HAL_DMA_IRQHandler+0xa24>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d027      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6e      	ldr	r2, [pc, #440]	; (8004688 <HAL_DMA_IRQHandler+0xa28>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d022      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a6d      	ldr	r2, [pc, #436]	; (800468c <HAL_DMA_IRQHandler+0xa2c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d01d      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a6b      	ldr	r2, [pc, #428]	; (8004690 <HAL_DMA_IRQHandler+0xa30>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a6a      	ldr	r2, [pc, #424]	; (8004694 <HAL_DMA_IRQHandler+0xa34>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a68      	ldr	r2, [pc, #416]	; (8004698 <HAL_DMA_IRQHandler+0xa38>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a67      	ldr	r2, [pc, #412]	; (800469c <HAL_DMA_IRQHandler+0xa3c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a65      	ldr	r2, [pc, #404]	; (80046a0 <HAL_DMA_IRQHandler+0xa40>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a64      	ldr	r2, [pc, #400]	; (80046a4 <HAL_DMA_IRQHandler+0xa44>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d108      	bne.n	800452a <HAL_DMA_IRQHandler+0x8ca>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e007      	b.n	800453a <HAL_DMA_IRQHandler+0x8da>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3301      	adds	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004542:	429a      	cmp	r2, r3
 8004544:	d307      	bcc.n	8004556 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f2      	bne.n	800453a <HAL_DMA_IRQHandler+0x8da>
 8004554:	e000      	b.n	8004558 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004556:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2203      	movs	r2, #3
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800456e:	e003      	b.n	8004578 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8272 	beq.w	8004a6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
 8004592:	e26c      	b.n	8004a6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a43      	ldr	r2, [pc, #268]	; (80046a8 <HAL_DMA_IRQHandler+0xa48>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d022      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x984>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a42      	ldr	r2, [pc, #264]	; (80046ac <HAL_DMA_IRQHandler+0xa4c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d01d      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x984>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a40      	ldr	r2, [pc, #256]	; (80046b0 <HAL_DMA_IRQHandler+0xa50>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d018      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x984>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3f      	ldr	r2, [pc, #252]	; (80046b4 <HAL_DMA_IRQHandler+0xa54>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d013      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x984>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a3d      	ldr	r2, [pc, #244]	; (80046b8 <HAL_DMA_IRQHandler+0xa58>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00e      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x984>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a3c      	ldr	r2, [pc, #240]	; (80046bc <HAL_DMA_IRQHandler+0xa5c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d009      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x984>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a3a      	ldr	r2, [pc, #232]	; (80046c0 <HAL_DMA_IRQHandler+0xa60>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x984>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a39      	ldr	r2, [pc, #228]	; (80046c4 <HAL_DMA_IRQHandler+0xa64>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d101      	bne.n	80045e8 <HAL_DMA_IRQHandler+0x988>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <HAL_DMA_IRQHandler+0x98a>
 80045e8:	2300      	movs	r3, #0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 823f 	beq.w	8004a6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2204      	movs	r2, #4
 8004602:	409a      	lsls	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80cd 	beq.w	80047a8 <HAL_DMA_IRQHandler+0xb48>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80c7 	beq.w	80047a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	2204      	movs	r2, #4
 8004624:	409a      	lsls	r2, r3
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d049      	beq.n	80046c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 8210 	beq.w	8004a68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004650:	e20a      	b.n	8004a68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8206 	beq.w	8004a68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004664:	e200      	b.n	8004a68 <HAL_DMA_IRQHandler+0xe08>
 8004666:	bf00      	nop
 8004668:	40020010 	.word	0x40020010
 800466c:	40020028 	.word	0x40020028
 8004670:	40020040 	.word	0x40020040
 8004674:	40020058 	.word	0x40020058
 8004678:	40020070 	.word	0x40020070
 800467c:	40020088 	.word	0x40020088
 8004680:	400200a0 	.word	0x400200a0
 8004684:	400200b8 	.word	0x400200b8
 8004688:	40020410 	.word	0x40020410
 800468c:	40020428 	.word	0x40020428
 8004690:	40020440 	.word	0x40020440
 8004694:	40020458 	.word	0x40020458
 8004698:	40020470 	.word	0x40020470
 800469c:	40020488 	.word	0x40020488
 80046a0:	400204a0 	.word	0x400204a0
 80046a4:	400204b8 	.word	0x400204b8
 80046a8:	58025408 	.word	0x58025408
 80046ac:	5802541c 	.word	0x5802541c
 80046b0:	58025430 	.word	0x58025430
 80046b4:	58025444 	.word	0x58025444
 80046b8:	58025458 	.word	0x58025458
 80046bc:	5802546c 	.word	0x5802546c
 80046c0:	58025480 	.word	0x58025480
 80046c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d160      	bne.n	8004794 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7f      	ldr	r2, [pc, #508]	; (80048d4 <HAL_DMA_IRQHandler+0xc74>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d04a      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a7d      	ldr	r2, [pc, #500]	; (80048d8 <HAL_DMA_IRQHandler+0xc78>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d045      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a7c      	ldr	r2, [pc, #496]	; (80048dc <HAL_DMA_IRQHandler+0xc7c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d040      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a7a      	ldr	r2, [pc, #488]	; (80048e0 <HAL_DMA_IRQHandler+0xc80>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d03b      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a79      	ldr	r2, [pc, #484]	; (80048e4 <HAL_DMA_IRQHandler+0xc84>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d036      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a77      	ldr	r2, [pc, #476]	; (80048e8 <HAL_DMA_IRQHandler+0xc88>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d031      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a76      	ldr	r2, [pc, #472]	; (80048ec <HAL_DMA_IRQHandler+0xc8c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d02c      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a74      	ldr	r2, [pc, #464]	; (80048f0 <HAL_DMA_IRQHandler+0xc90>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d027      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a73      	ldr	r2, [pc, #460]	; (80048f4 <HAL_DMA_IRQHandler+0xc94>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d022      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a71      	ldr	r2, [pc, #452]	; (80048f8 <HAL_DMA_IRQHandler+0xc98>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01d      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a70      	ldr	r2, [pc, #448]	; (80048fc <HAL_DMA_IRQHandler+0xc9c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d018      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a6e      	ldr	r2, [pc, #440]	; (8004900 <HAL_DMA_IRQHandler+0xca0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d013      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6d      	ldr	r2, [pc, #436]	; (8004904 <HAL_DMA_IRQHandler+0xca4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00e      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a6b      	ldr	r2, [pc, #428]	; (8004908 <HAL_DMA_IRQHandler+0xca8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d009      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a6a      	ldr	r2, [pc, #424]	; (800490c <HAL_DMA_IRQHandler+0xcac>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_DMA_IRQHandler+0xb12>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a68      	ldr	r2, [pc, #416]	; (8004910 <HAL_DMA_IRQHandler+0xcb0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d108      	bne.n	8004784 <HAL_DMA_IRQHandler+0xb24>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0208 	bic.w	r2, r2, #8
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e007      	b.n	8004794 <HAL_DMA_IRQHandler+0xb34>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0204 	bic.w	r2, r2, #4
 8004792:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8165 	beq.w	8004a68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a6:	e15f      	b.n	8004a68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2202      	movs	r2, #2
 80047b2:	409a      	lsls	r2, r3
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80c5 	beq.w	8004948 <HAL_DMA_IRQHandler+0xce8>
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80bf 	beq.w	8004948 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2202      	movs	r2, #2
 80047d4:	409a      	lsls	r2, r3
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d018      	beq.n	8004816 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 813a 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004800:	e134      	b.n	8004a6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8130 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004814:	e12a      	b.n	8004a6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 8089 	bne.w	8004934 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2b      	ldr	r2, [pc, #172]	; (80048d4 <HAL_DMA_IRQHandler+0xc74>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d04a      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a29      	ldr	r2, [pc, #164]	; (80048d8 <HAL_DMA_IRQHandler+0xc78>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d045      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a28      	ldr	r2, [pc, #160]	; (80048dc <HAL_DMA_IRQHandler+0xc7c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d040      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <HAL_DMA_IRQHandler+0xc80>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d03b      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <HAL_DMA_IRQHandler+0xc84>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d036      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a23      	ldr	r2, [pc, #140]	; (80048e8 <HAL_DMA_IRQHandler+0xc88>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d031      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a22      	ldr	r2, [pc, #136]	; (80048ec <HAL_DMA_IRQHandler+0xc8c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d02c      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a20      	ldr	r2, [pc, #128]	; (80048f0 <HAL_DMA_IRQHandler+0xc90>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d027      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <HAL_DMA_IRQHandler+0xc94>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d022      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <HAL_DMA_IRQHandler+0xc98>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d01d      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <HAL_DMA_IRQHandler+0xc9c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d018      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1a      	ldr	r2, [pc, #104]	; (8004900 <HAL_DMA_IRQHandler+0xca0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a19      	ldr	r2, [pc, #100]	; (8004904 <HAL_DMA_IRQHandler+0xca4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00e      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a17      	ldr	r2, [pc, #92]	; (8004908 <HAL_DMA_IRQHandler+0xca8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a16      	ldr	r2, [pc, #88]	; (800490c <HAL_DMA_IRQHandler+0xcac>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xc62>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <HAL_DMA_IRQHandler+0xcb0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d128      	bne.n	8004914 <HAL_DMA_IRQHandler+0xcb4>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0214 	bic.w	r2, r2, #20
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e027      	b.n	8004924 <HAL_DMA_IRQHandler+0xcc4>
 80048d4:	40020010 	.word	0x40020010
 80048d8:	40020028 	.word	0x40020028
 80048dc:	40020040 	.word	0x40020040
 80048e0:	40020058 	.word	0x40020058
 80048e4:	40020070 	.word	0x40020070
 80048e8:	40020088 	.word	0x40020088
 80048ec:	400200a0 	.word	0x400200a0
 80048f0:	400200b8 	.word	0x400200b8
 80048f4:	40020410 	.word	0x40020410
 80048f8:	40020428 	.word	0x40020428
 80048fc:	40020440 	.word	0x40020440
 8004900:	40020458 	.word	0x40020458
 8004904:	40020470 	.word	0x40020470
 8004908:	40020488 	.word	0x40020488
 800490c:	400204a0 	.word	0x400204a0
 8004910:	400204b8 	.word	0x400204b8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 020a 	bic.w	r2, r2, #10
 8004922:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8097 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004946:	e091      	b.n	8004a6c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	2208      	movs	r2, #8
 8004952:	409a      	lsls	r2, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8088 	beq.w	8004a6e <HAL_DMA_IRQHandler+0xe0e>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8082 	beq.w	8004a6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a41      	ldr	r2, [pc, #260]	; (8004a74 <HAL_DMA_IRQHandler+0xe14>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04a      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a3f      	ldr	r2, [pc, #252]	; (8004a78 <HAL_DMA_IRQHandler+0xe18>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d045      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a3e      	ldr	r2, [pc, #248]	; (8004a7c <HAL_DMA_IRQHandler+0xe1c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d040      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a3c      	ldr	r2, [pc, #240]	; (8004a80 <HAL_DMA_IRQHandler+0xe20>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d03b      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a3b      	ldr	r2, [pc, #236]	; (8004a84 <HAL_DMA_IRQHandler+0xe24>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d036      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a39      	ldr	r2, [pc, #228]	; (8004a88 <HAL_DMA_IRQHandler+0xe28>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d031      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a38      	ldr	r2, [pc, #224]	; (8004a8c <HAL_DMA_IRQHandler+0xe2c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d02c      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a36      	ldr	r2, [pc, #216]	; (8004a90 <HAL_DMA_IRQHandler+0xe30>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d027      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a35      	ldr	r2, [pc, #212]	; (8004a94 <HAL_DMA_IRQHandler+0xe34>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d022      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a33      	ldr	r2, [pc, #204]	; (8004a98 <HAL_DMA_IRQHandler+0xe38>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01d      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a32      	ldr	r2, [pc, #200]	; (8004a9c <HAL_DMA_IRQHandler+0xe3c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d018      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a30      	ldr	r2, [pc, #192]	; (8004aa0 <HAL_DMA_IRQHandler+0xe40>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2f      	ldr	r2, [pc, #188]	; (8004aa4 <HAL_DMA_IRQHandler+0xe44>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2d      	ldr	r2, [pc, #180]	; (8004aa8 <HAL_DMA_IRQHandler+0xe48>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a2c      	ldr	r2, [pc, #176]	; (8004aac <HAL_DMA_IRQHandler+0xe4c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xdaa>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a2a      	ldr	r2, [pc, #168]	; (8004ab0 <HAL_DMA_IRQHandler+0xe50>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d108      	bne.n	8004a1c <HAL_DMA_IRQHandler+0xdbc>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 021c 	bic.w	r2, r2, #28
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e007      	b.n	8004a2c <HAL_DMA_IRQHandler+0xdcc>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 020e 	bic.w	r2, r2, #14
 8004a2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	2201      	movs	r2, #1
 8004a36:	409a      	lsls	r2, r3
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4798      	blx	r3
 8004a62:	e004      	b.n	8004a6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a64:	bf00      	nop
 8004a66:	e002      	b.n	8004a6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a68:	bf00      	nop
 8004a6a:	e000      	b.n	8004a6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a6e:	3728      	adds	r7, #40	; 0x28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40020010 	.word	0x40020010
 8004a78:	40020028 	.word	0x40020028
 8004a7c:	40020040 	.word	0x40020040
 8004a80:	40020058 	.word	0x40020058
 8004a84:	40020070 	.word	0x40020070
 8004a88:	40020088 	.word	0x40020088
 8004a8c:	400200a0 	.word	0x400200a0
 8004a90:	400200b8 	.word	0x400200b8
 8004a94:	40020410 	.word	0x40020410
 8004a98:	40020428 	.word	0x40020428
 8004a9c:	40020440 	.word	0x40020440
 8004aa0:	40020458 	.word	0x40020458
 8004aa4:	40020470 	.word	0x40020470
 8004aa8:	40020488 	.word	0x40020488
 8004aac:	400204a0 	.word	0x400204a0
 8004ab0:	400204b8 	.word	0x400204b8

08004ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a42      	ldr	r2, [pc, #264]	; (8004bcc <DMA_CalcBaseAndBitshift+0x118>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d04a      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a41      	ldr	r2, [pc, #260]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d045      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a3f      	ldr	r2, [pc, #252]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x120>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d040      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a3e      	ldr	r2, [pc, #248]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x124>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d03b      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a3c      	ldr	r2, [pc, #240]	; (8004bdc <DMA_CalcBaseAndBitshift+0x128>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d036      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3b      	ldr	r2, [pc, #236]	; (8004be0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d031      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a39      	ldr	r2, [pc, #228]	; (8004be4 <DMA_CalcBaseAndBitshift+0x130>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d02c      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a38      	ldr	r2, [pc, #224]	; (8004be8 <DMA_CalcBaseAndBitshift+0x134>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d027      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a36      	ldr	r2, [pc, #216]	; (8004bec <DMA_CalcBaseAndBitshift+0x138>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d022      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a35      	ldr	r2, [pc, #212]	; (8004bf0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d01d      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a33      	ldr	r2, [pc, #204]	; (8004bf4 <DMA_CalcBaseAndBitshift+0x140>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d018      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a32      	ldr	r2, [pc, #200]	; (8004bf8 <DMA_CalcBaseAndBitshift+0x144>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d013      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a30      	ldr	r2, [pc, #192]	; (8004bfc <DMA_CalcBaseAndBitshift+0x148>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00e      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d009      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <DMA_CalcBaseAndBitshift+0x150>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <DMA_CalcBaseAndBitshift+0x154>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <DMA_CalcBaseAndBitshift+0xac>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <DMA_CalcBaseAndBitshift+0xae>
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d024      	beq.n	8004bb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	3b10      	subs	r3, #16
 8004b6e:	4a27      	ldr	r2, [pc, #156]	; (8004c0c <DMA_CalcBaseAndBitshift+0x158>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	4a24      	ldr	r2, [pc, #144]	; (8004c10 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b80:	5cd3      	ldrb	r3, [r2, r3]
 8004b82:	461a      	mov	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d908      	bls.n	8004ba0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	4b1f      	ldr	r3, [pc, #124]	; (8004c14 <DMA_CalcBaseAndBitshift+0x160>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	659a      	str	r2, [r3, #88]	; 0x58
 8004b9e:	e00d      	b.n	8004bbc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <DMA_CalcBaseAndBitshift+0x160>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6593      	str	r3, [r2, #88]	; 0x58
 8004bae:	e005      	b.n	8004bbc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40020010 	.word	0x40020010
 8004bd0:	40020028 	.word	0x40020028
 8004bd4:	40020040 	.word	0x40020040
 8004bd8:	40020058 	.word	0x40020058
 8004bdc:	40020070 	.word	0x40020070
 8004be0:	40020088 	.word	0x40020088
 8004be4:	400200a0 	.word	0x400200a0
 8004be8:	400200b8 	.word	0x400200b8
 8004bec:	40020410 	.word	0x40020410
 8004bf0:	40020428 	.word	0x40020428
 8004bf4:	40020440 	.word	0x40020440
 8004bf8:	40020458 	.word	0x40020458
 8004bfc:	40020470 	.word	0x40020470
 8004c00:	40020488 	.word	0x40020488
 8004c04:	400204a0 	.word	0x400204a0
 8004c08:	400204b8 	.word	0x400204b8
 8004c0c:	aaaaaaab 	.word	0xaaaaaaab
 8004c10:	0800ae28 	.word	0x0800ae28
 8004c14:	fffffc00 	.word	0xfffffc00

08004c18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d120      	bne.n	8004c6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d858      	bhi.n	8004ce6 <DMA_CheckFifoParam+0xce>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <DMA_CheckFifoParam+0x24>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c5f 	.word	0x08004c5f
 8004c44:	08004c4d 	.word	0x08004c4d
 8004c48:	08004ce7 	.word	0x08004ce7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d048      	beq.n	8004cea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c5c:	e045      	b.n	8004cea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c66:	d142      	bne.n	8004cee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c6c:	e03f      	b.n	8004cee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	d123      	bne.n	8004cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d838      	bhi.n	8004cf2 <DMA_CheckFifoParam+0xda>
 8004c80:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <DMA_CheckFifoParam+0x70>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004c99 	.word	0x08004c99
 8004c8c:	08004c9f 	.word	0x08004c9f
 8004c90:	08004c99 	.word	0x08004c99
 8004c94:	08004cb1 	.word	0x08004cb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
        break;
 8004c9c:	e030      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d025      	beq.n	8004cf6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cae:	e022      	b.n	8004cf6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb8:	d11f      	bne.n	8004cfa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cbe:	e01c      	b.n	8004cfa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d902      	bls.n	8004cce <DMA_CheckFifoParam+0xb6>
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d003      	beq.n	8004cd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ccc:	e018      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
        break;
 8004cd2:	e015      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00e      	beq.n	8004cfe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ce4:	e00b      	b.n	8004cfe <DMA_CheckFifoParam+0xe6>
        break;
 8004ce6:	bf00      	nop
 8004ce8:	e00a      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cea:	bf00      	nop
 8004cec:	e008      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cee:	bf00      	nop
 8004cf0:	e006      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e004      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
    break;
 8004cfe:	bf00      	nop
    }
  }

  return status;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop

08004d10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a38      	ldr	r2, [pc, #224]	; (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d022      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a36      	ldr	r2, [pc, #216]	; (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01d      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a35      	ldr	r2, [pc, #212]	; (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d018      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a33      	ldr	r2, [pc, #204]	; (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a32      	ldr	r2, [pc, #200]	; (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a30      	ldr	r2, [pc, #192]	; (8004e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d009      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01a      	beq.n	8004dae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3b08      	subs	r3, #8
 8004d80:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4b26      	ldr	r3, [pc, #152]	; (8004e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2201      	movs	r2, #1
 8004da6:	409a      	lsls	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004dac:	e024      	b.n	8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	3b10      	subs	r3, #16
 8004db6:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d806      	bhi.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d902      	bls.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	461a      	mov	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a16      	ldr	r2, [pc, #88]	; (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004de8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2201      	movs	r2, #1
 8004df2:	409a      	lsls	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	58025408 	.word	0x58025408
 8004e08:	5802541c 	.word	0x5802541c
 8004e0c:	58025430 	.word	0x58025430
 8004e10:	58025444 	.word	0x58025444
 8004e14:	58025458 	.word	0x58025458
 8004e18:	5802546c 	.word	0x5802546c
 8004e1c:	58025480 	.word	0x58025480
 8004e20:	58025494 	.word	0x58025494
 8004e24:	cccccccd 	.word	0xcccccccd
 8004e28:	16009600 	.word	0x16009600
 8004e2c:	58025880 	.word	0x58025880
 8004e30:	aaaaaaab 	.word	0xaaaaaaab
 8004e34:	400204b8 	.word	0x400204b8
 8004e38:	4002040f 	.word	0x4002040f
 8004e3c:	10008200 	.word	0x10008200
 8004e40:	40020880 	.word	0x40020880

08004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04a      	beq.n	8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d847      	bhi.n	8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a25      	ldr	r2, [pc, #148]	; (8004efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d022      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a24      	ldr	r2, [pc, #144]	; (8004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d01d      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a22      	ldr	r2, [pc, #136]	; (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d018      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00e      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d101      	bne.n	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ecc:	671a      	str	r2, [r3, #112]	; 0x70
 8004ece:	e009      	b.n	8004ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ee2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	2201      	movs	r2, #1
 8004eea:	409a      	lsls	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	58025408 	.word	0x58025408
 8004f00:	5802541c 	.word	0x5802541c
 8004f04:	58025430 	.word	0x58025430
 8004f08:	58025444 	.word	0x58025444
 8004f0c:	58025458 	.word	0x58025458
 8004f10:	5802546c 	.word	0x5802546c
 8004f14:	58025480 	.word	0x58025480
 8004f18:	58025494 	.word	0x58025494
 8004f1c:	1600963f 	.word	0x1600963f
 8004f20:	58025940 	.word	0x58025940
 8004f24:	1000823f 	.word	0x1000823f
 8004f28:	40020940 	.word	0x40020940

08004f2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0cf      	b.n	80050de <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2223      	movs	r2, #35	; 0x23
 8004f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7fd f907 	bl	8002164 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f56:	4b64      	ldr	r3, [pc, #400]	; (80050e8 <HAL_ETH_Init+0x1bc>)
 8004f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f5c:	4a62      	ldr	r2, [pc, #392]	; (80050e8 <HAL_ETH_Init+0x1bc>)
 8004f5e:	f043 0302 	orr.w	r3, r3, #2
 8004f62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f66:	4b60      	ldr	r3, [pc, #384]	; (80050e8 <HAL_ETH_Init+0x1bc>)
 8004f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	7a1b      	ldrb	r3, [r3, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d103      	bne.n	8004f84 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f7fd fc8b 	bl	8002898 <HAL_SYSCFG_ETHInterfaceSelect>
 8004f82:	e003      	b.n	8004f8c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004f84:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004f88:	f7fd fc86 	bl	8002898 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004f8c:	4b57      	ldr	r3, [pc, #348]	; (80050ec <HAL_ETH_Init+0x1c0>)
 8004f8e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fa6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa8:	f7fd fc3a 	bl	8002820 <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004fae:	e011      	b.n	8004fd4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004fb0:	f7fd fc36 	bl	8002820 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fbe:	d909      	bls.n	8004fd4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	22e0      	movs	r2, #224	; 0xe0
 8004fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e084      	b.n	80050de <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1e4      	bne.n	8004fb0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f886 	bl	80050f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004fec:	f001 fefc 	bl	8006de8 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4a3f      	ldr	r2, [pc, #252]	; (80050f0 <HAL_ETH_Init+0x1c4>)
 8004ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff8:	0c9a      	lsrs	r2, r3, #18
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3a01      	subs	r2, #1
 8005000:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fa71 	bl	80054ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005012:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005016:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005022:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005026:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	22e0      	movs	r2, #224	; 0xe0
 8005042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e049      	b.n	80050de <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005052:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005056:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <HAL_ETH_Init+0x1c8>)
 8005058:	4013      	ands	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6952      	ldr	r2, [r2, #20]
 800505e:	0051      	lsls	r1, r2, #1
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	430b      	orrs	r3, r1
 8005066:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800506a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fad9 	bl	8005626 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fb1f 	bl	80056b8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	3305      	adds	r3, #5
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	021a      	lsls	r2, r3, #8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	3304      	adds	r3, #4
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	3303      	adds	r3, #3
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	061a      	lsls	r2, r3, #24
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	3302      	adds	r3, #2
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	3301      	adds	r3, #1
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050c6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2210      	movs	r2, #16
 80050d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	58024400 	.word	0x58024400
 80050ec:	58000400 	.word	0x58000400
 80050f0:	431bde83 	.word	0x431bde83
 80050f4:	ffff8001 	.word	0xffff8001

080050f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005108:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005110:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005112:	f001 fe69 	bl	8006de8 <HAL_RCC_GetHCLKFreq>
 8005116:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d908      	bls.n	8005132 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d804      	bhi.n	8005132 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e027      	b.n	8005182 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4a18      	ldr	r2, [pc, #96]	; (8005198 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d908      	bls.n	800514c <HAL_ETH_SetMDIOClockRange+0x54>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d204      	bcs.n	800514c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e01a      	b.n	8005182 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4a13      	ldr	r2, [pc, #76]	; (800519c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d303      	bcc.n	800515c <HAL_ETH_SetMDIOClockRange+0x64>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4a12      	ldr	r2, [pc, #72]	; (80051a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d911      	bls.n	8005180 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4a10      	ldr	r2, [pc, #64]	; (80051a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d908      	bls.n	8005176 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4a0f      	ldr	r2, [pc, #60]	; (80051a4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d804      	bhi.n	8005176 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e005      	b.n	8005182 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e000      	b.n	8005182 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005180:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800518c:	bf00      	nop
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	01312cff 	.word	0x01312cff
 8005198:	02160ebf 	.word	0x02160ebf
 800519c:	03938700 	.word	0x03938700
 80051a0:	05f5e0ff 	.word	0x05f5e0ff
 80051a4:	08f0d17f 	.word	0x08f0d17f

080051a8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80051ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	791b      	ldrb	r3, [r3, #4]
 80051c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80051c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	7b1b      	ldrb	r3, [r3, #12]
 80051c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	7b5b      	ldrb	r3, [r3, #13]
 80051d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	7b9b      	ldrb	r3, [r3, #14]
 80051d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80051da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	7bdb      	ldrb	r3, [r3, #15]
 80051e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	7c12      	ldrb	r2, [r2, #16]
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	d102      	bne.n	80051f2 <ETH_SetMACConfig+0x4a>
 80051ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80051f0:	e000      	b.n	80051f4 <ETH_SetMACConfig+0x4c>
 80051f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	7c52      	ldrb	r2, [r2, #17]
 80051fa:	2a00      	cmp	r2, #0
 80051fc:	d102      	bne.n	8005204 <ETH_SetMACConfig+0x5c>
 80051fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005202:	e000      	b.n	8005206 <ETH_SetMACConfig+0x5e>
 8005204:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005206:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	7c9b      	ldrb	r3, [r3, #18]
 800520c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800520e:	431a      	orrs	r2, r3
               macconf->Speed |
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005214:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800521a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	7f1b      	ldrb	r3, [r3, #28]
 8005220:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	7f5b      	ldrb	r3, [r3, #29]
 8005228:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800522a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	7f92      	ldrb	r2, [r2, #30]
 8005230:	2a00      	cmp	r2, #0
 8005232:	d102      	bne.n	800523a <ETH_SetMACConfig+0x92>
 8005234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005238:	e000      	b.n	800523c <ETH_SetMACConfig+0x94>
 800523a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800523c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	7fdb      	ldrb	r3, [r3, #31]
 8005242:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005244:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	f892 2020 	ldrb.w	r2, [r2, #32]
 800524c:	2a00      	cmp	r2, #0
 800524e:	d102      	bne.n	8005256 <ETH_SetMACConfig+0xae>
 8005250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005254:	e000      	b.n	8005258 <ETH_SetMACConfig+0xb0>
 8005256:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005258:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800525e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005266:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005268:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b56      	ldr	r3, [pc, #344]	; (80053d4 <ETH_SetMACConfig+0x22c>)
 800527a:	4013      	ands	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	430b      	orrs	r3, r1
 8005284:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005292:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005294:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800529c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800529e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80052a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	d102      	bne.n	80052ba <ETH_SetMACConfig+0x112>
 80052b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052b8:	e000      	b.n	80052bc <ETH_SetMACConfig+0x114>
 80052ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b42      	ldr	r3, [pc, #264]	; (80053d8 <ETH_SetMACConfig+0x230>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	68f9      	ldr	r1, [r7, #12]
 80052d6:	430b      	orrs	r3, r1
 80052d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	4b3a      	ldr	r3, [pc, #232]	; (80053dc <ETH_SetMACConfig+0x234>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	430b      	orrs	r3, r1
 80052fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005304:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800530a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005312:	2a00      	cmp	r2, #0
 8005314:	d101      	bne.n	800531a <ETH_SetMACConfig+0x172>
 8005316:	2280      	movs	r2, #128	; 0x80
 8005318:	e000      	b.n	800531c <ETH_SetMACConfig+0x174>
 800531a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800531c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005322:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800532e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005332:	4013      	ands	r3, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	68f9      	ldr	r1, [r7, #12]
 800533a:	430b      	orrs	r3, r1
 800533c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005344:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800534c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535a:	f023 0103 	bic.w	r1, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	430a      	orrs	r2, r1
 8005366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005372:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800538e:	2a00      	cmp	r2, #0
 8005390:	d101      	bne.n	8005396 <ETH_SetMACConfig+0x1ee>
 8005392:	2240      	movs	r2, #64	; 0x40
 8005394:	e000      	b.n	8005398 <ETH_SetMACConfig+0x1f0>
 8005396:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005398:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80053a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80053aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80053b8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	00048083 	.word	0x00048083
 80053d8:	c0f88000 	.word	0xc0f88000
 80053dc:	fffffef0 	.word	0xfffffef0

080053e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4b38      	ldr	r3, [pc, #224]	; (80054d8 <ETH_SetDMAConfig+0xf8>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	6811      	ldr	r1, [r2, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	430b      	orrs	r3, r1
 8005402:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005406:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	791b      	ldrb	r3, [r3, #4]
 800540c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005412:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	7b1b      	ldrb	r3, [r3, #12]
 8005418:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	4b2c      	ldr	r3, [pc, #176]	; (80054dc <ETH_SetDMAConfig+0xfc>)
 800542a:	4013      	ands	r3, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	68f9      	ldr	r1, [r7, #12]
 8005432:	430b      	orrs	r3, r1
 8005434:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005438:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	7b5b      	ldrb	r3, [r3, #13]
 800543e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005450:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005454:	4b22      	ldr	r3, [pc, #136]	; (80054e0 <ETH_SetDMAConfig+0x100>)
 8005456:	4013      	ands	r3, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	68f9      	ldr	r1, [r7, #12]
 800545e:	430b      	orrs	r3, r1
 8005460:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005464:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	7d1b      	ldrb	r3, [r3, #20]
 8005470:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005472:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	7f5b      	ldrb	r3, [r3, #29]
 8005478:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005486:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800548a:	4b16      	ldr	r3, [pc, #88]	; (80054e4 <ETH_SetDMAConfig+0x104>)
 800548c:	4013      	ands	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	430b      	orrs	r3, r1
 8005496:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800549a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	7f1b      	ldrb	r3, [r3, #28]
 80054a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80054b8:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <ETH_SetDMAConfig+0x108>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	68f9      	ldr	r1, [r7, #12]
 80054c2:	430b      	orrs	r3, r1
 80054c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054c8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	ffff87fd 	.word	0xffff87fd
 80054dc:	ffff2ffe 	.word	0xffff2ffe
 80054e0:	fffec000 	.word	0xfffec000
 80054e4:	ffc0efef 	.word	0xffc0efef
 80054e8:	7fc0ffff 	.word	0x7fc0ffff

080054ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b0a4      	sub	sp, #144	; 0x90
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054fa:	2300      	movs	r3, #0
 80054fc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005504:	2300      	movs	r3, #0
 8005506:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800552c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800552e:	2300      	movs	r3, #0
 8005530:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005534:	2300      	movs	r3, #0
 8005536:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005538:	2300      	movs	r3, #0
 800553a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800553e:	2300      	movs	r3, #0
 8005540:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005544:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005548:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800554a:	2300      	movs	r3, #0
 800554c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005550:	2300      	movs	r3, #0
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005566:	2300      	movs	r3, #0
 8005568:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800556a:	2300      	movs	r3, #0
 800556c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800556e:	2300      	movs	r3, #0
 8005570:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005572:	2300      	movs	r3, #0
 8005574:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005584:	2320      	movs	r3, #32
 8005586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005590:	2300      	movs	r3, #0
 8005592:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005596:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800559c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055a0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80055a8:	2302      	movs	r3, #2
 80055aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80055c6:	2300      	movs	r3, #0
 80055c8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80055d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff fde6 	bl	80051a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80055dc:	2301      	movs	r3, #1
 80055de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80055e0:	2301      	movs	r3, #1
 80055e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005600:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005604:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005606:	2300      	movs	r3, #0
 8005608:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800560c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff fee1 	bl	80053e0 <ETH_SetDMAConfig>
}
 800561e:	bf00      	nop
 8005620:	3790      	adds	r7, #144	; 0x90
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e01d      	b.n	8005670 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68d9      	ldr	r1, [r3, #12]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4613      	mov	r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4413      	add	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	440b      	add	r3, r1
 8005644:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2200      	movs	r2, #0
 800565c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	3206      	adds	r2, #6
 8005666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3301      	adds	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d9de      	bls.n	8005634 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005684:	461a      	mov	r2, r3
 8005686:	2303      	movs	r3, #3
 8005688:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005698:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e023      	b.n	800570e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6919      	ldr	r1, [r3, #16]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4613      	mov	r3, r2
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	4413      	add	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	440b      	add	r3, r1
 80056d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2200      	movs	r2, #0
 80056e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2200      	movs	r2, #0
 80056ee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2200      	movs	r2, #0
 80056f4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	3212      	adds	r2, #18
 8005704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d9d8      	bls.n	80056c6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573a:	461a      	mov	r2, r3
 800573c:	2303      	movs	r3, #3
 800573e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005762:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
	...

08005774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005782:	4b89      	ldr	r3, [pc, #548]	; (80059a8 <HAL_GPIO_Init+0x234>)
 8005784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005786:	e194      	b.n	8005ab2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	2101      	movs	r1, #1
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	fa01 f303 	lsl.w	r3, r1, r3
 8005794:	4013      	ands	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 8186 	beq.w	8005aac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 0303 	and.w	r3, r3, #3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d005      	beq.n	80057b8 <HAL_GPIO_Init+0x44>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d130      	bne.n	800581a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	2203      	movs	r2, #3
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	43db      	mvns	r3, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4313      	orrs	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057ee:	2201      	movs	r2, #1
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4013      	ands	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	f003 0201 	and.w	r2, r3, #1
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b03      	cmp	r3, #3
 8005824:	d017      	beq.n	8005856 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	2203      	movs	r2, #3
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	43db      	mvns	r3, r3
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	4013      	ands	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4313      	orrs	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d123      	bne.n	80058aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	08da      	lsrs	r2, r3, #3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3208      	adds	r2, #8
 800586a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	220f      	movs	r2, #15
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4313      	orrs	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	08da      	lsrs	r2, r3, #3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3208      	adds	r2, #8
 80058a4:	69b9      	ldr	r1, [r7, #24]
 80058a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	2203      	movs	r2, #3
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f003 0203 	and.w	r2, r3, #3
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80e0 	beq.w	8005aac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ec:	4b2f      	ldr	r3, [pc, #188]	; (80059ac <HAL_GPIO_Init+0x238>)
 80058ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058f2:	4a2e      	ldr	r2, [pc, #184]	; (80059ac <HAL_GPIO_Init+0x238>)
 80058f4:	f043 0302 	orr.w	r3, r3, #2
 80058f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058fc:	4b2b      	ldr	r3, [pc, #172]	; (80059ac <HAL_GPIO_Init+0x238>)
 80058fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800590a:	4a29      	ldr	r2, [pc, #164]	; (80059b0 <HAL_GPIO_Init+0x23c>)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	089b      	lsrs	r3, r3, #2
 8005910:	3302      	adds	r3, #2
 8005912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	220f      	movs	r2, #15
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a20      	ldr	r2, [pc, #128]	; (80059b4 <HAL_GPIO_Init+0x240>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d052      	beq.n	80059dc <HAL_GPIO_Init+0x268>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <HAL_GPIO_Init+0x244>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d031      	beq.n	80059a2 <HAL_GPIO_Init+0x22e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <HAL_GPIO_Init+0x248>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d02b      	beq.n	800599e <HAL_GPIO_Init+0x22a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <HAL_GPIO_Init+0x24c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d025      	beq.n	800599a <HAL_GPIO_Init+0x226>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <HAL_GPIO_Init+0x250>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d01f      	beq.n	8005996 <HAL_GPIO_Init+0x222>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <HAL_GPIO_Init+0x254>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d019      	beq.n	8005992 <HAL_GPIO_Init+0x21e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1a      	ldr	r2, [pc, #104]	; (80059cc <HAL_GPIO_Init+0x258>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <HAL_GPIO_Init+0x21a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a19      	ldr	r2, [pc, #100]	; (80059d0 <HAL_GPIO_Init+0x25c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00d      	beq.n	800598a <HAL_GPIO_Init+0x216>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <HAL_GPIO_Init+0x260>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <HAL_GPIO_Init+0x212>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <HAL_GPIO_Init+0x264>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <HAL_GPIO_Init+0x20e>
 800597e:	2309      	movs	r3, #9
 8005980:	e02d      	b.n	80059de <HAL_GPIO_Init+0x26a>
 8005982:	230a      	movs	r3, #10
 8005984:	e02b      	b.n	80059de <HAL_GPIO_Init+0x26a>
 8005986:	2308      	movs	r3, #8
 8005988:	e029      	b.n	80059de <HAL_GPIO_Init+0x26a>
 800598a:	2307      	movs	r3, #7
 800598c:	e027      	b.n	80059de <HAL_GPIO_Init+0x26a>
 800598e:	2306      	movs	r3, #6
 8005990:	e025      	b.n	80059de <HAL_GPIO_Init+0x26a>
 8005992:	2305      	movs	r3, #5
 8005994:	e023      	b.n	80059de <HAL_GPIO_Init+0x26a>
 8005996:	2304      	movs	r3, #4
 8005998:	e021      	b.n	80059de <HAL_GPIO_Init+0x26a>
 800599a:	2303      	movs	r3, #3
 800599c:	e01f      	b.n	80059de <HAL_GPIO_Init+0x26a>
 800599e:	2302      	movs	r3, #2
 80059a0:	e01d      	b.n	80059de <HAL_GPIO_Init+0x26a>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e01b      	b.n	80059de <HAL_GPIO_Init+0x26a>
 80059a6:	bf00      	nop
 80059a8:	58000080 	.word	0x58000080
 80059ac:	58024400 	.word	0x58024400
 80059b0:	58000400 	.word	0x58000400
 80059b4:	58020000 	.word	0x58020000
 80059b8:	58020400 	.word	0x58020400
 80059bc:	58020800 	.word	0x58020800
 80059c0:	58020c00 	.word	0x58020c00
 80059c4:	58021000 	.word	0x58021000
 80059c8:	58021400 	.word	0x58021400
 80059cc:	58021800 	.word	0x58021800
 80059d0:	58021c00 	.word	0x58021c00
 80059d4:	58022000 	.word	0x58022000
 80059d8:	58022400 	.word	0x58022400
 80059dc:	2300      	movs	r3, #0
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	f002 0203 	and.w	r2, r2, #3
 80059e4:	0092      	lsls	r2, r2, #2
 80059e6:	4093      	lsls	r3, r2
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059ee:	4938      	ldr	r1, [pc, #224]	; (8005ad0 <HAL_GPIO_Init+0x35c>)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	3302      	adds	r3, #2
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	43db      	mvns	r3, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f47f ae63 	bne.w	8005788 <HAL_GPIO_Init+0x14>
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	3724      	adds	r7, #36	; 0x24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	58000400 	.word	0x58000400

08005ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	887b      	ldrh	r3, [r7, #2]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
 8005af0:	e001      	b.n	8005af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	807b      	strh	r3, [r7, #2]
 8005b10:	4613      	mov	r3, r2
 8005b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b14:	787b      	ldrb	r3, [r7, #1]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b1a:	887a      	ldrh	r2, [r7, #2]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b20:	e003      	b.n	8005b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b22:	887b      	ldrh	r3, [r7, #2]
 8005b24:	041a      	lsls	r2, r3, #16
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	619a      	str	r2, [r3, #24]
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b48:	887a      	ldrh	r2, [r7, #2]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	041a      	lsls	r2, r3, #16
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	43d9      	mvns	r1, r3
 8005b54:	887b      	ldrh	r3, [r7, #2]
 8005b56:	400b      	ands	r3, r1
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	619a      	str	r2, [r3, #24]
}
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005b74:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <HAL_HSEM_FastTake+0x2c>)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3320      	adds	r3, #32
 8005b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b7e:	4a07      	ldr	r2, [pc, #28]	; (8005b9c <HAL_HSEM_FastTake+0x30>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d101      	bne.n	8005b88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	e000      	b.n	8005b8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	58026400 	.word	0x58026400
 8005b9c:	80000300 	.word	0x80000300

08005ba0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005baa:	4906      	ldr	r1, [pc, #24]	; (8005bc4 <HAL_HSEM_Release+0x24>)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	58026400 	.word	0x58026400

08005bc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bca:	b08f      	sub	sp, #60	; 0x3c
 8005bcc:	af0a      	add	r7, sp, #40	; 0x28
 8005bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e116      	b.n	8005e08 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7fc fcc1 	bl	800257c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2203      	movs	r2, #3
 8005bfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f004 fded 	bl	800a7f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	687e      	ldr	r6, [r7, #4]
 8005c26:	466d      	mov	r5, sp
 8005c28:	f106 0410 	add.w	r4, r6, #16
 8005c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c38:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c3c:	1d33      	adds	r3, r6, #4
 8005c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c40:	6838      	ldr	r0, [r7, #0]
 8005c42:	f004 fd6b 	bl	800a71c <USB_CoreInit>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0d7      	b.n	8005e08 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f004 fddb 	bl	800a81a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c64:	2300      	movs	r3, #0
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	e04a      	b.n	8005d00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c6a:	7bfa      	ldrb	r2, [r7, #15]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	333d      	adds	r3, #61	; 0x3d
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c7e:	7bfa      	ldrb	r2, [r7, #15]
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	333c      	adds	r3, #60	; 0x3c
 8005c8e:	7bfa      	ldrb	r2, [r7, #15]
 8005c90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	b298      	uxth	r0, r3
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3344      	adds	r3, #68	; 0x44
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005caa:	7bfa      	ldrb	r2, [r7, #15]
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	3340      	adds	r3, #64	; 0x40
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cbe:	7bfa      	ldrb	r2, [r7, #15]
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	3348      	adds	r3, #72	; 0x48
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cd2:	7bfa      	ldrb	r2, [r7, #15]
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	334c      	adds	r3, #76	; 0x4c
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ce6:	7bfa      	ldrb	r2, [r7, #15]
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	3354      	adds	r3, #84	; 0x54
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
 8005d00:	7bfa      	ldrb	r2, [r7, #15]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d3af      	bcc.n	8005c6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	73fb      	strb	r3, [r7, #15]
 8005d0e:	e044      	b.n	8005d9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d10:	7bfa      	ldrb	r2, [r7, #15]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d26:	7bfa      	ldrb	r2, [r7, #15]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005d38:	7bfa      	ldrb	r2, [r7, #15]
 8005d3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d3c:	7bfa      	ldrb	r2, [r7, #15]
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d52:	7bfa      	ldrb	r2, [r7, #15]
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d68:	7bfa      	ldrb	r2, [r7, #15]
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d7e:	7bfa      	ldrb	r2, [r7, #15]
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	4613      	mov	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	440b      	add	r3, r1
 8005d8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	3301      	adds	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
 8005d9a:	7bfa      	ldrb	r2, [r7, #15]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d3b5      	bcc.n	8005d10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	687e      	ldr	r6, [r7, #4]
 8005dac:	466d      	mov	r5, sp
 8005dae:	f106 0410 	add.w	r4, r6, #16
 8005db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005dbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005dc2:	1d33      	adds	r3, r6, #4
 8005dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dc6:	6838      	ldr	r0, [r7, #0]
 8005dc8:	f004 fd74 	bl	800a8b4 <USB_DevInit>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e014      	b.n	8005e08 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d102      	bne.n	8005dfc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f80a 	bl	8005e10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f004 ff32 	bl	800ac6a <USB_DevDisconnect>

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e3e:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_PCDEx_ActivateLPM+0x44>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	10000003 	.word	0x10000003

08005e58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005e60:	4b29      	ldr	r3, [pc, #164]	; (8005f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	2b06      	cmp	r3, #6
 8005e6a:	d00a      	beq.n	8005e82 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e6c:	4b26      	ldr	r3, [pc, #152]	; (8005f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d001      	beq.n	8005e7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e040      	b.n	8005f00 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e03e      	b.n	8005f00 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e82:	4b21      	ldr	r3, [pc, #132]	; (8005f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005e8a:	491f      	ldr	r1, [pc, #124]	; (8005f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e92:	f7fc fcc5 	bl	8002820 <HAL_GetTick>
 8005e96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e98:	e009      	b.n	8005eae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e9a:	f7fc fcc1 	bl	8002820 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea8:	d901      	bls.n	8005eae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e028      	b.n	8005f00 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005eae:	4b16      	ldr	r3, [pc, #88]	; (8005f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eba:	d1ee      	bne.n	8005e9a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b1e      	cmp	r3, #30
 8005ec0:	d008      	beq.n	8005ed4 <HAL_PWREx_ConfigSupply+0x7c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ec6:	d005      	beq.n	8005ed4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b1d      	cmp	r3, #29
 8005ecc:	d002      	beq.n	8005ed4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b2d      	cmp	r3, #45	; 0x2d
 8005ed2:	d114      	bne.n	8005efe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005ed4:	f7fc fca4 	bl	8002820 <HAL_GetTick>
 8005ed8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005eda:	e009      	b.n	8005ef0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005edc:	f7fc fca0 	bl	8002820 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eea:	d901      	bls.n	8005ef0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e007      	b.n	8005f00 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005ef0:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efc:	d1ee      	bne.n	8005edc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	58024800 	.word	0x58024800

08005f0c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005f10:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4a04      	ldr	r2, [pc, #16]	; (8005f28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f1a:	60d3      	str	r3, [r2, #12]
}
 8005f1c:	bf00      	nop
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	58024800 	.word	0x58024800

08005f2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08c      	sub	sp, #48	; 0x30
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f000 bc1d 	b.w	800677a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8087 	beq.w	800605c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f4e:	4b99      	ldr	r3, [pc, #612]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f58:	4b96      	ldr	r3, [pc, #600]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d007      	beq.n	8005f74 <HAL_RCC_OscConfig+0x48>
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	2b18      	cmp	r3, #24
 8005f68:	d110      	bne.n	8005f8c <HAL_RCC_OscConfig+0x60>
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	f003 0303 	and.w	r3, r3, #3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d10b      	bne.n	8005f8c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f74:	4b8f      	ldr	r3, [pc, #572]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d06c      	beq.n	800605a <HAL_RCC_OscConfig+0x12e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d168      	bne.n	800605a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e3f6      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f94:	d106      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x78>
 8005f96:	4b87      	ldr	r3, [pc, #540]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a86      	ldr	r2, [pc, #536]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	e02e      	b.n	8006002 <HAL_RCC_OscConfig+0xd6>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10c      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x9a>
 8005fac:	4b81      	ldr	r3, [pc, #516]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a80      	ldr	r2, [pc, #512]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	4b7e      	ldr	r3, [pc, #504]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a7d      	ldr	r2, [pc, #500]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	e01d      	b.n	8006002 <HAL_RCC_OscConfig+0xd6>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fce:	d10c      	bne.n	8005fea <HAL_RCC_OscConfig+0xbe>
 8005fd0:	4b78      	ldr	r3, [pc, #480]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a77      	ldr	r2, [pc, #476]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	4b75      	ldr	r3, [pc, #468]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a74      	ldr	r2, [pc, #464]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e00b      	b.n	8006002 <HAL_RCC_OscConfig+0xd6>
 8005fea:	4b72      	ldr	r3, [pc, #456]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a71      	ldr	r2, [pc, #452]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	4b6f      	ldr	r3, [pc, #444]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a6e      	ldr	r2, [pc, #440]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8005ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006000:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d013      	beq.n	8006032 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600a:	f7fc fc09 	bl	8002820 <HAL_GetTick>
 800600e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006012:	f7fc fc05 	bl	8002820 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b64      	cmp	r3, #100	; 0x64
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e3aa      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006024:	4b63      	ldr	r3, [pc, #396]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f0      	beq.n	8006012 <HAL_RCC_OscConfig+0xe6>
 8006030:	e014      	b.n	800605c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006032:	f7fc fbf5 	bl	8002820 <HAL_GetTick>
 8006036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800603a:	f7fc fbf1 	bl	8002820 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b64      	cmp	r3, #100	; 0x64
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e396      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800604c:	4b59      	ldr	r3, [pc, #356]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1f0      	bne.n	800603a <HAL_RCC_OscConfig+0x10e>
 8006058:	e000      	b.n	800605c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800605a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80cb 	beq.w	8006200 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800606a:	4b52      	ldr	r3, [pc, #328]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006072:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006074:	4b4f      	ldr	r3, [pc, #316]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_RCC_OscConfig+0x164>
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b18      	cmp	r3, #24
 8006084:	d156      	bne.n	8006134 <HAL_RCC_OscConfig+0x208>
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d151      	bne.n	8006134 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006090:	4b48      	ldr	r3, [pc, #288]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_OscConfig+0x17c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e368      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060a8:	4b42      	ldr	r3, [pc, #264]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f023 0219 	bic.w	r2, r3, #25
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	493f      	ldr	r1, [pc, #252]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060ba:	f7fc fbb1 	bl	8002820 <HAL_GetTick>
 80060be:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060c2:	f7fc fbad 	bl	8002820 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e352      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060d4:	4b37      	ldr	r3, [pc, #220]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e0:	f7fc fbce 	bl	8002880 <HAL_GetREVID>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d817      	bhi.n	800611e <HAL_RCC_OscConfig+0x1f2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d108      	bne.n	8006108 <HAL_RCC_OscConfig+0x1dc>
 80060f6:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80060fe:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8006100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006104:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006106:	e07b      	b.n	8006200 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006108:	4b2a      	ldr	r3, [pc, #168]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	031b      	lsls	r3, r3, #12
 8006116:	4927      	ldr	r1, [pc, #156]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8006118:	4313      	orrs	r3, r2
 800611a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800611c:	e070      	b.n	8006200 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611e:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	061b      	lsls	r3, r3, #24
 800612c:	4921      	ldr	r1, [pc, #132]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 800612e:	4313      	orrs	r3, r2
 8006130:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006132:	e065      	b.n	8006200 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d048      	beq.n	80061ce <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800613c:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f023 0219 	bic.w	r2, r3, #25
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	491a      	ldr	r1, [pc, #104]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 800614a:	4313      	orrs	r3, r2
 800614c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614e:	f7fc fb67 	bl	8002820 <HAL_GetTick>
 8006152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006156:	f7fc fb63 	bl	8002820 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e308      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006168:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f0      	beq.n	8006156 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006174:	f7fc fb84 	bl	8002880 <HAL_GetREVID>
 8006178:	4603      	mov	r3, r0
 800617a:	f241 0203 	movw	r2, #4099	; 0x1003
 800617e:	4293      	cmp	r3, r2
 8006180:	d81a      	bhi.n	80061b8 <HAL_RCC_OscConfig+0x28c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	d108      	bne.n	800619c <HAL_RCC_OscConfig+0x270>
 800618a:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006192:	4a08      	ldr	r2, [pc, #32]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 8006194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006198:	6053      	str	r3, [r2, #4]
 800619a:	e031      	b.n	8006200 <HAL_RCC_OscConfig+0x2d4>
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	031b      	lsls	r3, r3, #12
 80061aa:	4902      	ldr	r1, [pc, #8]	; (80061b4 <HAL_RCC_OscConfig+0x288>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
 80061b0:	e026      	b.n	8006200 <HAL_RCC_OscConfig+0x2d4>
 80061b2:	bf00      	nop
 80061b4:	58024400 	.word	0x58024400
 80061b8:	4b9a      	ldr	r3, [pc, #616]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	061b      	lsls	r3, r3, #24
 80061c6:	4997      	ldr	r1, [pc, #604]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	604b      	str	r3, [r1, #4]
 80061cc:	e018      	b.n	8006200 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ce:	4b95      	ldr	r3, [pc, #596]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a94      	ldr	r2, [pc, #592]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80061d4:	f023 0301 	bic.w	r3, r3, #1
 80061d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061da:	f7fc fb21 	bl	8002820 <HAL_GetTick>
 80061de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061e2:	f7fc fb1d 	bl	8002820 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e2c2      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061f4:	4b8b      	ldr	r3, [pc, #556]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1f0      	bne.n	80061e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80a9 	beq.w	8006360 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800620e:	4b85      	ldr	r3, [pc, #532]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006216:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006218:	4b82      	ldr	r3, [pc, #520]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b08      	cmp	r3, #8
 8006222:	d007      	beq.n	8006234 <HAL_RCC_OscConfig+0x308>
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2b18      	cmp	r3, #24
 8006228:	d13a      	bne.n	80062a0 <HAL_RCC_OscConfig+0x374>
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d135      	bne.n	80062a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006234:	4b7b      	ldr	r3, [pc, #492]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <HAL_RCC_OscConfig+0x320>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	2b80      	cmp	r3, #128	; 0x80
 8006246:	d001      	beq.n	800624c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e296      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800624c:	f7fc fb18 	bl	8002880 <HAL_GetREVID>
 8006250:	4603      	mov	r3, r0
 8006252:	f241 0203 	movw	r2, #4099	; 0x1003
 8006256:	4293      	cmp	r3, r2
 8006258:	d817      	bhi.n	800628a <HAL_RCC_OscConfig+0x35e>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	2b20      	cmp	r3, #32
 8006260:	d108      	bne.n	8006274 <HAL_RCC_OscConfig+0x348>
 8006262:	4b70      	ldr	r3, [pc, #448]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800626a:	4a6e      	ldr	r2, [pc, #440]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 800626c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006270:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006272:	e075      	b.n	8006360 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006274:	4b6b      	ldr	r3, [pc, #428]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	069b      	lsls	r3, r3, #26
 8006282:	4968      	ldr	r1, [pc, #416]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006284:	4313      	orrs	r3, r2
 8006286:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006288:	e06a      	b.n	8006360 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800628a:	4b66      	ldr	r3, [pc, #408]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	061b      	lsls	r3, r3, #24
 8006298:	4962      	ldr	r1, [pc, #392]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 800629a:	4313      	orrs	r3, r2
 800629c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800629e:	e05f      	b.n	8006360 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d042      	beq.n	800632e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062a8:	4b5e      	ldr	r3, [pc, #376]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a5d      	ldr	r2, [pc, #372]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80062ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b4:	f7fc fab4 	bl	8002820 <HAL_GetTick>
 80062b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80062bc:	f7fc fab0 	bl	8002820 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e255      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062ce:	4b55      	ldr	r3, [pc, #340]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f0      	beq.n	80062bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062da:	f7fc fad1 	bl	8002880 <HAL_GetREVID>
 80062de:	4603      	mov	r3, r0
 80062e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d817      	bhi.n	8006318 <HAL_RCC_OscConfig+0x3ec>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d108      	bne.n	8006302 <HAL_RCC_OscConfig+0x3d6>
 80062f0:	4b4c      	ldr	r3, [pc, #304]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80062f8:	4a4a      	ldr	r2, [pc, #296]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80062fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062fe:	6053      	str	r3, [r2, #4]
 8006300:	e02e      	b.n	8006360 <HAL_RCC_OscConfig+0x434>
 8006302:	4b48      	ldr	r3, [pc, #288]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	069b      	lsls	r3, r3, #26
 8006310:	4944      	ldr	r1, [pc, #272]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006312:	4313      	orrs	r3, r2
 8006314:	604b      	str	r3, [r1, #4]
 8006316:	e023      	b.n	8006360 <HAL_RCC_OscConfig+0x434>
 8006318:	4b42      	ldr	r3, [pc, #264]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	061b      	lsls	r3, r3, #24
 8006326:	493f      	ldr	r1, [pc, #252]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006328:	4313      	orrs	r3, r2
 800632a:	60cb      	str	r3, [r1, #12]
 800632c:	e018      	b.n	8006360 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800632e:	4b3d      	ldr	r3, [pc, #244]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633a:	f7fc fa71 	bl	8002820 <HAL_GetTick>
 800633e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006340:	e008      	b.n	8006354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006342:	f7fc fa6d 	bl	8002820 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e212      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006354:	4b33      	ldr	r3, [pc, #204]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1f0      	bne.n	8006342 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d036      	beq.n	80063da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d019      	beq.n	80063a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006374:	4b2b      	ldr	r3, [pc, #172]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006378:	4a2a      	ldr	r2, [pc, #168]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 800637a:	f043 0301 	orr.w	r3, r3, #1
 800637e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006380:	f7fc fa4e 	bl	8002820 <HAL_GetTick>
 8006384:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006388:	f7fc fa4a 	bl	8002820 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e1ef      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800639a:	4b22      	ldr	r3, [pc, #136]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 800639c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0f0      	beq.n	8006388 <HAL_RCC_OscConfig+0x45c>
 80063a6:	e018      	b.n	80063da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063a8:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80063aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ac:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b4:	f7fc fa34 	bl	8002820 <HAL_GetTick>
 80063b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063bc:	f7fc fa30 	bl	8002820 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e1d5      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80063d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1f0      	bne.n	80063bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d039      	beq.n	800645a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01c      	beq.n	8006428 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063ee:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a0c      	ldr	r2, [pc, #48]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 80063f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063fa:	f7fc fa11 	bl	8002820 <HAL_GetTick>
 80063fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006400:	e008      	b.n	8006414 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006402:	f7fc fa0d 	bl	8002820 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e1b2      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <HAL_RCC_OscConfig+0x4f8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0f0      	beq.n	8006402 <HAL_RCC_OscConfig+0x4d6>
 8006420:	e01b      	b.n	800645a <HAL_RCC_OscConfig+0x52e>
 8006422:	bf00      	nop
 8006424:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006428:	4b9b      	ldr	r3, [pc, #620]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a9a      	ldr	r2, [pc, #616]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 800642e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006432:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006434:	f7fc f9f4 	bl	8002820 <HAL_GetTick>
 8006438:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800643c:	f7fc f9f0 	bl	8002820 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e195      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800644e:	4b92      	ldr	r3, [pc, #584]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 8081 	beq.w	800656a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006468:	4b8c      	ldr	r3, [pc, #560]	; (800669c <HAL_RCC_OscConfig+0x770>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a8b      	ldr	r2, [pc, #556]	; (800669c <HAL_RCC_OscConfig+0x770>)
 800646e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006472:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006474:	f7fc f9d4 	bl	8002820 <HAL_GetTick>
 8006478:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800647c:	f7fc f9d0 	bl	8002820 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b64      	cmp	r3, #100	; 0x64
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e175      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800648e:	4b83      	ldr	r3, [pc, #524]	; (800669c <HAL_RCC_OscConfig+0x770>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0f0      	beq.n	800647c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d106      	bne.n	80064b0 <HAL_RCC_OscConfig+0x584>
 80064a2:	4b7d      	ldr	r3, [pc, #500]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	4a7c      	ldr	r2, [pc, #496]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064a8:	f043 0301 	orr.w	r3, r3, #1
 80064ac:	6713      	str	r3, [r2, #112]	; 0x70
 80064ae:	e02d      	b.n	800650c <HAL_RCC_OscConfig+0x5e0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10c      	bne.n	80064d2 <HAL_RCC_OscConfig+0x5a6>
 80064b8:	4b77      	ldr	r3, [pc, #476]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	4a76      	ldr	r2, [pc, #472]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	6713      	str	r3, [r2, #112]	; 0x70
 80064c4:	4b74      	ldr	r3, [pc, #464]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c8:	4a73      	ldr	r2, [pc, #460]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064ca:	f023 0304 	bic.w	r3, r3, #4
 80064ce:	6713      	str	r3, [r2, #112]	; 0x70
 80064d0:	e01c      	b.n	800650c <HAL_RCC_OscConfig+0x5e0>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b05      	cmp	r3, #5
 80064d8:	d10c      	bne.n	80064f4 <HAL_RCC_OscConfig+0x5c8>
 80064da:	4b6f      	ldr	r3, [pc, #444]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4a6e      	ldr	r2, [pc, #440]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064e0:	f043 0304 	orr.w	r3, r3, #4
 80064e4:	6713      	str	r3, [r2, #112]	; 0x70
 80064e6:	4b6c      	ldr	r3, [pc, #432]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	4a6b      	ldr	r2, [pc, #428]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	6713      	str	r3, [r2, #112]	; 0x70
 80064f2:	e00b      	b.n	800650c <HAL_RCC_OscConfig+0x5e0>
 80064f4:	4b68      	ldr	r3, [pc, #416]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f8:	4a67      	ldr	r2, [pc, #412]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006500:	4b65      	ldr	r3, [pc, #404]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006504:	4a64      	ldr	r2, [pc, #400]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006506:	f023 0304 	bic.w	r3, r3, #4
 800650a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d015      	beq.n	8006540 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006514:	f7fc f984 	bl	8002820 <HAL_GetTick>
 8006518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800651a:	e00a      	b.n	8006532 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800651c:	f7fc f980 	bl	8002820 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	f241 3288 	movw	r2, #5000	; 0x1388
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e123      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006532:	4b59      	ldr	r3, [pc, #356]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0ee      	beq.n	800651c <HAL_RCC_OscConfig+0x5f0>
 800653e:	e014      	b.n	800656a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006540:	f7fc f96e 	bl	8002820 <HAL_GetTick>
 8006544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006546:	e00a      	b.n	800655e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006548:	f7fc f96a 	bl	8002820 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f241 3288 	movw	r2, #5000	; 0x1388
 8006556:	4293      	cmp	r3, r2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e10d      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800655e:	4b4e      	ldr	r3, [pc, #312]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1ee      	bne.n	8006548 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8102 	beq.w	8006778 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006574:	4b48      	ldr	r3, [pc, #288]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800657c:	2b18      	cmp	r3, #24
 800657e:	f000 80bd 	beq.w	80066fc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	2b02      	cmp	r3, #2
 8006588:	f040 809e 	bne.w	80066c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658c:	4b42      	ldr	r3, [pc, #264]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a41      	ldr	r2, [pc, #260]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fc f942 	bl	8002820 <HAL_GetTick>
 800659c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065a0:	f7fc f93e 	bl	8002820 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e0e3      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065b2:	4b39      	ldr	r3, [pc, #228]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065be:	4b36      	ldr	r3, [pc, #216]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80065c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065c2:	4b37      	ldr	r3, [pc, #220]	; (80066a0 <HAL_RCC_OscConfig+0x774>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065ce:	0112      	lsls	r2, r2, #4
 80065d0:	430a      	orrs	r2, r1
 80065d2:	4931      	ldr	r1, [pc, #196]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	628b      	str	r3, [r1, #40]	; 0x28
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	3b01      	subs	r3, #1
 80065de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e6:	3b01      	subs	r3, #1
 80065e8:	025b      	lsls	r3, r3, #9
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	3b01      	subs	r3, #1
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006600:	3b01      	subs	r3, #1
 8006602:	061b      	lsls	r3, r3, #24
 8006604:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006608:	4923      	ldr	r1, [pc, #140]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 800660a:	4313      	orrs	r3, r2
 800660c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800660e:	4b22      	ldr	r3, [pc, #136]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	4a21      	ldr	r2, [pc, #132]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006614:	f023 0301 	bic.w	r3, r3, #1
 8006618:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800661a:	4b1f      	ldr	r3, [pc, #124]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 800661c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800661e:	4b21      	ldr	r3, [pc, #132]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006620:	4013      	ands	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006626:	00d2      	lsls	r2, r2, #3
 8006628:	491b      	ldr	r1, [pc, #108]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 800662a:	4313      	orrs	r3, r2
 800662c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800662e:	4b1a      	ldr	r3, [pc, #104]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006632:	f023 020c 	bic.w	r2, r3, #12
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	4917      	ldr	r1, [pc, #92]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 800663c:	4313      	orrs	r3, r2
 800663e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006640:	4b15      	ldr	r3, [pc, #84]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	f023 0202 	bic.w	r2, r3, #2
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664c:	4912      	ldr	r1, [pc, #72]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006652:	4b11      	ldr	r3, [pc, #68]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	4a10      	ldr	r2, [pc, #64]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800665c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800665e:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	4a0d      	ldr	r2, [pc, #52]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006668:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800666a:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006674:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	4a07      	ldr	r2, [pc, #28]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a04      	ldr	r2, [pc, #16]	; (8006698 <HAL_RCC_OscConfig+0x76c>)
 8006688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800668c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fc f8c7 	bl	8002820 <HAL_GetTick>
 8006692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006694:	e011      	b.n	80066ba <HAL_RCC_OscConfig+0x78e>
 8006696:	bf00      	nop
 8006698:	58024400 	.word	0x58024400
 800669c:	58024800 	.word	0x58024800
 80066a0:	fffffc0c 	.word	0xfffffc0c
 80066a4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a8:	f7fc f8ba 	bl	8002820 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e05f      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066ba:	4b32      	ldr	r3, [pc, #200]	; (8006784 <HAL_RCC_OscConfig+0x858>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0f0      	beq.n	80066a8 <HAL_RCC_OscConfig+0x77c>
 80066c6:	e057      	b.n	8006778 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c8:	4b2e      	ldr	r3, [pc, #184]	; (8006784 <HAL_RCC_OscConfig+0x858>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2d      	ldr	r2, [pc, #180]	; (8006784 <HAL_RCC_OscConfig+0x858>)
 80066ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d4:	f7fc f8a4 	bl	8002820 <HAL_GetTick>
 80066d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066dc:	f7fc f8a0 	bl	8002820 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e045      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066ee:	4b25      	ldr	r3, [pc, #148]	; (8006784 <HAL_RCC_OscConfig+0x858>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f0      	bne.n	80066dc <HAL_RCC_OscConfig+0x7b0>
 80066fa:	e03d      	b.n	8006778 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066fc:	4b21      	ldr	r3, [pc, #132]	; (8006784 <HAL_RCC_OscConfig+0x858>)
 80066fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006700:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006702:	4b20      	ldr	r3, [pc, #128]	; (8006784 <HAL_RCC_OscConfig+0x858>)
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	2b01      	cmp	r3, #1
 800670e:	d031      	beq.n	8006774 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f003 0203 	and.w	r2, r3, #3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800671a:	429a      	cmp	r2, r3
 800671c:	d12a      	bne.n	8006774 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	091b      	lsrs	r3, r3, #4
 8006722:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800672a:	429a      	cmp	r2, r3
 800672c:	d122      	bne.n	8006774 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800673a:	429a      	cmp	r2, r3
 800673c:	d11a      	bne.n	8006774 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	0a5b      	lsrs	r3, r3, #9
 8006742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800674c:	429a      	cmp	r2, r3
 800674e:	d111      	bne.n	8006774 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	0c1b      	lsrs	r3, r3, #16
 8006754:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800675e:	429a      	cmp	r2, r3
 8006760:	d108      	bne.n	8006774 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	0e1b      	lsrs	r3, r3, #24
 8006766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006770:	429a      	cmp	r2, r3
 8006772:	d001      	beq.n	8006778 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3730      	adds	r7, #48	; 0x30
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	58024400 	.word	0x58024400

08006788 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e19c      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800679c:	4b8a      	ldr	r3, [pc, #552]	; (80069c8 <HAL_RCC_ClockConfig+0x240>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d910      	bls.n	80067cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067aa:	4b87      	ldr	r3, [pc, #540]	; (80069c8 <HAL_RCC_ClockConfig+0x240>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f023 020f 	bic.w	r2, r3, #15
 80067b2:	4985      	ldr	r1, [pc, #532]	; (80069c8 <HAL_RCC_ClockConfig+0x240>)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ba:	4b83      	ldr	r3, [pc, #524]	; (80069c8 <HAL_RCC_ClockConfig+0x240>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d001      	beq.n	80067cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e184      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d010      	beq.n	80067fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	4b7b      	ldr	r3, [pc, #492]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d908      	bls.n	80067fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067e8:	4b78      	ldr	r3, [pc, #480]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	4975      	ldr	r1, [pc, #468]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d010      	beq.n	8006828 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	4b70      	ldr	r3, [pc, #448]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006812:	429a      	cmp	r2, r3
 8006814:	d908      	bls.n	8006828 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006816:	4b6d      	ldr	r3, [pc, #436]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	496a      	ldr	r1, [pc, #424]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006824:	4313      	orrs	r3, r2
 8006826:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b00      	cmp	r3, #0
 8006832:	d010      	beq.n	8006856 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699a      	ldr	r2, [r3, #24]
 8006838:	4b64      	ldr	r3, [pc, #400]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006840:	429a      	cmp	r2, r3
 8006842:	d908      	bls.n	8006856 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006844:	4b61      	ldr	r3, [pc, #388]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	495e      	ldr	r1, [pc, #376]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006852:	4313      	orrs	r3, r2
 8006854:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d010      	beq.n	8006884 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69da      	ldr	r2, [r3, #28]
 8006866:	4b59      	ldr	r3, [pc, #356]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800686e:	429a      	cmp	r2, r3
 8006870:	d908      	bls.n	8006884 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006872:	4b56      	ldr	r3, [pc, #344]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	4953      	ldr	r1, [pc, #332]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006880:	4313      	orrs	r3, r2
 8006882:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d010      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	4b4d      	ldr	r3, [pc, #308]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	429a      	cmp	r2, r3
 800689e:	d908      	bls.n	80068b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068a0:	4b4a      	ldr	r3, [pc, #296]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	f023 020f 	bic.w	r2, r3, #15
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	4947      	ldr	r1, [pc, #284]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d055      	beq.n	800696a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80068be:	4b43      	ldr	r3, [pc, #268]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	4940      	ldr	r1, [pc, #256]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d107      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068d8:	4b3c      	ldr	r3, [pc, #240]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d121      	bne.n	8006928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0f6      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d107      	bne.n	8006900 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068f0:	4b36      	ldr	r3, [pc, #216]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d115      	bne.n	8006928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0ea      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d107      	bne.n	8006918 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006908:	4b30      	ldr	r3, [pc, #192]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e0de      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006918:	4b2c      	ldr	r3, [pc, #176]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e0d6      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006928:	4b28      	ldr	r3, [pc, #160]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	f023 0207 	bic.w	r2, r3, #7
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	4925      	ldr	r1, [pc, #148]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006936:	4313      	orrs	r3, r2
 8006938:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800693a:	f7fb ff71 	bl	8002820 <HAL_GetTick>
 800693e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006940:	e00a      	b.n	8006958 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006942:	f7fb ff6d 	bl	8002820 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006950:	4293      	cmp	r3, r2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e0be      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006958:	4b1c      	ldr	r3, [pc, #112]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	429a      	cmp	r2, r3
 8006968:	d1eb      	bne.n	8006942 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d010      	beq.n	8006998 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	4b14      	ldr	r3, [pc, #80]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	429a      	cmp	r2, r3
 8006984:	d208      	bcs.n	8006998 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006986:	4b11      	ldr	r3, [pc, #68]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f023 020f 	bic.w	r2, r3, #15
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	490e      	ldr	r1, [pc, #56]	; (80069cc <HAL_RCC_ClockConfig+0x244>)
 8006994:	4313      	orrs	r3, r2
 8006996:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006998:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <HAL_RCC_ClockConfig+0x240>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d214      	bcs.n	80069d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a6:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <HAL_RCC_ClockConfig+0x240>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f023 020f 	bic.w	r2, r3, #15
 80069ae:	4906      	ldr	r1, [pc, #24]	; (80069c8 <HAL_RCC_ClockConfig+0x240>)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b6:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <HAL_RCC_ClockConfig+0x240>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d005      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e086      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x34e>
 80069c8:	52002000 	.word	0x52002000
 80069cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d010      	beq.n	80069fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691a      	ldr	r2, [r3, #16]
 80069e0:	4b3f      	ldr	r3, [pc, #252]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d208      	bcs.n	80069fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069ec:	4b3c      	ldr	r3, [pc, #240]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	4939      	ldr	r1, [pc, #228]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0308 	and.w	r3, r3, #8
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d010      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695a      	ldr	r2, [r3, #20]
 8006a0e:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d208      	bcs.n	8006a2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a1a:	4b31      	ldr	r3, [pc, #196]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	492e      	ldr	r1, [pc, #184]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d010      	beq.n	8006a5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	699a      	ldr	r2, [r3, #24]
 8006a3c:	4b28      	ldr	r3, [pc, #160]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d208      	bcs.n	8006a5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	4922      	ldr	r1, [pc, #136]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d010      	beq.n	8006a88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69da      	ldr	r2, [r3, #28]
 8006a6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d208      	bcs.n	8006a88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a76:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	4917      	ldr	r1, [pc, #92]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a88:	f000 f834 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	4b14      	ldr	r3, [pc, #80]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	0a1b      	lsrs	r3, r3, #8
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	4912      	ldr	r1, [pc, #72]	; (8006ae4 <HAL_RCC_ClockConfig+0x35c>)
 8006a9a:	5ccb      	ldrb	r3, [r1, r3]
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006aa6:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <HAL_RCC_ClockConfig+0x358>)
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	4a0d      	ldr	r2, [pc, #52]	; (8006ae4 <HAL_RCC_ClockConfig+0x35c>)
 8006ab0:	5cd3      	ldrb	r3, [r2, r3]
 8006ab2:	f003 031f 	and.w	r3, r3, #31
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8006abc:	4a0a      	ldr	r2, [pc, #40]	; (8006ae8 <HAL_RCC_ClockConfig+0x360>)
 8006abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ac0:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <HAL_RCC_ClockConfig+0x364>)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <HAL_RCC_ClockConfig+0x368>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fb fe5e 	bl	800278c <HAL_InitTick>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	58024400 	.word	0x58024400
 8006ae4:	0800ada0 	.word	0x0800ada0
 8006ae8:	24000004 	.word	0x24000004
 8006aec:	24000000 	.word	0x24000000
 8006af0:	24000008 	.word	0x24000008

08006af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b089      	sub	sp, #36	; 0x24
 8006af8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006afa:	4bb3      	ldr	r3, [pc, #716]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b02:	2b18      	cmp	r3, #24
 8006b04:	f200 8155 	bhi.w	8006db2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006b08:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b75 	.word	0x08006b75
 8006b14:	08006db3 	.word	0x08006db3
 8006b18:	08006db3 	.word	0x08006db3
 8006b1c:	08006db3 	.word	0x08006db3
 8006b20:	08006db3 	.word	0x08006db3
 8006b24:	08006db3 	.word	0x08006db3
 8006b28:	08006db3 	.word	0x08006db3
 8006b2c:	08006db3 	.word	0x08006db3
 8006b30:	08006b9b 	.word	0x08006b9b
 8006b34:	08006db3 	.word	0x08006db3
 8006b38:	08006db3 	.word	0x08006db3
 8006b3c:	08006db3 	.word	0x08006db3
 8006b40:	08006db3 	.word	0x08006db3
 8006b44:	08006db3 	.word	0x08006db3
 8006b48:	08006db3 	.word	0x08006db3
 8006b4c:	08006db3 	.word	0x08006db3
 8006b50:	08006ba1 	.word	0x08006ba1
 8006b54:	08006db3 	.word	0x08006db3
 8006b58:	08006db3 	.word	0x08006db3
 8006b5c:	08006db3 	.word	0x08006db3
 8006b60:	08006db3 	.word	0x08006db3
 8006b64:	08006db3 	.word	0x08006db3
 8006b68:	08006db3 	.word	0x08006db3
 8006b6c:	08006db3 	.word	0x08006db3
 8006b70:	08006ba7 	.word	0x08006ba7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b74:	4b94      	ldr	r3, [pc, #592]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d009      	beq.n	8006b94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b80:	4b91      	ldr	r3, [pc, #580]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	08db      	lsrs	r3, r3, #3
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	4a90      	ldr	r2, [pc, #576]	; (8006dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006b92:	e111      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b94:	4b8d      	ldr	r3, [pc, #564]	; (8006dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b96:	61bb      	str	r3, [r7, #24]
    break;
 8006b98:	e10e      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006b9a:	4b8d      	ldr	r3, [pc, #564]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b9c:	61bb      	str	r3, [r7, #24]
    break;
 8006b9e:	e10b      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006ba0:	4b8c      	ldr	r3, [pc, #560]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ba2:	61bb      	str	r3, [r7, #24]
    break;
 8006ba4:	e108      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ba6:	4b88      	ldr	r3, [pc, #544]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006bb0:	4b85      	ldr	r3, [pc, #532]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb4:	091b      	lsrs	r3, r3, #4
 8006bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006bbc:	4b82      	ldr	r3, [pc, #520]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006bc6:	4b80      	ldr	r3, [pc, #512]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80e1 	beq.w	8006dac <HAL_RCC_GetSysClockFreq+0x2b8>
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	f000 8083 	beq.w	8006cf8 <HAL_RCC_GetSysClockFreq+0x204>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	f200 80a1 	bhi.w	8006d3c <HAL_RCC_GetSysClockFreq+0x248>
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_RCC_GetSysClockFreq+0x114>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d056      	beq.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c06:	e099      	b.n	8006d3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c08:	4b6f      	ldr	r3, [pc, #444]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02d      	beq.n	8006c70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c14:	4b6c      	ldr	r3, [pc, #432]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	08db      	lsrs	r3, r3, #3
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	4a6b      	ldr	r2, [pc, #428]	; (8006dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
 8006c24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3e:	4b62      	ldr	r3, [pc, #392]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c52:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006c6e:	e087      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006ddc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b51      	ldr	r3, [pc, #324]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c96:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb2:	e065      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006de0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc6:	4b40      	ldr	r3, [pc, #256]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cf6:	e043      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006de4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0a:	4b2f      	ldr	r3, [pc, #188]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d3a:	e021      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006de0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4e:	4b1e      	ldr	r3, [pc, #120]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006d80:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	0a5b      	lsrs	r3, r3, #9
 8006d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da4:	ee17 3a90 	vmov	r3, s15
 8006da8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006daa:	e005      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	61bb      	str	r3, [r7, #24]
    break;
 8006db0:	e002      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006db2:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006db4:	61bb      	str	r3, [r7, #24]
    break;
 8006db6:	bf00      	nop
  }

  return sysclockfreq;
 8006db8:	69bb      	ldr	r3, [r7, #24]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3724      	adds	r7, #36	; 0x24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	58024400 	.word	0x58024400
 8006dcc:	03d09000 	.word	0x03d09000
 8006dd0:	003d0900 	.word	0x003d0900
 8006dd4:	007a1200 	.word	0x007a1200
 8006dd8:	46000000 	.word	0x46000000
 8006ddc:	4c742400 	.word	0x4c742400
 8006de0:	4a742400 	.word	0x4a742400
 8006de4:	4af42400 	.word	0x4af42400

08006de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006dee:	f7ff fe81 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 8006df2:	4602      	mov	r2, r0
 8006df4:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <HAL_RCC_GetHCLKFreq+0x50>)
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	0a1b      	lsrs	r3, r3, #8
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	490f      	ldr	r1, [pc, #60]	; (8006e3c <HAL_RCC_GetHCLKFreq+0x54>)
 8006e00:	5ccb      	ldrb	r3, [r1, r3]
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	fa22 f303 	lsr.w	r3, r2, r3
 8006e0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 030f 	and.w	r3, r3, #15
 8006e14:	4a09      	ldr	r2, [pc, #36]	; (8006e3c <HAL_RCC_GetHCLKFreq+0x54>)
 8006e16:	5cd3      	ldrb	r3, [r2, r3]
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e22:	4a07      	ldr	r2, [pc, #28]	; (8006e40 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e26:	4a07      	ldr	r2, [pc, #28]	; (8006e44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e2c:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	0800ada0 	.word	0x0800ada0
 8006e40:	24000004 	.word	0x24000004
 8006e44:	24000000 	.word	0x24000000

08006e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e4c:	f7ff ffcc 	bl	8006de8 <HAL_RCC_GetHCLKFreq>
 8006e50:	4602      	mov	r2, r0
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	091b      	lsrs	r3, r3, #4
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	4904      	ldr	r1, [pc, #16]	; (8006e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e5e:	5ccb      	ldrb	r3, [r1, r3]
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	58024400 	.word	0x58024400
 8006e70:	0800ada0 	.word	0x0800ada0

08006e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e78:	f7ff ffb6 	bl	8006de8 <HAL_RCC_GetHCLKFreq>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	0a1b      	lsrs	r3, r3, #8
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	4904      	ldr	r1, [pc, #16]	; (8006e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e8a:	5ccb      	ldrb	r3, [r1, r3]
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	0800ada0 	.word	0x0800ada0

08006ea0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006eac:	2300      	movs	r3, #0
 8006eae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d03f      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ec4:	d02a      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006ec6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eca:	d824      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ed0:	d018      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ed6:	d81e      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee0:	d007      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006ee2:	e018      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee4:	4ba3      	ldr	r3, [pc, #652]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	4aa2      	ldr	r2, [pc, #648]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ef0:	e015      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 f9d5 	bl	80082a8 <RCCEx_PLL2_Config>
 8006efe:	4603      	mov	r3, r0
 8006f00:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f02:	e00c      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3324      	adds	r3, #36	; 0x24
 8006f08:	2102      	movs	r1, #2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 fa7e 	bl	800840c <RCCEx_PLL3_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f14:	e003      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1a:	e000      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f24:	4b93      	ldr	r3, [pc, #588]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f30:	4990      	ldr	r1, [pc, #576]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	650b      	str	r3, [r1, #80]	; 0x50
 8006f36:	e001      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d03d      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d826      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006f50:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006f6d 	.word	0x08006f6d
 8006f5c:	08006f7b 	.word	0x08006f7b
 8006f60:	08006f8d 	.word	0x08006f8d
 8006f64:	08006fa5 	.word	0x08006fa5
 8006f68:	08006fa5 	.word	0x08006fa5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6c:	4b81      	ldr	r3, [pc, #516]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	4a80      	ldr	r2, [pc, #512]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f78:	e015      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	2100      	movs	r1, #0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f001 f991 	bl	80082a8 <RCCEx_PLL2_Config>
 8006f86:	4603      	mov	r3, r0
 8006f88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f8a:	e00c      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3324      	adds	r3, #36	; 0x24
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 fa3a 	bl	800840c <RCCEx_PLL3_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f9c:	e003      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fac:	4b71      	ldr	r3, [pc, #452]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb0:	f023 0207 	bic.w	r2, r3, #7
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb8:	496e      	ldr	r1, [pc, #440]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	650b      	str	r3, [r1, #80]	; 0x50
 8006fbe:	e001      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d042      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd8:	d02b      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fde:	d825      	bhi.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006fe0:	2bc0      	cmp	r3, #192	; 0xc0
 8006fe2:	d028      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006fe4:	2bc0      	cmp	r3, #192	; 0xc0
 8006fe6:	d821      	bhi.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006fe8:	2b80      	cmp	r3, #128	; 0x80
 8006fea:	d016      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006fec:	2b80      	cmp	r3, #128	; 0x80
 8006fee:	d81d      	bhi.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006ff4:	2b40      	cmp	r3, #64	; 0x40
 8006ff6:	d007      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006ff8:	e018      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffa:	4b5e      	ldr	r3, [pc, #376]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffe:	4a5d      	ldr	r2, [pc, #372]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007004:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007006:	e017      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3304      	adds	r3, #4
 800700c:	2100      	movs	r1, #0
 800700e:	4618      	mov	r0, r3
 8007010:	f001 f94a 	bl	80082a8 <RCCEx_PLL2_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007018:	e00e      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	3324      	adds	r3, #36	; 0x24
 800701e:	2100      	movs	r1, #0
 8007020:	4618      	mov	r0, r3
 8007022:	f001 f9f3 	bl	800840c <RCCEx_PLL3_Config>
 8007026:	4603      	mov	r3, r0
 8007028:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800702a:	e005      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]
      break;
 8007030:	e002      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007032:	bf00      	nop
 8007034:	e000      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d109      	bne.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800703e:	4b4d      	ldr	r3, [pc, #308]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007042:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704a:	494a      	ldr	r1, [pc, #296]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800704c:	4313      	orrs	r3, r2
 800704e:	650b      	str	r3, [r1, #80]	; 0x50
 8007050:	e001      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007052:	7dfb      	ldrb	r3, [r7, #23]
 8007054:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800705e:	2b00      	cmp	r3, #0
 8007060:	d049      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800706c:	d030      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800706e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007072:	d82a      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007074:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007078:	d02c      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800707a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800707e:	d824      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007084:	d018      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800708a:	d81e      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007094:	d007      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007096:	e018      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007098:	4b36      	ldr	r3, [pc, #216]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	4a35      	ldr	r2, [pc, #212]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800709e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070a4:	e017      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3304      	adds	r3, #4
 80070aa:	2100      	movs	r1, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 f8fb 	bl	80082a8 <RCCEx_PLL2_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070b6:	e00e      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3324      	adds	r3, #36	; 0x24
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 f9a4 	bl	800840c <RCCEx_PLL3_Config>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070c8:	e005      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
      break;
 80070ce:	e002      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80070d0:	bf00      	nop
 80070d2:	e000      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80070d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10a      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80070dc:	4b25      	ldr	r3, [pc, #148]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070ea:	4922      	ldr	r1, [pc, #136]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	658b      	str	r3, [r1, #88]	; 0x58
 80070f0:	e001      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d04b      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007108:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800710c:	d030      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800710e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007112:	d82a      	bhi.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007114:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007118:	d02e      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800711a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800711e:	d824      	bhi.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007124:	d018      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800712a:	d81e      	bhi.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007134:	d007      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007136:	e018      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007138:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	4a0d      	ldr	r2, [pc, #52]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800713e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007144:	e019      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3304      	adds	r3, #4
 800714a:	2100      	movs	r1, #0
 800714c:	4618      	mov	r0, r3
 800714e:	f001 f8ab 	bl	80082a8 <RCCEx_PLL2_Config>
 8007152:	4603      	mov	r3, r0
 8007154:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007156:	e010      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3324      	adds	r3, #36	; 0x24
 800715c:	2100      	movs	r1, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f001 f954 	bl	800840c <RCCEx_PLL3_Config>
 8007164:	4603      	mov	r3, r0
 8007166:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007168:	e007      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	75fb      	strb	r3, [r7, #23]
      break;
 800716e:	e004      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007170:	bf00      	nop
 8007172:	e002      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007174:	58024400 	.word	0x58024400
      break;
 8007178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007180:	4b99      	ldr	r3, [pc, #612]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007184:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800718e:	4996      	ldr	r1, [pc, #600]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007190:	4313      	orrs	r3, r2
 8007192:	658b      	str	r3, [r1, #88]	; 0x58
 8007194:	e001      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d032      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071aa:	2b30      	cmp	r3, #48	; 0x30
 80071ac:	d01c      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80071ae:	2b30      	cmp	r3, #48	; 0x30
 80071b0:	d817      	bhi.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	d00c      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d813      	bhi.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d016      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80071be:	2b10      	cmp	r3, #16
 80071c0:	d10f      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c2:	4b89      	ldr	r3, [pc, #548]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	4a88      	ldr	r2, [pc, #544]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80071ce:	e00e      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3304      	adds	r3, #4
 80071d4:	2102      	movs	r1, #2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 f866 	bl	80082a8 <RCCEx_PLL2_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80071e0:	e005      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	75fb      	strb	r3, [r7, #23]
      break;
 80071e6:	e002      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80071e8:	bf00      	nop
 80071ea:	e000      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80071ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d109      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80071f4:	4b7c      	ldr	r3, [pc, #496]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007200:	4979      	ldr	r1, [pc, #484]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007202:	4313      	orrs	r3, r2
 8007204:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007206:	e001      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d047      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007220:	d030      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007226:	d82a      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007228:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800722c:	d02c      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800722e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007232:	d824      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007238:	d018      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800723a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800723e:	d81e      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007248:	d007      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800724a:	e018      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800724c:	4b66      	ldr	r3, [pc, #408]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	4a65      	ldr	r2, [pc, #404]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007258:	e017      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3304      	adds	r3, #4
 800725e:	2100      	movs	r1, #0
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f821 	bl	80082a8 <RCCEx_PLL2_Config>
 8007266:	4603      	mov	r3, r0
 8007268:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800726a:	e00e      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3324      	adds	r3, #36	; 0x24
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f001 f8ca 	bl	800840c <RCCEx_PLL3_Config>
 8007278:	4603      	mov	r3, r0
 800727a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800727c:	e005      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	75fb      	strb	r3, [r7, #23]
      break;
 8007282:	e002      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007284:	bf00      	nop
 8007286:	e000      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d109      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007290:	4b55      	ldr	r3, [pc, #340]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007294:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729c:	4952      	ldr	r1, [pc, #328]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	650b      	str	r3, [r1, #80]	; 0x50
 80072a2:	e001      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d049      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072bc:	d02e      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80072be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072c2:	d828      	bhi.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80072c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072c8:	d02a      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80072ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072ce:	d822      	bhi.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80072d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072d4:	d026      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80072d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072da:	d81c      	bhi.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80072dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072e0:	d010      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80072e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072e6:	d816      	bhi.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01d      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80072ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f0:	d111      	bne.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3304      	adds	r3, #4
 80072f6:	2101      	movs	r1, #1
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 ffd5 	bl	80082a8 <RCCEx_PLL2_Config>
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007302:	e012      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3324      	adds	r3, #36	; 0x24
 8007308:	2101      	movs	r1, #1
 800730a:	4618      	mov	r0, r3
 800730c:	f001 f87e 	bl	800840c <RCCEx_PLL3_Config>
 8007310:	4603      	mov	r3, r0
 8007312:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007314:	e009      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	75fb      	strb	r3, [r7, #23]
      break;
 800731a:	e006      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800731c:	bf00      	nop
 800731e:	e004      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007320:	bf00      	nop
 8007322:	e002      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007324:	bf00      	nop
 8007326:	e000      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d109      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007330:	4b2d      	ldr	r3, [pc, #180]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007334:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733c:	492a      	ldr	r1, [pc, #168]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800733e:	4313      	orrs	r3, r2
 8007340:	650b      	str	r3, [r1, #80]	; 0x50
 8007342:	e001      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d04d      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800735a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800735e:	d02e      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007364:	d828      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d02a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800736c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007370:	d822      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007372:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007376:	d026      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007378:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800737c:	d81c      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800737e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007382:	d010      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007388:	d816      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01d      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800738e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007392:	d111      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3304      	adds	r3, #4
 8007398:	2101      	movs	r1, #1
 800739a:	4618      	mov	r0, r3
 800739c:	f000 ff84 	bl	80082a8 <RCCEx_PLL2_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073a4:	e012      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3324      	adds	r3, #36	; 0x24
 80073aa:	2101      	movs	r1, #1
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 f82d 	bl	800840c <RCCEx_PLL3_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073b6:	e009      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	75fb      	strb	r3, [r7, #23]
      break;
 80073bc:	e006      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80073be:	bf00      	nop
 80073c0:	e004      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80073c2:	bf00      	nop
 80073c4:	e002      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80073c6:	bf00      	nop
 80073c8:	e000      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80073ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10c      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80073d2:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073e0:	4901      	ldr	r1, [pc, #4]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	658b      	str	r3, [r1, #88]	; 0x58
 80073e6:	e003      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80073e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
 80073ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d02f      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007404:	d00e      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800740a:	d814      	bhi.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d015      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007414:	d10f      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007416:	4baf      	ldr	r3, [pc, #700]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	4aae      	ldr	r2, [pc, #696]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800741c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007420:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007422:	e00c      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3304      	adds	r3, #4
 8007428:	2101      	movs	r1, #1
 800742a:	4618      	mov	r0, r3
 800742c:	f000 ff3c 	bl	80082a8 <RCCEx_PLL2_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007434:	e003      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	75fb      	strb	r3, [r7, #23]
      break;
 800743a:	e000      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800743c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d109      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007444:	4ba3      	ldr	r3, [pc, #652]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007448:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007450:	49a0      	ldr	r1, [pc, #640]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007452:	4313      	orrs	r3, r2
 8007454:	650b      	str	r3, [r1, #80]	; 0x50
 8007456:	e001      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d032      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746c:	2b03      	cmp	r3, #3
 800746e:	d81b      	bhi.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	080074af 	.word	0x080074af
 800747c:	08007489 	.word	0x08007489
 8007480:	08007497 	.word	0x08007497
 8007484:	080074af 	.word	0x080074af
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007488:	4b92      	ldr	r3, [pc, #584]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	4a91      	ldr	r2, [pc, #580]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800748e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007494:	e00c      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3304      	adds	r3, #4
 800749a:	2102      	movs	r1, #2
 800749c:	4618      	mov	r0, r3
 800749e:	f000 ff03 	bl	80082a8 <RCCEx_PLL2_Config>
 80074a2:	4603      	mov	r3, r0
 80074a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074a6:	e003      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	75fb      	strb	r3, [r7, #23]
      break;
 80074ac:	e000      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80074ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074b6:	4b87      	ldr	r3, [pc, #540]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ba:	f023 0203 	bic.w	r2, r3, #3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c2:	4984      	ldr	r1, [pc, #528]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074c8:	e001      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8086 	beq.w	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074dc:	4b7e      	ldr	r3, [pc, #504]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a7d      	ldr	r2, [pc, #500]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80074e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074e8:	f7fb f99a 	bl	8002820 <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ee:	e009      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f0:	f7fb f996 	bl	8002820 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b64      	cmp	r3, #100	; 0x64
 80074fc:	d902      	bls.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	75fb      	strb	r3, [r7, #23]
        break;
 8007502:	e005      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007504:	4b74      	ldr	r3, [pc, #464]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0ef      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d166      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007516:	4b6f      	ldr	r3, [pc, #444]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007518:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007520:	4053      	eors	r3, r2
 8007522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007526:	2b00      	cmp	r3, #0
 8007528:	d013      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800752a:	4b6a      	ldr	r3, [pc, #424]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007532:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007534:	4b67      	ldr	r3, [pc, #412]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007538:	4a66      	ldr	r2, [pc, #408]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800753a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800753e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007540:	4b64      	ldr	r3, [pc, #400]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007544:	4a63      	ldr	r2, [pc, #396]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800754a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800754c:	4a61      	ldr	r2, [pc, #388]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755c:	d115      	bne.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755e:	f7fb f95f 	bl	8002820 <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007564:	e00b      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007566:	f7fb f95b 	bl	8002820 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	f241 3288 	movw	r2, #5000	; 0x1388
 8007574:	4293      	cmp	r3, r2
 8007576:	d902      	bls.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	75fb      	strb	r3, [r7, #23]
            break;
 800757c:	e005      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800757e:	4b55      	ldr	r3, [pc, #340]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0ed      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d126      	bne.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800759e:	d10d      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80075a0:	4b4c      	ldr	r3, [pc, #304]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075ae:	0919      	lsrs	r1, r3, #4
 80075b0:	4b4a      	ldr	r3, [pc, #296]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80075b2:	400b      	ands	r3, r1
 80075b4:	4947      	ldr	r1, [pc, #284]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	610b      	str	r3, [r1, #16]
 80075ba:	e005      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80075bc:	4b45      	ldr	r3, [pc, #276]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	4a44      	ldr	r2, [pc, #272]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80075c6:	6113      	str	r3, [r2, #16]
 80075c8:	4b42      	ldr	r3, [pc, #264]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d6:	493f      	ldr	r1, [pc, #252]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	670b      	str	r3, [r1, #112]	; 0x70
 80075dc:	e004      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	75bb      	strb	r3, [r7, #22]
 80075e2:	e001      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 8085 	beq.w	8007700 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075fa:	2b28      	cmp	r3, #40	; 0x28
 80075fc:	d866      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	080076e1 	.word	0x080076e1
 8007608:	080076cd 	.word	0x080076cd
 800760c:	080076cd 	.word	0x080076cd
 8007610:	080076cd 	.word	0x080076cd
 8007614:	080076cd 	.word	0x080076cd
 8007618:	080076cd 	.word	0x080076cd
 800761c:	080076cd 	.word	0x080076cd
 8007620:	080076cd 	.word	0x080076cd
 8007624:	080076a9 	.word	0x080076a9
 8007628:	080076cd 	.word	0x080076cd
 800762c:	080076cd 	.word	0x080076cd
 8007630:	080076cd 	.word	0x080076cd
 8007634:	080076cd 	.word	0x080076cd
 8007638:	080076cd 	.word	0x080076cd
 800763c:	080076cd 	.word	0x080076cd
 8007640:	080076cd 	.word	0x080076cd
 8007644:	080076bb 	.word	0x080076bb
 8007648:	080076cd 	.word	0x080076cd
 800764c:	080076cd 	.word	0x080076cd
 8007650:	080076cd 	.word	0x080076cd
 8007654:	080076cd 	.word	0x080076cd
 8007658:	080076cd 	.word	0x080076cd
 800765c:	080076cd 	.word	0x080076cd
 8007660:	080076cd 	.word	0x080076cd
 8007664:	080076e1 	.word	0x080076e1
 8007668:	080076cd 	.word	0x080076cd
 800766c:	080076cd 	.word	0x080076cd
 8007670:	080076cd 	.word	0x080076cd
 8007674:	080076cd 	.word	0x080076cd
 8007678:	080076cd 	.word	0x080076cd
 800767c:	080076cd 	.word	0x080076cd
 8007680:	080076cd 	.word	0x080076cd
 8007684:	080076e1 	.word	0x080076e1
 8007688:	080076cd 	.word	0x080076cd
 800768c:	080076cd 	.word	0x080076cd
 8007690:	080076cd 	.word	0x080076cd
 8007694:	080076cd 	.word	0x080076cd
 8007698:	080076cd 	.word	0x080076cd
 800769c:	080076cd 	.word	0x080076cd
 80076a0:	080076cd 	.word	0x080076cd
 80076a4:	080076e1 	.word	0x080076e1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	2101      	movs	r1, #1
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fdfa 	bl	80082a8 <RCCEx_PLL2_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076b8:	e013      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3324      	adds	r3, #36	; 0x24
 80076be:	2101      	movs	r1, #1
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fea3 	bl	800840c <RCCEx_PLL3_Config>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076ca:	e00a      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	75fb      	strb	r3, [r7, #23]
      break;
 80076d0:	e007      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80076d2:	bf00      	nop
 80076d4:	58024400 	.word	0x58024400
 80076d8:	58024800 	.word	0x58024800
 80076dc:	00ffffcf 	.word	0x00ffffcf
      break;
 80076e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d109      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076e8:	4b96      	ldr	r3, [pc, #600]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f4:	4993      	ldr	r1, [pc, #588]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	654b      	str	r3, [r1, #84]	; 0x54
 80076fa:	e001      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d038      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007710:	2b05      	cmp	r3, #5
 8007712:	d821      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007714:	a201      	add	r2, pc, #4	; (adr r2, 800771c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	0800775f 	.word	0x0800775f
 8007720:	08007735 	.word	0x08007735
 8007724:	08007747 	.word	0x08007747
 8007728:	0800775f 	.word	0x0800775f
 800772c:	0800775f 	.word	0x0800775f
 8007730:	0800775f 	.word	0x0800775f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3304      	adds	r3, #4
 8007738:	2101      	movs	r1, #1
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fdb4 	bl	80082a8 <RCCEx_PLL2_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007744:	e00c      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3324      	adds	r3, #36	; 0x24
 800774a:	2101      	movs	r1, #1
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fe5d 	bl	800840c <RCCEx_PLL3_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007756:	e003      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	75fb      	strb	r3, [r7, #23]
      break;
 800775c:	e000      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800775e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007766:	4b77      	ldr	r3, [pc, #476]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	f023 0207 	bic.w	r2, r3, #7
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007772:	4974      	ldr	r1, [pc, #464]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007774:	4313      	orrs	r3, r2
 8007776:	654b      	str	r3, [r1, #84]	; 0x54
 8007778:	e001      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d03a      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007790:	2b05      	cmp	r3, #5
 8007792:	d821      	bhi.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007794:	a201      	add	r2, pc, #4	; (adr r2, 800779c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077df 	.word	0x080077df
 80077a0:	080077b5 	.word	0x080077b5
 80077a4:	080077c7 	.word	0x080077c7
 80077a8:	080077df 	.word	0x080077df
 80077ac:	080077df 	.word	0x080077df
 80077b0:	080077df 	.word	0x080077df
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3304      	adds	r3, #4
 80077b8:	2101      	movs	r1, #1
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fd74 	bl	80082a8 <RCCEx_PLL2_Config>
 80077c0:	4603      	mov	r3, r0
 80077c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077c4:	e00c      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3324      	adds	r3, #36	; 0x24
 80077ca:	2101      	movs	r1, #1
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fe1d 	bl	800840c <RCCEx_PLL3_Config>
 80077d2:	4603      	mov	r3, r0
 80077d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077d6:	e003      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	75fb      	strb	r3, [r7, #23]
      break;
 80077dc:	e000      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80077de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10a      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077e6:	4b57      	ldr	r3, [pc, #348]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ea:	f023 0207 	bic.w	r2, r3, #7
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f4:	4953      	ldr	r1, [pc, #332]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	658b      	str	r3, [r1, #88]	; 0x58
 80077fa:	e001      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fc:	7dfb      	ldrb	r3, [r7, #23]
 80077fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d04b      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007812:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007816:	d02e      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800781c:	d828      	bhi.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800781e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007822:	d02a      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007828:	d822      	bhi.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800782a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800782e:	d026      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007830:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007834:	d81c      	bhi.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800783a:	d010      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800783c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007840:	d816      	bhi.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d01d      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800784a:	d111      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3304      	adds	r3, #4
 8007850:	2100      	movs	r1, #0
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fd28 	bl	80082a8 <RCCEx_PLL2_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800785c:	e012      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	3324      	adds	r3, #36	; 0x24
 8007862:	2102      	movs	r1, #2
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fdd1 	bl	800840c <RCCEx_PLL3_Config>
 800786a:	4603      	mov	r3, r0
 800786c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800786e:	e009      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	75fb      	strb	r3, [r7, #23]
      break;
 8007874:	e006      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007876:	bf00      	nop
 8007878:	e004      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800787a:	bf00      	nop
 800787c:	e002      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800787e:	bf00      	nop
 8007880:	e000      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10a      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800788a:	4b2e      	ldr	r3, [pc, #184]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800788c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007898:	492a      	ldr	r1, [pc, #168]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800789a:	4313      	orrs	r3, r2
 800789c:	654b      	str	r3, [r1, #84]	; 0x54
 800789e:	e001      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
 80078a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d04d      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078ba:	d02e      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80078bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078c0:	d828      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80078c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c6:	d02a      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80078c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078cc:	d822      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80078ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078d2:	d026      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80078d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078d8:	d81c      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80078da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078de:	d010      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80078e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e4:	d816      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d01d      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80078ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ee:	d111      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3304      	adds	r3, #4
 80078f4:	2100      	movs	r1, #0
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fcd6 	bl	80082a8 <RCCEx_PLL2_Config>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007900:	e012      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3324      	adds	r3, #36	; 0x24
 8007906:	2102      	movs	r1, #2
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fd7f 	bl	800840c <RCCEx_PLL3_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007912:	e009      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	75fb      	strb	r3, [r7, #23]
      break;
 8007918:	e006      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800791a:	bf00      	nop
 800791c:	e004      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800791e:	bf00      	nop
 8007920:	e002      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007922:	bf00      	nop
 8007924:	e000      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10c      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800792e:	4b05      	ldr	r3, [pc, #20]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007932:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800793c:	4901      	ldr	r1, [pc, #4]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800793e:	4313      	orrs	r3, r2
 8007940:	658b      	str	r3, [r1, #88]	; 0x58
 8007942:	e003      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007954:	2b00      	cmp	r3, #0
 8007956:	d04b      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800795e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007962:	d02e      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007964:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007968:	d828      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800796a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800796e:	d02a      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007974:	d822      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007976:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800797a:	d026      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800797c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007980:	d81c      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007986:	d010      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800798c:	d816      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01d      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007996:	d111      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3304      	adds	r3, #4
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fc82 	bl	80082a8 <RCCEx_PLL2_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079a8:	e012      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3324      	adds	r3, #36	; 0x24
 80079ae:	2102      	movs	r1, #2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fd2b 	bl	800840c <RCCEx_PLL3_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079ba:	e009      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	e006      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80079c2:	bf00      	nop
 80079c4:	e004      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80079c6:	bf00      	nop
 80079c8:	e002      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80079ca:	bf00      	nop
 80079cc:	e000      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80079ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80079d6:	4b9d      	ldr	r3, [pc, #628]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079e4:	4999      	ldr	r1, [pc, #612]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	658b      	str	r3, [r1, #88]	; 0x58
 80079ea:	e001      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
 80079ee:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01a      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a06:	d10a      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3324      	adds	r3, #36	; 0x24
 8007a0c:	2102      	movs	r1, #2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fcfc 	bl	800840c <RCCEx_PLL3_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a1e:	4b8b      	ldr	r3, [pc, #556]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a2c:	4987      	ldr	r1, [pc, #540]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d01a      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a48:	d10a      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	3324      	adds	r3, #36	; 0x24
 8007a4e:	2102      	movs	r1, #2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fcdb 	bl	800840c <RCCEx_PLL3_Config>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a60:	4b7a      	ldr	r3, [pc, #488]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a6e:	4977      	ldr	r1, [pc, #476]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d034      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a8a:	d01d      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a90:	d817      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a9a:	d009      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007a9c:	e011      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fbff 	bl	80082a8 <RCCEx_PLL2_Config>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007aae:	e00c      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3324      	adds	r3, #36	; 0x24
 8007ab4:	2102      	movs	r1, #2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fca8 	bl	800840c <RCCEx_PLL3_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ac0:	e003      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac6:	e000      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ad0:	4b5e      	ldr	r3, [pc, #376]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ade:	495b      	ldr	r1, [pc, #364]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	658b      	str	r3, [r1, #88]	; 0x58
 8007ae4:	e001      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d033      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007afc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b00:	d01c      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007b02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b06:	d816      	bhi.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b0c:	d003      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b12:	d007      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007b14:	e00f      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b16:	4b4d      	ldr	r3, [pc, #308]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	4a4c      	ldr	r2, [pc, #304]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b22:	e00c      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3324      	adds	r3, #36	; 0x24
 8007b28:	2101      	movs	r1, #1
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 fc6e 	bl	800840c <RCCEx_PLL3_Config>
 8007b30:	4603      	mov	r3, r0
 8007b32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b34:	e003      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	75fb      	strb	r3, [r7, #23]
      break;
 8007b3a:	e000      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b44:	4b41      	ldr	r3, [pc, #260]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b52:	493e      	ldr	r1, [pc, #248]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	654b      	str	r3, [r1, #84]	; 0x54
 8007b58:	e001      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d029      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b76:	d007      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007b78:	e00f      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b7a:	4b34      	ldr	r3, [pc, #208]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	4a33      	ldr	r2, [pc, #204]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b86:	e00b      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	2102      	movs	r1, #2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fb8a 	bl	80082a8 <RCCEx_PLL2_Config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b98:	e002      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ba6:	4b29      	ldr	r3, [pc, #164]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007baa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb2:	4926      	ldr	r1, [pc, #152]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007bb8:	e001      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00a      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3324      	adds	r3, #36	; 0x24
 8007bce:	2102      	movs	r1, #2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 fc1b 	bl	800840c <RCCEx_PLL3_Config>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d033      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bf4:	d017      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bfa:	d811      	bhi.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c00:	d013      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c06:	d80b      	bhi.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d010      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c10:	d106      	bne.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c12:	4b0e      	ldr	r3, [pc, #56]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	4a0d      	ldr	r2, [pc, #52]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c1e:	e007      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	75fb      	strb	r3, [r7, #23]
      break;
 8007c24:	e004      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007c26:	bf00      	nop
 8007c28:	e002      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10c      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c36:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c42:	4902      	ldr	r1, [pc, #8]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	654b      	str	r3, [r1, #84]	; 0x54
 8007c48:	e004      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007c4a:	bf00      	nop
 8007c4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c60:	4b31      	ldr	r3, [pc, #196]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6c:	492e      	ldr	r1, [pc, #184]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c8c:	4926      	ldr	r1, [pc, #152]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d008      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c9e:	4b22      	ldr	r3, [pc, #136]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007caa:	491f      	ldr	r1, [pc, #124]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00d      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cbc:	4b1a      	ldr	r3, [pc, #104]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	4a19      	ldr	r2, [pc, #100]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cc6:	6113      	str	r3, [r2, #16]
 8007cc8:	4b17      	ldr	r3, [pc, #92]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007cd2:	4915      	ldr	r1, [pc, #84]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da08      	bge.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ce0:	4b11      	ldr	r3, [pc, #68]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cec:	490e      	ldr	r1, [pc, #56]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	4906      	ldr	r1, [pc, #24]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007d12:	7dbb      	ldrb	r3, [r7, #22]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	e000      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	58024400 	.word	0x58024400

08007d2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d30:	f7ff f85a 	bl	8006de8 <HAL_RCC_GetHCLKFreq>
 8007d34:	4602      	mov	r2, r0
 8007d36:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	091b      	lsrs	r3, r3, #4
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	4904      	ldr	r1, [pc, #16]	; (8007d54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d42:	5ccb      	ldrb	r3, [r1, r3]
 8007d44:	f003 031f 	and.w	r3, r3, #31
 8007d48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	58024400 	.word	0x58024400
 8007d54:	0800ada0 	.word	0x0800ada0

08007d58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b089      	sub	sp, #36	; 0x24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d60:	4ba1      	ldr	r3, [pc, #644]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d6a:	4b9f      	ldr	r3, [pc, #636]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	0b1b      	lsrs	r3, r3, #12
 8007d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007d76:	4b9c      	ldr	r3, [pc, #624]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	091b      	lsrs	r3, r3, #4
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007d82:	4b99      	ldr	r3, [pc, #612]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d86:	08db      	lsrs	r3, r3, #3
 8007d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	fb02 f303 	mul.w	r3, r2, r3
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8111 	beq.w	8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	f000 8083 	beq.w	8007eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	f200 80a1 	bhi.w	8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d056      	beq.n	8007e70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007dc2:	e099      	b.n	8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dc4:	4b88      	ldr	r3, [pc, #544]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d02d      	beq.n	8007e2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dd0:	4b85      	ldr	r3, [pc, #532]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	08db      	lsrs	r3, r3, #3
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	4a84      	ldr	r2, [pc, #528]	; (8007fec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8007de0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfa:	4b7b      	ldr	r3, [pc, #492]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e2a:	e087      	b.n	8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3e:	4b6a      	ldr	r3, [pc, #424]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e6e:	e065      	b.n	8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e82:	4b59      	ldr	r3, [pc, #356]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eb2:	e043      	b.n	8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec6:	4b48      	ldr	r3, [pc, #288]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ef6:	e021      	b.n	8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0a:	4b37      	ldr	r3, [pc, #220]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f3c:	4b2a      	ldr	r3, [pc, #168]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f40:	0a5b      	lsrs	r3, r3, #9
 8007f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f62:	ee17 2a90 	vmov	r2, s15
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f6a:	4b1f      	ldr	r3, [pc, #124]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	0c1b      	lsrs	r3, r3, #16
 8007f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f74:	ee07 3a90 	vmov	s15, r3
 8007f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f90:	ee17 2a90 	vmov	r2, s15
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007f98:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	0e1b      	lsrs	r3, r3, #24
 8007f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007faa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fbe:	ee17 2a90 	vmov	r2, s15
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007fc6:	e008      	b.n	8007fda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	609a      	str	r2, [r3, #8]
}
 8007fda:	bf00      	nop
 8007fdc:	3724      	adds	r7, #36	; 0x24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	58024400 	.word	0x58024400
 8007fec:	03d09000 	.word	0x03d09000
 8007ff0:	46000000 	.word	0x46000000
 8007ff4:	4c742400 	.word	0x4c742400
 8007ff8:	4a742400 	.word	0x4a742400
 8007ffc:	4af42400 	.word	0x4af42400

08008000 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008000:	b480      	push	{r7}
 8008002:	b089      	sub	sp, #36	; 0x24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008008:	4ba1      	ldr	r3, [pc, #644]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008012:	4b9f      	ldr	r3, [pc, #636]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	0d1b      	lsrs	r3, r3, #20
 8008018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800801c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800801e:	4b9c      	ldr	r3, [pc, #624]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	0a1b      	lsrs	r3, r3, #8
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800802a:	4b99      	ldr	r3, [pc, #612]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800802c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	fb02 f303 	mul.w	r3, r2, r3
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8111 	beq.w	8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	2b02      	cmp	r3, #2
 8008052:	f000 8083 	beq.w	800815c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b02      	cmp	r3, #2
 800805a:	f200 80a1 	bhi.w	80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d056      	beq.n	8008118 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800806a:	e099      	b.n	80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800806c:	4b88      	ldr	r3, [pc, #544]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0320 	and.w	r3, r3, #32
 8008074:	2b00      	cmp	r3, #0
 8008076:	d02d      	beq.n	80080d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008078:	4b85      	ldr	r3, [pc, #532]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	08db      	lsrs	r3, r3, #3
 800807e:	f003 0303 	and.w	r3, r3, #3
 8008082:	4a84      	ldr	r2, [pc, #528]	; (8008294 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008084:	fa22 f303 	lsr.w	r3, r2, r3
 8008088:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	ee07 3a90 	vmov	s15, r3
 8008090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a2:	4b7b      	ldr	r3, [pc, #492]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080d2:	e087      	b.n	80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800829c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80080e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e6:	4b6a      	ldr	r3, [pc, #424]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800810a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800810e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008116:	e065      	b.n	80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008122:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800812a:	4b59      	ldr	r3, [pc, #356]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813a:	ed97 6a03 	vldr	s12, [r7, #12]
 800813e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800814a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800814e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800815a:	e043      	b.n	80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008166:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800816a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800816e:	4b48      	ldr	r3, [pc, #288]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008182:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800818a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800818e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800819e:	e021      	b.n	80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b2:	4b37      	ldr	r3, [pc, #220]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80081e4:	4b2a      	ldr	r3, [pc, #168]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e8:	0a5b      	lsrs	r3, r3, #9
 80081ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800820a:	ee17 2a90 	vmov	r2, s15
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008212:	4b1f      	ldr	r3, [pc, #124]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	0c1b      	lsrs	r3, r3, #16
 8008218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821c:	ee07 3a90 	vmov	s15, r3
 8008220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008228:	ee37 7a87 	vadd.f32	s14, s15, s14
 800822c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008238:	ee17 2a90 	vmov	r2, s15
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008240:	4b13      	ldr	r3, [pc, #76]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	0e1b      	lsrs	r3, r3, #24
 8008246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800825a:	edd7 6a07 	vldr	s13, [r7, #28]
 800825e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008266:	ee17 2a90 	vmov	r2, s15
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800826e:	e008      	b.n	8008282 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	609a      	str	r2, [r3, #8]
}
 8008282:	bf00      	nop
 8008284:	3724      	adds	r7, #36	; 0x24
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	58024400 	.word	0x58024400
 8008294:	03d09000 	.word	0x03d09000
 8008298:	46000000 	.word	0x46000000
 800829c:	4c742400 	.word	0x4c742400
 80082a0:	4a742400 	.word	0x4a742400
 80082a4:	4af42400 	.word	0x4af42400

080082a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082b6:	4b53      	ldr	r3, [pc, #332]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80082b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ba:	f003 0303 	and.w	r3, r3, #3
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d101      	bne.n	80082c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e099      	b.n	80083fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082c6:	4b4f      	ldr	r3, [pc, #316]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a4e      	ldr	r2, [pc, #312]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80082cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082d2:	f7fa faa5 	bl	8002820 <HAL_GetTick>
 80082d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082d8:	e008      	b.n	80082ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80082da:	f7fa faa1 	bl	8002820 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d901      	bls.n	80082ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e086      	b.n	80083fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082ec:	4b45      	ldr	r3, [pc, #276]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1f0      	bne.n	80082da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80082f8:	4b42      	ldr	r3, [pc, #264]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	031b      	lsls	r3, r3, #12
 8008306:	493f      	ldr	r1, [pc, #252]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 8008308:	4313      	orrs	r3, r2
 800830a:	628b      	str	r3, [r1, #40]	; 0x28
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	3b01      	subs	r3, #1
 8008312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	3b01      	subs	r3, #1
 800831c:	025b      	lsls	r3, r3, #9
 800831e:	b29b      	uxth	r3, r3
 8008320:	431a      	orrs	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	3b01      	subs	r3, #1
 8008328:	041b      	lsls	r3, r3, #16
 800832a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	3b01      	subs	r3, #1
 8008336:	061b      	lsls	r3, r3, #24
 8008338:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800833c:	4931      	ldr	r1, [pc, #196]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 800833e:	4313      	orrs	r3, r2
 8008340:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008342:	4b30      	ldr	r3, [pc, #192]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	492d      	ldr	r1, [pc, #180]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 8008350:	4313      	orrs	r3, r2
 8008352:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008354:	4b2b      	ldr	r3, [pc, #172]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	f023 0220 	bic.w	r2, r3, #32
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	4928      	ldr	r1, [pc, #160]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 8008362:	4313      	orrs	r3, r2
 8008364:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008366:	4b27      	ldr	r3, [pc, #156]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 8008368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836a:	4a26      	ldr	r2, [pc, #152]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 800836c:	f023 0310 	bic.w	r3, r3, #16
 8008370:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008372:	4b24      	ldr	r3, [pc, #144]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 8008374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008376:	4b24      	ldr	r3, [pc, #144]	; (8008408 <RCCEx_PLL2_Config+0x160>)
 8008378:	4013      	ands	r3, r2
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	69d2      	ldr	r2, [r2, #28]
 800837e:	00d2      	lsls	r2, r2, #3
 8008380:	4920      	ldr	r1, [pc, #128]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 8008382:	4313      	orrs	r3, r2
 8008384:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008386:	4b1f      	ldr	r3, [pc, #124]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	4a1e      	ldr	r2, [pc, #120]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 800838c:	f043 0310 	orr.w	r3, r3, #16
 8008390:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d106      	bne.n	80083a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008398:	4b1a      	ldr	r3, [pc, #104]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	4a19      	ldr	r2, [pc, #100]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 800839e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083a4:	e00f      	b.n	80083c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d106      	bne.n	80083ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083ac:	4b15      	ldr	r3, [pc, #84]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	4a14      	ldr	r2, [pc, #80]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80083b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083b8:	e005      	b.n	80083c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80083bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083be:	4a11      	ldr	r2, [pc, #68]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80083c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083c6:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a0e      	ldr	r2, [pc, #56]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80083cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083d2:	f7fa fa25 	bl	8002820 <HAL_GetTick>
 80083d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083d8:	e008      	b.n	80083ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80083da:	f7fa fa21 	bl	8002820 <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d901      	bls.n	80083ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e006      	b.n	80083fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083ec:	4b05      	ldr	r3, [pc, #20]	; (8008404 <RCCEx_PLL2_Config+0x15c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d0f0      	beq.n	80083da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	58024400 	.word	0x58024400
 8008408:	ffff0007 	.word	0xffff0007

0800840c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800841a:	4b53      	ldr	r3, [pc, #332]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 800841c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	2b03      	cmp	r3, #3
 8008424:	d101      	bne.n	800842a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e099      	b.n	800855e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800842a:	4b4f      	ldr	r3, [pc, #316]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a4e      	ldr	r2, [pc, #312]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 8008430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008436:	f7fa f9f3 	bl	8002820 <HAL_GetTick>
 800843a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800843c:	e008      	b.n	8008450 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800843e:	f7fa f9ef 	bl	8002820 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d901      	bls.n	8008450 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e086      	b.n	800855e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008450:	4b45      	ldr	r3, [pc, #276]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1f0      	bne.n	800843e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800845c:	4b42      	ldr	r3, [pc, #264]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 800845e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008460:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	051b      	lsls	r3, r3, #20
 800846a:	493f      	ldr	r1, [pc, #252]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 800846c:	4313      	orrs	r3, r2
 800846e:	628b      	str	r3, [r1, #40]	; 0x28
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	3b01      	subs	r3, #1
 8008476:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	3b01      	subs	r3, #1
 8008480:	025b      	lsls	r3, r3, #9
 8008482:	b29b      	uxth	r3, r3
 8008484:	431a      	orrs	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	3b01      	subs	r3, #1
 800848c:	041b      	lsls	r3, r3, #16
 800848e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008492:	431a      	orrs	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	3b01      	subs	r3, #1
 800849a:	061b      	lsls	r3, r3, #24
 800849c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084a0:	4931      	ldr	r1, [pc, #196]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084a6:	4b30      	ldr	r3, [pc, #192]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	492d      	ldr	r1, [pc, #180]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084b8:	4b2b      	ldr	r3, [pc, #172]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	4928      	ldr	r1, [pc, #160]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084ca:	4b27      	ldr	r3, [pc, #156]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ce:	4a26      	ldr	r2, [pc, #152]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80084d6:	4b24      	ldr	r3, [pc, #144]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084da:	4b24      	ldr	r3, [pc, #144]	; (800856c <RCCEx_PLL3_Config+0x160>)
 80084dc:	4013      	ands	r3, r2
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	69d2      	ldr	r2, [r2, #28]
 80084e2:	00d2      	lsls	r2, r2, #3
 80084e4:	4920      	ldr	r1, [pc, #128]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80084ea:	4b1f      	ldr	r3, [pc, #124]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d106      	bne.n	800850a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80084fc:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 80084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008500:	4a19      	ldr	r2, [pc, #100]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 8008502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008506:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008508:	e00f      	b.n	800852a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d106      	bne.n	800851e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008510:	4b15      	ldr	r3, [pc, #84]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	4a14      	ldr	r2, [pc, #80]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 8008516:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800851a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800851c:	e005      	b.n	800852a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800851e:	4b12      	ldr	r3, [pc, #72]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	4a11      	ldr	r2, [pc, #68]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 8008524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008528:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800852a:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a0e      	ldr	r2, [pc, #56]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 8008530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008536:	f7fa f973 	bl	8002820 <HAL_GetTick>
 800853a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800853c:	e008      	b.n	8008550 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800853e:	f7fa f96f 	bl	8002820 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	2b02      	cmp	r3, #2
 800854a:	d901      	bls.n	8008550 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e006      	b.n	800855e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <RCCEx_PLL3_Config+0x15c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0f0      	beq.n	800853e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	58024400 	.word	0x58024400
 800856c:	ffff0007 	.word	0xffff0007

08008570 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e0f1      	b.n	8008766 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a78      	ldr	r2, [pc, #480]	; (8008770 <HAL_SPI_Init+0x200>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00f      	beq.n	80085b2 <HAL_SPI_Init+0x42>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a77      	ldr	r2, [pc, #476]	; (8008774 <HAL_SPI_Init+0x204>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00a      	beq.n	80085b2 <HAL_SPI_Init+0x42>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a75      	ldr	r2, [pc, #468]	; (8008778 <HAL_SPI_Init+0x208>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d005      	beq.n	80085b2 <HAL_SPI_Init+0x42>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	2b0f      	cmp	r3, #15
 80085ac:	d901      	bls.n	80085b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e0d9      	b.n	8008766 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fba2 	bl	8008cfc <SPI_GetPacketSize>
 80085b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a6c      	ldr	r2, [pc, #432]	; (8008770 <HAL_SPI_Init+0x200>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00c      	beq.n	80085de <HAL_SPI_Init+0x6e>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a6a      	ldr	r2, [pc, #424]	; (8008774 <HAL_SPI_Init+0x204>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d007      	beq.n	80085de <HAL_SPI_Init+0x6e>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a69      	ldr	r2, [pc, #420]	; (8008778 <HAL_SPI_Init+0x208>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d002      	beq.n	80085de <HAL_SPI_Init+0x6e>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b08      	cmp	r3, #8
 80085dc:	d811      	bhi.n	8008602 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80085e2:	4a63      	ldr	r2, [pc, #396]	; (8008770 <HAL_SPI_Init+0x200>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d009      	beq.n	80085fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a61      	ldr	r2, [pc, #388]	; (8008774 <HAL_SPI_Init+0x204>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d004      	beq.n	80085fc <HAL_SPI_Init+0x8c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a60      	ldr	r2, [pc, #384]	; (8008778 <HAL_SPI_Init+0x208>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d104      	bne.n	8008606 <HAL_SPI_Init+0x96>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b10      	cmp	r3, #16
 8008600:	d901      	bls.n	8008606 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e0af      	b.n	8008766 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d106      	bne.n	8008620 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7f9 fe70 	bl	8002300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f022 0201 	bic.w	r2, r2, #1
 8008636:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008642:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800864c:	d119      	bne.n	8008682 <HAL_SPI_Init+0x112>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008656:	d103      	bne.n	8008660 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800865c:	2b00      	cmp	r3, #0
 800865e:	d008      	beq.n	8008672 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10c      	bne.n	8008682 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800866c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008670:	d107      	bne.n	8008682 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008680:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	69da      	ldr	r2, [r3, #28]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868a:	431a      	orrs	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008694:	ea42 0103 	orr.w	r1, r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68da      	ldr	r2, [r3, #12]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	431a      	orrs	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	431a      	orrs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e2:	ea42 0103 	orr.w	r1, r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d113      	bne.n	8008722 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800870c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008720:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0201 	bic.w	r2, r2, #1
 8008730:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	40013000 	.word	0x40013000
 8008774:	40003800 	.word	0x40003800
 8008778:	40003c00 	.word	0x40003c00

0800877c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08a      	sub	sp, #40	; 0x28
 8008780:	af02      	add	r7, sp, #8
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	4613      	mov	r3, r2
 800878a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3320      	adds	r3, #32
 8008792:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d101      	bne.n	80087a6 <HAL_SPI_Transmit+0x2a>
 80087a2:	2302      	movs	r3, #2
 80087a4:	e1d7      	b.n	8008b56 <HAL_SPI_Transmit+0x3da>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087ae:	f7fa f837 	bl	8002820 <HAL_GetTick>
 80087b2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d007      	beq.n	80087d0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80087c0:	2302      	movs	r3, #2
 80087c2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80087cc:	7efb      	ldrb	r3, [r7, #27]
 80087ce:	e1c2      	b.n	8008b56 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <HAL_SPI_Transmit+0x60>
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d107      	bne.n	80087ec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80087e8:	7efb      	ldrb	r3, [r7, #27]
 80087ea:	e1b4      	b.n	8008b56 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2203      	movs	r2, #3
 80087f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	88fa      	ldrh	r2, [r7, #6]
 8008806:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	88fa      	ldrh	r2, [r7, #6]
 800880e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800883c:	d107      	bne.n	800884e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800884c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	4b96      	ldr	r3, [pc, #600]	; (8008ab0 <HAL_SPI_Transmit+0x334>)
 8008856:	4013      	ands	r3, r2
 8008858:	88f9      	ldrh	r1, [r7, #6]
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	6812      	ldr	r2, [r2, #0]
 800885e:	430b      	orrs	r3, r1
 8008860:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0201 	orr.w	r2, r2, #1
 8008870:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800887a:	d107      	bne.n	800888c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800888a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	2b0f      	cmp	r3, #15
 8008892:	d947      	bls.n	8008924 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008894:	e03f      	b.n	8008916 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d114      	bne.n	80088ce <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b4:	1d1a      	adds	r2, r3, #4
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	3b01      	subs	r3, #1
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80088cc:	e023      	b.n	8008916 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ce:	f7f9 ffa7 	bl	8002820 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d803      	bhi.n	80088e6 <HAL_SPI_Transmit+0x16a>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e4:	d102      	bne.n	80088ec <HAL_SPI_Transmit+0x170>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d114      	bne.n	8008916 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 f937 	bl	8008b60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008900:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e11f      	b.n	8008b56 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1b9      	bne.n	8008896 <HAL_SPI_Transmit+0x11a>
 8008922:	e0f2      	b.n	8008b0a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	2b07      	cmp	r3, #7
 800892a:	f240 80e7 	bls.w	8008afc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800892e:	e05d      	b.n	80089ec <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b02      	cmp	r3, #2
 800893c:	d132      	bne.n	80089a4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008944:	b29b      	uxth	r3, r3
 8008946:	2b01      	cmp	r3, #1
 8008948:	d918      	bls.n	800897c <HAL_SPI_Transmit+0x200>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d014      	beq.n	800897c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008962:	1d1a      	adds	r2, r3, #4
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b02      	subs	r3, #2
 8008972:	b29a      	uxth	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800897a:	e037      	b.n	80089ec <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008980:	881a      	ldrh	r2, [r3, #0]
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898a:	1c9a      	adds	r2, r3, #2
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008996:	b29b      	uxth	r3, r3
 8008998:	3b01      	subs	r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80089a2:	e023      	b.n	80089ec <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089a4:	f7f9 ff3c 	bl	8002820 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d803      	bhi.n	80089bc <HAL_SPI_Transmit+0x240>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ba:	d102      	bne.n	80089c2 <HAL_SPI_Transmit+0x246>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d114      	bne.n	80089ec <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 f8cc 	bl	8008b60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e0b4      	b.n	8008b56 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d19b      	bne.n	8008930 <HAL_SPI_Transmit+0x1b4>
 80089f8:	e087      	b.n	8008b0a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d155      	bne.n	8008ab4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d918      	bls.n	8008a46 <HAL_SPI_Transmit+0x2ca>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a18:	2b40      	cmp	r3, #64	; 0x40
 8008a1a:	d914      	bls.n	8008a46 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a2c:	1d1a      	adds	r2, r3, #4
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	3b04      	subs	r3, #4
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008a44:	e05a      	b.n	8008afc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d917      	bls.n	8008a82 <HAL_SPI_Transmit+0x306>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d013      	beq.n	8008a82 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a5e:	881a      	ldrh	r2, [r3, #0]
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a68:	1c9a      	adds	r2, r3, #2
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b02      	subs	r3, #2
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008a80:	e03c      	b.n	8008afc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3320      	adds	r3, #32
 8008a8c:	7812      	ldrb	r2, [r2, #0]
 8008a8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008aac:	e026      	b.n	8008afc <HAL_SPI_Transmit+0x380>
 8008aae:	bf00      	nop
 8008ab0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ab4:	f7f9 feb4 	bl	8002820 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d803      	bhi.n	8008acc <HAL_SPI_Transmit+0x350>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d102      	bne.n	8008ad2 <HAL_SPI_Transmit+0x356>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d114      	bne.n	8008afc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 f844 	bl	8008b60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ae6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e02c      	b.n	8008b56 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f47f af78 	bne.w	80089fa <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2200      	movs	r2, #0
 8008b12:	2108      	movs	r1, #8
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 f8c3 	bl	8008ca0 <SPI_WaitOnFlagUntilTimeout>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d007      	beq.n	8008b30 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b26:	f043 0220 	orr.w	r2, r3, #32
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f815 	bl	8008b60 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e000      	b.n	8008b56 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008b54:	7efb      	ldrb	r3, [r7, #27]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3720      	adds	r7, #32
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop

08008b60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0208 	orr.w	r2, r2, #8
 8008b7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699a      	ldr	r2, [r3, #24]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f042 0210 	orr.w	r2, r2, #16
 8008b8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0201 	bic.w	r2, r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6919      	ldr	r1, [r3, #16]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4b3c      	ldr	r3, [pc, #240]	; (8008c9c <SPI_CloseTransfer+0x13c>)
 8008bac:	400b      	ands	r3, r1
 8008bae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008bbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d014      	beq.n	8008bf6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00f      	beq.n	8008bf6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f042 0220 	orr.w	r2, r2, #32
 8008bf4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d014      	beq.n	8008c2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00f      	beq.n	8008c2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c12:	f043 0204 	orr.w	r2, r3, #4
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00f      	beq.n	8008c56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c3c:	f043 0201 	orr.w	r2, r3, #1
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00f      	beq.n	8008c80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c66:	f043 0208 	orr.w	r2, r3, #8
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699a      	ldr	r2, [r3, #24]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008c90:	bf00      	nop
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	fffffc90 	.word	0xfffffc90

08008ca0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	4613      	mov	r3, r2
 8008cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008cb0:	e010      	b.n	8008cd4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cb2:	f7f9 fdb5 	bl	8002820 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d803      	bhi.n	8008cca <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d102      	bne.n	8008cd0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e00f      	b.n	8008cf4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	bf0c      	ite	eq
 8008ce4:	2301      	moveq	r3, #1
 8008ce6:	2300      	movne	r3, #0
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	461a      	mov	r2, r3
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d0df      	beq.n	8008cb2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d08:	095b      	lsrs	r3, r3, #5
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	3307      	adds	r3, #7
 8008d1a:	08db      	lsrs	r3, r3, #3
 8008d1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e042      	b.n	8008dca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d106      	bne.n	8008d5c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7f9 fb3e 	bl	80023d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2224      	movs	r2, #36	; 0x24
 8008d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0201 	bic.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fbeb 	bl	8009550 <UART_SetConfig>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e022      	b.n	8008dca <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 f947 	bl	800a020 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f042 0201 	orr.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f001 f9ce 	bl	800a164 <UART_CheckIdleState>
 8008dc8:	4603      	mov	r3, r0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b0ba      	sub	sp, #232	; 0xe8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008dfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008dfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e02:	4013      	ands	r3, r2
 8008e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d11b      	bne.n	8008e48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d015      	beq.n	8008e48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e20:	f003 0320 	and.w	r3, r3, #32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d105      	bne.n	8008e34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d009      	beq.n	8008e48 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 835a 	beq.w	80094f2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
      }
      return;
 8008e46:	e354      	b.n	80094f2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 811f 	beq.w	8009090 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008e56:	4b8b      	ldr	r3, [pc, #556]	; (8009084 <HAL_UART_IRQHandler+0x2b0>)
 8008e58:	4013      	ands	r3, r2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d106      	bne.n	8008e6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008e62:	4b89      	ldr	r3, [pc, #548]	; (8009088 <HAL_UART_IRQHandler+0x2b4>)
 8008e64:	4013      	ands	r3, r2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 8112 	beq.w	8009090 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d011      	beq.n	8008e9c <HAL_UART_IRQHandler+0xc8>
 8008e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e92:	f043 0201 	orr.w	r2, r3, #1
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d011      	beq.n	8008ecc <HAL_UART_IRQHandler+0xf8>
 8008ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00b      	beq.n	8008ecc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2202      	movs	r2, #2
 8008eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ec2:	f043 0204 	orr.w	r2, r3, #4
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed0:	f003 0304 	and.w	r3, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d011      	beq.n	8008efc <HAL_UART_IRQHandler+0x128>
 8008ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00b      	beq.n	8008efc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2204      	movs	r2, #4
 8008eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ef2:	f043 0202 	orr.w	r2, r3, #2
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f00:	f003 0308 	and.w	r3, r3, #8
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d017      	beq.n	8008f38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f0c:	f003 0320 	and.w	r3, r3, #32
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d105      	bne.n	8008f20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008f18:	4b5a      	ldr	r3, [pc, #360]	; (8009084 <HAL_UART_IRQHandler+0x2b0>)
 8008f1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2208      	movs	r2, #8
 8008f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f2e:	f043 0208 	orr.w	r2, r3, #8
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d012      	beq.n	8008f6a <HAL_UART_IRQHandler+0x196>
 8008f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00c      	beq.n	8008f6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f60:	f043 0220 	orr.w	r2, r3, #32
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 82c0 	beq.w	80094f6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d013      	beq.n	8008faa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d105      	bne.n	8008f9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d007      	beq.n	8008faa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbe:	2b40      	cmp	r3, #64	; 0x40
 8008fc0:	d005      	beq.n	8008fce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d04f      	beq.n	800906e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f001 f9dc 	bl	800a38c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fde:	2b40      	cmp	r3, #64	; 0x40
 8008fe0:	d141      	bne.n	8009066 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3308      	adds	r3, #8
 800900a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800900e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800901a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1d9      	bne.n	8008fe2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009032:	2b00      	cmp	r3, #0
 8009034:	d013      	beq.n	800905e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800903a:	4a14      	ldr	r2, [pc, #80]	; (800908c <HAL_UART_IRQHandler+0x2b8>)
 800903c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009042:	4618      	mov	r0, r3
 8009044:	f7fa fbc6 	bl	80037d4 <HAL_DMA_Abort_IT>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d017      	beq.n	800907e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800905c:	e00f      	b.n	800907e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa60 	bl	8009524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009064:	e00b      	b.n	800907e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa5c 	bl	8009524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800906c:	e007      	b.n	800907e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa58 	bl	8009524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800907c:	e23b      	b.n	80094f6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800907e:	bf00      	nop
    return;
 8009080:	e239      	b.n	80094f6 <HAL_UART_IRQHandler+0x722>
 8009082:	bf00      	nop
 8009084:	10000001 	.word	0x10000001
 8009088:	04000120 	.word	0x04000120
 800908c:	0800a459 	.word	0x0800a459

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009094:	2b01      	cmp	r3, #1
 8009096:	f040 81ce 	bne.w	8009436 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800909a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909e:	f003 0310 	and.w	r3, r3, #16
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 81c7 	beq.w	8009436 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090ac:	f003 0310 	and.w	r3, r3, #16
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 81c0 	beq.w	8009436 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2210      	movs	r2, #16
 80090bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c8:	2b40      	cmp	r3, #64	; 0x40
 80090ca:	f040 813b 	bne.w	8009344 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a8b      	ldr	r2, [pc, #556]	; (8009304 <HAL_UART_IRQHandler+0x530>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d059      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a89      	ldr	r2, [pc, #548]	; (8009308 <HAL_UART_IRQHandler+0x534>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d053      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a87      	ldr	r2, [pc, #540]	; (800930c <HAL_UART_IRQHandler+0x538>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d04d      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a85      	ldr	r2, [pc, #532]	; (8009310 <HAL_UART_IRQHandler+0x53c>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d047      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a83      	ldr	r2, [pc, #524]	; (8009314 <HAL_UART_IRQHandler+0x540>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d041      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a81      	ldr	r2, [pc, #516]	; (8009318 <HAL_UART_IRQHandler+0x544>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d03b      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a7f      	ldr	r2, [pc, #508]	; (800931c <HAL_UART_IRQHandler+0x548>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d035      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a7d      	ldr	r2, [pc, #500]	; (8009320 <HAL_UART_IRQHandler+0x54c>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d02f      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a7b      	ldr	r2, [pc, #492]	; (8009324 <HAL_UART_IRQHandler+0x550>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d029      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a79      	ldr	r2, [pc, #484]	; (8009328 <HAL_UART_IRQHandler+0x554>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d023      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a77      	ldr	r2, [pc, #476]	; (800932c <HAL_UART_IRQHandler+0x558>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d01d      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a75      	ldr	r2, [pc, #468]	; (8009330 <HAL_UART_IRQHandler+0x55c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d017      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a73      	ldr	r2, [pc, #460]	; (8009334 <HAL_UART_IRQHandler+0x560>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d011      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a71      	ldr	r2, [pc, #452]	; (8009338 <HAL_UART_IRQHandler+0x564>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00b      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a6f      	ldr	r2, [pc, #444]	; (800933c <HAL_UART_IRQHandler+0x568>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d005      	beq.n	800918e <HAL_UART_IRQHandler+0x3ba>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a6d      	ldr	r2, [pc, #436]	; (8009340 <HAL_UART_IRQHandler+0x56c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d105      	bne.n	800919a <HAL_UART_IRQHandler+0x3c6>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	b29b      	uxth	r3, r3
 8009198:	e004      	b.n	80091a4 <HAL_UART_IRQHandler+0x3d0>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 81a4 	beq.w	80094fa <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091bc:	429a      	cmp	r2, r3
 80091be:	f080 819c 	bcs.w	80094fa <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091d6:	f000 8086 	beq.w	80092e6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009204:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009208:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009210:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800921c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1da      	bne.n	80091da <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3308      	adds	r3, #8
 800922a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800922e:	e853 3f00 	ldrex	r3, [r3]
 8009232:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009236:	f023 0301 	bic.w	r3, r3, #1
 800923a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3308      	adds	r3, #8
 8009244:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009248:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800924c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009250:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009254:	e841 2300 	strex	r3, r2, [r1]
 8009258:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800925a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e1      	bne.n	8009224 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3308      	adds	r3, #8
 8009266:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3308      	adds	r3, #8
 8009280:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009284:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009286:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800928a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e3      	bne.n	8009260 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2220      	movs	r2, #32
 800929c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092b6:	f023 0310 	bic.w	r3, r3, #16
 80092ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80092ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092d0:	e841 2300 	strex	r3, r2, [r1]
 80092d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e4      	bne.n	80092a6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7f9 ff59 	bl	8003198 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f91c 	bl	8009538 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009300:	e0fb      	b.n	80094fa <HAL_UART_IRQHandler+0x726>
 8009302:	bf00      	nop
 8009304:	40020010 	.word	0x40020010
 8009308:	40020028 	.word	0x40020028
 800930c:	40020040 	.word	0x40020040
 8009310:	40020058 	.word	0x40020058
 8009314:	40020070 	.word	0x40020070
 8009318:	40020088 	.word	0x40020088
 800931c:	400200a0 	.word	0x400200a0
 8009320:	400200b8 	.word	0x400200b8
 8009324:	40020410 	.word	0x40020410
 8009328:	40020428 	.word	0x40020428
 800932c:	40020440 	.word	0x40020440
 8009330:	40020458 	.word	0x40020458
 8009334:	40020470 	.word	0x40020470
 8009338:	40020488 	.word	0x40020488
 800933c:	400204a0 	.word	0x400204a0
 8009340:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009350:	b29b      	uxth	r3, r3
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800935e:	b29b      	uxth	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80cc 	beq.w	80094fe <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009366:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 80c7 	beq.w	80094fe <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800937e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	461a      	mov	r2, r3
 800938e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009392:	647b      	str	r3, [r7, #68]	; 0x44
 8009394:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e4      	bne.n	8009370 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3308      	adds	r3, #8
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	623b      	str	r3, [r7, #32]
   return(result);
 80093b6:	6a3a      	ldr	r2, [r7, #32]
 80093b8:	4b54      	ldr	r3, [pc, #336]	; (800950c <HAL_UART_IRQHandler+0x738>)
 80093ba:	4013      	ands	r3, r2
 80093bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3308      	adds	r3, #8
 80093c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80093ca:	633a      	str	r2, [r7, #48]	; 0x30
 80093cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e3      	bne.n	80093a6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2220      	movs	r2, #32
 80093e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0310 	bic.w	r3, r3, #16
 8009406:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009414:	61fb      	str	r3, [r7, #28]
 8009416:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	69b9      	ldr	r1, [r7, #24]
 800941a:	69fa      	ldr	r2, [r7, #28]
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	617b      	str	r3, [r7, #20]
   return(result);
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e4      	bne.n	80093f2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f882 	bl	8009538 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009434:	e063      	b.n	80094fe <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800943a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00e      	beq.n	8009460 <HAL_UART_IRQHandler+0x68c>
 8009442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d008      	beq.n	8009460 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009456:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 f83e 	bl	800a4da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800945e:	e051      	b.n	8009504 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009468:	2b00      	cmp	r3, #0
 800946a:	d014      	beq.n	8009496 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800946c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009474:	2b00      	cmp	r3, #0
 8009476:	d105      	bne.n	8009484 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800947c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d008      	beq.n	8009496 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009488:	2b00      	cmp	r3, #0
 800948a:	d03a      	beq.n	8009502 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	4798      	blx	r3
    }
    return;
 8009494:	e035      	b.n	8009502 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800949a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d009      	beq.n	80094b6 <HAL_UART_IRQHandler+0x6e2>
 80094a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 ffe8 	bl	800a484 <UART_EndTransmit_IT>
    return;
 80094b4:	e026      	b.n	8009504 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <HAL_UART_IRQHandler+0x702>
 80094c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f001 f817 	bl	800a502 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094d4:	e016      	b.n	8009504 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80094d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d010      	beq.n	8009504 <HAL_UART_IRQHandler+0x730>
 80094e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	da0c      	bge.n	8009504 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 ffff 	bl	800a4ee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094f0:	e008      	b.n	8009504 <HAL_UART_IRQHandler+0x730>
      return;
 80094f2:	bf00      	nop
 80094f4:	e006      	b.n	8009504 <HAL_UART_IRQHandler+0x730>
    return;
 80094f6:	bf00      	nop
 80094f8:	e004      	b.n	8009504 <HAL_UART_IRQHandler+0x730>
      return;
 80094fa:	bf00      	nop
 80094fc:	e002      	b.n	8009504 <HAL_UART_IRQHandler+0x730>
      return;
 80094fe:	bf00      	nop
 8009500:	e000      	b.n	8009504 <HAL_UART_IRQHandler+0x730>
    return;
 8009502:	bf00      	nop
  }
}
 8009504:	37e8      	adds	r7, #232	; 0xe8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	effffffe 	.word	0xeffffffe

08009510 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009554:	b092      	sub	sp, #72	; 0x48
 8009556:	af00      	add	r7, sp, #0
 8009558:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	689a      	ldr	r2, [r3, #8]
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	431a      	orrs	r2, r3
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	431a      	orrs	r2, r3
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	69db      	ldr	r3, [r3, #28]
 8009574:	4313      	orrs	r3, r2
 8009576:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4bbe      	ldr	r3, [pc, #760]	; (8009878 <UART_SetConfig+0x328>)
 8009580:	4013      	ands	r3, r2
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	6812      	ldr	r2, [r2, #0]
 8009586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009588:	430b      	orrs	r3, r1
 800958a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4ab3      	ldr	r2, [pc, #716]	; (800987c <UART_SetConfig+0x32c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d004      	beq.n	80095bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095b8:	4313      	orrs	r3, r2
 80095ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689a      	ldr	r2, [r3, #8]
 80095c2:	4baf      	ldr	r3, [pc, #700]	; (8009880 <UART_SetConfig+0x330>)
 80095c4:	4013      	ands	r3, r2
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	6812      	ldr	r2, [r2, #0]
 80095ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d6:	f023 010f 	bic.w	r1, r3, #15
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4aa6      	ldr	r2, [pc, #664]	; (8009884 <UART_SetConfig+0x334>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d177      	bne.n	80096e0 <UART_SetConfig+0x190>
 80095f0:	4ba5      	ldr	r3, [pc, #660]	; (8009888 <UART_SetConfig+0x338>)
 80095f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095f8:	2b28      	cmp	r3, #40	; 0x28
 80095fa:	d86d      	bhi.n	80096d8 <UART_SetConfig+0x188>
 80095fc:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <UART_SetConfig+0xb4>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	080096a9 	.word	0x080096a9
 8009608:	080096d9 	.word	0x080096d9
 800960c:	080096d9 	.word	0x080096d9
 8009610:	080096d9 	.word	0x080096d9
 8009614:	080096d9 	.word	0x080096d9
 8009618:	080096d9 	.word	0x080096d9
 800961c:	080096d9 	.word	0x080096d9
 8009620:	080096d9 	.word	0x080096d9
 8009624:	080096b1 	.word	0x080096b1
 8009628:	080096d9 	.word	0x080096d9
 800962c:	080096d9 	.word	0x080096d9
 8009630:	080096d9 	.word	0x080096d9
 8009634:	080096d9 	.word	0x080096d9
 8009638:	080096d9 	.word	0x080096d9
 800963c:	080096d9 	.word	0x080096d9
 8009640:	080096d9 	.word	0x080096d9
 8009644:	080096b9 	.word	0x080096b9
 8009648:	080096d9 	.word	0x080096d9
 800964c:	080096d9 	.word	0x080096d9
 8009650:	080096d9 	.word	0x080096d9
 8009654:	080096d9 	.word	0x080096d9
 8009658:	080096d9 	.word	0x080096d9
 800965c:	080096d9 	.word	0x080096d9
 8009660:	080096d9 	.word	0x080096d9
 8009664:	080096c1 	.word	0x080096c1
 8009668:	080096d9 	.word	0x080096d9
 800966c:	080096d9 	.word	0x080096d9
 8009670:	080096d9 	.word	0x080096d9
 8009674:	080096d9 	.word	0x080096d9
 8009678:	080096d9 	.word	0x080096d9
 800967c:	080096d9 	.word	0x080096d9
 8009680:	080096d9 	.word	0x080096d9
 8009684:	080096c9 	.word	0x080096c9
 8009688:	080096d9 	.word	0x080096d9
 800968c:	080096d9 	.word	0x080096d9
 8009690:	080096d9 	.word	0x080096d9
 8009694:	080096d9 	.word	0x080096d9
 8009698:	080096d9 	.word	0x080096d9
 800969c:	080096d9 	.word	0x080096d9
 80096a0:	080096d9 	.word	0x080096d9
 80096a4:	080096d1 	.word	0x080096d1
 80096a8:	2301      	movs	r3, #1
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ae:	e222      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80096b0:	2304      	movs	r3, #4
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b6:	e21e      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80096b8:	2308      	movs	r3, #8
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096be:	e21a      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80096c0:	2310      	movs	r3, #16
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096c6:	e216      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80096c8:	2320      	movs	r3, #32
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ce:	e212      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80096d0:	2340      	movs	r3, #64	; 0x40
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096d6:	e20e      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80096d8:	2380      	movs	r3, #128	; 0x80
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096de:	e20a      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a69      	ldr	r2, [pc, #420]	; (800988c <UART_SetConfig+0x33c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d130      	bne.n	800974c <UART_SetConfig+0x1fc>
 80096ea:	4b67      	ldr	r3, [pc, #412]	; (8009888 <UART_SetConfig+0x338>)
 80096ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	d826      	bhi.n	8009744 <UART_SetConfig+0x1f4>
 80096f6:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <UART_SetConfig+0x1ac>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009715 	.word	0x08009715
 8009700:	0800971d 	.word	0x0800971d
 8009704:	08009725 	.word	0x08009725
 8009708:	0800972d 	.word	0x0800972d
 800970c:	08009735 	.word	0x08009735
 8009710:	0800973d 	.word	0x0800973d
 8009714:	2300      	movs	r3, #0
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971a:	e1ec      	b.n	8009af6 <UART_SetConfig+0x5a6>
 800971c:	2304      	movs	r3, #4
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009722:	e1e8      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009724:	2308      	movs	r3, #8
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800972a:	e1e4      	b.n	8009af6 <UART_SetConfig+0x5a6>
 800972c:	2310      	movs	r3, #16
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009732:	e1e0      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009734:	2320      	movs	r3, #32
 8009736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973a:	e1dc      	b.n	8009af6 <UART_SetConfig+0x5a6>
 800973c:	2340      	movs	r3, #64	; 0x40
 800973e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009742:	e1d8      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009744:	2380      	movs	r3, #128	; 0x80
 8009746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800974a:	e1d4      	b.n	8009af6 <UART_SetConfig+0x5a6>
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a4f      	ldr	r2, [pc, #316]	; (8009890 <UART_SetConfig+0x340>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d130      	bne.n	80097b8 <UART_SetConfig+0x268>
 8009756:	4b4c      	ldr	r3, [pc, #304]	; (8009888 <UART_SetConfig+0x338>)
 8009758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975a:	f003 0307 	and.w	r3, r3, #7
 800975e:	2b05      	cmp	r3, #5
 8009760:	d826      	bhi.n	80097b0 <UART_SetConfig+0x260>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <UART_SetConfig+0x218>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	08009781 	.word	0x08009781
 800976c:	08009789 	.word	0x08009789
 8009770:	08009791 	.word	0x08009791
 8009774:	08009799 	.word	0x08009799
 8009778:	080097a1 	.word	0x080097a1
 800977c:	080097a9 	.word	0x080097a9
 8009780:	2300      	movs	r3, #0
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009786:	e1b6      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009788:	2304      	movs	r3, #4
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978e:	e1b2      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009790:	2308      	movs	r3, #8
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009796:	e1ae      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009798:	2310      	movs	r3, #16
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800979e:	e1aa      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80097a0:	2320      	movs	r3, #32
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a6:	e1a6      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80097a8:	2340      	movs	r3, #64	; 0x40
 80097aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ae:	e1a2      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80097b0:	2380      	movs	r3, #128	; 0x80
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b6:	e19e      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a35      	ldr	r2, [pc, #212]	; (8009894 <UART_SetConfig+0x344>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d130      	bne.n	8009824 <UART_SetConfig+0x2d4>
 80097c2:	4b31      	ldr	r3, [pc, #196]	; (8009888 <UART_SetConfig+0x338>)
 80097c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b05      	cmp	r3, #5
 80097cc:	d826      	bhi.n	800981c <UART_SetConfig+0x2cc>
 80097ce:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <UART_SetConfig+0x284>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	080097ed 	.word	0x080097ed
 80097d8:	080097f5 	.word	0x080097f5
 80097dc:	080097fd 	.word	0x080097fd
 80097e0:	08009805 	.word	0x08009805
 80097e4:	0800980d 	.word	0x0800980d
 80097e8:	08009815 	.word	0x08009815
 80097ec:	2300      	movs	r3, #0
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f2:	e180      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80097f4:	2304      	movs	r3, #4
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e17c      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80097fc:	2308      	movs	r3, #8
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009802:	e178      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009804:	2310      	movs	r3, #16
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980a:	e174      	b.n	8009af6 <UART_SetConfig+0x5a6>
 800980c:	2320      	movs	r3, #32
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009812:	e170      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981a:	e16c      	b.n	8009af6 <UART_SetConfig+0x5a6>
 800981c:	2380      	movs	r3, #128	; 0x80
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009822:	e168      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a1b      	ldr	r2, [pc, #108]	; (8009898 <UART_SetConfig+0x348>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d142      	bne.n	80098b4 <UART_SetConfig+0x364>
 800982e:	4b16      	ldr	r3, [pc, #88]	; (8009888 <UART_SetConfig+0x338>)
 8009830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009832:	f003 0307 	and.w	r3, r3, #7
 8009836:	2b05      	cmp	r3, #5
 8009838:	d838      	bhi.n	80098ac <UART_SetConfig+0x35c>
 800983a:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <UART_SetConfig+0x2f0>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009859 	.word	0x08009859
 8009844:	08009861 	.word	0x08009861
 8009848:	08009869 	.word	0x08009869
 800984c:	08009871 	.word	0x08009871
 8009850:	0800989d 	.word	0x0800989d
 8009854:	080098a5 	.word	0x080098a5
 8009858:	2300      	movs	r3, #0
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e14a      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009860:	2304      	movs	r3, #4
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009866:	e146      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009868:	2308      	movs	r3, #8
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800986e:	e142      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009870:	2310      	movs	r3, #16
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009876:	e13e      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009878:	cfff69f3 	.word	0xcfff69f3
 800987c:	58000c00 	.word	0x58000c00
 8009880:	11fff4ff 	.word	0x11fff4ff
 8009884:	40011000 	.word	0x40011000
 8009888:	58024400 	.word	0x58024400
 800988c:	40004400 	.word	0x40004400
 8009890:	40004800 	.word	0x40004800
 8009894:	40004c00 	.word	0x40004c00
 8009898:	40005000 	.word	0x40005000
 800989c:	2320      	movs	r3, #32
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a2:	e128      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098aa:	e124      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b2:	e120      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4acb      	ldr	r2, [pc, #812]	; (8009be8 <UART_SetConfig+0x698>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d176      	bne.n	80099ac <UART_SetConfig+0x45c>
 80098be:	4bcb      	ldr	r3, [pc, #812]	; (8009bec <UART_SetConfig+0x69c>)
 80098c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098c6:	2b28      	cmp	r3, #40	; 0x28
 80098c8:	d86c      	bhi.n	80099a4 <UART_SetConfig+0x454>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <UART_SetConfig+0x380>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	08009975 	.word	0x08009975
 80098d4:	080099a5 	.word	0x080099a5
 80098d8:	080099a5 	.word	0x080099a5
 80098dc:	080099a5 	.word	0x080099a5
 80098e0:	080099a5 	.word	0x080099a5
 80098e4:	080099a5 	.word	0x080099a5
 80098e8:	080099a5 	.word	0x080099a5
 80098ec:	080099a5 	.word	0x080099a5
 80098f0:	0800997d 	.word	0x0800997d
 80098f4:	080099a5 	.word	0x080099a5
 80098f8:	080099a5 	.word	0x080099a5
 80098fc:	080099a5 	.word	0x080099a5
 8009900:	080099a5 	.word	0x080099a5
 8009904:	080099a5 	.word	0x080099a5
 8009908:	080099a5 	.word	0x080099a5
 800990c:	080099a5 	.word	0x080099a5
 8009910:	08009985 	.word	0x08009985
 8009914:	080099a5 	.word	0x080099a5
 8009918:	080099a5 	.word	0x080099a5
 800991c:	080099a5 	.word	0x080099a5
 8009920:	080099a5 	.word	0x080099a5
 8009924:	080099a5 	.word	0x080099a5
 8009928:	080099a5 	.word	0x080099a5
 800992c:	080099a5 	.word	0x080099a5
 8009930:	0800998d 	.word	0x0800998d
 8009934:	080099a5 	.word	0x080099a5
 8009938:	080099a5 	.word	0x080099a5
 800993c:	080099a5 	.word	0x080099a5
 8009940:	080099a5 	.word	0x080099a5
 8009944:	080099a5 	.word	0x080099a5
 8009948:	080099a5 	.word	0x080099a5
 800994c:	080099a5 	.word	0x080099a5
 8009950:	08009995 	.word	0x08009995
 8009954:	080099a5 	.word	0x080099a5
 8009958:	080099a5 	.word	0x080099a5
 800995c:	080099a5 	.word	0x080099a5
 8009960:	080099a5 	.word	0x080099a5
 8009964:	080099a5 	.word	0x080099a5
 8009968:	080099a5 	.word	0x080099a5
 800996c:	080099a5 	.word	0x080099a5
 8009970:	0800999d 	.word	0x0800999d
 8009974:	2301      	movs	r3, #1
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997a:	e0bc      	b.n	8009af6 <UART_SetConfig+0x5a6>
 800997c:	2304      	movs	r3, #4
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009982:	e0b8      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009984:	2308      	movs	r3, #8
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998a:	e0b4      	b.n	8009af6 <UART_SetConfig+0x5a6>
 800998c:	2310      	movs	r3, #16
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009992:	e0b0      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009994:	2320      	movs	r3, #32
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999a:	e0ac      	b.n	8009af6 <UART_SetConfig+0x5a6>
 800999c:	2340      	movs	r3, #64	; 0x40
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a2:	e0a8      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80099a4:	2380      	movs	r3, #128	; 0x80
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099aa:	e0a4      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a8f      	ldr	r2, [pc, #572]	; (8009bf0 <UART_SetConfig+0x6a0>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d130      	bne.n	8009a18 <UART_SetConfig+0x4c8>
 80099b6:	4b8d      	ldr	r3, [pc, #564]	; (8009bec <UART_SetConfig+0x69c>)
 80099b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ba:	f003 0307 	and.w	r3, r3, #7
 80099be:	2b05      	cmp	r3, #5
 80099c0:	d826      	bhi.n	8009a10 <UART_SetConfig+0x4c0>
 80099c2:	a201      	add	r2, pc, #4	; (adr r2, 80099c8 <UART_SetConfig+0x478>)
 80099c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c8:	080099e1 	.word	0x080099e1
 80099cc:	080099e9 	.word	0x080099e9
 80099d0:	080099f1 	.word	0x080099f1
 80099d4:	080099f9 	.word	0x080099f9
 80099d8:	08009a01 	.word	0x08009a01
 80099dc:	08009a09 	.word	0x08009a09
 80099e0:	2300      	movs	r3, #0
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e6:	e086      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80099e8:	2304      	movs	r3, #4
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ee:	e082      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80099f0:	2308      	movs	r3, #8
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f6:	e07e      	b.n	8009af6 <UART_SetConfig+0x5a6>
 80099f8:	2310      	movs	r3, #16
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fe:	e07a      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a00:	2320      	movs	r3, #32
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a06:	e076      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a08:	2340      	movs	r3, #64	; 0x40
 8009a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0e:	e072      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a10:	2380      	movs	r3, #128	; 0x80
 8009a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a16:	e06e      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a75      	ldr	r2, [pc, #468]	; (8009bf4 <UART_SetConfig+0x6a4>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d130      	bne.n	8009a84 <UART_SetConfig+0x534>
 8009a22:	4b72      	ldr	r3, [pc, #456]	; (8009bec <UART_SetConfig+0x69c>)
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b05      	cmp	r3, #5
 8009a2c:	d826      	bhi.n	8009a7c <UART_SetConfig+0x52c>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <UART_SetConfig+0x4e4>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a4d 	.word	0x08009a4d
 8009a38:	08009a55 	.word	0x08009a55
 8009a3c:	08009a5d 	.word	0x08009a5d
 8009a40:	08009a65 	.word	0x08009a65
 8009a44:	08009a6d 	.word	0x08009a6d
 8009a48:	08009a75 	.word	0x08009a75
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a52:	e050      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5a:	e04c      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a62:	e048      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6a:	e044      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a72:	e040      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a74:	2340      	movs	r3, #64	; 0x40
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7a:	e03c      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a7c:	2380      	movs	r3, #128	; 0x80
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a82:	e038      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a5b      	ldr	r2, [pc, #364]	; (8009bf8 <UART_SetConfig+0x6a8>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d130      	bne.n	8009af0 <UART_SetConfig+0x5a0>
 8009a8e:	4b57      	ldr	r3, [pc, #348]	; (8009bec <UART_SetConfig+0x69c>)
 8009a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	2b05      	cmp	r3, #5
 8009a98:	d826      	bhi.n	8009ae8 <UART_SetConfig+0x598>
 8009a9a:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <UART_SetConfig+0x550>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ab9 	.word	0x08009ab9
 8009aa4:	08009ac1 	.word	0x08009ac1
 8009aa8:	08009ac9 	.word	0x08009ac9
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009ad9 	.word	0x08009ad9
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	2302      	movs	r3, #2
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009abe:	e01a      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac6:	e016      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ace:	e012      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad6:	e00e      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009ad8:	2320      	movs	r3, #32
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ade:	e00a      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009ae0:	2340      	movs	r3, #64	; 0x40
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae6:	e006      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009ae8:	2380      	movs	r3, #128	; 0x80
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aee:	e002      	b.n	8009af6 <UART_SetConfig+0x5a6>
 8009af0:	2380      	movs	r3, #128	; 0x80
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a3f      	ldr	r2, [pc, #252]	; (8009bf8 <UART_SetConfig+0x6a8>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	f040 80f8 	bne.w	8009cf2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	dc46      	bgt.n	8009b98 <UART_SetConfig+0x648>
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	f2c0 8082 	blt.w	8009c14 <UART_SetConfig+0x6c4>
 8009b10:	3b02      	subs	r3, #2
 8009b12:	2b1e      	cmp	r3, #30
 8009b14:	d87e      	bhi.n	8009c14 <UART_SetConfig+0x6c4>
 8009b16:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <UART_SetConfig+0x5cc>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b9f 	.word	0x08009b9f
 8009b20:	08009c15 	.word	0x08009c15
 8009b24:	08009ba7 	.word	0x08009ba7
 8009b28:	08009c15 	.word	0x08009c15
 8009b2c:	08009c15 	.word	0x08009c15
 8009b30:	08009c15 	.word	0x08009c15
 8009b34:	08009bb7 	.word	0x08009bb7
 8009b38:	08009c15 	.word	0x08009c15
 8009b3c:	08009c15 	.word	0x08009c15
 8009b40:	08009c15 	.word	0x08009c15
 8009b44:	08009c15 	.word	0x08009c15
 8009b48:	08009c15 	.word	0x08009c15
 8009b4c:	08009c15 	.word	0x08009c15
 8009b50:	08009c15 	.word	0x08009c15
 8009b54:	08009bc7 	.word	0x08009bc7
 8009b58:	08009c15 	.word	0x08009c15
 8009b5c:	08009c15 	.word	0x08009c15
 8009b60:	08009c15 	.word	0x08009c15
 8009b64:	08009c15 	.word	0x08009c15
 8009b68:	08009c15 	.word	0x08009c15
 8009b6c:	08009c15 	.word	0x08009c15
 8009b70:	08009c15 	.word	0x08009c15
 8009b74:	08009c15 	.word	0x08009c15
 8009b78:	08009c15 	.word	0x08009c15
 8009b7c:	08009c15 	.word	0x08009c15
 8009b80:	08009c15 	.word	0x08009c15
 8009b84:	08009c15 	.word	0x08009c15
 8009b88:	08009c15 	.word	0x08009c15
 8009b8c:	08009c15 	.word	0x08009c15
 8009b90:	08009c15 	.word	0x08009c15
 8009b94:	08009c07 	.word	0x08009c07
 8009b98:	2b40      	cmp	r3, #64	; 0x40
 8009b9a:	d037      	beq.n	8009c0c <UART_SetConfig+0x6bc>
 8009b9c:	e03a      	b.n	8009c14 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b9e:	f7fe f8c5 	bl	8007d2c <HAL_RCCEx_GetD3PCLK1Freq>
 8009ba2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ba4:	e03c      	b.n	8009c20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fe f8d4 	bl	8007d58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb4:	e034      	b.n	8009c20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb6:	f107 0318 	add.w	r3, r7, #24
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fa20 	bl	8008000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc4:	e02c      	b.n	8009c20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bc6:	4b09      	ldr	r3, [pc, #36]	; (8009bec <UART_SetConfig+0x69c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d016      	beq.n	8009c00 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bd2:	4b06      	ldr	r3, [pc, #24]	; (8009bec <UART_SetConfig+0x69c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	08db      	lsrs	r3, r3, #3
 8009bd8:	f003 0303 	and.w	r3, r3, #3
 8009bdc:	4a07      	ldr	r2, [pc, #28]	; (8009bfc <UART_SetConfig+0x6ac>)
 8009bde:	fa22 f303 	lsr.w	r3, r2, r3
 8009be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009be4:	e01c      	b.n	8009c20 <UART_SetConfig+0x6d0>
 8009be6:	bf00      	nop
 8009be8:	40011400 	.word	0x40011400
 8009bec:	58024400 	.word	0x58024400
 8009bf0:	40007800 	.word	0x40007800
 8009bf4:	40007c00 	.word	0x40007c00
 8009bf8:	58000c00 	.word	0x58000c00
 8009bfc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009c00:	4b9d      	ldr	r3, [pc, #628]	; (8009e78 <UART_SetConfig+0x928>)
 8009c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c04:	e00c      	b.n	8009c20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c06:	4b9d      	ldr	r3, [pc, #628]	; (8009e7c <UART_SetConfig+0x92c>)
 8009c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c0a:	e009      	b.n	8009c20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c12:	e005      	b.n	8009c20 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 81de 	beq.w	8009fe4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	4a94      	ldr	r2, [pc, #592]	; (8009e80 <UART_SetConfig+0x930>)
 8009c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c32:	461a      	mov	r2, r3
 8009c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c36:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c3a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	4613      	mov	r3, r2
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	4413      	add	r3, r2
 8009c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d305      	bcc.n	8009c58 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d903      	bls.n	8009c60 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c5e:	e1c1      	b.n	8009fe4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c62:	2200      	movs	r2, #0
 8009c64:	60bb      	str	r3, [r7, #8]
 8009c66:	60fa      	str	r2, [r7, #12]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	4a84      	ldr	r2, [pc, #528]	; (8009e80 <UART_SetConfig+0x930>)
 8009c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	2200      	movs	r2, #0
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	607a      	str	r2, [r7, #4]
 8009c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c82:	f7f6 fb29 	bl	80002d8 <__aeabi_uldivmod>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	f04f 0200 	mov.w	r2, #0
 8009c92:	f04f 0300 	mov.w	r3, #0
 8009c96:	020b      	lsls	r3, r1, #8
 8009c98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c9c:	0202      	lsls	r2, r0, #8
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	6849      	ldr	r1, [r1, #4]
 8009ca2:	0849      	lsrs	r1, r1, #1
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	4605      	mov	r5, r0
 8009caa:	eb12 0804 	adds.w	r8, r2, r4
 8009cae:	eb43 0905 	adc.w	r9, r3, r5
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	469a      	mov	sl, r3
 8009cba:	4693      	mov	fp, r2
 8009cbc:	4652      	mov	r2, sl
 8009cbe:	465b      	mov	r3, fp
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 fb08 	bl	80002d8 <__aeabi_uldivmod>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4613      	mov	r3, r2
 8009cce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cd6:	d308      	bcc.n	8009cea <UART_SetConfig+0x79a>
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cde:	d204      	bcs.n	8009cea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ce6:	60da      	str	r2, [r3, #12]
 8009ce8:	e17c      	b.n	8009fe4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009cf0:	e178      	b.n	8009fe4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cfa:	f040 80c5 	bne.w	8009e88 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009cfe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	dc48      	bgt.n	8009d98 <UART_SetConfig+0x848>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	db7b      	blt.n	8009e02 <UART_SetConfig+0x8b2>
 8009d0a:	2b20      	cmp	r3, #32
 8009d0c:	d879      	bhi.n	8009e02 <UART_SetConfig+0x8b2>
 8009d0e:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <UART_SetConfig+0x7c4>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d9f 	.word	0x08009d9f
 8009d18:	08009da7 	.word	0x08009da7
 8009d1c:	08009e03 	.word	0x08009e03
 8009d20:	08009e03 	.word	0x08009e03
 8009d24:	08009daf 	.word	0x08009daf
 8009d28:	08009e03 	.word	0x08009e03
 8009d2c:	08009e03 	.word	0x08009e03
 8009d30:	08009e03 	.word	0x08009e03
 8009d34:	08009dbf 	.word	0x08009dbf
 8009d38:	08009e03 	.word	0x08009e03
 8009d3c:	08009e03 	.word	0x08009e03
 8009d40:	08009e03 	.word	0x08009e03
 8009d44:	08009e03 	.word	0x08009e03
 8009d48:	08009e03 	.word	0x08009e03
 8009d4c:	08009e03 	.word	0x08009e03
 8009d50:	08009e03 	.word	0x08009e03
 8009d54:	08009dcf 	.word	0x08009dcf
 8009d58:	08009e03 	.word	0x08009e03
 8009d5c:	08009e03 	.word	0x08009e03
 8009d60:	08009e03 	.word	0x08009e03
 8009d64:	08009e03 	.word	0x08009e03
 8009d68:	08009e03 	.word	0x08009e03
 8009d6c:	08009e03 	.word	0x08009e03
 8009d70:	08009e03 	.word	0x08009e03
 8009d74:	08009e03 	.word	0x08009e03
 8009d78:	08009e03 	.word	0x08009e03
 8009d7c:	08009e03 	.word	0x08009e03
 8009d80:	08009e03 	.word	0x08009e03
 8009d84:	08009e03 	.word	0x08009e03
 8009d88:	08009e03 	.word	0x08009e03
 8009d8c:	08009e03 	.word	0x08009e03
 8009d90:	08009e03 	.word	0x08009e03
 8009d94:	08009df5 	.word	0x08009df5
 8009d98:	2b40      	cmp	r3, #64	; 0x40
 8009d9a:	d02e      	beq.n	8009dfa <UART_SetConfig+0x8aa>
 8009d9c:	e031      	b.n	8009e02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d9e:	f7fd f853 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8009da2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009da4:	e033      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009da6:	f7fd f865 	bl	8006e74 <HAL_RCC_GetPCLK2Freq>
 8009daa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009dac:	e02f      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fd ffd0 	bl	8007d58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dbc:	e027      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dbe:	f107 0318 	add.w	r3, r7, #24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe f91c 	bl	8008000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dcc:	e01f      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dce:	4b2d      	ldr	r3, [pc, #180]	; (8009e84 <UART_SetConfig+0x934>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dda:	4b2a      	ldr	r3, [pc, #168]	; (8009e84 <UART_SetConfig+0x934>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	08db      	lsrs	r3, r3, #3
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	4a24      	ldr	r2, [pc, #144]	; (8009e78 <UART_SetConfig+0x928>)
 8009de6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dec:	e00f      	b.n	8009e0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009dee:	4b22      	ldr	r3, [pc, #136]	; (8009e78 <UART_SetConfig+0x928>)
 8009df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df2:	e00c      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009df4:	4b21      	ldr	r3, [pc, #132]	; (8009e7c <UART_SetConfig+0x92c>)
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df8:	e009      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e00:	e005      	b.n	8009e0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 80e7 	beq.w	8009fe4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	4a19      	ldr	r2, [pc, #100]	; (8009e80 <UART_SetConfig+0x930>)
 8009e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e20:	461a      	mov	r2, r3
 8009e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e28:	005a      	lsls	r2, r3, #1
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	085b      	lsrs	r3, r3, #1
 8009e30:	441a      	add	r2, r3
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3e:	2b0f      	cmp	r3, #15
 8009e40:	d916      	bls.n	8009e70 <UART_SetConfig+0x920>
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e48:	d212      	bcs.n	8009e70 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	f023 030f 	bic.w	r3, r3, #15
 8009e52:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e56:	085b      	lsrs	r3, r3, #1
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e62:	4313      	orrs	r3, r2
 8009e64:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009e6c:	60da      	str	r2, [r3, #12]
 8009e6e:	e0b9      	b.n	8009fe4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e76:	e0b5      	b.n	8009fe4 <UART_SetConfig+0xa94>
 8009e78:	03d09000 	.word	0x03d09000
 8009e7c:	003d0900 	.word	0x003d0900
 8009e80:	0800ae30 	.word	0x0800ae30
 8009e84:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	dc49      	bgt.n	8009f24 <UART_SetConfig+0x9d4>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	db7c      	blt.n	8009f8e <UART_SetConfig+0xa3e>
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d87a      	bhi.n	8009f8e <UART_SetConfig+0xa3e>
 8009e98:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <UART_SetConfig+0x950>)
 8009e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9e:	bf00      	nop
 8009ea0:	08009f2b 	.word	0x08009f2b
 8009ea4:	08009f33 	.word	0x08009f33
 8009ea8:	08009f8f 	.word	0x08009f8f
 8009eac:	08009f8f 	.word	0x08009f8f
 8009eb0:	08009f3b 	.word	0x08009f3b
 8009eb4:	08009f8f 	.word	0x08009f8f
 8009eb8:	08009f8f 	.word	0x08009f8f
 8009ebc:	08009f8f 	.word	0x08009f8f
 8009ec0:	08009f4b 	.word	0x08009f4b
 8009ec4:	08009f8f 	.word	0x08009f8f
 8009ec8:	08009f8f 	.word	0x08009f8f
 8009ecc:	08009f8f 	.word	0x08009f8f
 8009ed0:	08009f8f 	.word	0x08009f8f
 8009ed4:	08009f8f 	.word	0x08009f8f
 8009ed8:	08009f8f 	.word	0x08009f8f
 8009edc:	08009f8f 	.word	0x08009f8f
 8009ee0:	08009f5b 	.word	0x08009f5b
 8009ee4:	08009f8f 	.word	0x08009f8f
 8009ee8:	08009f8f 	.word	0x08009f8f
 8009eec:	08009f8f 	.word	0x08009f8f
 8009ef0:	08009f8f 	.word	0x08009f8f
 8009ef4:	08009f8f 	.word	0x08009f8f
 8009ef8:	08009f8f 	.word	0x08009f8f
 8009efc:	08009f8f 	.word	0x08009f8f
 8009f00:	08009f8f 	.word	0x08009f8f
 8009f04:	08009f8f 	.word	0x08009f8f
 8009f08:	08009f8f 	.word	0x08009f8f
 8009f0c:	08009f8f 	.word	0x08009f8f
 8009f10:	08009f8f 	.word	0x08009f8f
 8009f14:	08009f8f 	.word	0x08009f8f
 8009f18:	08009f8f 	.word	0x08009f8f
 8009f1c:	08009f8f 	.word	0x08009f8f
 8009f20:	08009f81 	.word	0x08009f81
 8009f24:	2b40      	cmp	r3, #64	; 0x40
 8009f26:	d02e      	beq.n	8009f86 <UART_SetConfig+0xa36>
 8009f28:	e031      	b.n	8009f8e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f2a:	f7fc ff8d 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8009f2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f30:	e033      	b.n	8009f9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f32:	f7fc ff9f 	bl	8006e74 <HAL_RCC_GetPCLK2Freq>
 8009f36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f38:	e02f      	b.n	8009f9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fd ff0a 	bl	8007d58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f48:	e027      	b.n	8009f9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f4a:	f107 0318 	add.w	r3, r7, #24
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe f856 	bl	8008000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f58:	e01f      	b.n	8009f9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f5a:	4b2d      	ldr	r3, [pc, #180]	; (800a010 <UART_SetConfig+0xac0>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0320 	and.w	r3, r3, #32
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d009      	beq.n	8009f7a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f66:	4b2a      	ldr	r3, [pc, #168]	; (800a010 <UART_SetConfig+0xac0>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	08db      	lsrs	r3, r3, #3
 8009f6c:	f003 0303 	and.w	r3, r3, #3
 8009f70:	4a28      	ldr	r2, [pc, #160]	; (800a014 <UART_SetConfig+0xac4>)
 8009f72:	fa22 f303 	lsr.w	r3, r2, r3
 8009f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f78:	e00f      	b.n	8009f9a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009f7a:	4b26      	ldr	r3, [pc, #152]	; (800a014 <UART_SetConfig+0xac4>)
 8009f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f7e:	e00c      	b.n	8009f9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f80:	4b25      	ldr	r3, [pc, #148]	; (800a018 <UART_SetConfig+0xac8>)
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f84:	e009      	b.n	8009f9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f8c:	e005      	b.n	8009f9a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009f98:	bf00      	nop
    }

    if (pclk != 0U)
 8009f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d021      	beq.n	8009fe4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	4a1d      	ldr	r2, [pc, #116]	; (800a01c <UART_SetConfig+0xacc>)
 8009fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009faa:	461a      	mov	r2, r3
 8009fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fae:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	085b      	lsrs	r3, r3, #1
 8009fb8:	441a      	add	r2, r3
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	2b0f      	cmp	r3, #15
 8009fc8:	d909      	bls.n	8009fde <UART_SetConfig+0xa8e>
 8009fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fd0:	d205      	bcs.n	8009fde <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	60da      	str	r2, [r3, #12]
 8009fdc:	e002      	b.n	8009fe4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a000:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a004:	4618      	mov	r0, r3
 800a006:	3748      	adds	r7, #72	; 0x48
 800a008:	46bd      	mov	sp, r7
 800a00a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a00e:	bf00      	nop
 800a010:	58024400 	.word	0x58024400
 800a014:	03d09000 	.word	0x03d09000
 800a018:	003d0900 	.word	0x003d0900
 800a01c:	0800ae30 	.word	0x0800ae30

0800a020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00a      	beq.n	800a06c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	430a      	orrs	r2, r1
 800a06a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a070:	f003 0304 	and.w	r3, r3, #4
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00a      	beq.n	800a08e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	430a      	orrs	r2, r1
 800a08c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a092:	f003 0308 	and.w	r3, r3, #8
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b4:	f003 0310 	and.w	r3, r3, #16
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00a      	beq.n	800a0d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d6:	f003 0320 	and.w	r3, r3, #32
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00a      	beq.n	800a0f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d01a      	beq.n	800a136 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a11e:	d10a      	bne.n	800a136 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	605a      	str	r2, [r3, #4]
  }
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af02      	add	r7, sp, #8
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a174:	f7f8 fb54 	bl	8002820 <HAL_GetTick>
 800a178:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	2b08      	cmp	r3, #8
 800a186:	d10e      	bne.n	800a1a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f82f 	bl	800a1fa <UART_WaitOnFlagUntilTimeout>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e025      	b.n	800a1f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	d10e      	bne.n	800a1d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f819 	bl	800a1fa <UART_WaitOnFlagUntilTimeout>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e00f      	b.n	800a1f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b09c      	sub	sp, #112	; 0x70
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	60f8      	str	r0, [r7, #12]
 800a202:	60b9      	str	r1, [r7, #8]
 800a204:	603b      	str	r3, [r7, #0]
 800a206:	4613      	mov	r3, r2
 800a208:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a20a:	e0a9      	b.n	800a360 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a20c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a212:	f000 80a5 	beq.w	800a360 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a216:	f7f8 fb03 	bl	8002820 <HAL_GetTick>
 800a21a:	4602      	mov	r2, r0
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a222:	429a      	cmp	r2, r3
 800a224:	d302      	bcc.n	800a22c <UART_WaitOnFlagUntilTimeout+0x32>
 800a226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d140      	bne.n	800a2ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a23c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a240:	667b      	str	r3, [r7, #100]	; 0x64
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a24a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a24c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a250:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e6      	bne.n	800a22c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3308      	adds	r3, #8
 800a264:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a268:	e853 3f00 	ldrex	r3, [r3]
 800a26c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a270:	f023 0301 	bic.w	r3, r3, #1
 800a274:	663b      	str	r3, [r7, #96]	; 0x60
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3308      	adds	r3, #8
 800a27c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a27e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a280:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a282:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a28c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e5      	bne.n	800a25e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2220      	movs	r2, #32
 800a296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e069      	b.n	800a382 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0304 	and.w	r3, r3, #4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d051      	beq.n	800a360 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2ca:	d149      	bne.n	800a360 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a2f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e6      	bne.n	800a2d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3308      	adds	r3, #8
 800a30e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	e853 3f00 	ldrex	r3, [r3]
 800a316:	613b      	str	r3, [r7, #16]
   return(result);
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	f023 0301 	bic.w	r3, r3, #1
 800a31e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3308      	adds	r3, #8
 800a326:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a328:	623a      	str	r2, [r7, #32]
 800a32a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32c:	69f9      	ldr	r1, [r7, #28]
 800a32e:	6a3a      	ldr	r2, [r7, #32]
 800a330:	e841 2300 	strex	r3, r2, [r1]
 800a334:	61bb      	str	r3, [r7, #24]
   return(result);
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e5      	bne.n	800a308 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2220      	movs	r2, #32
 800a340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2220      	movs	r2, #32
 800a348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2220      	movs	r2, #32
 800a350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e010      	b.n	800a382 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69da      	ldr	r2, [r3, #28]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	4013      	ands	r3, r2
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	bf0c      	ite	eq
 800a370:	2301      	moveq	r3, #1
 800a372:	2300      	movne	r3, #0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	461a      	mov	r2, r3
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	f43f af46 	beq.w	800a20c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3770      	adds	r7, #112	; 0x70
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b095      	sub	sp, #84	; 0x54
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3b2:	643b      	str	r3, [r7, #64]	; 0x40
 800a3b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e6      	bne.n	800a394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3d6:	69fa      	ldr	r2, [r7, #28]
 800a3d8:	4b1e      	ldr	r3, [pc, #120]	; (800a454 <UART_EndRxTransfer+0xc8>)
 800a3da:	4013      	ands	r3, r2
 800a3dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e5      	bne.n	800a3c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d118      	bne.n	800a434 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	e853 3f00 	ldrex	r3, [r3]
 800a40e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	f023 0310 	bic.w	r3, r3, #16
 800a416:	647b      	str	r3, [r7, #68]	; 0x44
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	461a      	mov	r2, r3
 800a41e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a420:	61bb      	str	r3, [r7, #24]
 800a422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a424:	6979      	ldr	r1, [r7, #20]
 800a426:	69ba      	ldr	r2, [r7, #24]
 800a428:	e841 2300 	strex	r3, r2, [r1]
 800a42c:	613b      	str	r3, [r7, #16]
   return(result);
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1e6      	bne.n	800a402 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2220      	movs	r2, #32
 800a438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a448:	bf00      	nop
 800a44a:	3754      	adds	r7, #84	; 0x54
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	effffffe 	.word	0xeffffffe

0800a458 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a464:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f7ff f854 	bl	8009524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a47c:	bf00      	nop
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	e853 3f00 	ldrex	r3, [r3]
 800a498:	60bb      	str	r3, [r7, #8]
   return(result);
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4a0:	61fb      	str	r3, [r7, #28]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	61bb      	str	r3, [r7, #24]
 800a4ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ae:	6979      	ldr	r1, [r7, #20]
 800a4b0:	69ba      	ldr	r2, [r7, #24]
 800a4b2:	e841 2300 	strex	r3, r2, [r1]
 800a4b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1e6      	bne.n	800a48c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2220      	movs	r2, #32
 800a4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff f81f 	bl	8009510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4d2:	bf00      	nop
 800a4d4:	3720      	adds	r7, #32
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4e2:	bf00      	nop
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b083      	sub	sp, #12
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4f6:	bf00      	nop
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a50a:	bf00      	nop
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a516:	b480      	push	{r7}
 800a518:	b085      	sub	sp, #20
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a524:	2b01      	cmp	r3, #1
 800a526:	d101      	bne.n	800a52c <HAL_UARTEx_DisableFifoMode+0x16>
 800a528:	2302      	movs	r3, #2
 800a52a:	e027      	b.n	800a57c <HAL_UARTEx_DisableFifoMode+0x66>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2224      	movs	r2, #36	; 0x24
 800a538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f022 0201 	bic.w	r2, r2, #1
 800a552:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a55a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d101      	bne.n	800a5a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a59c:	2302      	movs	r3, #2
 800a59e:	e02d      	b.n	800a5fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2224      	movs	r2, #36	; 0x24
 800a5ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f022 0201 	bic.w	r2, r2, #1
 800a5c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f84f 	bl	800a680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a614:	2b01      	cmp	r3, #1
 800a616:	d101      	bne.n	800a61c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a618:	2302      	movs	r3, #2
 800a61a:	e02d      	b.n	800a678 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2224      	movs	r2, #36	; 0x24
 800a628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f022 0201 	bic.w	r2, r2, #1
 800a642:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f811 	bl	800a680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2220      	movs	r2, #32
 800a66a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d108      	bne.n	800a6a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6a0:	e031      	b.n	800a706 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6a2:	2310      	movs	r3, #16
 800a6a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6a6:	2310      	movs	r3, #16
 800a6a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	0e5b      	lsrs	r3, r3, #25
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0307 	and.w	r3, r3, #7
 800a6b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	0f5b      	lsrs	r3, r3, #29
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6ca:	7bbb      	ldrb	r3, [r7, #14]
 800a6cc:	7b3a      	ldrb	r2, [r7, #12]
 800a6ce:	4911      	ldr	r1, [pc, #68]	; (800a714 <UARTEx_SetNbDataToProcess+0x94>)
 800a6d0:	5c8a      	ldrb	r2, [r1, r2]
 800a6d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6d6:	7b3a      	ldrb	r2, [r7, #12]
 800a6d8:	490f      	ldr	r1, [pc, #60]	; (800a718 <UARTEx_SetNbDataToProcess+0x98>)
 800a6da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ea:	7b7a      	ldrb	r2, [r7, #13]
 800a6ec:	4909      	ldr	r1, [pc, #36]	; (800a714 <UARTEx_SetNbDataToProcess+0x94>)
 800a6ee:	5c8a      	ldrb	r2, [r1, r2]
 800a6f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6f4:	7b7a      	ldrb	r2, [r7, #13]
 800a6f6:	4908      	ldr	r1, [pc, #32]	; (800a718 <UARTEx_SetNbDataToProcess+0x98>)
 800a6f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a706:	bf00      	nop
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	0800ae48 	.word	0x0800ae48
 800a718:	0800ae50 	.word	0x0800ae50

0800a71c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a71c:	b084      	sub	sp, #16
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	f107 001c 	add.w	r0, r7, #28
 800a72a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	2b01      	cmp	r3, #1
 800a732:	d120      	bne.n	800a776 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a738:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	4b2a      	ldr	r3, [pc, #168]	; (800a7f0 <USB_CoreInit+0xd4>)
 800a746:	4013      	ands	r3, r2
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d105      	bne.n	800a76a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 faac 	bl	800acc8 <USB_CoreReset>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
 800a774:	e01a      	b.n	800a7ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 faa0 	bl	800acc8 <USB_CoreReset>
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d106      	bne.n	800a7a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	639a      	str	r2, [r3, #56]	; 0x38
 800a79e:	e005      	b.n	800a7ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d116      	bne.n	800a7e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7c0:	4b0c      	ldr	r3, [pc, #48]	; (800a7f4 <USB_CoreInit+0xd8>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f043 0206 	orr.w	r2, r3, #6
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f043 0220 	orr.w	r2, r3, #32
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7ec:	b004      	add	sp, #16
 800a7ee:	4770      	bx	lr
 800a7f0:	ffbdffbf 	.word	0xffbdffbf
 800a7f4:	03ee0000 	.word	0x03ee0000

0800a7f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f023 0201 	bic.w	r2, r3, #1
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a826:	2300      	movs	r3, #0
 800a828:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a836:	78fb      	ldrb	r3, [r7, #3]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d115      	bne.n	800a868 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a848:	2001      	movs	r0, #1
 800a84a:	f7f7 fff5 	bl	8002838 <HAL_Delay>
      ms++;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3301      	adds	r3, #1
 800a852:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fa29 	bl	800acac <USB_GetMode>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d01e      	beq.n	800a89e <USB_SetCurrentMode+0x84>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b31      	cmp	r3, #49	; 0x31
 800a864:	d9f0      	bls.n	800a848 <USB_SetCurrentMode+0x2e>
 800a866:	e01a      	b.n	800a89e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a868:	78fb      	ldrb	r3, [r7, #3]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d115      	bne.n	800a89a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a87a:	2001      	movs	r0, #1
 800a87c:	f7f7 ffdc 	bl	8002838 <HAL_Delay>
      ms++;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3301      	adds	r3, #1
 800a884:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fa10 	bl	800acac <USB_GetMode>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d005      	beq.n	800a89e <USB_SetCurrentMode+0x84>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2b31      	cmp	r3, #49	; 0x31
 800a896:	d9f0      	bls.n	800a87a <USB_SetCurrentMode+0x60>
 800a898:	e001      	b.n	800a89e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e005      	b.n	800a8aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b32      	cmp	r3, #50	; 0x32
 800a8a2:	d101      	bne.n	800a8a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e000      	b.n	800a8aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b086      	sub	sp, #24
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	613b      	str	r3, [r7, #16]
 800a8d2:	e009      	b.n	800a8e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	3340      	adds	r3, #64	; 0x40
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	2200      	movs	r2, #0
 800a8e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	613b      	str	r3, [r7, #16]
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	2b0e      	cmp	r3, #14
 800a8ec:	d9f2      	bls.n	800a8d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d11c      	bne.n	800a92e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a902:	f043 0302 	orr.w	r3, r3, #2
 800a906:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	e005      	b.n	800a93a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a932:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a940:	461a      	mov	r2, r3
 800a942:	2300      	movs	r3, #0
 800a944:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a94c:	4619      	mov	r1, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a954:	461a      	mov	r2, r3
 800a956:	680b      	ldr	r3, [r1, #0]
 800a958:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d10c      	bne.n	800a97a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d104      	bne.n	800a970 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a966:	2100      	movs	r1, #0
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f965 	bl	800ac38 <USB_SetDevSpeed>
 800a96e:	e008      	b.n	800a982 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a970:	2101      	movs	r1, #1
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f960 	bl	800ac38 <USB_SetDevSpeed>
 800a978:	e003      	b.n	800a982 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a97a:	2103      	movs	r1, #3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f95b 	bl	800ac38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a982:	2110      	movs	r1, #16
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f8f3 	bl	800ab70 <USB_FlushTxFifo>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f91f 	bl	800abd8 <USB_FlushRxFifo>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	613b      	str	r3, [r7, #16]
 800a9cc:	e043      	b.n	800aa56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	015a      	lsls	r2, r3, #5
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9e4:	d118      	bne.n	800aa18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10a      	bne.n	800aa02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	e013      	b.n	800aa2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	e008      	b.n	800aa2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa24:	461a      	mov	r2, r3
 800aa26:	2300      	movs	r3, #0
 800aa28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	015a      	lsls	r2, r3, #5
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4413      	add	r3, r2
 800aa32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa36:	461a      	mov	r2, r3
 800aa38:	2300      	movs	r3, #0
 800aa3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa48:	461a      	mov	r2, r3
 800aa4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	3301      	adds	r3, #1
 800aa54:	613b      	str	r3, [r7, #16]
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d3b7      	bcc.n	800a9ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa5e:	2300      	movs	r3, #0
 800aa60:	613b      	str	r3, [r7, #16]
 800aa62:	e043      	b.n	800aaec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa7a:	d118      	bne.n	800aaae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	015a      	lsls	r2, r3, #5
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	e013      	b.n	800aac0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	e008      	b.n	800aac0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	015a      	lsls	r2, r3, #5
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	4413      	add	r3, r2
 800aab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaba:	461a      	mov	r2, r3
 800aabc:	2300      	movs	r3, #0
 800aabe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	015a      	lsls	r2, r3, #5
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aacc:	461a      	mov	r2, r3
 800aace:	2300      	movs	r3, #0
 800aad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aade:	461a      	mov	r2, r3
 800aae0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aae4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	3301      	adds	r3, #1
 800aaea:	613b      	str	r3, [r7, #16]
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d3b7      	bcc.n	800aa64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d105      	bne.n	800ab28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	f043 0210 	orr.w	r2, r3, #16
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	699a      	ldr	r2, [r3, #24]
 800ab2c:	4b0e      	ldr	r3, [pc, #56]	; (800ab68 <USB_DevInit+0x2b4>)
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d005      	beq.n	800ab46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	f043 0208 	orr.w	r2, r3, #8
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d105      	bne.n	800ab58 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	699a      	ldr	r2, [r3, #24]
 800ab50:	4b06      	ldr	r3, [pc, #24]	; (800ab6c <USB_DevInit+0x2b8>)
 800ab52:	4313      	orrs	r3, r2
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab64:	b004      	add	sp, #16
 800ab66:	4770      	bx	lr
 800ab68:	803c3800 	.word	0x803c3800
 800ab6c:	40000004 	.word	0x40000004

0800ab70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3301      	adds	r3, #1
 800ab82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	4a13      	ldr	r2, [pc, #76]	; (800abd4 <USB_FlushTxFifo+0x64>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d901      	bls.n	800ab90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e01b      	b.n	800abc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	daf2      	bge.n	800ab7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	019b      	lsls	r3, r3, #6
 800aba0:	f043 0220 	orr.w	r2, r3, #32
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3301      	adds	r3, #1
 800abac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	4a08      	ldr	r2, [pc, #32]	; (800abd4 <USB_FlushTxFifo+0x64>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d901      	bls.n	800abba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e006      	b.n	800abc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	f003 0320 	and.w	r3, r3, #32
 800abc2:	2b20      	cmp	r3, #32
 800abc4:	d0f0      	beq.n	800aba8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr
 800abd4:	00030d40 	.word	0x00030d40

0800abd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	3301      	adds	r3, #1
 800abe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	4a11      	ldr	r2, [pc, #68]	; (800ac34 <USB_FlushRxFifo+0x5c>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d901      	bls.n	800abf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e018      	b.n	800ac28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	daf2      	bge.n	800abe4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2210      	movs	r2, #16
 800ac06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	4a08      	ldr	r2, [pc, #32]	; (800ac34 <USB_FlushRxFifo+0x5c>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d901      	bls.n	800ac1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e006      	b.n	800ac28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	f003 0310 	and.w	r3, r3, #16
 800ac22:	2b10      	cmp	r3, #16
 800ac24:	d0f0      	beq.n	800ac08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	00030d40 	.word	0x00030d40

0800ac38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	460b      	mov	r3, r1
 800ac42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	78fb      	ldrb	r3, [r7, #3]
 800ac52:	68f9      	ldr	r1, [r7, #12]
 800ac54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3714      	adds	r7, #20
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b085      	sub	sp, #20
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac84:	f023 0303 	bic.w	r3, r3, #3
 800ac88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac98:	f043 0302 	orr.w	r3, r3, #2
 800ac9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	695b      	ldr	r3, [r3, #20]
 800acb8:	f003 0301 	and.w	r3, r3, #1
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acd0:	2300      	movs	r3, #0
 800acd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3301      	adds	r3, #1
 800acd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4a13      	ldr	r2, [pc, #76]	; (800ad2c <USB_CoreReset+0x64>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d901      	bls.n	800ace6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ace2:	2303      	movs	r3, #3
 800ace4:	e01b      	b.n	800ad1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	daf2      	bge.n	800acd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800acee:	2300      	movs	r3, #0
 800acf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	f043 0201 	orr.w	r2, r3, #1
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3301      	adds	r3, #1
 800ad02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4a09      	ldr	r2, [pc, #36]	; (800ad2c <USB_CoreReset+0x64>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d901      	bls.n	800ad10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e006      	b.n	800ad1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	f003 0301 	and.w	r3, r3, #1
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d0f0      	beq.n	800acfe <USB_CoreReset+0x36>

  return HAL_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3714      	adds	r7, #20
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	00030d40 	.word	0x00030d40

0800ad30 <__libc_init_array>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	4d0d      	ldr	r5, [pc, #52]	; (800ad68 <__libc_init_array+0x38>)
 800ad34:	4c0d      	ldr	r4, [pc, #52]	; (800ad6c <__libc_init_array+0x3c>)
 800ad36:	1b64      	subs	r4, r4, r5
 800ad38:	10a4      	asrs	r4, r4, #2
 800ad3a:	2600      	movs	r6, #0
 800ad3c:	42a6      	cmp	r6, r4
 800ad3e:	d109      	bne.n	800ad54 <__libc_init_array+0x24>
 800ad40:	4d0b      	ldr	r5, [pc, #44]	; (800ad70 <__libc_init_array+0x40>)
 800ad42:	4c0c      	ldr	r4, [pc, #48]	; (800ad74 <__libc_init_array+0x44>)
 800ad44:	f000 f820 	bl	800ad88 <_init>
 800ad48:	1b64      	subs	r4, r4, r5
 800ad4a:	10a4      	asrs	r4, r4, #2
 800ad4c:	2600      	movs	r6, #0
 800ad4e:	42a6      	cmp	r6, r4
 800ad50:	d105      	bne.n	800ad5e <__libc_init_array+0x2e>
 800ad52:	bd70      	pop	{r4, r5, r6, pc}
 800ad54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad58:	4798      	blx	r3
 800ad5a:	3601      	adds	r6, #1
 800ad5c:	e7ee      	b.n	800ad3c <__libc_init_array+0xc>
 800ad5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad62:	4798      	blx	r3
 800ad64:	3601      	adds	r6, #1
 800ad66:	e7f2      	b.n	800ad4e <__libc_init_array+0x1e>
 800ad68:	0800ae60 	.word	0x0800ae60
 800ad6c:	0800ae60 	.word	0x0800ae60
 800ad70:	0800ae60 	.word	0x0800ae60
 800ad74:	0800ae64 	.word	0x0800ae64

0800ad78 <memset>:
 800ad78:	4402      	add	r2, r0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d100      	bne.n	800ad82 <memset+0xa>
 800ad80:	4770      	bx	lr
 800ad82:	f803 1b01 	strb.w	r1, [r3], #1
 800ad86:	e7f9      	b.n	800ad7c <memset+0x4>

0800ad88 <_init>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	bf00      	nop
 800ad8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8e:	bc08      	pop	{r3}
 800ad90:	469e      	mov	lr, r3
 800ad92:	4770      	bx	lr

0800ad94 <_fini>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	bf00      	nop
 800ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9a:	bc08      	pop	{r3}
 800ad9c:	469e      	mov	lr, r3
 800ad9e:	4770      	bx	lr
