
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b56c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001678  0800b80c  0800b80c  0001b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce84  0800ce84  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce84  0800ce84  0001ce84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce8c  0800ce8c  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce8c  0800ce8c  0001ce8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce90  0800ce90  0001ce90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800ce94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800cf18  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800cf78  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b78  24000144  0800cfd8  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000cbc  0800cfd8  00020cbc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f6b3  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036c1  00000000  00000000  0003f825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001440  00000000  00000000  00042ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012f0  00000000  00000000  00044328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c555  00000000  00000000  00045618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001babf  00000000  00000000  00081b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001871a0  00000000  00000000  0009d62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002247cc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005980  00000000  00000000  0022481c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b7f4 	.word	0x0800b7f4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	0800b7f4 	.word	0x0800b7f4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->actionPositon = src->actionPositon;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <RFID_Clear_Card_Bufffer>:
void RFID_Clear_Card_Bufffer(RFID *rfid) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b088      	sub	sp, #32
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3314      	adds	r3, #20
 80006f2:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	76fb      	strb	r3, [r7, #27]
 80006f8:	e00b      	b.n	8000712 <RFID_Clear_Card_Bufffer+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	69f9      	ldr	r1, [r7, #28]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffbf 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	330c      	adds	r3, #12
 800070a:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800070c:	7efb      	ldrb	r3, [r7, #27]
 800070e:	3301      	adds	r3, #1
 8000710:	76fb      	strb	r3, [r7, #27]
 8000712:	7efb      	ldrb	r3, [r7, #27]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d9f0      	bls.n	80006fa <RFID_Clear_Card_Bufffer+0x20>
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <YUGIOH_Clear_Card_Bufffer_Player>:
	card->cardLevel = archive_yugioh_card_level[idx];
	card->cardAtk = archive_yugioh_card_atk[idx];
	card->cardDef = archive_yugioh_card_def[idx];
}

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b088      	sub	sp, #32
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800073c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800073e:	2300      	movs	r3, #0
 8000740:	76fb      	strb	r3, [r7, #27]
 8000742:	e00b      	b.n	800075c <YUGIOH_Clear_Card_Bufffer_Player+0x3a>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	69f9      	ldr	r1, [r7, #28]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff9a 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	330c      	adds	r3, #12
 8000754:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000756:	7efb      	ldrb	r3, [r7, #27]
 8000758:	3301      	adds	r3, #1
 800075a:	76fb      	strb	r3, [r7, #27]
 800075c:	7efb      	ldrb	r3, [r7, #27]
 800075e:	2b05      	cmp	r3, #5
 8000760:	d9f0      	bls.n	8000744 <YUGIOH_Clear_Card_Bufffer_Player+0x22>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800077a:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000782:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800078a:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000792:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000794:	2306      	movs	r3, #6
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	e00c      	b.n	80007b4 <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800079a:	6939      	ldr	r1, [r7, #16]
 800079c:	6978      	ldr	r0, [r7, #20]
 800079e:	f7ff ff71 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3b0c      	subs	r3, #12
 80007a6:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	3b0c      	subs	r3, #12
 80007ac:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dcef      	bgt.n	800079a <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af04      	add	r7, sp, #16
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	3304      	adds	r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
	Player *ptrPlayer2 = state_game->player;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	3304      	adds	r3, #4
 80007d8:	613b      	str	r3, [r7, #16]

	ptrPlayer1 = &state_game->player[0];
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	3304      	adds	r3, #4
 80007de:	617b      	str	r3, [r7, #20]
	ptrPlayer2 = &state_game->player[1];
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80007e6:	613b      	str	r3, [r7, #16]

	enum _player_state {
		ready, first_player, second_player
	} player_state;
	player_state = state_game->player_state;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80007ee:	73fb      	strb	r3, [r7, #15]

	switch (player_state) {
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	f000 8123 	beq.w	8000a3e <GAME_PLAY_Management+0x27a>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	f300 8125 	bgt.w	8000a48 <GAME_PLAY_Management+0x284>
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d003      	beq.n	800080a <GAME_PLAY_Management+0x46>
 8000802:	2b01      	cmp	r3, #1
 8000804:	f000 8116 	beq.w	8000a34 <GAME_PLAY_Management+0x270>
	case second_player:

		GAME_PLAY_Phase_Management(RFIDmain,state_game);
		break;
	}
}
 8000808:	e11e      	b.n	8000a48 <GAME_PLAY_Management+0x284>
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800080a:	4b91      	ldr	r3, [pc, #580]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 800080c:	2200      	movs	r2, #0
 800080e:	9202      	str	r2, [sp, #8]
 8000810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000814:	9201      	str	r2, [sp, #4]
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	9200      	str	r2, [sp, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a8d      	ldr	r2, [pc, #564]	; (8000a54 <GAME_PLAY_Management+0x290>)
 800081e:	2105      	movs	r1, #5
 8000820:	2005      	movs	r0, #5
 8000822:	f001 fb72 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000826:	4b8a      	ldr	r3, [pc, #552]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 8000828:	2200      	movs	r2, #0
 800082a:	9202      	str	r2, [sp, #8]
 800082c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000830:	9201      	str	r2, [sp, #4]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	9200      	str	r2, [sp, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a87      	ldr	r2, [pc, #540]	; (8000a58 <GAME_PLAY_Management+0x294>)
 800083a:	210f      	movs	r1, #15
 800083c:	2000      	movs	r0, #0
 800083e:	f001 fb64 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000842:	4b86      	ldr	r3, [pc, #536]	; (8000a5c <GAME_PLAY_Management+0x298>)
 8000844:	2200      	movs	r2, #0
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800084c:	9201      	str	r2, [sp, #4]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	9200      	str	r2, [sp, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a82      	ldr	r2, [pc, #520]	; (8000a60 <GAME_PLAY_Management+0x29c>)
 8000856:	2123      	movs	r1, #35	; 0x23
 8000858:	2008      	movs	r0, #8
 800085a:	f001 fb56 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800085e:	4b7f      	ldr	r3, [pc, #508]	; (8000a5c <GAME_PLAY_Management+0x298>)
 8000860:	2200      	movs	r2, #0
 8000862:	9202      	str	r2, [sp, #8]
 8000864:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000868:	9201      	str	r2, [sp, #4]
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	9200      	str	r2, [sp, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a7c      	ldr	r2, [pc, #496]	; (8000a64 <GAME_PLAY_Management+0x2a0>)
 8000872:	213c      	movs	r1, #60	; 0x3c
 8000874:	2019      	movs	r0, #25
 8000876:	f001 fb48 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800087a:	4b75      	ldr	r3, [pc, #468]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 800087c:	2200      	movs	r2, #0
 800087e:	9202      	str	r2, [sp, #8]
 8000880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a72      	ldr	r2, [pc, #456]	; (8000a58 <GAME_PLAY_Management+0x294>)
 800088e:	214b      	movs	r1, #75	; 0x4b
 8000890:	2000      	movs	r0, #0
 8000892:	f001 fb3a 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000896:	4b6e      	ldr	r3, [pc, #440]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 8000898:	2200      	movs	r2, #0
 800089a:	9202      	str	r2, [sp, #8]
 800089c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a0:	9201      	str	r2, [sp, #4]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	9200      	str	r2, [sp, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a6f      	ldr	r2, [pc, #444]	; (8000a68 <GAME_PLAY_Management+0x2a4>)
 80008aa:	215a      	movs	r1, #90	; 0x5a
 80008ac:	2000      	movs	r0, #0
 80008ae:	f001 fb2c 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80008b2:	4b67      	ldr	r3, [pc, #412]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	9202      	str	r2, [sp, #8]
 80008b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a69      	ldr	r2, [pc, #420]	; (8000a6c <GAME_PLAY_Management+0x2a8>)
 80008c6:	215a      	movs	r1, #90	; 0x5a
 80008c8:	205d      	movs	r0, #93	; 0x5d
 80008ca:	f001 fb1e 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008ce:	4b60      	ldr	r3, [pc, #384]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	9202      	str	r2, [sp, #8]
 80008d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	9200      	str	r2, [sp, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a63      	ldr	r2, [pc, #396]	; (8000a70 <GAME_PLAY_Management+0x2ac>)
 80008e2:	2169      	movs	r1, #105	; 0x69
 80008e4:	2000      	movs	r0, #0
 80008e6:	f001 fb10 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80008ea:	4b59      	ldr	r3, [pc, #356]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	9202      	str	r2, [sp, #8]
 80008f0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008f4:	9201      	str	r2, [sp, #4]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a5d      	ldr	r2, [pc, #372]	; (8000a74 <GAME_PLAY_Management+0x2b0>)
 80008fe:	2169      	movs	r1, #105	; 0x69
 8000900:	2064      	movs	r0, #100	; 0x64
 8000902:	f001 fb02 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000906:	4b52      	ldr	r3, [pc, #328]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 8000908:	2200      	movs	r2, #0
 800090a:	9202      	str	r2, [sp, #8]
 800090c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000910:	9201      	str	r2, [sp, #4]
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a57      	ldr	r2, [pc, #348]	; (8000a78 <GAME_PLAY_Management+0x2b4>)
 800091a:	2105      	movs	r1, #5
 800091c:	2005      	movs	r0, #5
 800091e:	f001 fb3e 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000922:	4b4b      	ldr	r3, [pc, #300]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 8000924:	2200      	movs	r2, #0
 8000926:	9202      	str	r2, [sp, #8]
 8000928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092c:	9201      	str	r2, [sp, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a48      	ldr	r2, [pc, #288]	; (8000a58 <GAME_PLAY_Management+0x294>)
 8000936:	210f      	movs	r1, #15
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fb30 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800093e:	4b47      	ldr	r3, [pc, #284]	; (8000a5c <GAME_PLAY_Management+0x298>)
 8000940:	2200      	movs	r2, #0
 8000942:	9202      	str	r2, [sp, #8]
 8000944:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000948:	9201      	str	r2, [sp, #4]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	9200      	str	r2, [sp, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a43      	ldr	r2, [pc, #268]	; (8000a60 <GAME_PLAY_Management+0x29c>)
 8000952:	2123      	movs	r1, #35	; 0x23
 8000954:	2008      	movs	r0, #8
 8000956:	f001 fb22 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800095a:	4b40      	ldr	r3, [pc, #256]	; (8000a5c <GAME_PLAY_Management+0x298>)
 800095c:	2200      	movs	r2, #0
 800095e:	9202      	str	r2, [sp, #8]
 8000960:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000964:	9201      	str	r2, [sp, #4]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	9200      	str	r2, [sp, #0]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a3d      	ldr	r2, [pc, #244]	; (8000a64 <GAME_PLAY_Management+0x2a0>)
 800096e:	213c      	movs	r1, #60	; 0x3c
 8000970:	2014      	movs	r0, #20
 8000972:	f001 fb14 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000976:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 8000978:	2200      	movs	r2, #0
 800097a:	9202      	str	r2, [sp, #8]
 800097c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000980:	9201      	str	r2, [sp, #4]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	9200      	str	r2, [sp, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <GAME_PLAY_Management+0x294>)
 800098a:	214b      	movs	r1, #75	; 0x4b
 800098c:	2000      	movs	r0, #0
 800098e:	f001 fb06 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000992:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 8000994:	2200      	movs	r2, #0
 8000996:	9202      	str	r2, [sp, #8]
 8000998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099c:	9201      	str	r2, [sp, #4]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	9200      	str	r2, [sp, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a30      	ldr	r2, [pc, #192]	; (8000a68 <GAME_PLAY_Management+0x2a4>)
 80009a6:	215a      	movs	r1, #90	; 0x5a
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 faf8 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009ae:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	9202      	str	r2, [sp, #8]
 80009b4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009b8:	9201      	str	r2, [sp, #4]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	9200      	str	r2, [sp, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a2a      	ldr	r2, [pc, #168]	; (8000a6c <GAME_PLAY_Management+0x2a8>)
 80009c2:	215a      	movs	r1, #90	; 0x5a
 80009c4:	205d      	movs	r0, #93	; 0x5d
 80009c6:	f001 faea 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	9202      	str	r2, [sp, #8]
 80009d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	9200      	str	r2, [sp, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <GAME_PLAY_Management+0x2ac>)
 80009de:	2169      	movs	r1, #105	; 0x69
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 fadc 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <GAME_PLAY_Management+0x28c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	9202      	str	r2, [sp, #8]
 80009ec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	9200      	str	r2, [sp, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <GAME_PLAY_Management+0x2b0>)
 80009fa:	2169      	movs	r1, #105	; 0x69
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f001 face 	bl	8001f9e <ST7735_WriteString1>
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000a02:	2108      	movs	r1, #8
 8000a04:	481d      	ldr	r0, [pc, #116]	; (8000a7c <GAME_PLAY_Management+0x2b8>)
 8000a06:	f005 f927 	bl	8005c58 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10c      	bne.n	8000a2a <GAME_PLAY_Management+0x266>
			ptrPlayer1->life_point = 4000;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a16:	801a      	strh	r2, [r3, #0]
			ptrPlayer2->life_point = 4000;
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a1e:	801a      	strh	r2, [r3, #0]
			state_game->player_state = first_player;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	2201      	movs	r2, #1
 8000a24:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
		break;
 8000a28:	e00e      	b.n	8000a48 <GAME_PLAY_Management+0x284>
			state_game->test = 98;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	2262      	movs	r2, #98	; 0x62
 8000a2e:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
		break;
 8000a32:	e009      	b.n	8000a48 <GAME_PLAY_Management+0x284>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000a34:	6839      	ldr	r1, [r7, #0]
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 f822 	bl	8000a80 <GAME_PLAY_Phase_Management>
		break;
 8000a3c:	e004      	b.n	8000a48 <GAME_PLAY_Management+0x284>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f81d 	bl	8000a80 <GAME_PLAY_Phase_Management>
		break;
 8000a46:	bf00      	nop
}
 8000a48:	bf00      	nop
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	24000008 	.word	0x24000008
 8000a54:	0800b80c 	.word	0x0800b80c
 8000a58:	0800b818 	.word	0x0800b818
 8000a5c:	24000010 	.word	0x24000010
 8000a60:	0800b82c 	.word	0x0800b82c
 8000a64:	0800b838 	.word	0x0800b838
 8000a68:	0800b840 	.word	0x0800b840
 8000a6c:	0800b850 	.word	0x0800b850
 8000a70:	0800b858 	.word	0x0800b858
 8000a74:	0800b868 	.word	0x0800b868
 8000a78:	0800b86c 	.word	0x0800b86c
 8000a7c:	58020000 	.word	0x58020000

08000a80 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain, State_game *state_game)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af04      	add	r7, sp, #16
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	enum _STATE {
		Drawn_Phase, Main_Phase, Battle_Phase, Chain_Phase
	} STATE;
	STATE = state_game->STATE;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 8000a90:	74fb      	strb	r3, [r7, #19]

	enum _MAIN {
		await,select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} MAIN;
	MAIN = state_game->MAIN;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8000a98:	74bb      	strb	r3, [r7, #18]

	// Player
	Player *ptrPlayerAtk = state_game->player;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
	Player *ptrPlayerDef = state_game->player;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	623b      	str	r3, [r7, #32]

	if (state_game->player_state == first_player) {
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d107      	bne.n	8000ac0 <GAME_PLAY_Phase_Management+0x40>
		ptrPlayerAtk = &state_game->player[0];
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
		ptrPlayerDef = &state_game->player[1];
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000abc:	623b      	str	r3, [r7, #32]
 8000abe:	e00b      	b.n	8000ad8 <GAME_PLAY_Phase_Management+0x58>
	} else if (state_game->player_state == first_player) {
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d106      	bne.n	8000ad8 <GAME_PLAY_Phase_Management+0x58>
		ptrPlayerAtk = &state_game->player[1];
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
		ptrPlayerDef = &state_game->player[0];
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	623b      	str	r3, [r7, #32]

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (STATE) {
 8000ad8:	7cfb      	ldrb	r3, [r7, #19]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	f200 8334 	bhi.w	8001148 <GAME_PLAY_Phase_Management+0x6c8>
 8000ae0:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <GAME_PLAY_Phase_Management+0x68>)
 8000ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae6:	bf00      	nop
 8000ae8:	08000af9 	.word	0x08000af9
 8000aec:	08000c2d 	.word	0x08000c2d
 8000af0:	0800113f 	.word	0x0800113f
 8000af4:	0800113f 	.word	0x0800113f
	case Drawn_Phase:
		ST7735_FillScreen(ST7735_BLACK);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 fb83 	bl	8002204 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f001 fb91 	bl	8002226 <ST7735_FillScreen1>
		// MAIN display for draw phase state
		MainGUI();
 8000b04:	f000 fb80 	bl	8001208 <MainGUI>
		sprintf(C_LP2, "%d",ptrPlayerDef -> life_point);
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	499a      	ldr	r1, [pc, #616]	; (8000d78 <GAME_PLAY_Phase_Management+0x2f8>)
 8000b10:	489a      	ldr	r0, [pc, #616]	; (8000d7c <GAME_PLAY_Phase_Management+0x2fc>)
 8000b12:	f00a faf1 	bl	800b0f8 <siprintf>
		ST7735_WriteString( 90, 20, C_LP2, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000b16:	4b9a      	ldr	r3, [pc, #616]	; (8000d80 <GAME_PLAY_Phase_Management+0x300>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	9202      	str	r2, [sp, #8]
 8000b1c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000b20:	9201      	str	r2, [sp, #4]
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	9200      	str	r2, [sp, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a94      	ldr	r2, [pc, #592]	; (8000d7c <GAME_PLAY_Phase_Management+0x2fc>)
 8000b2a:	2114      	movs	r1, #20
 8000b2c:	205a      	movs	r0, #90	; 0x5a
 8000b2e:	f001 f9ec 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000b32:	4b93      	ldr	r3, [pc, #588]	; (8000d80 <GAME_PLAY_Phase_Management+0x300>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	9202      	str	r2, [sp, #8]
 8000b38:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b3c:	9201      	str	r2, [sp, #4]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	9200      	str	r2, [sp, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a8f      	ldr	r2, [pc, #572]	; (8000d84 <GAME_PLAY_Phase_Management+0x304>)
 8000b46:	2123      	movs	r1, #35	; 0x23
 8000b48:	203c      	movs	r0, #60	; 0x3c
 8000b4a:	f001 f9de 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000b4e:	4b8c      	ldr	r3, [pc, #560]	; (8000d80 <GAME_PLAY_Phase_Management+0x300>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	9202      	str	r2, [sp, #8]
 8000b54:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000b58:	9201      	str	r2, [sp, #4]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	9200      	str	r2, [sp, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a89      	ldr	r2, [pc, #548]	; (8000d88 <GAME_PLAY_Phase_Management+0x308>)
 8000b62:	2132      	movs	r1, #50	; 0x32
 8000b64:	2069      	movs	r0, #105	; 0x69
 8000b66:	f001 f9d0 	bl	8001f0a <ST7735_WriteString>
		ST7735_WriteString(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b6a:	4b85      	ldr	r3, [pc, #532]	; (8000d80 <GAME_PLAY_Phase_Management+0x300>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	9202      	str	r2, [sp, #8]
 8000b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b74:	9201      	str	r2, [sp, #4]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	9200      	str	r2, [sp, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a83      	ldr	r2, [pc, #524]	; (8000d8c <GAME_PLAY_Phase_Management+0x30c>)
 8000b7e:	215a      	movs	r1, #90	; 0x5a
 8000b80:	2005      	movs	r0, #5
 8000b82:	f001 f9c2 	bl	8001f0a <ST7735_WriteString>
		sprintf(C_LP1, "%d",ptrPlayerAtk -> life_point);
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	497a      	ldr	r1, [pc, #488]	; (8000d78 <GAME_PLAY_Phase_Management+0x2f8>)
 8000b8e:	4880      	ldr	r0, [pc, #512]	; (8000d90 <GAME_PLAY_Phase_Management+0x310>)
 8000b90:	f00a fab2 	bl	800b0f8 <siprintf>
		ST7735_WriteString1( 90, 20, C_LP1, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000b94:	4b7a      	ldr	r3, [pc, #488]	; (8000d80 <GAME_PLAY_Phase_Management+0x300>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	9202      	str	r2, [sp, #8]
 8000b9a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000b9e:	9201      	str	r2, [sp, #4]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	9200      	str	r2, [sp, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a7a      	ldr	r2, [pc, #488]	; (8000d90 <GAME_PLAY_Phase_Management+0x310>)
 8000ba8:	2114      	movs	r1, #20
 8000baa:	205a      	movs	r0, #90	; 0x5a
 8000bac:	f001 f9f7 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000bb0:	4b73      	ldr	r3, [pc, #460]	; (8000d80 <GAME_PLAY_Phase_Management+0x300>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	9202      	str	r2, [sp, #8]
 8000bb6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000bba:	9201      	str	r2, [sp, #4]
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	9200      	str	r2, [sp, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a70      	ldr	r2, [pc, #448]	; (8000d84 <GAME_PLAY_Phase_Management+0x304>)
 8000bc4:	2123      	movs	r1, #35	; 0x23
 8000bc6:	203c      	movs	r0, #60	; 0x3c
 8000bc8:	f001 f9e9 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000bcc:	4b6c      	ldr	r3, [pc, #432]	; (8000d80 <GAME_PLAY_Phase_Management+0x300>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	9202      	str	r2, [sp, #8]
 8000bd2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000bd6:	9201      	str	r2, [sp, #4]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	9200      	str	r2, [sp, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a6a      	ldr	r2, [pc, #424]	; (8000d88 <GAME_PLAY_Phase_Management+0x308>)
 8000be0:	2132      	movs	r1, #50	; 0x32
 8000be2:	2069      	movs	r0, #105	; 0x69
 8000be4:	f001 f9db 	bl	8001f9e <ST7735_WriteString1>
		ST7735_WriteString1(5, 90, "Draw a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000be8:	4b65      	ldr	r3, [pc, #404]	; (8000d80 <GAME_PLAY_Phase_Management+0x300>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	9202      	str	r2, [sp, #8]
 8000bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf2:	9201      	str	r2, [sp, #4]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	9200      	str	r2, [sp, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a66      	ldr	r2, [pc, #408]	; (8000d94 <GAME_PLAY_Phase_Management+0x314>)
 8000bfc:	215a      	movs	r1, #90	; 0x5a
 8000bfe:	2005      	movs	r0, #5
 8000c00:	f001 f9cd 	bl	8001f9e <ST7735_WriteString1>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000c04:	2101      	movs	r1, #1
 8000c06:	4864      	ldr	r0, [pc, #400]	; (8000d98 <GAME_PLAY_Phase_Management+0x318>)
 8000c08:	f005 f826 	bl	8005c58 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f040 8297 	bne.w	8001142 <GAME_PLAY_Phase_Management+0x6c2>
				== GPIO_PIN_RESET) {
			state_game->STATE = Main_Phase;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2201      	movs	r2, #1
 8000c18:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			state_game->MAIN = await;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			// Wait for card to be read State = 0 Mean AFK
			state_game->action = 0;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c2a:	e28a      	b.n	8001142 <GAME_PLAY_Phase_Management+0x6c2>
	case Main_Phase:

		switch (MAIN)
 8000c2c:	7cbb      	ldrb	r3, [r7, #18]
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	f200 8289 	bhi.w	8001146 <GAME_PLAY_Phase_Management+0x6c6>
 8000c34:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <GAME_PLAY_Phase_Management+0x1bc>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c59 	.word	0x08000c59
 8000c40:	08000c81 	.word	0x08000c81
 8000c44:	08000da5 	.word	0x08000da5
 8000c48:	08000f35 	.word	0x08000f35
 8000c4c:	080010cb 	.word	0x080010cb
 8000c50:	0800107d 	.word	0x0800107d
 8000c54:	08001013 	.word	0x08001013
		{
		case await:
			if (state_game->action == 0)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d105      	bne.n	8000c6c <GAME_PLAY_Phase_Management+0x1ec>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c62:	6839      	ldr	r1, [r7, #0]
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 fa75 	bl	8001154 <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->MAIN = select_position;
			}
			break;
 8000c6a:	e25a      	b.n	8001122 <GAME_PLAY_Phase_Management+0x6a2>
			else if (state_game->action == 1)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	f040 8256 	bne.w	8001122 <GAME_PLAY_Phase_Management+0x6a2>
				state_game->MAIN = select_position;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000c7e:	e250      	b.n	8001122 <GAME_PLAY_Phase_Management+0x6a2>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &ptrPlayerAtk->ChainBuffer[0];
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000c86:	60fb      	str	r3, [r7, #12]
			ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000c8e:	61fb      	str	r3, [r7, #28]

			if (state_game->action == 1)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d15e      	bne.n	8000d56 <GAME_PLAY_Phase_Management+0x2d6>
			{
				if (state_game->player_state == first_player)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d135      	bne.n	8000d0e <GAME_PLAY_Phase_Management+0x28e>
				{
					if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	483c      	ldr	r0, [pc, #240]	; (8000d98 <GAME_PLAY_Phase_Management+0x318>)
 8000ca6:	f004 ffd7 	bl	8005c58 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d106      	bne.n	8000cbe <GAME_PLAY_Phase_Management+0x23e>
					{
						ptrYugiohCard_src->cardState = 1;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2202      	movs	r2, #2
 8000cba:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->MAIN = check_card_type;
			}
			break;
 8000cbc:	e233      	b.n	8001126 <GAME_PLAY_Phase_Management+0x6a6>
					else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4836      	ldr	r0, [pc, #216]	; (8000d9c <GAME_PLAY_Phase_Management+0x31c>)
 8000cc2:	f004 ffc9 	bl	8005c58 <HAL_GPIO_ReadPin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d106      	bne.n	8000cda <GAME_PLAY_Phase_Management+0x25a>
						ptrYugiohCard_src->cardState = 0;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	701a      	strb	r2, [r3, #0]
			break;
 8000cd8:	e225      	b.n	8001126 <GAME_PLAY_Phase_Management+0x6a6>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cde:	4830      	ldr	r0, [pc, #192]	; (8000da0 <GAME_PLAY_Phase_Management+0x320>)
 8000ce0:	f004 ffba 	bl	8005c58 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d104      	bne.n	8000cf4 <GAME_PLAY_Phase_Management+0x274>
						state_game->test = 22;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2216      	movs	r2, #22
 8000cee:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000cf2:	e218      	b.n	8001126 <GAME_PLAY_Phase_Management+0x6a6>
					else if (HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	4828      	ldr	r0, [pc, #160]	; (8000d98 <GAME_PLAY_Phase_Management+0x318>)
 8000cf8:	f004 ffae 	bl	8005c58 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8211 	bne.w	8001126 <GAME_PLAY_Phase_Management+0x6a6>
						state_game->test = 33;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2221      	movs	r2, #33	; 0x21
 8000d08:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000d0c:	e20b      	b.n	8001126 <GAME_PLAY_Phase_Management+0x6a6>
				else if (state_game->player_state == second_player)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	f040 8206 	bne.w	8001126 <GAME_PLAY_Phase_Management+0x6a6>
					if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	481e      	ldr	r0, [pc, #120]	; (8000d98 <GAME_PLAY_Phase_Management+0x318>)
 8000d1e:	f004 ff9b 	bl	8005c58 <HAL_GPIO_ReadPin>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d106      	bne.n	8000d36 <GAME_PLAY_Phase_Management+0x2b6>
						ptrYugiohCard_src->cardState = 1;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2202      	movs	r2, #2
 8000d32:	701a      	strb	r2, [r3, #0]
			break;
 8000d34:	e1f7      	b.n	8001126 <GAME_PLAY_Phase_Management+0x6a6>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000d36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d3a:	4819      	ldr	r0, [pc, #100]	; (8000da0 <GAME_PLAY_Phase_Management+0x320>)
 8000d3c:	f004 ff8c 	bl	8005c58 <HAL_GPIO_ReadPin>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 81ef 	bne.w	8001126 <GAME_PLAY_Phase_Management+0x6a6>
						ptrYugiohCard_src->cardState = 0;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2202      	movs	r2, #2
 8000d52:	701a      	strb	r2, [r3, #0]
			break;
 8000d54:	e1e7      	b.n	8001126 <GAME_PLAY_Phase_Management+0x6a6>
			else if (state_game->action == 2)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	f040 81e3 	bne.w	8001126 <GAME_PLAY_Phase_Management+0x6a6>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d60:	69f9      	ldr	r1, [r7, #28]
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f7ff fc8e 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = check_card_type;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2202      	movs	r2, #2
 8000d72:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000d76:	e1d6      	b.n	8001126 <GAME_PLAY_Phase_Management+0x6a6>
 8000d78:	0800b878 	.word	0x0800b878
 8000d7c:	24000164 	.word	0x24000164
 8000d80:	24000008 	.word	0x24000008
 8000d84:	0800b87c 	.word	0x0800b87c
 8000d88:	0800b868 	.word	0x0800b868
 8000d8c:	0800b888 	.word	0x0800b888
 8000d90:	24000160 	.word	0x24000160
 8000d94:	0800b898 	.word	0x0800b898
 8000d98:	58020800 	.word	0x58020800
 8000d9c:	58020400 	.word	0x58020400
 8000da0:	58021400 	.word	0x58021400
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000daa:	60fb      	str	r3, [r7, #12]

			if (state_game->action == 3)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	f040 81ba 	bne.w	800112a <GAME_PLAY_Phase_Management+0x6aa>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	785b      	ldrb	r3, [r3, #1]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d12a      	bne.n	8000e14 <GAME_PLAY_Phase_Management+0x394>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	799a      	ldrb	r2, [r3, #6]
 8000dc2:	4bac      	ldr	r3, [pc, #688]	; (8001074 <GAME_PLAY_Phase_Management+0x5f4>)
 8000dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8000dc8:	0899      	lsrs	r1, r3, #2
 8000dca:	460b      	mov	r3, r1
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	440b      	add	r3, r1
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	723b      	strb	r3, [r7, #8]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000dd6:	7a3a      	ldrb	r2, [r7, #8]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de2:	4413      	add	r3, r2
 8000de4:	3304      	adds	r3, #4
 8000de6:	61fb      	str	r3, [r7, #28]

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000de8:	69f9      	ldr	r1, [r7, #28]
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f7ff fc4a 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000df2:	f7ff fc96 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000dfc:	68f9      	ldr	r1, [r7, #12]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fc40 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
						state_game->action = 4;
						state_game->MAIN = advance_summon;
					}
				}
			}
			break;
 8000e12:	e18a      	b.n	800112a <GAME_PLAY_Phase_Management+0x6aa>
				else if (ptrYugiohCard_src->cardType == 2)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d144      	bne.n	8000ea6 <GAME_PLAY_Phase_Management+0x426>
					state_game->count_chain = 1;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->actionPositon == 1){
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	799b      	ldrb	r3, [r3, #6]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d112      	bne.n	8000e50 <GAME_PLAY_Phase_Management+0x3d0>
						state_game->test = 33;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	2221      	movs	r2, #33	; 0x21
 8000e2e:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e34:	f7ff fc75 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e44:	61fb      	str	r3, [r7, #28]
						state_game->MAIN = chaining_main_DEF;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2206      	movs	r2, #6
 8000e4a:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000e4e:	e16c      	b.n	800112a <GAME_PLAY_Phase_Management+0x6aa>
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	799a      	ldrb	r2, [r3, #6]
 8000e54:	4b87      	ldr	r3, [pc, #540]	; (8001074 <GAME_PLAY_Phase_Management+0x5f4>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	0899      	lsrs	r1, r3, #2
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	727b      	strb	r3, [r7, #9]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000e68:	7a7a      	ldrb	r2, [r7, #9]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e74:	4413      	add	r3, r2
 8000e76:	3304      	adds	r3, #4
 8000e78:	61fb      	str	r3, [r7, #28]
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000e7a:	69f9      	ldr	r1, [r7, #28]
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f7ff fc01 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000e82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e84:	f7ff fc4d 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e8e:	68f9      	ldr	r1, [r7, #12]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fbf7 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000ea4:	e141      	b.n	800112a <GAME_PLAY_Phase_Management+0x6aa>
				else if (ptrYugiohCard_src->cardType == 1)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	f040 813d 	bne.w	800112a <GAME_PLAY_Phase_Management+0x6aa>
					state_game->test = 2;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
					if (ptrYugiohCard_src->cardLevel < 7)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	78db      	ldrb	r3, [r3, #3]
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	d82e      	bhi.n	8000f1e <GAME_PLAY_Phase_Management+0x49e>
						state_game->test = 1;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	799a      	ldrb	r2, [r3, #6]
 8000ecc:	4b69      	ldr	r3, [pc, #420]	; (8001074 <GAME_PLAY_Phase_Management+0x5f4>)
 8000ece:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed2:	0899      	lsrs	r1, r3, #2
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	440b      	add	r3, r1
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	72bb      	strb	r3, [r7, #10]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000ee0:	7aba      	ldrb	r2, [r7, #10]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eec:	4413      	add	r3, r2
 8000eee:	3304      	adds	r3, #4
 8000ef0:	61fb      	str	r3, [r7, #28]
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000ef2:	69f9      	ldr	r1, [r7, #28]
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff fbc5 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000efc:	f7ff fc11 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000f06:	68f9      	ldr	r1, [r7, #12]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fbbb 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000f1c:	e105      	b.n	800112a <GAME_PLAY_Phase_Management+0x6aa>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000f1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f20:	f7ff fbff 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2204      	movs	r2, #4
 8000f28:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = advance_summon;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000f32:	e0fa      	b.n	800112a <GAME_PLAY_Phase_Management+0x6aa>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000f3a:	60fb      	str	r3, [r7, #12]

			if (state_game->action == 4)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d105      	bne.n	8000f50 <GAME_PLAY_Phase_Management+0x4d0>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f903 	bl	8001154 <Player_Reading_Card>
 8000f4e:	e060      	b.n	8001012 <GAME_PLAY_Phase_Management+0x592>
			}
			else if (state_game->action == 5)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d105      	bne.n	8000f64 <GAME_PLAY_Phase_Management+0x4e4>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5a:	6839      	ldr	r1, [r7, #0]
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f8f9 	bl	8001154 <Player_Reading_Card>
 8000f62:	e056      	b.n	8001012 <GAME_PLAY_Phase_Management+0x592>
			}
			else if (state_game->action == 6)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b06      	cmp	r3, #6
 8000f6a:	f040 80e0 	bne.w	800112e <GAME_PLAY_Phase_Management+0x6ae>
			{
				uint8_t monsterflag = 0 ;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	76fb      	strb	r3, [r7, #27]
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000f78:	61fb      	str	r3, [r7, #28]
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	78db      	ldrb	r3, [r3, #3]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d802      	bhi.n	8000f88 <GAME_PLAY_Phase_Management+0x508>
				{
					monsterflag += 1;
 8000f82:	7efb      	ldrb	r3, [r7, #27]
 8000f84:	3301      	adds	r3, #1
 8000f86:	76fb      	strb	r3, [r7, #27]
				}
				ptrYugiohCard_dst++;
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	330c      	adds	r3, #12
 8000f8c:	61fb      	str	r3, [r7, #28]
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	78db      	ldrb	r3, [r3, #3]
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d802      	bhi.n	8000f9c <GAME_PLAY_Phase_Management+0x51c>
				{
					monsterflag += 1;
 8000f96:	7efb      	ldrb	r3, [r7, #27]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	76fb      	strb	r3, [r7, #27]
				}

				if (monsterflag == 2)
 8000f9c:	7efb      	ldrb	r3, [r7, #27]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d12a      	bne.n	8000ff8 <GAME_PLAY_Phase_Management+0x578>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	799a      	ldrb	r2, [r3, #6]
 8000fa6:	4b33      	ldr	r3, [pc, #204]	; (8001074 <GAME_PLAY_Phase_Management+0x5f4>)
 8000fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fac:	0899      	lsrs	r1, r3, #2
 8000fae:	460b      	mov	r3, r1
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	440b      	add	r3, r1
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	72fb      	strb	r3, [r7, #11]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000fba:	7afa      	ldrb	r2, [r7, #11]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3304      	adds	r3, #4
 8000fca:	61fb      	str	r3, [r7, #28]

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000fcc:	69f9      	ldr	r1, [r7, #28]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff fb58 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fd6:	f7ff fba4 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000fe0:	68f9      	ldr	r1, [r7, #12]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fb4e 	bl	8000684 <YUGIOH_card_copy>



					state_game->action = 0;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8000ff6:	e00c      	b.n	8001012 <GAME_PLAY_Phase_Management+0x592>
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ffa:	f7ff fb92 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800100a:	4619      	mov	r1, r3
 800100c:	4610      	mov	r0, r2
 800100e:	f7ff fb39 	bl	8000684 <YUGIOH_card_copy>

			else

			break;
		case chaining_main_DEF:
			state_game->test = 34;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2222      	movs	r2, #34	; 0x22
 8001016:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			if(state_game->action == 4)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d115      	bne.n	800104e <GAME_PLAY_Phase_Management+0x5ce>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f894 	bl	8001154 <Player_Reading_Card>
				state_game->test = 35;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2223      	movs	r2, #35	; 0x23
 8001030:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 8001034:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001038:	480f      	ldr	r0, [pc, #60]	; (8001078 <GAME_PLAY_Phase_Management+0x5f8>)
 800103a:	f004 fe0d 	bl	8005c58 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d176      	bne.n	8001132 <GAME_PLAY_Phase_Management+0x6b2>
					state_game->MAIN = activate_effect;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2204      	movs	r2, #4
 8001048:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
//				ptrYugiohCard_dst++;
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 800104c:	e071      	b.n	8001132 <GAME_PLAY_Phase_Management+0x6b2>
			else if ((state_game->action == 5 )){
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b05      	cmp	r3, #5
 8001054:	d16d      	bne.n	8001132 <GAME_PLAY_Phase_Management+0x6b2>
				state_game->count_chain += 1;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	3301      	adds	r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_ATK;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2205      	movs	r2, #5
 8001066:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2204      	movs	r2, #4
 800106e:	701a      	strb	r2, [r3, #0]
			break;
 8001070:	e05f      	b.n	8001132 <GAME_PLAY_Phase_Management+0x6b2>
 8001072:	bf00      	nop
 8001074:	aaaaaaab 	.word	0xaaaaaaab
 8001078:	58021400 	.word	0x58021400
		case chaining_main_ATK:
			if(state_game->action == 4)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d110      	bne.n	80010a6 <GAME_PLAY_Phase_Management+0x626>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f863 	bl	8001154 <Player_Reading_Card>
				if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 800108e:	2102      	movs	r1, #2
 8001090:	482f      	ldr	r0, [pc, #188]	; (8001150 <GAME_PLAY_Phase_Management+0x6d0>)
 8001092:	f004 fde1 	bl	8005c58 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d14c      	bne.n	8001136 <GAME_PLAY_Phase_Management+0x6b6>
					state_game->MAIN = activate_effect;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2204      	movs	r2, #4
 80010a0:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 80010a4:	e047      	b.n	8001136 <GAME_PLAY_Phase_Management+0x6b6>
			else if ((state_game->action == 5 )){
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d143      	bne.n	8001136 <GAME_PLAY_Phase_Management+0x6b6>
				state_game->count_chain += 1;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_DEF;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2206      	movs	r2, #6
 80010be:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2204      	movs	r2, #4
 80010c6:	701a      	strb	r2, [r3, #0]
			break;
 80010c8:	e035      	b.n	8001136 <GAME_PLAY_Phase_Management+0x6b6>
		case activate_effect:
			if(state_game->count_chain%2 == 0){
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d130      	bne.n	800113a <GAME_PLAY_Phase_Management+0x6ba>
				uint8_t counthing = state_game->count_chain;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	785b      	ldrb	r3, [r3, #1]
 80010dc:	747b      	strb	r3, [r7, #17]
				for (int i = 0; i <= counthing; i++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e019      	b.n	8001118 <GAME_PLAY_Phase_Management+0x698>
					if(ptrYugiohCard_dst->cardSignature == 11){
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b0b      	cmp	r3, #11
 80010ea:	d107      	bne.n	80010fc <GAME_PLAY_Phase_Management+0x67c>
						state_game->test = 11;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	220b      	movs	r2, #11
 80010f0:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(ptrPlayerAtk);
 80010f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010f6:	f000 f863 	bl	80011c0 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
 80010fa:	e007      	b.n	800110c <GAME_PLAY_Phase_Management+0x68c>
					}
					else if(ptrYugiohCard_dst->cardSignature == 12){
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b0c      	cmp	r3, #12
 8001102:	d103      	bne.n	800110c <GAME_PLAY_Phase_Management+0x68c>
						state_game->test = 12;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	220c      	movs	r2, #12
 8001108:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
//						YUGIOH_Clear_Card_Enemy_Player(ptrPlayerAtk);
					}
//					else if()
					ptrYugiohCard_dst++;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	330c      	adds	r3, #12
 8001110:	61fb      	str	r3, [r7, #28]
				for (int i = 0; i <= counthing; i++) {
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	7c7b      	ldrb	r3, [r7, #17]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	dde1      	ble.n	80010e4 <GAME_PLAY_Phase_Management+0x664>
				}
			}
			break;
 8001120:	e00b      	b.n	800113a <GAME_PLAY_Phase_Management+0x6ba>
			break;
 8001122:	bf00      	nop
 8001124:	e00f      	b.n	8001146 <GAME_PLAY_Phase_Management+0x6c6>
			break;
 8001126:	bf00      	nop
 8001128:	e00d      	b.n	8001146 <GAME_PLAY_Phase_Management+0x6c6>
			break;
 800112a:	bf00      	nop
 800112c:	e00b      	b.n	8001146 <GAME_PLAY_Phase_Management+0x6c6>
			break;
 800112e:	bf00      	nop
 8001130:	e009      	b.n	8001146 <GAME_PLAY_Phase_Management+0x6c6>
			break;
 8001132:	bf00      	nop
 8001134:	e007      	b.n	8001146 <GAME_PLAY_Phase_Management+0x6c6>
			break;
 8001136:	bf00      	nop
 8001138:	e005      	b.n	8001146 <GAME_PLAY_Phase_Management+0x6c6>
			break;
 800113a:	bf00      	nop
		}
		break;
 800113c:	e003      	b.n	8001146 <GAME_PLAY_Phase_Management+0x6c6>
		case Battle_Phase:
			break;
 800113e:	bf00      	nop
 8001140:	e002      	b.n	8001148 <GAME_PLAY_Phase_Management+0x6c8>
		break;
 8001142:	bf00      	nop
 8001144:	e000      	b.n	8001148 <GAME_PLAY_Phase_Management+0x6c8>
		break;
 8001146:	bf00      	nop
		case Chain_Phase:
			break;

	}
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	58020400 	.word	0x58020400

08001154 <Player_Reading_Card>:

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3328      	adds	r3, #40	; 0x28
 8001164:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4613      	mov	r3, r2
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	3328      	adds	r3, #40	; 0x28
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3314      	adds	r3, #20
 8001180:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001188:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	78db      	ldrb	r3, [r3, #3]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d112      	bne.n	80011b8 <Player_Reading_Card+0x64>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff faea 	bl	800076c <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001198:	6979      	ldr	r1, [r7, #20]
 800119a:	69b8      	ldr	r0, [r7, #24]
 800119c:	f7ff fa72 	bl	8000684 <YUGIOH_card_copy>

		RFID_Clear_Card_Bufffer(ptrRFID);
 80011a0:	69f8      	ldr	r0, [r7, #28]
 80011a2:	f7ff fa9a 	bl	80006da <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	2200      	movs	r2, #0
 80011aa:	70da      	strb	r2, [r3, #3]

		state_game->action += 1;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	701a      	strb	r2, [r3, #0]
	}
}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:

void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3328      	adds	r3, #40	; 0x28
 80011d8:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80011da:	2300      	movs	r3, #0
 80011dc:	76fb      	strb	r3, [r7, #27]
 80011de:	e00b      	b.n	80011f8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	69f9      	ldr	r1, [r7, #28]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fa4c 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	330c      	adds	r3, #12
 80011f0:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80011f2:	7efb      	ldrb	r3, [r7, #27]
 80011f4:	3301      	adds	r3, #1
 80011f6:	76fb      	strb	r3, [r7, #27]
 80011f8:	7efb      	ldrb	r3, [r7, #27]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d9f0      	bls.n	80011e0 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x20>
	}
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MainGUI>:

void MainGUI(){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af04      	add	r7, sp, #16
    ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800120e:	4b47      	ldr	r3, [pc, #284]	; (800132c <MainGUI+0x124>)
 8001210:	2200      	movs	r2, #0
 8001212:	9202      	str	r2, [sp, #8]
 8001214:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001218:	9201      	str	r2, [sp, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	9200      	str	r2, [sp, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a43      	ldr	r2, [pc, #268]	; (8001330 <MainGUI+0x128>)
 8001222:	2105      	movs	r1, #5
 8001224:	2005      	movs	r0, #5
 8001226:	f000 feba 	bl	8001f9e <ST7735_WriteString1>
    ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800122a:	4b40      	ldr	r3, [pc, #256]	; (800132c <MainGUI+0x124>)
 800122c:	2200      	movs	r2, #0
 800122e:	9202      	str	r2, [sp, #8]
 8001230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001234:	9201      	str	r2, [sp, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	9200      	str	r2, [sp, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a3d      	ldr	r2, [pc, #244]	; (8001334 <MainGUI+0x12c>)
 800123e:	2114      	movs	r1, #20
 8001240:	2005      	movs	r0, #5
 8001242:	f000 feac 	bl	8001f9e <ST7735_WriteString1>
    ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <MainGUI+0x124>)
 8001248:	2200      	movs	r2, #0
 800124a:	9202      	str	r2, [sp, #8]
 800124c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001250:	9201      	str	r2, [sp, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	9200      	str	r2, [sp, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a37      	ldr	r2, [pc, #220]	; (8001338 <MainGUI+0x130>)
 800125a:	2123      	movs	r1, #35	; 0x23
 800125c:	2005      	movs	r0, #5
 800125e:	f000 fe9e 	bl	8001f9e <ST7735_WriteString1>
    ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001262:	4b32      	ldr	r3, [pc, #200]	; (800132c <MainGUI+0x124>)
 8001264:	2200      	movs	r2, #0
 8001266:	9202      	str	r2, [sp, #8]
 8001268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126c:	9201      	str	r2, [sp, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	9200      	str	r2, [sp, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a31      	ldr	r2, [pc, #196]	; (800133c <MainGUI+0x134>)
 8001276:	2132      	movs	r1, #50	; 0x32
 8001278:	2000      	movs	r0, #0
 800127a:	f000 fe90 	bl	8001f9e <ST7735_WriteString1>
    ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800127e:	4b2b      	ldr	r3, [pc, #172]	; (800132c <MainGUI+0x124>)
 8001280:	2200      	movs	r2, #0
 8001282:	9202      	str	r2, [sp, #8]
 8001284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001288:	9201      	str	r2, [sp, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a2b      	ldr	r2, [pc, #172]	; (8001340 <MainGUI+0x138>)
 8001292:	213c      	movs	r1, #60	; 0x3c
 8001294:	2000      	movs	r0, #0
 8001296:	f000 fe82 	bl	8001f9e <ST7735_WriteString1>
    ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <MainGUI+0x124>)
 800129c:	2200      	movs	r2, #0
 800129e:	9202      	str	r2, [sp, #8]
 80012a0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80012a4:	9201      	str	r2, [sp, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	9200      	str	r2, [sp, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a25      	ldr	r2, [pc, #148]	; (8001344 <MainGUI+0x13c>)
 80012ae:	2105      	movs	r1, #5
 80012b0:	2005      	movs	r0, #5
 80012b2:	f000 fe2a 	bl	8001f0a <ST7735_WriteString>
    ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <MainGUI+0x124>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	9202      	str	r2, [sp, #8]
 80012bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c0:	9201      	str	r2, [sp, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	9200      	str	r2, [sp, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <MainGUI+0x12c>)
 80012ca:	2114      	movs	r1, #20
 80012cc:	2005      	movs	r0, #5
 80012ce:	f000 fe1c 	bl	8001f0a <ST7735_WriteString>
    ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <MainGUI+0x124>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	9202      	str	r2, [sp, #8]
 80012d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012dc:	9201      	str	r2, [sp, #4]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <MainGUI+0x130>)
 80012e6:	2123      	movs	r1, #35	; 0x23
 80012e8:	2005      	movs	r0, #5
 80012ea:	f000 fe0e 	bl	8001f0a <ST7735_WriteString>
    ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MainGUI+0x124>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	9202      	str	r2, [sp, #8]
 80012f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f8:	9201      	str	r2, [sp, #4]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	9200      	str	r2, [sp, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0e      	ldr	r2, [pc, #56]	; (800133c <MainGUI+0x134>)
 8001302:	2132      	movs	r1, #50	; 0x32
 8001304:	2000      	movs	r0, #0
 8001306:	f000 fe00 	bl	8001f0a <ST7735_WriteString>
    ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MainGUI+0x124>)
 800130c:	2200      	movs	r2, #0
 800130e:	9202      	str	r2, [sp, #8]
 8001310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001314:	9201      	str	r2, [sp, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	9200      	str	r2, [sp, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <MainGUI+0x138>)
 800131e:	213c      	movs	r1, #60	; 0x3c
 8001320:	2000      	movs	r0, #0
 8001322:	f000 fdf2 	bl	8001f0a <ST7735_WriteString>
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	24000008 	.word	0x24000008
 8001330:	0800b86c 	.word	0x0800b86c
 8001334:	0800b8a4 	.word	0x0800b8a4
 8001338:	0800b8b4 	.word	0x0800b8b4
 800133c:	0800b8bc 	.word	0x0800b8bc
 8001340:	0800b818 	.word	0x0800b818
 8001344:	0800b80c 	.word	0x0800b80c

08001348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800134c:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <SystemInit+0xfc>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	4a3c      	ldr	r2, [pc, #240]	; (8001444 <SystemInit+0xfc>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <SystemInit+0xfc>)
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4a38      	ldr	r2, [pc, #224]	; (8001444 <SystemInit+0xfc>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001368:	4b37      	ldr	r3, [pc, #220]	; (8001448 <SystemInit+0x100>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	2b06      	cmp	r3, #6
 8001372:	d807      	bhi.n	8001384 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <SystemInit+0x100>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 030f 	bic.w	r3, r3, #15
 800137c:	4a32      	ldr	r2, [pc, #200]	; (8001448 <SystemInit+0x100>)
 800137e:	f043 0307 	orr.w	r3, r3, #7
 8001382:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <SystemInit+0x104>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a30      	ldr	r2, [pc, #192]	; (800144c <SystemInit+0x104>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <SystemInit+0x104>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <SystemInit+0x104>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	492c      	ldr	r1, [pc, #176]	; (800144c <SystemInit+0x104>)
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <SystemInit+0x108>)
 800139e:	4013      	ands	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <SystemInit+0x100>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <SystemInit+0x100>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 030f 	bic.w	r3, r3, #15
 80013b6:	4a24      	ldr	r2, [pc, #144]	; (8001448 <SystemInit+0x100>)
 80013b8:	f043 0307 	orr.w	r3, r3, #7
 80013bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <SystemInit+0x104>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <SystemInit+0x104>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <SystemInit+0x104>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <SystemInit+0x104>)
 80013d2:	4a20      	ldr	r2, [pc, #128]	; (8001454 <SystemInit+0x10c>)
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <SystemInit+0x104>)
 80013d8:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <SystemInit+0x110>)
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <SystemInit+0x104>)
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <SystemInit+0x114>)
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <SystemInit+0x104>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <SystemInit+0x104>)
 80013ea:	4a1c      	ldr	r2, [pc, #112]	; (800145c <SystemInit+0x114>)
 80013ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <SystemInit+0x104>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <SystemInit+0x104>)
 80013f6:	4a19      	ldr	r2, [pc, #100]	; (800145c <SystemInit+0x114>)
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <SystemInit+0x104>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <SystemInit+0x104>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a11      	ldr	r2, [pc, #68]	; (800144c <SystemInit+0x104>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <SystemInit+0x104>)
 800140e:	2200      	movs	r2, #0
 8001410:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <SystemInit+0x118>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <SystemInit+0x118>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <SystemInit+0x11c>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <SystemInit+0x120>)
 8001424:	4013      	ands	r3, r2
 8001426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800142a:	d202      	bcs.n	8001432 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <SystemInit+0x124>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <SystemInit+0x128>)
 8001434:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001438:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00
 8001448:	52002000 	.word	0x52002000
 800144c:	58024400 	.word	0x58024400
 8001450:	eaf6ed7f 	.word	0xeaf6ed7f
 8001454:	02020200 	.word	0x02020200
 8001458:	01ff0000 	.word	0x01ff0000
 800145c:	01010280 	.word	0x01010280
 8001460:	580000c0 	.word	0x580000c0
 8001464:	5c001000 	.word	0x5c001000
 8001468:	ffff0000 	.word	0xffff0000
 800146c:	51008108 	.word	0x51008108
 8001470:	52004000 	.word	0x52004000

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800147a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800147e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001480:	bf00      	nop
 8001482:	4b36      	ldr	r3, [pc, #216]	; (800155c <main+0xe8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d004      	beq.n	8001498 <main+0x24>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	1e5a      	subs	r2, r3, #1
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	dcf4      	bgt.n	8001482 <main+0xe>
	if ( timeout < 0 )
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	da01      	bge.n	80014a2 <main+0x2e>
	{
		Error_Handler();
 800149e:	f000 fb97 	bl	8001bd0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a2:	f001 f9f9 	bl	8002898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a6:	f000 f861 	bl	800156c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014aa:	f000 f8e3 	bl	8001674 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <main+0xe8>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	4a29      	ldr	r2, [pc, #164]	; (800155c <main+0xe8>)
 80014b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <main+0xe8>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f004 fc0f 	bl	8005cf0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80014d2:	2100      	movs	r1, #0
 80014d4:	2000      	movs	r0, #0
 80014d6:	f004 fc25 	bl	8005d24 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80014da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014de:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80014e0:	bf00      	nop
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <main+0xe8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d104      	bne.n	80014f8 <main+0x84>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dcf4      	bgt.n	80014e2 <main+0x6e>
	if ( timeout < 0 )
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da01      	bge.n	8001502 <main+0x8e>
	{
		Error_Handler();
 80014fe:	f000 fb67 	bl	8001bd0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001502:	f000 fa35 	bl	8001970 <MX_GPIO_Init>
  MX_ETH_Init();
 8001506:	f000 f8e7 	bl	80016d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800150a:	f000 f989 	bl	8001820 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800150e:	f000 fa07 	bl	8001920 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001512:	f000 f9d3 	bl	80018bc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8001516:	f000 f92b 	bl	8001770 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 800151a:	f000 fc61 	bl	8001de0 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 800151e:	2000      	movs	r0, #0
 8001520:	f000 fe81 	bl	8002226 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8001524:	2000      	movs	r0, #0
 8001526:	f000 fe6d 	bl	8002204 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 800152a:	f001 fa3b 	bl	80029a4 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <main+0xec>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2bc8      	cmp	r3, #200	; 0xc8
 8001538:	d9f7      	bls.n	800152a <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 800153a:	f001 fa33 	bl	80029a4 <HAL_GetTick>
 800153e:	4603      	mov	r3, r0
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <main+0xec>)
 8001542:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <main+0xf0>)
 800154a:	f004 fbb6 	bl	8005cba <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 800154e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001552:	4905      	ldr	r1, [pc, #20]	; (8001568 <main+0xf4>)
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f935 	bl	80007c4 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 800155a:	e7e6      	b.n	800152a <main+0xb6>
 800155c:	58024400 	.word	0x58024400
 8001560:	24000c98 	.word	0x24000c98
 8001564:	58020400 	.word	0x58020400
 8001568:	24000964 	.word	0x24000964

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b09c      	sub	sp, #112	; 0x70
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	224c      	movs	r2, #76	; 0x4c
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f009 fcc4 	bl	800af08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2220      	movs	r2, #32
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f009 fcbe 	bl	800af08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800158c:	2004      	movs	r0, #4
 800158e:	f004 fd25 	bl	8005fdc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b34      	ldr	r3, [pc, #208]	; (8001668 <SystemClock_Config+0xfc>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	4a33      	ldr	r2, [pc, #204]	; (8001668 <SystemClock_Config+0xfc>)
 800159c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015a0:	6193      	str	r3, [r2, #24]
 80015a2:	4b31      	ldr	r3, [pc, #196]	; (8001668 <SystemClock_Config+0xfc>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <SystemClock_Config+0x100>)
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	4a2e      	ldr	r2, [pc, #184]	; (800166c <SystemClock_Config+0x100>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <SystemClock_Config+0x100>)
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015c4:	bf00      	nop
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <SystemClock_Config+0xfc>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d2:	d1f8      	bne.n	80015c6 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <SystemClock_Config+0x104>)
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f023 0303 	bic.w	r3, r3, #3
 80015dc:	4a24      	ldr	r2, [pc, #144]	; (8001670 <SystemClock_Config+0x104>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ee:	2302      	movs	r3, #2
 80015f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f2:	2302      	movs	r3, #2
 80015f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80015fa:	2378      	movs	r3, #120	; 0x78
 80015fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015fe:	2302      	movs	r3, #2
 8001600:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001602:	2302      	movs	r3, #2
 8001604:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001606:	2302      	movs	r3, #2
 8001608:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800160a:	230c      	movs	r3, #12
 800160c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800160e:	2300      	movs	r3, #0
 8001610:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	4618      	mov	r0, r3
 800161c:	f004 fd48 	bl	80060b0 <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001626:	f000 fad3 	bl	8001bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	233f      	movs	r3, #63	; 0x3f
 800162c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162e:	2303      	movs	r3, #3
 8001630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001636:	2308      	movs	r3, #8
 8001638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800163a:	2340      	movs	r3, #64	; 0x40
 800163c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800163e:	2340      	movs	r3, #64	; 0x40
 8001640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001646:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001648:	2340      	movs	r3, #64	; 0x40
 800164a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2104      	movs	r1, #4
 8001650:	4618      	mov	r0, r3
 8001652:	f005 f95b 	bl	800690c <HAL_RCC_ClockConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800165c:	f000 fab8 	bl	8001bd0 <Error_Handler>
  }
}
 8001660:	bf00      	nop
 8001662:	3770      	adds	r7, #112	; 0x70
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	58024800 	.word	0x58024800
 800166c:	58000400 	.word	0x58000400
 8001670:	58024400 	.word	0x58024400

08001674 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0b0      	sub	sp, #192	; 0xc0
 8001678:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	22bc      	movs	r2, #188	; 0xbc
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f009 fc41 	bl	800af08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8001686:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 800168a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800168c:	2301      	movs	r3, #1
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001690:	2318      	movs	r3, #24
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001694:	2302      	movs	r3, #2
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001698:	2304      	movs	r3, #4
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800169c:	2302      	movs	r3, #2
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80016a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80016ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b2:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80016b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4618      	mov	r0, r3
 80016c0:	f005 fcb0 	bl	8007024 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80016ca:	f000 fa81 	bl	8001bd0 <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	37c0      	adds	r7, #192	; 0xc0
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_ETH_Init+0x80>)
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <MX_ETH_Init+0x84>)
 80016e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <MX_ETH_Init+0x88>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_ETH_Init+0x88>)
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <MX_ETH_Init+0x88>)
 80016f0:	22e1      	movs	r2, #225	; 0xe1
 80016f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_ETH_Init+0x88>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <MX_ETH_Init+0x88>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_ETH_Init+0x88>)
 8001702:	2200      	movs	r2, #0
 8001704:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_ETH_Init+0x80>)
 8001708:	4a15      	ldr	r2, [pc, #84]	; (8001760 <MX_ETH_Init+0x88>)
 800170a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_ETH_Init+0x80>)
 800170e:	2201      	movs	r2, #1
 8001710:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_ETH_Init+0x80>)
 8001714:	4a13      	ldr	r2, [pc, #76]	; (8001764 <MX_ETH_Init+0x8c>)
 8001716:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_ETH_Init+0x80>)
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <MX_ETH_Init+0x90>)
 800171c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_ETH_Init+0x80>)
 8001720:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001724:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001726:	480c      	ldr	r0, [pc, #48]	; (8001758 <MX_ETH_Init+0x80>)
 8001728:	f003 fcc2 	bl	80050b0 <HAL_ETH_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001732:	f000 fa4d 	bl	8001bd0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001736:	2238      	movs	r2, #56	; 0x38
 8001738:	2100      	movs	r1, #0
 800173a:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_ETH_Init+0x94>)
 800173c:	f009 fbe4 	bl	800af08 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_ETH_Init+0x94>)
 8001742:	2221      	movs	r2, #33	; 0x21
 8001744:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_ETH_Init+0x94>)
 8001748:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800174c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_ETH_Init+0x94>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	240001a0 	.word	0x240001a0
 800175c:	40028000 	.word	0x40028000
 8001760:	24000c9c 	.word	0x24000c9c
 8001764:	240000e4 	.word	0x240000e4
 8001768:	24000084 	.word	0x24000084
 800176c:	24000168 	.word	0x24000168

08001770 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <MX_SPI3_Init+0xa8>)
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <MX_SPI3_Init+0xac>)
 8001778:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <MX_SPI3_Init+0xa8>)
 800177c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001780:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <MX_SPI3_Init+0xa8>)
 8001784:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001788:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <MX_SPI3_Init+0xa8>)
 800178c:	2207      	movs	r2, #7
 800178e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <MX_SPI3_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <MX_SPI3_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <MX_SPI3_Init+0xa8>)
 800179e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_SPI3_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_SPI3_Init+0xa8>)
 8001804:	f006 ff76 	bl	80086f4 <HAL_SPI_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800180e:	f000 f9df 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	24000250 	.word	0x24000250
 800181c:	40003c00 	.word	0x40003c00

08001820 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 8001826:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <MX_USART3_UART_Init+0x94>)
 8001828:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 800182c:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <MX_USART3_UART_Init+0x98>)
 800182e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 8001844:	220c      	movs	r2, #12
 8001846:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 8001862:	2200      	movs	r2, #0
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001866:	4812      	ldr	r0, [pc, #72]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 8001868:	f007 fb25 	bl	8008eb6 <HAL_UART_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001872:	f000 f9ad 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 800187a:	f008 ff47 	bl	800a70c <HAL_UARTEx_SetTxFifoThreshold>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001884:	f000 f9a4 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	4809      	ldr	r0, [pc, #36]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 800188c:	f008 ff7c 	bl	800a788 <HAL_UARTEx_SetRxFifoThreshold>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001896:	f000 f99b 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_USART3_UART_Init+0x90>)
 800189c:	f008 fefd 	bl	800a69a <HAL_UARTEx_DisableFifoMode>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80018a6:	f000 f993 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	240002d8 	.word	0x240002d8
 80018b4:	40004800 	.word	0x40004800
 80018b8:	0005dc00 	.word	0x0005dc00

080018bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018c2:	4a16      	ldr	r2, [pc, #88]	; (800191c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80018c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018c8:	2209      	movs	r2, #9
 80018ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018da:	2202      	movs	r2, #2
 80018dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001904:	f004 fa22 	bl	8005d4c <HAL_PCD_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800190e:	f000 f95f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	24000458 	.word	0x24000458
 800191c:	40080000 	.word	0x40080000

08001920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_DMA_Init+0x4c>)
 8001928:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800192c:	4a0f      	ldr	r2, [pc, #60]	; (800196c <MX_DMA_Init+0x4c>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <MX_DMA_Init+0x4c>)
 8001938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	200c      	movs	r0, #12
 800194a:	f001 f956 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800194e:	200c      	movs	r0, #12
 8001950:	f001 f96d 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	200f      	movs	r0, #15
 800195a:	f001 f94e 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800195e:	200f      	movs	r0, #15
 8001960:	f001 f965 	bl	8002c2e <HAL_NVIC_EnableIRQ>

}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	58024400 	.word	0x58024400

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	4b8a      	ldr	r3, [pc, #552]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198c:	4a88      	ldr	r2, [pc, #544]	; (8001bb0 <MX_GPIO_Init+0x240>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001996:	4b86      	ldr	r3, [pc, #536]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a4:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <MX_GPIO_Init+0x240>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019aa:	4a81      	ldr	r2, [pc, #516]	; (8001bb0 <MX_GPIO_Init+0x240>)
 80019ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b4:	4b7e      	ldr	r3, [pc, #504]	; (8001bb0 <MX_GPIO_Init+0x240>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <MX_GPIO_Init+0x240>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	4a79      	ldr	r2, [pc, #484]	; (8001bb0 <MX_GPIO_Init+0x240>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d2:	4b77      	ldr	r3, [pc, #476]	; (8001bb0 <MX_GPIO_Init+0x240>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	4b73      	ldr	r3, [pc, #460]	; (8001bb0 <MX_GPIO_Init+0x240>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	4a72      	ldr	r2, [pc, #456]	; (8001bb0 <MX_GPIO_Init+0x240>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <MX_GPIO_Init+0x240>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fe:	4b6c      	ldr	r3, [pc, #432]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a04:	4a6a      	ldr	r2, [pc, #424]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a06:	f043 0320 	orr.w	r3, r3, #32
 8001a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0e:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a1c:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a22:	4a63      	ldr	r2, [pc, #396]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2c:	4b60      	ldr	r3, [pc, #384]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	4a5b      	ldr	r2, [pc, #364]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4a:	4b59      	ldr	r3, [pc, #356]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a58:	4b55      	ldr	r3, [pc, #340]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5e:	4a54      	ldr	r2, [pc, #336]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a68:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <MX_GPIO_Init+0x240>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8001a76:	2201      	movs	r2, #1
 8001a78:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8001a7c:	484d      	ldr	r0, [pc, #308]	; (8001bb4 <MX_GPIO_Init+0x244>)
 8001a7e:	f004 f903 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a88:	484a      	ldr	r0, [pc, #296]	; (8001bb4 <MX_GPIO_Init+0x244>)
 8001a8a:	f004 f8fd 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a94:	4848      	ldr	r0, [pc, #288]	; (8001bb8 <MX_GPIO_Init+0x248>)
 8001a96:	f004 f8f7 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa0:	4846      	ldr	r0, [pc, #280]	; (8001bbc <MX_GPIO_Init+0x24c>)
 8001aa2:	f004 f8f1 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aac:	4844      	ldr	r0, [pc, #272]	; (8001bc0 <MX_GPIO_Init+0x250>)
 8001aae:	f004 f8eb 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8001ab2:	230d      	movs	r3, #13
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	483f      	ldr	r0, [pc, #252]	; (8001bc4 <MX_GPIO_Init+0x254>)
 8001ac6:	f003 ff17 	bl	80058f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001aca:	2308      	movs	r3, #8
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ada:	4619      	mov	r1, r3
 8001adc:	483a      	ldr	r0, [pc, #232]	; (8001bc8 <MX_GPIO_Init+0x258>)
 8001ade:	f003 ff0b 	bl	80058f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	4830      	ldr	r0, [pc, #192]	; (8001bb8 <MX_GPIO_Init+0x248>)
 8001af6:	f003 feff 	bl	80058f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8001afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	482f      	ldr	r0, [pc, #188]	; (8001bcc <MX_GPIO_Init+0x25c>)
 8001b10:	f003 fef2 	bl	80058f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8001b14:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4821      	ldr	r0, [pc, #132]	; (8001bb4 <MX_GPIO_Init+0x244>)
 8001b2e:	f003 fee3 	bl	80058f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001b32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <MX_GPIO_Init+0x248>)
 8001b4c:	f003 fed4 	bl	80058f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	4619      	mov	r1, r3
 8001b68:	4814      	ldr	r0, [pc, #80]	; (8001bbc <MX_GPIO_Init+0x24c>)
 8001b6a:	f003 fec5 	bl	80058f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	4619      	mov	r1, r3
 8001b82:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <MX_GPIO_Init+0x250>)
 8001b84:	f003 feb8 	bl	80058f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <MX_GPIO_Init+0x250>)
 8001ba2:	f003 fea9 	bl	80058f8 <HAL_GPIO_Init>

}
 8001ba6:	bf00      	nop
 8001ba8:	3738      	adds	r7, #56	; 0x38
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	58021000 	.word	0x58021000
 8001bb8:	58020400 	.word	0x58020400
 8001bbc:	58020c00 	.word	0x58020c00
 8001bc0:	58021800 	.word	0x58021800
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	58020000 	.word	0x58020000
 8001bcc:	58021400 	.word	0x58021400

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <Error_Handler+0x8>
	...

08001bdc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001be6:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <ST7735_Select+0x14>)
 8001be8:	f004 f84e 	bl	8005c88 <HAL_GPIO_WritePin>
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	58021000 	.word	0x58021000

08001bf4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bfe:	4802      	ldr	r0, [pc, #8]	; (8001c08 <ST7735_Unselect+0x14>)
 8001c00:	f004 f842 	bl	8005c88 <HAL_GPIO_WritePin>
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	58021000 	.word	0x58021000

08001c0c <ST7735_Select1>:
static void ST7735_Select1() {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c16:	4802      	ldr	r0, [pc, #8]	; (8001c20 <ST7735_Select1+0x14>)
 8001c18:	f004 f836 	bl	8005c88 <HAL_GPIO_WritePin>
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	58021000 	.word	0x58021000

08001c24 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c2e:	4802      	ldr	r0, [pc, #8]	; (8001c38 <ST7735_Unselect1+0x14>)
 8001c30:	f004 f82a 	bl	8005c88 <HAL_GPIO_WritePin>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	58021000 	.word	0x58021000

08001c3c <ST7735_Reset>:

static void ST7735_Reset() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <ST7735_Reset+0x28>)
 8001c48:	f004 f81e 	bl	8005c88 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001c4c:	2005      	movs	r0, #5
 8001c4e:	f000 feb5 	bl	80029bc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <ST7735_Reset+0x28>)
 8001c5a:	f004 f815 	bl	8005c88 <HAL_GPIO_WritePin>
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	58021000 	.word	0x58021000

08001c68 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c78:	4806      	ldr	r0, [pc, #24]	; (8001c94 <ST7735_WriteCommand+0x2c>)
 8001c7a:	f004 f805 	bl	8005c88 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001c7e:	1df9      	adds	r1, r7, #7
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
 8001c84:	2201      	movs	r2, #1
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <ST7735_WriteCommand+0x30>)
 8001c88:	f006 fe3a 	bl	8008900 <HAL_SPI_Transmit>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	58021800 	.word	0x58021800
 8001c98:	24000250 	.word	0x24000250

08001c9c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	4807      	ldr	r0, [pc, #28]	; (8001ccc <ST7735_WriteData+0x30>)
 8001cae:	f003 ffeb 	bl	8005c88 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <ST7735_WriteData+0x34>)
 8001cbe:	f006 fe1f 	bl	8008900 <HAL_SPI_Transmit>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	58021800 	.word	0x58021800
 8001cd0:	24000250 	.word	0x24000250

08001cd4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001ce6:	e034      	b.n	8001d52 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001cf2:	7afb      	ldrb	r3, [r7, #11]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ffb7 	bl	8001c68 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001d04:	7abb      	ldrb	r3, [r7, #10]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001d0e:	7abb      	ldrb	r3, [r7, #10]
 8001d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d14:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001d16:	7abb      	ldrb	r3, [r7, #10]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001d1c:	7abb      	ldrb	r3, [r7, #10]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ffbb 	bl	8001c9c <ST7735_WriteData>
            addr += numArgs;
 8001d26:	7abb      	ldrb	r3, [r7, #10]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001d2e:	89bb      	ldrh	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00e      	beq.n	8001d52 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001d3e:	89bb      	ldrh	r3, [r7, #12]
 8001d40:	2bff      	cmp	r3, #255	; 0xff
 8001d42:	d102      	bne.n	8001d4a <ST7735_ExecuteCommandList+0x76>
 8001d44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d48:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001d4a:	89bb      	ldrh	r3, [r7, #12]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fe35 	bl	80029bc <HAL_Delay>
    while(numCommands--) {
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	1e5a      	subs	r2, r3, #1
 8001d56:	73fa      	strb	r2, [r7, #15]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1c5      	bne.n	8001ce8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001d66:	b590      	push	{r4, r7, lr}
 8001d68:	b085      	sub	sp, #20
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	4608      	mov	r0, r1
 8001d70:	4611      	mov	r1, r2
 8001d72:	461a      	mov	r2, r3
 8001d74:	4623      	mov	r3, r4
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71bb      	strb	r3, [r7, #6]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	717b      	strb	r3, [r7, #5]
 8001d80:	4613      	mov	r3, r2
 8001d82:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001d84:	202a      	movs	r0, #42	; 0x2a
 8001d86:	f7ff ff6f 	bl	8001c68 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	733b      	strb	r3, [r7, #12]
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	3302      	adds	r3, #2
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	737b      	strb	r3, [r7, #13]
 8001d96:	2300      	movs	r3, #0
 8001d98:	73bb      	strb	r3, [r7, #14]
 8001d9a:	797b      	ldrb	r3, [r7, #5]
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	2104      	movs	r1, #4
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff77 	bl	8001c9c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001dae:	202b      	movs	r0, #43	; 0x2b
 8001db0:	f7ff ff5a 	bl	8001c68 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001db4:	79bb      	ldrb	r3, [r7, #6]
 8001db6:	3301      	adds	r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001dbc:	793b      	ldrb	r3, [r7, #4]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2104      	movs	r1, #4
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff66 	bl	8001c9c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001dd0:	202c      	movs	r0, #44	; 0x2c
 8001dd2:	f7ff ff49 	bl	8001c68 <ST7735_WriteCommand>
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd90      	pop	{r4, r7, pc}
	...

08001de0 <ST7735_Init>:

void ST7735_Init() {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001de4:	f7ff fefa 	bl	8001bdc <ST7735_Select>
    ST7735_Select1();
 8001de8:	f7ff ff10 	bl	8001c0c <ST7735_Select1>
    ST7735_Reset();
 8001dec:	f7ff ff26 	bl	8001c3c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001df0:	4807      	ldr	r0, [pc, #28]	; (8001e10 <ST7735_Init+0x30>)
 8001df2:	f7ff ff6f 	bl	8001cd4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <ST7735_Init+0x34>)
 8001df8:	f7ff ff6c 	bl	8001cd4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001dfc:	4806      	ldr	r0, [pc, #24]	; (8001e18 <ST7735_Init+0x38>)
 8001dfe:	f7ff ff69 	bl	8001cd4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001e02:	f7ff fef7 	bl	8001bf4 <ST7735_Unselect>
    ST7735_Unselect1();
 8001e06:	f7ff ff0d 	bl	8001c24 <ST7735_Unselect1>
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	0800cda8 	.word	0x0800cda8
 8001e14:	0800cde4 	.word	0x0800cde4
 8001e18:	0800cdf4 	.word	0x0800cdf4

08001e1c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	b590      	push	{r4, r7, lr}
 8001e20:	b089      	sub	sp, #36	; 0x24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	80bb      	strh	r3, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	b2d8      	uxtb	r0, r3
 8001e36:	88bb      	ldrh	r3, [r7, #4]
 8001e38:	b2d9      	uxtb	r1, r3
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e42:	4413      	add	r3, r2
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b2dc      	uxtb	r4, r3
 8001e4a:	88bb      	ldrh	r3, [r7, #4]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e52:	4413      	add	r3, r2
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	f7ff ff83 	bl	8001d66 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	e043      	b.n	8001eee <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	3b20      	subs	r3, #32
 8001e6c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4619      	mov	r1, r3
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	440b      	add	r3, r1
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	e029      	b.n	8001edc <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00e      	beq.n	8001eb6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001e98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	743b      	strb	r3, [r7, #16]
 8001ea2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	2102      	movs	r1, #2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fef4 	bl	8001c9c <ST7735_WriteData>
 8001eb4:	e00f      	b.n	8001ed6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001eb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	733b      	strb	r3, [r7, #12]
 8001ec2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	2102      	movs	r1, #2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fee3 	bl	8001c9c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d3cf      	bcc.n	8001e88 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3301      	adds	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d3b5      	bcc.n	8001e66 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
 8001efe:	3724      	adds	r7, #36	; 0x24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f06:	b002      	add	sp, #8
 8001f08:	4770      	bx	lr

08001f0a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af04      	add	r7, sp, #16
 8001f12:	603a      	str	r2, [r7, #0]
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001f1e:	f7ff fe5d 	bl	8001bdc <ST7735_Select>

    while(*str) {
 8001f22:	e02d      	b.n	8001f80 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	7d3a      	ldrb	r2, [r7, #20]
 8001f28:	4413      	add	r3, r2
 8001f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f2c:	dd13      	ble.n	8001f56 <ST7735_WriteString+0x4c>
            x = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001f32:	7d7b      	ldrb	r3, [r7, #21]
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	88bb      	ldrh	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001f3c:	88bb      	ldrh	r3, [r7, #4]
 8001f3e:	7d7a      	ldrb	r2, [r7, #21]
 8001f40:	4413      	add	r3, r2
 8001f42:	2b7f      	cmp	r3, #127	; 0x7f
 8001f44:	dc21      	bgt.n	8001f8a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d103      	bne.n	8001f56 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	603b      	str	r3, [r7, #0]
                continue;
 8001f54:	e014      	b.n	8001f80 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	88b9      	ldrh	r1, [r7, #4]
 8001f5c:	88f8      	ldrh	r0, [r7, #6]
 8001f5e:	8c3b      	ldrh	r3, [r7, #32]
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	8bbb      	ldrh	r3, [r7, #28]
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f7ff ff56 	bl	8001e1c <ST7735_WriteChar>
        x += font.width;
 8001f70:	7d3b      	ldrb	r3, [r7, #20]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	4413      	add	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
        str++;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1cd      	bne.n	8001f24 <ST7735_WriteString+0x1a>
 8001f88:	e000      	b.n	8001f8c <ST7735_WriteString+0x82>
                break;
 8001f8a:	bf00      	nop
    }

    ST7735_Unselect();
 8001f8c:	f7ff fe32 	bl	8001bf4 <ST7735_Unselect>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f9a:	b002      	add	sp, #8
 8001f9c:	4770      	bx	lr

08001f9e <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af04      	add	r7, sp, #16
 8001fa6:	603a      	str	r2, [r7, #0]
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	4603      	mov	r3, r0
 8001fac:	80fb      	strh	r3, [r7, #6]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	80bb      	strh	r3, [r7, #4]
    ST7735_Select1();
 8001fb2:	f7ff fe2b 	bl	8001c0c <ST7735_Select1>

    while(*str) {
 8001fb6:	e02d      	b.n	8002014 <ST7735_WriteString1+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	7d3a      	ldrb	r2, [r7, #20]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8001fc0:	dd13      	ble.n	8001fea <ST7735_WriteString1+0x4c>
            x = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001fc6:	7d7b      	ldrb	r3, [r7, #21]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	88bb      	ldrh	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001fd0:	88bb      	ldrh	r3, [r7, #4]
 8001fd2:	7d7a      	ldrb	r2, [r7, #21]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001fd8:	dc21      	bgt.n	800201e <ST7735_WriteString1+0x80>
                break;
            }

            if(*str == ' ') {
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	d103      	bne.n	8001fea <ST7735_WriteString1+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	603b      	str	r3, [r7, #0]
                continue;
 8001fe8:	e014      	b.n	8002014 <ST7735_WriteString1+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	88b9      	ldrh	r1, [r7, #4]
 8001ff0:	88f8      	ldrh	r0, [r7, #6]
 8001ff2:	8c3b      	ldrh	r3, [r7, #32]
 8001ff4:	9302      	str	r3, [sp, #8]
 8001ff6:	8bbb      	ldrh	r3, [r7, #28]
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f7ff ff0c 	bl	8001e1c <ST7735_WriteChar>
        x += font.width;
 8002004:	7d3b      	ldrb	r3, [r7, #20]
 8002006:	b29a      	uxth	r2, r3
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	4413      	add	r3, r2
 800200c:	80fb      	strh	r3, [r7, #6]
        str++;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1cd      	bne.n	8001fb8 <ST7735_WriteString1+0x1a>
 800201c:	e000      	b.n	8002020 <ST7735_WriteString1+0x82>
                break;
 800201e:	bf00      	nop
    }

    ST7735_Unselect1();
 8002020:	f7ff fe00 	bl	8001c24 <ST7735_Unselect1>
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800202e:	b002      	add	sp, #8
 8002030:	4770      	bx	lr
	...

08002034 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	4604      	mov	r4, r0
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4623      	mov	r3, r4
 8002044:	80fb      	strh	r3, [r7, #6]
 8002046:	4603      	mov	r3, r0
 8002048:	80bb      	strh	r3, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	807b      	strh	r3, [r7, #2]
 800204e:	4613      	mov	r3, r2
 8002050:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	2b7f      	cmp	r3, #127	; 0x7f
 8002056:	d858      	bhi.n	800210a <ST7735_FillRectangle+0xd6>
 8002058:	88bb      	ldrh	r3, [r7, #4]
 800205a:	2b7f      	cmp	r3, #127	; 0x7f
 800205c:	d855      	bhi.n	800210a <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800205e:	88fa      	ldrh	r2, [r7, #6]
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	4413      	add	r3, r2
 8002064:	2b80      	cmp	r3, #128	; 0x80
 8002066:	dd03      	ble.n	8002070 <ST7735_FillRectangle+0x3c>
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800206e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002070:	88ba      	ldrh	r2, [r7, #4]
 8002072:	883b      	ldrh	r3, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	2b80      	cmp	r3, #128	; 0x80
 8002078:	dd03      	ble.n	8002082 <ST7735_FillRectangle+0x4e>
 800207a:	88bb      	ldrh	r3, [r7, #4]
 800207c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002080:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002082:	f7ff fdab 	bl	8001bdc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	b2d8      	uxtb	r0, r3
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	b2d9      	uxtb	r1, r3
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4413      	add	r3, r2
 8002098:	b2db      	uxtb	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b2dc      	uxtb	r4, r3
 800209e:	88bb      	ldrh	r3, [r7, #4]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	883b      	ldrh	r3, [r7, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4622      	mov	r2, r4
 80020b0:	f7ff fe59 	bl	8001d66 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80020b4:	8c3b      	ldrh	r3, [r7, #32]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	733b      	strb	r3, [r7, #12]
 80020be:	8c3b      	ldrh	r3, [r7, #32]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ca:	4812      	ldr	r0, [pc, #72]	; (8002114 <ST7735_FillRectangle+0xe0>)
 80020cc:	f003 fddc 	bl	8005c88 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80020d0:	883b      	ldrh	r3, [r7, #0]
 80020d2:	80bb      	strh	r3, [r7, #4]
 80020d4:	e013      	b.n	80020fe <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	80fb      	strh	r3, [r7, #6]
 80020da:	e00a      	b.n	80020f2 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80020dc:	f107 010c 	add.w	r1, r7, #12
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	2202      	movs	r2, #2
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <ST7735_FillRectangle+0xe4>)
 80020e8:	f006 fc0a 	bl	8008900 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	80fb      	strh	r3, [r7, #6]
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f1      	bne.n	80020dc <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80020f8:	88bb      	ldrh	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	80bb      	strh	r3, [r7, #4]
 80020fe:	88bb      	ldrh	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e8      	bne.n	80020d6 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8002104:	f7ff fd76 	bl	8001bf4 <ST7735_Unselect>
 8002108:	e000      	b.n	800210c <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800210a:	bf00      	nop
}
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	bf00      	nop
 8002114:	58021800 	.word	0x58021800
 8002118:	24000250 	.word	0x24000250

0800211c <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	4604      	mov	r4, r0
 8002124:	4608      	mov	r0, r1
 8002126:	4611      	mov	r1, r2
 8002128:	461a      	mov	r2, r3
 800212a:	4623      	mov	r3, r4
 800212c:	80fb      	strh	r3, [r7, #6]
 800212e:	4603      	mov	r3, r0
 8002130:	80bb      	strh	r3, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	807b      	strh	r3, [r7, #2]
 8002136:	4613      	mov	r3, r2
 8002138:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	2b7f      	cmp	r3, #127	; 0x7f
 800213e:	d858      	bhi.n	80021f2 <ST7735_FillRectangle1+0xd6>
 8002140:	88bb      	ldrh	r3, [r7, #4]
 8002142:	2b7f      	cmp	r3, #127	; 0x7f
 8002144:	d855      	bhi.n	80021f2 <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002146:	88fa      	ldrh	r2, [r7, #6]
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	4413      	add	r3, r2
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	dd03      	ble.n	8002158 <ST7735_FillRectangle1+0x3c>
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002156:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002158:	88ba      	ldrh	r2, [r7, #4]
 800215a:	883b      	ldrh	r3, [r7, #0]
 800215c:	4413      	add	r3, r2
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	dd03      	ble.n	800216a <ST7735_FillRectangle1+0x4e>
 8002162:	88bb      	ldrh	r3, [r7, #4]
 8002164:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002168:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 800216a:	f7ff fd4f 	bl	8001c0c <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	b2d8      	uxtb	r0, r3
 8002172:	88bb      	ldrh	r3, [r7, #4]
 8002174:	b2d9      	uxtb	r1, r3
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4413      	add	r3, r2
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b2dc      	uxtb	r4, r3
 8002186:	88bb      	ldrh	r3, [r7, #4]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	883b      	ldrh	r3, [r7, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4413      	add	r3, r2
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	4622      	mov	r2, r4
 8002198:	f7ff fde5 	bl	8001d66 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800219c:	8c3b      	ldrh	r3, [r7, #32]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	733b      	strb	r3, [r7, #12]
 80021a6:	8c3b      	ldrh	r3, [r7, #32]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b2:	4812      	ldr	r0, [pc, #72]	; (80021fc <ST7735_FillRectangle1+0xe0>)
 80021b4:	f003 fd68 	bl	8005c88 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80021b8:	883b      	ldrh	r3, [r7, #0]
 80021ba:	80bb      	strh	r3, [r7, #4]
 80021bc:	e013      	b.n	80021e6 <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	80fb      	strh	r3, [r7, #6]
 80021c2:	e00a      	b.n	80021da <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80021c4:	f107 010c 	add.w	r1, r7, #12
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	2202      	movs	r2, #2
 80021ce:	480c      	ldr	r0, [pc, #48]	; (8002200 <ST7735_FillRectangle1+0xe4>)
 80021d0:	f006 fb96 	bl	8008900 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	80fb      	strh	r3, [r7, #6]
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f1      	bne.n	80021c4 <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	80bb      	strh	r3, [r7, #4]
 80021e6:	88bb      	ldrh	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e8      	bne.n	80021be <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 80021ec:	f7ff fd1a 	bl	8001c24 <ST7735_Unselect1>
 80021f0:	e000      	b.n	80021f4 <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80021f2:	bf00      	nop
}
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd90      	pop	{r4, r7, pc}
 80021fa:	bf00      	nop
 80021fc:	58021800 	.word	0x58021800
 8002200:	24000250 	.word	0x24000250

08002204 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af02      	add	r7, sp, #8
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	2100      	movs	r1, #0
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff ff0b 	bl	8002034 <ST7735_FillRectangle>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af02      	add	r7, sp, #8
 800222c:	4603      	mov	r3, r0
 800222e:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	2100      	movs	r1, #0
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff ff6e 	bl	800211c <ST7735_FillRectangle1>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_MspInit+0x30>)
 8002250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002254:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_MspInit+0x30>)
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_MspInit+0x30>)
 8002260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	58024400 	.word	0x58024400

0800227c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08e      	sub	sp, #56	; 0x38
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a59      	ldr	r2, [pc, #356]	; (8002400 <HAL_ETH_MspInit+0x184>)
 800229a:	4293      	cmp	r3, r2
 800229c:	f040 80ab 	bne.w	80023f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80022a0:	4b58      	ldr	r3, [pc, #352]	; (8002404 <HAL_ETH_MspInit+0x188>)
 80022a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022a6:	4a57      	ldr	r2, [pc, #348]	; (8002404 <HAL_ETH_MspInit+0x188>)
 80022a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022b0:	4b54      	ldr	r3, [pc, #336]	; (8002404 <HAL_ETH_MspInit+0x188>)
 80022b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80022be:	4b51      	ldr	r3, [pc, #324]	; (8002404 <HAL_ETH_MspInit+0x188>)
 80022c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022c4:	4a4f      	ldr	r2, [pc, #316]	; (8002404 <HAL_ETH_MspInit+0x188>)
 80022c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022ce:	4b4d      	ldr	r3, [pc, #308]	; (8002404 <HAL_ETH_MspInit+0x188>)
 80022d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_ETH_MspInit+0x188>)
 80022de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022e2:	4a48      	ldr	r2, [pc, #288]	; (8002404 <HAL_ETH_MspInit+0x188>)
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022ec:	4b45      	ldr	r3, [pc, #276]	; (8002404 <HAL_ETH_MspInit+0x188>)
 80022ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fa:	4b42      	ldr	r3, [pc, #264]	; (8002404 <HAL_ETH_MspInit+0x188>)
 80022fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002300:	4a40      	ldr	r2, [pc, #256]	; (8002404 <HAL_ETH_MspInit+0x188>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800230a:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <HAL_ETH_MspInit+0x188>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002318:	4b3a      	ldr	r3, [pc, #232]	; (8002404 <HAL_ETH_MspInit+0x188>)
 800231a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231e:	4a39      	ldr	r2, [pc, #228]	; (8002404 <HAL_ETH_MspInit+0x188>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <HAL_ETH_MspInit+0x188>)
 800232a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <HAL_ETH_MspInit+0x188>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233c:	4a31      	ldr	r2, [pc, #196]	; (8002404 <HAL_ETH_MspInit+0x188>)
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <HAL_ETH_MspInit+0x188>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_ETH_MspInit+0x188>)
 8002356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235a:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <HAL_ETH_MspInit+0x188>)
 800235c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_ETH_MspInit+0x188>)
 8002366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002372:	2332      	movs	r3, #50	; 0x32
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002382:	230b      	movs	r3, #11
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238a:	4619      	mov	r1, r3
 800238c:	481e      	ldr	r0, [pc, #120]	; (8002408 <HAL_ETH_MspInit+0x18c>)
 800238e:	f003 fab3 	bl	80058f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002392:	2386      	movs	r3, #134	; 0x86
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023a2:	230b      	movs	r3, #11
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023aa:	4619      	mov	r1, r3
 80023ac:	4817      	ldr	r0, [pc, #92]	; (800240c <HAL_ETH_MspInit+0x190>)
 80023ae:	f003 faa3 	bl	80058f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023c4:	230b      	movs	r3, #11
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	4619      	mov	r1, r3
 80023ce:	4810      	ldr	r0, [pc, #64]	; (8002410 <HAL_ETH_MspInit+0x194>)
 80023d0:	f003 fa92 	bl	80058f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80023d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023e6:	230b      	movs	r3, #11
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ee:	4619      	mov	r1, r3
 80023f0:	4808      	ldr	r0, [pc, #32]	; (8002414 <HAL_ETH_MspInit+0x198>)
 80023f2:	f003 fa81 	bl	80058f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80023f6:	bf00      	nop
 80023f8:	3738      	adds	r7, #56	; 0x38
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40028000 	.word	0x40028000
 8002404:	58024400 	.word	0x58024400
 8002408:	58020800 	.word	0x58020800
 800240c:	58020000 	.word	0x58020000
 8002410:	58020400 	.word	0x58020400
 8002414:	58021800 	.word	0x58021800

08002418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <HAL_SPI_MspInit+0xc8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d14d      	bne.n	80024d6 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_SPI_MspInit+0xcc>)
 800243c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002440:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <HAL_SPI_MspInit+0xcc>)
 8002442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002446:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_SPI_MspInit+0xcc>)
 800244c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002458:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_SPI_MspInit+0xcc>)
 800245a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245e:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <HAL_SPI_MspInit+0xcc>)
 8002460:	f043 0302 	orr.w	r3, r3, #2
 8002464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002468:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <HAL_SPI_MspInit+0xcc>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002476:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <HAL_SPI_MspInit+0xcc>)
 8002478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <HAL_SPI_MspInit+0xcc>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <HAL_SPI_MspInit+0xcc>)
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002494:	2304      	movs	r3, #4
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800249c:	2302      	movs	r3, #2
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80024a4:	2307      	movs	r3, #7
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	480e      	ldr	r0, [pc, #56]	; (80024e8 <HAL_SPI_MspInit+0xd0>)
 80024b0:	f003 fa22 	bl	80058f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024be:	2302      	movs	r3, #2
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024c6:	2306      	movs	r3, #6
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	4806      	ldr	r0, [pc, #24]	; (80024ec <HAL_SPI_MspInit+0xd4>)
 80024d2:	f003 fa11 	bl	80058f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024d6:	bf00      	nop
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40003c00 	.word	0x40003c00
 80024e4:	58024400 	.word	0x58024400
 80024e8:	58020400 	.word	0x58020400
 80024ec:	58020800 	.word	0x58020800

080024f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0b8      	sub	sp, #224	; 0xe0
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	22bc      	movs	r2, #188	; 0xbc
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f008 fcf9 	bl	800af08 <memset>
  if(huart->Instance==USART3)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a57      	ldr	r2, [pc, #348]	; (8002678 <HAL_UART_MspInit+0x188>)
 800251c:	4293      	cmp	r3, r2
 800251e:	f040 80a6 	bne.w	800266e <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002522:	2302      	movs	r3, #2
 8002524:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	4618      	mov	r0, r3
 8002532:	f004 fd77 	bl	8007024 <HAL_RCCEx_PeriphCLKConfig>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800253c:	f7ff fb48 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002540:	4b4e      	ldr	r3, [pc, #312]	; (800267c <HAL_UART_MspInit+0x18c>)
 8002542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002546:	4a4d      	ldr	r2, [pc, #308]	; (800267c <HAL_UART_MspInit+0x18c>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002550:	4b4a      	ldr	r3, [pc, #296]	; (800267c <HAL_UART_MspInit+0x18c>)
 8002552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_UART_MspInit+0x18c>)
 8002560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002564:	4a45      	ldr	r2, [pc, #276]	; (800267c <HAL_UART_MspInit+0x18c>)
 8002566:	f043 0308 	orr.w	r3, r3, #8
 800256a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_UART_MspInit+0x18c>)
 8002570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800257c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002596:	2307      	movs	r3, #7
 8002598:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025a0:	4619      	mov	r1, r3
 80025a2:	4837      	ldr	r0, [pc, #220]	; (8002680 <HAL_UART_MspInit+0x190>)
 80025a4:	f003 f9a8 	bl	80058f8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025aa:	4a37      	ldr	r2, [pc, #220]	; (8002688 <HAL_UART_MspInit+0x198>)
 80025ac:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80025ae:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025b0:	222d      	movs	r2, #45	; 0x2d
 80025b2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b4:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ba:	4b32      	ldr	r3, [pc, #200]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025bc:	2200      	movs	r2, #0
 80025be:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025c0:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025da:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025dc:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80025e8:	4826      	ldr	r0, [pc, #152]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025ea:	f000 fb3b 	bl	8002c64 <HAL_DMA_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80025f4:	f7ff faec 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_UART_MspInit+0x194>)
 80025fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80025fe:	4a21      	ldr	r2, [pc, #132]	; (8002684 <HAL_UART_MspInit+0x194>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002604:	4b21      	ldr	r3, [pc, #132]	; (800268c <HAL_UART_MspInit+0x19c>)
 8002606:	4a22      	ldr	r2, [pc, #136]	; (8002690 <HAL_UART_MspInit+0x1a0>)
 8002608:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_UART_MspInit+0x19c>)
 800260c:	222e      	movs	r2, #46	; 0x2e
 800260e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_UART_MspInit+0x19c>)
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_UART_MspInit+0x19c>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_UART_MspInit+0x19c>)
 800261e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002622:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_UART_MspInit+0x19c>)
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_UART_MspInit+0x19c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_UART_MspInit+0x19c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_UART_MspInit+0x19c>)
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_UART_MspInit+0x19c>)
 800263e:	2200      	movs	r2, #0
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002642:	4812      	ldr	r0, [pc, #72]	; (800268c <HAL_UART_MspInit+0x19c>)
 8002644:	f000 fb0e 	bl	8002c64 <HAL_DMA_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800264e:	f7ff fabf 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <HAL_UART_MspInit+0x19c>)
 8002656:	679a      	str	r2, [r3, #120]	; 0x78
 8002658:	4a0c      	ldr	r2, [pc, #48]	; (800268c <HAL_UART_MspInit+0x19c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	2027      	movs	r0, #39	; 0x27
 8002664:	f000 fac9 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002668:	2027      	movs	r0, #39	; 0x27
 800266a:	f000 fae0 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800266e:	bf00      	nop
 8002670:	37e0      	adds	r7, #224	; 0xe0
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40004800 	.word	0x40004800
 800267c:	58024400 	.word	0x58024400
 8002680:	58020c00 	.word	0x58020c00
 8002684:	24000368 	.word	0x24000368
 8002688:	40020028 	.word	0x40020028
 800268c:	240003e0 	.word	0x240003e0
 8002690:	40020070 	.word	0x40020070

08002694 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_PCD_MspInit+0xa8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d13d      	bne.n	8002732 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80026b6:	f003 fceb 	bl	8006090 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_PCD_MspInit+0xac>)
 80026bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c0:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_PCD_MspInit+0xac>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_PCD_MspInit+0xac>)
 80026cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80026d8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80026dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80026ea:	230a      	movs	r3, #10
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	4813      	ldr	r0, [pc, #76]	; (8002744 <HAL_PCD_MspInit+0xb0>)
 80026f6:	f003 f8ff 	bl	80058f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <HAL_PCD_MspInit+0xb0>)
 8002710:	f003 f8f2 	bl	80058f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_PCD_MspInit+0xac>)
 8002716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_PCD_MspInit+0xac>)
 800271c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002720:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_PCD_MspInit+0xac>)
 8002726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800272a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40080000 	.word	0x40080000
 8002740:	58024400 	.word	0x58024400
 8002744:	58020000 	.word	0x58020000

08002748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800274c:	e7fe      	b.n	800274c <NMI_Handler+0x4>

0800274e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <HardFault_Handler+0x4>

08002754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <MemManage_Handler+0x4>

0800275a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <BusFault_Handler+0x4>

08002760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <UsageFault_Handler+0x4>

08002766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002794:	f000 f8f2 	bl	800297c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <DMA1_Stream1_IRQHandler+0x10>)
 80027a2:	f001 fb1f 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	24000368 	.word	0x24000368

080027b0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <DMA1_Stream4_IRQHandler+0x10>)
 80027b6:	f001 fb15 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	240003e0 	.word	0x240003e0

080027c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <USART3_IRQHandler+0x10>)
 80027ca:	f006 fbc5 	bl	8008f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	240002d8 	.word	0x240002d8

080027d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e0:	4a14      	ldr	r2, [pc, #80]	; (8002834 <_sbrk+0x5c>)
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <_sbrk+0x60>)
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <_sbrk+0x64>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	; (8002840 <_sbrk+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d207      	bcs.n	8002818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002808:	f008 fb54 	bl	800aeb4 <__errno>
 800280c:	4603      	mov	r3, r0
 800280e:	220c      	movs	r2, #12
 8002810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e009      	b.n	800282c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <_sbrk+0x64>)
 8002828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282a:	68fb      	ldr	r3, [r7, #12]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	24080000 	.word	0x24080000
 8002838:	00000400 	.word	0x00000400
 800283c:	24000ca4 	.word	0x24000ca4
 8002840:	24000cc0 	.word	0x24000cc0

08002844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800287c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002848:	f7fe fd7e 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800284c:	480c      	ldr	r0, [pc, #48]	; (8002880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800284e:	490d      	ldr	r1, [pc, #52]	; (8002884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002854:	e002      	b.n	800285c <LoopCopyDataInit>

08002856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285a:	3304      	adds	r3, #4

0800285c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800285c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002860:	d3f9      	bcc.n	8002856 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002864:	4c0a      	ldr	r4, [pc, #40]	; (8002890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002868:	e001      	b.n	800286e <LoopFillZerobss>

0800286a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800286c:	3204      	adds	r2, #4

0800286e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002870:	d3fb      	bcc.n	800286a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002872:	f008 fb25 	bl	800aec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002876:	f7fe fdfd 	bl	8001474 <main>
  bx  lr
 800287a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800287c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002880:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002884:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8002888:	0800ce94 	.word	0x0800ce94
  ldr r2, =_sbss
 800288c:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8002890:	24000cbc 	.word	0x24000cbc

08002894 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002894:	e7fe      	b.n	8002894 <ADC3_IRQHandler>
	...

08002898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289e:	2003      	movs	r0, #3
 80028a0:	f000 f9a0 	bl	8002be4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028a4:	f004 f9e8 	bl	8006c78 <HAL_RCC_GetSysClockFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_Init+0x68>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	4913      	ldr	r1, [pc, #76]	; (8002904 <HAL_Init+0x6c>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_Init+0x68>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <HAL_Init+0x6c>)
 80028cc:	5cd3      	ldrb	r3, [r2, r3]
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
 80028d8:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_Init+0x70>)
 80028da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <HAL_Init+0x74>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e2:	2000      	movs	r0, #0
 80028e4:	f000 f814 	bl	8002910 <HAL_InitTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e002      	b.n	80028f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028f2:	f7ff fca9 	bl	8002248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	58024400 	.word	0x58024400
 8002904:	0800b8d0 	.word	0x0800b8d0
 8002908:	24000004 	.word	0x24000004
 800290c:	24000000 	.word	0x24000000

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002918:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_InitTick+0x60>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e021      	b.n	8002968 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_InitTick+0x64>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_InitTick+0x60>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	4619      	mov	r1, r3
 800292e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002932:	fbb3 f3f1 	udiv	r3, r3, r1
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f985 	bl	8002c4a <HAL_SYSTICK_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e00e      	b.n	8002968 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b0f      	cmp	r3, #15
 800294e:	d80a      	bhi.n	8002966 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002950:	2200      	movs	r2, #0
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	f000 f94f 	bl	8002bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800295c:	4a06      	ldr	r2, [pc, #24]	; (8002978 <HAL_InitTick+0x68>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	2400001c 	.word	0x2400001c
 8002974:	24000000 	.word	0x24000000
 8002978:	24000018 	.word	0x24000018

0800297c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_IncTick+0x20>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_IncTick+0x24>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4413      	add	r3, r2
 800298c:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <HAL_IncTick+0x24>)
 800298e:	6013      	str	r3, [r2, #0]
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	2400001c 	.word	0x2400001c
 80029a0:	24000ca8 	.word	0x24000ca8

080029a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return uwTick;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_GetTick+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	24000ca8 	.word	0x24000ca8

080029bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c4:	f7ff ffee 	bl	80029a4 <HAL_GetTick>
 80029c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d005      	beq.n	80029e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_Delay+0x44>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4413      	add	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029e2:	bf00      	nop
 80029e4:	f7ff ffde 	bl	80029a4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d8f7      	bhi.n	80029e4 <HAL_Delay+0x28>
  {
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2400001c 	.word	0x2400001c

08002a04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_GetREVID+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0c1b      	lsrs	r3, r3, #16
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	5c001000 	.word	0x5c001000

08002a1c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a2c:	4904      	ldr	r1, [pc, #16]	; (8002a40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	58000400 	.word	0x58000400

08002a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <__NVIC_SetPriorityGrouping+0x40>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a60:	4013      	ands	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a72:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <__NVIC_SetPriorityGrouping+0x40>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00
 8002a88:	05fa0000 	.word	0x05fa0000

08002a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	f003 0307 	and.w	r3, r3, #7
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	db0b      	blt.n	8002ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4907      	ldr	r1, [pc, #28]	; (8002ae0 <__NVIC_EnableIRQ+0x38>)
 8002ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2001      	movs	r0, #1
 8002aca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000e100 	.word	0xe000e100

08002ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	db0a      	blt.n	8002b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	490c      	ldr	r1, [pc, #48]	; (8002b30 <__NVIC_SetPriority+0x4c>)
 8002afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	440b      	add	r3, r1
 8002b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b0c:	e00a      	b.n	8002b24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4908      	ldr	r1, [pc, #32]	; (8002b34 <__NVIC_SetPriority+0x50>)
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	3b04      	subs	r3, #4
 8002b1c:	0112      	lsls	r2, r2, #4
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	440b      	add	r3, r1
 8002b22:	761a      	strb	r2, [r3, #24]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000e100 	.word	0xe000e100
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b089      	sub	sp, #36	; 0x24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f1c3 0307 	rsb	r3, r3, #7
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	bf28      	it	cs
 8002b56:	2304      	movcs	r3, #4
 8002b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d902      	bls.n	8002b68 <NVIC_EncodePriority+0x30>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3b03      	subs	r3, #3
 8002b66:	e000      	b.n	8002b6a <NVIC_EncodePriority+0x32>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	43d9      	mvns	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	4313      	orrs	r3, r2
         );
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3724      	adds	r7, #36	; 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb0:	d301      	bcc.n	8002bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00f      	b.n	8002bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <SysTick_Config+0x40>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bbe:	210f      	movs	r1, #15
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f7ff ff8e 	bl	8002ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <SysTick_Config+0x40>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bce:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <SysTick_Config+0x40>)
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	e000e010 	.word	0xe000e010

08002be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff29 	bl	8002a44 <__NVIC_SetPriorityGrouping>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff40 	bl	8002a8c <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff90 	bl	8002b38 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5f 	bl	8002ae4 <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff33 	bl	8002aa8 <__NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ffa4 	bl	8002ba0 <SysTick_Config>
 8002c58:	4603      	mov	r3, r0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff fe9a 	bl	80029a4 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e316      	b.n	80032aa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a66      	ldr	r2, [pc, #408]	; (8002e1c <HAL_DMA_Init+0x1b8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d04a      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_DMA_Init+0x1bc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d045      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a63      	ldr	r2, [pc, #396]	; (8002e24 <HAL_DMA_Init+0x1c0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d040      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a62      	ldr	r2, [pc, #392]	; (8002e28 <HAL_DMA_Init+0x1c4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d03b      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a60      	ldr	r2, [pc, #384]	; (8002e2c <HAL_DMA_Init+0x1c8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d036      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5f      	ldr	r2, [pc, #380]	; (8002e30 <HAL_DMA_Init+0x1cc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d031      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a5d      	ldr	r2, [pc, #372]	; (8002e34 <HAL_DMA_Init+0x1d0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02c      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a5c      	ldr	r2, [pc, #368]	; (8002e38 <HAL_DMA_Init+0x1d4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d027      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a5a      	ldr	r2, [pc, #360]	; (8002e3c <HAL_DMA_Init+0x1d8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d022      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a59      	ldr	r2, [pc, #356]	; (8002e40 <HAL_DMA_Init+0x1dc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d01d      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a57      	ldr	r2, [pc, #348]	; (8002e44 <HAL_DMA_Init+0x1e0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d018      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a56      	ldr	r2, [pc, #344]	; (8002e48 <HAL_DMA_Init+0x1e4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a54      	ldr	r2, [pc, #336]	; (8002e4c <HAL_DMA_Init+0x1e8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a53      	ldr	r2, [pc, #332]	; (8002e50 <HAL_DMA_Init+0x1ec>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a51      	ldr	r2, [pc, #324]	; (8002e54 <HAL_DMA_Init+0x1f0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_DMA_Init+0xb8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a50      	ldr	r2, [pc, #320]	; (8002e58 <HAL_DMA_Init+0x1f4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_DMA_Init+0xbc>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_DMA_Init+0xbe>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 813b 	beq.w	8002f9e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a37      	ldr	r2, [pc, #220]	; (8002e1c <HAL_DMA_Init+0x1b8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d04a      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a36      	ldr	r2, [pc, #216]	; (8002e20 <HAL_DMA_Init+0x1bc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d045      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a34      	ldr	r2, [pc, #208]	; (8002e24 <HAL_DMA_Init+0x1c0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d040      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a33      	ldr	r2, [pc, #204]	; (8002e28 <HAL_DMA_Init+0x1c4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d03b      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a31      	ldr	r2, [pc, #196]	; (8002e2c <HAL_DMA_Init+0x1c8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d036      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <HAL_DMA_Init+0x1cc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d031      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <HAL_DMA_Init+0x1d0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02c      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <HAL_DMA_Init+0x1d4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d027      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2b      	ldr	r2, [pc, #172]	; (8002e3c <HAL_DMA_Init+0x1d8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d022      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <HAL_DMA_Init+0x1dc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d01d      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <HAL_DMA_Init+0x1e0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d018      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a27      	ldr	r2, [pc, #156]	; (8002e48 <HAL_DMA_Init+0x1e4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <HAL_DMA_Init+0x1e8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00e      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <HAL_DMA_Init+0x1ec>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_DMA_Init+0x1f0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_DMA_Init+0x174>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <HAL_DMA_Init+0x1f4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d108      	bne.n	8002dea <HAL_DMA_Init+0x186>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e007      	b.n	8002dfa <HAL_DMA_Init+0x196>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dfa:	e02f      	b.n	8002e5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dfc:	f7ff fdd2 	bl	80029a4 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d928      	bls.n	8002e5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2203      	movs	r2, #3
 8002e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e246      	b.n	80032aa <HAL_DMA_Init+0x646>
 8002e1c:	40020010 	.word	0x40020010
 8002e20:	40020028 	.word	0x40020028
 8002e24:	40020040 	.word	0x40020040
 8002e28:	40020058 	.word	0x40020058
 8002e2c:	40020070 	.word	0x40020070
 8002e30:	40020088 	.word	0x40020088
 8002e34:	400200a0 	.word	0x400200a0
 8002e38:	400200b8 	.word	0x400200b8
 8002e3c:	40020410 	.word	0x40020410
 8002e40:	40020428 	.word	0x40020428
 8002e44:	40020440 	.word	0x40020440
 8002e48:	40020458 	.word	0x40020458
 8002e4c:	40020470 	.word	0x40020470
 8002e50:	40020488 	.word	0x40020488
 8002e54:	400204a0 	.word	0x400204a0
 8002e58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1c8      	bne.n	8002dfc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4b83      	ldr	r3, [pc, #524]	; (8003084 <HAL_DMA_Init+0x420>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d107      	bne.n	8002ec0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ec0:	4b71      	ldr	r3, [pc, #452]	; (8003088 <HAL_DMA_Init+0x424>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b71      	ldr	r3, [pc, #452]	; (800308c <HAL_DMA_Init+0x428>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ecc:	d328      	bcc.n	8002f20 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b28      	cmp	r3, #40	; 0x28
 8002ed4:	d903      	bls.n	8002ede <HAL_DMA_Init+0x27a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b2e      	cmp	r3, #46	; 0x2e
 8002edc:	d917      	bls.n	8002f0e <HAL_DMA_Init+0x2aa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ee4:	d903      	bls.n	8002eee <HAL_DMA_Init+0x28a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b42      	cmp	r3, #66	; 0x42
 8002eec:	d90f      	bls.n	8002f0e <HAL_DMA_Init+0x2aa>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b46      	cmp	r3, #70	; 0x46
 8002ef4:	d903      	bls.n	8002efe <HAL_DMA_Init+0x29a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b48      	cmp	r3, #72	; 0x48
 8002efc:	d907      	bls.n	8002f0e <HAL_DMA_Init+0x2aa>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b4e      	cmp	r3, #78	; 0x4e
 8002f04:	d905      	bls.n	8002f12 <HAL_DMA_Init+0x2ae>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b52      	cmp	r3, #82	; 0x52
 8002f0c:	d801      	bhi.n	8002f12 <HAL_DMA_Init+0x2ae>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_DMA_Init+0x2b0>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f1e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f023 0307 	bic.w	r3, r3, #7
 8002f36:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d117      	bne.n	8002f7a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f001 ff1d 	bl	8004d9c <DMA_CheckFifoParam>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2240      	movs	r2, #64	; 0x40
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e197      	b.n	80032aa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f001 fe58 	bl	8004c38 <DMA_CalcBaseAndBitshift>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	223f      	movs	r2, #63	; 0x3f
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	e0cd      	b.n	800313a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <HAL_DMA_Init+0x42c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_Init+0x38a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a39      	ldr	r2, [pc, #228]	; (8003094 <HAL_DMA_Init+0x430>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <HAL_DMA_Init+0x38a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a38      	ldr	r2, [pc, #224]	; (8003098 <HAL_DMA_Init+0x434>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_Init+0x38a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a36      	ldr	r2, [pc, #216]	; (800309c <HAL_DMA_Init+0x438>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_DMA_Init+0x38a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a35      	ldr	r2, [pc, #212]	; (80030a0 <HAL_DMA_Init+0x43c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_Init+0x38a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a33      	ldr	r2, [pc, #204]	; (80030a4 <HAL_DMA_Init+0x440>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_DMA_Init+0x38a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a32      	ldr	r2, [pc, #200]	; (80030a8 <HAL_DMA_Init+0x444>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_Init+0x38a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a30      	ldr	r2, [pc, #192]	; (80030ac <HAL_DMA_Init+0x448>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_DMA_Init+0x38e>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_DMA_Init+0x390>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8097 	beq.w	8003128 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <HAL_DMA_Init+0x42c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d021      	beq.n	8003048 <HAL_DMA_Init+0x3e4>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_DMA_Init+0x430>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01c      	beq.n	8003048 <HAL_DMA_Init+0x3e4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a21      	ldr	r2, [pc, #132]	; (8003098 <HAL_DMA_Init+0x434>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d017      	beq.n	8003048 <HAL_DMA_Init+0x3e4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1f      	ldr	r2, [pc, #124]	; (800309c <HAL_DMA_Init+0x438>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d012      	beq.n	8003048 <HAL_DMA_Init+0x3e4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <HAL_DMA_Init+0x43c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00d      	beq.n	8003048 <HAL_DMA_Init+0x3e4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <HAL_DMA_Init+0x440>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d008      	beq.n	8003048 <HAL_DMA_Init+0x3e4>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_DMA_Init+0x444>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <HAL_DMA_Init+0x3e4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <HAL_DMA_Init+0x448>)
 8003046:	4293      	cmp	r3, r2
 8003048:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_DMA_Init+0x44c>)
 8003066:	4013      	ands	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d020      	beq.n	80030b4 <HAL_DMA_Init+0x450>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b80      	cmp	r3, #128	; 0x80
 8003078:	d102      	bne.n	8003080 <HAL_DMA_Init+0x41c>
 800307a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800307e:	e01a      	b.n	80030b6 <HAL_DMA_Init+0x452>
 8003080:	2300      	movs	r3, #0
 8003082:	e018      	b.n	80030b6 <HAL_DMA_Init+0x452>
 8003084:	fe10803f 	.word	0xfe10803f
 8003088:	5c001000 	.word	0x5c001000
 800308c:	ffff0000 	.word	0xffff0000
 8003090:	58025408 	.word	0x58025408
 8003094:	5802541c 	.word	0x5802541c
 8003098:	58025430 	.word	0x58025430
 800309c:	58025444 	.word	0x58025444
 80030a0:	58025458 	.word	0x58025458
 80030a4:	5802546c 	.word	0x5802546c
 80030a8:	58025480 	.word	0x58025480
 80030ac:	58025494 	.word	0x58025494
 80030b0:	fffe000f 	.word	0xfffe000f
 80030b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <HAL_DMA_Init+0x650>)
 80030fc:	4413      	add	r3, r2
 80030fe:	4a6e      	ldr	r2, [pc, #440]	; (80032b8 <HAL_DMA_Init+0x654>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	009a      	lsls	r2, r3, #2
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f001 fd93 	bl	8004c38 <DMA_CalcBaseAndBitshift>
 8003112:	4603      	mov	r3, r0
 8003114:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2201      	movs	r2, #1
 8003120:	409a      	lsls	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	e008      	b.n	800313a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2203      	movs	r2, #3
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e0b7      	b.n	80032aa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5f      	ldr	r2, [pc, #380]	; (80032bc <HAL_DMA_Init+0x658>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d072      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5d      	ldr	r2, [pc, #372]	; (80032c0 <HAL_DMA_Init+0x65c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d06d      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5c      	ldr	r2, [pc, #368]	; (80032c4 <HAL_DMA_Init+0x660>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d068      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5a      	ldr	r2, [pc, #360]	; (80032c8 <HAL_DMA_Init+0x664>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d063      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a59      	ldr	r2, [pc, #356]	; (80032cc <HAL_DMA_Init+0x668>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d05e      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a57      	ldr	r2, [pc, #348]	; (80032d0 <HAL_DMA_Init+0x66c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d059      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a56      	ldr	r2, [pc, #344]	; (80032d4 <HAL_DMA_Init+0x670>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d054      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a54      	ldr	r2, [pc, #336]	; (80032d8 <HAL_DMA_Init+0x674>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d04f      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a53      	ldr	r2, [pc, #332]	; (80032dc <HAL_DMA_Init+0x678>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d04a      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a51      	ldr	r2, [pc, #324]	; (80032e0 <HAL_DMA_Init+0x67c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d045      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a50      	ldr	r2, [pc, #320]	; (80032e4 <HAL_DMA_Init+0x680>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d040      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a4e      	ldr	r2, [pc, #312]	; (80032e8 <HAL_DMA_Init+0x684>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d03b      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a4d      	ldr	r2, [pc, #308]	; (80032ec <HAL_DMA_Init+0x688>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d036      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <HAL_DMA_Init+0x68c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a4a      	ldr	r2, [pc, #296]	; (80032f4 <HAL_DMA_Init+0x690>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d02c      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a48      	ldr	r2, [pc, #288]	; (80032f8 <HAL_DMA_Init+0x694>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d027      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a47      	ldr	r2, [pc, #284]	; (80032fc <HAL_DMA_Init+0x698>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a45      	ldr	r2, [pc, #276]	; (8003300 <HAL_DMA_Init+0x69c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01d      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a44      	ldr	r2, [pc, #272]	; (8003304 <HAL_DMA_Init+0x6a0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d018      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a42      	ldr	r2, [pc, #264]	; (8003308 <HAL_DMA_Init+0x6a4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a41      	ldr	r2, [pc, #260]	; (800330c <HAL_DMA_Init+0x6a8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00e      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a3f      	ldr	r2, [pc, #252]	; (8003310 <HAL_DMA_Init+0x6ac>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a3e      	ldr	r2, [pc, #248]	; (8003314 <HAL_DMA_Init+0x6b0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_DMA_Init+0x5c6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3c      	ldr	r2, [pc, #240]	; (8003318 <HAL_DMA_Init+0x6b4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_DMA_Init+0x5ca>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_DMA_Init+0x5cc>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d032      	beq.n	800329a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f001 fe2d 	bl	8004e94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b80      	cmp	r3, #128	; 0x80
 8003240:	d102      	bne.n	8003248 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800325c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d010      	beq.n	8003288 <HAL_DMA_Init+0x624>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b08      	cmp	r3, #8
 800326c:	d80c      	bhi.n	8003288 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f001 feaa 	bl	8004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	e008      	b.n	800329a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	a7fdabf8 	.word	0xa7fdabf8
 80032b8:	cccccccd 	.word	0xcccccccd
 80032bc:	40020010 	.word	0x40020010
 80032c0:	40020028 	.word	0x40020028
 80032c4:	40020040 	.word	0x40020040
 80032c8:	40020058 	.word	0x40020058
 80032cc:	40020070 	.word	0x40020070
 80032d0:	40020088 	.word	0x40020088
 80032d4:	400200a0 	.word	0x400200a0
 80032d8:	400200b8 	.word	0x400200b8
 80032dc:	40020410 	.word	0x40020410
 80032e0:	40020428 	.word	0x40020428
 80032e4:	40020440 	.word	0x40020440
 80032e8:	40020458 	.word	0x40020458
 80032ec:	40020470 	.word	0x40020470
 80032f0:	40020488 	.word	0x40020488
 80032f4:	400204a0 	.word	0x400204a0
 80032f8:	400204b8 	.word	0x400204b8
 80032fc:	58025408 	.word	0x58025408
 8003300:	5802541c 	.word	0x5802541c
 8003304:	58025430 	.word	0x58025430
 8003308:	58025444 	.word	0x58025444
 800330c:	58025458 	.word	0x58025458
 8003310:	5802546c 	.word	0x5802546c
 8003314:	58025480 	.word	0x58025480
 8003318:	58025494 	.word	0x58025494

0800331c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003324:	f7ff fb3e 	bl	80029a4 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e2dc      	b.n	80038ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d008      	beq.n	8003352 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e2cd      	b.n	80038ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a76      	ldr	r2, [pc, #472]	; (8003530 <HAL_DMA_Abort+0x214>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d04a      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a74      	ldr	r2, [pc, #464]	; (8003534 <HAL_DMA_Abort+0x218>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d045      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a73      	ldr	r2, [pc, #460]	; (8003538 <HAL_DMA_Abort+0x21c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d040      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a71      	ldr	r2, [pc, #452]	; (800353c <HAL_DMA_Abort+0x220>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d03b      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a70      	ldr	r2, [pc, #448]	; (8003540 <HAL_DMA_Abort+0x224>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d036      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a6e      	ldr	r2, [pc, #440]	; (8003544 <HAL_DMA_Abort+0x228>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d031      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a6d      	ldr	r2, [pc, #436]	; (8003548 <HAL_DMA_Abort+0x22c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d02c      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a6b      	ldr	r2, [pc, #428]	; (800354c <HAL_DMA_Abort+0x230>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d027      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6a      	ldr	r2, [pc, #424]	; (8003550 <HAL_DMA_Abort+0x234>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d022      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a68      	ldr	r2, [pc, #416]	; (8003554 <HAL_DMA_Abort+0x238>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d01d      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a67      	ldr	r2, [pc, #412]	; (8003558 <HAL_DMA_Abort+0x23c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d018      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a65      	ldr	r2, [pc, #404]	; (800355c <HAL_DMA_Abort+0x240>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a64      	ldr	r2, [pc, #400]	; (8003560 <HAL_DMA_Abort+0x244>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00e      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a62      	ldr	r2, [pc, #392]	; (8003564 <HAL_DMA_Abort+0x248>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a61      	ldr	r2, [pc, #388]	; (8003568 <HAL_DMA_Abort+0x24c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_DMA_Abort+0xd6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a5f      	ldr	r2, [pc, #380]	; (800356c <HAL_DMA_Abort+0x250>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_DMA_Abort+0xda>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_DMA_Abort+0xdc>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 021e 	bic.w	r2, r2, #30
 800340a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800341a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e00a      	b.n	800343a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 020e 	bic.w	r2, r2, #14
 8003432:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a3c      	ldr	r2, [pc, #240]	; (8003530 <HAL_DMA_Abort+0x214>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d072      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a3a      	ldr	r2, [pc, #232]	; (8003534 <HAL_DMA_Abort+0x218>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d06d      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a39      	ldr	r2, [pc, #228]	; (8003538 <HAL_DMA_Abort+0x21c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d068      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a37      	ldr	r2, [pc, #220]	; (800353c <HAL_DMA_Abort+0x220>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d063      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a36      	ldr	r2, [pc, #216]	; (8003540 <HAL_DMA_Abort+0x224>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d05e      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a34      	ldr	r2, [pc, #208]	; (8003544 <HAL_DMA_Abort+0x228>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d059      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a33      	ldr	r2, [pc, #204]	; (8003548 <HAL_DMA_Abort+0x22c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d054      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a31      	ldr	r2, [pc, #196]	; (800354c <HAL_DMA_Abort+0x230>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d04f      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a30      	ldr	r2, [pc, #192]	; (8003550 <HAL_DMA_Abort+0x234>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d04a      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2e      	ldr	r2, [pc, #184]	; (8003554 <HAL_DMA_Abort+0x238>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d045      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <HAL_DMA_Abort+0x23c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d040      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2b      	ldr	r2, [pc, #172]	; (800355c <HAL_DMA_Abort+0x240>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d03b      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <HAL_DMA_Abort+0x244>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d036      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a28      	ldr	r2, [pc, #160]	; (8003564 <HAL_DMA_Abort+0x248>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d031      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a27      	ldr	r2, [pc, #156]	; (8003568 <HAL_DMA_Abort+0x24c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d02c      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a25      	ldr	r2, [pc, #148]	; (800356c <HAL_DMA_Abort+0x250>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d027      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a24      	ldr	r2, [pc, #144]	; (8003570 <HAL_DMA_Abort+0x254>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d022      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a22      	ldr	r2, [pc, #136]	; (8003574 <HAL_DMA_Abort+0x258>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01d      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a21      	ldr	r2, [pc, #132]	; (8003578 <HAL_DMA_Abort+0x25c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d018      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1f      	ldr	r2, [pc, #124]	; (800357c <HAL_DMA_Abort+0x260>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_DMA_Abort+0x264>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00e      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_DMA_Abort+0x268>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_DMA_Abort+0x26c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d004      	beq.n	800352a <HAL_DMA_Abort+0x20e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <HAL_DMA_Abort+0x270>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d132      	bne.n	8003590 <HAL_DMA_Abort+0x274>
 800352a:	2301      	movs	r3, #1
 800352c:	e031      	b.n	8003592 <HAL_DMA_Abort+0x276>
 800352e:	bf00      	nop
 8003530:	40020010 	.word	0x40020010
 8003534:	40020028 	.word	0x40020028
 8003538:	40020040 	.word	0x40020040
 800353c:	40020058 	.word	0x40020058
 8003540:	40020070 	.word	0x40020070
 8003544:	40020088 	.word	0x40020088
 8003548:	400200a0 	.word	0x400200a0
 800354c:	400200b8 	.word	0x400200b8
 8003550:	40020410 	.word	0x40020410
 8003554:	40020428 	.word	0x40020428
 8003558:	40020440 	.word	0x40020440
 800355c:	40020458 	.word	0x40020458
 8003560:	40020470 	.word	0x40020470
 8003564:	40020488 	.word	0x40020488
 8003568:	400204a0 	.word	0x400204a0
 800356c:	400204b8 	.word	0x400204b8
 8003570:	58025408 	.word	0x58025408
 8003574:	5802541c 	.word	0x5802541c
 8003578:	58025430 	.word	0x58025430
 800357c:	58025444 	.word	0x58025444
 8003580:	58025458 	.word	0x58025458
 8003584:	5802546c 	.word	0x5802546c
 8003588:	58025480 	.word	0x58025480
 800358c:	58025494 	.word	0x58025494
 8003590:	2300      	movs	r3, #0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6d      	ldr	r2, [pc, #436]	; (8003760 <HAL_DMA_Abort+0x444>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d04a      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6b      	ldr	r2, [pc, #428]	; (8003764 <HAL_DMA_Abort+0x448>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d045      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a6a      	ldr	r2, [pc, #424]	; (8003768 <HAL_DMA_Abort+0x44c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d040      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a68      	ldr	r2, [pc, #416]	; (800376c <HAL_DMA_Abort+0x450>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d03b      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a67      	ldr	r2, [pc, #412]	; (8003770 <HAL_DMA_Abort+0x454>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d036      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a65      	ldr	r2, [pc, #404]	; (8003774 <HAL_DMA_Abort+0x458>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d031      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a64      	ldr	r2, [pc, #400]	; (8003778 <HAL_DMA_Abort+0x45c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d02c      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a62      	ldr	r2, [pc, #392]	; (800377c <HAL_DMA_Abort+0x460>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d027      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a61      	ldr	r2, [pc, #388]	; (8003780 <HAL_DMA_Abort+0x464>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d022      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a5f      	ldr	r2, [pc, #380]	; (8003784 <HAL_DMA_Abort+0x468>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01d      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a5e      	ldr	r2, [pc, #376]	; (8003788 <HAL_DMA_Abort+0x46c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d018      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5c      	ldr	r2, [pc, #368]	; (800378c <HAL_DMA_Abort+0x470>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a5b      	ldr	r2, [pc, #364]	; (8003790 <HAL_DMA_Abort+0x474>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00e      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a59      	ldr	r2, [pc, #356]	; (8003794 <HAL_DMA_Abort+0x478>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a58      	ldr	r2, [pc, #352]	; (8003798 <HAL_DMA_Abort+0x47c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_DMA_Abort+0x32a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a56      	ldr	r2, [pc, #344]	; (800379c <HAL_DMA_Abort+0x480>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d108      	bne.n	8003658 <HAL_DMA_Abort+0x33c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	e007      	b.n	8003668 <HAL_DMA_Abort+0x34c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003668:	e013      	b.n	8003692 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800366a:	f7ff f99b 	bl	80029a4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b05      	cmp	r3, #5
 8003676:	d90c      	bls.n	8003692 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2203      	movs	r2, #3
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e12d      	b.n	80038ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e5      	bne.n	800366a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2f      	ldr	r2, [pc, #188]	; (8003760 <HAL_DMA_Abort+0x444>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d04a      	beq.n	800373e <HAL_DMA_Abort+0x422>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2d      	ldr	r2, [pc, #180]	; (8003764 <HAL_DMA_Abort+0x448>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d045      	beq.n	800373e <HAL_DMA_Abort+0x422>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2c      	ldr	r2, [pc, #176]	; (8003768 <HAL_DMA_Abort+0x44c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d040      	beq.n	800373e <HAL_DMA_Abort+0x422>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2a      	ldr	r2, [pc, #168]	; (800376c <HAL_DMA_Abort+0x450>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d03b      	beq.n	800373e <HAL_DMA_Abort+0x422>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a29      	ldr	r2, [pc, #164]	; (8003770 <HAL_DMA_Abort+0x454>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d036      	beq.n	800373e <HAL_DMA_Abort+0x422>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a27      	ldr	r2, [pc, #156]	; (8003774 <HAL_DMA_Abort+0x458>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <HAL_DMA_Abort+0x422>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a26      	ldr	r2, [pc, #152]	; (8003778 <HAL_DMA_Abort+0x45c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d02c      	beq.n	800373e <HAL_DMA_Abort+0x422>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a24      	ldr	r2, [pc, #144]	; (800377c <HAL_DMA_Abort+0x460>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d027      	beq.n	800373e <HAL_DMA_Abort+0x422>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a23      	ldr	r2, [pc, #140]	; (8003780 <HAL_DMA_Abort+0x464>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d022      	beq.n	800373e <HAL_DMA_Abort+0x422>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a21      	ldr	r2, [pc, #132]	; (8003784 <HAL_DMA_Abort+0x468>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01d      	beq.n	800373e <HAL_DMA_Abort+0x422>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a20      	ldr	r2, [pc, #128]	; (8003788 <HAL_DMA_Abort+0x46c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d018      	beq.n	800373e <HAL_DMA_Abort+0x422>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1e      	ldr	r2, [pc, #120]	; (800378c <HAL_DMA_Abort+0x470>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_DMA_Abort+0x422>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <HAL_DMA_Abort+0x474>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00e      	beq.n	800373e <HAL_DMA_Abort+0x422>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_DMA_Abort+0x478>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_DMA_Abort+0x422>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1a      	ldr	r2, [pc, #104]	; (8003798 <HAL_DMA_Abort+0x47c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_DMA_Abort+0x422>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_DMA_Abort+0x480>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <HAL_DMA_Abort+0x426>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_DMA_Abort+0x428>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d02b      	beq.n	80037a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	223f      	movs	r2, #63	; 0x3f
 8003758:	409a      	lsls	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	e02a      	b.n	80037b6 <HAL_DMA_Abort+0x49a>
 8003760:	40020010 	.word	0x40020010
 8003764:	40020028 	.word	0x40020028
 8003768:	40020040 	.word	0x40020040
 800376c:	40020058 	.word	0x40020058
 8003770:	40020070 	.word	0x40020070
 8003774:	40020088 	.word	0x40020088
 8003778:	400200a0 	.word	0x400200a0
 800377c:	400200b8 	.word	0x400200b8
 8003780:	40020410 	.word	0x40020410
 8003784:	40020428 	.word	0x40020428
 8003788:	40020440 	.word	0x40020440
 800378c:	40020458 	.word	0x40020458
 8003790:	40020470 	.word	0x40020470
 8003794:	40020488 	.word	0x40020488
 8003798:	400204a0 	.word	0x400204a0
 800379c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2201      	movs	r2, #1
 80037b0:	409a      	lsls	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a4f      	ldr	r2, [pc, #316]	; (80038f8 <HAL_DMA_Abort+0x5dc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d072      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a4d      	ldr	r2, [pc, #308]	; (80038fc <HAL_DMA_Abort+0x5e0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d06d      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a4c      	ldr	r2, [pc, #304]	; (8003900 <HAL_DMA_Abort+0x5e4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d068      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a4a      	ldr	r2, [pc, #296]	; (8003904 <HAL_DMA_Abort+0x5e8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d063      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a49      	ldr	r2, [pc, #292]	; (8003908 <HAL_DMA_Abort+0x5ec>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d05e      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a47      	ldr	r2, [pc, #284]	; (800390c <HAL_DMA_Abort+0x5f0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d059      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a46      	ldr	r2, [pc, #280]	; (8003910 <HAL_DMA_Abort+0x5f4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d054      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a44      	ldr	r2, [pc, #272]	; (8003914 <HAL_DMA_Abort+0x5f8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04f      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a43      	ldr	r2, [pc, #268]	; (8003918 <HAL_DMA_Abort+0x5fc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d04a      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a41      	ldr	r2, [pc, #260]	; (800391c <HAL_DMA_Abort+0x600>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d045      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a40      	ldr	r2, [pc, #256]	; (8003920 <HAL_DMA_Abort+0x604>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d040      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a3e      	ldr	r2, [pc, #248]	; (8003924 <HAL_DMA_Abort+0x608>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d03b      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a3d      	ldr	r2, [pc, #244]	; (8003928 <HAL_DMA_Abort+0x60c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d036      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a3b      	ldr	r2, [pc, #236]	; (800392c <HAL_DMA_Abort+0x610>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d031      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a3a      	ldr	r2, [pc, #232]	; (8003930 <HAL_DMA_Abort+0x614>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d02c      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a38      	ldr	r2, [pc, #224]	; (8003934 <HAL_DMA_Abort+0x618>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d027      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a37      	ldr	r2, [pc, #220]	; (8003938 <HAL_DMA_Abort+0x61c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d022      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a35      	ldr	r2, [pc, #212]	; (800393c <HAL_DMA_Abort+0x620>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01d      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a34      	ldr	r2, [pc, #208]	; (8003940 <HAL_DMA_Abort+0x624>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d018      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a32      	ldr	r2, [pc, #200]	; (8003944 <HAL_DMA_Abort+0x628>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a31      	ldr	r2, [pc, #196]	; (8003948 <HAL_DMA_Abort+0x62c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00e      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2f      	ldr	r2, [pc, #188]	; (800394c <HAL_DMA_Abort+0x630>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2e      	ldr	r2, [pc, #184]	; (8003950 <HAL_DMA_Abort+0x634>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_DMA_Abort+0x58a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <HAL_DMA_Abort+0x638>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_DMA_Abort+0x58e>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_DMA_Abort+0x590>
 80038aa:	2300      	movs	r3, #0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d015      	beq.n	80038dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40020010 	.word	0x40020010
 80038fc:	40020028 	.word	0x40020028
 8003900:	40020040 	.word	0x40020040
 8003904:	40020058 	.word	0x40020058
 8003908:	40020070 	.word	0x40020070
 800390c:	40020088 	.word	0x40020088
 8003910:	400200a0 	.word	0x400200a0
 8003914:	400200b8 	.word	0x400200b8
 8003918:	40020410 	.word	0x40020410
 800391c:	40020428 	.word	0x40020428
 8003920:	40020440 	.word	0x40020440
 8003924:	40020458 	.word	0x40020458
 8003928:	40020470 	.word	0x40020470
 800392c:	40020488 	.word	0x40020488
 8003930:	400204a0 	.word	0x400204a0
 8003934:	400204b8 	.word	0x400204b8
 8003938:	58025408 	.word	0x58025408
 800393c:	5802541c 	.word	0x5802541c
 8003940:	58025430 	.word	0x58025430
 8003944:	58025444 	.word	0x58025444
 8003948:	58025458 	.word	0x58025458
 800394c:	5802546c 	.word	0x5802546c
 8003950:	58025480 	.word	0x58025480
 8003954:	58025494 	.word	0x58025494

08003958 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e237      	b.n	8003dda <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d004      	beq.n	8003980 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e22c      	b.n	8003dda <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a5c      	ldr	r2, [pc, #368]	; (8003af8 <HAL_DMA_Abort_IT+0x1a0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d04a      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a5b      	ldr	r2, [pc, #364]	; (8003afc <HAL_DMA_Abort_IT+0x1a4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d045      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a59      	ldr	r2, [pc, #356]	; (8003b00 <HAL_DMA_Abort_IT+0x1a8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d040      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a58      	ldr	r2, [pc, #352]	; (8003b04 <HAL_DMA_Abort_IT+0x1ac>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d03b      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a56      	ldr	r2, [pc, #344]	; (8003b08 <HAL_DMA_Abort_IT+0x1b0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d036      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a55      	ldr	r2, [pc, #340]	; (8003b0c <HAL_DMA_Abort_IT+0x1b4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d031      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a53      	ldr	r2, [pc, #332]	; (8003b10 <HAL_DMA_Abort_IT+0x1b8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d02c      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a52      	ldr	r2, [pc, #328]	; (8003b14 <HAL_DMA_Abort_IT+0x1bc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d027      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a50      	ldr	r2, [pc, #320]	; (8003b18 <HAL_DMA_Abort_IT+0x1c0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d022      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a4f      	ldr	r2, [pc, #316]	; (8003b1c <HAL_DMA_Abort_IT+0x1c4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d01d      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a4d      	ldr	r2, [pc, #308]	; (8003b20 <HAL_DMA_Abort_IT+0x1c8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d018      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4c      	ldr	r2, [pc, #304]	; (8003b24 <HAL_DMA_Abort_IT+0x1cc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <HAL_DMA_Abort_IT+0x1d0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a49      	ldr	r2, [pc, #292]	; (8003b2c <HAL_DMA_Abort_IT+0x1d4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a47      	ldr	r2, [pc, #284]	; (8003b30 <HAL_DMA_Abort_IT+0x1d8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xc8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a46      	ldr	r2, [pc, #280]	; (8003b34 <HAL_DMA_Abort_IT+0x1dc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <HAL_DMA_Abort_IT+0xcc>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_DMA_Abort_IT+0xce>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8086 	beq.w	8003b38 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a2f      	ldr	r2, [pc, #188]	; (8003af8 <HAL_DMA_Abort_IT+0x1a0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d04a      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2e      	ldr	r2, [pc, #184]	; (8003afc <HAL_DMA_Abort_IT+0x1a4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d045      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a2c      	ldr	r2, [pc, #176]	; (8003b00 <HAL_DMA_Abort_IT+0x1a8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d040      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <HAL_DMA_Abort_IT+0x1ac>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d03b      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a29      	ldr	r2, [pc, #164]	; (8003b08 <HAL_DMA_Abort_IT+0x1b0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d036      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a28      	ldr	r2, [pc, #160]	; (8003b0c <HAL_DMA_Abort_IT+0x1b4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d031      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a26      	ldr	r2, [pc, #152]	; (8003b10 <HAL_DMA_Abort_IT+0x1b8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02c      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <HAL_DMA_Abort_IT+0x1bc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d027      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a23      	ldr	r2, [pc, #140]	; (8003b18 <HAL_DMA_Abort_IT+0x1c0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d022      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <HAL_DMA_Abort_IT+0x1c4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d01d      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_DMA_Abort_IT+0x1c8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d018      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <HAL_DMA_Abort_IT+0x1cc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d013      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <HAL_DMA_Abort_IT+0x1d0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00e      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <HAL_DMA_Abort_IT+0x1d4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d009      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <HAL_DMA_Abort_IT+0x1d8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d004      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x17c>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <HAL_DMA_Abort_IT+0x1dc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <HAL_DMA_Abort_IT+0x18e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e178      	b.n	8003dd8 <HAL_DMA_Abort_IT+0x480>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e16f      	b.n	8003dd8 <HAL_DMA_Abort_IT+0x480>
 8003af8:	40020010 	.word	0x40020010
 8003afc:	40020028 	.word	0x40020028
 8003b00:	40020040 	.word	0x40020040
 8003b04:	40020058 	.word	0x40020058
 8003b08:	40020070 	.word	0x40020070
 8003b0c:	40020088 	.word	0x40020088
 8003b10:	400200a0 	.word	0x400200a0
 8003b14:	400200b8 	.word	0x400200b8
 8003b18:	40020410 	.word	0x40020410
 8003b1c:	40020428 	.word	0x40020428
 8003b20:	40020440 	.word	0x40020440
 8003b24:	40020458 	.word	0x40020458
 8003b28:	40020470 	.word	0x40020470
 8003b2c:	40020488 	.word	0x40020488
 8003b30:	400204a0 	.word	0x400204a0
 8003b34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 020e 	bic.w	r2, r2, #14
 8003b46:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6c      	ldr	r2, [pc, #432]	; (8003d00 <HAL_DMA_Abort_IT+0x3a8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d04a      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6b      	ldr	r2, [pc, #428]	; (8003d04 <HAL_DMA_Abort_IT+0x3ac>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d045      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a69      	ldr	r2, [pc, #420]	; (8003d08 <HAL_DMA_Abort_IT+0x3b0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d040      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a68      	ldr	r2, [pc, #416]	; (8003d0c <HAL_DMA_Abort_IT+0x3b4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d03b      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a66      	ldr	r2, [pc, #408]	; (8003d10 <HAL_DMA_Abort_IT+0x3b8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d036      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a65      	ldr	r2, [pc, #404]	; (8003d14 <HAL_DMA_Abort_IT+0x3bc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d031      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a63      	ldr	r2, [pc, #396]	; (8003d18 <HAL_DMA_Abort_IT+0x3c0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d02c      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a62      	ldr	r2, [pc, #392]	; (8003d1c <HAL_DMA_Abort_IT+0x3c4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d027      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a60      	ldr	r2, [pc, #384]	; (8003d20 <HAL_DMA_Abort_IT+0x3c8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d022      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5f      	ldr	r2, [pc, #380]	; (8003d24 <HAL_DMA_Abort_IT+0x3cc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d01d      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a5d      	ldr	r2, [pc, #372]	; (8003d28 <HAL_DMA_Abort_IT+0x3d0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d018      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a5c      	ldr	r2, [pc, #368]	; (8003d2c <HAL_DMA_Abort_IT+0x3d4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a5a      	ldr	r2, [pc, #360]	; (8003d30 <HAL_DMA_Abort_IT+0x3d8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00e      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a59      	ldr	r2, [pc, #356]	; (8003d34 <HAL_DMA_Abort_IT+0x3dc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <HAL_DMA_Abort_IT+0x3e0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x290>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a56      	ldr	r2, [pc, #344]	; (8003d3c <HAL_DMA_Abort_IT+0x3e4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <HAL_DMA_Abort_IT+0x2a2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e007      	b.n	8003c0a <HAL_DMA_Abort_IT+0x2b2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a3c      	ldr	r2, [pc, #240]	; (8003d00 <HAL_DMA_Abort_IT+0x3a8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d072      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a3a      	ldr	r2, [pc, #232]	; (8003d04 <HAL_DMA_Abort_IT+0x3ac>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d06d      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a39      	ldr	r2, [pc, #228]	; (8003d08 <HAL_DMA_Abort_IT+0x3b0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d068      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a37      	ldr	r2, [pc, #220]	; (8003d0c <HAL_DMA_Abort_IT+0x3b4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d063      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a36      	ldr	r2, [pc, #216]	; (8003d10 <HAL_DMA_Abort_IT+0x3b8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d05e      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a34      	ldr	r2, [pc, #208]	; (8003d14 <HAL_DMA_Abort_IT+0x3bc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d059      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a33      	ldr	r2, [pc, #204]	; (8003d18 <HAL_DMA_Abort_IT+0x3c0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d054      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a31      	ldr	r2, [pc, #196]	; (8003d1c <HAL_DMA_Abort_IT+0x3c4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d04f      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a30      	ldr	r2, [pc, #192]	; (8003d20 <HAL_DMA_Abort_IT+0x3c8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d04a      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2e      	ldr	r2, [pc, #184]	; (8003d24 <HAL_DMA_Abort_IT+0x3cc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d045      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2d      	ldr	r2, [pc, #180]	; (8003d28 <HAL_DMA_Abort_IT+0x3d0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d040      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2b      	ldr	r2, [pc, #172]	; (8003d2c <HAL_DMA_Abort_IT+0x3d4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d03b      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <HAL_DMA_Abort_IT+0x3d8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d036      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <HAL_DMA_Abort_IT+0x3dc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d031      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <HAL_DMA_Abort_IT+0x3e0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d02c      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a25      	ldr	r2, [pc, #148]	; (8003d3c <HAL_DMA_Abort_IT+0x3e4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d027      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a24      	ldr	r2, [pc, #144]	; (8003d40 <HAL_DMA_Abort_IT+0x3e8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <HAL_DMA_Abort_IT+0x3ec>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01d      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a21      	ldr	r2, [pc, #132]	; (8003d48 <HAL_DMA_Abort_IT+0x3f0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <HAL_DMA_Abort_IT+0x3f4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1e      	ldr	r2, [pc, #120]	; (8003d50 <HAL_DMA_Abort_IT+0x3f8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <HAL_DMA_Abort_IT+0x3fc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <HAL_DMA_Abort_IT+0x400>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x3a2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_DMA_Abort_IT+0x404>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d132      	bne.n	8003d60 <HAL_DMA_Abort_IT+0x408>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e031      	b.n	8003d62 <HAL_DMA_Abort_IT+0x40a>
 8003cfe:	bf00      	nop
 8003d00:	40020010 	.word	0x40020010
 8003d04:	40020028 	.word	0x40020028
 8003d08:	40020040 	.word	0x40020040
 8003d0c:	40020058 	.word	0x40020058
 8003d10:	40020070 	.word	0x40020070
 8003d14:	40020088 	.word	0x40020088
 8003d18:	400200a0 	.word	0x400200a0
 8003d1c:	400200b8 	.word	0x400200b8
 8003d20:	40020410 	.word	0x40020410
 8003d24:	40020428 	.word	0x40020428
 8003d28:	40020440 	.word	0x40020440
 8003d2c:	40020458 	.word	0x40020458
 8003d30:	40020470 	.word	0x40020470
 8003d34:	40020488 	.word	0x40020488
 8003d38:	400204a0 	.word	0x400204a0
 8003d3c:	400204b8 	.word	0x400204b8
 8003d40:	58025408 	.word	0x58025408
 8003d44:	5802541c 	.word	0x5802541c
 8003d48:	58025430 	.word	0x58025430
 8003d4c:	58025444 	.word	0x58025444
 8003d50:	58025458 	.word	0x58025458
 8003d54:	5802546c 	.word	0x5802546c
 8003d58:	58025480 	.word	0x58025480
 8003d5c:	58025494 	.word	0x58025494
 8003d60:	2300      	movs	r3, #0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d028      	beq.n	8003db8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d74:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2201      	movs	r2, #1
 8003d86:	409a      	lsls	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d94:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003db6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop

08003de4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003df0:	4b67      	ldr	r3, [pc, #412]	; (8003f90 <HAL_DMA_IRQHandler+0x1ac>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a67      	ldr	r2, [pc, #412]	; (8003f94 <HAL_DMA_IRQHandler+0x1b0>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	0a9b      	lsrs	r3, r3, #10
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a5f      	ldr	r2, [pc, #380]	; (8003f98 <HAL_DMA_IRQHandler+0x1b4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d04a      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a5d      	ldr	r2, [pc, #372]	; (8003f9c <HAL_DMA_IRQHandler+0x1b8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d045      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a5c      	ldr	r2, [pc, #368]	; (8003fa0 <HAL_DMA_IRQHandler+0x1bc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d040      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a5a      	ldr	r2, [pc, #360]	; (8003fa4 <HAL_DMA_IRQHandler+0x1c0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d03b      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a59      	ldr	r2, [pc, #356]	; (8003fa8 <HAL_DMA_IRQHandler+0x1c4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d036      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a57      	ldr	r2, [pc, #348]	; (8003fac <HAL_DMA_IRQHandler+0x1c8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d031      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a56      	ldr	r2, [pc, #344]	; (8003fb0 <HAL_DMA_IRQHandler+0x1cc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d02c      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a54      	ldr	r2, [pc, #336]	; (8003fb4 <HAL_DMA_IRQHandler+0x1d0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d027      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a53      	ldr	r2, [pc, #332]	; (8003fb8 <HAL_DMA_IRQHandler+0x1d4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d022      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a51      	ldr	r2, [pc, #324]	; (8003fbc <HAL_DMA_IRQHandler+0x1d8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01d      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a50      	ldr	r2, [pc, #320]	; (8003fc0 <HAL_DMA_IRQHandler+0x1dc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d018      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a4e      	ldr	r2, [pc, #312]	; (8003fc4 <HAL_DMA_IRQHandler+0x1e0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a4d      	ldr	r2, [pc, #308]	; (8003fc8 <HAL_DMA_IRQHandler+0x1e4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a4b      	ldr	r2, [pc, #300]	; (8003fcc <HAL_DMA_IRQHandler+0x1e8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4a      	ldr	r2, [pc, #296]	; (8003fd0 <HAL_DMA_IRQHandler+0x1ec>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xd2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a48      	ldr	r2, [pc, #288]	; (8003fd4 <HAL_DMA_IRQHandler+0x1f0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_DMA_IRQHandler+0xd6>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <HAL_DMA_IRQHandler+0xd8>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 842b 	beq.w	8004718 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	2208      	movs	r2, #8
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80a2 	beq.w	800401c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2e      	ldr	r2, [pc, #184]	; (8003f98 <HAL_DMA_IRQHandler+0x1b4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d04a      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2d      	ldr	r2, [pc, #180]	; (8003f9c <HAL_DMA_IRQHandler+0x1b8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d045      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2b      	ldr	r2, [pc, #172]	; (8003fa0 <HAL_DMA_IRQHandler+0x1bc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d040      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <HAL_DMA_IRQHandler+0x1c0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d03b      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a28      	ldr	r2, [pc, #160]	; (8003fa8 <HAL_DMA_IRQHandler+0x1c4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d036      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a27      	ldr	r2, [pc, #156]	; (8003fac <HAL_DMA_IRQHandler+0x1c8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d031      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a25      	ldr	r2, [pc, #148]	; (8003fb0 <HAL_DMA_IRQHandler+0x1cc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d02c      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a24      	ldr	r2, [pc, #144]	; (8003fb4 <HAL_DMA_IRQHandler+0x1d0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d027      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <HAL_DMA_IRQHandler+0x1d4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <HAL_DMA_IRQHandler+0x1d8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d01d      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_DMA_IRQHandler+0x1dc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <HAL_DMA_IRQHandler+0x1e0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <HAL_DMA_IRQHandler+0x1e4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <HAL_DMA_IRQHandler+0x1e8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_DMA_IRQHandler+0x1ec>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x194>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <HAL_DMA_IRQHandler+0x1f0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d12f      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x1f4>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e02e      	b.n	8003fec <HAL_DMA_IRQHandler+0x208>
 8003f8e:	bf00      	nop
 8003f90:	24000000 	.word	0x24000000
 8003f94:	1b4e81b5 	.word	0x1b4e81b5
 8003f98:	40020010 	.word	0x40020010
 8003f9c:	40020028 	.word	0x40020028
 8003fa0:	40020040 	.word	0x40020040
 8003fa4:	40020058 	.word	0x40020058
 8003fa8:	40020070 	.word	0x40020070
 8003fac:	40020088 	.word	0x40020088
 8003fb0:	400200a0 	.word	0x400200a0
 8003fb4:	400200b8 	.word	0x400200b8
 8003fb8:	40020410 	.word	0x40020410
 8003fbc:	40020428 	.word	0x40020428
 8003fc0:	40020440 	.word	0x40020440
 8003fc4:	40020458 	.word	0x40020458
 8003fc8:	40020470 	.word	0x40020470
 8003fcc:	40020488 	.word	0x40020488
 8003fd0:	400204a0 	.word	0x400204a0
 8003fd4:	400204b8 	.word	0x400204b8
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d015      	beq.n	800401c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0204 	bic.w	r2, r2, #4
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2208      	movs	r2, #8
 800400a:	409a      	lsls	r2, r3
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004014:	f043 0201 	orr.w	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d06e      	beq.n	8004110 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a69      	ldr	r2, [pc, #420]	; (80041dc <HAL_DMA_IRQHandler+0x3f8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d04a      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a67      	ldr	r2, [pc, #412]	; (80041e0 <HAL_DMA_IRQHandler+0x3fc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d045      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a66      	ldr	r2, [pc, #408]	; (80041e4 <HAL_DMA_IRQHandler+0x400>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d040      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a64      	ldr	r2, [pc, #400]	; (80041e8 <HAL_DMA_IRQHandler+0x404>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d03b      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a63      	ldr	r2, [pc, #396]	; (80041ec <HAL_DMA_IRQHandler+0x408>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d036      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a61      	ldr	r2, [pc, #388]	; (80041f0 <HAL_DMA_IRQHandler+0x40c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d031      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a60      	ldr	r2, [pc, #384]	; (80041f4 <HAL_DMA_IRQHandler+0x410>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d02c      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a5e      	ldr	r2, [pc, #376]	; (80041f8 <HAL_DMA_IRQHandler+0x414>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d027      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a5d      	ldr	r2, [pc, #372]	; (80041fc <HAL_DMA_IRQHandler+0x418>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d022      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a5b      	ldr	r2, [pc, #364]	; (8004200 <HAL_DMA_IRQHandler+0x41c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01d      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a5a      	ldr	r2, [pc, #360]	; (8004204 <HAL_DMA_IRQHandler+0x420>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d018      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a58      	ldr	r2, [pc, #352]	; (8004208 <HAL_DMA_IRQHandler+0x424>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a57      	ldr	r2, [pc, #348]	; (800420c <HAL_DMA_IRQHandler+0x428>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a55      	ldr	r2, [pc, #340]	; (8004210 <HAL_DMA_IRQHandler+0x42c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a54      	ldr	r2, [pc, #336]	; (8004214 <HAL_DMA_IRQHandler+0x430>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2ee>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a52      	ldr	r2, [pc, #328]	; (8004218 <HAL_DMA_IRQHandler+0x434>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10a      	bne.n	80040e8 <HAL_DMA_IRQHandler+0x304>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e003      	b.n	80040f0 <HAL_DMA_IRQHandler+0x30c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2300      	movs	r3, #0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00d      	beq.n	8004110 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2201      	movs	r2, #1
 80040fe:	409a      	lsls	r2, r3
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f043 0202 	orr.w	r2, r3, #2
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2204      	movs	r2, #4
 800411a:	409a      	lsls	r2, r3
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 808f 	beq.w	8004244 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <HAL_DMA_IRQHandler+0x3f8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d04a      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2a      	ldr	r2, [pc, #168]	; (80041e0 <HAL_DMA_IRQHandler+0x3fc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d045      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <HAL_DMA_IRQHandler+0x400>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d040      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <HAL_DMA_IRQHandler+0x404>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d03b      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a26      	ldr	r2, [pc, #152]	; (80041ec <HAL_DMA_IRQHandler+0x408>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d036      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a24      	ldr	r2, [pc, #144]	; (80041f0 <HAL_DMA_IRQHandler+0x40c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d031      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a23      	ldr	r2, [pc, #140]	; (80041f4 <HAL_DMA_IRQHandler+0x410>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d02c      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a21      	ldr	r2, [pc, #132]	; (80041f8 <HAL_DMA_IRQHandler+0x414>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d027      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a20      	ldr	r2, [pc, #128]	; (80041fc <HAL_DMA_IRQHandler+0x418>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d022      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <HAL_DMA_IRQHandler+0x41c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01d      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <HAL_DMA_IRQHandler+0x420>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d018      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_DMA_IRQHandler+0x424>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1a      	ldr	r2, [pc, #104]	; (800420c <HAL_DMA_IRQHandler+0x428>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a18      	ldr	r2, [pc, #96]	; (8004210 <HAL_DMA_IRQHandler+0x42c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a17      	ldr	r2, [pc, #92]	; (8004214 <HAL_DMA_IRQHandler+0x430>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x3e2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a15      	ldr	r2, [pc, #84]	; (8004218 <HAL_DMA_IRQHandler+0x434>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d12a      	bne.n	800421c <HAL_DMA_IRQHandler+0x438>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e023      	b.n	8004224 <HAL_DMA_IRQHandler+0x440>
 80041dc:	40020010 	.word	0x40020010
 80041e0:	40020028 	.word	0x40020028
 80041e4:	40020040 	.word	0x40020040
 80041e8:	40020058 	.word	0x40020058
 80041ec:	40020070 	.word	0x40020070
 80041f0:	40020088 	.word	0x40020088
 80041f4:	400200a0 	.word	0x400200a0
 80041f8:	400200b8 	.word	0x400200b8
 80041fc:	40020410 	.word	0x40020410
 8004200:	40020428 	.word	0x40020428
 8004204:	40020440 	.word	0x40020440
 8004208:	40020458 	.word	0x40020458
 800420c:	40020470 	.word	0x40020470
 8004210:	40020488 	.word	0x40020488
 8004214:	400204a0 	.word	0x400204a0
 8004218:	400204b8 	.word	0x400204b8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2204      	movs	r2, #4
 8004232:	409a      	lsls	r2, r3
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	2210      	movs	r2, #16
 800424e:	409a      	lsls	r2, r3
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a6 	beq.w	80043a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a85      	ldr	r2, [pc, #532]	; (8004474 <HAL_DMA_IRQHandler+0x690>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d04a      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a83      	ldr	r2, [pc, #524]	; (8004478 <HAL_DMA_IRQHandler+0x694>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d045      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a82      	ldr	r2, [pc, #520]	; (800447c <HAL_DMA_IRQHandler+0x698>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d040      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a80      	ldr	r2, [pc, #512]	; (8004480 <HAL_DMA_IRQHandler+0x69c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d03b      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a7f      	ldr	r2, [pc, #508]	; (8004484 <HAL_DMA_IRQHandler+0x6a0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d036      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a7d      	ldr	r2, [pc, #500]	; (8004488 <HAL_DMA_IRQHandler+0x6a4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d031      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a7c      	ldr	r2, [pc, #496]	; (800448c <HAL_DMA_IRQHandler+0x6a8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d02c      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a7a      	ldr	r2, [pc, #488]	; (8004490 <HAL_DMA_IRQHandler+0x6ac>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d027      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a79      	ldr	r2, [pc, #484]	; (8004494 <HAL_DMA_IRQHandler+0x6b0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d022      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a77      	ldr	r2, [pc, #476]	; (8004498 <HAL_DMA_IRQHandler+0x6b4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01d      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a76      	ldr	r2, [pc, #472]	; (800449c <HAL_DMA_IRQHandler+0x6b8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d018      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a74      	ldr	r2, [pc, #464]	; (80044a0 <HAL_DMA_IRQHandler+0x6bc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a73      	ldr	r2, [pc, #460]	; (80044a4 <HAL_DMA_IRQHandler+0x6c0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a71      	ldr	r2, [pc, #452]	; (80044a8 <HAL_DMA_IRQHandler+0x6c4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a70      	ldr	r2, [pc, #448]	; (80044ac <HAL_DMA_IRQHandler+0x6c8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_DMA_IRQHandler+0x516>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a6e      	ldr	r2, [pc, #440]	; (80044b0 <HAL_DMA_IRQHandler+0x6cc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10a      	bne.n	8004310 <HAL_DMA_IRQHandler+0x52c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e009      	b.n	8004324 <HAL_DMA_IRQHandler+0x540>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d03e      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	2210      	movs	r2, #16
 8004332:	409a      	lsls	r2, r3
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d018      	beq.n	8004378 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d108      	bne.n	8004366 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d024      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
 8004364:	e01f      	b.n	80043a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01b      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
 8004376:	e016      	b.n	80043a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d107      	bne.n	8004396 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0208 	bic.w	r2, r2, #8
 8004394:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2220      	movs	r2, #32
 80043b0:	409a      	lsls	r2, r3
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8110 	beq.w	80045dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2c      	ldr	r2, [pc, #176]	; (8004474 <HAL_DMA_IRQHandler+0x690>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d04a      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a2b      	ldr	r2, [pc, #172]	; (8004478 <HAL_DMA_IRQHandler+0x694>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d045      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a29      	ldr	r2, [pc, #164]	; (800447c <HAL_DMA_IRQHandler+0x698>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d040      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a28      	ldr	r2, [pc, #160]	; (8004480 <HAL_DMA_IRQHandler+0x69c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d03b      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a26      	ldr	r2, [pc, #152]	; (8004484 <HAL_DMA_IRQHandler+0x6a0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d036      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a25      	ldr	r2, [pc, #148]	; (8004488 <HAL_DMA_IRQHandler+0x6a4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d031      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a23      	ldr	r2, [pc, #140]	; (800448c <HAL_DMA_IRQHandler+0x6a8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d02c      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a22      	ldr	r2, [pc, #136]	; (8004490 <HAL_DMA_IRQHandler+0x6ac>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d027      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a20      	ldr	r2, [pc, #128]	; (8004494 <HAL_DMA_IRQHandler+0x6b0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d022      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1f      	ldr	r2, [pc, #124]	; (8004498 <HAL_DMA_IRQHandler+0x6b4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d01d      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1d      	ldr	r2, [pc, #116]	; (800449c <HAL_DMA_IRQHandler+0x6b8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1c      	ldr	r2, [pc, #112]	; (80044a0 <HAL_DMA_IRQHandler+0x6bc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1a      	ldr	r2, [pc, #104]	; (80044a4 <HAL_DMA_IRQHandler+0x6c0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <HAL_DMA_IRQHandler+0x6c4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a17      	ldr	r2, [pc, #92]	; (80044ac <HAL_DMA_IRQHandler+0x6c8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_DMA_IRQHandler+0x678>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <HAL_DMA_IRQHandler+0x6cc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d12b      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x6d0>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf14      	ite	ne
 800446a:	2301      	movne	r3, #1
 800446c:	2300      	moveq	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	e02a      	b.n	80044c8 <HAL_DMA_IRQHandler+0x6e4>
 8004472:	bf00      	nop
 8004474:	40020010 	.word	0x40020010
 8004478:	40020028 	.word	0x40020028
 800447c:	40020040 	.word	0x40020040
 8004480:	40020058 	.word	0x40020058
 8004484:	40020070 	.word	0x40020070
 8004488:	40020088 	.word	0x40020088
 800448c:	400200a0 	.word	0x400200a0
 8004490:	400200b8 	.word	0x400200b8
 8004494:	40020410 	.word	0x40020410
 8004498:	40020428 	.word	0x40020428
 800449c:	40020440 	.word	0x40020440
 80044a0:	40020458 	.word	0x40020458
 80044a4:	40020470 	.word	0x40020470
 80044a8:	40020488 	.word	0x40020488
 80044ac:	400204a0 	.word	0x400204a0
 80044b0:	400204b8 	.word	0x400204b8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf14      	ite	ne
 80044c2:	2301      	movne	r3, #1
 80044c4:	2300      	moveq	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8087 	beq.w	80045dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	2220      	movs	r2, #32
 80044d8:	409a      	lsls	r2, r3
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d139      	bne.n	800455e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0216 	bic.w	r2, r2, #22
 80044f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004508:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <HAL_DMA_IRQHandler+0x736>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0208 	bic.w	r2, r2, #8
 8004528:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	223f      	movs	r2, #63	; 0x3f
 8004534:	409a      	lsls	r2, r3
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 834a 	beq.w	8004be8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4798      	blx	r3
          }
          return;
 800455c:	e344      	b.n	8004be8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d018      	beq.n	800459e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d108      	bne.n	800458c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	2b00      	cmp	r3, #0
 8004580:	d02c      	beq.n	80045dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
 800458a:	e027      	b.n	80045dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d023      	beq.n	80045dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
 800459c:	e01e      	b.n	80045dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10f      	bne.n	80045cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0210 	bic.w	r2, r2, #16
 80045ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8306 	beq.w	8004bf2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8088 	beq.w	8004704 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2204      	movs	r2, #4
 80045f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a7a      	ldr	r2, [pc, #488]	; (80047ec <HAL_DMA_IRQHandler+0xa08>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d04a      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a79      	ldr	r2, [pc, #484]	; (80047f0 <HAL_DMA_IRQHandler+0xa0c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d045      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a77      	ldr	r2, [pc, #476]	; (80047f4 <HAL_DMA_IRQHandler+0xa10>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d040      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a76      	ldr	r2, [pc, #472]	; (80047f8 <HAL_DMA_IRQHandler+0xa14>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d03b      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a74      	ldr	r2, [pc, #464]	; (80047fc <HAL_DMA_IRQHandler+0xa18>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d036      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a73      	ldr	r2, [pc, #460]	; (8004800 <HAL_DMA_IRQHandler+0xa1c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d031      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a71      	ldr	r2, [pc, #452]	; (8004804 <HAL_DMA_IRQHandler+0xa20>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d02c      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a70      	ldr	r2, [pc, #448]	; (8004808 <HAL_DMA_IRQHandler+0xa24>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d027      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a6e      	ldr	r2, [pc, #440]	; (800480c <HAL_DMA_IRQHandler+0xa28>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d022      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a6d      	ldr	r2, [pc, #436]	; (8004810 <HAL_DMA_IRQHandler+0xa2c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d01d      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a6b      	ldr	r2, [pc, #428]	; (8004814 <HAL_DMA_IRQHandler+0xa30>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d018      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6a      	ldr	r2, [pc, #424]	; (8004818 <HAL_DMA_IRQHandler+0xa34>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a68      	ldr	r2, [pc, #416]	; (800481c <HAL_DMA_IRQHandler+0xa38>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00e      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a67      	ldr	r2, [pc, #412]	; (8004820 <HAL_DMA_IRQHandler+0xa3c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d009      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a65      	ldr	r2, [pc, #404]	; (8004824 <HAL_DMA_IRQHandler+0xa40>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_DMA_IRQHandler+0x8b8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a64      	ldr	r2, [pc, #400]	; (8004828 <HAL_DMA_IRQHandler+0xa44>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d108      	bne.n	80046ae <HAL_DMA_IRQHandler+0x8ca>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e007      	b.n	80046be <HAL_DMA_IRQHandler+0x8da>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3301      	adds	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d307      	bcc.n	80046da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f2      	bne.n	80046be <HAL_DMA_IRQHandler+0x8da>
 80046d8:	e000      	b.n	80046dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80046da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d004      	beq.n	80046f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2203      	movs	r2, #3
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80046f2:	e003      	b.n	80046fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8272 	beq.w	8004bf2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	4798      	blx	r3
 8004716:	e26c      	b.n	8004bf2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a43      	ldr	r2, [pc, #268]	; (800482c <HAL_DMA_IRQHandler+0xa48>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d022      	beq.n	8004768 <HAL_DMA_IRQHandler+0x984>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a42      	ldr	r2, [pc, #264]	; (8004830 <HAL_DMA_IRQHandler+0xa4c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d01d      	beq.n	8004768 <HAL_DMA_IRQHandler+0x984>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a40      	ldr	r2, [pc, #256]	; (8004834 <HAL_DMA_IRQHandler+0xa50>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d018      	beq.n	8004768 <HAL_DMA_IRQHandler+0x984>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3f      	ldr	r2, [pc, #252]	; (8004838 <HAL_DMA_IRQHandler+0xa54>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <HAL_DMA_IRQHandler+0x984>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3d      	ldr	r2, [pc, #244]	; (800483c <HAL_DMA_IRQHandler+0xa58>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <HAL_DMA_IRQHandler+0x984>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a3c      	ldr	r2, [pc, #240]	; (8004840 <HAL_DMA_IRQHandler+0xa5c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_DMA_IRQHandler+0x984>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3a      	ldr	r2, [pc, #232]	; (8004844 <HAL_DMA_IRQHandler+0xa60>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_DMA_IRQHandler+0x984>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a39      	ldr	r2, [pc, #228]	; (8004848 <HAL_DMA_IRQHandler+0xa64>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_DMA_IRQHandler+0x988>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_DMA_IRQHandler+0x98a>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 823f 	beq.w	8004bf2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2204      	movs	r2, #4
 8004786:	409a      	lsls	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80cd 	beq.w	800492c <HAL_DMA_IRQHandler+0xb48>
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80c7 	beq.w	800492c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2204      	movs	r2, #4
 80047a8:	409a      	lsls	r2, r3
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d049      	beq.n	800484c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8210 	beq.w	8004bec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047d4:	e20a      	b.n	8004bec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8206 	beq.w	8004bec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047e8:	e200      	b.n	8004bec <HAL_DMA_IRQHandler+0xe08>
 80047ea:	bf00      	nop
 80047ec:	40020010 	.word	0x40020010
 80047f0:	40020028 	.word	0x40020028
 80047f4:	40020040 	.word	0x40020040
 80047f8:	40020058 	.word	0x40020058
 80047fc:	40020070 	.word	0x40020070
 8004800:	40020088 	.word	0x40020088
 8004804:	400200a0 	.word	0x400200a0
 8004808:	400200b8 	.word	0x400200b8
 800480c:	40020410 	.word	0x40020410
 8004810:	40020428 	.word	0x40020428
 8004814:	40020440 	.word	0x40020440
 8004818:	40020458 	.word	0x40020458
 800481c:	40020470 	.word	0x40020470
 8004820:	40020488 	.word	0x40020488
 8004824:	400204a0 	.word	0x400204a0
 8004828:	400204b8 	.word	0x400204b8
 800482c:	58025408 	.word	0x58025408
 8004830:	5802541c 	.word	0x5802541c
 8004834:	58025430 	.word	0x58025430
 8004838:	58025444 	.word	0x58025444
 800483c:	58025458 	.word	0x58025458
 8004840:	5802546c 	.word	0x5802546c
 8004844:	58025480 	.word	0x58025480
 8004848:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d160      	bne.n	8004918 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7f      	ldr	r2, [pc, #508]	; (8004a58 <HAL_DMA_IRQHandler+0xc74>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d04a      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a7d      	ldr	r2, [pc, #500]	; (8004a5c <HAL_DMA_IRQHandler+0xc78>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d045      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a7c      	ldr	r2, [pc, #496]	; (8004a60 <HAL_DMA_IRQHandler+0xc7c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d040      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a7a      	ldr	r2, [pc, #488]	; (8004a64 <HAL_DMA_IRQHandler+0xc80>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d03b      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a79      	ldr	r2, [pc, #484]	; (8004a68 <HAL_DMA_IRQHandler+0xc84>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d036      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a77      	ldr	r2, [pc, #476]	; (8004a6c <HAL_DMA_IRQHandler+0xc88>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d031      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a76      	ldr	r2, [pc, #472]	; (8004a70 <HAL_DMA_IRQHandler+0xc8c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d02c      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a74      	ldr	r2, [pc, #464]	; (8004a74 <HAL_DMA_IRQHandler+0xc90>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d027      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a73      	ldr	r2, [pc, #460]	; (8004a78 <HAL_DMA_IRQHandler+0xc94>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d022      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a71      	ldr	r2, [pc, #452]	; (8004a7c <HAL_DMA_IRQHandler+0xc98>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01d      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a70      	ldr	r2, [pc, #448]	; (8004a80 <HAL_DMA_IRQHandler+0xc9c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d018      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a6e      	ldr	r2, [pc, #440]	; (8004a84 <HAL_DMA_IRQHandler+0xca0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a6d      	ldr	r2, [pc, #436]	; (8004a88 <HAL_DMA_IRQHandler+0xca4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a6b      	ldr	r2, [pc, #428]	; (8004a8c <HAL_DMA_IRQHandler+0xca8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a6a      	ldr	r2, [pc, #424]	; (8004a90 <HAL_DMA_IRQHandler+0xcac>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xb12>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a68      	ldr	r2, [pc, #416]	; (8004a94 <HAL_DMA_IRQHandler+0xcb0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d108      	bne.n	8004908 <HAL_DMA_IRQHandler+0xb24>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0208 	bic.w	r2, r2, #8
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e007      	b.n	8004918 <HAL_DMA_IRQHandler+0xb34>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0204 	bic.w	r2, r2, #4
 8004916:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8165 	beq.w	8004bec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800492a:	e15f      	b.n	8004bec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2202      	movs	r2, #2
 8004936:	409a      	lsls	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80c5 	beq.w	8004acc <HAL_DMA_IRQHandler+0xce8>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80bf 	beq.w	8004acc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2202      	movs	r2, #2
 8004958:	409a      	lsls	r2, r3
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d018      	beq.n	800499a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 813a 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004984:	e134      	b.n	8004bf0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8130 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004998:	e12a      	b.n	8004bf0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f040 8089 	bne.w	8004ab8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2b      	ldr	r2, [pc, #172]	; (8004a58 <HAL_DMA_IRQHandler+0xc74>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d04a      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a29      	ldr	r2, [pc, #164]	; (8004a5c <HAL_DMA_IRQHandler+0xc78>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d045      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a28      	ldr	r2, [pc, #160]	; (8004a60 <HAL_DMA_IRQHandler+0xc7c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d040      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <HAL_DMA_IRQHandler+0xc80>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d03b      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <HAL_DMA_IRQHandler+0xc84>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d036      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <HAL_DMA_IRQHandler+0xc88>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d031      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a22      	ldr	r2, [pc, #136]	; (8004a70 <HAL_DMA_IRQHandler+0xc8c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d02c      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a20      	ldr	r2, [pc, #128]	; (8004a74 <HAL_DMA_IRQHandler+0xc90>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d027      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1f      	ldr	r2, [pc, #124]	; (8004a78 <HAL_DMA_IRQHandler+0xc94>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d022      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <HAL_DMA_IRQHandler+0xc98>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01d      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <HAL_DMA_IRQHandler+0xc9c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d018      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <HAL_DMA_IRQHandler+0xca0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <HAL_DMA_IRQHandler+0xca4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00e      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <HAL_DMA_IRQHandler+0xca8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d009      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <HAL_DMA_IRQHandler+0xcac>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xc62>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <HAL_DMA_IRQHandler+0xcb0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d128      	bne.n	8004a98 <HAL_DMA_IRQHandler+0xcb4>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0214 	bic.w	r2, r2, #20
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e027      	b.n	8004aa8 <HAL_DMA_IRQHandler+0xcc4>
 8004a58:	40020010 	.word	0x40020010
 8004a5c:	40020028 	.word	0x40020028
 8004a60:	40020040 	.word	0x40020040
 8004a64:	40020058 	.word	0x40020058
 8004a68:	40020070 	.word	0x40020070
 8004a6c:	40020088 	.word	0x40020088
 8004a70:	400200a0 	.word	0x400200a0
 8004a74:	400200b8 	.word	0x400200b8
 8004a78:	40020410 	.word	0x40020410
 8004a7c:	40020428 	.word	0x40020428
 8004a80:	40020440 	.word	0x40020440
 8004a84:	40020458 	.word	0x40020458
 8004a88:	40020470 	.word	0x40020470
 8004a8c:	40020488 	.word	0x40020488
 8004a90:	400204a0 	.word	0x400204a0
 8004a94:	400204b8 	.word	0x400204b8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 020a 	bic.w	r2, r2, #10
 8004aa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8097 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aca:	e091      	b.n	8004bf0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8088 	beq.w	8004bf2 <HAL_DMA_IRQHandler+0xe0e>
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8082 	beq.w	8004bf2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a41      	ldr	r2, [pc, #260]	; (8004bf8 <HAL_DMA_IRQHandler+0xe14>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d04a      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3f      	ldr	r2, [pc, #252]	; (8004bfc <HAL_DMA_IRQHandler+0xe18>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d045      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a3e      	ldr	r2, [pc, #248]	; (8004c00 <HAL_DMA_IRQHandler+0xe1c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d040      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a3c      	ldr	r2, [pc, #240]	; (8004c04 <HAL_DMA_IRQHandler+0xe20>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d03b      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a3b      	ldr	r2, [pc, #236]	; (8004c08 <HAL_DMA_IRQHandler+0xe24>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d036      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a39      	ldr	r2, [pc, #228]	; (8004c0c <HAL_DMA_IRQHandler+0xe28>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d031      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a38      	ldr	r2, [pc, #224]	; (8004c10 <HAL_DMA_IRQHandler+0xe2c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d02c      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a36      	ldr	r2, [pc, #216]	; (8004c14 <HAL_DMA_IRQHandler+0xe30>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d027      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a35      	ldr	r2, [pc, #212]	; (8004c18 <HAL_DMA_IRQHandler+0xe34>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d022      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a33      	ldr	r2, [pc, #204]	; (8004c1c <HAL_DMA_IRQHandler+0xe38>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01d      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a32      	ldr	r2, [pc, #200]	; (8004c20 <HAL_DMA_IRQHandler+0xe3c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d018      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a30      	ldr	r2, [pc, #192]	; (8004c24 <HAL_DMA_IRQHandler+0xe40>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d013      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2f      	ldr	r2, [pc, #188]	; (8004c28 <HAL_DMA_IRQHandler+0xe44>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00e      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a2d      	ldr	r2, [pc, #180]	; (8004c2c <HAL_DMA_IRQHandler+0xe48>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2c      	ldr	r2, [pc, #176]	; (8004c30 <HAL_DMA_IRQHandler+0xe4c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xdaa>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2a      	ldr	r2, [pc, #168]	; (8004c34 <HAL_DMA_IRQHandler+0xe50>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d108      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0xdbc>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 021c 	bic.w	r2, r2, #28
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e007      	b.n	8004bb0 <HAL_DMA_IRQHandler+0xdcc>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 020e 	bic.w	r2, r2, #14
 8004bae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	2201      	movs	r2, #1
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	4798      	blx	r3
 8004be6:	e004      	b.n	8004bf2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004be8:	bf00      	nop
 8004bea:	e002      	b.n	8004bf2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bec:	bf00      	nop
 8004bee:	e000      	b.n	8004bf2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bf0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004bf2:	3728      	adds	r7, #40	; 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40020010 	.word	0x40020010
 8004bfc:	40020028 	.word	0x40020028
 8004c00:	40020040 	.word	0x40020040
 8004c04:	40020058 	.word	0x40020058
 8004c08:	40020070 	.word	0x40020070
 8004c0c:	40020088 	.word	0x40020088
 8004c10:	400200a0 	.word	0x400200a0
 8004c14:	400200b8 	.word	0x400200b8
 8004c18:	40020410 	.word	0x40020410
 8004c1c:	40020428 	.word	0x40020428
 8004c20:	40020440 	.word	0x40020440
 8004c24:	40020458 	.word	0x40020458
 8004c28:	40020470 	.word	0x40020470
 8004c2c:	40020488 	.word	0x40020488
 8004c30:	400204a0 	.word	0x400204a0
 8004c34:	400204b8 	.word	0x400204b8

08004c38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a42      	ldr	r2, [pc, #264]	; (8004d50 <DMA_CalcBaseAndBitshift+0x118>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d04a      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a41      	ldr	r2, [pc, #260]	; (8004d54 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d045      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <DMA_CalcBaseAndBitshift+0x120>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d040      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a3e      	ldr	r2, [pc, #248]	; (8004d5c <DMA_CalcBaseAndBitshift+0x124>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d03b      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <DMA_CalcBaseAndBitshift+0x128>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d036      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3b      	ldr	r2, [pc, #236]	; (8004d64 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d031      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a39      	ldr	r2, [pc, #228]	; (8004d68 <DMA_CalcBaseAndBitshift+0x130>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d02c      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a38      	ldr	r2, [pc, #224]	; (8004d6c <DMA_CalcBaseAndBitshift+0x134>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d027      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a36      	ldr	r2, [pc, #216]	; (8004d70 <DMA_CalcBaseAndBitshift+0x138>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d022      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d01d      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a33      	ldr	r2, [pc, #204]	; (8004d78 <DMA_CalcBaseAndBitshift+0x140>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d018      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a32      	ldr	r2, [pc, #200]	; (8004d7c <DMA_CalcBaseAndBitshift+0x144>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a30      	ldr	r2, [pc, #192]	; (8004d80 <DMA_CalcBaseAndBitshift+0x148>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00e      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <DMA_CalcBaseAndBitshift+0x14c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d009      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	; (8004d88 <DMA_CalcBaseAndBitshift+0x150>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2c      	ldr	r2, [pc, #176]	; (8004d8c <DMA_CalcBaseAndBitshift+0x154>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <DMA_CalcBaseAndBitshift+0xac>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <DMA_CalcBaseAndBitshift+0xae>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d024      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	3b10      	subs	r3, #16
 8004cf2:	4a27      	ldr	r2, [pc, #156]	; (8004d90 <DMA_CalcBaseAndBitshift+0x158>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	4a24      	ldr	r2, [pc, #144]	; (8004d94 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d04:	5cd3      	ldrb	r3, [r2, r3]
 8004d06:	461a      	mov	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d908      	bls.n	8004d24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	4b1f      	ldr	r3, [pc, #124]	; (8004d98 <DMA_CalcBaseAndBitshift+0x160>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	659a      	str	r2, [r3, #88]	; 0x58
 8004d22:	e00d      	b.n	8004d40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <DMA_CalcBaseAndBitshift+0x160>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6593      	str	r3, [r2, #88]	; 0x58
 8004d32:	e005      	b.n	8004d40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40020010 	.word	0x40020010
 8004d54:	40020028 	.word	0x40020028
 8004d58:	40020040 	.word	0x40020040
 8004d5c:	40020058 	.word	0x40020058
 8004d60:	40020070 	.word	0x40020070
 8004d64:	40020088 	.word	0x40020088
 8004d68:	400200a0 	.word	0x400200a0
 8004d6c:	400200b8 	.word	0x400200b8
 8004d70:	40020410 	.word	0x40020410
 8004d74:	40020428 	.word	0x40020428
 8004d78:	40020440 	.word	0x40020440
 8004d7c:	40020458 	.word	0x40020458
 8004d80:	40020470 	.word	0x40020470
 8004d84:	40020488 	.word	0x40020488
 8004d88:	400204a0 	.word	0x400204a0
 8004d8c:	400204b8 	.word	0x400204b8
 8004d90:	aaaaaaab 	.word	0xaaaaaaab
 8004d94:	0800ce20 	.word	0x0800ce20
 8004d98:	fffffc00 	.word	0xfffffc00

08004d9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d120      	bne.n	8004df2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d858      	bhi.n	8004e6a <DMA_CheckFifoParam+0xce>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <DMA_CheckFifoParam+0x24>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004dd1 	.word	0x08004dd1
 8004dc4:	08004de3 	.word	0x08004de3
 8004dc8:	08004dd1 	.word	0x08004dd1
 8004dcc:	08004e6b 	.word	0x08004e6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d048      	beq.n	8004e6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004de0:	e045      	b.n	8004e6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dea:	d142      	bne.n	8004e72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004df0:	e03f      	b.n	8004e72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfa:	d123      	bne.n	8004e44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d838      	bhi.n	8004e76 <DMA_CheckFifoParam+0xda>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <DMA_CheckFifoParam+0x70>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e23 	.word	0x08004e23
 8004e14:	08004e1d 	.word	0x08004e1d
 8004e18:	08004e35 	.word	0x08004e35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
        break;
 8004e20:	e030      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d025      	beq.n	8004e7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e32:	e022      	b.n	8004e7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e3c:	d11f      	bne.n	8004e7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e42:	e01c      	b.n	8004e7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d902      	bls.n	8004e52 <DMA_CheckFifoParam+0xb6>
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d003      	beq.n	8004e58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e50:	e018      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
        break;
 8004e56:	e015      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
    break;
 8004e68:	e00b      	b.n	8004e82 <DMA_CheckFifoParam+0xe6>
        break;
 8004e6a:	bf00      	nop
 8004e6c:	e00a      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        break;
 8004e6e:	bf00      	nop
 8004e70:	e008      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        break;
 8004e72:	bf00      	nop
 8004e74:	e006      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        break;
 8004e76:	bf00      	nop
 8004e78:	e004      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        break;
 8004e7a:	bf00      	nop
 8004e7c:	e002      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        break;
 8004e7e:	bf00      	nop
 8004e80:	e000      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
    break;
 8004e82:	bf00      	nop
    }
  }

  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop

08004e94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a38      	ldr	r2, [pc, #224]	; (8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d022      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a36      	ldr	r2, [pc, #216]	; (8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01d      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a35      	ldr	r2, [pc, #212]	; (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d018      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a33      	ldr	r2, [pc, #204]	; (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a32      	ldr	r2, [pc, #200]	; (8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a30      	ldr	r2, [pc, #192]	; (8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2f      	ldr	r2, [pc, #188]	; (8004fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2d      	ldr	r2, [pc, #180]	; (8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d101      	bne.n	8004ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01a      	beq.n	8004f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	3b08      	subs	r3, #8
 8004f04:	4a28      	ldr	r2, [pc, #160]	; (8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4b26      	ldr	r3, [pc, #152]	; (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	461a      	mov	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a24      	ldr	r2, [pc, #144]	; (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	2201      	movs	r2, #1
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f30:	e024      	b.n	8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	3b10      	subs	r3, #16
 8004f3a:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d806      	bhi.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d902      	bls.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3308      	adds	r3, #8
 8004f58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	2201      	movs	r2, #1
 8004f76:	409a      	lsls	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	58025408 	.word	0x58025408
 8004f8c:	5802541c 	.word	0x5802541c
 8004f90:	58025430 	.word	0x58025430
 8004f94:	58025444 	.word	0x58025444
 8004f98:	58025458 	.word	0x58025458
 8004f9c:	5802546c 	.word	0x5802546c
 8004fa0:	58025480 	.word	0x58025480
 8004fa4:	58025494 	.word	0x58025494
 8004fa8:	cccccccd 	.word	0xcccccccd
 8004fac:	16009600 	.word	0x16009600
 8004fb0:	58025880 	.word	0x58025880
 8004fb4:	aaaaaaab 	.word	0xaaaaaaab
 8004fb8:	400204b8 	.word	0x400204b8
 8004fbc:	4002040f 	.word	0x4002040f
 8004fc0:	10008200 	.word	0x10008200
 8004fc4:	40020880 	.word	0x40020880

08004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d04a      	beq.n	8005074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d847      	bhi.n	8005074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a25      	ldr	r2, [pc, #148]	; (8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d022      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a24      	ldr	r2, [pc, #144]	; (8005084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d01d      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a22      	ldr	r2, [pc, #136]	; (8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d018      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a21      	ldr	r2, [pc, #132]	; (800508c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00e      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1e      	ldr	r2, [pc, #120]	; (8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d009      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1b      	ldr	r2, [pc, #108]	; (800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005038:	2300      	movs	r3, #0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	461a      	mov	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005050:	671a      	str	r2, [r3, #112]	; 0x70
 8005052:	e009      	b.n	8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	461a      	mov	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a11      	ldr	r2, [pc, #68]	; (80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005066:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3b01      	subs	r3, #1
 800506c:	2201      	movs	r2, #1
 800506e:	409a      	lsls	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	58025408 	.word	0x58025408
 8005084:	5802541c 	.word	0x5802541c
 8005088:	58025430 	.word	0x58025430
 800508c:	58025444 	.word	0x58025444
 8005090:	58025458 	.word	0x58025458
 8005094:	5802546c 	.word	0x5802546c
 8005098:	58025480 	.word	0x58025480
 800509c:	58025494 	.word	0x58025494
 80050a0:	1600963f 	.word	0x1600963f
 80050a4:	58025940 	.word	0x58025940
 80050a8:	1000823f 	.word	0x1000823f
 80050ac:	40020940 	.word	0x40020940

080050b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e0cf      	b.n	8005262 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d106      	bne.n	80050da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2223      	movs	r2, #35	; 0x23
 80050d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fd f8d1 	bl	800227c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050da:	4b64      	ldr	r3, [pc, #400]	; (800526c <HAL_ETH_Init+0x1bc>)
 80050dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050e0:	4a62      	ldr	r2, [pc, #392]	; (800526c <HAL_ETH_Init+0x1bc>)
 80050e2:	f043 0302 	orr.w	r3, r3, #2
 80050e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050ea:	4b60      	ldr	r3, [pc, #384]	; (800526c <HAL_ETH_Init+0x1bc>)
 80050ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	7a1b      	ldrb	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005100:	2000      	movs	r0, #0
 8005102:	f7fd fc8b 	bl	8002a1c <HAL_SYSCFG_ETHInterfaceSelect>
 8005106:	e003      	b.n	8005110 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005108:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800510c:	f7fd fc86 	bl	8002a1c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005110:	4b57      	ldr	r3, [pc, #348]	; (8005270 <HAL_ETH_Init+0x1c0>)
 8005112:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800512a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800512c:	f7fd fc3a 	bl	80029a4 <HAL_GetTick>
 8005130:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005132:	e011      	b.n	8005158 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005134:	f7fd fc36 	bl	80029a4 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005142:	d909      	bls.n	8005158 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2204      	movs	r2, #4
 8005148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	22e0      	movs	r2, #224	; 0xe0
 8005150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e084      	b.n	8005262 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e4      	bne.n	8005134 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f886 	bl	800527c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005170:	f001 fefc 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8005174:	4603      	mov	r3, r0
 8005176:	4a3f      	ldr	r2, [pc, #252]	; (8005274 <HAL_ETH_Init+0x1c4>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	0c9a      	lsrs	r2, r3, #18
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3a01      	subs	r2, #1
 8005184:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fa71 	bl	8005670 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005196:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800519a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d009      	beq.n	80051ce <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	22e0      	movs	r2, #224	; 0xe0
 80051c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e049      	b.n	8005262 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80051da:	4b27      	ldr	r3, [pc, #156]	; (8005278 <HAL_ETH_Init+0x1c8>)
 80051dc:	4013      	ands	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6952      	ldr	r2, [r2, #20]
 80051e2:	0051      	lsls	r1, r2, #1
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051ee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fad9 	bl	80057aa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fb1f 	bl	800583c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	3305      	adds	r3, #5
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	3304      	adds	r3, #4
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	4619      	mov	r1, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	3303      	adds	r3, #3
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	061a      	lsls	r2, r3, #24
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	3302      	adds	r3, #2
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	3301      	adds	r3, #1
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800523c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800524a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800524c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2210      	movs	r2, #16
 800525c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	58024400 	.word	0x58024400
 8005270:	58000400 	.word	0x58000400
 8005274:	431bde83 	.word	0x431bde83
 8005278:	ffff8001 	.word	0xffff8001

0800527c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800528c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005294:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005296:	f001 fe69 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 800529a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d908      	bls.n	80052b6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4a1d      	ldr	r2, [pc, #116]	; (800531c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d804      	bhi.n	80052b6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e027      	b.n	8005306 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4a18      	ldr	r2, [pc, #96]	; (800531c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d908      	bls.n	80052d0 <HAL_ETH_SetMDIOClockRange+0x54>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4a17      	ldr	r2, [pc, #92]	; (8005320 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d204      	bcs.n	80052d0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e01a      	b.n	8005306 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4a13      	ldr	r2, [pc, #76]	; (8005320 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d303      	bcc.n	80052e0 <HAL_ETH_SetMDIOClockRange+0x64>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4a12      	ldr	r2, [pc, #72]	; (8005324 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d911      	bls.n	8005304 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a10      	ldr	r2, [pc, #64]	; (8005324 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d908      	bls.n	80052fa <HAL_ETH_SetMDIOClockRange+0x7e>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a0f      	ldr	r2, [pc, #60]	; (8005328 <HAL_ETH_SetMDIOClockRange+0xac>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d804      	bhi.n	80052fa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e005      	b.n	8005306 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e000      	b.n	8005306 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005304:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	01312cff 	.word	0x01312cff
 800531c:	02160ebf 	.word	0x02160ebf
 8005320:	03938700 	.word	0x03938700
 8005324:	05f5e0ff 	.word	0x05f5e0ff
 8005328:	08f0d17f 	.word	0x08f0d17f

0800532c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800533e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	791b      	ldrb	r3, [r3, #4]
 8005344:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005346:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	7b1b      	ldrb	r3, [r3, #12]
 800534c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800534e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	7b5b      	ldrb	r3, [r3, #13]
 8005354:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005356:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	7b9b      	ldrb	r3, [r3, #14]
 800535c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800535e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	7bdb      	ldrb	r3, [r3, #15]
 8005364:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005366:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	7c12      	ldrb	r2, [r2, #16]
 800536c:	2a00      	cmp	r2, #0
 800536e:	d102      	bne.n	8005376 <ETH_SetMACConfig+0x4a>
 8005370:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005374:	e000      	b.n	8005378 <ETH_SetMACConfig+0x4c>
 8005376:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005378:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	7c52      	ldrb	r2, [r2, #17]
 800537e:	2a00      	cmp	r2, #0
 8005380:	d102      	bne.n	8005388 <ETH_SetMACConfig+0x5c>
 8005382:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005386:	e000      	b.n	800538a <ETH_SetMACConfig+0x5e>
 8005388:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800538a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	7c9b      	ldrb	r3, [r3, #18]
 8005390:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005392:	431a      	orrs	r2, r3
               macconf->Speed |
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005398:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800539e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	7f1b      	ldrb	r3, [r3, #28]
 80053a4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80053a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	7f5b      	ldrb	r3, [r3, #29]
 80053ac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80053ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	7f92      	ldrb	r2, [r2, #30]
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	d102      	bne.n	80053be <ETH_SetMACConfig+0x92>
 80053b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053bc:	e000      	b.n	80053c0 <ETH_SetMACConfig+0x94>
 80053be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80053c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	7fdb      	ldrb	r3, [r3, #31]
 80053c6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80053c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80053d0:	2a00      	cmp	r2, #0
 80053d2:	d102      	bne.n	80053da <ETH_SetMACConfig+0xae>
 80053d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053d8:	e000      	b.n	80053dc <ETH_SetMACConfig+0xb0>
 80053da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80053dc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80053e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053ea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80053ec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4b56      	ldr	r3, [pc, #344]	; (8005558 <ETH_SetMACConfig+0x22c>)
 80053fe:	4013      	ands	r3, r2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	68f9      	ldr	r1, [r7, #12]
 8005406:	430b      	orrs	r3, r1
 8005408:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005416:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005418:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005420:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800542a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800542c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005434:	2a00      	cmp	r2, #0
 8005436:	d102      	bne.n	800543e <ETH_SetMACConfig+0x112>
 8005438:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800543c:	e000      	b.n	8005440 <ETH_SetMACConfig+0x114>
 800543e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005440:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	4b42      	ldr	r3, [pc, #264]	; (800555c <ETH_SetMACConfig+0x230>)
 8005452:	4013      	ands	r3, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	430b      	orrs	r3, r1
 800545c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005464:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	4b3a      	ldr	r3, [pc, #232]	; (8005560 <ETH_SetMACConfig+0x234>)
 8005476:	4013      	ands	r3, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	430b      	orrs	r3, r1
 8005480:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005488:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800548e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005496:	2a00      	cmp	r2, #0
 8005498:	d101      	bne.n	800549e <ETH_SetMACConfig+0x172>
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	e000      	b.n	80054a0 <ETH_SetMACConfig+0x174>
 800549e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80054a0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80054b6:	4013      	ands	r3, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	68f9      	ldr	r1, [r7, #12]
 80054be:	430b      	orrs	r3, r1
 80054c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80054c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80054d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054de:	f023 0103 	bic.w	r1, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80054f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005512:	2a00      	cmp	r2, #0
 8005514:	d101      	bne.n	800551a <ETH_SetMACConfig+0x1ee>
 8005516:	2240      	movs	r2, #64	; 0x40
 8005518:	e000      	b.n	800551c <ETH_SetMACConfig+0x1f0>
 800551a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800551c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005524:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005526:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800552e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800553c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	430a      	orrs	r2, r1
 8005548:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	00048083 	.word	0x00048083
 800555c:	c0f88000 	.word	0xc0f88000
 8005560:	fffffef0 	.word	0xfffffef0

08005564 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b38      	ldr	r3, [pc, #224]	; (800565c <ETH_SetDMAConfig+0xf8>)
 800557a:	4013      	ands	r3, r2
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	6811      	ldr	r1, [r2, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	430b      	orrs	r3, r1
 8005586:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800558a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	791b      	ldrb	r3, [r3, #4]
 8005590:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005596:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	7b1b      	ldrb	r3, [r3, #12]
 800559c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	4b2c      	ldr	r3, [pc, #176]	; (8005660 <ETH_SetDMAConfig+0xfc>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	68f9      	ldr	r1, [r7, #12]
 80055b6:	430b      	orrs	r3, r1
 80055b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	7b5b      	ldrb	r3, [r3, #13]
 80055c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80055d8:	4b22      	ldr	r3, [pc, #136]	; (8005664 <ETH_SetDMAConfig+0x100>)
 80055da:	4013      	ands	r3, r2
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	430b      	orrs	r3, r1
 80055e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	7d1b      	ldrb	r3, [r3, #20]
 80055f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80055f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	7f5b      	ldrb	r3, [r3, #29]
 80055fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800560e:	4b16      	ldr	r3, [pc, #88]	; (8005668 <ETH_SetDMAConfig+0x104>)
 8005610:	4013      	ands	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	430b      	orrs	r3, r1
 800561a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800561e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	7f1b      	ldrb	r3, [r3, #28]
 8005626:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005638:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <ETH_SetDMAConfig+0x108>)
 800563e:	4013      	ands	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	68f9      	ldr	r1, [r7, #12]
 8005646:	430b      	orrs	r3, r1
 8005648:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800564c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005650:	bf00      	nop
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	ffff87fd 	.word	0xffff87fd
 8005660:	ffff2ffe 	.word	0xffff2ffe
 8005664:	fffec000 	.word	0xfffec000
 8005668:	ffc0efef 	.word	0xffc0efef
 800566c:	7fc0ffff 	.word	0x7fc0ffff

08005670 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0a4      	sub	sp, #144	; 0x90
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800567e:	2300      	movs	r3, #0
 8005680:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005682:	2300      	movs	r3, #0
 8005684:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005688:	2300      	movs	r3, #0
 800568a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80056ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80056c8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80056cc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80056d4:	2300      	movs	r3, #0
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80056de:	2300      	movs	r3, #0
 80056e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80056ea:	2300      	movs	r3, #0
 80056ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80056f2:	2300      	movs	r3, #0
 80056f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005708:	2320      	movs	r3, #32
 800570a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005714:	2300      	movs	r3, #0
 8005716:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800571a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005720:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005724:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800572c:	2302      	movs	r3, #2
 800572e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005732:	2300      	movs	r3, #0
 8005734:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005738:	2300      	movs	r3, #0
 800573a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800573e:	2300      	movs	r3, #0
 8005740:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800574a:	2300      	movs	r3, #0
 800574c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fde6 	bl	800532c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005760:	2301      	movs	r3, #1
 8005762:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005764:	2301      	movs	r3, #1
 8005766:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005768:	2300      	movs	r3, #0
 800576a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800576c:	2300      	movs	r3, #0
 800576e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005772:	2300      	movs	r3, #0
 8005774:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005776:	2300      	movs	r3, #0
 8005778:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800577a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800577e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005780:	2300      	movs	r3, #0
 8005782:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005784:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005788:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800578a:	2300      	movs	r3, #0
 800578c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005790:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005796:	f107 0308 	add.w	r3, r7, #8
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fee1 	bl	8005564 <ETH_SetDMAConfig>
}
 80057a2:	bf00      	nop
 80057a4:	3790      	adds	r7, #144	; 0x90
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e01d      	b.n	80057f4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68d9      	ldr	r1, [r3, #12]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	440b      	add	r3, r1
 80057c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2200      	movs	r2, #0
 80057e0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	3206      	adds	r2, #6
 80057ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3301      	adds	r3, #1
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d9de      	bls.n	80057b8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005808:	461a      	mov	r2, r3
 800580a:	2303      	movs	r3, #3
 800580c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e023      	b.n	8005892 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6919      	ldr	r1, [r3, #16]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	440b      	add	r3, r1
 800585a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2200      	movs	r2, #0
 8005872:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	3212      	adds	r2, #18
 8005888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d9d8      	bls.n	800584a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058be:	461a      	mov	r2, r3
 80058c0:	2303      	movs	r3, #3
 80058c2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b089      	sub	sp, #36	; 0x24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005906:	4b89      	ldr	r3, [pc, #548]	; (8005b2c <HAL_GPIO_Init+0x234>)
 8005908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800590a:	e194      	b.n	8005c36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	2101      	movs	r1, #1
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	4013      	ands	r3, r2
 800591a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8186 	beq.w	8005c30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d005      	beq.n	800593c <HAL_GPIO_Init+0x44>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d130      	bne.n	800599e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	2203      	movs	r2, #3
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43db      	mvns	r3, r3
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	4013      	ands	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005972:	2201      	movs	r2, #1
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	43db      	mvns	r3, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4013      	ands	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	f003 0201 	and.w	r2, r3, #1
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	4313      	orrs	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d017      	beq.n	80059da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	2203      	movs	r2, #3
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	43db      	mvns	r3, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4013      	ands	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	fa02 f303 	lsl.w	r3, r2, r3
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d123      	bne.n	8005a2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	08da      	lsrs	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3208      	adds	r2, #8
 80059ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	220f      	movs	r2, #15
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	43db      	mvns	r3, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	4013      	ands	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	08da      	lsrs	r2, r3, #3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3208      	adds	r2, #8
 8005a28:	69b9      	ldr	r1, [r7, #24]
 8005a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	2203      	movs	r2, #3
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4013      	ands	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f003 0203 	and.w	r2, r3, #3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 80e0 	beq.w	8005c30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a70:	4b2f      	ldr	r3, [pc, #188]	; (8005b30 <HAL_GPIO_Init+0x238>)
 8005a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a76:	4a2e      	ldr	r2, [pc, #184]	; (8005b30 <HAL_GPIO_Init+0x238>)
 8005a78:	f043 0302 	orr.w	r3, r3, #2
 8005a7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a80:	4b2b      	ldr	r3, [pc, #172]	; (8005b30 <HAL_GPIO_Init+0x238>)
 8005a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a8e:	4a29      	ldr	r2, [pc, #164]	; (8005b34 <HAL_GPIO_Init+0x23c>)
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	089b      	lsrs	r3, r3, #2
 8005a94:	3302      	adds	r3, #2
 8005a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	220f      	movs	r2, #15
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	43db      	mvns	r3, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a20      	ldr	r2, [pc, #128]	; (8005b38 <HAL_GPIO_Init+0x240>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d052      	beq.n	8005b60 <HAL_GPIO_Init+0x268>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1f      	ldr	r2, [pc, #124]	; (8005b3c <HAL_GPIO_Init+0x244>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d031      	beq.n	8005b26 <HAL_GPIO_Init+0x22e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1e      	ldr	r2, [pc, #120]	; (8005b40 <HAL_GPIO_Init+0x248>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d02b      	beq.n	8005b22 <HAL_GPIO_Init+0x22a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <HAL_GPIO_Init+0x24c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d025      	beq.n	8005b1e <HAL_GPIO_Init+0x226>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <HAL_GPIO_Init+0x250>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d01f      	beq.n	8005b1a <HAL_GPIO_Init+0x222>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <HAL_GPIO_Init+0x254>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d019      	beq.n	8005b16 <HAL_GPIO_Init+0x21e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a1a      	ldr	r2, [pc, #104]	; (8005b50 <HAL_GPIO_Init+0x258>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d013      	beq.n	8005b12 <HAL_GPIO_Init+0x21a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <HAL_GPIO_Init+0x25c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00d      	beq.n	8005b0e <HAL_GPIO_Init+0x216>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <HAL_GPIO_Init+0x260>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <HAL_GPIO_Init+0x212>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a17      	ldr	r2, [pc, #92]	; (8005b5c <HAL_GPIO_Init+0x264>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d101      	bne.n	8005b06 <HAL_GPIO_Init+0x20e>
 8005b02:	2309      	movs	r3, #9
 8005b04:	e02d      	b.n	8005b62 <HAL_GPIO_Init+0x26a>
 8005b06:	230a      	movs	r3, #10
 8005b08:	e02b      	b.n	8005b62 <HAL_GPIO_Init+0x26a>
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	e029      	b.n	8005b62 <HAL_GPIO_Init+0x26a>
 8005b0e:	2307      	movs	r3, #7
 8005b10:	e027      	b.n	8005b62 <HAL_GPIO_Init+0x26a>
 8005b12:	2306      	movs	r3, #6
 8005b14:	e025      	b.n	8005b62 <HAL_GPIO_Init+0x26a>
 8005b16:	2305      	movs	r3, #5
 8005b18:	e023      	b.n	8005b62 <HAL_GPIO_Init+0x26a>
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	e021      	b.n	8005b62 <HAL_GPIO_Init+0x26a>
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e01f      	b.n	8005b62 <HAL_GPIO_Init+0x26a>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e01d      	b.n	8005b62 <HAL_GPIO_Init+0x26a>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e01b      	b.n	8005b62 <HAL_GPIO_Init+0x26a>
 8005b2a:	bf00      	nop
 8005b2c:	58000080 	.word	0x58000080
 8005b30:	58024400 	.word	0x58024400
 8005b34:	58000400 	.word	0x58000400
 8005b38:	58020000 	.word	0x58020000
 8005b3c:	58020400 	.word	0x58020400
 8005b40:	58020800 	.word	0x58020800
 8005b44:	58020c00 	.word	0x58020c00
 8005b48:	58021000 	.word	0x58021000
 8005b4c:	58021400 	.word	0x58021400
 8005b50:	58021800 	.word	0x58021800
 8005b54:	58021c00 	.word	0x58021c00
 8005b58:	58022000 	.word	0x58022000
 8005b5c:	58022400 	.word	0x58022400
 8005b60:	2300      	movs	r3, #0
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	f002 0203 	and.w	r2, r2, #3
 8005b68:	0092      	lsls	r2, r2, #2
 8005b6a:	4093      	lsls	r3, r2
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b72:	4938      	ldr	r1, [pc, #224]	; (8005c54 <HAL_GPIO_Init+0x35c>)
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	3302      	adds	r3, #2
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4013      	ands	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4013      	ands	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	3301      	adds	r3, #1
 8005c34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f47f ae63 	bne.w	800590c <HAL_GPIO_Init+0x14>
  }
}
 8005c46:	bf00      	nop
 8005c48:	bf00      	nop
 8005c4a:	3724      	adds	r7, #36	; 0x24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	58000400 	.word	0x58000400

08005c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	887b      	ldrh	r3, [r7, #2]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c70:	2301      	movs	r3, #1
 8005c72:	73fb      	strb	r3, [r7, #15]
 8005c74:	e001      	b.n	8005c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	807b      	strh	r3, [r7, #2]
 8005c94:	4613      	mov	r3, r2
 8005c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c98:	787b      	ldrb	r3, [r7, #1]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c9e:	887a      	ldrh	r2, [r7, #2]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ca4:	e003      	b.n	8005cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ca6:	887b      	ldrh	r3, [r7, #2]
 8005ca8:	041a      	lsls	r2, r3, #16
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	619a      	str	r2, [r3, #24]
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ccc:	887a      	ldrh	r2, [r7, #2]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	041a      	lsls	r2, r3, #16
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	43d9      	mvns	r1, r3
 8005cd8:	887b      	ldrh	r3, [r7, #2]
 8005cda:	400b      	ands	r3, r1
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	619a      	str	r2, [r3, #24]
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005cf8:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <HAL_HSEM_FastTake+0x2c>)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3320      	adds	r3, #32
 8005cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d02:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <HAL_HSEM_FastTake+0x30>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d101      	bne.n	8005d0c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	58026400 	.word	0x58026400
 8005d20:	80000300 	.word	0x80000300

08005d24 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005d2e:	4906      	ldr	r1, [pc, #24]	; (8005d48 <HAL_HSEM_Release+0x24>)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	58026400 	.word	0x58026400

08005d4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4e:	b08f      	sub	sp, #60	; 0x3c
 8005d50:	af0a      	add	r7, sp, #40	; 0x28
 8005d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e116      	b.n	8005f8c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7fc fc8b 	bl	8002694 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2203      	movs	r2, #3
 8005d82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f004 fded 	bl	800a97c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	687e      	ldr	r6, [r7, #4]
 8005daa:	466d      	mov	r5, sp
 8005dac:	f106 0410 	add.w	r4, r6, #16
 8005db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005db8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005dbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005dc0:	1d33      	adds	r3, r6, #4
 8005dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dc4:	6838      	ldr	r0, [r7, #0]
 8005dc6:	f004 fd6b 	bl	800a8a0 <USB_CoreInit>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0d7      	b.n	8005f8c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2100      	movs	r1, #0
 8005de2:	4618      	mov	r0, r3
 8005de4:	f004 fddb 	bl	800a99e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005de8:	2300      	movs	r3, #0
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e04a      	b.n	8005e84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005dee:	7bfa      	ldrb	r2, [r7, #15]
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	333d      	adds	r3, #61	; 0x3d
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e02:	7bfa      	ldrb	r2, [r7, #15]
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	333c      	adds	r3, #60	; 0x3c
 8005e12:	7bfa      	ldrb	r2, [r7, #15]
 8005e14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e16:	7bfa      	ldrb	r2, [r7, #15]
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	b298      	uxth	r0, r3
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	3344      	adds	r3, #68	; 0x44
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e2e:	7bfa      	ldrb	r2, [r7, #15]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3340      	adds	r3, #64	; 0x40
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e42:	7bfa      	ldrb	r2, [r7, #15]
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	3348      	adds	r3, #72	; 0x48
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e56:	7bfa      	ldrb	r2, [r7, #15]
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	334c      	adds	r3, #76	; 0x4c
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e6a:	7bfa      	ldrb	r2, [r7, #15]
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3354      	adds	r3, #84	; 0x54
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	3301      	adds	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	7bfa      	ldrb	r2, [r7, #15]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3af      	bcc.n	8005dee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
 8005e92:	e044      	b.n	8005f1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e94:	7bfa      	ldrb	r2, [r7, #15]
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005eaa:	7bfa      	ldrb	r2, [r7, #15]
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005ebc:	7bfa      	ldrb	r2, [r7, #15]
 8005ebe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ed6:	7bfa      	ldrb	r2, [r7, #15]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005eec:	7bfa      	ldrb	r2, [r7, #15]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f02:	7bfa      	ldrb	r2, [r7, #15]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
 8005f1e:	7bfa      	ldrb	r2, [r7, #15]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d3b5      	bcc.n	8005e94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	687e      	ldr	r6, [r7, #4]
 8005f30:	466d      	mov	r5, sp
 8005f32:	f106 0410 	add.w	r4, r6, #16
 8005f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f42:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f46:	1d33      	adds	r3, r6, #4
 8005f48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f4a:	6838      	ldr	r0, [r7, #0]
 8005f4c:	f004 fd74 	bl	800aa38 <USB_DevInit>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e014      	b.n	8005f8c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d102      	bne.n	8005f80 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f80a 	bl	8005f94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f004 ff32 	bl	800adee <USB_DevDisconnect>

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fc2:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	10000003 	.word	0x10000003

08005fdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005fe4:	4b29      	ldr	r3, [pc, #164]	; (800608c <HAL_PWREx_ConfigSupply+0xb0>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	2b06      	cmp	r3, #6
 8005fee:	d00a      	beq.n	8006006 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ff0:	4b26      	ldr	r3, [pc, #152]	; (800608c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d001      	beq.n	8006002 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e040      	b.n	8006084 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	e03e      	b.n	8006084 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006006:	4b21      	ldr	r3, [pc, #132]	; (800608c <HAL_PWREx_ConfigSupply+0xb0>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800600e:	491f      	ldr	r1, [pc, #124]	; (800608c <HAL_PWREx_ConfigSupply+0xb0>)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4313      	orrs	r3, r2
 8006014:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006016:	f7fc fcc5 	bl	80029a4 <HAL_GetTick>
 800601a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800601c:	e009      	b.n	8006032 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800601e:	f7fc fcc1 	bl	80029a4 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800602c:	d901      	bls.n	8006032 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e028      	b.n	8006084 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006032:	4b16      	ldr	r3, [pc, #88]	; (800608c <HAL_PWREx_ConfigSupply+0xb0>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800603a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800603e:	d1ee      	bne.n	800601e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b1e      	cmp	r3, #30
 8006044:	d008      	beq.n	8006058 <HAL_PWREx_ConfigSupply+0x7c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b2e      	cmp	r3, #46	; 0x2e
 800604a:	d005      	beq.n	8006058 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b1d      	cmp	r3, #29
 8006050:	d002      	beq.n	8006058 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b2d      	cmp	r3, #45	; 0x2d
 8006056:	d114      	bne.n	8006082 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006058:	f7fc fca4 	bl	80029a4 <HAL_GetTick>
 800605c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800605e:	e009      	b.n	8006074 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006060:	f7fc fca0 	bl	80029a4 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800606e:	d901      	bls.n	8006074 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e007      	b.n	8006084 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006074:	4b05      	ldr	r3, [pc, #20]	; (800608c <HAL_PWREx_ConfigSupply+0xb0>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d1ee      	bne.n	8006060 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	58024800 	.word	0x58024800

08006090 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4a04      	ldr	r2, [pc, #16]	; (80060ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800609a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800609e:	60d3      	str	r3, [r2, #12]
}
 80060a0:	bf00      	nop
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	58024800 	.word	0x58024800

080060b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08c      	sub	sp, #48	; 0x30
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d102      	bne.n	80060c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f000 bc1d 	b.w	80068fe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8087 	beq.w	80061e0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d2:	4b99      	ldr	r3, [pc, #612]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060dc:	4b96      	ldr	r3, [pc, #600]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d007      	beq.n	80060f8 <HAL_RCC_OscConfig+0x48>
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	2b18      	cmp	r3, #24
 80060ec:	d110      	bne.n	8006110 <HAL_RCC_OscConfig+0x60>
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d10b      	bne.n	8006110 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f8:	4b8f      	ldr	r3, [pc, #572]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d06c      	beq.n	80061de <HAL_RCC_OscConfig+0x12e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d168      	bne.n	80061de <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e3f6      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006118:	d106      	bne.n	8006128 <HAL_RCC_OscConfig+0x78>
 800611a:	4b87      	ldr	r3, [pc, #540]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a86      	ldr	r2, [pc, #536]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	e02e      	b.n	8006186 <HAL_RCC_OscConfig+0xd6>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10c      	bne.n	800614a <HAL_RCC_OscConfig+0x9a>
 8006130:	4b81      	ldr	r3, [pc, #516]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a80      	ldr	r2, [pc, #512]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	4b7e      	ldr	r3, [pc, #504]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a7d      	ldr	r2, [pc, #500]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e01d      	b.n	8006186 <HAL_RCC_OscConfig+0xd6>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006152:	d10c      	bne.n	800616e <HAL_RCC_OscConfig+0xbe>
 8006154:	4b78      	ldr	r3, [pc, #480]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a77      	ldr	r2, [pc, #476]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 800615a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	4b75      	ldr	r3, [pc, #468]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a74      	ldr	r2, [pc, #464]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	e00b      	b.n	8006186 <HAL_RCC_OscConfig+0xd6>
 800616e:	4b72      	ldr	r3, [pc, #456]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a71      	ldr	r2, [pc, #452]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	4b6f      	ldr	r3, [pc, #444]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a6e      	ldr	r2, [pc, #440]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006184:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d013      	beq.n	80061b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618e:	f7fc fc09 	bl	80029a4 <HAL_GetTick>
 8006192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006196:	f7fc fc05 	bl	80029a4 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b64      	cmp	r3, #100	; 0x64
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e3aa      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061a8:	4b63      	ldr	r3, [pc, #396]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0f0      	beq.n	8006196 <HAL_RCC_OscConfig+0xe6>
 80061b4:	e014      	b.n	80061e0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b6:	f7fc fbf5 	bl	80029a4 <HAL_GetTick>
 80061ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061be:	f7fc fbf1 	bl	80029a4 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b64      	cmp	r3, #100	; 0x64
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e396      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061d0:	4b59      	ldr	r3, [pc, #356]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f0      	bne.n	80061be <HAL_RCC_OscConfig+0x10e>
 80061dc:	e000      	b.n	80061e0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 80cb 	beq.w	8006384 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061ee:	4b52      	ldr	r3, [pc, #328]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061f6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061f8:	4b4f      	ldr	r3, [pc, #316]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <HAL_RCC_OscConfig+0x164>
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	2b18      	cmp	r3, #24
 8006208:	d156      	bne.n	80062b8 <HAL_RCC_OscConfig+0x208>
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d151      	bne.n	80062b8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006214:	4b48      	ldr	r3, [pc, #288]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_RCC_OscConfig+0x17c>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e368      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800622c:	4b42      	ldr	r3, [pc, #264]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f023 0219 	bic.w	r2, r3, #25
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	493f      	ldr	r1, [pc, #252]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800623e:	f7fc fbb1 	bl	80029a4 <HAL_GetTick>
 8006242:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006246:	f7fc fbad 	bl	80029a4 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e352      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006258:	4b37      	ldr	r3, [pc, #220]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006264:	f7fc fbce 	bl	8002a04 <HAL_GetREVID>
 8006268:	4603      	mov	r3, r0
 800626a:	f241 0203 	movw	r2, #4099	; 0x1003
 800626e:	4293      	cmp	r3, r2
 8006270:	d817      	bhi.n	80062a2 <HAL_RCC_OscConfig+0x1f2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	d108      	bne.n	800628c <HAL_RCC_OscConfig+0x1dc>
 800627a:	4b2f      	ldr	r3, [pc, #188]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006282:	4a2d      	ldr	r2, [pc, #180]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006288:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800628a:	e07b      	b.n	8006384 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800628c:	4b2a      	ldr	r3, [pc, #168]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	031b      	lsls	r3, r3, #12
 800629a:	4927      	ldr	r1, [pc, #156]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 800629c:	4313      	orrs	r3, r2
 800629e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062a0:	e070      	b.n	8006384 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a2:	4b25      	ldr	r3, [pc, #148]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	061b      	lsls	r3, r3, #24
 80062b0:	4921      	ldr	r1, [pc, #132]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062b6:	e065      	b.n	8006384 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d048      	beq.n	8006352 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062c0:	4b1d      	ldr	r3, [pc, #116]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f023 0219 	bic.w	r2, r3, #25
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	491a      	ldr	r1, [pc, #104]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d2:	f7fc fb67 	bl	80029a4 <HAL_GetTick>
 80062d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062da:	f7fc fb63 	bl	80029a4 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e308      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062ec:	4b12      	ldr	r3, [pc, #72]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f0      	beq.n	80062da <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f8:	f7fc fb84 	bl	8002a04 <HAL_GetREVID>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8006302:	4293      	cmp	r3, r2
 8006304:	d81a      	bhi.n	800633c <HAL_RCC_OscConfig+0x28c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d108      	bne.n	8006320 <HAL_RCC_OscConfig+0x270>
 800630e:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006316:	4a08      	ldr	r2, [pc, #32]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631c:	6053      	str	r3, [r2, #4]
 800631e:	e031      	b.n	8006384 <HAL_RCC_OscConfig+0x2d4>
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	031b      	lsls	r3, r3, #12
 800632e:	4902      	ldr	r1, [pc, #8]	; (8006338 <HAL_RCC_OscConfig+0x288>)
 8006330:	4313      	orrs	r3, r2
 8006332:	604b      	str	r3, [r1, #4]
 8006334:	e026      	b.n	8006384 <HAL_RCC_OscConfig+0x2d4>
 8006336:	bf00      	nop
 8006338:	58024400 	.word	0x58024400
 800633c:	4b9a      	ldr	r3, [pc, #616]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	061b      	lsls	r3, r3, #24
 800634a:	4997      	ldr	r1, [pc, #604]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 800634c:	4313      	orrs	r3, r2
 800634e:	604b      	str	r3, [r1, #4]
 8006350:	e018      	b.n	8006384 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006352:	4b95      	ldr	r3, [pc, #596]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a94      	ldr	r2, [pc, #592]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635e:	f7fc fb21 	bl	80029a4 <HAL_GetTick>
 8006362:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006366:	f7fc fb1d 	bl	80029a4 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e2c2      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006378:	4b8b      	ldr	r3, [pc, #556]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f0      	bne.n	8006366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0310 	and.w	r3, r3, #16
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80a9 	beq.w	80064e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006392:	4b85      	ldr	r3, [pc, #532]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800639a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800639c:	4b82      	ldr	r3, [pc, #520]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d007      	beq.n	80063b8 <HAL_RCC_OscConfig+0x308>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	2b18      	cmp	r3, #24
 80063ac:	d13a      	bne.n	8006424 <HAL_RCC_OscConfig+0x374>
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d135      	bne.n	8006424 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063b8:	4b7b      	ldr	r3, [pc, #492]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_RCC_OscConfig+0x320>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	2b80      	cmp	r3, #128	; 0x80
 80063ca:	d001      	beq.n	80063d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e296      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063d0:	f7fc fb18 	bl	8002a04 <HAL_GetREVID>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80063da:	4293      	cmp	r3, r2
 80063dc:	d817      	bhi.n	800640e <HAL_RCC_OscConfig+0x35e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d108      	bne.n	80063f8 <HAL_RCC_OscConfig+0x348>
 80063e6:	4b70      	ldr	r3, [pc, #448]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063ee:	4a6e      	ldr	r2, [pc, #440]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 80063f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063f6:	e075      	b.n	80064e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063f8:	4b6b      	ldr	r3, [pc, #428]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	069b      	lsls	r3, r3, #26
 8006406:	4968      	ldr	r1, [pc, #416]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006408:	4313      	orrs	r3, r2
 800640a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800640c:	e06a      	b.n	80064e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800640e:	4b66      	ldr	r3, [pc, #408]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	061b      	lsls	r3, r3, #24
 800641c:	4962      	ldr	r1, [pc, #392]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 800641e:	4313      	orrs	r3, r2
 8006420:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006422:	e05f      	b.n	80064e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d042      	beq.n	80064b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800642c:	4b5e      	ldr	r3, [pc, #376]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a5d      	ldr	r2, [pc, #372]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fc fab4 	bl	80029a4 <HAL_GetTick>
 800643c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006440:	f7fc fab0 	bl	80029a4 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e255      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006452:	4b55      	ldr	r3, [pc, #340]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0f0      	beq.n	8006440 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800645e:	f7fc fad1 	bl	8002a04 <HAL_GetREVID>
 8006462:	4603      	mov	r3, r0
 8006464:	f241 0203 	movw	r2, #4099	; 0x1003
 8006468:	4293      	cmp	r3, r2
 800646a:	d817      	bhi.n	800649c <HAL_RCC_OscConfig+0x3ec>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	2b20      	cmp	r3, #32
 8006472:	d108      	bne.n	8006486 <HAL_RCC_OscConfig+0x3d6>
 8006474:	4b4c      	ldr	r3, [pc, #304]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800647c:	4a4a      	ldr	r2, [pc, #296]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 800647e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006482:	6053      	str	r3, [r2, #4]
 8006484:	e02e      	b.n	80064e4 <HAL_RCC_OscConfig+0x434>
 8006486:	4b48      	ldr	r3, [pc, #288]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	069b      	lsls	r3, r3, #26
 8006494:	4944      	ldr	r1, [pc, #272]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006496:	4313      	orrs	r3, r2
 8006498:	604b      	str	r3, [r1, #4]
 800649a:	e023      	b.n	80064e4 <HAL_RCC_OscConfig+0x434>
 800649c:	4b42      	ldr	r3, [pc, #264]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	061b      	lsls	r3, r3, #24
 80064aa:	493f      	ldr	r1, [pc, #252]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60cb      	str	r3, [r1, #12]
 80064b0:	e018      	b.n	80064e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064b2:	4b3d      	ldr	r3, [pc, #244]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a3c      	ldr	r2, [pc, #240]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 80064b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064be:	f7fc fa71 	bl	80029a4 <HAL_GetTick>
 80064c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80064c6:	f7fc fa6d 	bl	80029a4 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e212      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064d8:	4b33      	ldr	r3, [pc, #204]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1f0      	bne.n	80064c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d036      	beq.n	800655e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d019      	beq.n	800652c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064f8:	4b2b      	ldr	r3, [pc, #172]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 80064fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fc:	4a2a      	ldr	r2, [pc, #168]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006504:	f7fc fa4e 	bl	80029a4 <HAL_GetTick>
 8006508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800650c:	f7fc fa4a 	bl	80029a4 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e1ef      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800651e:	4b22      	ldr	r3, [pc, #136]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0f0      	beq.n	800650c <HAL_RCC_OscConfig+0x45c>
 800652a:	e018      	b.n	800655e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800652c:	4b1e      	ldr	r3, [pc, #120]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 800652e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006530:	4a1d      	ldr	r2, [pc, #116]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006532:	f023 0301 	bic.w	r3, r3, #1
 8006536:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006538:	f7fc fa34 	bl	80029a4 <HAL_GetTick>
 800653c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006540:	f7fc fa30 	bl	80029a4 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e1d5      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1f0      	bne.n	8006540 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d039      	beq.n	80065de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01c      	beq.n	80065ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006572:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a0c      	ldr	r2, [pc, #48]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 8006578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800657c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800657e:	f7fc fa11 	bl	80029a4 <HAL_GetTick>
 8006582:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006586:	f7fc fa0d 	bl	80029a4 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e1b2      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006598:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <HAL_RCC_OscConfig+0x4f8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0f0      	beq.n	8006586 <HAL_RCC_OscConfig+0x4d6>
 80065a4:	e01b      	b.n	80065de <HAL_RCC_OscConfig+0x52e>
 80065a6:	bf00      	nop
 80065a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065ac:	4b9b      	ldr	r3, [pc, #620]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a9a      	ldr	r2, [pc, #616]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80065b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065b8:	f7fc f9f4 	bl	80029a4 <HAL_GetTick>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065c0:	f7fc f9f0 	bl	80029a4 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e195      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065d2:	4b92      	ldr	r3, [pc, #584]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 8081 	beq.w	80066ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065ec:	4b8c      	ldr	r3, [pc, #560]	; (8006820 <HAL_RCC_OscConfig+0x770>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a8b      	ldr	r2, [pc, #556]	; (8006820 <HAL_RCC_OscConfig+0x770>)
 80065f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065f8:	f7fc f9d4 	bl	80029a4 <HAL_GetTick>
 80065fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006600:	f7fc f9d0 	bl	80029a4 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b64      	cmp	r3, #100	; 0x64
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e175      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006612:	4b83      	ldr	r3, [pc, #524]	; (8006820 <HAL_RCC_OscConfig+0x770>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f0      	beq.n	8006600 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d106      	bne.n	8006634 <HAL_RCC_OscConfig+0x584>
 8006626:	4b7d      	ldr	r3, [pc, #500]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	4a7c      	ldr	r2, [pc, #496]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 800662c:	f043 0301 	orr.w	r3, r3, #1
 8006630:	6713      	str	r3, [r2, #112]	; 0x70
 8006632:	e02d      	b.n	8006690 <HAL_RCC_OscConfig+0x5e0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10c      	bne.n	8006656 <HAL_RCC_OscConfig+0x5a6>
 800663c:	4b77      	ldr	r3, [pc, #476]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 800663e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006640:	4a76      	ldr	r2, [pc, #472]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006642:	f023 0301 	bic.w	r3, r3, #1
 8006646:	6713      	str	r3, [r2, #112]	; 0x70
 8006648:	4b74      	ldr	r3, [pc, #464]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 800664a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664c:	4a73      	ldr	r2, [pc, #460]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 800664e:	f023 0304 	bic.w	r3, r3, #4
 8006652:	6713      	str	r3, [r2, #112]	; 0x70
 8006654:	e01c      	b.n	8006690 <HAL_RCC_OscConfig+0x5e0>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b05      	cmp	r3, #5
 800665c:	d10c      	bne.n	8006678 <HAL_RCC_OscConfig+0x5c8>
 800665e:	4b6f      	ldr	r3, [pc, #444]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006662:	4a6e      	ldr	r2, [pc, #440]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006664:	f043 0304 	orr.w	r3, r3, #4
 8006668:	6713      	str	r3, [r2, #112]	; 0x70
 800666a:	4b6c      	ldr	r3, [pc, #432]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	4a6b      	ldr	r2, [pc, #428]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006670:	f043 0301 	orr.w	r3, r3, #1
 8006674:	6713      	str	r3, [r2, #112]	; 0x70
 8006676:	e00b      	b.n	8006690 <HAL_RCC_OscConfig+0x5e0>
 8006678:	4b68      	ldr	r3, [pc, #416]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 800667a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667c:	4a67      	ldr	r2, [pc, #412]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 800667e:	f023 0301 	bic.w	r3, r3, #1
 8006682:	6713      	str	r3, [r2, #112]	; 0x70
 8006684:	4b65      	ldr	r3, [pc, #404]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006688:	4a64      	ldr	r2, [pc, #400]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 800668a:	f023 0304 	bic.w	r3, r3, #4
 800668e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d015      	beq.n	80066c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006698:	f7fc f984 	bl	80029a4 <HAL_GetTick>
 800669c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800669e:	e00a      	b.n	80066b6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a0:	f7fc f980 	bl	80029a4 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e123      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066b6:	4b59      	ldr	r3, [pc, #356]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0ee      	beq.n	80066a0 <HAL_RCC_OscConfig+0x5f0>
 80066c2:	e014      	b.n	80066ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c4:	f7fc f96e 	bl	80029a4 <HAL_GetTick>
 80066c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066ca:	e00a      	b.n	80066e2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066cc:	f7fc f96a 	bl	80029a4 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066da:	4293      	cmp	r3, r2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e10d      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066e2:	4b4e      	ldr	r3, [pc, #312]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1ee      	bne.n	80066cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8102 	beq.w	80068fc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80066f8:	4b48      	ldr	r3, [pc, #288]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006700:	2b18      	cmp	r3, #24
 8006702:	f000 80bd 	beq.w	8006880 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	2b02      	cmp	r3, #2
 800670c:	f040 809e 	bne.w	800684c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006710:	4b42      	ldr	r3, [pc, #264]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a41      	ldr	r2, [pc, #260]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800671a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fc f942 	bl	80029a4 <HAL_GetTick>
 8006720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006724:	f7fc f93e 	bl	80029a4 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e0e3      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006736:	4b39      	ldr	r3, [pc, #228]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006742:	4b36      	ldr	r3, [pc, #216]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006746:	4b37      	ldr	r3, [pc, #220]	; (8006824 <HAL_RCC_OscConfig+0x774>)
 8006748:	4013      	ands	r3, r2
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006752:	0112      	lsls	r2, r2, #4
 8006754:	430a      	orrs	r2, r1
 8006756:	4931      	ldr	r1, [pc, #196]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006758:	4313      	orrs	r3, r2
 800675a:	628b      	str	r3, [r1, #40]	; 0x28
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	3b01      	subs	r3, #1
 8006762:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676a:	3b01      	subs	r3, #1
 800676c:	025b      	lsls	r3, r3, #9
 800676e:	b29b      	uxth	r3, r3
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	3b01      	subs	r3, #1
 8006778:	041b      	lsls	r3, r3, #16
 800677a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006784:	3b01      	subs	r3, #1
 8006786:	061b      	lsls	r3, r3, #24
 8006788:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800678c:	4923      	ldr	r1, [pc, #140]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 800678e:	4313      	orrs	r3, r2
 8006790:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006792:	4b22      	ldr	r3, [pc, #136]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006796:	4a21      	ldr	r2, [pc, #132]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800679e:	4b1f      	ldr	r3, [pc, #124]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a2:	4b21      	ldr	r3, [pc, #132]	; (8006828 <HAL_RCC_OscConfig+0x778>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067aa:	00d2      	lsls	r2, r2, #3
 80067ac:	491b      	ldr	r1, [pc, #108]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067b2:	4b1a      	ldr	r3, [pc, #104]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	f023 020c 	bic.w	r2, r3, #12
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	4917      	ldr	r1, [pc, #92]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067c4:	4b15      	ldr	r3, [pc, #84]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	f023 0202 	bic.w	r2, r3, #2
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d0:	4912      	ldr	r1, [pc, #72]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067d6:	4b11      	ldr	r3, [pc, #68]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	4a10      	ldr	r2, [pc, #64]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e2:	4b0e      	ldr	r3, [pc, #56]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	4a0d      	ldr	r2, [pc, #52]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067ee:	4b0b      	ldr	r3, [pc, #44]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f2:	4a0a      	ldr	r2, [pc, #40]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80067fa:	4b08      	ldr	r3, [pc, #32]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	4a07      	ldr	r2, [pc, #28]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006806:	4b05      	ldr	r3, [pc, #20]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a04      	ldr	r2, [pc, #16]	; (800681c <HAL_RCC_OscConfig+0x76c>)
 800680c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006812:	f7fc f8c7 	bl	80029a4 <HAL_GetTick>
 8006816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006818:	e011      	b.n	800683e <HAL_RCC_OscConfig+0x78e>
 800681a:	bf00      	nop
 800681c:	58024400 	.word	0x58024400
 8006820:	58024800 	.word	0x58024800
 8006824:	fffffc0c 	.word	0xfffffc0c
 8006828:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800682c:	f7fc f8ba 	bl	80029a4 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e05f      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800683e:	4b32      	ldr	r3, [pc, #200]	; (8006908 <HAL_RCC_OscConfig+0x858>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0f0      	beq.n	800682c <HAL_RCC_OscConfig+0x77c>
 800684a:	e057      	b.n	80068fc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800684c:	4b2e      	ldr	r3, [pc, #184]	; (8006908 <HAL_RCC_OscConfig+0x858>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a2d      	ldr	r2, [pc, #180]	; (8006908 <HAL_RCC_OscConfig+0x858>)
 8006852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006858:	f7fc f8a4 	bl	80029a4 <HAL_GetTick>
 800685c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006860:	f7fc f8a0 	bl	80029a4 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e045      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006872:	4b25      	ldr	r3, [pc, #148]	; (8006908 <HAL_RCC_OscConfig+0x858>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1f0      	bne.n	8006860 <HAL_RCC_OscConfig+0x7b0>
 800687e:	e03d      	b.n	80068fc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006880:	4b21      	ldr	r3, [pc, #132]	; (8006908 <HAL_RCC_OscConfig+0x858>)
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006886:	4b20      	ldr	r3, [pc, #128]	; (8006908 <HAL_RCC_OscConfig+0x858>)
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	2b01      	cmp	r3, #1
 8006892:	d031      	beq.n	80068f8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f003 0203 	and.w	r2, r3, #3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d12a      	bne.n	80068f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	091b      	lsrs	r3, r3, #4
 80068a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d122      	bne.n	80068f8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068be:	429a      	cmp	r2, r3
 80068c0:	d11a      	bne.n	80068f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	0a5b      	lsrs	r3, r3, #9
 80068c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d111      	bne.n	80068f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d108      	bne.n	80068f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	0e1b      	lsrs	r3, r3, #24
 80068ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d001      	beq.n	80068fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3730      	adds	r7, #48	; 0x30
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400

0800690c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e19c      	b.n	8006c5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006920:	4b8a      	ldr	r3, [pc, #552]	; (8006b4c <HAL_RCC_ClockConfig+0x240>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d910      	bls.n	8006950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692e:	4b87      	ldr	r3, [pc, #540]	; (8006b4c <HAL_RCC_ClockConfig+0x240>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f023 020f 	bic.w	r2, r3, #15
 8006936:	4985      	ldr	r1, [pc, #532]	; (8006b4c <HAL_RCC_ClockConfig+0x240>)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800693e:	4b83      	ldr	r3, [pc, #524]	; (8006b4c <HAL_RCC_ClockConfig+0x240>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d001      	beq.n	8006950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e184      	b.n	8006c5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d010      	beq.n	800697e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	4b7b      	ldr	r3, [pc, #492]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006968:	429a      	cmp	r2, r3
 800696a:	d908      	bls.n	800697e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800696c:	4b78      	ldr	r3, [pc, #480]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	4975      	ldr	r1, [pc, #468]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 800697a:	4313      	orrs	r3, r2
 800697c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d010      	beq.n	80069ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695a      	ldr	r2, [r3, #20]
 800698e:	4b70      	ldr	r3, [pc, #448]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006996:	429a      	cmp	r2, r3
 8006998:	d908      	bls.n	80069ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800699a:	4b6d      	ldr	r3, [pc, #436]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	496a      	ldr	r1, [pc, #424]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d010      	beq.n	80069da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	4b64      	ldr	r3, [pc, #400]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d908      	bls.n	80069da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069c8:	4b61      	ldr	r3, [pc, #388]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	495e      	ldr	r1, [pc, #376]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d010      	beq.n	8006a08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69da      	ldr	r2, [r3, #28]
 80069ea:	4b59      	ldr	r3, [pc, #356]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d908      	bls.n	8006a08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80069f6:	4b56      	ldr	r3, [pc, #344]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	4953      	ldr	r1, [pc, #332]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d010      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	4b4d      	ldr	r3, [pc, #308]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d908      	bls.n	8006a36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a24:	4b4a      	ldr	r3, [pc, #296]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f023 020f 	bic.w	r2, r3, #15
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	4947      	ldr	r1, [pc, #284]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d055      	beq.n	8006aee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a42:	4b43      	ldr	r3, [pc, #268]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	4940      	ldr	r1, [pc, #256]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d107      	bne.n	8006a6c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a5c:	4b3c      	ldr	r3, [pc, #240]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d121      	bne.n	8006aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0f6      	b.n	8006c5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d107      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a74:	4b36      	ldr	r3, [pc, #216]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d115      	bne.n	8006aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0ea      	b.n	8006c5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d107      	bne.n	8006a9c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a8c:	4b30      	ldr	r3, [pc, #192]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e0de      	b.n	8006c5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a9c:	4b2c      	ldr	r3, [pc, #176]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0d6      	b.n	8006c5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006aac:	4b28      	ldr	r3, [pc, #160]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f023 0207 	bic.w	r2, r3, #7
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	4925      	ldr	r1, [pc, #148]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006abe:	f7fb ff71 	bl	80029a4 <HAL_GetTick>
 8006ac2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ac4:	e00a      	b.n	8006adc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ac6:	f7fb ff6d 	bl	80029a4 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e0be      	b.n	8006c5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006adc:	4b1c      	ldr	r3, [pc, #112]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d1eb      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d010      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	4b14      	ldr	r3, [pc, #80]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d208      	bcs.n	8006b1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f023 020f 	bic.w	r2, r3, #15
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	490e      	ldr	r1, [pc, #56]	; (8006b50 <HAL_RCC_ClockConfig+0x244>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <HAL_RCC_ClockConfig+0x240>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d214      	bcs.n	8006b54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b08      	ldr	r3, [pc, #32]	; (8006b4c <HAL_RCC_ClockConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 020f 	bic.w	r2, r3, #15
 8006b32:	4906      	ldr	r1, [pc, #24]	; (8006b4c <HAL_RCC_ClockConfig+0x240>)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <HAL_RCC_ClockConfig+0x240>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d005      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e086      	b.n	8006c5a <HAL_RCC_ClockConfig+0x34e>
 8006b4c:	52002000 	.word	0x52002000
 8006b50:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d010      	beq.n	8006b82 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	4b3f      	ldr	r3, [pc, #252]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d208      	bcs.n	8006b82 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b70:	4b3c      	ldr	r3, [pc, #240]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	4939      	ldr	r1, [pc, #228]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d010      	beq.n	8006bb0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695a      	ldr	r2, [r3, #20]
 8006b92:	4b34      	ldr	r3, [pc, #208]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d208      	bcs.n	8006bb0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b9e:	4b31      	ldr	r3, [pc, #196]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	492e      	ldr	r1, [pc, #184]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d010      	beq.n	8006bde <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	4b28      	ldr	r3, [pc, #160]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d208      	bcs.n	8006bde <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bcc:	4b25      	ldr	r3, [pc, #148]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	4922      	ldr	r1, [pc, #136]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d010      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69da      	ldr	r2, [r3, #28]
 8006bee:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d208      	bcs.n	8006c0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006bfa:	4b1a      	ldr	r3, [pc, #104]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	4917      	ldr	r1, [pc, #92]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c0c:	f000 f834 	bl	8006c78 <HAL_RCC_GetSysClockFreq>
 8006c10:	4602      	mov	r2, r0
 8006c12:	4b14      	ldr	r3, [pc, #80]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	0a1b      	lsrs	r3, r3, #8
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	4912      	ldr	r1, [pc, #72]	; (8006c68 <HAL_RCC_ClockConfig+0x35c>)
 8006c1e:	5ccb      	ldrb	r3, [r1, r3]
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	fa22 f303 	lsr.w	r3, r2, r3
 8006c28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c2a:	4b0e      	ldr	r3, [pc, #56]	; (8006c64 <HAL_RCC_ClockConfig+0x358>)
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	4a0d      	ldr	r2, [pc, #52]	; (8006c68 <HAL_RCC_ClockConfig+0x35c>)
 8006c34:	5cd3      	ldrb	r3, [r2, r3]
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c40:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <HAL_RCC_ClockConfig+0x360>)
 8006c42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c44:	4a0a      	ldr	r2, [pc, #40]	; (8006c70 <HAL_RCC_ClockConfig+0x364>)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <HAL_RCC_ClockConfig+0x368>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fb fe5e 	bl	8002910 <HAL_InitTick>
 8006c54:	4603      	mov	r3, r0
 8006c56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	58024400 	.word	0x58024400
 8006c68:	0800b8d0 	.word	0x0800b8d0
 8006c6c:	24000004 	.word	0x24000004
 8006c70:	24000000 	.word	0x24000000
 8006c74:	24000018 	.word	0x24000018

08006c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b089      	sub	sp, #36	; 0x24
 8006c7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c7e:	4bb3      	ldr	r3, [pc, #716]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c86:	2b18      	cmp	r3, #24
 8006c88:	f200 8155 	bhi.w	8006f36 <HAL_RCC_GetSysClockFreq+0x2be>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006cf9 	.word	0x08006cf9
 8006c98:	08006f37 	.word	0x08006f37
 8006c9c:	08006f37 	.word	0x08006f37
 8006ca0:	08006f37 	.word	0x08006f37
 8006ca4:	08006f37 	.word	0x08006f37
 8006ca8:	08006f37 	.word	0x08006f37
 8006cac:	08006f37 	.word	0x08006f37
 8006cb0:	08006f37 	.word	0x08006f37
 8006cb4:	08006d1f 	.word	0x08006d1f
 8006cb8:	08006f37 	.word	0x08006f37
 8006cbc:	08006f37 	.word	0x08006f37
 8006cc0:	08006f37 	.word	0x08006f37
 8006cc4:	08006f37 	.word	0x08006f37
 8006cc8:	08006f37 	.word	0x08006f37
 8006ccc:	08006f37 	.word	0x08006f37
 8006cd0:	08006f37 	.word	0x08006f37
 8006cd4:	08006d25 	.word	0x08006d25
 8006cd8:	08006f37 	.word	0x08006f37
 8006cdc:	08006f37 	.word	0x08006f37
 8006ce0:	08006f37 	.word	0x08006f37
 8006ce4:	08006f37 	.word	0x08006f37
 8006ce8:	08006f37 	.word	0x08006f37
 8006cec:	08006f37 	.word	0x08006f37
 8006cf0:	08006f37 	.word	0x08006f37
 8006cf4:	08006d2b 	.word	0x08006d2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cf8:	4b94      	ldr	r3, [pc, #592]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d009      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d04:	4b91      	ldr	r3, [pc, #580]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	08db      	lsrs	r3, r3, #3
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	4a90      	ldr	r2, [pc, #576]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d10:	fa22 f303 	lsr.w	r3, r2, r3
 8006d14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006d16:	e111      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d18:	4b8d      	ldr	r3, [pc, #564]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d1a:	61bb      	str	r3, [r7, #24]
    break;
 8006d1c:	e10e      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006d1e:	4b8d      	ldr	r3, [pc, #564]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d20:	61bb      	str	r3, [r7, #24]
    break;
 8006d22:	e10b      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006d24:	4b8c      	ldr	r3, [pc, #560]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d26:	61bb      	str	r3, [r7, #24]
    break;
 8006d28:	e108      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d2a:	4b88      	ldr	r3, [pc, #544]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006d34:	4b85      	ldr	r3, [pc, #532]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	091b      	lsrs	r3, r3, #4
 8006d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d40:	4b82      	ldr	r3, [pc, #520]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d4a:	4b80      	ldr	r3, [pc, #512]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4e:	08db      	lsrs	r3, r3, #3
 8006d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80e1 	beq.w	8006f30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	f000 8083 	beq.w	8006e7c <HAL_RCC_GetSysClockFreq+0x204>
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	f200 80a1 	bhi.w	8006ec0 <HAL_RCC_GetSysClockFreq+0x248>
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_RCC_GetSysClockFreq+0x114>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d056      	beq.n	8006e38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006d8a:	e099      	b.n	8006ec0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d8c:	4b6f      	ldr	r3, [pc, #444]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d02d      	beq.n	8006df4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d98:	4b6c      	ldr	r3, [pc, #432]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	08db      	lsrs	r3, r3, #3
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	4a6b      	ldr	r2, [pc, #428]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
 8006da8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc2:	4b62      	ldr	r3, [pc, #392]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dd6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006df2:	e087      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006f60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e06:	4b51      	ldr	r3, [pc, #324]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e36:	e065      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006f64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4a:	4b40      	ldr	r3, [pc, #256]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e7a:	e043      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006f68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8e:	4b2f      	ldr	r3, [pc, #188]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ea2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ebe:	e021      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006f64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed2:	4b1e      	ldr	r3, [pc, #120]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ee6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f02:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006f04:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	0a5b      	lsrs	r3, r3, #9
 8006f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0e:	3301      	adds	r3, #1
 8006f10:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f28:	ee17 3a90 	vmov	r3, s15
 8006f2c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006f2e:	e005      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61bb      	str	r3, [r7, #24]
    break;
 8006f34:	e002      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006f36:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f38:	61bb      	str	r3, [r7, #24]
    break;
 8006f3a:	bf00      	nop
  }

  return sysclockfreq;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3724      	adds	r7, #36	; 0x24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	03d09000 	.word	0x03d09000
 8006f54:	003d0900 	.word	0x003d0900
 8006f58:	007a1200 	.word	0x007a1200
 8006f5c:	46000000 	.word	0x46000000
 8006f60:	4c742400 	.word	0x4c742400
 8006f64:	4a742400 	.word	0x4a742400
 8006f68:	4af42400 	.word	0x4af42400

08006f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006f72:	f7ff fe81 	bl	8006c78 <HAL_RCC_GetSysClockFreq>
 8006f76:	4602      	mov	r2, r0
 8006f78:	4b10      	ldr	r3, [pc, #64]	; (8006fbc <HAL_RCC_GetHCLKFreq+0x50>)
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	0a1b      	lsrs	r3, r3, #8
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	490f      	ldr	r1, [pc, #60]	; (8006fc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f84:	5ccb      	ldrb	r3, [r1, r3]
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <HAL_RCC_GetHCLKFreq+0x50>)
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f9a:	5cd3      	ldrb	r3, [r2, r3]
 8006f9c:	f003 031f 	and.w	r3, r3, #31
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa6:	4a07      	ldr	r2, [pc, #28]	; (8006fc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fa8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006faa:	4a07      	ldr	r2, [pc, #28]	; (8006fc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006fb0:	4b04      	ldr	r3, [pc, #16]	; (8006fc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	58024400 	.word	0x58024400
 8006fc0:	0800b8d0 	.word	0x0800b8d0
 8006fc4:	24000004 	.word	0x24000004
 8006fc8:	24000000 	.word	0x24000000

08006fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006fd0:	f7ff ffcc 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	091b      	lsrs	r3, r3, #4
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	4904      	ldr	r1, [pc, #16]	; (8006ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fe2:	5ccb      	ldrb	r3, [r1, r3]
 8006fe4:	f003 031f 	and.w	r3, r3, #31
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	58024400 	.word	0x58024400
 8006ff4:	0800b8d0 	.word	0x0800b8d0

08006ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ffc:	f7ff ffb6 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8007000:	4602      	mov	r2, r0
 8007002:	4b06      	ldr	r3, [pc, #24]	; (800701c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	0a1b      	lsrs	r3, r3, #8
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	4904      	ldr	r1, [pc, #16]	; (8007020 <HAL_RCC_GetPCLK2Freq+0x28>)
 800700e:	5ccb      	ldrb	r3, [r1, r3]
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007018:	4618      	mov	r0, r3
 800701a:	bd80      	pop	{r7, pc}
 800701c:	58024400 	.word	0x58024400
 8007020:	0800b8d0 	.word	0x0800b8d0

08007024 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800702c:	2300      	movs	r3, #0
 800702e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007030:	2300      	movs	r3, #0
 8007032:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d03f      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007044:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007048:	d02a      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800704a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800704e:	d824      	bhi.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007054:	d018      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800705a:	d81e      	bhi.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007064:	d007      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007066:	e018      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007068:	4ba3      	ldr	r3, [pc, #652]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	4aa2      	ldr	r2, [pc, #648]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800706e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007074:	e015      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3304      	adds	r3, #4
 800707a:	2102      	movs	r1, #2
 800707c:	4618      	mov	r0, r3
 800707e:	f001 f9d5 	bl	800842c <RCCEx_PLL2_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007086:	e00c      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3324      	adds	r3, #36	; 0x24
 800708c:	2102      	movs	r1, #2
 800708e:	4618      	mov	r0, r3
 8007090:	f001 fa7e 	bl	8008590 <RCCEx_PLL3_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007098:	e003      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	75fb      	strb	r3, [r7, #23]
      break;
 800709e:	e000      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80070a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d109      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80070a8:	4b93      	ldr	r3, [pc, #588]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b4:	4990      	ldr	r1, [pc, #576]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	650b      	str	r3, [r1, #80]	; 0x50
 80070ba:	e001      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d03d      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d826      	bhi.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80070d4:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	080070f1 	.word	0x080070f1
 80070e0:	080070ff 	.word	0x080070ff
 80070e4:	08007111 	.word	0x08007111
 80070e8:	08007129 	.word	0x08007129
 80070ec:	08007129 	.word	0x08007129
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f0:	4b81      	ldr	r3, [pc, #516]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	4a80      	ldr	r2, [pc, #512]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070fc:	e015      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3304      	adds	r3, #4
 8007102:	2100      	movs	r1, #0
 8007104:	4618      	mov	r0, r3
 8007106:	f001 f991 	bl	800842c <RCCEx_PLL2_Config>
 800710a:	4603      	mov	r3, r0
 800710c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800710e:	e00c      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3324      	adds	r3, #36	; 0x24
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f001 fa3a 	bl	8008590 <RCCEx_PLL3_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007120:	e003      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	75fb      	strb	r3, [r7, #23]
      break;
 8007126:	e000      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d109      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007130:	4b71      	ldr	r3, [pc, #452]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007134:	f023 0207 	bic.w	r2, r3, #7
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713c:	496e      	ldr	r1, [pc, #440]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800713e:	4313      	orrs	r3, r2
 8007140:	650b      	str	r3, [r1, #80]	; 0x50
 8007142:	e001      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007150:	2b00      	cmp	r3, #0
 8007152:	d042      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800715c:	d02b      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800715e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007162:	d825      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007164:	2bc0      	cmp	r3, #192	; 0xc0
 8007166:	d028      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007168:	2bc0      	cmp	r3, #192	; 0xc0
 800716a:	d821      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d016      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007170:	2b80      	cmp	r3, #128	; 0x80
 8007172:	d81d      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007178:	2b40      	cmp	r3, #64	; 0x40
 800717a:	d007      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800717c:	e018      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800717e:	4b5e      	ldr	r3, [pc, #376]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	4a5d      	ldr	r2, [pc, #372]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800718a:	e017      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	2100      	movs	r1, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f001 f94a 	bl	800842c <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800719c:	e00e      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3324      	adds	r3, #36	; 0x24
 80071a2:	2100      	movs	r1, #0
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 f9f3 	bl	8008590 <RCCEx_PLL3_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80071ae:	e005      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	75fb      	strb	r3, [r7, #23]
      break;
 80071b4:	e002      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80071b6:	bf00      	nop
 80071b8:	e000      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80071ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d109      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80071c2:	4b4d      	ldr	r3, [pc, #308]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ce:	494a      	ldr	r1, [pc, #296]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	650b      	str	r3, [r1, #80]	; 0x50
 80071d4:	e001      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d049      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071f0:	d030      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80071f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071f6:	d82a      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80071f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80071fc:	d02c      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80071fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007202:	d824      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007208:	d018      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800720a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800720e:	d81e      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007218:	d007      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800721a:	e018      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800721c:	4b36      	ldr	r3, [pc, #216]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	4a35      	ldr	r2, [pc, #212]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007228:	e017      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3304      	adds	r3, #4
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f001 f8fb 	bl	800842c <RCCEx_PLL2_Config>
 8007236:	4603      	mov	r3, r0
 8007238:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800723a:	e00e      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3324      	adds	r3, #36	; 0x24
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f001 f9a4 	bl	8008590 <RCCEx_PLL3_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800724c:	e005      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	75fb      	strb	r3, [r7, #23]
      break;
 8007252:	e002      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007254:	bf00      	nop
 8007256:	e000      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007260:	4b25      	ldr	r3, [pc, #148]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007264:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800726e:	4922      	ldr	r1, [pc, #136]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007270:	4313      	orrs	r3, r2
 8007272:	658b      	str	r3, [r1, #88]	; 0x58
 8007274:	e001      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007282:	2b00      	cmp	r3, #0
 8007284:	d04b      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800728c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007290:	d030      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007296:	d82a      	bhi.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007298:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800729c:	d02e      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800729e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072a2:	d824      	bhi.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072a8:	d018      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80072aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072ae:	d81e      	bhi.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80072b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072b8:	d007      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80072ba:	e018      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4a0d      	ldr	r2, [pc, #52]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072c8:	e019      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3304      	adds	r3, #4
 80072ce:	2100      	movs	r1, #0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 f8ab 	bl	800842c <RCCEx_PLL2_Config>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80072da:	e010      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3324      	adds	r3, #36	; 0x24
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 f954 	bl	8008590 <RCCEx_PLL3_Config>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072ec:	e007      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
      break;
 80072f2:	e004      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80072f4:	bf00      	nop
 80072f6:	e002      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80072f8:	58024400 	.word	0x58024400
      break;
 80072fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007304:	4b99      	ldr	r3, [pc, #612]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007308:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007312:	4996      	ldr	r1, [pc, #600]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007314:	4313      	orrs	r3, r2
 8007316:	658b      	str	r3, [r1, #88]	; 0x58
 8007318:	e001      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d032      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800732e:	2b30      	cmp	r3, #48	; 0x30
 8007330:	d01c      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007332:	2b30      	cmp	r3, #48	; 0x30
 8007334:	d817      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007336:	2b20      	cmp	r3, #32
 8007338:	d00c      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800733a:	2b20      	cmp	r3, #32
 800733c:	d813      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d016      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007342:	2b10      	cmp	r3, #16
 8007344:	d10f      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007346:	4b89      	ldr	r3, [pc, #548]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	4a88      	ldr	r2, [pc, #544]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800734c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007352:	e00e      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3304      	adds	r3, #4
 8007358:	2102      	movs	r1, #2
 800735a:	4618      	mov	r0, r3
 800735c:	f001 f866 	bl	800842c <RCCEx_PLL2_Config>
 8007360:	4603      	mov	r3, r0
 8007362:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007364:	e005      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	75fb      	strb	r3, [r7, #23]
      break;
 800736a:	e002      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007378:	4b7c      	ldr	r3, [pc, #496]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800737a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007384:	4979      	ldr	r1, [pc, #484]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007386:	4313      	orrs	r3, r2
 8007388:	64cb      	str	r3, [r1, #76]	; 0x4c
 800738a:	e001      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d047      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a4:	d030      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80073a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073aa:	d82a      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80073ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073b0:	d02c      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80073b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073b6:	d824      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80073b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073bc:	d018      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80073be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c2:	d81e      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80073c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073cc:	d007      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80073ce:	e018      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d0:	4b66      	ldr	r3, [pc, #408]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	4a65      	ldr	r2, [pc, #404]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80073d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073dc:	e017      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3304      	adds	r3, #4
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 f821 	bl	800842c <RCCEx_PLL2_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073ee:	e00e      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3324      	adds	r3, #36	; 0x24
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 f8ca 	bl	8008590 <RCCEx_PLL3_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007400:	e005      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	75fb      	strb	r3, [r7, #23]
      break;
 8007406:	e002      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007408:	bf00      	nop
 800740a:	e000      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800740c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d109      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007414:	4b55      	ldr	r3, [pc, #340]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007418:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007420:	4952      	ldr	r1, [pc, #328]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007422:	4313      	orrs	r3, r2
 8007424:	650b      	str	r3, [r1, #80]	; 0x50
 8007426:	e001      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d049      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800743c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007440:	d02e      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007446:	d828      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007448:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800744c:	d02a      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800744e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007452:	d822      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007454:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007458:	d026      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800745a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800745e:	d81c      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007464:	d010      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800746a:	d816      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01d      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007474:	d111      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3304      	adds	r3, #4
 800747a:	2101      	movs	r1, #1
 800747c:	4618      	mov	r0, r3
 800747e:	f000 ffd5 	bl	800842c <RCCEx_PLL2_Config>
 8007482:	4603      	mov	r3, r0
 8007484:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007486:	e012      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3324      	adds	r3, #36	; 0x24
 800748c:	2101      	movs	r1, #1
 800748e:	4618      	mov	r0, r3
 8007490:	f001 f87e 	bl	8008590 <RCCEx_PLL3_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007498:	e009      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	75fb      	strb	r3, [r7, #23]
      break;
 800749e:	e006      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80074a0:	bf00      	nop
 80074a2:	e004      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80074a4:	bf00      	nop
 80074a6:	e002      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80074a8:	bf00      	nop
 80074aa:	e000      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80074ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d109      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074b4:	4b2d      	ldr	r3, [pc, #180]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c0:	492a      	ldr	r1, [pc, #168]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	650b      	str	r3, [r1, #80]	; 0x50
 80074c6:	e001      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d04d      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074e2:	d02e      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80074e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074e8:	d828      	bhi.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80074ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ee:	d02a      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80074f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f4:	d822      	bhi.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80074f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074fa:	d026      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80074fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007500:	d81c      	bhi.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007506:	d010      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800750c:	d816      	bhi.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d01d      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007516:	d111      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3304      	adds	r3, #4
 800751c:	2101      	movs	r1, #1
 800751e:	4618      	mov	r0, r3
 8007520:	f000 ff84 	bl	800842c <RCCEx_PLL2_Config>
 8007524:	4603      	mov	r3, r0
 8007526:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007528:	e012      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3324      	adds	r3, #36	; 0x24
 800752e:	2101      	movs	r1, #1
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f82d 	bl	8008590 <RCCEx_PLL3_Config>
 8007536:	4603      	mov	r3, r0
 8007538:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800753a:	e009      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	75fb      	strb	r3, [r7, #23]
      break;
 8007540:	e006      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007542:	bf00      	nop
 8007544:	e004      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007546:	bf00      	nop
 8007548:	e002      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800754a:	bf00      	nop
 800754c:	e000      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800754e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10c      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007564:	4901      	ldr	r1, [pc, #4]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007566:	4313      	orrs	r3, r2
 8007568:	658b      	str	r3, [r1, #88]	; 0x58
 800756a:	e003      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800756c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d02f      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007588:	d00e      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800758a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800758e:	d814      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d015      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007598:	d10f      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800759a:	4baf      	ldr	r3, [pc, #700]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	4aae      	ldr	r2, [pc, #696]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80075a6:	e00c      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3304      	adds	r3, #4
 80075ac:	2101      	movs	r1, #1
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 ff3c 	bl	800842c <RCCEx_PLL2_Config>
 80075b4:	4603      	mov	r3, r0
 80075b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80075b8:	e003      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	75fb      	strb	r3, [r7, #23]
      break;
 80075be:	e000      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80075c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d109      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075c8:	4ba3      	ldr	r3, [pc, #652]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d4:	49a0      	ldr	r1, [pc, #640]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	650b      	str	r3, [r1, #80]	; 0x50
 80075da:	e001      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
 80075de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d032      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d81b      	bhi.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80075f4:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80075f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fa:	bf00      	nop
 80075fc:	08007633 	.word	0x08007633
 8007600:	0800760d 	.word	0x0800760d
 8007604:	0800761b 	.word	0x0800761b
 8007608:	08007633 	.word	0x08007633
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800760c:	4b92      	ldr	r3, [pc, #584]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	4a91      	ldr	r2, [pc, #580]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007616:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007618:	e00c      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3304      	adds	r3, #4
 800761e:	2102      	movs	r1, #2
 8007620:	4618      	mov	r0, r3
 8007622:	f000 ff03 	bl	800842c <RCCEx_PLL2_Config>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800762a:	e003      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	75fb      	strb	r3, [r7, #23]
      break;
 8007630:	e000      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800763a:	4b87      	ldr	r3, [pc, #540]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800763c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763e:	f023 0203 	bic.w	r2, r3, #3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007646:	4984      	ldr	r1, [pc, #528]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007648:	4313      	orrs	r3, r2
 800764a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800764c:	e001      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764e:	7dfb      	ldrb	r3, [r7, #23]
 8007650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 8086 	beq.w	800776c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007660:	4b7e      	ldr	r3, [pc, #504]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a7d      	ldr	r2, [pc, #500]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800766a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800766c:	f7fb f99a 	bl	80029a4 <HAL_GetTick>
 8007670:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007672:	e009      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007674:	f7fb f996 	bl	80029a4 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b64      	cmp	r3, #100	; 0x64
 8007680:	d902      	bls.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	75fb      	strb	r3, [r7, #23]
        break;
 8007686:	e005      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007688:	4b74      	ldr	r3, [pc, #464]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0ef      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007694:	7dfb      	ldrb	r3, [r7, #23]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d166      	bne.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800769a:	4b6f      	ldr	r3, [pc, #444]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800769c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076a4:	4053      	eors	r3, r2
 80076a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d013      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076ae:	4b6a      	ldr	r3, [pc, #424]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076b8:	4b67      	ldr	r3, [pc, #412]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076bc:	4a66      	ldr	r2, [pc, #408]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076c4:	4b64      	ldr	r3, [pc, #400]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c8:	4a63      	ldr	r2, [pc, #396]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80076d0:	4a61      	ldr	r2, [pc, #388]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e0:	d115      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e2:	f7fb f95f 	bl	80029a4 <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076e8:	e00b      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ea:	f7fb f95b 	bl	80029a4 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d902      	bls.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	75fb      	strb	r3, [r7, #23]
            break;
 8007700:	e005      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007702:	4b55      	ldr	r3, [pc, #340]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0ed      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d126      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800771a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800771e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007722:	d10d      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007724:	4b4c      	ldr	r3, [pc, #304]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007732:	0919      	lsrs	r1, r3, #4
 8007734:	4b4a      	ldr	r3, [pc, #296]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007736:	400b      	ands	r3, r1
 8007738:	4947      	ldr	r1, [pc, #284]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800773a:	4313      	orrs	r3, r2
 800773c:	610b      	str	r3, [r1, #16]
 800773e:	e005      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007740:	4b45      	ldr	r3, [pc, #276]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	4a44      	ldr	r2, [pc, #272]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007746:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800774a:	6113      	str	r3, [r2, #16]
 800774c:	4b42      	ldr	r3, [pc, #264]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800774e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800775a:	493f      	ldr	r1, [pc, #252]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800775c:	4313      	orrs	r3, r2
 800775e:	670b      	str	r3, [r1, #112]	; 0x70
 8007760:	e004      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	75bb      	strb	r3, [r7, #22]
 8007766:	e001      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 8085 	beq.w	8007884 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800777e:	2b28      	cmp	r3, #40	; 0x28
 8007780:	d866      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	08007865 	.word	0x08007865
 800778c:	08007851 	.word	0x08007851
 8007790:	08007851 	.word	0x08007851
 8007794:	08007851 	.word	0x08007851
 8007798:	08007851 	.word	0x08007851
 800779c:	08007851 	.word	0x08007851
 80077a0:	08007851 	.word	0x08007851
 80077a4:	08007851 	.word	0x08007851
 80077a8:	0800782d 	.word	0x0800782d
 80077ac:	08007851 	.word	0x08007851
 80077b0:	08007851 	.word	0x08007851
 80077b4:	08007851 	.word	0x08007851
 80077b8:	08007851 	.word	0x08007851
 80077bc:	08007851 	.word	0x08007851
 80077c0:	08007851 	.word	0x08007851
 80077c4:	08007851 	.word	0x08007851
 80077c8:	0800783f 	.word	0x0800783f
 80077cc:	08007851 	.word	0x08007851
 80077d0:	08007851 	.word	0x08007851
 80077d4:	08007851 	.word	0x08007851
 80077d8:	08007851 	.word	0x08007851
 80077dc:	08007851 	.word	0x08007851
 80077e0:	08007851 	.word	0x08007851
 80077e4:	08007851 	.word	0x08007851
 80077e8:	08007865 	.word	0x08007865
 80077ec:	08007851 	.word	0x08007851
 80077f0:	08007851 	.word	0x08007851
 80077f4:	08007851 	.word	0x08007851
 80077f8:	08007851 	.word	0x08007851
 80077fc:	08007851 	.word	0x08007851
 8007800:	08007851 	.word	0x08007851
 8007804:	08007851 	.word	0x08007851
 8007808:	08007865 	.word	0x08007865
 800780c:	08007851 	.word	0x08007851
 8007810:	08007851 	.word	0x08007851
 8007814:	08007851 	.word	0x08007851
 8007818:	08007851 	.word	0x08007851
 800781c:	08007851 	.word	0x08007851
 8007820:	08007851 	.word	0x08007851
 8007824:	08007851 	.word	0x08007851
 8007828:	08007865 	.word	0x08007865
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	2101      	movs	r1, #1
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fdfa 	bl	800842c <RCCEx_PLL2_Config>
 8007838:	4603      	mov	r3, r0
 800783a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800783c:	e013      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3324      	adds	r3, #36	; 0x24
 8007842:	2101      	movs	r1, #1
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fea3 	bl	8008590 <RCCEx_PLL3_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800784e:	e00a      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	75fb      	strb	r3, [r7, #23]
      break;
 8007854:	e007      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007856:	bf00      	nop
 8007858:	58024400 	.word	0x58024400
 800785c:	58024800 	.word	0x58024800
 8007860:	00ffffcf 	.word	0x00ffffcf
      break;
 8007864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d109      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800786c:	4b96      	ldr	r3, [pc, #600]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800786e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007870:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007878:	4993      	ldr	r1, [pc, #588]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800787a:	4313      	orrs	r3, r2
 800787c:	654b      	str	r3, [r1, #84]	; 0x54
 800787e:	e001      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d038      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007894:	2b05      	cmp	r3, #5
 8007896:	d821      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007898:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800789a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789e:	bf00      	nop
 80078a0:	080078e3 	.word	0x080078e3
 80078a4:	080078b9 	.word	0x080078b9
 80078a8:	080078cb 	.word	0x080078cb
 80078ac:	080078e3 	.word	0x080078e3
 80078b0:	080078e3 	.word	0x080078e3
 80078b4:	080078e3 	.word	0x080078e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3304      	adds	r3, #4
 80078bc:	2101      	movs	r1, #1
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fdb4 	bl	800842c <RCCEx_PLL2_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80078c8:	e00c      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3324      	adds	r3, #36	; 0x24
 80078ce:	2101      	movs	r1, #1
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fe5d 	bl	8008590 <RCCEx_PLL3_Config>
 80078d6:	4603      	mov	r3, r0
 80078d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80078da:	e003      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	75fb      	strb	r3, [r7, #23]
      break;
 80078e0:	e000      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80078e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d109      	bne.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078ea:	4b77      	ldr	r3, [pc, #476]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ee:	f023 0207 	bic.w	r2, r3, #7
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f6:	4974      	ldr	r1, [pc, #464]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	654b      	str	r3, [r1, #84]	; 0x54
 80078fc:	e001      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
 8007900:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d03a      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007914:	2b05      	cmp	r3, #5
 8007916:	d821      	bhi.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007918:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	08007963 	.word	0x08007963
 8007924:	08007939 	.word	0x08007939
 8007928:	0800794b 	.word	0x0800794b
 800792c:	08007963 	.word	0x08007963
 8007930:	08007963 	.word	0x08007963
 8007934:	08007963 	.word	0x08007963
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	2101      	movs	r1, #1
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fd74 	bl	800842c <RCCEx_PLL2_Config>
 8007944:	4603      	mov	r3, r0
 8007946:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007948:	e00c      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3324      	adds	r3, #36	; 0x24
 800794e:	2101      	movs	r1, #1
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fe1d 	bl	8008590 <RCCEx_PLL3_Config>
 8007956:	4603      	mov	r3, r0
 8007958:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800795a:	e003      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	75fb      	strb	r3, [r7, #23]
      break;
 8007960:	e000      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800796a:	4b57      	ldr	r3, [pc, #348]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800796c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796e:	f023 0207 	bic.w	r2, r3, #7
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007978:	4953      	ldr	r1, [pc, #332]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800797a:	4313      	orrs	r3, r2
 800797c:	658b      	str	r3, [r1, #88]	; 0x58
 800797e:	e001      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d04b      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800799a:	d02e      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800799c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079a0:	d828      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80079a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a6:	d02a      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80079a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ac:	d822      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80079ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079b2:	d026      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80079b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079b8:	d81c      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80079ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079be:	d010      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80079c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c4:	d816      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01d      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80079ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ce:	d111      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3304      	adds	r3, #4
 80079d4:	2100      	movs	r1, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fd28 	bl	800842c <RCCEx_PLL2_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80079e0:	e012      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3324      	adds	r3, #36	; 0x24
 80079e6:	2102      	movs	r1, #2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fdd1 	bl	8008590 <RCCEx_PLL3_Config>
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80079f2:	e009      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	75fb      	strb	r3, [r7, #23]
      break;
 80079f8:	e006      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80079fa:	bf00      	nop
 80079fc:	e004      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80079fe:	bf00      	nop
 8007a00:	e002      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a0e:	4b2e      	ldr	r3, [pc, #184]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a1c:	492a      	ldr	r1, [pc, #168]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	654b      	str	r3, [r1, #84]	; 0x54
 8007a22:	e001      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d04d      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a3e:	d02e      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007a40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a44:	d828      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4a:	d02a      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a50:	d822      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a56:	d026      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a5c:	d81c      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a62:	d010      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a68:	d816      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01d      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a72:	d111      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3304      	adds	r3, #4
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fcd6 	bl	800842c <RCCEx_PLL2_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007a84:	e012      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3324      	adds	r3, #36	; 0x24
 8007a8a:	2102      	movs	r1, #2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fd7f 	bl	8008590 <RCCEx_PLL3_Config>
 8007a92:	4603      	mov	r3, r0
 8007a94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007a96:	e009      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9c:	e006      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007a9e:	bf00      	nop
 8007aa0:	e004      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007aa2:	bf00      	nop
 8007aa4:	e002      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007aa6:	bf00      	nop
 8007aa8:	e000      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10c      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ab2:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ac0:	4901      	ldr	r1, [pc, #4]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	658b      	str	r3, [r1, #88]	; 0x58
 8007ac6:	e003      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007ac8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d04b      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ae2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ae6:	d02e      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007ae8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007aec:	d828      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af2:	d02a      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af8:	d822      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007afa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007afe:	d026      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007b00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b04:	d81c      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b0a:	d010      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b10:	d816      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01d      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b1a:	d111      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fc82 	bl	800842c <RCCEx_PLL2_Config>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b2c:	e012      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	3324      	adds	r3, #36	; 0x24
 8007b32:	2102      	movs	r1, #2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fd2b 	bl	8008590 <RCCEx_PLL3_Config>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b3e:	e009      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	75fb      	strb	r3, [r7, #23]
      break;
 8007b44:	e006      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007b46:	bf00      	nop
 8007b48:	e004      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007b4a:	bf00      	nop
 8007b4c:	e002      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007b4e:	bf00      	nop
 8007b50:	e000      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b5a:	4b9d      	ldr	r3, [pc, #628]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b68:	4999      	ldr	r1, [pc, #612]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	658b      	str	r3, [r1, #88]	; 0x58
 8007b6e:	e001      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01a      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8a:	d10a      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3324      	adds	r3, #36	; 0x24
 8007b90:	2102      	movs	r1, #2
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 fcfc 	bl	8008590 <RCCEx_PLL3_Config>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ba2:	4b8b      	ldr	r3, [pc, #556]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bb0:	4987      	ldr	r1, [pc, #540]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0310 	and.w	r3, r3, #16
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01a      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bcc:	d10a      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3324      	adds	r3, #36	; 0x24
 8007bd2:	2102      	movs	r1, #2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fcdb 	bl	8008590 <RCCEx_PLL3_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007be4:	4b7a      	ldr	r3, [pc, #488]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bf2:	4977      	ldr	r1, [pc, #476]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d034      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c0e:	d01d      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c14:	d817      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c1e:	d009      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007c20:	e011      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3304      	adds	r3, #4
 8007c26:	2100      	movs	r1, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fbff 	bl	800842c <RCCEx_PLL2_Config>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c32:	e00c      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3324      	adds	r3, #36	; 0x24
 8007c38:	2102      	movs	r1, #2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fca8 	bl	8008590 <RCCEx_PLL3_Config>
 8007c40:	4603      	mov	r3, r0
 8007c42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c44:	e003      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
      break;
 8007c4a:	e000      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c54:	4b5e      	ldr	r3, [pc, #376]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c62:	495b      	ldr	r1, [pc, #364]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	658b      	str	r3, [r1, #88]	; 0x58
 8007c68:	e001      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d033      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c84:	d01c      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007c86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c8a:	d816      	bhi.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c90:	d003      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007c92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c96:	d007      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007c98:	e00f      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c9a:	4b4d      	ldr	r3, [pc, #308]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9e:	4a4c      	ldr	r2, [pc, #304]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ca6:	e00c      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3324      	adds	r3, #36	; 0x24
 8007cac:	2101      	movs	r1, #1
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 fc6e 	bl	8008590 <RCCEx_PLL3_Config>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007cb8:	e003      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007cbe:	e000      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10a      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cc8:	4b41      	ldr	r3, [pc, #260]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cd6:	493e      	ldr	r1, [pc, #248]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	654b      	str	r3, [r1, #84]	; 0x54
 8007cdc:	e001      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d029      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cfa:	d007      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007cfc:	e00f      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cfe:	4b34      	ldr	r3, [pc, #208]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	4a33      	ldr	r2, [pc, #204]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d0a:	e00b      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3304      	adds	r3, #4
 8007d10:	2102      	movs	r1, #2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fb8a 	bl	800842c <RCCEx_PLL2_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d1c:	e002      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
      break;
 8007d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d2a:	4b29      	ldr	r3, [pc, #164]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d36:	4926      	ldr	r1, [pc, #152]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d3c:	e001      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3324      	adds	r3, #36	; 0x24
 8007d52:	2102      	movs	r1, #2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fc1b 	bl	8008590 <RCCEx_PLL3_Config>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d033      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d78:	d017      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d7e:	d811      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d84:	d013      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8a:	d80b      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d010      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d94:	d106      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d96:	4b0e      	ldr	r3, [pc, #56]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	4a0d      	ldr	r2, [pc, #52]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007da2:	e007      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]
      break;
 8007da8:	e004      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007daa:	bf00      	nop
 8007dac:	e002      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007dae:	bf00      	nop
 8007db0:	e000      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10c      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dba:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc6:	4902      	ldr	r1, [pc, #8]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	654b      	str	r3, [r1, #84]	; 0x54
 8007dcc:	e004      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007dce:	bf00      	nop
 8007dd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d008      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007de4:	4b31      	ldr	r3, [pc, #196]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df0:	492e      	ldr	r1, [pc, #184]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e02:	4b2a      	ldr	r3, [pc, #168]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007e10:	4926      	ldr	r1, [pc, #152]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d008      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e22:	4b22      	ldr	r3, [pc, #136]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e2e:	491f      	ldr	r1, [pc, #124]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00d      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e40:	4b1a      	ldr	r3, [pc, #104]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	4a19      	ldr	r2, [pc, #100]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e4a:	6113      	str	r3, [r2, #16]
 8007e4c:	4b17      	ldr	r3, [pc, #92]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e56:	4915      	ldr	r1, [pc, #84]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	da08      	bge.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e64:	4b11      	ldr	r3, [pc, #68]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e70:	490e      	ldr	r1, [pc, #56]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e82:	4b0a      	ldr	r3, [pc, #40]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e90:	4906      	ldr	r1, [pc, #24]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007e96:	7dbb      	ldrb	r3, [r7, #22]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	e000      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	58024400 	.word	0x58024400

08007eb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007eb4:	f7ff f85a 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	4b06      	ldr	r3, [pc, #24]	; (8007ed4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	091b      	lsrs	r3, r3, #4
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	4904      	ldr	r1, [pc, #16]	; (8007ed8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ec6:	5ccb      	ldrb	r3, [r1, r3]
 8007ec8:	f003 031f 	and.w	r3, r3, #31
 8007ecc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	58024400 	.word	0x58024400
 8007ed8:	0800b8d0 	.word	0x0800b8d0

08007edc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b089      	sub	sp, #36	; 0x24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ee4:	4ba1      	ldr	r3, [pc, #644]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007eee:	4b9f      	ldr	r3, [pc, #636]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	0b1b      	lsrs	r3, r3, #12
 8007ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ef8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007efa:	4b9c      	ldr	r3, [pc, #624]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	091b      	lsrs	r3, r3, #4
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007f06:	4b99      	ldr	r3, [pc, #612]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0a:	08db      	lsrs	r3, r3, #3
 8007f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 8111 	beq.w	800814c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	f000 8083 	beq.w	8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	f200 80a1 	bhi.w	800807c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d056      	beq.n	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f46:	e099      	b.n	800807c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f48:	4b88      	ldr	r3, [pc, #544]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d02d      	beq.n	8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f54:	4b85      	ldr	r3, [pc, #532]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	08db      	lsrs	r3, r3, #3
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	4a84      	ldr	r2, [pc, #528]	; (8008170 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f60:	fa22 f303 	lsr.w	r3, r2, r3
 8007f64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	ee07 3a90 	vmov	s15, r3
 8007f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7e:	4b7b      	ldr	r3, [pc, #492]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007faa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fae:	e087      	b.n	80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008178 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fc2:	4b6a      	ldr	r3, [pc, #424]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ff2:	e065      	b.n	80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800817c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008006:	4b59      	ldr	r3, [pc, #356]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008016:	ed97 6a03 	vldr	s12, [r7, #12]
 800801a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800801e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800802a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800802e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008036:	e043      	b.n	80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800804a:	4b48      	ldr	r3, [pc, #288]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800805a:	ed97 6a03 	vldr	s12, [r7, #12]
 800805e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800806a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800807a:	e021      	b.n	80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008086:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800817c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800808a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800808e:	4b37      	ldr	r3, [pc, #220]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800809e:	ed97 6a03 	vldr	s12, [r7, #12]
 80080a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80080c0:	4b2a      	ldr	r3, [pc, #168]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	0a5b      	lsrs	r3, r3, #9
 80080c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080da:	edd7 6a07 	vldr	s13, [r7, #28]
 80080de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e6:	ee17 2a90 	vmov	r2, s15
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80080ee:	4b1f      	ldr	r3, [pc, #124]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	0c1b      	lsrs	r3, r3, #16
 80080f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f8:	ee07 3a90 	vmov	s15, r3
 80080fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008104:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008108:	edd7 6a07 	vldr	s13, [r7, #28]
 800810c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008114:	ee17 2a90 	vmov	r2, s15
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800811c:	4b13      	ldr	r3, [pc, #76]	; (800816c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	0e1b      	lsrs	r3, r3, #24
 8008122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008126:	ee07 3a90 	vmov	s15, r3
 800812a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008136:	edd7 6a07 	vldr	s13, [r7, #28]
 800813a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800813e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008142:	ee17 2a90 	vmov	r2, s15
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800814a:	e008      	b.n	800815e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	609a      	str	r2, [r3, #8]
}
 800815e:	bf00      	nop
 8008160:	3724      	adds	r7, #36	; 0x24
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	58024400 	.word	0x58024400
 8008170:	03d09000 	.word	0x03d09000
 8008174:	46000000 	.word	0x46000000
 8008178:	4c742400 	.word	0x4c742400
 800817c:	4a742400 	.word	0x4a742400
 8008180:	4af42400 	.word	0x4af42400

08008184 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008184:	b480      	push	{r7}
 8008186:	b089      	sub	sp, #36	; 0x24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800818c:	4ba1      	ldr	r3, [pc, #644]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	f003 0303 	and.w	r3, r3, #3
 8008194:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008196:	4b9f      	ldr	r3, [pc, #636]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	0d1b      	lsrs	r3, r3, #20
 800819c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081a2:	4b9c      	ldr	r3, [pc, #624]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80081ae:	4b99      	ldr	r3, [pc, #612]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b2:	08db      	lsrs	r3, r3, #3
 80081b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8111 	beq.w	80083f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	f000 8083 	beq.w	80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	f200 80a1 	bhi.w	8008324 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d056      	beq.n	800829c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80081ee:	e099      	b.n	8008324 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081f0:	4b88      	ldr	r3, [pc, #544]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d02d      	beq.n	8008258 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081fc:	4b85      	ldr	r3, [pc, #532]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	08db      	lsrs	r3, r3, #3
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	4a84      	ldr	r2, [pc, #528]	; (8008418 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008208:	fa22 f303 	lsr.w	r3, r2, r3
 800820c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	ee07 3a90 	vmov	s15, r3
 8008214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008226:	4b7b      	ldr	r3, [pc, #492]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008236:	ed97 6a03 	vldr	s12, [r7, #12]
 800823a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800841c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800823e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800824a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008252:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008256:	e087      	b.n	8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008262:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800826a:	4b6a      	ldr	r3, [pc, #424]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827a:	ed97 6a03 	vldr	s12, [r7, #12]
 800827e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800841c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800828a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800828e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800829a:	e065      	b.n	8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ae:	4b59      	ldr	r3, [pc, #356]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082be:	ed97 6a03 	vldr	s12, [r7, #12]
 80082c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800841c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082de:	e043      	b.n	8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80082ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f2:	4b48      	ldr	r3, [pc, #288]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008302:	ed97 6a03 	vldr	s12, [r7, #12]
 8008306:	eddf 5a45 	vldr	s11, [pc, #276]	; 800841c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800830a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008322:	e021      	b.n	8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008336:	4b37      	ldr	r3, [pc, #220]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008346:	ed97 6a03 	vldr	s12, [r7, #12]
 800834a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800841c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800834e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800835a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008362:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008366:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008368:	4b2a      	ldr	r3, [pc, #168]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800836a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836c:	0a5b      	lsrs	r3, r3, #9
 800836e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800837e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008382:	edd7 6a07 	vldr	s13, [r7, #28]
 8008386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800838e:	ee17 2a90 	vmov	r2, s15
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008396:	4b1f      	ldr	r3, [pc, #124]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	0c1b      	lsrs	r3, r3, #16
 800839c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a0:	ee07 3a90 	vmov	s15, r3
 80083a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083bc:	ee17 2a90 	vmov	r2, s15
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80083c4:	4b13      	ldr	r3, [pc, #76]	; (8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	0e1b      	lsrs	r3, r3, #24
 80083ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083de:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ea:	ee17 2a90 	vmov	r2, s15
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80083f2:	e008      	b.n	8008406 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	609a      	str	r2, [r3, #8]
}
 8008406:	bf00      	nop
 8008408:	3724      	adds	r7, #36	; 0x24
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	58024400 	.word	0x58024400
 8008418:	03d09000 	.word	0x03d09000
 800841c:	46000000 	.word	0x46000000
 8008420:	4c742400 	.word	0x4c742400
 8008424:	4a742400 	.word	0x4a742400
 8008428:	4af42400 	.word	0x4af42400

0800842c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800843a:	4b53      	ldr	r3, [pc, #332]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	2b03      	cmp	r3, #3
 8008444:	d101      	bne.n	800844a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e099      	b.n	800857e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800844a:	4b4f      	ldr	r3, [pc, #316]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a4e      	ldr	r2, [pc, #312]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008450:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008456:	f7fa faa5 	bl	80029a4 <HAL_GetTick>
 800845a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800845c:	e008      	b.n	8008470 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800845e:	f7fa faa1 	bl	80029a4 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d901      	bls.n	8008470 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e086      	b.n	800857e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008470:	4b45      	ldr	r3, [pc, #276]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f0      	bne.n	800845e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800847c:	4b42      	ldr	r3, [pc, #264]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	031b      	lsls	r3, r3, #12
 800848a:	493f      	ldr	r1, [pc, #252]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 800848c:	4313      	orrs	r3, r2
 800848e:	628b      	str	r3, [r1, #40]	; 0x28
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	3b01      	subs	r3, #1
 8008496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	3b01      	subs	r3, #1
 80084a0:	025b      	lsls	r3, r3, #9
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	431a      	orrs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	041b      	lsls	r3, r3, #16
 80084ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084b2:	431a      	orrs	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	061b      	lsls	r3, r3, #24
 80084bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084c0:	4931      	ldr	r1, [pc, #196]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80084c6:	4b30      	ldr	r3, [pc, #192]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 80084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	492d      	ldr	r1, [pc, #180]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80084d8:	4b2b      	ldr	r3, [pc, #172]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	f023 0220 	bic.w	r2, r3, #32
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	4928      	ldr	r1, [pc, #160]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80084ea:	4b27      	ldr	r3, [pc, #156]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	4a26      	ldr	r2, [pc, #152]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 80084f0:	f023 0310 	bic.w	r3, r3, #16
 80084f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80084f6:	4b24      	ldr	r3, [pc, #144]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 80084f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084fa:	4b24      	ldr	r3, [pc, #144]	; (800858c <RCCEx_PLL2_Config+0x160>)
 80084fc:	4013      	ands	r3, r2
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	69d2      	ldr	r2, [r2, #28]
 8008502:	00d2      	lsls	r2, r2, #3
 8008504:	4920      	ldr	r1, [pc, #128]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008506:	4313      	orrs	r3, r2
 8008508:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800850a:	4b1f      	ldr	r3, [pc, #124]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	4a1e      	ldr	r2, [pc, #120]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008510:	f043 0310 	orr.w	r3, r3, #16
 8008514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d106      	bne.n	800852a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800851c:	4b1a      	ldr	r3, [pc, #104]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 800851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008520:	4a19      	ldr	r2, [pc, #100]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008522:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008526:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008528:	e00f      	b.n	800854a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d106      	bne.n	800853e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008530:	4b15      	ldr	r3, [pc, #84]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	4a14      	ldr	r2, [pc, #80]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800853a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800853c:	e005      	b.n	800854a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800853e:	4b12      	ldr	r3, [pc, #72]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008542:	4a11      	ldr	r2, [pc, #68]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008548:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800854a:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a0e      	ldr	r2, [pc, #56]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008550:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008556:	f7fa fa25 	bl	80029a4 <HAL_GetTick>
 800855a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800855c:	e008      	b.n	8008570 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800855e:	f7fa fa21 	bl	80029a4 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d901      	bls.n	8008570 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e006      	b.n	800857e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008570:	4b05      	ldr	r3, [pc, #20]	; (8008588 <RCCEx_PLL2_Config+0x15c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0f0      	beq.n	800855e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	58024400 	.word	0x58024400
 800858c:	ffff0007 	.word	0xffff0007

08008590 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800859e:	4b53      	ldr	r3, [pc, #332]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d101      	bne.n	80085ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e099      	b.n	80086e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80085ae:	4b4f      	ldr	r3, [pc, #316]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a4e      	ldr	r2, [pc, #312]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80085b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ba:	f7fa f9f3 	bl	80029a4 <HAL_GetTick>
 80085be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085c0:	e008      	b.n	80085d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085c2:	f7fa f9ef 	bl	80029a4 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e086      	b.n	80086e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085d4:	4b45      	ldr	r3, [pc, #276]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f0      	bne.n	80085c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80085e0:	4b42      	ldr	r3, [pc, #264]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	051b      	lsls	r3, r3, #20
 80085ee:	493f      	ldr	r1, [pc, #252]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	628b      	str	r3, [r1, #40]	; 0x28
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	3b01      	subs	r3, #1
 8008604:	025b      	lsls	r3, r3, #9
 8008606:	b29b      	uxth	r3, r3
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	3b01      	subs	r3, #1
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008616:	431a      	orrs	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	3b01      	subs	r3, #1
 800861e:	061b      	lsls	r3, r3, #24
 8008620:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008624:	4931      	ldr	r1, [pc, #196]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 8008626:	4313      	orrs	r3, r2
 8008628:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800862a:	4b30      	ldr	r3, [pc, #192]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	492d      	ldr	r1, [pc, #180]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 8008638:	4313      	orrs	r3, r2
 800863a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800863c:	4b2b      	ldr	r3, [pc, #172]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	4928      	ldr	r1, [pc, #160]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 800864a:	4313      	orrs	r3, r2
 800864c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800864e:	4b27      	ldr	r3, [pc, #156]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	4a26      	ldr	r2, [pc, #152]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 8008654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008658:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800865a:	4b24      	ldr	r3, [pc, #144]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 800865c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800865e:	4b24      	ldr	r3, [pc, #144]	; (80086f0 <RCCEx_PLL3_Config+0x160>)
 8008660:	4013      	ands	r3, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	69d2      	ldr	r2, [r2, #28]
 8008666:	00d2      	lsls	r2, r2, #3
 8008668:	4920      	ldr	r1, [pc, #128]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 800866a:	4313      	orrs	r3, r2
 800866c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800866e:	4b1f      	ldr	r3, [pc, #124]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	4a1e      	ldr	r2, [pc, #120]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 8008674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008680:	4b1a      	ldr	r3, [pc, #104]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	4a19      	ldr	r2, [pc, #100]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 8008686:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800868a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800868c:	e00f      	b.n	80086ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d106      	bne.n	80086a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008694:	4b15      	ldr	r3, [pc, #84]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	4a14      	ldr	r2, [pc, #80]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 800869a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800869e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086a0:	e005      	b.n	80086ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a6:	4a11      	ldr	r2, [pc, #68]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80086a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80086ae:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a0e      	ldr	r2, [pc, #56]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80086b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ba:	f7fa f973 	bl	80029a4 <HAL_GetTick>
 80086be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086c0:	e008      	b.n	80086d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086c2:	f7fa f96f 	bl	80029a4 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d901      	bls.n	80086d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e006      	b.n	80086e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <RCCEx_PLL3_Config+0x15c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0f0      	beq.n	80086c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	58024400 	.word	0x58024400
 80086f0:	ffff0007 	.word	0xffff0007

080086f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e0f1      	b.n	80088ea <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a78      	ldr	r2, [pc, #480]	; (80088f4 <HAL_SPI_Init+0x200>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00f      	beq.n	8008736 <HAL_SPI_Init+0x42>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a77      	ldr	r2, [pc, #476]	; (80088f8 <HAL_SPI_Init+0x204>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d00a      	beq.n	8008736 <HAL_SPI_Init+0x42>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a75      	ldr	r2, [pc, #468]	; (80088fc <HAL_SPI_Init+0x208>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d005      	beq.n	8008736 <HAL_SPI_Init+0x42>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b0f      	cmp	r3, #15
 8008730:	d901      	bls.n	8008736 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e0d9      	b.n	80088ea <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fba2 	bl	8008e80 <SPI_GetPacketSize>
 800873c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a6c      	ldr	r2, [pc, #432]	; (80088f4 <HAL_SPI_Init+0x200>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00c      	beq.n	8008762 <HAL_SPI_Init+0x6e>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a6a      	ldr	r2, [pc, #424]	; (80088f8 <HAL_SPI_Init+0x204>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d007      	beq.n	8008762 <HAL_SPI_Init+0x6e>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a69      	ldr	r2, [pc, #420]	; (80088fc <HAL_SPI_Init+0x208>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d002      	beq.n	8008762 <HAL_SPI_Init+0x6e>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b08      	cmp	r3, #8
 8008760:	d811      	bhi.n	8008786 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008766:	4a63      	ldr	r2, [pc, #396]	; (80088f4 <HAL_SPI_Init+0x200>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d009      	beq.n	8008780 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a61      	ldr	r2, [pc, #388]	; (80088f8 <HAL_SPI_Init+0x204>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d004      	beq.n	8008780 <HAL_SPI_Init+0x8c>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a60      	ldr	r2, [pc, #384]	; (80088fc <HAL_SPI_Init+0x208>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d104      	bne.n	800878a <HAL_SPI_Init+0x96>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b10      	cmp	r3, #16
 8008784:	d901      	bls.n	800878a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e0af      	b.n	80088ea <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d106      	bne.n	80087a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7f9 fe3a 	bl	8002418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0201 	bic.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80087c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087d0:	d119      	bne.n	8008806 <HAL_SPI_Init+0x112>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087da:	d103      	bne.n	80087e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d008      	beq.n	80087f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10c      	bne.n	8008806 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80087f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087f4:	d107      	bne.n	8008806 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008804:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69da      	ldr	r2, [r3, #28]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	431a      	orrs	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	431a      	orrs	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008818:	ea42 0103 	orr.w	r1, r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	431a      	orrs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	431a      	orrs	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	431a      	orrs	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008866:	ea42 0103 	orr.w	r1, r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d113      	bne.n	80088a6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008890:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f022 0201 	bic.w	r2, r2, #1
 80088b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	40013000 	.word	0x40013000
 80088f8:	40003800 	.word	0x40003800
 80088fc:	40003c00 	.word	0x40003c00

08008900 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	4613      	mov	r3, r2
 800890e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3320      	adds	r3, #32
 8008916:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008922:	2b01      	cmp	r3, #1
 8008924:	d101      	bne.n	800892a <HAL_SPI_Transmit+0x2a>
 8008926:	2302      	movs	r3, #2
 8008928:	e1d7      	b.n	8008cda <HAL_SPI_Transmit+0x3da>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008932:	f7fa f837 	bl	80029a4 <HAL_GetTick>
 8008936:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b01      	cmp	r3, #1
 8008942:	d007      	beq.n	8008954 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008944:	2302      	movs	r3, #2
 8008946:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008950:	7efb      	ldrb	r3, [r7, #27]
 8008952:	e1c2      	b.n	8008cda <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_SPI_Transmit+0x60>
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d107      	bne.n	8008970 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800896c:	7efb      	ldrb	r3, [r7, #27]
 800896e:	e1b4      	b.n	8008cda <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2203      	movs	r2, #3
 8008974:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	88fa      	ldrh	r2, [r7, #6]
 800898a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	88fa      	ldrh	r2, [r7, #6]
 8008992:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80089c0:	d107      	bne.n	80089d2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	4b96      	ldr	r3, [pc, #600]	; (8008c34 <HAL_SPI_Transmit+0x334>)
 80089da:	4013      	ands	r3, r2
 80089dc:	88f9      	ldrh	r1, [r7, #6]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	6812      	ldr	r2, [r2, #0]
 80089e2:	430b      	orrs	r3, r1
 80089e4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f042 0201 	orr.w	r2, r2, #1
 80089f4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089fe:	d107      	bne.n	8008a10 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	2b0f      	cmp	r3, #15
 8008a16:	d947      	bls.n	8008aa8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008a18:	e03f      	b.n	8008a9a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d114      	bne.n	8008a52 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a38:	1d1a      	adds	r2, r3, #4
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008a50:	e023      	b.n	8008a9a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a52:	f7f9 ffa7 	bl	80029a4 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d803      	bhi.n	8008a6a <HAL_SPI_Transmit+0x16a>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a68:	d102      	bne.n	8008a70 <HAL_SPI_Transmit+0x170>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d114      	bne.n	8008a9a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 f937 	bl	8008ce4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e11f      	b.n	8008cda <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1b9      	bne.n	8008a1a <HAL_SPI_Transmit+0x11a>
 8008aa6:	e0f2      	b.n	8008c8e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	2b07      	cmp	r3, #7
 8008aae:	f240 80e7 	bls.w	8008c80 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008ab2:	e05d      	b.n	8008b70 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d132      	bne.n	8008b28 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d918      	bls.n	8008b00 <HAL_SPI_Transmit+0x200>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d014      	beq.n	8008b00 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6812      	ldr	r2, [r2, #0]
 8008ae0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ae6:	1d1a      	adds	r2, r3, #4
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	3b02      	subs	r3, #2
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008afe:	e037      	b.n	8008b70 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b04:	881a      	ldrh	r2, [r3, #0]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0e:	1c9a      	adds	r2, r3, #2
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008b26:	e023      	b.n	8008b70 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b28:	f7f9 ff3c 	bl	80029a4 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d803      	bhi.n	8008b40 <HAL_SPI_Transmit+0x240>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3e:	d102      	bne.n	8008b46 <HAL_SPI_Transmit+0x246>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d114      	bne.n	8008b70 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 f8cc 	bl	8008ce4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e0b4      	b.n	8008cda <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d19b      	bne.n	8008ab4 <HAL_SPI_Transmit+0x1b4>
 8008b7c:	e087      	b.n	8008c8e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d155      	bne.n	8008c38 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d918      	bls.n	8008bca <HAL_SPI_Transmit+0x2ca>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9c:	2b40      	cmp	r3, #64	; 0x40
 8008b9e:	d914      	bls.n	8008bca <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6812      	ldr	r2, [r2, #0]
 8008baa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb0:	1d1a      	adds	r2, r3, #4
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	3b04      	subs	r3, #4
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008bc8:	e05a      	b.n	8008c80 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d917      	bls.n	8008c06 <HAL_SPI_Transmit+0x306>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d013      	beq.n	8008c06 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be2:	881a      	ldrh	r2, [r3, #0]
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bec:	1c9a      	adds	r2, r3, #2
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	3b02      	subs	r3, #2
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008c04:	e03c      	b.n	8008c80 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3320      	adds	r3, #32
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008c30:	e026      	b.n	8008c80 <HAL_SPI_Transmit+0x380>
 8008c32:	bf00      	nop
 8008c34:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c38:	f7f9 feb4 	bl	80029a4 <HAL_GetTick>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d803      	bhi.n	8008c50 <HAL_SPI_Transmit+0x350>
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4e:	d102      	bne.n	8008c56 <HAL_SPI_Transmit+0x356>
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d114      	bne.n	8008c80 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f844 	bl	8008ce4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e02c      	b.n	8008cda <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f47f af78 	bne.w	8008b7e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2200      	movs	r2, #0
 8008c96:	2108      	movs	r1, #8
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f8c3 	bl	8008e24 <SPI_WaitOnFlagUntilTimeout>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008caa:	f043 0220 	orr.w	r2, r3, #32
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f815 	bl	8008ce4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e000      	b.n	8008cda <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008cd8:	7efb      	ldrb	r3, [r7, #27]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3720      	adds	r7, #32
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop

08008ce4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699a      	ldr	r2, [r3, #24]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0208 	orr.w	r2, r2, #8
 8008d02:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699a      	ldr	r2, [r3, #24]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0210 	orr.w	r2, r2, #16
 8008d12:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f022 0201 	bic.w	r2, r2, #1
 8008d22:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6919      	ldr	r1, [r3, #16]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	4b3c      	ldr	r3, [pc, #240]	; (8008e20 <SPI_CloseTransfer+0x13c>)
 8008d30:	400b      	ands	r3, r1
 8008d32:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689a      	ldr	r2, [r3, #8]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008d42:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d014      	beq.n	8008d7a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f003 0320 	and.w	r3, r3, #32
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00f      	beq.n	8008d7a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	699a      	ldr	r2, [r3, #24]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0220 	orr.w	r2, r2, #32
 8008d78:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d014      	beq.n	8008db0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00f      	beq.n	8008db0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d96:	f043 0204 	orr.w	r2, r3, #4
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	699a      	ldr	r2, [r3, #24]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00f      	beq.n	8008dda <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc0:	f043 0201 	orr.w	r2, r3, #1
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699a      	ldr	r2, [r3, #24]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dd8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00f      	beq.n	8008e04 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dea:	f043 0208 	orr.w	r2, r3, #8
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	699a      	ldr	r2, [r3, #24]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e02:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008e14:	bf00      	nop
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	fffffc90 	.word	0xfffffc90

08008e24 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	4613      	mov	r3, r2
 8008e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008e34:	e010      	b.n	8008e58 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e36:	f7f9 fdb5 	bl	80029a4 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	69ba      	ldr	r2, [r7, #24]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d803      	bhi.n	8008e4e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d102      	bne.n	8008e54 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e00f      	b.n	8008e78 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695a      	ldr	r2, [r3, #20]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	4013      	ands	r3, r2
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	bf0c      	ite	eq
 8008e68:	2301      	moveq	r3, #1
 8008e6a:	2300      	movne	r3, #0
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	461a      	mov	r2, r3
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d0df      	beq.n	8008e36 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e8c:	095b      	lsrs	r3, r3, #5
 8008e8e:	3301      	adds	r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	3301      	adds	r3, #1
 8008e98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	3307      	adds	r3, #7
 8008e9e:	08db      	lsrs	r3, r3, #3
 8008ea0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	fb02 f303 	mul.w	r3, r2, r3
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e042      	b.n	8008f4e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d106      	bne.n	8008ee0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7f9 fb08 	bl	80024f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2224      	movs	r2, #36	; 0x24
 8008ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 0201 	bic.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fbeb 	bl	80096d4 <UART_SetConfig>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d101      	bne.n	8008f08 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e022      	b.n	8008f4e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 f947 	bl	800a1a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f042 0201 	orr.w	r2, r2, #1
 8008f44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 f9ce 	bl	800a2e8 <UART_CheckIdleState>
 8008f4c:	4603      	mov	r3, r0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b0ba      	sub	sp, #232	; 0xe8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008f82:	f640 030f 	movw	r3, #2063	; 0x80f
 8008f86:	4013      	ands	r3, r2
 8008f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11b      	bne.n	8008fcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f98:	f003 0320 	and.w	r3, r3, #32
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d015      	beq.n	8008fcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa4:	f003 0320 	and.w	r3, r3, #32
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d105      	bne.n	8008fb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 835a 	beq.w	8009676 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
      }
      return;
 8008fca:	e354      	b.n	8009676 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 811f 	beq.w	8009214 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008fd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008fda:	4b8b      	ldr	r3, [pc, #556]	; (8009208 <HAL_UART_IRQHandler+0x2b0>)
 8008fdc:	4013      	ands	r3, r2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008fe2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008fe6:	4b89      	ldr	r3, [pc, #548]	; (800920c <HAL_UART_IRQHandler+0x2b4>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 8112 	beq.w	8009214 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d011      	beq.n	8009020 <HAL_UART_IRQHandler+0xc8>
 8008ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2201      	movs	r2, #1
 800900e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009016:	f043 0201 	orr.w	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009024:	f003 0302 	and.w	r3, r3, #2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d011      	beq.n	8009050 <HAL_UART_IRQHandler+0xf8>
 800902c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2202      	movs	r2, #2
 800903e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009046:	f043 0204 	orr.w	r2, r3, #4
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d011      	beq.n	8009080 <HAL_UART_IRQHandler+0x128>
 800905c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2204      	movs	r2, #4
 800906e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009076:	f043 0202 	orr.w	r2, r3, #2
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009084:	f003 0308 	and.w	r3, r3, #8
 8009088:	2b00      	cmp	r3, #0
 800908a:	d017      	beq.n	80090bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800908c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b00      	cmp	r3, #0
 8009096:	d105      	bne.n	80090a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009098:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800909c:	4b5a      	ldr	r3, [pc, #360]	; (8009208 <HAL_UART_IRQHandler+0x2b0>)
 800909e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2208      	movs	r2, #8
 80090aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090b2:	f043 0208 	orr.w	r2, r3, #8
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d012      	beq.n	80090ee <HAL_UART_IRQHandler+0x196>
 80090c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00c      	beq.n	80090ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090e4:	f043 0220 	orr.w	r2, r3, #32
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 82c0 	beq.w	800967a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fe:	f003 0320 	and.w	r3, r3, #32
 8009102:	2b00      	cmp	r3, #0
 8009104:	d013      	beq.n	800912e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800910a:	f003 0320 	and.w	r3, r3, #32
 800910e:	2b00      	cmp	r3, #0
 8009110:	d105      	bne.n	800911e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009142:	2b40      	cmp	r3, #64	; 0x40
 8009144:	d005      	beq.n	8009152 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800914a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800914e:	2b00      	cmp	r3, #0
 8009150:	d04f      	beq.n	80091f2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 f9dc 	bl	800a510 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009162:	2b40      	cmp	r3, #64	; 0x40
 8009164:	d141      	bne.n	80091ea <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3308      	adds	r3, #8
 800916c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800917c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800919e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1d9      	bne.n	8009166 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d013      	beq.n	80091e2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091be:	4a14      	ldr	r2, [pc, #80]	; (8009210 <HAL_UART_IRQHandler+0x2b8>)
 80091c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fa fbc6 	bl	8003958 <HAL_DMA_Abort_IT>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d017      	beq.n	8009202 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80091dc:	4610      	mov	r0, r2
 80091de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e0:	e00f      	b.n	8009202 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa60 	bl	80096a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e8:	e00b      	b.n	8009202 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fa5c 	bl	80096a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f0:	e007      	b.n	8009202 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa58 	bl	80096a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009200:	e23b      	b.n	800967a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009202:	bf00      	nop
    return;
 8009204:	e239      	b.n	800967a <HAL_UART_IRQHandler+0x722>
 8009206:	bf00      	nop
 8009208:	10000001 	.word	0x10000001
 800920c:	04000120 	.word	0x04000120
 8009210:	0800a5dd 	.word	0x0800a5dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009218:	2b01      	cmp	r3, #1
 800921a:	f040 81ce 	bne.w	80095ba <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800921e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009222:	f003 0310 	and.w	r3, r3, #16
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 81c7 	beq.w	80095ba <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800922c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009230:	f003 0310 	and.w	r3, r3, #16
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 81c0 	beq.w	80095ba <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2210      	movs	r2, #16
 8009240:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924c:	2b40      	cmp	r3, #64	; 0x40
 800924e:	f040 813b 	bne.w	80094c8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a8b      	ldr	r2, [pc, #556]	; (8009488 <HAL_UART_IRQHandler+0x530>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d059      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a89      	ldr	r2, [pc, #548]	; (800948c <HAL_UART_IRQHandler+0x534>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d053      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a87      	ldr	r2, [pc, #540]	; (8009490 <HAL_UART_IRQHandler+0x538>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d04d      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a85      	ldr	r2, [pc, #532]	; (8009494 <HAL_UART_IRQHandler+0x53c>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d047      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a83      	ldr	r2, [pc, #524]	; (8009498 <HAL_UART_IRQHandler+0x540>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d041      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a81      	ldr	r2, [pc, #516]	; (800949c <HAL_UART_IRQHandler+0x544>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d03b      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a7f      	ldr	r2, [pc, #508]	; (80094a0 <HAL_UART_IRQHandler+0x548>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d035      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a7d      	ldr	r2, [pc, #500]	; (80094a4 <HAL_UART_IRQHandler+0x54c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d02f      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a7b      	ldr	r2, [pc, #492]	; (80094a8 <HAL_UART_IRQHandler+0x550>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d029      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a79      	ldr	r2, [pc, #484]	; (80094ac <HAL_UART_IRQHandler+0x554>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d023      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a77      	ldr	r2, [pc, #476]	; (80094b0 <HAL_UART_IRQHandler+0x558>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d01d      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a75      	ldr	r2, [pc, #468]	; (80094b4 <HAL_UART_IRQHandler+0x55c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d017      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a73      	ldr	r2, [pc, #460]	; (80094b8 <HAL_UART_IRQHandler+0x560>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d011      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a71      	ldr	r2, [pc, #452]	; (80094bc <HAL_UART_IRQHandler+0x564>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d00b      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a6f      	ldr	r2, [pc, #444]	; (80094c0 <HAL_UART_IRQHandler+0x568>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d005      	beq.n	8009312 <HAL_UART_IRQHandler+0x3ba>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a6d      	ldr	r2, [pc, #436]	; (80094c4 <HAL_UART_IRQHandler+0x56c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d105      	bne.n	800931e <HAL_UART_IRQHandler+0x3c6>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	b29b      	uxth	r3, r3
 800931c:	e004      	b.n	8009328 <HAL_UART_IRQHandler+0x3d0>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	b29b      	uxth	r3, r3
 8009328:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800932c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 81a4 	beq.w	800967e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800933c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009340:	429a      	cmp	r2, r3
 8009342:	f080 819c 	bcs.w	800967e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800934c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800935a:	f000 8086 	beq.w	800946a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009372:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800937a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009388:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800938c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009394:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80093a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1da      	bne.n	800935e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3308      	adds	r3, #8
 80093ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80093b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093ba:	f023 0301 	bic.w	r3, r3, #1
 80093be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3308      	adds	r3, #8
 80093c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80093d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093d8:	e841 2300 	strex	r3, r2, [r1]
 80093dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e1      	bne.n	80093a8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3308      	adds	r3, #8
 8009404:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009408:	66fa      	str	r2, [r7, #108]	; 0x6c
 800940a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800940e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009410:	e841 2300 	strex	r3, r2, [r1]
 8009414:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e3      	bne.n	80093e4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2220      	movs	r2, #32
 8009420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943a:	f023 0310 	bic.w	r3, r3, #16
 800943e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800944c:	65bb      	str	r3, [r7, #88]	; 0x58
 800944e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800945a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e4      	bne.n	800942a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009464:	4618      	mov	r0, r3
 8009466:	f7f9 ff59 	bl	800331c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009476:	b29b      	uxth	r3, r3
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	b29b      	uxth	r3, r3
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f91c 	bl	80096bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009484:	e0fb      	b.n	800967e <HAL_UART_IRQHandler+0x726>
 8009486:	bf00      	nop
 8009488:	40020010 	.word	0x40020010
 800948c:	40020028 	.word	0x40020028
 8009490:	40020040 	.word	0x40020040
 8009494:	40020058 	.word	0x40020058
 8009498:	40020070 	.word	0x40020070
 800949c:	40020088 	.word	0x40020088
 80094a0:	400200a0 	.word	0x400200a0
 80094a4:	400200b8 	.word	0x400200b8
 80094a8:	40020410 	.word	0x40020410
 80094ac:	40020428 	.word	0x40020428
 80094b0:	40020440 	.word	0x40020440
 80094b4:	40020458 	.word	0x40020458
 80094b8:	40020470 	.word	0x40020470
 80094bc:	40020488 	.word	0x40020488
 80094c0:	400204a0 	.word	0x400204a0
 80094c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 80cc 	beq.w	8009682 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80094ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 80c7 	beq.w	8009682 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fc:	e853 3f00 	ldrex	r3, [r3]
 8009500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	461a      	mov	r2, r3
 8009512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009516:	647b      	str	r3, [r7, #68]	; 0x44
 8009518:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800951c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800951e:	e841 2300 	strex	r3, r2, [r1]
 8009522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1e4      	bne.n	80094f4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3308      	adds	r3, #8
 8009530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	623b      	str	r3, [r7, #32]
   return(result);
 800953a:	6a3a      	ldr	r2, [r7, #32]
 800953c:	4b54      	ldr	r3, [pc, #336]	; (8009690 <HAL_UART_IRQHandler+0x738>)
 800953e:	4013      	ands	r3, r2
 8009540:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3308      	adds	r3, #8
 800954a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800954e:	633a      	str	r2, [r7, #48]	; 0x30
 8009550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e3      	bne.n	800952a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2220      	movs	r2, #32
 8009566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	60fb      	str	r3, [r7, #12]
   return(result);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f023 0310 	bic.w	r3, r3, #16
 800958a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009598:	61fb      	str	r3, [r7, #28]
 800959a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	69b9      	ldr	r1, [r7, #24]
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	e841 2300 	strex	r3, r2, [r1]
 80095a4:	617b      	str	r3, [r7, #20]
   return(result);
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e4      	bne.n	8009576 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f882 	bl	80096bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095b8:	e063      	b.n	8009682 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80095ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00e      	beq.n	80095e4 <HAL_UART_IRQHandler+0x68c>
 80095c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d008      	beq.n	80095e4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80095da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 f83e 	bl	800a65e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095e2:	e051      	b.n	8009688 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d014      	beq.n	800961a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d105      	bne.n	8009608 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d008      	beq.n	800961a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800960c:	2b00      	cmp	r3, #0
 800960e:	d03a      	beq.n	8009686 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	4798      	blx	r3
    }
    return;
 8009618:	e035      	b.n	8009686 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800961a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800961e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009622:	2b00      	cmp	r3, #0
 8009624:	d009      	beq.n	800963a <HAL_UART_IRQHandler+0x6e2>
 8009626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800962a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 ffe8 	bl	800a608 <UART_EndTransmit_IT>
    return;
 8009638:	e026      	b.n	8009688 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800963a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d009      	beq.n	800965a <HAL_UART_IRQHandler+0x702>
 8009646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800964a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 f817 	bl	800a686 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009658:	e016      	b.n	8009688 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800965a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800965e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d010      	beq.n	8009688 <HAL_UART_IRQHandler+0x730>
 8009666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800966a:	2b00      	cmp	r3, #0
 800966c:	da0c      	bge.n	8009688 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 ffff 	bl	800a672 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009674:	e008      	b.n	8009688 <HAL_UART_IRQHandler+0x730>
      return;
 8009676:	bf00      	nop
 8009678:	e006      	b.n	8009688 <HAL_UART_IRQHandler+0x730>
    return;
 800967a:	bf00      	nop
 800967c:	e004      	b.n	8009688 <HAL_UART_IRQHandler+0x730>
      return;
 800967e:	bf00      	nop
 8009680:	e002      	b.n	8009688 <HAL_UART_IRQHandler+0x730>
      return;
 8009682:	bf00      	nop
 8009684:	e000      	b.n	8009688 <HAL_UART_IRQHandler+0x730>
    return;
 8009686:	bf00      	nop
  }
}
 8009688:	37e8      	adds	r7, #232	; 0xe8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	effffffe 	.word	0xeffffffe

08009694 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096d8:	b092      	sub	sp, #72	; 0x48
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	689a      	ldr	r2, [r3, #8]
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	431a      	orrs	r2, r3
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	431a      	orrs	r2, r3
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	4bbe      	ldr	r3, [pc, #760]	; (80099fc <UART_SetConfig+0x328>)
 8009704:	4013      	ands	r3, r2
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	6812      	ldr	r2, [r2, #0]
 800970a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800970c:	430b      	orrs	r3, r1
 800970e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4ab3      	ldr	r2, [pc, #716]	; (8009a00 <UART_SetConfig+0x32c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d004      	beq.n	8009740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800973c:	4313      	orrs	r3, r2
 800973e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	4baf      	ldr	r3, [pc, #700]	; (8009a04 <UART_SetConfig+0x330>)
 8009748:	4013      	ands	r3, r2
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009750:	430b      	orrs	r3, r1
 8009752:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975a:	f023 010f 	bic.w	r1, r3, #15
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4aa6      	ldr	r2, [pc, #664]	; (8009a08 <UART_SetConfig+0x334>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d177      	bne.n	8009864 <UART_SetConfig+0x190>
 8009774:	4ba5      	ldr	r3, [pc, #660]	; (8009a0c <UART_SetConfig+0x338>)
 8009776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800977c:	2b28      	cmp	r3, #40	; 0x28
 800977e:	d86d      	bhi.n	800985c <UART_SetConfig+0x188>
 8009780:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <UART_SetConfig+0xb4>)
 8009782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009786:	bf00      	nop
 8009788:	0800982d 	.word	0x0800982d
 800978c:	0800985d 	.word	0x0800985d
 8009790:	0800985d 	.word	0x0800985d
 8009794:	0800985d 	.word	0x0800985d
 8009798:	0800985d 	.word	0x0800985d
 800979c:	0800985d 	.word	0x0800985d
 80097a0:	0800985d 	.word	0x0800985d
 80097a4:	0800985d 	.word	0x0800985d
 80097a8:	08009835 	.word	0x08009835
 80097ac:	0800985d 	.word	0x0800985d
 80097b0:	0800985d 	.word	0x0800985d
 80097b4:	0800985d 	.word	0x0800985d
 80097b8:	0800985d 	.word	0x0800985d
 80097bc:	0800985d 	.word	0x0800985d
 80097c0:	0800985d 	.word	0x0800985d
 80097c4:	0800985d 	.word	0x0800985d
 80097c8:	0800983d 	.word	0x0800983d
 80097cc:	0800985d 	.word	0x0800985d
 80097d0:	0800985d 	.word	0x0800985d
 80097d4:	0800985d 	.word	0x0800985d
 80097d8:	0800985d 	.word	0x0800985d
 80097dc:	0800985d 	.word	0x0800985d
 80097e0:	0800985d 	.word	0x0800985d
 80097e4:	0800985d 	.word	0x0800985d
 80097e8:	08009845 	.word	0x08009845
 80097ec:	0800985d 	.word	0x0800985d
 80097f0:	0800985d 	.word	0x0800985d
 80097f4:	0800985d 	.word	0x0800985d
 80097f8:	0800985d 	.word	0x0800985d
 80097fc:	0800985d 	.word	0x0800985d
 8009800:	0800985d 	.word	0x0800985d
 8009804:	0800985d 	.word	0x0800985d
 8009808:	0800984d 	.word	0x0800984d
 800980c:	0800985d 	.word	0x0800985d
 8009810:	0800985d 	.word	0x0800985d
 8009814:	0800985d 	.word	0x0800985d
 8009818:	0800985d 	.word	0x0800985d
 800981c:	0800985d 	.word	0x0800985d
 8009820:	0800985d 	.word	0x0800985d
 8009824:	0800985d 	.word	0x0800985d
 8009828:	08009855 	.word	0x08009855
 800982c:	2301      	movs	r3, #1
 800982e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009832:	e222      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009834:	2304      	movs	r3, #4
 8009836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983a:	e21e      	b.n	8009c7a <UART_SetConfig+0x5a6>
 800983c:	2308      	movs	r3, #8
 800983e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009842:	e21a      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009844:	2310      	movs	r3, #16
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984a:	e216      	b.n	8009c7a <UART_SetConfig+0x5a6>
 800984c:	2320      	movs	r3, #32
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009852:	e212      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985a:	e20e      	b.n	8009c7a <UART_SetConfig+0x5a6>
 800985c:	2380      	movs	r3, #128	; 0x80
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009862:	e20a      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a69      	ldr	r2, [pc, #420]	; (8009a10 <UART_SetConfig+0x33c>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d130      	bne.n	80098d0 <UART_SetConfig+0x1fc>
 800986e:	4b67      	ldr	r3, [pc, #412]	; (8009a0c <UART_SetConfig+0x338>)
 8009870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	2b05      	cmp	r3, #5
 8009878:	d826      	bhi.n	80098c8 <UART_SetConfig+0x1f4>
 800987a:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <UART_SetConfig+0x1ac>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	08009899 	.word	0x08009899
 8009884:	080098a1 	.word	0x080098a1
 8009888:	080098a9 	.word	0x080098a9
 800988c:	080098b1 	.word	0x080098b1
 8009890:	080098b9 	.word	0x080098b9
 8009894:	080098c1 	.word	0x080098c1
 8009898:	2300      	movs	r3, #0
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989e:	e1ec      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80098a0:	2304      	movs	r3, #4
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a6:	e1e8      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80098a8:	2308      	movs	r3, #8
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ae:	e1e4      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80098b0:	2310      	movs	r3, #16
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b6:	e1e0      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80098b8:	2320      	movs	r3, #32
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098be:	e1dc      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80098c0:	2340      	movs	r3, #64	; 0x40
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098c6:	e1d8      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80098c8:	2380      	movs	r3, #128	; 0x80
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ce:	e1d4      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a4f      	ldr	r2, [pc, #316]	; (8009a14 <UART_SetConfig+0x340>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d130      	bne.n	800993c <UART_SetConfig+0x268>
 80098da:	4b4c      	ldr	r3, [pc, #304]	; (8009a0c <UART_SetConfig+0x338>)
 80098dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	2b05      	cmp	r3, #5
 80098e4:	d826      	bhi.n	8009934 <UART_SetConfig+0x260>
 80098e6:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <UART_SetConfig+0x218>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009905 	.word	0x08009905
 80098f0:	0800990d 	.word	0x0800990d
 80098f4:	08009915 	.word	0x08009915
 80098f8:	0800991d 	.word	0x0800991d
 80098fc:	08009925 	.word	0x08009925
 8009900:	0800992d 	.word	0x0800992d
 8009904:	2300      	movs	r3, #0
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990a:	e1b6      	b.n	8009c7a <UART_SetConfig+0x5a6>
 800990c:	2304      	movs	r3, #4
 800990e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009912:	e1b2      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009914:	2308      	movs	r3, #8
 8009916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800991a:	e1ae      	b.n	8009c7a <UART_SetConfig+0x5a6>
 800991c:	2310      	movs	r3, #16
 800991e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009922:	e1aa      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009924:	2320      	movs	r3, #32
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992a:	e1a6      	b.n	8009c7a <UART_SetConfig+0x5a6>
 800992c:	2340      	movs	r3, #64	; 0x40
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009932:	e1a2      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009934:	2380      	movs	r3, #128	; 0x80
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800993a:	e19e      	b.n	8009c7a <UART_SetConfig+0x5a6>
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a35      	ldr	r2, [pc, #212]	; (8009a18 <UART_SetConfig+0x344>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d130      	bne.n	80099a8 <UART_SetConfig+0x2d4>
 8009946:	4b31      	ldr	r3, [pc, #196]	; (8009a0c <UART_SetConfig+0x338>)
 8009948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800994a:	f003 0307 	and.w	r3, r3, #7
 800994e:	2b05      	cmp	r3, #5
 8009950:	d826      	bhi.n	80099a0 <UART_SetConfig+0x2cc>
 8009952:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <UART_SetConfig+0x284>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	08009971 	.word	0x08009971
 800995c:	08009979 	.word	0x08009979
 8009960:	08009981 	.word	0x08009981
 8009964:	08009989 	.word	0x08009989
 8009968:	08009991 	.word	0x08009991
 800996c:	08009999 	.word	0x08009999
 8009970:	2300      	movs	r3, #0
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009976:	e180      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009978:	2304      	movs	r3, #4
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997e:	e17c      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009980:	2308      	movs	r3, #8
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009986:	e178      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998e:	e174      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009990:	2320      	movs	r3, #32
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009996:	e170      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009998:	2340      	movs	r3, #64	; 0x40
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999e:	e16c      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80099a0:	2380      	movs	r3, #128	; 0x80
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a6:	e168      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a1b      	ldr	r2, [pc, #108]	; (8009a1c <UART_SetConfig+0x348>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d142      	bne.n	8009a38 <UART_SetConfig+0x364>
 80099b2:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <UART_SetConfig+0x338>)
 80099b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	d838      	bhi.n	8009a30 <UART_SetConfig+0x35c>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <UART_SetConfig+0x2f0>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099dd 	.word	0x080099dd
 80099c8:	080099e5 	.word	0x080099e5
 80099cc:	080099ed 	.word	0x080099ed
 80099d0:	080099f5 	.word	0x080099f5
 80099d4:	08009a21 	.word	0x08009a21
 80099d8:	08009a29 	.word	0x08009a29
 80099dc:	2300      	movs	r3, #0
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e2:	e14a      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80099e4:	2304      	movs	r3, #4
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ea:	e146      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80099ec:	2308      	movs	r3, #8
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f2:	e142      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80099f4:	2310      	movs	r3, #16
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fa:	e13e      	b.n	8009c7a <UART_SetConfig+0x5a6>
 80099fc:	cfff69f3 	.word	0xcfff69f3
 8009a00:	58000c00 	.word	0x58000c00
 8009a04:	11fff4ff 	.word	0x11fff4ff
 8009a08:	40011000 	.word	0x40011000
 8009a0c:	58024400 	.word	0x58024400
 8009a10:	40004400 	.word	0x40004400
 8009a14:	40004800 	.word	0x40004800
 8009a18:	40004c00 	.word	0x40004c00
 8009a1c:	40005000 	.word	0x40005000
 8009a20:	2320      	movs	r3, #32
 8009a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a26:	e128      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009a28:	2340      	movs	r3, #64	; 0x40
 8009a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2e:	e124      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009a30:	2380      	movs	r3, #128	; 0x80
 8009a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a36:	e120      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4acb      	ldr	r2, [pc, #812]	; (8009d6c <UART_SetConfig+0x698>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d176      	bne.n	8009b30 <UART_SetConfig+0x45c>
 8009a42:	4bcb      	ldr	r3, [pc, #812]	; (8009d70 <UART_SetConfig+0x69c>)
 8009a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a4a:	2b28      	cmp	r3, #40	; 0x28
 8009a4c:	d86c      	bhi.n	8009b28 <UART_SetConfig+0x454>
 8009a4e:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <UART_SetConfig+0x380>)
 8009a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a54:	08009af9 	.word	0x08009af9
 8009a58:	08009b29 	.word	0x08009b29
 8009a5c:	08009b29 	.word	0x08009b29
 8009a60:	08009b29 	.word	0x08009b29
 8009a64:	08009b29 	.word	0x08009b29
 8009a68:	08009b29 	.word	0x08009b29
 8009a6c:	08009b29 	.word	0x08009b29
 8009a70:	08009b29 	.word	0x08009b29
 8009a74:	08009b01 	.word	0x08009b01
 8009a78:	08009b29 	.word	0x08009b29
 8009a7c:	08009b29 	.word	0x08009b29
 8009a80:	08009b29 	.word	0x08009b29
 8009a84:	08009b29 	.word	0x08009b29
 8009a88:	08009b29 	.word	0x08009b29
 8009a8c:	08009b29 	.word	0x08009b29
 8009a90:	08009b29 	.word	0x08009b29
 8009a94:	08009b09 	.word	0x08009b09
 8009a98:	08009b29 	.word	0x08009b29
 8009a9c:	08009b29 	.word	0x08009b29
 8009aa0:	08009b29 	.word	0x08009b29
 8009aa4:	08009b29 	.word	0x08009b29
 8009aa8:	08009b29 	.word	0x08009b29
 8009aac:	08009b29 	.word	0x08009b29
 8009ab0:	08009b29 	.word	0x08009b29
 8009ab4:	08009b11 	.word	0x08009b11
 8009ab8:	08009b29 	.word	0x08009b29
 8009abc:	08009b29 	.word	0x08009b29
 8009ac0:	08009b29 	.word	0x08009b29
 8009ac4:	08009b29 	.word	0x08009b29
 8009ac8:	08009b29 	.word	0x08009b29
 8009acc:	08009b29 	.word	0x08009b29
 8009ad0:	08009b29 	.word	0x08009b29
 8009ad4:	08009b19 	.word	0x08009b19
 8009ad8:	08009b29 	.word	0x08009b29
 8009adc:	08009b29 	.word	0x08009b29
 8009ae0:	08009b29 	.word	0x08009b29
 8009ae4:	08009b29 	.word	0x08009b29
 8009ae8:	08009b29 	.word	0x08009b29
 8009aec:	08009b29 	.word	0x08009b29
 8009af0:	08009b29 	.word	0x08009b29
 8009af4:	08009b21 	.word	0x08009b21
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afe:	e0bc      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b00:	2304      	movs	r3, #4
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b06:	e0b8      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b08:	2308      	movs	r3, #8
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0e:	e0b4      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b10:	2310      	movs	r3, #16
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b16:	e0b0      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b18:	2320      	movs	r3, #32
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1e:	e0ac      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b20:	2340      	movs	r3, #64	; 0x40
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b26:	e0a8      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b28:	2380      	movs	r3, #128	; 0x80
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2e:	e0a4      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a8f      	ldr	r2, [pc, #572]	; (8009d74 <UART_SetConfig+0x6a0>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d130      	bne.n	8009b9c <UART_SetConfig+0x4c8>
 8009b3a:	4b8d      	ldr	r3, [pc, #564]	; (8009d70 <UART_SetConfig+0x69c>)
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b3e:	f003 0307 	and.w	r3, r3, #7
 8009b42:	2b05      	cmp	r3, #5
 8009b44:	d826      	bhi.n	8009b94 <UART_SetConfig+0x4c0>
 8009b46:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <UART_SetConfig+0x478>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b65 	.word	0x08009b65
 8009b50:	08009b6d 	.word	0x08009b6d
 8009b54:	08009b75 	.word	0x08009b75
 8009b58:	08009b7d 	.word	0x08009b7d
 8009b5c:	08009b85 	.word	0x08009b85
 8009b60:	08009b8d 	.word	0x08009b8d
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6a:	e086      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b72:	e082      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b74:	2308      	movs	r3, #8
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7a:	e07e      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b82:	e07a      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b84:	2320      	movs	r3, #32
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8a:	e076      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b92:	e072      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b94:	2380      	movs	r3, #128	; 0x80
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9a:	e06e      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a75      	ldr	r2, [pc, #468]	; (8009d78 <UART_SetConfig+0x6a4>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d130      	bne.n	8009c08 <UART_SetConfig+0x534>
 8009ba6:	4b72      	ldr	r3, [pc, #456]	; (8009d70 <UART_SetConfig+0x69c>)
 8009ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009baa:	f003 0307 	and.w	r3, r3, #7
 8009bae:	2b05      	cmp	r3, #5
 8009bb0:	d826      	bhi.n	8009c00 <UART_SetConfig+0x52c>
 8009bb2:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <UART_SetConfig+0x4e4>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009bd1 	.word	0x08009bd1
 8009bbc:	08009bd9 	.word	0x08009bd9
 8009bc0:	08009be1 	.word	0x08009be1
 8009bc4:	08009be9 	.word	0x08009be9
 8009bc8:	08009bf1 	.word	0x08009bf1
 8009bcc:	08009bf9 	.word	0x08009bf9
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd6:	e050      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bde:	e04c      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009be0:	2308      	movs	r3, #8
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be6:	e048      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009be8:	2310      	movs	r3, #16
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bee:	e044      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf6:	e040      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009bf8:	2340      	movs	r3, #64	; 0x40
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfe:	e03c      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009c00:	2380      	movs	r3, #128	; 0x80
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c06:	e038      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a5b      	ldr	r2, [pc, #364]	; (8009d7c <UART_SetConfig+0x6a8>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d130      	bne.n	8009c74 <UART_SetConfig+0x5a0>
 8009c12:	4b57      	ldr	r3, [pc, #348]	; (8009d70 <UART_SetConfig+0x69c>)
 8009c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	2b05      	cmp	r3, #5
 8009c1c:	d826      	bhi.n	8009c6c <UART_SetConfig+0x598>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <UART_SetConfig+0x550>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c45 	.word	0x08009c45
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c5d 	.word	0x08009c5d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c42:	e01a      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4a:	e016      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c52:	e012      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5a:	e00e      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e00a      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e006      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009c6c:	2380      	movs	r3, #128	; 0x80
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e002      	b.n	8009c7a <UART_SetConfig+0x5a6>
 8009c74:	2380      	movs	r3, #128	; 0x80
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a3f      	ldr	r2, [pc, #252]	; (8009d7c <UART_SetConfig+0x6a8>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	f040 80f8 	bne.w	8009e76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c8a:	2b20      	cmp	r3, #32
 8009c8c:	dc46      	bgt.n	8009d1c <UART_SetConfig+0x648>
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	f2c0 8082 	blt.w	8009d98 <UART_SetConfig+0x6c4>
 8009c94:	3b02      	subs	r3, #2
 8009c96:	2b1e      	cmp	r3, #30
 8009c98:	d87e      	bhi.n	8009d98 <UART_SetConfig+0x6c4>
 8009c9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <UART_SetConfig+0x5cc>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009d23 	.word	0x08009d23
 8009ca4:	08009d99 	.word	0x08009d99
 8009ca8:	08009d2b 	.word	0x08009d2b
 8009cac:	08009d99 	.word	0x08009d99
 8009cb0:	08009d99 	.word	0x08009d99
 8009cb4:	08009d99 	.word	0x08009d99
 8009cb8:	08009d3b 	.word	0x08009d3b
 8009cbc:	08009d99 	.word	0x08009d99
 8009cc0:	08009d99 	.word	0x08009d99
 8009cc4:	08009d99 	.word	0x08009d99
 8009cc8:	08009d99 	.word	0x08009d99
 8009ccc:	08009d99 	.word	0x08009d99
 8009cd0:	08009d99 	.word	0x08009d99
 8009cd4:	08009d99 	.word	0x08009d99
 8009cd8:	08009d4b 	.word	0x08009d4b
 8009cdc:	08009d99 	.word	0x08009d99
 8009ce0:	08009d99 	.word	0x08009d99
 8009ce4:	08009d99 	.word	0x08009d99
 8009ce8:	08009d99 	.word	0x08009d99
 8009cec:	08009d99 	.word	0x08009d99
 8009cf0:	08009d99 	.word	0x08009d99
 8009cf4:	08009d99 	.word	0x08009d99
 8009cf8:	08009d99 	.word	0x08009d99
 8009cfc:	08009d99 	.word	0x08009d99
 8009d00:	08009d99 	.word	0x08009d99
 8009d04:	08009d99 	.word	0x08009d99
 8009d08:	08009d99 	.word	0x08009d99
 8009d0c:	08009d99 	.word	0x08009d99
 8009d10:	08009d99 	.word	0x08009d99
 8009d14:	08009d99 	.word	0x08009d99
 8009d18:	08009d8b 	.word	0x08009d8b
 8009d1c:	2b40      	cmp	r3, #64	; 0x40
 8009d1e:	d037      	beq.n	8009d90 <UART_SetConfig+0x6bc>
 8009d20:	e03a      	b.n	8009d98 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d22:	f7fe f8c5 	bl	8007eb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d28:	e03c      	b.n	8009da4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fe f8d4 	bl	8007edc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d38:	e034      	b.n	8009da4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d3a:	f107 0318 	add.w	r3, r7, #24
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe fa20 	bl	8008184 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d48:	e02c      	b.n	8009da4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d4a:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <UART_SetConfig+0x69c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0320 	and.w	r3, r3, #32
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d016      	beq.n	8009d84 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d56:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <UART_SetConfig+0x69c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	08db      	lsrs	r3, r3, #3
 8009d5c:	f003 0303 	and.w	r3, r3, #3
 8009d60:	4a07      	ldr	r2, [pc, #28]	; (8009d80 <UART_SetConfig+0x6ac>)
 8009d62:	fa22 f303 	lsr.w	r3, r2, r3
 8009d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d68:	e01c      	b.n	8009da4 <UART_SetConfig+0x6d0>
 8009d6a:	bf00      	nop
 8009d6c:	40011400 	.word	0x40011400
 8009d70:	58024400 	.word	0x58024400
 8009d74:	40007800 	.word	0x40007800
 8009d78:	40007c00 	.word	0x40007c00
 8009d7c:	58000c00 	.word	0x58000c00
 8009d80:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009d84:	4b9d      	ldr	r3, [pc, #628]	; (8009ffc <UART_SetConfig+0x928>)
 8009d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d88:	e00c      	b.n	8009da4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d8a:	4b9d      	ldr	r3, [pc, #628]	; (800a000 <UART_SetConfig+0x92c>)
 8009d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d8e:	e009      	b.n	8009da4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d96:	e005      	b.n	8009da4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009da2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 81de 	beq.w	800a168 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	4a94      	ldr	r2, [pc, #592]	; (800a004 <UART_SetConfig+0x930>)
 8009db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009db6:	461a      	mov	r2, r3
 8009db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dbe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	005b      	lsls	r3, r3, #1
 8009dc8:	4413      	add	r3, r2
 8009dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d305      	bcc.n	8009ddc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d903      	bls.n	8009de4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009de2:	e1c1      	b.n	800a168 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de6:	2200      	movs	r2, #0
 8009de8:	60bb      	str	r3, [r7, #8]
 8009dea:	60fa      	str	r2, [r7, #12]
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df0:	4a84      	ldr	r2, [pc, #528]	; (800a004 <UART_SetConfig+0x930>)
 8009df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	2200      	movs	r2, #0
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	607a      	str	r2, [r7, #4]
 8009dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e06:	f7f6 fabb 	bl	8000380 <__aeabi_uldivmod>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	4610      	mov	r0, r2
 8009e10:	4619      	mov	r1, r3
 8009e12:	f04f 0200 	mov.w	r2, #0
 8009e16:	f04f 0300 	mov.w	r3, #0
 8009e1a:	020b      	lsls	r3, r1, #8
 8009e1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e20:	0202      	lsls	r2, r0, #8
 8009e22:	6979      	ldr	r1, [r7, #20]
 8009e24:	6849      	ldr	r1, [r1, #4]
 8009e26:	0849      	lsrs	r1, r1, #1
 8009e28:	2000      	movs	r0, #0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	eb12 0804 	adds.w	r8, r2, r4
 8009e32:	eb43 0905 	adc.w	r9, r3, r5
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	469a      	mov	sl, r3
 8009e3e:	4693      	mov	fp, r2
 8009e40:	4652      	mov	r2, sl
 8009e42:	465b      	mov	r3, fp
 8009e44:	4640      	mov	r0, r8
 8009e46:	4649      	mov	r1, r9
 8009e48:	f7f6 fa9a 	bl	8000380 <__aeabi_uldivmod>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4613      	mov	r3, r2
 8009e52:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e5a:	d308      	bcc.n	8009e6e <UART_SetConfig+0x79a>
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e62:	d204      	bcs.n	8009e6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e6a:	60da      	str	r2, [r3, #12]
 8009e6c:	e17c      	b.n	800a168 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e74:	e178      	b.n	800a168 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e7e:	f040 80c5 	bne.w	800a00c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009e82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	dc48      	bgt.n	8009f1c <UART_SetConfig+0x848>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	db7b      	blt.n	8009f86 <UART_SetConfig+0x8b2>
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d879      	bhi.n	8009f86 <UART_SetConfig+0x8b2>
 8009e92:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <UART_SetConfig+0x7c4>)
 8009e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e98:	08009f23 	.word	0x08009f23
 8009e9c:	08009f2b 	.word	0x08009f2b
 8009ea0:	08009f87 	.word	0x08009f87
 8009ea4:	08009f87 	.word	0x08009f87
 8009ea8:	08009f33 	.word	0x08009f33
 8009eac:	08009f87 	.word	0x08009f87
 8009eb0:	08009f87 	.word	0x08009f87
 8009eb4:	08009f87 	.word	0x08009f87
 8009eb8:	08009f43 	.word	0x08009f43
 8009ebc:	08009f87 	.word	0x08009f87
 8009ec0:	08009f87 	.word	0x08009f87
 8009ec4:	08009f87 	.word	0x08009f87
 8009ec8:	08009f87 	.word	0x08009f87
 8009ecc:	08009f87 	.word	0x08009f87
 8009ed0:	08009f87 	.word	0x08009f87
 8009ed4:	08009f87 	.word	0x08009f87
 8009ed8:	08009f53 	.word	0x08009f53
 8009edc:	08009f87 	.word	0x08009f87
 8009ee0:	08009f87 	.word	0x08009f87
 8009ee4:	08009f87 	.word	0x08009f87
 8009ee8:	08009f87 	.word	0x08009f87
 8009eec:	08009f87 	.word	0x08009f87
 8009ef0:	08009f87 	.word	0x08009f87
 8009ef4:	08009f87 	.word	0x08009f87
 8009ef8:	08009f87 	.word	0x08009f87
 8009efc:	08009f87 	.word	0x08009f87
 8009f00:	08009f87 	.word	0x08009f87
 8009f04:	08009f87 	.word	0x08009f87
 8009f08:	08009f87 	.word	0x08009f87
 8009f0c:	08009f87 	.word	0x08009f87
 8009f10:	08009f87 	.word	0x08009f87
 8009f14:	08009f87 	.word	0x08009f87
 8009f18:	08009f79 	.word	0x08009f79
 8009f1c:	2b40      	cmp	r3, #64	; 0x40
 8009f1e:	d02e      	beq.n	8009f7e <UART_SetConfig+0x8aa>
 8009f20:	e031      	b.n	8009f86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f22:	f7fd f853 	bl	8006fcc <HAL_RCC_GetPCLK1Freq>
 8009f26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f28:	e033      	b.n	8009f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f2a:	f7fd f865 	bl	8006ff8 <HAL_RCC_GetPCLK2Freq>
 8009f2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f30:	e02f      	b.n	8009f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fd ffd0 	bl	8007edc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f40:	e027      	b.n	8009f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f42:	f107 0318 	add.w	r3, r7, #24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe f91c 	bl	8008184 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f50:	e01f      	b.n	8009f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f52:	4b2d      	ldr	r3, [pc, #180]	; (800a008 <UART_SetConfig+0x934>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0320 	and.w	r3, r3, #32
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d009      	beq.n	8009f72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f5e:	4b2a      	ldr	r3, [pc, #168]	; (800a008 <UART_SetConfig+0x934>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	08db      	lsrs	r3, r3, #3
 8009f64:	f003 0303 	and.w	r3, r3, #3
 8009f68:	4a24      	ldr	r2, [pc, #144]	; (8009ffc <UART_SetConfig+0x928>)
 8009f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f70:	e00f      	b.n	8009f92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009f72:	4b22      	ldr	r3, [pc, #136]	; (8009ffc <UART_SetConfig+0x928>)
 8009f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f76:	e00c      	b.n	8009f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f78:	4b21      	ldr	r3, [pc, #132]	; (800a000 <UART_SetConfig+0x92c>)
 8009f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f7c:	e009      	b.n	8009f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f84:	e005      	b.n	8009f92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009f90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 80e7 	beq.w	800a168 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	4a19      	ldr	r2, [pc, #100]	; (800a004 <UART_SetConfig+0x930>)
 8009fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fac:	005a      	lsls	r2, r3, #1
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	085b      	lsrs	r3, r3, #1
 8009fb4:	441a      	add	r2, r3
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fbe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	2b0f      	cmp	r3, #15
 8009fc4:	d916      	bls.n	8009ff4 <UART_SetConfig+0x920>
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fcc:	d212      	bcs.n	8009ff4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	f023 030f 	bic.w	r3, r3, #15
 8009fd6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	085b      	lsrs	r3, r3, #1
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	f003 0307 	and.w	r3, r3, #7
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	e0b9      	b.n	800a168 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ffa:	e0b5      	b.n	800a168 <UART_SetConfig+0xa94>
 8009ffc:	03d09000 	.word	0x03d09000
 800a000:	003d0900 	.word	0x003d0900
 800a004:	0800ce28 	.word	0x0800ce28
 800a008:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a00c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a010:	2b20      	cmp	r3, #32
 800a012:	dc49      	bgt.n	800a0a8 <UART_SetConfig+0x9d4>
 800a014:	2b00      	cmp	r3, #0
 800a016:	db7c      	blt.n	800a112 <UART_SetConfig+0xa3e>
 800a018:	2b20      	cmp	r3, #32
 800a01a:	d87a      	bhi.n	800a112 <UART_SetConfig+0xa3e>
 800a01c:	a201      	add	r2, pc, #4	; (adr r2, 800a024 <UART_SetConfig+0x950>)
 800a01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a022:	bf00      	nop
 800a024:	0800a0af 	.word	0x0800a0af
 800a028:	0800a0b7 	.word	0x0800a0b7
 800a02c:	0800a113 	.word	0x0800a113
 800a030:	0800a113 	.word	0x0800a113
 800a034:	0800a0bf 	.word	0x0800a0bf
 800a038:	0800a113 	.word	0x0800a113
 800a03c:	0800a113 	.word	0x0800a113
 800a040:	0800a113 	.word	0x0800a113
 800a044:	0800a0cf 	.word	0x0800a0cf
 800a048:	0800a113 	.word	0x0800a113
 800a04c:	0800a113 	.word	0x0800a113
 800a050:	0800a113 	.word	0x0800a113
 800a054:	0800a113 	.word	0x0800a113
 800a058:	0800a113 	.word	0x0800a113
 800a05c:	0800a113 	.word	0x0800a113
 800a060:	0800a113 	.word	0x0800a113
 800a064:	0800a0df 	.word	0x0800a0df
 800a068:	0800a113 	.word	0x0800a113
 800a06c:	0800a113 	.word	0x0800a113
 800a070:	0800a113 	.word	0x0800a113
 800a074:	0800a113 	.word	0x0800a113
 800a078:	0800a113 	.word	0x0800a113
 800a07c:	0800a113 	.word	0x0800a113
 800a080:	0800a113 	.word	0x0800a113
 800a084:	0800a113 	.word	0x0800a113
 800a088:	0800a113 	.word	0x0800a113
 800a08c:	0800a113 	.word	0x0800a113
 800a090:	0800a113 	.word	0x0800a113
 800a094:	0800a113 	.word	0x0800a113
 800a098:	0800a113 	.word	0x0800a113
 800a09c:	0800a113 	.word	0x0800a113
 800a0a0:	0800a113 	.word	0x0800a113
 800a0a4:	0800a105 	.word	0x0800a105
 800a0a8:	2b40      	cmp	r3, #64	; 0x40
 800a0aa:	d02e      	beq.n	800a10a <UART_SetConfig+0xa36>
 800a0ac:	e031      	b.n	800a112 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0ae:	f7fc ff8d 	bl	8006fcc <HAL_RCC_GetPCLK1Freq>
 800a0b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0b4:	e033      	b.n	800a11e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0b6:	f7fc ff9f 	bl	8006ff8 <HAL_RCC_GetPCLK2Freq>
 800a0ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0bc:	e02f      	b.n	800a11e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fd ff0a 	bl	8007edc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0cc:	e027      	b.n	800a11e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ce:	f107 0318 	add.w	r3, r7, #24
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe f856 	bl	8008184 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0dc:	e01f      	b.n	800a11e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0de:	4b2d      	ldr	r3, [pc, #180]	; (800a194 <UART_SetConfig+0xac0>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 0320 	and.w	r3, r3, #32
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d009      	beq.n	800a0fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0ea:	4b2a      	ldr	r3, [pc, #168]	; (800a194 <UART_SetConfig+0xac0>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	08db      	lsrs	r3, r3, #3
 800a0f0:	f003 0303 	and.w	r3, r3, #3
 800a0f4:	4a28      	ldr	r2, [pc, #160]	; (800a198 <UART_SetConfig+0xac4>)
 800a0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0fc:	e00f      	b.n	800a11e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a0fe:	4b26      	ldr	r3, [pc, #152]	; (800a198 <UART_SetConfig+0xac4>)
 800a100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a102:	e00c      	b.n	800a11e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a104:	4b25      	ldr	r3, [pc, #148]	; (800a19c <UART_SetConfig+0xac8>)
 800a106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a108:	e009      	b.n	800a11e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a10a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a110:	e005      	b.n	800a11e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a11c:	bf00      	nop
    }

    if (pclk != 0U)
 800a11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a120:	2b00      	cmp	r3, #0
 800a122:	d021      	beq.n	800a168 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	4a1d      	ldr	r2, [pc, #116]	; (800a1a0 <UART_SetConfig+0xacc>)
 800a12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a12e:	461a      	mov	r2, r3
 800a130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a132:	fbb3 f2f2 	udiv	r2, r3, r2
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	085b      	lsrs	r3, r3, #1
 800a13c:	441a      	add	r2, r3
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	fbb2 f3f3 	udiv	r3, r2, r3
 800a146:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	2b0f      	cmp	r3, #15
 800a14c:	d909      	bls.n	800a162 <UART_SetConfig+0xa8e>
 800a14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a154:	d205      	bcs.n	800a162 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a158:	b29a      	uxth	r2, r3
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	60da      	str	r2, [r3, #12]
 800a160:	e002      	b.n	800a168 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	2201      	movs	r2, #1
 800a174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2200      	movs	r2, #0
 800a17c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2200      	movs	r2, #0
 800a182:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a184:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3748      	adds	r7, #72	; 0x48
 800a18c:	46bd      	mov	sp, r7
 800a18e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a192:	bf00      	nop
 800a194:	58024400 	.word	0x58024400
 800a198:	03d09000 	.word	0x03d09000
 800a19c:	003d0900 	.word	0x003d0900
 800a1a0:	0800ce28 	.word	0x0800ce28

0800a1a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00a      	beq.n	800a1ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d2:	f003 0302 	and.w	r3, r3, #2
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a216:	f003 0308 	and.w	r3, r3, #8
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a238:	f003 0310 	and.w	r3, r3, #16
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25a:	f003 0320 	and.w	r3, r3, #32
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	430a      	orrs	r2, r1
 800a276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01a      	beq.n	800a2ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a29e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2a2:	d10a      	bne.n	800a2ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	430a      	orrs	r2, r1
 800a2b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00a      	beq.n	800a2dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	605a      	str	r2, [r3, #4]
  }
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af02      	add	r7, sp, #8
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2f8:	f7f8 fb54 	bl	80029a4 <HAL_GetTick>
 800a2fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0308 	and.w	r3, r3, #8
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d10e      	bne.n	800a32a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a30c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f82f 	bl	800a37e <UART_WaitOnFlagUntilTimeout>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e025      	b.n	800a376 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0304 	and.w	r3, r3, #4
 800a334:	2b04      	cmp	r3, #4
 800a336:	d10e      	bne.n	800a356 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f819 	bl	800a37e <UART_WaitOnFlagUntilTimeout>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a352:	2303      	movs	r3, #3
 800a354:	e00f      	b.n	800a376 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2220      	movs	r2, #32
 800a35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2220      	movs	r2, #32
 800a362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b09c      	sub	sp, #112	; 0x70
 800a382:	af00      	add	r7, sp, #0
 800a384:	60f8      	str	r0, [r7, #12]
 800a386:	60b9      	str	r1, [r7, #8]
 800a388:	603b      	str	r3, [r7, #0]
 800a38a:	4613      	mov	r3, r2
 800a38c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a38e:	e0a9      	b.n	800a4e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a396:	f000 80a5 	beq.w	800a4e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a39a:	f7f8 fb03 	bl	80029a4 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d302      	bcc.n	800a3b0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a3aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d140      	bne.n	800a432 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3b8:	e853 3f00 	ldrex	r3, [r3]
 800a3bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3c4:	667b      	str	r3, [r7, #100]	; 0x64
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a3d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3d6:	e841 2300 	strex	r3, r2, [r1]
 800a3da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a3dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1e6      	bne.n	800a3b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ec:	e853 3f00 	ldrex	r3, [r3]
 800a3f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	f023 0301 	bic.w	r3, r3, #1
 800a3f8:	663b      	str	r3, [r7, #96]	; 0x60
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3308      	adds	r3, #8
 800a400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a402:	64ba      	str	r2, [r7, #72]	; 0x48
 800a404:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a40a:	e841 2300 	strex	r3, r2, [r1]
 800a40e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1e5      	bne.n	800a3e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2220      	movs	r2, #32
 800a41a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2220      	movs	r2, #32
 800a422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e069      	b.n	800a506 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d051      	beq.n	800a4e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a44a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a44e:	d149      	bne.n	800a4e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a458:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	e853 3f00 	ldrex	r3, [r3]
 800a466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a46e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a478:	637b      	str	r3, [r7, #52]	; 0x34
 800a47a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a47e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a480:	e841 2300 	strex	r3, r2, [r1]
 800a484:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1e6      	bne.n	800a45a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3308      	adds	r3, #8
 800a492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	613b      	str	r3, [r7, #16]
   return(result);
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f023 0301 	bic.w	r3, r3, #1
 800a4a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a4ac:	623a      	str	r2, [r7, #32]
 800a4ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	69f9      	ldr	r1, [r7, #28]
 800a4b2:	6a3a      	ldr	r2, [r7, #32]
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e5      	bne.n	800a48c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e010      	b.n	800a506 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	69da      	ldr	r2, [r3, #28]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	bf0c      	ite	eq
 800a4f4:	2301      	moveq	r3, #1
 800a4f6:	2300      	movne	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	f43f af46 	beq.w	800a390 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3770      	adds	r7, #112	; 0x70
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
	...

0800a510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a510:	b480      	push	{r7}
 800a512:	b095      	sub	sp, #84	; 0x54
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a520:	e853 3f00 	ldrex	r3, [r3]
 800a524:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a52c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a536:	643b      	str	r3, [r7, #64]	; 0x40
 800a538:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a53c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a53e:	e841 2300 	strex	r3, r2, [r1]
 800a542:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1e6      	bne.n	800a518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3308      	adds	r3, #8
 800a550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a552:	6a3b      	ldr	r3, [r7, #32]
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	61fb      	str	r3, [r7, #28]
   return(result);
 800a55a:	69fa      	ldr	r2, [r7, #28]
 800a55c:	4b1e      	ldr	r3, [pc, #120]	; (800a5d8 <UART_EndRxTransfer+0xc8>)
 800a55e:	4013      	ands	r3, r2
 800a560:	64bb      	str	r3, [r7, #72]	; 0x48
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3308      	adds	r3, #8
 800a568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a56a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a56c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e5      	bne.n	800a54a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a582:	2b01      	cmp	r3, #1
 800a584:	d118      	bne.n	800a5b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	e853 3f00 	ldrex	r3, [r3]
 800a592:	60bb      	str	r3, [r7, #8]
   return(result);
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	f023 0310 	bic.w	r3, r3, #16
 800a59a:	647b      	str	r3, [r7, #68]	; 0x44
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5a4:	61bb      	str	r3, [r7, #24]
 800a5a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a8:	6979      	ldr	r1, [r7, #20]
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	e841 2300 	strex	r3, r2, [r1]
 800a5b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1e6      	bne.n	800a586 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a5cc:	bf00      	nop
 800a5ce:	3754      	adds	r7, #84	; 0x54
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	effffffe 	.word	0xeffffffe

0800a5dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f7ff f854 	bl	80096a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a600:	bf00      	nop
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a624:	61fb      	str	r3, [r7, #28]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	61bb      	str	r3, [r7, #24]
 800a630:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	6979      	ldr	r1, [r7, #20]
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	e841 2300 	strex	r3, r2, [r1]
 800a63a:	613b      	str	r3, [r7, #16]
   return(result);
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1e6      	bne.n	800a610 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2220      	movs	r2, #32
 800a646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7ff f81f 	bl	8009694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a656:	bf00      	nop
 800a658:	3720      	adds	r7, #32
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a67a:	bf00      	nop
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a68e:	bf00      	nop
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b085      	sub	sp, #20
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d101      	bne.n	800a6b0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e027      	b.n	800a700 <HAL_UARTEx_DisableFifoMode+0x66>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2224      	movs	r2, #36	; 0x24
 800a6bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f022 0201 	bic.w	r2, r2, #1
 800a6d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a6de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d101      	bne.n	800a724 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a720:	2302      	movs	r3, #2
 800a722:	e02d      	b.n	800a780 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2224      	movs	r2, #36	; 0x24
 800a730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f022 0201 	bic.w	r2, r2, #1
 800a74a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	430a      	orrs	r2, r1
 800a75e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f84f 	bl	800a804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d101      	bne.n	800a7a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a79c:	2302      	movs	r3, #2
 800a79e:	e02d      	b.n	800a7fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2224      	movs	r2, #36	; 0x24
 800a7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f022 0201 	bic.w	r2, r2, #1
 800a7c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	430a      	orrs	r2, r1
 800a7da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f811 	bl	800a804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a810:	2b00      	cmp	r3, #0
 800a812:	d108      	bne.n	800a826 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a824:	e031      	b.n	800a88a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a826:	2310      	movs	r3, #16
 800a828:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a82a:	2310      	movs	r3, #16
 800a82c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	0e5b      	lsrs	r3, r3, #25
 800a836:	b2db      	uxtb	r3, r3
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	0f5b      	lsrs	r3, r3, #29
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f003 0307 	and.w	r3, r3, #7
 800a84c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	7b3a      	ldrb	r2, [r7, #12]
 800a852:	4911      	ldr	r1, [pc, #68]	; (800a898 <UARTEx_SetNbDataToProcess+0x94>)
 800a854:	5c8a      	ldrb	r2, [r1, r2]
 800a856:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a85a:	7b3a      	ldrb	r2, [r7, #12]
 800a85c:	490f      	ldr	r1, [pc, #60]	; (800a89c <UARTEx_SetNbDataToProcess+0x98>)
 800a85e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a860:	fb93 f3f2 	sdiv	r3, r3, r2
 800a864:	b29a      	uxth	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
 800a86e:	7b7a      	ldrb	r2, [r7, #13]
 800a870:	4909      	ldr	r1, [pc, #36]	; (800a898 <UARTEx_SetNbDataToProcess+0x94>)
 800a872:	5c8a      	ldrb	r2, [r1, r2]
 800a874:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a878:	7b7a      	ldrb	r2, [r7, #13]
 800a87a:	4908      	ldr	r1, [pc, #32]	; (800a89c <UARTEx_SetNbDataToProcess+0x98>)
 800a87c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a87e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a882:	b29a      	uxth	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a88a:	bf00      	nop
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	0800ce40 	.word	0x0800ce40
 800a89c:	0800ce48 	.word	0x0800ce48

0800a8a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	f107 001c 	add.w	r0, r7, #28
 800a8ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d120      	bne.n	800a8fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	4b2a      	ldr	r3, [pc, #168]	; (800a974 <USB_CoreInit+0xd4>)
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a8dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d105      	bne.n	800a8ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 faac 	bl	800ae4c <USB_CoreReset>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]
 800a8f8:	e01a      	b.n	800a930 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 faa0 	bl	800ae4c <USB_CoreReset>
 800a90c:	4603      	mov	r3, r0
 800a90e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a912:	2b00      	cmp	r3, #0
 800a914:	d106      	bne.n	800a924 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	639a      	str	r2, [r3, #56]	; 0x38
 800a922:	e005      	b.n	800a930 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	2b01      	cmp	r3, #1
 800a934:	d116      	bne.n	800a964 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a944:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <USB_CoreInit+0xd8>)
 800a946:	4313      	orrs	r3, r2
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f043 0206 	orr.w	r2, r3, #6
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f043 0220 	orr.w	r2, r3, #32
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a964:	7bfb      	ldrb	r3, [r7, #15]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a970:	b004      	add	sp, #16
 800a972:	4770      	bx	lr
 800a974:	ffbdffbf 	.word	0xffbdffbf
 800a978:	03ee0000 	.word	0x03ee0000

0800a97c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f023 0201 	bic.w	r2, r3, #1
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9ba:	78fb      	ldrb	r3, [r7, #3]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d115      	bne.n	800a9ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	f7f7 fff5 	bl	80029bc <HAL_Delay>
      ms++;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fa29 	bl	800ae30 <USB_GetMode>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d01e      	beq.n	800aa22 <USB_SetCurrentMode+0x84>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b31      	cmp	r3, #49	; 0x31
 800a9e8:	d9f0      	bls.n	800a9cc <USB_SetCurrentMode+0x2e>
 800a9ea:	e01a      	b.n	800aa22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d115      	bne.n	800aa1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a9fe:	2001      	movs	r0, #1
 800aa00:	f7f7 ffdc 	bl	80029bc <HAL_Delay>
      ms++;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	3301      	adds	r3, #1
 800aa08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa10 	bl	800ae30 <USB_GetMode>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d005      	beq.n	800aa22 <USB_SetCurrentMode+0x84>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2b31      	cmp	r3, #49	; 0x31
 800aa1a:	d9f0      	bls.n	800a9fe <USB_SetCurrentMode+0x60>
 800aa1c:	e001      	b.n	800aa22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e005      	b.n	800aa2e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2b32      	cmp	r3, #50	; 0x32
 800aa26:	d101      	bne.n	800aa2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e000      	b.n	800aa2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa38:	b084      	sub	sp, #16
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b086      	sub	sp, #24
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa52:	2300      	movs	r3, #0
 800aa54:	613b      	str	r3, [r7, #16]
 800aa56:	e009      	b.n	800aa6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	3340      	adds	r3, #64	; 0x40
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	2200      	movs	r2, #0
 800aa64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	613b      	str	r3, [r7, #16]
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	2b0e      	cmp	r3, #14
 800aa70:	d9f2      	bls.n	800aa58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d11c      	bne.n	800aab2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa86:	f043 0302 	orr.w	r3, r3, #2
 800aa8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	e005      	b.n	800aabe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aac4:	461a      	mov	r2, r3
 800aac6:	2300      	movs	r3, #0
 800aac8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad0:	4619      	mov	r1, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad8:	461a      	mov	r2, r3
 800aada:	680b      	ldr	r3, [r1, #0]
 800aadc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d10c      	bne.n	800aafe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d104      	bne.n	800aaf4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aaea:	2100      	movs	r1, #0
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f965 	bl	800adbc <USB_SetDevSpeed>
 800aaf2:	e008      	b.n	800ab06 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f960 	bl	800adbc <USB_SetDevSpeed>
 800aafc:	e003      	b.n	800ab06 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aafe:	2103      	movs	r1, #3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f95b 	bl	800adbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab06:	2110      	movs	r1, #16
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f8f3 	bl	800acf4 <USB_FlushTxFifo>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d001      	beq.n	800ab18 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 f91f 	bl	800ad5c <USB_FlushRxFifo>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ab24:	2301      	movs	r3, #1
 800ab26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab2e:	461a      	mov	r2, r3
 800ab30:	2300      	movs	r3, #0
 800ab32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab46:	461a      	mov	r2, r3
 800ab48:	2300      	movs	r3, #0
 800ab4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	613b      	str	r3, [r7, #16]
 800ab50:	e043      	b.n	800abda <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab68:	d118      	bne.n	800ab9c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	e013      	b.n	800abae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	015a      	lsls	r2, r3, #5
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab92:	461a      	mov	r2, r3
 800ab94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab98:	6013      	str	r3, [r2, #0]
 800ab9a:	e008      	b.n	800abae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba8:	461a      	mov	r2, r3
 800abaa:	2300      	movs	r3, #0
 800abac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abba:	461a      	mov	r2, r3
 800abbc:	2300      	movs	r3, #0
 800abbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	015a      	lsls	r2, r3, #5
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abcc:	461a      	mov	r2, r3
 800abce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800abd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	3301      	adds	r3, #1
 800abd8:	613b      	str	r3, [r7, #16]
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d3b7      	bcc.n	800ab52 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abe2:	2300      	movs	r3, #0
 800abe4:	613b      	str	r3, [r7, #16]
 800abe6:	e043      	b.n	800ac70 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abfe:	d118      	bne.n	800ac32 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	015a      	lsls	r2, r3, #5
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac12:	461a      	mov	r2, r3
 800ac14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	e013      	b.n	800ac44 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac28:	461a      	mov	r2, r3
 800ac2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	e008      	b.n	800ac44 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac3e:	461a      	mov	r2, r3
 800ac40:	2300      	movs	r3, #0
 800ac42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac50:	461a      	mov	r2, r3
 800ac52:	2300      	movs	r3, #0
 800ac54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac62:	461a      	mov	r2, r3
 800ac64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	613b      	str	r3, [r7, #16]
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d3b7      	bcc.n	800abe8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d105      	bne.n	800acac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	f043 0210 	orr.w	r2, r3, #16
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	699a      	ldr	r2, [r3, #24]
 800acb0:	4b0e      	ldr	r3, [pc, #56]	; (800acec <USB_DevInit+0x2b4>)
 800acb2:	4313      	orrs	r3, r2
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800acb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d005      	beq.n	800acca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	f043 0208 	orr.w	r2, r3, #8
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800acca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800accc:	2b01      	cmp	r3, #1
 800acce:	d105      	bne.n	800acdc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	699a      	ldr	r2, [r3, #24]
 800acd4:	4b06      	ldr	r3, [pc, #24]	; (800acf0 <USB_DevInit+0x2b8>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800acdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ace8:	b004      	add	sp, #16
 800acea:	4770      	bx	lr
 800acec:	803c3800 	.word	0x803c3800
 800acf0:	40000004 	.word	0x40000004

0800acf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3301      	adds	r3, #1
 800ad06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	4a13      	ldr	r2, [pc, #76]	; (800ad58 <USB_FlushTxFifo+0x64>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d901      	bls.n	800ad14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e01b      	b.n	800ad4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	daf2      	bge.n	800ad02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	019b      	lsls	r3, r3, #6
 800ad24:	f043 0220 	orr.w	r2, r3, #32
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4a08      	ldr	r2, [pc, #32]	; (800ad58 <USB_FlushTxFifo+0x64>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d901      	bls.n	800ad3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	e006      	b.n	800ad4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	f003 0320 	and.w	r3, r3, #32
 800ad46:	2b20      	cmp	r3, #32
 800ad48:	d0f0      	beq.n	800ad2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	00030d40 	.word	0x00030d40

0800ad5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad64:	2300      	movs	r3, #0
 800ad66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	4a11      	ldr	r2, [pc, #68]	; (800adb8 <USB_FlushRxFifo+0x5c>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d901      	bls.n	800ad7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e018      	b.n	800adac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	daf2      	bge.n	800ad68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ad82:	2300      	movs	r3, #0
 800ad84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2210      	movs	r2, #16
 800ad8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	4a08      	ldr	r2, [pc, #32]	; (800adb8 <USB_FlushRxFifo+0x5c>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d901      	bls.n	800ad9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e006      	b.n	800adac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f003 0310 	and.w	r3, r3, #16
 800ada6:	2b10      	cmp	r3, #16
 800ada8:	d0f0      	beq.n	800ad8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	00030d40 	.word	0x00030d40

0800adbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	68f9      	ldr	r1, [r7, #12]
 800add8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800addc:	4313      	orrs	r3, r2
 800adde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800adee:	b480      	push	{r7}
 800adf0:	b085      	sub	sp, #20
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae08:	f023 0303 	bic.w	r3, r3, #3
 800ae0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae1c:	f043 0302 	orr.w	r3, r3, #2
 800ae20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	695b      	ldr	r3, [r3, #20]
 800ae3c:	f003 0301 	and.w	r3, r3, #1
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	4a13      	ldr	r2, [pc, #76]	; (800aeb0 <USB_CoreReset+0x64>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d901      	bls.n	800ae6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e01b      	b.n	800aea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	daf2      	bge.n	800ae58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	f043 0201 	orr.w	r2, r3, #1
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3301      	adds	r3, #1
 800ae86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	4a09      	ldr	r2, [pc, #36]	; (800aeb0 <USB_CoreReset+0x64>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d901      	bls.n	800ae94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e006      	b.n	800aea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d0f0      	beq.n	800ae82 <USB_CoreReset+0x36>

  return HAL_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	00030d40 	.word	0x00030d40

0800aeb4 <__errno>:
 800aeb4:	4b01      	ldr	r3, [pc, #4]	; (800aebc <__errno+0x8>)
 800aeb6:	6818      	ldr	r0, [r3, #0]
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	24000020 	.word	0x24000020

0800aec0 <__libc_init_array>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	4d0d      	ldr	r5, [pc, #52]	; (800aef8 <__libc_init_array+0x38>)
 800aec4:	4c0d      	ldr	r4, [pc, #52]	; (800aefc <__libc_init_array+0x3c>)
 800aec6:	1b64      	subs	r4, r4, r5
 800aec8:	10a4      	asrs	r4, r4, #2
 800aeca:	2600      	movs	r6, #0
 800aecc:	42a6      	cmp	r6, r4
 800aece:	d109      	bne.n	800aee4 <__libc_init_array+0x24>
 800aed0:	4d0b      	ldr	r5, [pc, #44]	; (800af00 <__libc_init_array+0x40>)
 800aed2:	4c0c      	ldr	r4, [pc, #48]	; (800af04 <__libc_init_array+0x44>)
 800aed4:	f000 fc8e 	bl	800b7f4 <_init>
 800aed8:	1b64      	subs	r4, r4, r5
 800aeda:	10a4      	asrs	r4, r4, #2
 800aedc:	2600      	movs	r6, #0
 800aede:	42a6      	cmp	r6, r4
 800aee0:	d105      	bne.n	800aeee <__libc_init_array+0x2e>
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee8:	4798      	blx	r3
 800aeea:	3601      	adds	r6, #1
 800aeec:	e7ee      	b.n	800aecc <__libc_init_array+0xc>
 800aeee:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef2:	4798      	blx	r3
 800aef4:	3601      	adds	r6, #1
 800aef6:	e7f2      	b.n	800aede <__libc_init_array+0x1e>
 800aef8:	0800ce8c 	.word	0x0800ce8c
 800aefc:	0800ce8c 	.word	0x0800ce8c
 800af00:	0800ce8c 	.word	0x0800ce8c
 800af04:	0800ce90 	.word	0x0800ce90

0800af08 <memset>:
 800af08:	4402      	add	r2, r0
 800af0a:	4603      	mov	r3, r0
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d100      	bne.n	800af12 <memset+0xa>
 800af10:	4770      	bx	lr
 800af12:	f803 1b01 	strb.w	r1, [r3], #1
 800af16:	e7f9      	b.n	800af0c <memset+0x4>

0800af18 <_free_r>:
 800af18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af1a:	2900      	cmp	r1, #0
 800af1c:	d044      	beq.n	800afa8 <_free_r+0x90>
 800af1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af22:	9001      	str	r0, [sp, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	f1a1 0404 	sub.w	r4, r1, #4
 800af2a:	bfb8      	it	lt
 800af2c:	18e4      	addlt	r4, r4, r3
 800af2e:	f000 f903 	bl	800b138 <__malloc_lock>
 800af32:	4a1e      	ldr	r2, [pc, #120]	; (800afac <_free_r+0x94>)
 800af34:	9801      	ldr	r0, [sp, #4]
 800af36:	6813      	ldr	r3, [r2, #0]
 800af38:	b933      	cbnz	r3, 800af48 <_free_r+0x30>
 800af3a:	6063      	str	r3, [r4, #4]
 800af3c:	6014      	str	r4, [r2, #0]
 800af3e:	b003      	add	sp, #12
 800af40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af44:	f000 b8fe 	b.w	800b144 <__malloc_unlock>
 800af48:	42a3      	cmp	r3, r4
 800af4a:	d908      	bls.n	800af5e <_free_r+0x46>
 800af4c:	6825      	ldr	r5, [r4, #0]
 800af4e:	1961      	adds	r1, r4, r5
 800af50:	428b      	cmp	r3, r1
 800af52:	bf01      	itttt	eq
 800af54:	6819      	ldreq	r1, [r3, #0]
 800af56:	685b      	ldreq	r3, [r3, #4]
 800af58:	1949      	addeq	r1, r1, r5
 800af5a:	6021      	streq	r1, [r4, #0]
 800af5c:	e7ed      	b.n	800af3a <_free_r+0x22>
 800af5e:	461a      	mov	r2, r3
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	b10b      	cbz	r3, 800af68 <_free_r+0x50>
 800af64:	42a3      	cmp	r3, r4
 800af66:	d9fa      	bls.n	800af5e <_free_r+0x46>
 800af68:	6811      	ldr	r1, [r2, #0]
 800af6a:	1855      	adds	r5, r2, r1
 800af6c:	42a5      	cmp	r5, r4
 800af6e:	d10b      	bne.n	800af88 <_free_r+0x70>
 800af70:	6824      	ldr	r4, [r4, #0]
 800af72:	4421      	add	r1, r4
 800af74:	1854      	adds	r4, r2, r1
 800af76:	42a3      	cmp	r3, r4
 800af78:	6011      	str	r1, [r2, #0]
 800af7a:	d1e0      	bne.n	800af3e <_free_r+0x26>
 800af7c:	681c      	ldr	r4, [r3, #0]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	6053      	str	r3, [r2, #4]
 800af82:	4421      	add	r1, r4
 800af84:	6011      	str	r1, [r2, #0]
 800af86:	e7da      	b.n	800af3e <_free_r+0x26>
 800af88:	d902      	bls.n	800af90 <_free_r+0x78>
 800af8a:	230c      	movs	r3, #12
 800af8c:	6003      	str	r3, [r0, #0]
 800af8e:	e7d6      	b.n	800af3e <_free_r+0x26>
 800af90:	6825      	ldr	r5, [r4, #0]
 800af92:	1961      	adds	r1, r4, r5
 800af94:	428b      	cmp	r3, r1
 800af96:	bf04      	itt	eq
 800af98:	6819      	ldreq	r1, [r3, #0]
 800af9a:	685b      	ldreq	r3, [r3, #4]
 800af9c:	6063      	str	r3, [r4, #4]
 800af9e:	bf04      	itt	eq
 800afa0:	1949      	addeq	r1, r1, r5
 800afa2:	6021      	streq	r1, [r4, #0]
 800afa4:	6054      	str	r4, [r2, #4]
 800afa6:	e7ca      	b.n	800af3e <_free_r+0x26>
 800afa8:	b003      	add	sp, #12
 800afaa:	bd30      	pop	{r4, r5, pc}
 800afac:	24000cac 	.word	0x24000cac

0800afb0 <sbrk_aligned>:
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	4e0e      	ldr	r6, [pc, #56]	; (800afec <sbrk_aligned+0x3c>)
 800afb4:	460c      	mov	r4, r1
 800afb6:	6831      	ldr	r1, [r6, #0]
 800afb8:	4605      	mov	r5, r0
 800afba:	b911      	cbnz	r1, 800afc2 <sbrk_aligned+0x12>
 800afbc:	f000 f88c 	bl	800b0d8 <_sbrk_r>
 800afc0:	6030      	str	r0, [r6, #0]
 800afc2:	4621      	mov	r1, r4
 800afc4:	4628      	mov	r0, r5
 800afc6:	f000 f887 	bl	800b0d8 <_sbrk_r>
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	d00a      	beq.n	800afe4 <sbrk_aligned+0x34>
 800afce:	1cc4      	adds	r4, r0, #3
 800afd0:	f024 0403 	bic.w	r4, r4, #3
 800afd4:	42a0      	cmp	r0, r4
 800afd6:	d007      	beq.n	800afe8 <sbrk_aligned+0x38>
 800afd8:	1a21      	subs	r1, r4, r0
 800afda:	4628      	mov	r0, r5
 800afdc:	f000 f87c 	bl	800b0d8 <_sbrk_r>
 800afe0:	3001      	adds	r0, #1
 800afe2:	d101      	bne.n	800afe8 <sbrk_aligned+0x38>
 800afe4:	f04f 34ff 	mov.w	r4, #4294967295
 800afe8:	4620      	mov	r0, r4
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	24000cb0 	.word	0x24000cb0

0800aff0 <_malloc_r>:
 800aff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff4:	1ccd      	adds	r5, r1, #3
 800aff6:	f025 0503 	bic.w	r5, r5, #3
 800affa:	3508      	adds	r5, #8
 800affc:	2d0c      	cmp	r5, #12
 800affe:	bf38      	it	cc
 800b000:	250c      	movcc	r5, #12
 800b002:	2d00      	cmp	r5, #0
 800b004:	4607      	mov	r7, r0
 800b006:	db01      	blt.n	800b00c <_malloc_r+0x1c>
 800b008:	42a9      	cmp	r1, r5
 800b00a:	d905      	bls.n	800b018 <_malloc_r+0x28>
 800b00c:	230c      	movs	r3, #12
 800b00e:	603b      	str	r3, [r7, #0]
 800b010:	2600      	movs	r6, #0
 800b012:	4630      	mov	r0, r6
 800b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b018:	4e2e      	ldr	r6, [pc, #184]	; (800b0d4 <_malloc_r+0xe4>)
 800b01a:	f000 f88d 	bl	800b138 <__malloc_lock>
 800b01e:	6833      	ldr	r3, [r6, #0]
 800b020:	461c      	mov	r4, r3
 800b022:	bb34      	cbnz	r4, 800b072 <_malloc_r+0x82>
 800b024:	4629      	mov	r1, r5
 800b026:	4638      	mov	r0, r7
 800b028:	f7ff ffc2 	bl	800afb0 <sbrk_aligned>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	4604      	mov	r4, r0
 800b030:	d14d      	bne.n	800b0ce <_malloc_r+0xde>
 800b032:	6834      	ldr	r4, [r6, #0]
 800b034:	4626      	mov	r6, r4
 800b036:	2e00      	cmp	r6, #0
 800b038:	d140      	bne.n	800b0bc <_malloc_r+0xcc>
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	4631      	mov	r1, r6
 800b03e:	4638      	mov	r0, r7
 800b040:	eb04 0803 	add.w	r8, r4, r3
 800b044:	f000 f848 	bl	800b0d8 <_sbrk_r>
 800b048:	4580      	cmp	r8, r0
 800b04a:	d13a      	bne.n	800b0c2 <_malloc_r+0xd2>
 800b04c:	6821      	ldr	r1, [r4, #0]
 800b04e:	3503      	adds	r5, #3
 800b050:	1a6d      	subs	r5, r5, r1
 800b052:	f025 0503 	bic.w	r5, r5, #3
 800b056:	3508      	adds	r5, #8
 800b058:	2d0c      	cmp	r5, #12
 800b05a:	bf38      	it	cc
 800b05c:	250c      	movcc	r5, #12
 800b05e:	4629      	mov	r1, r5
 800b060:	4638      	mov	r0, r7
 800b062:	f7ff ffa5 	bl	800afb0 <sbrk_aligned>
 800b066:	3001      	adds	r0, #1
 800b068:	d02b      	beq.n	800b0c2 <_malloc_r+0xd2>
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	442b      	add	r3, r5
 800b06e:	6023      	str	r3, [r4, #0]
 800b070:	e00e      	b.n	800b090 <_malloc_r+0xa0>
 800b072:	6822      	ldr	r2, [r4, #0]
 800b074:	1b52      	subs	r2, r2, r5
 800b076:	d41e      	bmi.n	800b0b6 <_malloc_r+0xc6>
 800b078:	2a0b      	cmp	r2, #11
 800b07a:	d916      	bls.n	800b0aa <_malloc_r+0xba>
 800b07c:	1961      	adds	r1, r4, r5
 800b07e:	42a3      	cmp	r3, r4
 800b080:	6025      	str	r5, [r4, #0]
 800b082:	bf18      	it	ne
 800b084:	6059      	strne	r1, [r3, #4]
 800b086:	6863      	ldr	r3, [r4, #4]
 800b088:	bf08      	it	eq
 800b08a:	6031      	streq	r1, [r6, #0]
 800b08c:	5162      	str	r2, [r4, r5]
 800b08e:	604b      	str	r3, [r1, #4]
 800b090:	4638      	mov	r0, r7
 800b092:	f104 060b 	add.w	r6, r4, #11
 800b096:	f000 f855 	bl	800b144 <__malloc_unlock>
 800b09a:	f026 0607 	bic.w	r6, r6, #7
 800b09e:	1d23      	adds	r3, r4, #4
 800b0a0:	1af2      	subs	r2, r6, r3
 800b0a2:	d0b6      	beq.n	800b012 <_malloc_r+0x22>
 800b0a4:	1b9b      	subs	r3, r3, r6
 800b0a6:	50a3      	str	r3, [r4, r2]
 800b0a8:	e7b3      	b.n	800b012 <_malloc_r+0x22>
 800b0aa:	6862      	ldr	r2, [r4, #4]
 800b0ac:	42a3      	cmp	r3, r4
 800b0ae:	bf0c      	ite	eq
 800b0b0:	6032      	streq	r2, [r6, #0]
 800b0b2:	605a      	strne	r2, [r3, #4]
 800b0b4:	e7ec      	b.n	800b090 <_malloc_r+0xa0>
 800b0b6:	4623      	mov	r3, r4
 800b0b8:	6864      	ldr	r4, [r4, #4]
 800b0ba:	e7b2      	b.n	800b022 <_malloc_r+0x32>
 800b0bc:	4634      	mov	r4, r6
 800b0be:	6876      	ldr	r6, [r6, #4]
 800b0c0:	e7b9      	b.n	800b036 <_malloc_r+0x46>
 800b0c2:	230c      	movs	r3, #12
 800b0c4:	603b      	str	r3, [r7, #0]
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	f000 f83c 	bl	800b144 <__malloc_unlock>
 800b0cc:	e7a1      	b.n	800b012 <_malloc_r+0x22>
 800b0ce:	6025      	str	r5, [r4, #0]
 800b0d0:	e7de      	b.n	800b090 <_malloc_r+0xa0>
 800b0d2:	bf00      	nop
 800b0d4:	24000cac 	.word	0x24000cac

0800b0d8 <_sbrk_r>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	4d06      	ldr	r5, [pc, #24]	; (800b0f4 <_sbrk_r+0x1c>)
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4604      	mov	r4, r0
 800b0e0:	4608      	mov	r0, r1
 800b0e2:	602b      	str	r3, [r5, #0]
 800b0e4:	f7f7 fb78 	bl	80027d8 <_sbrk>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	d102      	bne.n	800b0f2 <_sbrk_r+0x1a>
 800b0ec:	682b      	ldr	r3, [r5, #0]
 800b0ee:	b103      	cbz	r3, 800b0f2 <_sbrk_r+0x1a>
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	24000cb4 	.word	0x24000cb4

0800b0f8 <siprintf>:
 800b0f8:	b40e      	push	{r1, r2, r3}
 800b0fa:	b500      	push	{lr}
 800b0fc:	b09c      	sub	sp, #112	; 0x70
 800b0fe:	ab1d      	add	r3, sp, #116	; 0x74
 800b100:	9002      	str	r0, [sp, #8]
 800b102:	9006      	str	r0, [sp, #24]
 800b104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b108:	4809      	ldr	r0, [pc, #36]	; (800b130 <siprintf+0x38>)
 800b10a:	9107      	str	r1, [sp, #28]
 800b10c:	9104      	str	r1, [sp, #16]
 800b10e:	4909      	ldr	r1, [pc, #36]	; (800b134 <siprintf+0x3c>)
 800b110:	f853 2b04 	ldr.w	r2, [r3], #4
 800b114:	9105      	str	r1, [sp, #20]
 800b116:	6800      	ldr	r0, [r0, #0]
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	a902      	add	r1, sp, #8
 800b11c:	f000 f874 	bl	800b208 <_svfiprintf_r>
 800b120:	9b02      	ldr	r3, [sp, #8]
 800b122:	2200      	movs	r2, #0
 800b124:	701a      	strb	r2, [r3, #0]
 800b126:	b01c      	add	sp, #112	; 0x70
 800b128:	f85d eb04 	ldr.w	lr, [sp], #4
 800b12c:	b003      	add	sp, #12
 800b12e:	4770      	bx	lr
 800b130:	24000020 	.word	0x24000020
 800b134:	ffff0208 	.word	0xffff0208

0800b138 <__malloc_lock>:
 800b138:	4801      	ldr	r0, [pc, #4]	; (800b140 <__malloc_lock+0x8>)
 800b13a:	f000 baf9 	b.w	800b730 <__retarget_lock_acquire_recursive>
 800b13e:	bf00      	nop
 800b140:	24000cb8 	.word	0x24000cb8

0800b144 <__malloc_unlock>:
 800b144:	4801      	ldr	r0, [pc, #4]	; (800b14c <__malloc_unlock+0x8>)
 800b146:	f000 baf4 	b.w	800b732 <__retarget_lock_release_recursive>
 800b14a:	bf00      	nop
 800b14c:	24000cb8 	.word	0x24000cb8

0800b150 <__ssputs_r>:
 800b150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b154:	688e      	ldr	r6, [r1, #8]
 800b156:	429e      	cmp	r6, r3
 800b158:	4682      	mov	sl, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	4690      	mov	r8, r2
 800b15e:	461f      	mov	r7, r3
 800b160:	d838      	bhi.n	800b1d4 <__ssputs_r+0x84>
 800b162:	898a      	ldrh	r2, [r1, #12]
 800b164:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b168:	d032      	beq.n	800b1d0 <__ssputs_r+0x80>
 800b16a:	6825      	ldr	r5, [r4, #0]
 800b16c:	6909      	ldr	r1, [r1, #16]
 800b16e:	eba5 0901 	sub.w	r9, r5, r1
 800b172:	6965      	ldr	r5, [r4, #20]
 800b174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b17c:	3301      	adds	r3, #1
 800b17e:	444b      	add	r3, r9
 800b180:	106d      	asrs	r5, r5, #1
 800b182:	429d      	cmp	r5, r3
 800b184:	bf38      	it	cc
 800b186:	461d      	movcc	r5, r3
 800b188:	0553      	lsls	r3, r2, #21
 800b18a:	d531      	bpl.n	800b1f0 <__ssputs_r+0xa0>
 800b18c:	4629      	mov	r1, r5
 800b18e:	f7ff ff2f 	bl	800aff0 <_malloc_r>
 800b192:	4606      	mov	r6, r0
 800b194:	b950      	cbnz	r0, 800b1ac <__ssputs_r+0x5c>
 800b196:	230c      	movs	r3, #12
 800b198:	f8ca 3000 	str.w	r3, [sl]
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1a2:	81a3      	strh	r3, [r4, #12]
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ac:	6921      	ldr	r1, [r4, #16]
 800b1ae:	464a      	mov	r2, r9
 800b1b0:	f000 fac0 	bl	800b734 <memcpy>
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1be:	81a3      	strh	r3, [r4, #12]
 800b1c0:	6126      	str	r6, [r4, #16]
 800b1c2:	6165      	str	r5, [r4, #20]
 800b1c4:	444e      	add	r6, r9
 800b1c6:	eba5 0509 	sub.w	r5, r5, r9
 800b1ca:	6026      	str	r6, [r4, #0]
 800b1cc:	60a5      	str	r5, [r4, #8]
 800b1ce:	463e      	mov	r6, r7
 800b1d0:	42be      	cmp	r6, r7
 800b1d2:	d900      	bls.n	800b1d6 <__ssputs_r+0x86>
 800b1d4:	463e      	mov	r6, r7
 800b1d6:	6820      	ldr	r0, [r4, #0]
 800b1d8:	4632      	mov	r2, r6
 800b1da:	4641      	mov	r1, r8
 800b1dc:	f000 fab8 	bl	800b750 <memmove>
 800b1e0:	68a3      	ldr	r3, [r4, #8]
 800b1e2:	1b9b      	subs	r3, r3, r6
 800b1e4:	60a3      	str	r3, [r4, #8]
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	4433      	add	r3, r6
 800b1ea:	6023      	str	r3, [r4, #0]
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	e7db      	b.n	800b1a8 <__ssputs_r+0x58>
 800b1f0:	462a      	mov	r2, r5
 800b1f2:	f000 fac7 	bl	800b784 <_realloc_r>
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d1e1      	bne.n	800b1c0 <__ssputs_r+0x70>
 800b1fc:	6921      	ldr	r1, [r4, #16]
 800b1fe:	4650      	mov	r0, sl
 800b200:	f7ff fe8a 	bl	800af18 <_free_r>
 800b204:	e7c7      	b.n	800b196 <__ssputs_r+0x46>
	...

0800b208 <_svfiprintf_r>:
 800b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	4698      	mov	r8, r3
 800b20e:	898b      	ldrh	r3, [r1, #12]
 800b210:	061b      	lsls	r3, r3, #24
 800b212:	b09d      	sub	sp, #116	; 0x74
 800b214:	4607      	mov	r7, r0
 800b216:	460d      	mov	r5, r1
 800b218:	4614      	mov	r4, r2
 800b21a:	d50e      	bpl.n	800b23a <_svfiprintf_r+0x32>
 800b21c:	690b      	ldr	r3, [r1, #16]
 800b21e:	b963      	cbnz	r3, 800b23a <_svfiprintf_r+0x32>
 800b220:	2140      	movs	r1, #64	; 0x40
 800b222:	f7ff fee5 	bl	800aff0 <_malloc_r>
 800b226:	6028      	str	r0, [r5, #0]
 800b228:	6128      	str	r0, [r5, #16]
 800b22a:	b920      	cbnz	r0, 800b236 <_svfiprintf_r+0x2e>
 800b22c:	230c      	movs	r3, #12
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	f04f 30ff 	mov.w	r0, #4294967295
 800b234:	e0d1      	b.n	800b3da <_svfiprintf_r+0x1d2>
 800b236:	2340      	movs	r3, #64	; 0x40
 800b238:	616b      	str	r3, [r5, #20]
 800b23a:	2300      	movs	r3, #0
 800b23c:	9309      	str	r3, [sp, #36]	; 0x24
 800b23e:	2320      	movs	r3, #32
 800b240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b244:	f8cd 800c 	str.w	r8, [sp, #12]
 800b248:	2330      	movs	r3, #48	; 0x30
 800b24a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b3f4 <_svfiprintf_r+0x1ec>
 800b24e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b252:	f04f 0901 	mov.w	r9, #1
 800b256:	4623      	mov	r3, r4
 800b258:	469a      	mov	sl, r3
 800b25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b25e:	b10a      	cbz	r2, 800b264 <_svfiprintf_r+0x5c>
 800b260:	2a25      	cmp	r2, #37	; 0x25
 800b262:	d1f9      	bne.n	800b258 <_svfiprintf_r+0x50>
 800b264:	ebba 0b04 	subs.w	fp, sl, r4
 800b268:	d00b      	beq.n	800b282 <_svfiprintf_r+0x7a>
 800b26a:	465b      	mov	r3, fp
 800b26c:	4622      	mov	r2, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	4638      	mov	r0, r7
 800b272:	f7ff ff6d 	bl	800b150 <__ssputs_r>
 800b276:	3001      	adds	r0, #1
 800b278:	f000 80aa 	beq.w	800b3d0 <_svfiprintf_r+0x1c8>
 800b27c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b27e:	445a      	add	r2, fp
 800b280:	9209      	str	r2, [sp, #36]	; 0x24
 800b282:	f89a 3000 	ldrb.w	r3, [sl]
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 80a2 	beq.w	800b3d0 <_svfiprintf_r+0x1c8>
 800b28c:	2300      	movs	r3, #0
 800b28e:	f04f 32ff 	mov.w	r2, #4294967295
 800b292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b296:	f10a 0a01 	add.w	sl, sl, #1
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	9307      	str	r3, [sp, #28]
 800b29e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2a2:	931a      	str	r3, [sp, #104]	; 0x68
 800b2a4:	4654      	mov	r4, sl
 800b2a6:	2205      	movs	r2, #5
 800b2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ac:	4851      	ldr	r0, [pc, #324]	; (800b3f4 <_svfiprintf_r+0x1ec>)
 800b2ae:	f7f5 f817 	bl	80002e0 <memchr>
 800b2b2:	9a04      	ldr	r2, [sp, #16]
 800b2b4:	b9d8      	cbnz	r0, 800b2ee <_svfiprintf_r+0xe6>
 800b2b6:	06d0      	lsls	r0, r2, #27
 800b2b8:	bf44      	itt	mi
 800b2ba:	2320      	movmi	r3, #32
 800b2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2c0:	0711      	lsls	r1, r2, #28
 800b2c2:	bf44      	itt	mi
 800b2c4:	232b      	movmi	r3, #43	; 0x2b
 800b2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b2d0:	d015      	beq.n	800b2fe <_svfiprintf_r+0xf6>
 800b2d2:	9a07      	ldr	r2, [sp, #28]
 800b2d4:	4654      	mov	r4, sl
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	f04f 0c0a 	mov.w	ip, #10
 800b2dc:	4621      	mov	r1, r4
 800b2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2e2:	3b30      	subs	r3, #48	; 0x30
 800b2e4:	2b09      	cmp	r3, #9
 800b2e6:	d94e      	bls.n	800b386 <_svfiprintf_r+0x17e>
 800b2e8:	b1b0      	cbz	r0, 800b318 <_svfiprintf_r+0x110>
 800b2ea:	9207      	str	r2, [sp, #28]
 800b2ec:	e014      	b.n	800b318 <_svfiprintf_r+0x110>
 800b2ee:	eba0 0308 	sub.w	r3, r0, r8
 800b2f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	46a2      	mov	sl, r4
 800b2fc:	e7d2      	b.n	800b2a4 <_svfiprintf_r+0x9c>
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	1d19      	adds	r1, r3, #4
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	9103      	str	r1, [sp, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	bfbb      	ittet	lt
 800b30a:	425b      	neglt	r3, r3
 800b30c:	f042 0202 	orrlt.w	r2, r2, #2
 800b310:	9307      	strge	r3, [sp, #28]
 800b312:	9307      	strlt	r3, [sp, #28]
 800b314:	bfb8      	it	lt
 800b316:	9204      	strlt	r2, [sp, #16]
 800b318:	7823      	ldrb	r3, [r4, #0]
 800b31a:	2b2e      	cmp	r3, #46	; 0x2e
 800b31c:	d10c      	bne.n	800b338 <_svfiprintf_r+0x130>
 800b31e:	7863      	ldrb	r3, [r4, #1]
 800b320:	2b2a      	cmp	r3, #42	; 0x2a
 800b322:	d135      	bne.n	800b390 <_svfiprintf_r+0x188>
 800b324:	9b03      	ldr	r3, [sp, #12]
 800b326:	1d1a      	adds	r2, r3, #4
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	9203      	str	r2, [sp, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	bfb8      	it	lt
 800b330:	f04f 33ff 	movlt.w	r3, #4294967295
 800b334:	3402      	adds	r4, #2
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b404 <_svfiprintf_r+0x1fc>
 800b33c:	7821      	ldrb	r1, [r4, #0]
 800b33e:	2203      	movs	r2, #3
 800b340:	4650      	mov	r0, sl
 800b342:	f7f4 ffcd 	bl	80002e0 <memchr>
 800b346:	b140      	cbz	r0, 800b35a <_svfiprintf_r+0x152>
 800b348:	2340      	movs	r3, #64	; 0x40
 800b34a:	eba0 000a 	sub.w	r0, r0, sl
 800b34e:	fa03 f000 	lsl.w	r0, r3, r0
 800b352:	9b04      	ldr	r3, [sp, #16]
 800b354:	4303      	orrs	r3, r0
 800b356:	3401      	adds	r4, #1
 800b358:	9304      	str	r3, [sp, #16]
 800b35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b35e:	4826      	ldr	r0, [pc, #152]	; (800b3f8 <_svfiprintf_r+0x1f0>)
 800b360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b364:	2206      	movs	r2, #6
 800b366:	f7f4 ffbb 	bl	80002e0 <memchr>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d038      	beq.n	800b3e0 <_svfiprintf_r+0x1d8>
 800b36e:	4b23      	ldr	r3, [pc, #140]	; (800b3fc <_svfiprintf_r+0x1f4>)
 800b370:	bb1b      	cbnz	r3, 800b3ba <_svfiprintf_r+0x1b2>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	3307      	adds	r3, #7
 800b376:	f023 0307 	bic.w	r3, r3, #7
 800b37a:	3308      	adds	r3, #8
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b380:	4433      	add	r3, r6
 800b382:	9309      	str	r3, [sp, #36]	; 0x24
 800b384:	e767      	b.n	800b256 <_svfiprintf_r+0x4e>
 800b386:	fb0c 3202 	mla	r2, ip, r2, r3
 800b38a:	460c      	mov	r4, r1
 800b38c:	2001      	movs	r0, #1
 800b38e:	e7a5      	b.n	800b2dc <_svfiprintf_r+0xd4>
 800b390:	2300      	movs	r3, #0
 800b392:	3401      	adds	r4, #1
 800b394:	9305      	str	r3, [sp, #20]
 800b396:	4619      	mov	r1, r3
 800b398:	f04f 0c0a 	mov.w	ip, #10
 800b39c:	4620      	mov	r0, r4
 800b39e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3a2:	3a30      	subs	r2, #48	; 0x30
 800b3a4:	2a09      	cmp	r2, #9
 800b3a6:	d903      	bls.n	800b3b0 <_svfiprintf_r+0x1a8>
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d0c5      	beq.n	800b338 <_svfiprintf_r+0x130>
 800b3ac:	9105      	str	r1, [sp, #20]
 800b3ae:	e7c3      	b.n	800b338 <_svfiprintf_r+0x130>
 800b3b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e7f0      	b.n	800b39c <_svfiprintf_r+0x194>
 800b3ba:	ab03      	add	r3, sp, #12
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	462a      	mov	r2, r5
 800b3c0:	4b0f      	ldr	r3, [pc, #60]	; (800b400 <_svfiprintf_r+0x1f8>)
 800b3c2:	a904      	add	r1, sp, #16
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	f3af 8000 	nop.w
 800b3ca:	1c42      	adds	r2, r0, #1
 800b3cc:	4606      	mov	r6, r0
 800b3ce:	d1d6      	bne.n	800b37e <_svfiprintf_r+0x176>
 800b3d0:	89ab      	ldrh	r3, [r5, #12]
 800b3d2:	065b      	lsls	r3, r3, #25
 800b3d4:	f53f af2c 	bmi.w	800b230 <_svfiprintf_r+0x28>
 800b3d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3da:	b01d      	add	sp, #116	; 0x74
 800b3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e0:	ab03      	add	r3, sp, #12
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	462a      	mov	r2, r5
 800b3e6:	4b06      	ldr	r3, [pc, #24]	; (800b400 <_svfiprintf_r+0x1f8>)
 800b3e8:	a904      	add	r1, sp, #16
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f000 f87a 	bl	800b4e4 <_printf_i>
 800b3f0:	e7eb      	b.n	800b3ca <_svfiprintf_r+0x1c2>
 800b3f2:	bf00      	nop
 800b3f4:	0800ce50 	.word	0x0800ce50
 800b3f8:	0800ce5a 	.word	0x0800ce5a
 800b3fc:	00000000 	.word	0x00000000
 800b400:	0800b151 	.word	0x0800b151
 800b404:	0800ce56 	.word	0x0800ce56

0800b408 <_printf_common>:
 800b408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	4616      	mov	r6, r2
 800b40e:	4699      	mov	r9, r3
 800b410:	688a      	ldr	r2, [r1, #8]
 800b412:	690b      	ldr	r3, [r1, #16]
 800b414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b418:	4293      	cmp	r3, r2
 800b41a:	bfb8      	it	lt
 800b41c:	4613      	movlt	r3, r2
 800b41e:	6033      	str	r3, [r6, #0]
 800b420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b424:	4607      	mov	r7, r0
 800b426:	460c      	mov	r4, r1
 800b428:	b10a      	cbz	r2, 800b42e <_printf_common+0x26>
 800b42a:	3301      	adds	r3, #1
 800b42c:	6033      	str	r3, [r6, #0]
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	0699      	lsls	r1, r3, #26
 800b432:	bf42      	ittt	mi
 800b434:	6833      	ldrmi	r3, [r6, #0]
 800b436:	3302      	addmi	r3, #2
 800b438:	6033      	strmi	r3, [r6, #0]
 800b43a:	6825      	ldr	r5, [r4, #0]
 800b43c:	f015 0506 	ands.w	r5, r5, #6
 800b440:	d106      	bne.n	800b450 <_printf_common+0x48>
 800b442:	f104 0a19 	add.w	sl, r4, #25
 800b446:	68e3      	ldr	r3, [r4, #12]
 800b448:	6832      	ldr	r2, [r6, #0]
 800b44a:	1a9b      	subs	r3, r3, r2
 800b44c:	42ab      	cmp	r3, r5
 800b44e:	dc26      	bgt.n	800b49e <_printf_common+0x96>
 800b450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b454:	1e13      	subs	r3, r2, #0
 800b456:	6822      	ldr	r2, [r4, #0]
 800b458:	bf18      	it	ne
 800b45a:	2301      	movne	r3, #1
 800b45c:	0692      	lsls	r2, r2, #26
 800b45e:	d42b      	bmi.n	800b4b8 <_printf_common+0xb0>
 800b460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b464:	4649      	mov	r1, r9
 800b466:	4638      	mov	r0, r7
 800b468:	47c0      	blx	r8
 800b46a:	3001      	adds	r0, #1
 800b46c:	d01e      	beq.n	800b4ac <_printf_common+0xa4>
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	68e5      	ldr	r5, [r4, #12]
 800b472:	6832      	ldr	r2, [r6, #0]
 800b474:	f003 0306 	and.w	r3, r3, #6
 800b478:	2b04      	cmp	r3, #4
 800b47a:	bf08      	it	eq
 800b47c:	1aad      	subeq	r5, r5, r2
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	6922      	ldr	r2, [r4, #16]
 800b482:	bf0c      	ite	eq
 800b484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b488:	2500      	movne	r5, #0
 800b48a:	4293      	cmp	r3, r2
 800b48c:	bfc4      	itt	gt
 800b48e:	1a9b      	subgt	r3, r3, r2
 800b490:	18ed      	addgt	r5, r5, r3
 800b492:	2600      	movs	r6, #0
 800b494:	341a      	adds	r4, #26
 800b496:	42b5      	cmp	r5, r6
 800b498:	d11a      	bne.n	800b4d0 <_printf_common+0xc8>
 800b49a:	2000      	movs	r0, #0
 800b49c:	e008      	b.n	800b4b0 <_printf_common+0xa8>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	4652      	mov	r2, sl
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	47c0      	blx	r8
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	d103      	bne.n	800b4b4 <_printf_common+0xac>
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b4:	3501      	adds	r5, #1
 800b4b6:	e7c6      	b.n	800b446 <_printf_common+0x3e>
 800b4b8:	18e1      	adds	r1, r4, r3
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	2030      	movs	r0, #48	; 0x30
 800b4be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4c2:	4422      	add	r2, r4
 800b4c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	e7c7      	b.n	800b460 <_printf_common+0x58>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	4622      	mov	r2, r4
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	47c0      	blx	r8
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d0e6      	beq.n	800b4ac <_printf_common+0xa4>
 800b4de:	3601      	adds	r6, #1
 800b4e0:	e7d9      	b.n	800b496 <_printf_common+0x8e>
	...

0800b4e4 <_printf_i>:
 800b4e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e8:	7e0f      	ldrb	r7, [r1, #24]
 800b4ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4ec:	2f78      	cmp	r7, #120	; 0x78
 800b4ee:	4691      	mov	r9, r2
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	469a      	mov	sl, r3
 800b4f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4fa:	d807      	bhi.n	800b50c <_printf_i+0x28>
 800b4fc:	2f62      	cmp	r7, #98	; 0x62
 800b4fe:	d80a      	bhi.n	800b516 <_printf_i+0x32>
 800b500:	2f00      	cmp	r7, #0
 800b502:	f000 80d8 	beq.w	800b6b6 <_printf_i+0x1d2>
 800b506:	2f58      	cmp	r7, #88	; 0x58
 800b508:	f000 80a3 	beq.w	800b652 <_printf_i+0x16e>
 800b50c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b514:	e03a      	b.n	800b58c <_printf_i+0xa8>
 800b516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b51a:	2b15      	cmp	r3, #21
 800b51c:	d8f6      	bhi.n	800b50c <_printf_i+0x28>
 800b51e:	a101      	add	r1, pc, #4	; (adr r1, 800b524 <_printf_i+0x40>)
 800b520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b524:	0800b57d 	.word	0x0800b57d
 800b528:	0800b591 	.word	0x0800b591
 800b52c:	0800b50d 	.word	0x0800b50d
 800b530:	0800b50d 	.word	0x0800b50d
 800b534:	0800b50d 	.word	0x0800b50d
 800b538:	0800b50d 	.word	0x0800b50d
 800b53c:	0800b591 	.word	0x0800b591
 800b540:	0800b50d 	.word	0x0800b50d
 800b544:	0800b50d 	.word	0x0800b50d
 800b548:	0800b50d 	.word	0x0800b50d
 800b54c:	0800b50d 	.word	0x0800b50d
 800b550:	0800b69d 	.word	0x0800b69d
 800b554:	0800b5c1 	.word	0x0800b5c1
 800b558:	0800b67f 	.word	0x0800b67f
 800b55c:	0800b50d 	.word	0x0800b50d
 800b560:	0800b50d 	.word	0x0800b50d
 800b564:	0800b6bf 	.word	0x0800b6bf
 800b568:	0800b50d 	.word	0x0800b50d
 800b56c:	0800b5c1 	.word	0x0800b5c1
 800b570:	0800b50d 	.word	0x0800b50d
 800b574:	0800b50d 	.word	0x0800b50d
 800b578:	0800b687 	.word	0x0800b687
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	1d1a      	adds	r2, r3, #4
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	602a      	str	r2, [r5, #0]
 800b584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b58c:	2301      	movs	r3, #1
 800b58e:	e0a3      	b.n	800b6d8 <_printf_i+0x1f4>
 800b590:	6820      	ldr	r0, [r4, #0]
 800b592:	6829      	ldr	r1, [r5, #0]
 800b594:	0606      	lsls	r6, r0, #24
 800b596:	f101 0304 	add.w	r3, r1, #4
 800b59a:	d50a      	bpl.n	800b5b2 <_printf_i+0xce>
 800b59c:	680e      	ldr	r6, [r1, #0]
 800b59e:	602b      	str	r3, [r5, #0]
 800b5a0:	2e00      	cmp	r6, #0
 800b5a2:	da03      	bge.n	800b5ac <_printf_i+0xc8>
 800b5a4:	232d      	movs	r3, #45	; 0x2d
 800b5a6:	4276      	negs	r6, r6
 800b5a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ac:	485e      	ldr	r0, [pc, #376]	; (800b728 <_printf_i+0x244>)
 800b5ae:	230a      	movs	r3, #10
 800b5b0:	e019      	b.n	800b5e6 <_printf_i+0x102>
 800b5b2:	680e      	ldr	r6, [r1, #0]
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5ba:	bf18      	it	ne
 800b5bc:	b236      	sxthne	r6, r6
 800b5be:	e7ef      	b.n	800b5a0 <_printf_i+0xbc>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	6820      	ldr	r0, [r4, #0]
 800b5c4:	1d19      	adds	r1, r3, #4
 800b5c6:	6029      	str	r1, [r5, #0]
 800b5c8:	0601      	lsls	r1, r0, #24
 800b5ca:	d501      	bpl.n	800b5d0 <_printf_i+0xec>
 800b5cc:	681e      	ldr	r6, [r3, #0]
 800b5ce:	e002      	b.n	800b5d6 <_printf_i+0xf2>
 800b5d0:	0646      	lsls	r6, r0, #25
 800b5d2:	d5fb      	bpl.n	800b5cc <_printf_i+0xe8>
 800b5d4:	881e      	ldrh	r6, [r3, #0]
 800b5d6:	4854      	ldr	r0, [pc, #336]	; (800b728 <_printf_i+0x244>)
 800b5d8:	2f6f      	cmp	r7, #111	; 0x6f
 800b5da:	bf0c      	ite	eq
 800b5dc:	2308      	moveq	r3, #8
 800b5de:	230a      	movne	r3, #10
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5e6:	6865      	ldr	r5, [r4, #4]
 800b5e8:	60a5      	str	r5, [r4, #8]
 800b5ea:	2d00      	cmp	r5, #0
 800b5ec:	bfa2      	ittt	ge
 800b5ee:	6821      	ldrge	r1, [r4, #0]
 800b5f0:	f021 0104 	bicge.w	r1, r1, #4
 800b5f4:	6021      	strge	r1, [r4, #0]
 800b5f6:	b90e      	cbnz	r6, 800b5fc <_printf_i+0x118>
 800b5f8:	2d00      	cmp	r5, #0
 800b5fa:	d04d      	beq.n	800b698 <_printf_i+0x1b4>
 800b5fc:	4615      	mov	r5, r2
 800b5fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800b602:	fb03 6711 	mls	r7, r3, r1, r6
 800b606:	5dc7      	ldrb	r7, [r0, r7]
 800b608:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b60c:	4637      	mov	r7, r6
 800b60e:	42bb      	cmp	r3, r7
 800b610:	460e      	mov	r6, r1
 800b612:	d9f4      	bls.n	800b5fe <_printf_i+0x11a>
 800b614:	2b08      	cmp	r3, #8
 800b616:	d10b      	bne.n	800b630 <_printf_i+0x14c>
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	07de      	lsls	r6, r3, #31
 800b61c:	d508      	bpl.n	800b630 <_printf_i+0x14c>
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	6861      	ldr	r1, [r4, #4]
 800b622:	4299      	cmp	r1, r3
 800b624:	bfde      	ittt	le
 800b626:	2330      	movle	r3, #48	; 0x30
 800b628:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b62c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b630:	1b52      	subs	r2, r2, r5
 800b632:	6122      	str	r2, [r4, #16]
 800b634:	f8cd a000 	str.w	sl, [sp]
 800b638:	464b      	mov	r3, r9
 800b63a:	aa03      	add	r2, sp, #12
 800b63c:	4621      	mov	r1, r4
 800b63e:	4640      	mov	r0, r8
 800b640:	f7ff fee2 	bl	800b408 <_printf_common>
 800b644:	3001      	adds	r0, #1
 800b646:	d14c      	bne.n	800b6e2 <_printf_i+0x1fe>
 800b648:	f04f 30ff 	mov.w	r0, #4294967295
 800b64c:	b004      	add	sp, #16
 800b64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b652:	4835      	ldr	r0, [pc, #212]	; (800b728 <_printf_i+0x244>)
 800b654:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b658:	6829      	ldr	r1, [r5, #0]
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b660:	6029      	str	r1, [r5, #0]
 800b662:	061d      	lsls	r5, r3, #24
 800b664:	d514      	bpl.n	800b690 <_printf_i+0x1ac>
 800b666:	07df      	lsls	r7, r3, #31
 800b668:	bf44      	itt	mi
 800b66a:	f043 0320 	orrmi.w	r3, r3, #32
 800b66e:	6023      	strmi	r3, [r4, #0]
 800b670:	b91e      	cbnz	r6, 800b67a <_printf_i+0x196>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	f023 0320 	bic.w	r3, r3, #32
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	2310      	movs	r3, #16
 800b67c:	e7b0      	b.n	800b5e0 <_printf_i+0xfc>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	f043 0320 	orr.w	r3, r3, #32
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	2378      	movs	r3, #120	; 0x78
 800b688:	4828      	ldr	r0, [pc, #160]	; (800b72c <_printf_i+0x248>)
 800b68a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b68e:	e7e3      	b.n	800b658 <_printf_i+0x174>
 800b690:	0659      	lsls	r1, r3, #25
 800b692:	bf48      	it	mi
 800b694:	b2b6      	uxthmi	r6, r6
 800b696:	e7e6      	b.n	800b666 <_printf_i+0x182>
 800b698:	4615      	mov	r5, r2
 800b69a:	e7bb      	b.n	800b614 <_printf_i+0x130>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	6826      	ldr	r6, [r4, #0]
 800b6a0:	6961      	ldr	r1, [r4, #20]
 800b6a2:	1d18      	adds	r0, r3, #4
 800b6a4:	6028      	str	r0, [r5, #0]
 800b6a6:	0635      	lsls	r5, r6, #24
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	d501      	bpl.n	800b6b0 <_printf_i+0x1cc>
 800b6ac:	6019      	str	r1, [r3, #0]
 800b6ae:	e002      	b.n	800b6b6 <_printf_i+0x1d2>
 800b6b0:	0670      	lsls	r0, r6, #25
 800b6b2:	d5fb      	bpl.n	800b6ac <_printf_i+0x1c8>
 800b6b4:	8019      	strh	r1, [r3, #0]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	4615      	mov	r5, r2
 800b6bc:	e7ba      	b.n	800b634 <_printf_i+0x150>
 800b6be:	682b      	ldr	r3, [r5, #0]
 800b6c0:	1d1a      	adds	r2, r3, #4
 800b6c2:	602a      	str	r2, [r5, #0]
 800b6c4:	681d      	ldr	r5, [r3, #0]
 800b6c6:	6862      	ldr	r2, [r4, #4]
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f7f4 fe08 	bl	80002e0 <memchr>
 800b6d0:	b108      	cbz	r0, 800b6d6 <_printf_i+0x1f2>
 800b6d2:	1b40      	subs	r0, r0, r5
 800b6d4:	6060      	str	r0, [r4, #4]
 800b6d6:	6863      	ldr	r3, [r4, #4]
 800b6d8:	6123      	str	r3, [r4, #16]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6e0:	e7a8      	b.n	800b634 <_printf_i+0x150>
 800b6e2:	6923      	ldr	r3, [r4, #16]
 800b6e4:	462a      	mov	r2, r5
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	47d0      	blx	sl
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d0ab      	beq.n	800b648 <_printf_i+0x164>
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	079b      	lsls	r3, r3, #30
 800b6f4:	d413      	bmi.n	800b71e <_printf_i+0x23a>
 800b6f6:	68e0      	ldr	r0, [r4, #12]
 800b6f8:	9b03      	ldr	r3, [sp, #12]
 800b6fa:	4298      	cmp	r0, r3
 800b6fc:	bfb8      	it	lt
 800b6fe:	4618      	movlt	r0, r3
 800b700:	e7a4      	b.n	800b64c <_printf_i+0x168>
 800b702:	2301      	movs	r3, #1
 800b704:	4632      	mov	r2, r6
 800b706:	4649      	mov	r1, r9
 800b708:	4640      	mov	r0, r8
 800b70a:	47d0      	blx	sl
 800b70c:	3001      	adds	r0, #1
 800b70e:	d09b      	beq.n	800b648 <_printf_i+0x164>
 800b710:	3501      	adds	r5, #1
 800b712:	68e3      	ldr	r3, [r4, #12]
 800b714:	9903      	ldr	r1, [sp, #12]
 800b716:	1a5b      	subs	r3, r3, r1
 800b718:	42ab      	cmp	r3, r5
 800b71a:	dcf2      	bgt.n	800b702 <_printf_i+0x21e>
 800b71c:	e7eb      	b.n	800b6f6 <_printf_i+0x212>
 800b71e:	2500      	movs	r5, #0
 800b720:	f104 0619 	add.w	r6, r4, #25
 800b724:	e7f5      	b.n	800b712 <_printf_i+0x22e>
 800b726:	bf00      	nop
 800b728:	0800ce61 	.word	0x0800ce61
 800b72c:	0800ce72 	.word	0x0800ce72

0800b730 <__retarget_lock_acquire_recursive>:
 800b730:	4770      	bx	lr

0800b732 <__retarget_lock_release_recursive>:
 800b732:	4770      	bx	lr

0800b734 <memcpy>:
 800b734:	440a      	add	r2, r1
 800b736:	4291      	cmp	r1, r2
 800b738:	f100 33ff 	add.w	r3, r0, #4294967295
 800b73c:	d100      	bne.n	800b740 <memcpy+0xc>
 800b73e:	4770      	bx	lr
 800b740:	b510      	push	{r4, lr}
 800b742:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b74a:	4291      	cmp	r1, r2
 800b74c:	d1f9      	bne.n	800b742 <memcpy+0xe>
 800b74e:	bd10      	pop	{r4, pc}

0800b750 <memmove>:
 800b750:	4288      	cmp	r0, r1
 800b752:	b510      	push	{r4, lr}
 800b754:	eb01 0402 	add.w	r4, r1, r2
 800b758:	d902      	bls.n	800b760 <memmove+0x10>
 800b75a:	4284      	cmp	r4, r0
 800b75c:	4623      	mov	r3, r4
 800b75e:	d807      	bhi.n	800b770 <memmove+0x20>
 800b760:	1e43      	subs	r3, r0, #1
 800b762:	42a1      	cmp	r1, r4
 800b764:	d008      	beq.n	800b778 <memmove+0x28>
 800b766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b76a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b76e:	e7f8      	b.n	800b762 <memmove+0x12>
 800b770:	4402      	add	r2, r0
 800b772:	4601      	mov	r1, r0
 800b774:	428a      	cmp	r2, r1
 800b776:	d100      	bne.n	800b77a <memmove+0x2a>
 800b778:	bd10      	pop	{r4, pc}
 800b77a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b77e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b782:	e7f7      	b.n	800b774 <memmove+0x24>

0800b784 <_realloc_r>:
 800b784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b788:	4680      	mov	r8, r0
 800b78a:	4614      	mov	r4, r2
 800b78c:	460e      	mov	r6, r1
 800b78e:	b921      	cbnz	r1, 800b79a <_realloc_r+0x16>
 800b790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b794:	4611      	mov	r1, r2
 800b796:	f7ff bc2b 	b.w	800aff0 <_malloc_r>
 800b79a:	b92a      	cbnz	r2, 800b7a8 <_realloc_r+0x24>
 800b79c:	f7ff fbbc 	bl	800af18 <_free_r>
 800b7a0:	4625      	mov	r5, r4
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a8:	f000 f81b 	bl	800b7e2 <_malloc_usable_size_r>
 800b7ac:	4284      	cmp	r4, r0
 800b7ae:	4607      	mov	r7, r0
 800b7b0:	d802      	bhi.n	800b7b8 <_realloc_r+0x34>
 800b7b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7b6:	d812      	bhi.n	800b7de <_realloc_r+0x5a>
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	f7ff fc18 	bl	800aff0 <_malloc_r>
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d0ed      	beq.n	800b7a2 <_realloc_r+0x1e>
 800b7c6:	42bc      	cmp	r4, r7
 800b7c8:	4622      	mov	r2, r4
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	bf28      	it	cs
 800b7ce:	463a      	movcs	r2, r7
 800b7d0:	f7ff ffb0 	bl	800b734 <memcpy>
 800b7d4:	4631      	mov	r1, r6
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	f7ff fb9e 	bl	800af18 <_free_r>
 800b7dc:	e7e1      	b.n	800b7a2 <_realloc_r+0x1e>
 800b7de:	4635      	mov	r5, r6
 800b7e0:	e7df      	b.n	800b7a2 <_realloc_r+0x1e>

0800b7e2 <_malloc_usable_size_r>:
 800b7e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7e6:	1f18      	subs	r0, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	bfbc      	itt	lt
 800b7ec:	580b      	ldrlt	r3, [r1, r0]
 800b7ee:	18c0      	addlt	r0, r0, r3
 800b7f0:	4770      	bx	lr
	...

0800b7f4 <_init>:
 800b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f6:	bf00      	nop
 800b7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fa:	bc08      	pop	{r3}
 800b7fc:	469e      	mov	lr, r3
 800b7fe:	4770      	bx	lr

0800b800 <_fini>:
 800b800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b802:	bf00      	nop
 800b804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b806:	bc08      	pop	{r3}
 800b808:	469e      	mov	lr, r3
 800b80a:	4770      	bx	lr
