
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097ec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009a84  08009a84  00019a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ac4  08009ac4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009ac4  08009ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009acc  08009acc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009acc  08009acc  00019acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08009ae4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08009b44  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008a0  240000d0  08009ba4  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000970  08009ba4  00020970  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d534  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f05  00000000  00000000  0003d632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c0  00000000  00000000  00040538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011b8  00000000  00000000  000417f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b198  00000000  00000000  000429b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019756  00000000  00000000  0007db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00184ae8  00000000  00000000  0009729e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021bd86  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004ffc  00000000  00000000  0021bdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009a6c 	.word	0x08009a6c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009a6c 	.word	0x08009a6c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <main+0xd0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
	if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
	{
		Error_Handler();
 8000732:	f000 fb45 	bl	8000dc0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fe89 	bl	800144c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f853 	bl	80007e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800073e:	f000 f8d5 	bl	80008ec <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <main+0xd0>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <main+0xd0>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <main+0xd0>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f004 f887 	bl	8004874 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f004 f89d 	bl	80048a8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <main+0xd0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x84>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6e>
	if ( timeout < 0 )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8e>
	{
		Error_Handler();
 8000792:	f000 fb15 	bl	8000dc0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 fa2f 	bl	8000bf8 <MX_GPIO_Init>
  MX_ETH_Init();
 800079a:	f000 f8d9 	bl	8000950 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079e:	f000 f97b 	bl	8000a98 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80007a2:	f000 f9f9 	bl	8000b98 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007a6:	f000 f9c5 	bl	8000b34 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 80007aa:	f000 f91d 	bl	80009e8 <MX_SPI2_Init>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 1000)
 80007ae:	f000 fed3 	bl	8001558 <HAL_GetTick>
 80007b2:	4602      	mov	r2, r0
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <main+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007be:	d9f6      	bls.n	80007ae <main+0xa6>
		{
			timemsM7_LED = HAL_GetTick();
 80007c0:	f000 feca 	bl	8001558 <HAL_GetTick>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <main+0xd4>)
 80007c8:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <main+0xd8>)
 80007d0:	f004 f835 	bl	800483e <HAL_GPIO_TogglePin>
		if(HAL_GetTick() - timemsM7_LED > 1000)
 80007d4:	e7eb      	b.n	80007ae <main+0xa6>
 80007d6:	bf00      	nop
 80007d8:	58024400 	.word	0x58024400
 80007dc:	24000960 	.word	0x24000960
 80007e0:	58020400 	.word	0x58020400

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	; 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	224c      	movs	r2, #76	; 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f009 f932 	bl	8009a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f009 f92c 	bl	8009a5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000804:	2004      	movs	r0, #4
 8000806:	f004 f9ab 	bl	8004b60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <SystemClock_Config+0xfc>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a33      	ldr	r2, [pc, #204]	; (80008e0 <SystemClock_Config+0xfc>)
 8000814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <SystemClock_Config+0xfc>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <SystemClock_Config+0x100>)
 8000826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000828:	4a2e      	ldr	r2, [pc, #184]	; (80008e4 <SystemClock_Config+0x100>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <SystemClock_Config+0x100>)
 8000832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <SystemClock_Config+0xfc>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0x104>)
 800084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000850:	f023 0303 	bic.w	r3, r3, #3
 8000854:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <SystemClock_Config+0x104>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000860:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	2302      	movs	r3, #2
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000872:	2378      	movs	r3, #120	; 0x78
 8000874:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000882:	230c      	movs	r3, #12
 8000884:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000886:	2300      	movs	r3, #0
 8000888:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4618      	mov	r0, r3
 8000894:	f004 f9ce 	bl	8004c34 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800089e:	f000 fa8f 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	233f      	movs	r3, #63	; 0x3f
 80008a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2303      	movs	r3, #3
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ae:	2308      	movs	r3, #8
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c0:	2340      	movs	r3, #64	; 0x40
 80008c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2104      	movs	r1, #4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 fde1 	bl	8005490 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008d4:	f000 fa74 	bl	8000dc0 <Error_Handler>
  }
}
 80008d8:	bf00      	nop
 80008da:	3770      	adds	r7, #112	; 0x70
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58024800 	.word	0x58024800
 80008e4:	58000400 	.word	0x58000400
 80008e8:	58024400 	.word	0x58024400

080008ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0b0      	sub	sp, #192	; 0xc0
 80008f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	22bc      	movs	r2, #188	; 0xbc
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f009 f8af 	bl	8009a5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI2
 80008fe:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000902:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000908:	2318      	movs	r3, #24
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000914:	2302      	movs	r3, #2
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000918:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800091c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800091e:	2300      	movs	r3, #0
 8000920:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800092c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f005 f936 	bl	8005ba8 <HAL_RCCEx_PeriphCLKConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000942:	f000 fa3d 	bl	8000dc0 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	37c0      	adds	r7, #192	; 0xc0
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <MX_ETH_Init+0x80>)
 8000956:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <MX_ETH_Init+0x84>)
 8000958:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_ETH_Init+0x88>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_ETH_Init+0x88>)
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_ETH_Init+0x88>)
 8000968:	22e1      	movs	r2, #225	; 0xe1
 800096a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_ETH_Init+0x88>)
 800096e:	2200      	movs	r2, #0
 8000970:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_ETH_Init+0x88>)
 8000974:	2200      	movs	r2, #0
 8000976:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_ETH_Init+0x88>)
 800097a:	2200      	movs	r2, #0
 800097c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_ETH_Init+0x80>)
 8000980:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <MX_ETH_Init+0x88>)
 8000982:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_ETH_Init+0x80>)
 8000986:	2201      	movs	r2, #1
 8000988:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_ETH_Init+0x80>)
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_ETH_Init+0x8c>)
 800098e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_ETH_Init+0x80>)
 8000992:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <MX_ETH_Init+0x90>)
 8000994:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_ETH_Init+0x80>)
 8000998:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800099c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_ETH_Init+0x80>)
 80009a0:	f003 f960 	bl	8003c64 <HAL_ETH_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009aa:	f000 fa09 	bl	8000dc0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009ae:	2238      	movs	r2, #56	; 0x38
 80009b0:	2100      	movs	r1, #0
 80009b2:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_ETH_Init+0x94>)
 80009b4:	f009 f852 	bl	8009a5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_ETH_Init+0x94>)
 80009ba:	2221      	movs	r2, #33	; 0x21
 80009bc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_ETH_Init+0x94>)
 80009c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009c4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_ETH_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000124 	.word	0x24000124
 80009d4:	40028000 	.word	0x40028000
 80009d8:	24000964 	.word	0x24000964
 80009dc:	24000070 	.word	0x24000070
 80009e0:	24000010 	.word	0x24000010
 80009e4:	240000ec 	.word	0x240000ec

080009e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_SPI2_Init+0xa8>)
 80009ee:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <MX_SPI2_Init+0xac>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_SPI2_Init+0xa8>)
 80009f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <MX_SPI2_Init+0xa8>)
 80009fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a00:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a1e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000a22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a7c:	f006 fbfc 	bl	8007278 <HAL_SPI_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000a86:	f000 f99b 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	240001d4 	.word	0x240001d4
 8000a94:	40003800 	.word	0x40003800

08000a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <MX_USART3_UART_Init+0x94>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <MX_USART3_UART_Init+0x98>)
 8000aa6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000abc:	220c      	movs	r2, #12
 8000abe:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ae0:	f006 ff99 	bl	8007a16 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000aea:	f000 f969 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000af2:	f008 fbbb 	bl	800926c <HAL_UARTEx_SetTxFifoThreshold>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000afc:	f000 f960 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000b04:	f008 fbf0 	bl	80092e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000b0e:	f000 f957 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000b14:	f008 fb71 	bl	80091fa <HAL_UARTEx_DisableFifoMode>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000b1e:	f000 f94f 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	240002d4 	.word	0x240002d4
 8000b2c:	40004800 	.word	0x40004800
 8000b30:	0005dc00 	.word	0x0005dc00

08000b34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b40:	2209      	movs	r2, #9
 8000b42:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	f003 fea8 	bl	80048d0 <HAL_PCD_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b86:	f000 f91b 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	24000454 	.word	0x24000454
 8000b94:	40080000 	.word	0x40080000

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_DMA_Init+0x5c>)
 8000ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_DMA_Init+0x5c>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_DMA_Init+0x5c>)
 8000bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	200c      	movs	r0, #12
 8000bc2:	f000 fdf4 	bl	80017ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f000 fe0b 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	200d      	movs	r0, #13
 8000bd2:	f000 fdec 	bl	80017ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000bd6:	200d      	movs	r0, #13
 8000bd8:	f000 fe03 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	200f      	movs	r0, #15
 8000be2:	f000 fde4 	bl	80017ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f000 fdfb 	bl	80017e2 <HAL_NVIC_EnableIRQ>

}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	; 0x30
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b67      	ldr	r3, [pc, #412]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	4a65      	ldr	r2, [pc, #404]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1e:	4b63      	ldr	r3, [pc, #396]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2c:	4b5f      	ldr	r3, [pc, #380]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	4a5e      	ldr	r2, [pc, #376]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3c:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b58      	ldr	r3, [pc, #352]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	4a56      	ldr	r2, [pc, #344]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5a:	4b54      	ldr	r3, [pc, #336]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c68:	4b50      	ldr	r3, [pc, #320]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	4a4f      	ldr	r2, [pc, #316]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c78:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b49      	ldr	r3, [pc, #292]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a47      	ldr	r2, [pc, #284]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b45      	ldr	r3, [pc, #276]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca4:	4b41      	ldr	r3, [pc, #260]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	4a40      	ldr	r2, [pc, #256]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb4:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc2:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	4a38      	ldr	r2, [pc, #224]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd2:	4b36      	ldr	r3, [pc, #216]	; (8000dac <MX_GPIO_Init+0x1b4>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 8000ce6:	4832      	ldr	r0, [pc, #200]	; (8000db0 <MX_GPIO_Init+0x1b8>)
 8000ce8:	f003 fd90 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf2:	4830      	ldr	r0, [pc, #192]	; (8000db4 <MX_GPIO_Init+0x1bc>)
 8000cf4:	f003 fd8a 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfe:	482e      	ldr	r0, [pc, #184]	; (8000db8 <MX_GPIO_Init+0x1c0>)
 8000d00:	f003 fd84 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0a:	482c      	ldr	r0, [pc, #176]	; (8000dbc <MX_GPIO_Init+0x1c4>)
 8000d0c:	f003 fd7e 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8000d10:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4821      	ldr	r0, [pc, #132]	; (8000db0 <MX_GPIO_Init+0x1b8>)
 8000d2a:	f003 fbbf 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	481b      	ldr	r0, [pc, #108]	; (8000db4 <MX_GPIO_Init+0x1bc>)
 8000d48:	f003 fbb0 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4814      	ldr	r0, [pc, #80]	; (8000db8 <MX_GPIO_Init+0x1c0>)
 8000d66:	f003 fba1 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <MX_GPIO_Init+0x1c4>)
 8000d80:	f003 fb94 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <MX_GPIO_Init+0x1c4>)
 8000d9e:	f003 fb85 	bl	80044ac <HAL_GPIO_Init>

}
 8000da2:	bf00      	nop
 8000da4:	3730      	adds	r7, #48	; 0x30
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58024400 	.word	0x58024400
 8000db0:	58021000 	.word	0x58021000
 8000db4:	58020400 	.word	0x58020400
 8000db8:	58020c00 	.word	0x58020c00
 8000dbc:	58021800 	.word	0x58021800

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x8>
	...

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_MspInit+0x30>)
 8000dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd8:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_MspInit+0x30>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_MspInit+0x30>)
 8000de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	58024400 	.word	0x58024400

08000e00 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	; 0x38
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a59      	ldr	r2, [pc, #356]	; (8000f84 <HAL_ETH_MspInit+0x184>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	f040 80ab 	bne.w	8000f7a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e24:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2a:	4a57      	ldr	r2, [pc, #348]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e30:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e3e:	623b      	str	r3, [r7, #32]
 8000e40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e42:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e48:	4a4f      	ldr	r2, [pc, #316]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e52:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e60:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e66:	4a48      	ldr	r2, [pc, #288]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e70:	4b45      	ldr	r3, [pc, #276]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	4a40      	ldr	r2, [pc, #256]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8e:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	4a39      	ldr	r2, [pc, #228]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eac:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	4a2a      	ldr	r2, [pc, #168]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_ETH_MspInit+0x188>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ef6:	2332      	movs	r3, #50	; 0x32
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f06:	230b      	movs	r3, #11
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481e      	ldr	r0, [pc, #120]	; (8000f8c <HAL_ETH_MspInit+0x18c>)
 8000f12:	f003 facb 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f16:	2386      	movs	r3, #134	; 0x86
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f26:	230b      	movs	r3, #11
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4817      	ldr	r0, [pc, #92]	; (8000f90 <HAL_ETH_MspInit+0x190>)
 8000f32:	f003 fabb 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f48:	230b      	movs	r3, #11
 8000f4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4810      	ldr	r0, [pc, #64]	; (8000f94 <HAL_ETH_MspInit+0x194>)
 8000f54:	f003 faaa 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <HAL_ETH_MspInit+0x198>)
 8000f76:	f003 fa99 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3738      	adds	r7, #56	; 0x38
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40028000 	.word	0x40028000
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020800 	.word	0x58020800
 8000f90:	58020000 	.word	0x58020000
 8000f94:	58020400 	.word	0x58020400
 8000f98:	58021800 	.word	0x58021800

08000f9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a45      	ldr	r2, [pc, #276]	; (80010d0 <HAL_SPI_MspInit+0x134>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	f040 8084 	bne.w	80010c8 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fc0:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <HAL_SPI_MspInit+0x138>)
 8000fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc6:	4a43      	ldr	r2, [pc, #268]	; (80010d4 <HAL_SPI_MspInit+0x138>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fd0:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <HAL_SPI_MspInit+0x138>)
 8000fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b3d      	ldr	r3, [pc, #244]	; (80010d4 <HAL_SPI_MspInit+0x138>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <HAL_SPI_MspInit+0x138>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fee:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <HAL_SPI_MspInit+0x138>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <HAL_SPI_MspInit+0x138>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a34      	ldr	r2, [pc, #208]	; (80010d4 <HAL_SPI_MspInit+0x138>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <HAL_SPI_MspInit+0x138>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3_C     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800101a:	2308      	movs	r3, #8
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800102a:	2305      	movs	r3, #5
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <HAL_SPI_MspInit+0x13c>)
 8001036:	f003 fa39 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800103a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800104c:	2305      	movs	r3, #5
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4821      	ldr	r0, [pc, #132]	; (80010dc <HAL_SPI_MspInit+0x140>)
 8001058:	f003 fa28 	bl	80044ac <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream2;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 800105e:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <HAL_SPI_MspInit+0x148>)
 8001060:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 8001064:	2228      	movs	r2, #40	; 0x28
 8001066:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 800106a:	2240      	movs	r2, #64	; 0x40
 800106c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 8001076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 800108a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800109c:	4810      	ldr	r0, [pc, #64]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 800109e:	f000 fbbb 	bl	8001818 <HAL_DMA_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 80010a8:	f7ff fe8a 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 80010b0:	679a      	str	r2, [r3, #120]	; 0x78
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <HAL_SPI_MspInit+0x144>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2024      	movs	r0, #36	; 0x24
 80010be:	f000 fb76 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010c2:	2024      	movs	r0, #36	; 0x24
 80010c4:	f000 fb8d 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40003800 	.word	0x40003800
 80010d4:	58024400 	.word	0x58024400
 80010d8:	58020800 	.word	0x58020800
 80010dc:	58020400 	.word	0x58020400
 80010e0:	2400025c 	.word	0x2400025c
 80010e4:	40020040 	.word	0x40020040

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0b8      	sub	sp, #224	; 0xe0
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	22bc      	movs	r2, #188	; 0xbc
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f008 fca7 	bl	8009a5c <memset>
  if(huart->Instance==USART3)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a57      	ldr	r2, [pc, #348]	; (8001270 <HAL_UART_MspInit+0x188>)
 8001114:	4293      	cmp	r3, r2
 8001116:	f040 80a6 	bne.w	8001266 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800111a:	2302      	movs	r3, #2
 800111c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4618      	mov	r0, r3
 800112a:	f004 fd3d 	bl	8005ba8 <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001134:	f7ff fe44 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001138:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <HAL_UART_MspInit+0x18c>)
 800113a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113e:	4a4d      	ldr	r2, [pc, #308]	; (8001274 <HAL_UART_MspInit+0x18c>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001144:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001148:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <HAL_UART_MspInit+0x18c>)
 800114a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800114e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	4b47      	ldr	r3, [pc, #284]	; (8001274 <HAL_UART_MspInit+0x18c>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	4a45      	ldr	r2, [pc, #276]	; (8001274 <HAL_UART_MspInit+0x18c>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <HAL_UART_MspInit+0x18c>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001174:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001178:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800118e:	2307      	movs	r3, #7
 8001190:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001194:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001198:	4619      	mov	r1, r3
 800119a:	4837      	ldr	r0, [pc, #220]	; (8001278 <HAL_UART_MspInit+0x190>)
 800119c:	f003 f986 	bl	80044ac <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <HAL_UART_MspInit+0x194>)
 80011a2:	4a37      	ldr	r2, [pc, #220]	; (8001280 <HAL_UART_MspInit+0x198>)
 80011a4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <HAL_UART_MspInit+0x194>)
 80011a8:	222d      	movs	r2, #45	; 0x2d
 80011aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <HAL_UART_MspInit+0x194>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b2:	4b32      	ldr	r3, [pc, #200]	; (800127c <HAL_UART_MspInit+0x194>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_UART_MspInit+0x194>)
 80011ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011be:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c0:	4b2e      	ldr	r3, [pc, #184]	; (800127c <HAL_UART_MspInit+0x194>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_UART_MspInit+0x194>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <HAL_UART_MspInit+0x194>)
 80011ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <HAL_UART_MspInit+0x194>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <HAL_UART_MspInit+0x194>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80011e0:	4826      	ldr	r0, [pc, #152]	; (800127c <HAL_UART_MspInit+0x194>)
 80011e2:	f000 fb19 	bl	8001818 <HAL_DMA_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80011ec:	f7ff fde8 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <HAL_UART_MspInit+0x194>)
 80011f4:	67da      	str	r2, [r3, #124]	; 0x7c
 80011f6:	4a21      	ldr	r2, [pc, #132]	; (800127c <HAL_UART_MspInit+0x194>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <HAL_UART_MspInit+0x19c>)
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <HAL_UART_MspInit+0x1a0>)
 8001200:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_UART_MspInit+0x19c>)
 8001204:	222e      	movs	r2, #46	; 0x2e
 8001206:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_UART_MspInit+0x19c>)
 800120a:	2240      	movs	r2, #64	; 0x40
 800120c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_UART_MspInit+0x19c>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_UART_MspInit+0x19c>)
 8001216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_UART_MspInit+0x19c>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_UART_MspInit+0x19c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_UART_MspInit+0x19c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_UART_MspInit+0x19c>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_UART_MspInit+0x19c>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800123a:	4812      	ldr	r0, [pc, #72]	; (8001284 <HAL_UART_MspInit+0x19c>)
 800123c:	f000 faec 	bl	8001818 <HAL_DMA_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001246:	f7ff fdbb 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <HAL_UART_MspInit+0x19c>)
 800124e:	679a      	str	r2, [r3, #120]	; 0x78
 8001250:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <HAL_UART_MspInit+0x19c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2027      	movs	r0, #39	; 0x27
 800125c:	f000 faa7 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001260:	2027      	movs	r0, #39	; 0x27
 8001262:	f000 fabe 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	37e0      	adds	r7, #224	; 0xe0
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40004800 	.word	0x40004800
 8001274:	58024400 	.word	0x58024400
 8001278:	58020c00 	.word	0x58020c00
 800127c:	24000364 	.word	0x24000364
 8001280:	40020028 	.word	0x40020028
 8001284:	240003dc 	.word	0x240003dc
 8001288:	40020070 	.word	0x40020070

0800128c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a22      	ldr	r2, [pc, #136]	; (8001334 <HAL_PCD_MspInit+0xa8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d13d      	bne.n	800132a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012ae:	f003 fcb1 	bl	8004c14 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_PCD_MspInit+0xac>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_PCD_MspInit+0xac>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_PCD_MspInit+0xac>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012d0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012e2:	230a      	movs	r3, #10
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <HAL_PCD_MspInit+0xb0>)
 80012ee:	f003 f8dd 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <HAL_PCD_MspInit+0xb0>)
 8001308:	f003 f8d0 	bl	80044ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_PCD_MspInit+0xac>)
 800130e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_PCD_MspInit+0xac>)
 8001314:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001318:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_PCD_MspInit+0xac>)
 800131e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40080000 	.word	0x40080000
 8001338:	58024400 	.word	0x58024400
 800133c:	58020000 	.word	0x58020000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f8d0 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <DMA1_Stream1_IRQHandler+0x10>)
 800139a:	f001 fafd 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	24000364 	.word	0x24000364

080013a8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA1_Stream2_IRQHandler+0x10>)
 80013ae:	f001 faf3 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2400025c 	.word	0x2400025c

080013bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <DMA1_Stream4_IRQHandler+0x10>)
 80013c2:	f001 fae9 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	240003dc 	.word	0x240003dc

080013d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <SPI2_IRQHandler+0x10>)
 80013d6:	f006 f855 	bl	8007484 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	240001d4 	.word	0x240001d4

080013e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <USART3_IRQHandler+0x10>)
 80013ea:	f006 fb65 	bl	8007ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	240002d4 	.word	0x240002d4

080013f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001430 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013fc:	f7ff f8ee 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001402:	490d      	ldr	r1, [pc, #52]	; (8001438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001418:	4c0a      	ldr	r4, [pc, #40]	; (8001444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001426:	f008 faf5 	bl	8009a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142a:	f7ff f96d 	bl	8000708 <main>
  bx  lr
 800142e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001434:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001438:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800143c:	08009ad4 	.word	0x08009ad4
  ldr r2, =_sbss
 8001440:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001444:	24000970 	.word	0x24000970

08001448 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC3_IRQHandler>
	...

0800144c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001452:	2003      	movs	r0, #3
 8001454:	f000 f9a0 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001458:	f004 f9d0 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_Init+0x68>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	4913      	ldr	r1, [pc, #76]	; (80014b8 <HAL_Init+0x6c>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_Init+0x68>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_Init+0x6c>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_Init+0x70>)
 800148e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_Init+0x74>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f814 	bl	80014c4 <HAL_InitTick>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e002      	b.n	80014ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014a6:	f7ff fc91 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	58024400 	.word	0x58024400
 80014b8:	08009a84 	.word	0x08009a84
 80014bc:	24000004 	.word	0x24000004
 80014c0:	24000000 	.word	0x24000000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_InitTick+0x60>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e021      	b.n	800151c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_InitTick+0x64>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_InitTick+0x60>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f985 	bl	80017fe <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f94f 	bl	80017ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_InitTick+0x68>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2400000c 	.word	0x2400000c
 8001528:	24000000 	.word	0x24000000
 800152c:	24000008 	.word	0x24000008

08001530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2400000c 	.word	0x2400000c
 8001554:	2400096c 	.word	0x2400096c

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2400096c 	.word	0x2400096c

08001570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff ffee 	bl	8001558 <HAL_GetTick>
 800157c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d005      	beq.n	8001596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_Delay+0x44>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001596:	bf00      	nop
 8001598:	f7ff ffde 	bl	8001558 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d8f7      	bhi.n	8001598 <HAL_Delay+0x28>
  {
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2400000c 	.word	0x2400000c

080015b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_GetREVID+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0c1b      	lsrs	r3, r3, #16
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	5c001000 	.word	0x5c001000

080015d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015e0:	4904      	ldr	r1, [pc, #16]	; (80015f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	58000400 	.word	0x58000400

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <__NVIC_SetPriorityGrouping+0x40>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x40>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00
 800163c:	05fa0000 	.word	0x05fa0000

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <__NVIC_EnableIRQ+0x38>)
 8001676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4313      	orrs	r3, r2
         );
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f7ff ff8e 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff29 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff40 	bl	8001640 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff90 	bl	80016ec <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5f 	bl	8001698 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff33 	bl	800165c <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffa4 	bl	8001754 <SysTick_Config>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff fe9a 	bl	8001558 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e316      	b.n	8001e5e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a66      	ldr	r2, [pc, #408]	; (80019d0 <HAL_DMA_Init+0x1b8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d04a      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a65      	ldr	r2, [pc, #404]	; (80019d4 <HAL_DMA_Init+0x1bc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d045      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a63      	ldr	r2, [pc, #396]	; (80019d8 <HAL_DMA_Init+0x1c0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d040      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a62      	ldr	r2, [pc, #392]	; (80019dc <HAL_DMA_Init+0x1c4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d03b      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a60      	ldr	r2, [pc, #384]	; (80019e0 <HAL_DMA_Init+0x1c8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d036      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a5f      	ldr	r2, [pc, #380]	; (80019e4 <HAL_DMA_Init+0x1cc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d031      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a5d      	ldr	r2, [pc, #372]	; (80019e8 <HAL_DMA_Init+0x1d0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d02c      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a5c      	ldr	r2, [pc, #368]	; (80019ec <HAL_DMA_Init+0x1d4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d027      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a5a      	ldr	r2, [pc, #360]	; (80019f0 <HAL_DMA_Init+0x1d8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d022      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a59      	ldr	r2, [pc, #356]	; (80019f4 <HAL_DMA_Init+0x1dc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d01d      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a57      	ldr	r2, [pc, #348]	; (80019f8 <HAL_DMA_Init+0x1e0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d018      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a56      	ldr	r2, [pc, #344]	; (80019fc <HAL_DMA_Init+0x1e4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d013      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a54      	ldr	r2, [pc, #336]	; (8001a00 <HAL_DMA_Init+0x1e8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00e      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a53      	ldr	r2, [pc, #332]	; (8001a04 <HAL_DMA_Init+0x1ec>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d009      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a51      	ldr	r2, [pc, #324]	; (8001a08 <HAL_DMA_Init+0x1f0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d004      	beq.n	80018d0 <HAL_DMA_Init+0xb8>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a50      	ldr	r2, [pc, #320]	; (8001a0c <HAL_DMA_Init+0x1f4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d101      	bne.n	80018d4 <HAL_DMA_Init+0xbc>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_DMA_Init+0xbe>
 80018d4:	2300      	movs	r3, #0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 813b 	beq.w	8001b52 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a37      	ldr	r2, [pc, #220]	; (80019d0 <HAL_DMA_Init+0x1b8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d04a      	beq.n	800198c <HAL_DMA_Init+0x174>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a36      	ldr	r2, [pc, #216]	; (80019d4 <HAL_DMA_Init+0x1bc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d045      	beq.n	800198c <HAL_DMA_Init+0x174>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <HAL_DMA_Init+0x1c0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d040      	beq.n	800198c <HAL_DMA_Init+0x174>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a33      	ldr	r2, [pc, #204]	; (80019dc <HAL_DMA_Init+0x1c4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d03b      	beq.n	800198c <HAL_DMA_Init+0x174>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a31      	ldr	r2, [pc, #196]	; (80019e0 <HAL_DMA_Init+0x1c8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d036      	beq.n	800198c <HAL_DMA_Init+0x174>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a30      	ldr	r2, [pc, #192]	; (80019e4 <HAL_DMA_Init+0x1cc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d031      	beq.n	800198c <HAL_DMA_Init+0x174>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <HAL_DMA_Init+0x1d0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d02c      	beq.n	800198c <HAL_DMA_Init+0x174>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a2d      	ldr	r2, [pc, #180]	; (80019ec <HAL_DMA_Init+0x1d4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d027      	beq.n	800198c <HAL_DMA_Init+0x174>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2b      	ldr	r2, [pc, #172]	; (80019f0 <HAL_DMA_Init+0x1d8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d022      	beq.n	800198c <HAL_DMA_Init+0x174>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <HAL_DMA_Init+0x1dc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d01d      	beq.n	800198c <HAL_DMA_Init+0x174>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <HAL_DMA_Init+0x1e0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d018      	beq.n	800198c <HAL_DMA_Init+0x174>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a27      	ldr	r2, [pc, #156]	; (80019fc <HAL_DMA_Init+0x1e4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_DMA_Init+0x174>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <HAL_DMA_Init+0x1e8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00e      	beq.n	800198c <HAL_DMA_Init+0x174>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <HAL_DMA_Init+0x1ec>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d009      	beq.n	800198c <HAL_DMA_Init+0x174>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <HAL_DMA_Init+0x1f0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d004      	beq.n	800198c <HAL_DMA_Init+0x174>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <HAL_DMA_Init+0x1f4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d108      	bne.n	800199e <HAL_DMA_Init+0x186>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e007      	b.n	80019ae <HAL_DMA_Init+0x196>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019ae:	e02f      	b.n	8001a10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b0:	f7ff fdd2 	bl	8001558 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d928      	bls.n	8001a10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2203      	movs	r2, #3
 80019c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e246      	b.n	8001e5e <HAL_DMA_Init+0x646>
 80019d0:	40020010 	.word	0x40020010
 80019d4:	40020028 	.word	0x40020028
 80019d8:	40020040 	.word	0x40020040
 80019dc:	40020058 	.word	0x40020058
 80019e0:	40020070 	.word	0x40020070
 80019e4:	40020088 	.word	0x40020088
 80019e8:	400200a0 	.word	0x400200a0
 80019ec:	400200b8 	.word	0x400200b8
 80019f0:	40020410 	.word	0x40020410
 80019f4:	40020428 	.word	0x40020428
 80019f8:	40020440 	.word	0x40020440
 80019fc:	40020458 	.word	0x40020458
 8001a00:	40020470 	.word	0x40020470
 8001a04:	40020488 	.word	0x40020488
 8001a08:	400204a0 	.word	0x400204a0
 8001a0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1c8      	bne.n	80019b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4b83      	ldr	r3, [pc, #524]	; (8001c38 <HAL_DMA_Init+0x420>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d107      	bne.n	8001a74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a74:	4b71      	ldr	r3, [pc, #452]	; (8001c3c <HAL_DMA_Init+0x424>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b71      	ldr	r3, [pc, #452]	; (8001c40 <HAL_DMA_Init+0x428>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a80:	d328      	bcc.n	8001ad4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b28      	cmp	r3, #40	; 0x28
 8001a88:	d903      	bls.n	8001a92 <HAL_DMA_Init+0x27a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8001a90:	d917      	bls.n	8001ac2 <HAL_DMA_Init+0x2aa>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b3e      	cmp	r3, #62	; 0x3e
 8001a98:	d903      	bls.n	8001aa2 <HAL_DMA_Init+0x28a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b42      	cmp	r3, #66	; 0x42
 8001aa0:	d90f      	bls.n	8001ac2 <HAL_DMA_Init+0x2aa>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b46      	cmp	r3, #70	; 0x46
 8001aa8:	d903      	bls.n	8001ab2 <HAL_DMA_Init+0x29a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b48      	cmp	r3, #72	; 0x48
 8001ab0:	d907      	bls.n	8001ac2 <HAL_DMA_Init+0x2aa>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b4e      	cmp	r3, #78	; 0x4e
 8001ab8:	d905      	bls.n	8001ac6 <HAL_DMA_Init+0x2ae>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b52      	cmp	r3, #82	; 0x52
 8001ac0:	d801      	bhi.n	8001ac6 <HAL_DMA_Init+0x2ae>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_DMA_Init+0x2b0>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ad2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f023 0307 	bic.w	r3, r3, #7
 8001aea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d117      	bne.n	8001b2e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00e      	beq.n	8001b2e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f001 ff1d 	bl	8003950 <DMA_CheckFifoParam>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2240      	movs	r2, #64	; 0x40
 8001b20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e197      	b.n	8001e5e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f001 fe58 	bl	80037ec <DMA_CalcBaseAndBitshift>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	223f      	movs	r2, #63	; 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	e0cd      	b.n	8001cee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <HAL_DMA_Init+0x42c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d022      	beq.n	8001ba2 <HAL_DMA_Init+0x38a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a39      	ldr	r2, [pc, #228]	; (8001c48 <HAL_DMA_Init+0x430>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d01d      	beq.n	8001ba2 <HAL_DMA_Init+0x38a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a38      	ldr	r2, [pc, #224]	; (8001c4c <HAL_DMA_Init+0x434>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d018      	beq.n	8001ba2 <HAL_DMA_Init+0x38a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <HAL_DMA_Init+0x438>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_DMA_Init+0x38a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a35      	ldr	r2, [pc, #212]	; (8001c54 <HAL_DMA_Init+0x43c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00e      	beq.n	8001ba2 <HAL_DMA_Init+0x38a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a33      	ldr	r2, [pc, #204]	; (8001c58 <HAL_DMA_Init+0x440>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d009      	beq.n	8001ba2 <HAL_DMA_Init+0x38a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a32      	ldr	r2, [pc, #200]	; (8001c5c <HAL_DMA_Init+0x444>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d004      	beq.n	8001ba2 <HAL_DMA_Init+0x38a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a30      	ldr	r2, [pc, #192]	; (8001c60 <HAL_DMA_Init+0x448>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_DMA_Init+0x38e>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_DMA_Init+0x390>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 8097 	beq.w	8001cdc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <HAL_DMA_Init+0x42c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d021      	beq.n	8001bfc <HAL_DMA_Init+0x3e4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a22      	ldr	r2, [pc, #136]	; (8001c48 <HAL_DMA_Init+0x430>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01c      	beq.n	8001bfc <HAL_DMA_Init+0x3e4>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a21      	ldr	r2, [pc, #132]	; (8001c4c <HAL_DMA_Init+0x434>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d017      	beq.n	8001bfc <HAL_DMA_Init+0x3e4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_DMA_Init+0x438>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d012      	beq.n	8001bfc <HAL_DMA_Init+0x3e4>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_DMA_Init+0x43c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00d      	beq.n	8001bfc <HAL_DMA_Init+0x3e4>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_DMA_Init+0x440>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d008      	beq.n	8001bfc <HAL_DMA_Init+0x3e4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_DMA_Init+0x444>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d003      	beq.n	8001bfc <HAL_DMA_Init+0x3e4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_DMA_Init+0x448>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_DMA_Init+0x44c>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b40      	cmp	r3, #64	; 0x40
 8001c24:	d020      	beq.n	8001c68 <HAL_DMA_Init+0x450>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b80      	cmp	r3, #128	; 0x80
 8001c2c:	d102      	bne.n	8001c34 <HAL_DMA_Init+0x41c>
 8001c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c32:	e01a      	b.n	8001c6a <HAL_DMA_Init+0x452>
 8001c34:	2300      	movs	r3, #0
 8001c36:	e018      	b.n	8001c6a <HAL_DMA_Init+0x452>
 8001c38:	fe10803f 	.word	0xfe10803f
 8001c3c:	5c001000 	.word	0x5c001000
 8001c40:	ffff0000 	.word	0xffff0000
 8001c44:	58025408 	.word	0x58025408
 8001c48:	5802541c 	.word	0x5802541c
 8001c4c:	58025430 	.word	0x58025430
 8001c50:	58025444 	.word	0x58025444
 8001c54:	58025458 	.word	0x58025458
 8001c58:	5802546c 	.word	0x5802546c
 8001c5c:	58025480 	.word	0x58025480
 8001c60:	58025494 	.word	0x58025494
 8001c64:	fffe000f 	.word	0xfffe000f
 8001c68:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68d2      	ldr	r2, [r2, #12]
 8001c6e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c98:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b6e      	ldr	r3, [pc, #440]	; (8001e68 <HAL_DMA_Init+0x650>)
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a6e      	ldr	r2, [pc, #440]	; (8001e6c <HAL_DMA_Init+0x654>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	009a      	lsls	r2, r3, #2
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 fd93 	bl	80037ec <DMA_CalcBaseAndBitshift>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	e008      	b.n	8001cee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2240      	movs	r2, #64	; 0x40
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0b7      	b.n	8001e5e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a5f      	ldr	r2, [pc, #380]	; (8001e70 <HAL_DMA_Init+0x658>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d072      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a5d      	ldr	r2, [pc, #372]	; (8001e74 <HAL_DMA_Init+0x65c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d06d      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a5c      	ldr	r2, [pc, #368]	; (8001e78 <HAL_DMA_Init+0x660>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d068      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5a      	ldr	r2, [pc, #360]	; (8001e7c <HAL_DMA_Init+0x664>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d063      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a59      	ldr	r2, [pc, #356]	; (8001e80 <HAL_DMA_Init+0x668>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d05e      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a57      	ldr	r2, [pc, #348]	; (8001e84 <HAL_DMA_Init+0x66c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d059      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_DMA_Init+0x670>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d054      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a54      	ldr	r2, [pc, #336]	; (8001e8c <HAL_DMA_Init+0x674>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d04f      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a53      	ldr	r2, [pc, #332]	; (8001e90 <HAL_DMA_Init+0x678>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d04a      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a51      	ldr	r2, [pc, #324]	; (8001e94 <HAL_DMA_Init+0x67c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d045      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a50      	ldr	r2, [pc, #320]	; (8001e98 <HAL_DMA_Init+0x680>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d040      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a4e      	ldr	r2, [pc, #312]	; (8001e9c <HAL_DMA_Init+0x684>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d03b      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a4d      	ldr	r2, [pc, #308]	; (8001ea0 <HAL_DMA_Init+0x688>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d036      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a4b      	ldr	r2, [pc, #300]	; (8001ea4 <HAL_DMA_Init+0x68c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d031      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a4a      	ldr	r2, [pc, #296]	; (8001ea8 <HAL_DMA_Init+0x690>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d02c      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_DMA_Init+0x694>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d027      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a47      	ldr	r2, [pc, #284]	; (8001eb0 <HAL_DMA_Init+0x698>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d022      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a45      	ldr	r2, [pc, #276]	; (8001eb4 <HAL_DMA_Init+0x69c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01d      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a44      	ldr	r2, [pc, #272]	; (8001eb8 <HAL_DMA_Init+0x6a0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d018      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a42      	ldr	r2, [pc, #264]	; (8001ebc <HAL_DMA_Init+0x6a4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a41      	ldr	r2, [pc, #260]	; (8001ec0 <HAL_DMA_Init+0x6a8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00e      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a3f      	ldr	r2, [pc, #252]	; (8001ec4 <HAL_DMA_Init+0x6ac>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d009      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a3e      	ldr	r2, [pc, #248]	; (8001ec8 <HAL_DMA_Init+0x6b0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d004      	beq.n	8001dde <HAL_DMA_Init+0x5c6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a3c      	ldr	r2, [pc, #240]	; (8001ecc <HAL_DMA_Init+0x6b4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_DMA_Init+0x5ca>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_DMA_Init+0x5cc>
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d032      	beq.n	8001e4e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f001 fe2d 	bl	8003a48 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b80      	cmp	r3, #128	; 0x80
 8001df4:	d102      	bne.n	8001dfc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <HAL_DMA_Init+0x624>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d80c      	bhi.n	8001e3c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f001 feaa 	bl	8003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	e008      	b.n	8001e4e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	a7fdabf8 	.word	0xa7fdabf8
 8001e6c:	cccccccd 	.word	0xcccccccd
 8001e70:	40020010 	.word	0x40020010
 8001e74:	40020028 	.word	0x40020028
 8001e78:	40020040 	.word	0x40020040
 8001e7c:	40020058 	.word	0x40020058
 8001e80:	40020070 	.word	0x40020070
 8001e84:	40020088 	.word	0x40020088
 8001e88:	400200a0 	.word	0x400200a0
 8001e8c:	400200b8 	.word	0x400200b8
 8001e90:	40020410 	.word	0x40020410
 8001e94:	40020428 	.word	0x40020428
 8001e98:	40020440 	.word	0x40020440
 8001e9c:	40020458 	.word	0x40020458
 8001ea0:	40020470 	.word	0x40020470
 8001ea4:	40020488 	.word	0x40020488
 8001ea8:	400204a0 	.word	0x400204a0
 8001eac:	400204b8 	.word	0x400204b8
 8001eb0:	58025408 	.word	0x58025408
 8001eb4:	5802541c 	.word	0x5802541c
 8001eb8:	58025430 	.word	0x58025430
 8001ebc:	58025444 	.word	0x58025444
 8001ec0:	58025458 	.word	0x58025458
 8001ec4:	5802546c 	.word	0x5802546c
 8001ec8:	58025480 	.word	0x58025480
 8001ecc:	58025494 	.word	0x58025494

08001ed0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fb3e 	bl	8001558 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e2dc      	b.n	80024a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d008      	beq.n	8001f06 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e2cd      	b.n	80024a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a76      	ldr	r2, [pc, #472]	; (80020e4 <HAL_DMA_Abort+0x214>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d04a      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a74      	ldr	r2, [pc, #464]	; (80020e8 <HAL_DMA_Abort+0x218>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d045      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a73      	ldr	r2, [pc, #460]	; (80020ec <HAL_DMA_Abort+0x21c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d040      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a71      	ldr	r2, [pc, #452]	; (80020f0 <HAL_DMA_Abort+0x220>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d03b      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a70      	ldr	r2, [pc, #448]	; (80020f4 <HAL_DMA_Abort+0x224>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d036      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a6e      	ldr	r2, [pc, #440]	; (80020f8 <HAL_DMA_Abort+0x228>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d031      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6d      	ldr	r2, [pc, #436]	; (80020fc <HAL_DMA_Abort+0x22c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d02c      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6b      	ldr	r2, [pc, #428]	; (8002100 <HAL_DMA_Abort+0x230>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d027      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6a      	ldr	r2, [pc, #424]	; (8002104 <HAL_DMA_Abort+0x234>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d022      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a68      	ldr	r2, [pc, #416]	; (8002108 <HAL_DMA_Abort+0x238>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01d      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a67      	ldr	r2, [pc, #412]	; (800210c <HAL_DMA_Abort+0x23c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d018      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a65      	ldr	r2, [pc, #404]	; (8002110 <HAL_DMA_Abort+0x240>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a64      	ldr	r2, [pc, #400]	; (8002114 <HAL_DMA_Abort+0x244>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00e      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a62      	ldr	r2, [pc, #392]	; (8002118 <HAL_DMA_Abort+0x248>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d009      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a61      	ldr	r2, [pc, #388]	; (800211c <HAL_DMA_Abort+0x24c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d004      	beq.n	8001fa6 <HAL_DMA_Abort+0xd6>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a5f      	ldr	r2, [pc, #380]	; (8002120 <HAL_DMA_Abort+0x250>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_DMA_Abort+0xda>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_DMA_Abort+0xdc>
 8001faa:	2300      	movs	r3, #0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 021e 	bic.w	r2, r2, #30
 8001fbe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e00a      	b.n	8001fee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 020e 	bic.w	r2, r2, #14
 8001fe6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a3c      	ldr	r2, [pc, #240]	; (80020e4 <HAL_DMA_Abort+0x214>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d072      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a3a      	ldr	r2, [pc, #232]	; (80020e8 <HAL_DMA_Abort+0x218>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d06d      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a39      	ldr	r2, [pc, #228]	; (80020ec <HAL_DMA_Abort+0x21c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d068      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a37      	ldr	r2, [pc, #220]	; (80020f0 <HAL_DMA_Abort+0x220>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d063      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a36      	ldr	r2, [pc, #216]	; (80020f4 <HAL_DMA_Abort+0x224>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d05e      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <HAL_DMA_Abort+0x228>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d059      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a33      	ldr	r2, [pc, #204]	; (80020fc <HAL_DMA_Abort+0x22c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d054      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a31      	ldr	r2, [pc, #196]	; (8002100 <HAL_DMA_Abort+0x230>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d04f      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a30      	ldr	r2, [pc, #192]	; (8002104 <HAL_DMA_Abort+0x234>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d04a      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a2e      	ldr	r2, [pc, #184]	; (8002108 <HAL_DMA_Abort+0x238>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d045      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2d      	ldr	r2, [pc, #180]	; (800210c <HAL_DMA_Abort+0x23c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d040      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a2b      	ldr	r2, [pc, #172]	; (8002110 <HAL_DMA_Abort+0x240>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d03b      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <HAL_DMA_Abort+0x244>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d036      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a28      	ldr	r2, [pc, #160]	; (8002118 <HAL_DMA_Abort+0x248>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d031      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_DMA_Abort+0x24c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d02c      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <HAL_DMA_Abort+0x250>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d027      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a24      	ldr	r2, [pc, #144]	; (8002124 <HAL_DMA_Abort+0x254>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d022      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a22      	ldr	r2, [pc, #136]	; (8002128 <HAL_DMA_Abort+0x258>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01d      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a21      	ldr	r2, [pc, #132]	; (800212c <HAL_DMA_Abort+0x25c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d018      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_DMA_Abort+0x260>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_DMA_Abort+0x264>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00e      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_DMA_Abort+0x268>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d009      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_DMA_Abort+0x26c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d004      	beq.n	80020de <HAL_DMA_Abort+0x20e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a19      	ldr	r2, [pc, #100]	; (8002140 <HAL_DMA_Abort+0x270>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d132      	bne.n	8002144 <HAL_DMA_Abort+0x274>
 80020de:	2301      	movs	r3, #1
 80020e0:	e031      	b.n	8002146 <HAL_DMA_Abort+0x276>
 80020e2:	bf00      	nop
 80020e4:	40020010 	.word	0x40020010
 80020e8:	40020028 	.word	0x40020028
 80020ec:	40020040 	.word	0x40020040
 80020f0:	40020058 	.word	0x40020058
 80020f4:	40020070 	.word	0x40020070
 80020f8:	40020088 	.word	0x40020088
 80020fc:	400200a0 	.word	0x400200a0
 8002100:	400200b8 	.word	0x400200b8
 8002104:	40020410 	.word	0x40020410
 8002108:	40020428 	.word	0x40020428
 800210c:	40020440 	.word	0x40020440
 8002110:	40020458 	.word	0x40020458
 8002114:	40020470 	.word	0x40020470
 8002118:	40020488 	.word	0x40020488
 800211c:	400204a0 	.word	0x400204a0
 8002120:	400204b8 	.word	0x400204b8
 8002124:	58025408 	.word	0x58025408
 8002128:	5802541c 	.word	0x5802541c
 800212c:	58025430 	.word	0x58025430
 8002130:	58025444 	.word	0x58025444
 8002134:	58025458 	.word	0x58025458
 8002138:	5802546c 	.word	0x5802546c
 800213c:	58025480 	.word	0x58025480
 8002140:	58025494 	.word	0x58025494
 8002144:	2300      	movs	r3, #0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002158:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6d      	ldr	r2, [pc, #436]	; (8002314 <HAL_DMA_Abort+0x444>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d04a      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a6b      	ldr	r2, [pc, #428]	; (8002318 <HAL_DMA_Abort+0x448>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d045      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_DMA_Abort+0x44c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d040      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a68      	ldr	r2, [pc, #416]	; (8002320 <HAL_DMA_Abort+0x450>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d03b      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a67      	ldr	r2, [pc, #412]	; (8002324 <HAL_DMA_Abort+0x454>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d036      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a65      	ldr	r2, [pc, #404]	; (8002328 <HAL_DMA_Abort+0x458>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d031      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a64      	ldr	r2, [pc, #400]	; (800232c <HAL_DMA_Abort+0x45c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d02c      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a62      	ldr	r2, [pc, #392]	; (8002330 <HAL_DMA_Abort+0x460>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d027      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a61      	ldr	r2, [pc, #388]	; (8002334 <HAL_DMA_Abort+0x464>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d022      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a5f      	ldr	r2, [pc, #380]	; (8002338 <HAL_DMA_Abort+0x468>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01d      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5e      	ldr	r2, [pc, #376]	; (800233c <HAL_DMA_Abort+0x46c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d018      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5c      	ldr	r2, [pc, #368]	; (8002340 <HAL_DMA_Abort+0x470>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a5b      	ldr	r2, [pc, #364]	; (8002344 <HAL_DMA_Abort+0x474>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00e      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a59      	ldr	r2, [pc, #356]	; (8002348 <HAL_DMA_Abort+0x478>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d009      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_DMA_Abort+0x47c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d004      	beq.n	80021fa <HAL_DMA_Abort+0x32a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a56      	ldr	r2, [pc, #344]	; (8002350 <HAL_DMA_Abort+0x480>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <HAL_DMA_Abort+0x33c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e007      	b.n	800221c <HAL_DMA_Abort+0x34c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800221c:	e013      	b.n	8002246 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800221e:	f7ff f99b 	bl	8001558 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b05      	cmp	r3, #5
 800222a:	d90c      	bls.n	8002246 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2203      	movs	r2, #3
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e12d      	b.n	80024a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1e5      	bne.n	800221e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <HAL_DMA_Abort+0x444>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d04a      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2d      	ldr	r2, [pc, #180]	; (8002318 <HAL_DMA_Abort+0x448>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d045      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2c      	ldr	r2, [pc, #176]	; (800231c <HAL_DMA_Abort+0x44c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d040      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <HAL_DMA_Abort+0x450>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d03b      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a29      	ldr	r2, [pc, #164]	; (8002324 <HAL_DMA_Abort+0x454>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d036      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a27      	ldr	r2, [pc, #156]	; (8002328 <HAL_DMA_Abort+0x458>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d031      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a26      	ldr	r2, [pc, #152]	; (800232c <HAL_DMA_Abort+0x45c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d02c      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a24      	ldr	r2, [pc, #144]	; (8002330 <HAL_DMA_Abort+0x460>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d027      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a23      	ldr	r2, [pc, #140]	; (8002334 <HAL_DMA_Abort+0x464>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d022      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <HAL_DMA_Abort+0x468>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01d      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_DMA_Abort+0x46c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d018      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <HAL_DMA_Abort+0x470>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_DMA_Abort+0x474>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00e      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <HAL_DMA_Abort+0x478>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d009      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <HAL_DMA_Abort+0x47c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d004      	beq.n	80022f2 <HAL_DMA_Abort+0x422>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_DMA_Abort+0x480>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d101      	bne.n	80022f6 <HAL_DMA_Abort+0x426>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_DMA_Abort+0x428>
 80022f6:	2300      	movs	r3, #0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02b      	beq.n	8002354 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	223f      	movs	r2, #63	; 0x3f
 800230c:	409a      	lsls	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	e02a      	b.n	800236a <HAL_DMA_Abort+0x49a>
 8002314:	40020010 	.word	0x40020010
 8002318:	40020028 	.word	0x40020028
 800231c:	40020040 	.word	0x40020040
 8002320:	40020058 	.word	0x40020058
 8002324:	40020070 	.word	0x40020070
 8002328:	40020088 	.word	0x40020088
 800232c:	400200a0 	.word	0x400200a0
 8002330:	400200b8 	.word	0x400200b8
 8002334:	40020410 	.word	0x40020410
 8002338:	40020428 	.word	0x40020428
 800233c:	40020440 	.word	0x40020440
 8002340:	40020458 	.word	0x40020458
 8002344:	40020470 	.word	0x40020470
 8002348:	40020488 	.word	0x40020488
 800234c:	400204a0 	.word	0x400204a0
 8002350:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2201      	movs	r2, #1
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4f      	ldr	r2, [pc, #316]	; (80024ac <HAL_DMA_Abort+0x5dc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d072      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a4d      	ldr	r2, [pc, #308]	; (80024b0 <HAL_DMA_Abort+0x5e0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d06d      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a4c      	ldr	r2, [pc, #304]	; (80024b4 <HAL_DMA_Abort+0x5e4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d068      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a4a      	ldr	r2, [pc, #296]	; (80024b8 <HAL_DMA_Abort+0x5e8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d063      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a49      	ldr	r2, [pc, #292]	; (80024bc <HAL_DMA_Abort+0x5ec>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d05e      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <HAL_DMA_Abort+0x5f0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d059      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a46      	ldr	r2, [pc, #280]	; (80024c4 <HAL_DMA_Abort+0x5f4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d054      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a44      	ldr	r2, [pc, #272]	; (80024c8 <HAL_DMA_Abort+0x5f8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d04f      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a43      	ldr	r2, [pc, #268]	; (80024cc <HAL_DMA_Abort+0x5fc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d04a      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a41      	ldr	r2, [pc, #260]	; (80024d0 <HAL_DMA_Abort+0x600>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d045      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <HAL_DMA_Abort+0x604>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d040      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a3e      	ldr	r2, [pc, #248]	; (80024d8 <HAL_DMA_Abort+0x608>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d03b      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a3d      	ldr	r2, [pc, #244]	; (80024dc <HAL_DMA_Abort+0x60c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d036      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a3b      	ldr	r2, [pc, #236]	; (80024e0 <HAL_DMA_Abort+0x610>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d031      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a3a      	ldr	r2, [pc, #232]	; (80024e4 <HAL_DMA_Abort+0x614>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d02c      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a38      	ldr	r2, [pc, #224]	; (80024e8 <HAL_DMA_Abort+0x618>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d027      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a37      	ldr	r2, [pc, #220]	; (80024ec <HAL_DMA_Abort+0x61c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d022      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a35      	ldr	r2, [pc, #212]	; (80024f0 <HAL_DMA_Abort+0x620>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01d      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a34      	ldr	r2, [pc, #208]	; (80024f4 <HAL_DMA_Abort+0x624>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d018      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a32      	ldr	r2, [pc, #200]	; (80024f8 <HAL_DMA_Abort+0x628>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a31      	ldr	r2, [pc, #196]	; (80024fc <HAL_DMA_Abort+0x62c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00e      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a2f      	ldr	r2, [pc, #188]	; (8002500 <HAL_DMA_Abort+0x630>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d009      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2e      	ldr	r2, [pc, #184]	; (8002504 <HAL_DMA_Abort+0x634>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d004      	beq.n	800245a <HAL_DMA_Abort+0x58a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <HAL_DMA_Abort+0x638>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_DMA_Abort+0x58e>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_DMA_Abort+0x590>
 800245e:	2300      	movs	r3, #0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800246c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00c      	beq.n	8002490 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002484:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800248e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40020010 	.word	0x40020010
 80024b0:	40020028 	.word	0x40020028
 80024b4:	40020040 	.word	0x40020040
 80024b8:	40020058 	.word	0x40020058
 80024bc:	40020070 	.word	0x40020070
 80024c0:	40020088 	.word	0x40020088
 80024c4:	400200a0 	.word	0x400200a0
 80024c8:	400200b8 	.word	0x400200b8
 80024cc:	40020410 	.word	0x40020410
 80024d0:	40020428 	.word	0x40020428
 80024d4:	40020440 	.word	0x40020440
 80024d8:	40020458 	.word	0x40020458
 80024dc:	40020470 	.word	0x40020470
 80024e0:	40020488 	.word	0x40020488
 80024e4:	400204a0 	.word	0x400204a0
 80024e8:	400204b8 	.word	0x400204b8
 80024ec:	58025408 	.word	0x58025408
 80024f0:	5802541c 	.word	0x5802541c
 80024f4:	58025430 	.word	0x58025430
 80024f8:	58025444 	.word	0x58025444
 80024fc:	58025458 	.word	0x58025458
 8002500:	5802546c 	.word	0x5802546c
 8002504:	58025480 	.word	0x58025480
 8002508:	58025494 	.word	0x58025494

0800250c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e237      	b.n	800298e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d004      	beq.n	8002534 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e22c      	b.n	800298e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a5c      	ldr	r2, [pc, #368]	; (80026ac <HAL_DMA_Abort_IT+0x1a0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d04a      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5b      	ldr	r2, [pc, #364]	; (80026b0 <HAL_DMA_Abort_IT+0x1a4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d045      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a59      	ldr	r2, [pc, #356]	; (80026b4 <HAL_DMA_Abort_IT+0x1a8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d040      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_DMA_Abort_IT+0x1ac>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d03b      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a56      	ldr	r2, [pc, #344]	; (80026bc <HAL_DMA_Abort_IT+0x1b0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d036      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a55      	ldr	r2, [pc, #340]	; (80026c0 <HAL_DMA_Abort_IT+0x1b4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d031      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a53      	ldr	r2, [pc, #332]	; (80026c4 <HAL_DMA_Abort_IT+0x1b8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02c      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_DMA_Abort_IT+0x1bc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d027      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a50      	ldr	r2, [pc, #320]	; (80026cc <HAL_DMA_Abort_IT+0x1c0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d022      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a4f      	ldr	r2, [pc, #316]	; (80026d0 <HAL_DMA_Abort_IT+0x1c4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d01d      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <HAL_DMA_Abort_IT+0x1c8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d018      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <HAL_DMA_Abort_IT+0x1cc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d013      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a4a      	ldr	r2, [pc, #296]	; (80026dc <HAL_DMA_Abort_IT+0x1d0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00e      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a49      	ldr	r2, [pc, #292]	; (80026e0 <HAL_DMA_Abort_IT+0x1d4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a47      	ldr	r2, [pc, #284]	; (80026e4 <HAL_DMA_Abort_IT+0x1d8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xc8>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a46      	ldr	r2, [pc, #280]	; (80026e8 <HAL_DMA_Abort_IT+0x1dc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_DMA_Abort_IT+0xcc>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_DMA_Abort_IT+0xce>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8086 	beq.w	80026ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2204      	movs	r2, #4
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a2f      	ldr	r2, [pc, #188]	; (80026ac <HAL_DMA_Abort_IT+0x1a0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d04a      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2e      	ldr	r2, [pc, #184]	; (80026b0 <HAL_DMA_Abort_IT+0x1a4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <HAL_DMA_Abort_IT+0x1a8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d040      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <HAL_DMA_Abort_IT+0x1ac>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d03b      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a29      	ldr	r2, [pc, #164]	; (80026bc <HAL_DMA_Abort_IT+0x1b0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d036      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <HAL_DMA_Abort_IT+0x1b4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d031      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a26      	ldr	r2, [pc, #152]	; (80026c4 <HAL_DMA_Abort_IT+0x1b8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a25      	ldr	r2, [pc, #148]	; (80026c8 <HAL_DMA_Abort_IT+0x1bc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d027      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a23      	ldr	r2, [pc, #140]	; (80026cc <HAL_DMA_Abort_IT+0x1c0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <HAL_DMA_Abort_IT+0x1c4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01d      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <HAL_DMA_Abort_IT+0x1c8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <HAL_DMA_Abort_IT+0x1cc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <HAL_DMA_Abort_IT+0x1d0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <HAL_DMA_Abort_IT+0x1d4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1a      	ldr	r2, [pc, #104]	; (80026e4 <HAL_DMA_Abort_IT+0x1d8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Abort_IT+0x17c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <HAL_DMA_Abort_IT+0x1dc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <HAL_DMA_Abort_IT+0x18e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e178      	b.n	800298c <HAL_DMA_Abort_IT+0x480>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e16f      	b.n	800298c <HAL_DMA_Abort_IT+0x480>
 80026ac:	40020010 	.word	0x40020010
 80026b0:	40020028 	.word	0x40020028
 80026b4:	40020040 	.word	0x40020040
 80026b8:	40020058 	.word	0x40020058
 80026bc:	40020070 	.word	0x40020070
 80026c0:	40020088 	.word	0x40020088
 80026c4:	400200a0 	.word	0x400200a0
 80026c8:	400200b8 	.word	0x400200b8
 80026cc:	40020410 	.word	0x40020410
 80026d0:	40020428 	.word	0x40020428
 80026d4:	40020440 	.word	0x40020440
 80026d8:	40020458 	.word	0x40020458
 80026dc:	40020470 	.word	0x40020470
 80026e0:	40020488 	.word	0x40020488
 80026e4:	400204a0 	.word	0x400204a0
 80026e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 020e 	bic.w	r2, r2, #14
 80026fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6c      	ldr	r2, [pc, #432]	; (80028b4 <HAL_DMA_Abort_IT+0x3a8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d04a      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6b      	ldr	r2, [pc, #428]	; (80028b8 <HAL_DMA_Abort_IT+0x3ac>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d045      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a69      	ldr	r2, [pc, #420]	; (80028bc <HAL_DMA_Abort_IT+0x3b0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d040      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a68      	ldr	r2, [pc, #416]	; (80028c0 <HAL_DMA_Abort_IT+0x3b4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d03b      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a66      	ldr	r2, [pc, #408]	; (80028c4 <HAL_DMA_Abort_IT+0x3b8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d036      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a65      	ldr	r2, [pc, #404]	; (80028c8 <HAL_DMA_Abort_IT+0x3bc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d031      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a63      	ldr	r2, [pc, #396]	; (80028cc <HAL_DMA_Abort_IT+0x3c0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02c      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a62      	ldr	r2, [pc, #392]	; (80028d0 <HAL_DMA_Abort_IT+0x3c4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d027      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a60      	ldr	r2, [pc, #384]	; (80028d4 <HAL_DMA_Abort_IT+0x3c8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d022      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5f      	ldr	r2, [pc, #380]	; (80028d8 <HAL_DMA_Abort_IT+0x3cc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d01d      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a5d      	ldr	r2, [pc, #372]	; (80028dc <HAL_DMA_Abort_IT+0x3d0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d018      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5c      	ldr	r2, [pc, #368]	; (80028e0 <HAL_DMA_Abort_IT+0x3d4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a5a      	ldr	r2, [pc, #360]	; (80028e4 <HAL_DMA_Abort_IT+0x3d8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00e      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a59      	ldr	r2, [pc, #356]	; (80028e8 <HAL_DMA_Abort_IT+0x3dc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a57      	ldr	r2, [pc, #348]	; (80028ec <HAL_DMA_Abort_IT+0x3e0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <HAL_DMA_Abort_IT+0x290>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_DMA_Abort_IT+0x3e4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d108      	bne.n	80027ae <HAL_DMA_Abort_IT+0x2a2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e007      	b.n	80027be <HAL_DMA_Abort_IT+0x2b2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a3c      	ldr	r2, [pc, #240]	; (80028b4 <HAL_DMA_Abort_IT+0x3a8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d072      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a3a      	ldr	r2, [pc, #232]	; (80028b8 <HAL_DMA_Abort_IT+0x3ac>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d06d      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a39      	ldr	r2, [pc, #228]	; (80028bc <HAL_DMA_Abort_IT+0x3b0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d068      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a37      	ldr	r2, [pc, #220]	; (80028c0 <HAL_DMA_Abort_IT+0x3b4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d063      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a36      	ldr	r2, [pc, #216]	; (80028c4 <HAL_DMA_Abort_IT+0x3b8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d05e      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a34      	ldr	r2, [pc, #208]	; (80028c8 <HAL_DMA_Abort_IT+0x3bc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d059      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a33      	ldr	r2, [pc, #204]	; (80028cc <HAL_DMA_Abort_IT+0x3c0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d054      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <HAL_DMA_Abort_IT+0x3c4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d04f      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <HAL_DMA_Abort_IT+0x3c8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d04a      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <HAL_DMA_Abort_IT+0x3cc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d045      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <HAL_DMA_Abort_IT+0x3d0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d040      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2b      	ldr	r2, [pc, #172]	; (80028e0 <HAL_DMA_Abort_IT+0x3d4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d03b      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_DMA_Abort_IT+0x3d8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d036      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <HAL_DMA_Abort_IT+0x3dc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d031      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a27      	ldr	r2, [pc, #156]	; (80028ec <HAL_DMA_Abort_IT+0x3e0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d02c      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <HAL_DMA_Abort_IT+0x3e4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d027      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a24      	ldr	r2, [pc, #144]	; (80028f4 <HAL_DMA_Abort_IT+0x3e8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d022      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <HAL_DMA_Abort_IT+0x3ec>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01d      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a21      	ldr	r2, [pc, #132]	; (80028fc <HAL_DMA_Abort_IT+0x3f0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d018      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <HAL_DMA_Abort_IT+0x3f4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1e      	ldr	r2, [pc, #120]	; (8002904 <HAL_DMA_Abort_IT+0x3f8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00e      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <HAL_DMA_Abort_IT+0x3fc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1b      	ldr	r2, [pc, #108]	; (800290c <HAL_DMA_Abort_IT+0x400>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_DMA_Abort_IT+0x3a2>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_DMA_Abort_IT+0x404>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d132      	bne.n	8002914 <HAL_DMA_Abort_IT+0x408>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e031      	b.n	8002916 <HAL_DMA_Abort_IT+0x40a>
 80028b2:	bf00      	nop
 80028b4:	40020010 	.word	0x40020010
 80028b8:	40020028 	.word	0x40020028
 80028bc:	40020040 	.word	0x40020040
 80028c0:	40020058 	.word	0x40020058
 80028c4:	40020070 	.word	0x40020070
 80028c8:	40020088 	.word	0x40020088
 80028cc:	400200a0 	.word	0x400200a0
 80028d0:	400200b8 	.word	0x400200b8
 80028d4:	40020410 	.word	0x40020410
 80028d8:	40020428 	.word	0x40020428
 80028dc:	40020440 	.word	0x40020440
 80028e0:	40020458 	.word	0x40020458
 80028e4:	40020470 	.word	0x40020470
 80028e8:	40020488 	.word	0x40020488
 80028ec:	400204a0 	.word	0x400204a0
 80028f0:	400204b8 	.word	0x400204b8
 80028f4:	58025408 	.word	0x58025408
 80028f8:	5802541c 	.word	0x5802541c
 80028fc:	58025430 	.word	0x58025430
 8002900:	58025444 	.word	0x58025444
 8002904:	58025458 	.word	0x58025458
 8002908:	5802546c 	.word	0x5802546c
 800290c:	58025480 	.word	0x58025480
 8002910:	58025494 	.word	0x58025494
 8002914:	2300      	movs	r3, #0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d028      	beq.n	800296c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002928:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	2201      	movs	r2, #1
 800293a:	409a      	lsls	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002948:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00c      	beq.n	800296c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002960:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800296a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop

08002998 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029a4:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_DMA_IRQHandler+0x1ac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <HAL_DMA_IRQHandler+0x1b0>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5f      	ldr	r2, [pc, #380]	; (8002b4c <HAL_DMA_IRQHandler+0x1b4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d04a      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5d      	ldr	r2, [pc, #372]	; (8002b50 <HAL_DMA_IRQHandler+0x1b8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d045      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <HAL_DMA_IRQHandler+0x1bc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d040      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a5a      	ldr	r2, [pc, #360]	; (8002b58 <HAL_DMA_IRQHandler+0x1c0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d03b      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a59      	ldr	r2, [pc, #356]	; (8002b5c <HAL_DMA_IRQHandler+0x1c4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d036      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a57      	ldr	r2, [pc, #348]	; (8002b60 <HAL_DMA_IRQHandler+0x1c8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d031      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a56      	ldr	r2, [pc, #344]	; (8002b64 <HAL_DMA_IRQHandler+0x1cc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d02c      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a54      	ldr	r2, [pc, #336]	; (8002b68 <HAL_DMA_IRQHandler+0x1d0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d027      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a53      	ldr	r2, [pc, #332]	; (8002b6c <HAL_DMA_IRQHandler+0x1d4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a51      	ldr	r2, [pc, #324]	; (8002b70 <HAL_DMA_IRQHandler+0x1d8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01d      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a50      	ldr	r2, [pc, #320]	; (8002b74 <HAL_DMA_IRQHandler+0x1dc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a4e      	ldr	r2, [pc, #312]	; (8002b78 <HAL_DMA_IRQHandler+0x1e0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a4d      	ldr	r2, [pc, #308]	; (8002b7c <HAL_DMA_IRQHandler+0x1e4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a4b      	ldr	r2, [pc, #300]	; (8002b80 <HAL_DMA_IRQHandler+0x1e8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a4a      	ldr	r2, [pc, #296]	; (8002b84 <HAL_DMA_IRQHandler+0x1ec>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a48      	ldr	r2, [pc, #288]	; (8002b88 <HAL_DMA_IRQHandler+0x1f0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_DMA_IRQHandler+0xd6>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_DMA_IRQHandler+0xd8>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 842b 	beq.w	80032cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2208      	movs	r2, #8
 8002a80:	409a      	lsls	r2, r3
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80a2 	beq.w	8002bd0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <HAL_DMA_IRQHandler+0x1b4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d04a      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2d      	ldr	r2, [pc, #180]	; (8002b50 <HAL_DMA_IRQHandler+0x1b8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d045      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2b      	ldr	r2, [pc, #172]	; (8002b54 <HAL_DMA_IRQHandler+0x1bc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d040      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <HAL_DMA_IRQHandler+0x1c0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d03b      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_DMA_IRQHandler+0x1c4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d036      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <HAL_DMA_IRQHandler+0x1c8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d031      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a25      	ldr	r2, [pc, #148]	; (8002b64 <HAL_DMA_IRQHandler+0x1cc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02c      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a24      	ldr	r2, [pc, #144]	; (8002b68 <HAL_DMA_IRQHandler+0x1d0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d027      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <HAL_DMA_IRQHandler+0x1d4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d022      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <HAL_DMA_IRQHandler+0x1d8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d01d      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1f      	ldr	r2, [pc, #124]	; (8002b74 <HAL_DMA_IRQHandler+0x1dc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d018      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <HAL_DMA_IRQHandler+0x1e0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_DMA_IRQHandler+0x1e4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00e      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_DMA_IRQHandler+0x1e8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_DMA_IRQHandler+0x1ec>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_DMA_IRQHandler+0x1f0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d12f      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x1f4>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e02e      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x208>
 8002b42:	bf00      	nop
 8002b44:	24000000 	.word	0x24000000
 8002b48:	1b4e81b5 	.word	0x1b4e81b5
 8002b4c:	40020010 	.word	0x40020010
 8002b50:	40020028 	.word	0x40020028
 8002b54:	40020040 	.word	0x40020040
 8002b58:	40020058 	.word	0x40020058
 8002b5c:	40020070 	.word	0x40020070
 8002b60:	40020088 	.word	0x40020088
 8002b64:	400200a0 	.word	0x400200a0
 8002b68:	400200b8 	.word	0x400200b8
 8002b6c:	40020410 	.word	0x40020410
 8002b70:	40020428 	.word	0x40020428
 8002b74:	40020440 	.word	0x40020440
 8002b78:	40020458 	.word	0x40020458
 8002b7c:	40020470 	.word	0x40020470
 8002b80:	40020488 	.word	0x40020488
 8002b84:	400204a0 	.word	0x400204a0
 8002b88:	400204b8 	.word	0x400204b8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0204 	bic.w	r2, r2, #4
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	fa22 f303 	lsr.w	r3, r2, r3
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06e      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a69      	ldr	r2, [pc, #420]	; (8002d90 <HAL_DMA_IRQHandler+0x3f8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d04a      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a67      	ldr	r2, [pc, #412]	; (8002d94 <HAL_DMA_IRQHandler+0x3fc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d045      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a66      	ldr	r2, [pc, #408]	; (8002d98 <HAL_DMA_IRQHandler+0x400>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d040      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a64      	ldr	r2, [pc, #400]	; (8002d9c <HAL_DMA_IRQHandler+0x404>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d03b      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a63      	ldr	r2, [pc, #396]	; (8002da0 <HAL_DMA_IRQHandler+0x408>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d036      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a61      	ldr	r2, [pc, #388]	; (8002da4 <HAL_DMA_IRQHandler+0x40c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d031      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a60      	ldr	r2, [pc, #384]	; (8002da8 <HAL_DMA_IRQHandler+0x410>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d02c      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a5e      	ldr	r2, [pc, #376]	; (8002dac <HAL_DMA_IRQHandler+0x414>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d027      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a5d      	ldr	r2, [pc, #372]	; (8002db0 <HAL_DMA_IRQHandler+0x418>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d022      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <HAL_DMA_IRQHandler+0x41c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01d      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a5a      	ldr	r2, [pc, #360]	; (8002db8 <HAL_DMA_IRQHandler+0x420>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d018      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_DMA_IRQHandler+0x424>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a57      	ldr	r2, [pc, #348]	; (8002dc0 <HAL_DMA_IRQHandler+0x428>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a55      	ldr	r2, [pc, #340]	; (8002dc4 <HAL_DMA_IRQHandler+0x42c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a54      	ldr	r2, [pc, #336]	; (8002dc8 <HAL_DMA_IRQHandler+0x430>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_DMA_IRQHandler+0x434>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d10a      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x304>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e003      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x30c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f043 0202 	orr.w	r2, r3, #2
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2204      	movs	r2, #4
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 808f 	beq.w	8002df8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <HAL_DMA_IRQHandler+0x3f8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d04a      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <HAL_DMA_IRQHandler+0x3fc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d045      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_DMA_IRQHandler+0x400>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d040      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a27      	ldr	r2, [pc, #156]	; (8002d9c <HAL_DMA_IRQHandler+0x404>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d03b      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <HAL_DMA_IRQHandler+0x408>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d036      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <HAL_DMA_IRQHandler+0x40c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d031      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <HAL_DMA_IRQHandler+0x410>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d02c      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a21      	ldr	r2, [pc, #132]	; (8002dac <HAL_DMA_IRQHandler+0x414>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d027      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <HAL_DMA_IRQHandler+0x418>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d022      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <HAL_DMA_IRQHandler+0x41c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01d      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_DMA_IRQHandler+0x420>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d018      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_DMA_IRQHandler+0x424>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <HAL_DMA_IRQHandler+0x428>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_DMA_IRQHandler+0x42c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <HAL_DMA_IRQHandler+0x430>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <HAL_DMA_IRQHandler+0x434>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d12a      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x438>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e023      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x440>
 8002d90:	40020010 	.word	0x40020010
 8002d94:	40020028 	.word	0x40020028
 8002d98:	40020040 	.word	0x40020040
 8002d9c:	40020058 	.word	0x40020058
 8002da0:	40020070 	.word	0x40020070
 8002da4:	40020088 	.word	0x40020088
 8002da8:	400200a0 	.word	0x400200a0
 8002dac:	400200b8 	.word	0x400200b8
 8002db0:	40020410 	.word	0x40020410
 8002db4:	40020428 	.word	0x40020428
 8002db8:	40020440 	.word	0x40020440
 8002dbc:	40020458 	.word	0x40020458
 8002dc0:	40020470 	.word	0x40020470
 8002dc4:	40020488 	.word	0x40020488
 8002dc8:	400204a0 	.word	0x400204a0
 8002dcc:	400204b8 	.word	0x400204b8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00d      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2204      	movs	r2, #4
 8002de6:	409a      	lsls	r2, r3
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f043 0204 	orr.w	r2, r3, #4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	2210      	movs	r2, #16
 8002e02:	409a      	lsls	r2, r3
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80a6 	beq.w	8002f5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a85      	ldr	r2, [pc, #532]	; (8003028 <HAL_DMA_IRQHandler+0x690>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04a      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a83      	ldr	r2, [pc, #524]	; (800302c <HAL_DMA_IRQHandler+0x694>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d045      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a82      	ldr	r2, [pc, #520]	; (8003030 <HAL_DMA_IRQHandler+0x698>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a80      	ldr	r2, [pc, #512]	; (8003034 <HAL_DMA_IRQHandler+0x69c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03b      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a7f      	ldr	r2, [pc, #508]	; (8003038 <HAL_DMA_IRQHandler+0x6a0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d036      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a7d      	ldr	r2, [pc, #500]	; (800303c <HAL_DMA_IRQHandler+0x6a4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7c      	ldr	r2, [pc, #496]	; (8003040 <HAL_DMA_IRQHandler+0x6a8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d02c      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a7a      	ldr	r2, [pc, #488]	; (8003044 <HAL_DMA_IRQHandler+0x6ac>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d027      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a79      	ldr	r2, [pc, #484]	; (8003048 <HAL_DMA_IRQHandler+0x6b0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a77      	ldr	r2, [pc, #476]	; (800304c <HAL_DMA_IRQHandler+0x6b4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a76      	ldr	r2, [pc, #472]	; (8003050 <HAL_DMA_IRQHandler+0x6b8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a74      	ldr	r2, [pc, #464]	; (8003054 <HAL_DMA_IRQHandler+0x6bc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a73      	ldr	r2, [pc, #460]	; (8003058 <HAL_DMA_IRQHandler+0x6c0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a71      	ldr	r2, [pc, #452]	; (800305c <HAL_DMA_IRQHandler+0x6c4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a70      	ldr	r2, [pc, #448]	; (8003060 <HAL_DMA_IRQHandler+0x6c8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6e      	ldr	r2, [pc, #440]	; (8003064 <HAL_DMA_IRQHandler+0x6cc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d10a      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x52c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e009      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x540>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d03e      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d018      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d108      	bne.n	8002f1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d024      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
 8002f18:	e01f      	b.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01b      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	e016      	b.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0208 	bic.w	r2, r2, #8
 8002f48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2220      	movs	r2, #32
 8002f64:	409a      	lsls	r2, r3
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8110 	beq.w	8003190 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <HAL_DMA_IRQHandler+0x690>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d04a      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2b      	ldr	r2, [pc, #172]	; (800302c <HAL_DMA_IRQHandler+0x694>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d045      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <HAL_DMA_IRQHandler+0x698>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d040      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a28      	ldr	r2, [pc, #160]	; (8003034 <HAL_DMA_IRQHandler+0x69c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d03b      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a26      	ldr	r2, [pc, #152]	; (8003038 <HAL_DMA_IRQHandler+0x6a0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d036      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a25      	ldr	r2, [pc, #148]	; (800303c <HAL_DMA_IRQHandler+0x6a4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d031      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a23      	ldr	r2, [pc, #140]	; (8003040 <HAL_DMA_IRQHandler+0x6a8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02c      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a22      	ldr	r2, [pc, #136]	; (8003044 <HAL_DMA_IRQHandler+0x6ac>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d027      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a20      	ldr	r2, [pc, #128]	; (8003048 <HAL_DMA_IRQHandler+0x6b0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d022      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1f      	ldr	r2, [pc, #124]	; (800304c <HAL_DMA_IRQHandler+0x6b4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d01d      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_DMA_IRQHandler+0x6b8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d018      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <HAL_DMA_IRQHandler+0x6bc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d013      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <HAL_DMA_IRQHandler+0x6c0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00e      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a19      	ldr	r2, [pc, #100]	; (800305c <HAL_DMA_IRQHandler+0x6c4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d009      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a17      	ldr	r2, [pc, #92]	; (8003060 <HAL_DMA_IRQHandler+0x6c8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_DMA_IRQHandler+0x6cc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d12b      	bne.n	8003068 <HAL_DMA_IRQHandler+0x6d0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	bf14      	ite	ne
 800301e:	2301      	movne	r3, #1
 8003020:	2300      	moveq	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	e02a      	b.n	800307c <HAL_DMA_IRQHandler+0x6e4>
 8003026:	bf00      	nop
 8003028:	40020010 	.word	0x40020010
 800302c:	40020028 	.word	0x40020028
 8003030:	40020040 	.word	0x40020040
 8003034:	40020058 	.word	0x40020058
 8003038:	40020070 	.word	0x40020070
 800303c:	40020088 	.word	0x40020088
 8003040:	400200a0 	.word	0x400200a0
 8003044:	400200b8 	.word	0x400200b8
 8003048:	40020410 	.word	0x40020410
 800304c:	40020428 	.word	0x40020428
 8003050:	40020440 	.word	0x40020440
 8003054:	40020458 	.word	0x40020458
 8003058:	40020470 	.word	0x40020470
 800305c:	40020488 	.word	0x40020488
 8003060:	400204a0 	.word	0x400204a0
 8003064:	400204b8 	.word	0x400204b8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8087 	beq.w	8003190 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2220      	movs	r2, #32
 800308c:	409a      	lsls	r2, r3
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b04      	cmp	r3, #4
 800309c:	d139      	bne.n	8003112 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0216 	bic.w	r2, r2, #22
 80030ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_DMA_IRQHandler+0x736>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0208 	bic.w	r2, r2, #8
 80030dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	223f      	movs	r2, #63	; 0x3f
 80030e8:	409a      	lsls	r2, r3
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 834a 	beq.w	800379c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
          }
          return;
 8003110:	e344      	b.n	800379c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d018      	beq.n	8003152 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	2b00      	cmp	r3, #0
 8003134:	d02c      	beq.n	8003190 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
 800313e:	e027      	b.n	8003190 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d023      	beq.n	8003190 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e01e      	b.n	8003190 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0210 	bic.w	r2, r2, #16
 800316e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8306 	beq.w	80037a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8088 	beq.w	80032b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2204      	movs	r2, #4
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a7a      	ldr	r2, [pc, #488]	; (80033a0 <HAL_DMA_IRQHandler+0xa08>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d04a      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a79      	ldr	r2, [pc, #484]	; (80033a4 <HAL_DMA_IRQHandler+0xa0c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d045      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a77      	ldr	r2, [pc, #476]	; (80033a8 <HAL_DMA_IRQHandler+0xa10>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d040      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a76      	ldr	r2, [pc, #472]	; (80033ac <HAL_DMA_IRQHandler+0xa14>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d03b      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a74      	ldr	r2, [pc, #464]	; (80033b0 <HAL_DMA_IRQHandler+0xa18>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d036      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a73      	ldr	r2, [pc, #460]	; (80033b4 <HAL_DMA_IRQHandler+0xa1c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d031      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a71      	ldr	r2, [pc, #452]	; (80033b8 <HAL_DMA_IRQHandler+0xa20>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d02c      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a70      	ldr	r2, [pc, #448]	; (80033bc <HAL_DMA_IRQHandler+0xa24>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d027      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6e      	ldr	r2, [pc, #440]	; (80033c0 <HAL_DMA_IRQHandler+0xa28>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6d      	ldr	r2, [pc, #436]	; (80033c4 <HAL_DMA_IRQHandler+0xa2c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01d      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a6b      	ldr	r2, [pc, #428]	; (80033c8 <HAL_DMA_IRQHandler+0xa30>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6a      	ldr	r2, [pc, #424]	; (80033cc <HAL_DMA_IRQHandler+0xa34>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <HAL_DMA_IRQHandler+0xa38>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <HAL_DMA_IRQHandler+0xa3c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a65      	ldr	r2, [pc, #404]	; (80033d8 <HAL_DMA_IRQHandler+0xa40>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a64      	ldr	r2, [pc, #400]	; (80033dc <HAL_DMA_IRQHandler+0xa44>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <HAL_DMA_IRQHandler+0x8ca>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e007      	b.n	8003272 <HAL_DMA_IRQHandler+0x8da>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3301      	adds	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327a:	429a      	cmp	r2, r3
 800327c:	d307      	bcc.n	800328e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f2      	bne.n	8003272 <HAL_DMA_IRQHandler+0x8da>
 800328c:	e000      	b.n	8003290 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800328e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2203      	movs	r2, #3
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032a6:	e003      	b.n	80032b0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8272 	beq.w	80037a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
 80032ca:	e26c      	b.n	80037a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a43      	ldr	r2, [pc, #268]	; (80033e0 <HAL_DMA_IRQHandler+0xa48>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d022      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a42      	ldr	r2, [pc, #264]	; (80033e4 <HAL_DMA_IRQHandler+0xa4c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d01d      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a40      	ldr	r2, [pc, #256]	; (80033e8 <HAL_DMA_IRQHandler+0xa50>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d018      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <HAL_DMA_IRQHandler+0xa54>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d013      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a3d      	ldr	r2, [pc, #244]	; (80033f0 <HAL_DMA_IRQHandler+0xa58>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00e      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a3c      	ldr	r2, [pc, #240]	; (80033f4 <HAL_DMA_IRQHandler+0xa5c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d009      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3a      	ldr	r2, [pc, #232]	; (80033f8 <HAL_DMA_IRQHandler+0xa60>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a39      	ldr	r2, [pc, #228]	; (80033fc <HAL_DMA_IRQHandler+0xa64>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_DMA_IRQHandler+0x988>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_DMA_IRQHandler+0x98a>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 823f 	beq.w	80037a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2204      	movs	r2, #4
 800333a:	409a      	lsls	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80cd 	beq.w	80034e0 <HAL_DMA_IRQHandler+0xb48>
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80c7 	beq.w	80034e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2204      	movs	r2, #4
 800335c:	409a      	lsls	r2, r3
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d049      	beq.n	8003400 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8210 	beq.w	80037a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003388:	e20a      	b.n	80037a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8206 	beq.w	80037a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800339c:	e200      	b.n	80037a0 <HAL_DMA_IRQHandler+0xe08>
 800339e:	bf00      	nop
 80033a0:	40020010 	.word	0x40020010
 80033a4:	40020028 	.word	0x40020028
 80033a8:	40020040 	.word	0x40020040
 80033ac:	40020058 	.word	0x40020058
 80033b0:	40020070 	.word	0x40020070
 80033b4:	40020088 	.word	0x40020088
 80033b8:	400200a0 	.word	0x400200a0
 80033bc:	400200b8 	.word	0x400200b8
 80033c0:	40020410 	.word	0x40020410
 80033c4:	40020428 	.word	0x40020428
 80033c8:	40020440 	.word	0x40020440
 80033cc:	40020458 	.word	0x40020458
 80033d0:	40020470 	.word	0x40020470
 80033d4:	40020488 	.word	0x40020488
 80033d8:	400204a0 	.word	0x400204a0
 80033dc:	400204b8 	.word	0x400204b8
 80033e0:	58025408 	.word	0x58025408
 80033e4:	5802541c 	.word	0x5802541c
 80033e8:	58025430 	.word	0x58025430
 80033ec:	58025444 	.word	0x58025444
 80033f0:	58025458 	.word	0x58025458
 80033f4:	5802546c 	.word	0x5802546c
 80033f8:	58025480 	.word	0x58025480
 80033fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d160      	bne.n	80034cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7f      	ldr	r2, [pc, #508]	; (800360c <HAL_DMA_IRQHandler+0xc74>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d04a      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a7d      	ldr	r2, [pc, #500]	; (8003610 <HAL_DMA_IRQHandler+0xc78>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d045      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7c      	ldr	r2, [pc, #496]	; (8003614 <HAL_DMA_IRQHandler+0xc7c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d040      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a7a      	ldr	r2, [pc, #488]	; (8003618 <HAL_DMA_IRQHandler+0xc80>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d03b      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a79      	ldr	r2, [pc, #484]	; (800361c <HAL_DMA_IRQHandler+0xc84>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d036      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a77      	ldr	r2, [pc, #476]	; (8003620 <HAL_DMA_IRQHandler+0xc88>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d031      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a76      	ldr	r2, [pc, #472]	; (8003624 <HAL_DMA_IRQHandler+0xc8c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d02c      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a74      	ldr	r2, [pc, #464]	; (8003628 <HAL_DMA_IRQHandler+0xc90>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d027      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a73      	ldr	r2, [pc, #460]	; (800362c <HAL_DMA_IRQHandler+0xc94>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d022      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a71      	ldr	r2, [pc, #452]	; (8003630 <HAL_DMA_IRQHandler+0xc98>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01d      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a70      	ldr	r2, [pc, #448]	; (8003634 <HAL_DMA_IRQHandler+0xc9c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d018      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a6e      	ldr	r2, [pc, #440]	; (8003638 <HAL_DMA_IRQHandler+0xca0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6d      	ldr	r2, [pc, #436]	; (800363c <HAL_DMA_IRQHandler+0xca4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00e      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a6b      	ldr	r2, [pc, #428]	; (8003640 <HAL_DMA_IRQHandler+0xca8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6a      	ldr	r2, [pc, #424]	; (8003644 <HAL_DMA_IRQHandler+0xcac>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a68      	ldr	r2, [pc, #416]	; (8003648 <HAL_DMA_IRQHandler+0xcb0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d108      	bne.n	80034bc <HAL_DMA_IRQHandler+0xb24>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0208 	bic.w	r2, r2, #8
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e007      	b.n	80034cc <HAL_DMA_IRQHandler+0xb34>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8165 	beq.w	80037a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034de:	e15f      	b.n	80037a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2202      	movs	r2, #2
 80034ea:	409a      	lsls	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80c5 	beq.w	8003680 <HAL_DMA_IRQHandler+0xce8>
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80bf 	beq.w	8003680 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	2202      	movs	r2, #2
 800350c:	409a      	lsls	r2, r3
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d018      	beq.n	800354e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 813a 	beq.w	80037a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003538:	e134      	b.n	80037a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8130 	beq.w	80037a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800354c:	e12a      	b.n	80037a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	f040 8089 	bne.w	800366c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2b      	ldr	r2, [pc, #172]	; (800360c <HAL_DMA_IRQHandler+0xc74>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d04a      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a29      	ldr	r2, [pc, #164]	; (8003610 <HAL_DMA_IRQHandler+0xc78>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d045      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a28      	ldr	r2, [pc, #160]	; (8003614 <HAL_DMA_IRQHandler+0xc7c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d040      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <HAL_DMA_IRQHandler+0xc80>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d03b      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a25      	ldr	r2, [pc, #148]	; (800361c <HAL_DMA_IRQHandler+0xc84>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d036      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a23      	ldr	r2, [pc, #140]	; (8003620 <HAL_DMA_IRQHandler+0xc88>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d031      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a22      	ldr	r2, [pc, #136]	; (8003624 <HAL_DMA_IRQHandler+0xc8c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d02c      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a20      	ldr	r2, [pc, #128]	; (8003628 <HAL_DMA_IRQHandler+0xc90>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d027      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1f      	ldr	r2, [pc, #124]	; (800362c <HAL_DMA_IRQHandler+0xc94>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d022      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <HAL_DMA_IRQHandler+0xc98>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01d      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_DMA_IRQHandler+0xc9c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d018      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_DMA_IRQHandler+0xca0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_DMA_IRQHandler+0xca4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00e      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a17      	ldr	r2, [pc, #92]	; (8003640 <HAL_DMA_IRQHandler+0xca8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d009      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_DMA_IRQHandler+0xcac>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_DMA_IRQHandler+0xcb0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d128      	bne.n	800364c <HAL_DMA_IRQHandler+0xcb4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0214 	bic.w	r2, r2, #20
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e027      	b.n	800365c <HAL_DMA_IRQHandler+0xcc4>
 800360c:	40020010 	.word	0x40020010
 8003610:	40020028 	.word	0x40020028
 8003614:	40020040 	.word	0x40020040
 8003618:	40020058 	.word	0x40020058
 800361c:	40020070 	.word	0x40020070
 8003620:	40020088 	.word	0x40020088
 8003624:	400200a0 	.word	0x400200a0
 8003628:	400200b8 	.word	0x400200b8
 800362c:	40020410 	.word	0x40020410
 8003630:	40020428 	.word	0x40020428
 8003634:	40020440 	.word	0x40020440
 8003638:	40020458 	.word	0x40020458
 800363c:	40020470 	.word	0x40020470
 8003640:	40020488 	.word	0x40020488
 8003644:	400204a0 	.word	0x400204a0
 8003648:	400204b8 	.word	0x400204b8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 020a 	bic.w	r2, r2, #10
 800365a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8097 	beq.w	80037a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800367e:	e091      	b.n	80037a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2208      	movs	r2, #8
 800368a:	409a      	lsls	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8088 	beq.w	80037a6 <HAL_DMA_IRQHandler+0xe0e>
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8082 	beq.w	80037a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a41      	ldr	r2, [pc, #260]	; (80037ac <HAL_DMA_IRQHandler+0xe14>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d04a      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3f      	ldr	r2, [pc, #252]	; (80037b0 <HAL_DMA_IRQHandler+0xe18>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d045      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3e      	ldr	r2, [pc, #248]	; (80037b4 <HAL_DMA_IRQHandler+0xe1c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d040      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <HAL_DMA_IRQHandler+0xe20>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d03b      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <HAL_DMA_IRQHandler+0xe24>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d036      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a39      	ldr	r2, [pc, #228]	; (80037c0 <HAL_DMA_IRQHandler+0xe28>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d031      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a38      	ldr	r2, [pc, #224]	; (80037c4 <HAL_DMA_IRQHandler+0xe2c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d02c      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a36      	ldr	r2, [pc, #216]	; (80037c8 <HAL_DMA_IRQHandler+0xe30>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d027      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a35      	ldr	r2, [pc, #212]	; (80037cc <HAL_DMA_IRQHandler+0xe34>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d022      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a33      	ldr	r2, [pc, #204]	; (80037d0 <HAL_DMA_IRQHandler+0xe38>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01d      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a32      	ldr	r2, [pc, #200]	; (80037d4 <HAL_DMA_IRQHandler+0xe3c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d018      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a30      	ldr	r2, [pc, #192]	; (80037d8 <HAL_DMA_IRQHandler+0xe40>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2f      	ldr	r2, [pc, #188]	; (80037dc <HAL_DMA_IRQHandler+0xe44>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <HAL_DMA_IRQHandler+0xe48>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <HAL_DMA_IRQHandler+0xe4c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <HAL_DMA_IRQHandler+0xe50>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d108      	bne.n	8003754 <HAL_DMA_IRQHandler+0xdbc>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 021c 	bic.w	r2, r2, #28
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e007      	b.n	8003764 <HAL_DMA_IRQHandler+0xdcc>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 020e 	bic.w	r2, r2, #14
 8003762:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	4798      	blx	r3
 800379a:	e004      	b.n	80037a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800379c:	bf00      	nop
 800379e:	e002      	b.n	80037a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037a0:	bf00      	nop
 80037a2:	e000      	b.n	80037a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037a6:	3728      	adds	r7, #40	; 0x28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40020010 	.word	0x40020010
 80037b0:	40020028 	.word	0x40020028
 80037b4:	40020040 	.word	0x40020040
 80037b8:	40020058 	.word	0x40020058
 80037bc:	40020070 	.word	0x40020070
 80037c0:	40020088 	.word	0x40020088
 80037c4:	400200a0 	.word	0x400200a0
 80037c8:	400200b8 	.word	0x400200b8
 80037cc:	40020410 	.word	0x40020410
 80037d0:	40020428 	.word	0x40020428
 80037d4:	40020440 	.word	0x40020440
 80037d8:	40020458 	.word	0x40020458
 80037dc:	40020470 	.word	0x40020470
 80037e0:	40020488 	.word	0x40020488
 80037e4:	400204a0 	.word	0x400204a0
 80037e8:	400204b8 	.word	0x400204b8

080037ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a42      	ldr	r2, [pc, #264]	; (8003904 <DMA_CalcBaseAndBitshift+0x118>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d04a      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a41      	ldr	r2, [pc, #260]	; (8003908 <DMA_CalcBaseAndBitshift+0x11c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d045      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a3f      	ldr	r2, [pc, #252]	; (800390c <DMA_CalcBaseAndBitshift+0x120>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d040      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a3e      	ldr	r2, [pc, #248]	; (8003910 <DMA_CalcBaseAndBitshift+0x124>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d03b      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3c      	ldr	r2, [pc, #240]	; (8003914 <DMA_CalcBaseAndBitshift+0x128>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d036      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3b      	ldr	r2, [pc, #236]	; (8003918 <DMA_CalcBaseAndBitshift+0x12c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d031      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a39      	ldr	r2, [pc, #228]	; (800391c <DMA_CalcBaseAndBitshift+0x130>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02c      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a38      	ldr	r2, [pc, #224]	; (8003920 <DMA_CalcBaseAndBitshift+0x134>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d027      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a36      	ldr	r2, [pc, #216]	; (8003924 <DMA_CalcBaseAndBitshift+0x138>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d022      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a35      	ldr	r2, [pc, #212]	; (8003928 <DMA_CalcBaseAndBitshift+0x13c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d01d      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a33      	ldr	r2, [pc, #204]	; (800392c <DMA_CalcBaseAndBitshift+0x140>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d018      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a32      	ldr	r2, [pc, #200]	; (8003930 <DMA_CalcBaseAndBitshift+0x144>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a30      	ldr	r2, [pc, #192]	; (8003934 <DMA_CalcBaseAndBitshift+0x148>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00e      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <DMA_CalcBaseAndBitshift+0x14c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2d      	ldr	r2, [pc, #180]	; (800393c <DMA_CalcBaseAndBitshift+0x150>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <DMA_CalcBaseAndBitshift+0xa8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <DMA_CalcBaseAndBitshift+0x154>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <DMA_CalcBaseAndBitshift+0xac>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <DMA_CalcBaseAndBitshift+0xae>
 8003898:	2300      	movs	r3, #0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d024      	beq.n	80038e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	3b10      	subs	r3, #16
 80038a6:	4a27      	ldr	r2, [pc, #156]	; (8003944 <DMA_CalcBaseAndBitshift+0x158>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	4a24      	ldr	r2, [pc, #144]	; (8003948 <DMA_CalcBaseAndBitshift+0x15c>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	461a      	mov	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d908      	bls.n	80038d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <DMA_CalcBaseAndBitshift+0x160>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	1d1a      	adds	r2, r3, #4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	659a      	str	r2, [r3, #88]	; 0x58
 80038d6:	e00d      	b.n	80038f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <DMA_CalcBaseAndBitshift+0x160>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6593      	str	r3, [r2, #88]	; 0x58
 80038e6:	e005      	b.n	80038f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40020010 	.word	0x40020010
 8003908:	40020028 	.word	0x40020028
 800390c:	40020040 	.word	0x40020040
 8003910:	40020058 	.word	0x40020058
 8003914:	40020070 	.word	0x40020070
 8003918:	40020088 	.word	0x40020088
 800391c:	400200a0 	.word	0x400200a0
 8003920:	400200b8 	.word	0x400200b8
 8003924:	40020410 	.word	0x40020410
 8003928:	40020428 	.word	0x40020428
 800392c:	40020440 	.word	0x40020440
 8003930:	40020458 	.word	0x40020458
 8003934:	40020470 	.word	0x40020470
 8003938:	40020488 	.word	0x40020488
 800393c:	400204a0 	.word	0x400204a0
 8003940:	400204b8 	.word	0x400204b8
 8003944:	aaaaaaab 	.word	0xaaaaaaab
 8003948:	08009a94 	.word	0x08009a94
 800394c:	fffffc00 	.word	0xfffffc00

08003950 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d120      	bne.n	80039a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	2b03      	cmp	r3, #3
 800396a:	d858      	bhi.n	8003a1e <DMA_CheckFifoParam+0xce>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <DMA_CheckFifoParam+0x24>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003985 	.word	0x08003985
 8003978:	08003997 	.word	0x08003997
 800397c:	08003985 	.word	0x08003985
 8003980:	08003a1f 	.word	0x08003a1f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d048      	beq.n	8003a22 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003994:	e045      	b.n	8003a22 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800399e:	d142      	bne.n	8003a26 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039a4:	e03f      	b.n	8003a26 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ae:	d123      	bne.n	80039f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d838      	bhi.n	8003a2a <DMA_CheckFifoParam+0xda>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <DMA_CheckFifoParam+0x70>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039d7 	.word	0x080039d7
 80039c8:	080039d1 	.word	0x080039d1
 80039cc:	080039e9 	.word	0x080039e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
        break;
 80039d4:	e030      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d025      	beq.n	8003a2e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039e6:	e022      	b.n	8003a2e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039f0:	d11f      	bne.n	8003a32 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039f6:	e01c      	b.n	8003a32 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d902      	bls.n	8003a06 <DMA_CheckFifoParam+0xb6>
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d003      	beq.n	8003a0c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a04:	e018      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
        break;
 8003a0a:	e015      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8003a1c:	e00b      	b.n	8003a36 <DMA_CheckFifoParam+0xe6>
        break;
 8003a1e:	bf00      	nop
 8003a20:	e00a      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
        break;
 8003a22:	bf00      	nop
 8003a24:	e008      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
        break;
 8003a26:	bf00      	nop
 8003a28:	e006      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
        break;
 8003a2a:	bf00      	nop
 8003a2c:	e004      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
        break;
 8003a2e:	bf00      	nop
 8003a30:	e002      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
        break;
 8003a32:	bf00      	nop
 8003a34:	e000      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
    break;
 8003a36:	bf00      	nop
    }
  }

  return status;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop

08003a48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a38      	ldr	r2, [pc, #224]	; (8003b3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d022      	beq.n	8003aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a36      	ldr	r2, [pc, #216]	; (8003b40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01d      	beq.n	8003aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a35      	ldr	r2, [pc, #212]	; (8003b44 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d018      	beq.n	8003aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a33      	ldr	r2, [pc, #204]	; (8003b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a32      	ldr	r2, [pc, #200]	; (8003b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a30      	ldr	r2, [pc, #192]	; (8003b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a2f      	ldr	r2, [pc, #188]	; (8003b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2d      	ldr	r2, [pc, #180]	; (8003b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01a      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3b08      	subs	r3, #8
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	461a      	mov	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ad4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	2201      	movs	r2, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003ae4:	e024      	b.n	8003b30 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	3b10      	subs	r3, #16
 8003aee:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d806      	bhi.n	8003b0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d902      	bls.n	8003b0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	461a      	mov	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003b20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	2201      	movs	r2, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	58025408 	.word	0x58025408
 8003b40:	5802541c 	.word	0x5802541c
 8003b44:	58025430 	.word	0x58025430
 8003b48:	58025444 	.word	0x58025444
 8003b4c:	58025458 	.word	0x58025458
 8003b50:	5802546c 	.word	0x5802546c
 8003b54:	58025480 	.word	0x58025480
 8003b58:	58025494 	.word	0x58025494
 8003b5c:	cccccccd 	.word	0xcccccccd
 8003b60:	16009600 	.word	0x16009600
 8003b64:	58025880 	.word	0x58025880
 8003b68:	aaaaaaab 	.word	0xaaaaaaab
 8003b6c:	400204b8 	.word	0x400204b8
 8003b70:	4002040f 	.word	0x4002040f
 8003b74:	10008200 	.word	0x10008200
 8003b78:	40020880 	.word	0x40020880

08003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04a      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d847      	bhi.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d022      	beq.n	8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a24      	ldr	r2, [pc, #144]	; (8003c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d01d      	beq.n	8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a22      	ldr	r2, [pc, #136]	; (8003c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d018      	beq.n	8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1f      	ldr	r2, [pc, #124]	; (8003c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00e      	beq.n	8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003bec:	2300      	movs	r3, #0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c04:	671a      	str	r2, [r3, #112]	; 0x70
 8003c06:	e009      	b.n	8003c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	461a      	mov	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003c1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	2201      	movs	r2, #1
 8003c22:	409a      	lsls	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	58025408 	.word	0x58025408
 8003c38:	5802541c 	.word	0x5802541c
 8003c3c:	58025430 	.word	0x58025430
 8003c40:	58025444 	.word	0x58025444
 8003c44:	58025458 	.word	0x58025458
 8003c48:	5802546c 	.word	0x5802546c
 8003c4c:	58025480 	.word	0x58025480
 8003c50:	58025494 	.word	0x58025494
 8003c54:	1600963f 	.word	0x1600963f
 8003c58:	58025940 	.word	0x58025940
 8003c5c:	1000823f 	.word	0x1000823f
 8003c60:	40020940 	.word	0x40020940

08003c64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0cf      	b.n	8003e16 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2223      	movs	r2, #35	; 0x23
 8003c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7fd f8b9 	bl	8000e00 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8e:	4b64      	ldr	r3, [pc, #400]	; (8003e20 <HAL_ETH_Init+0x1bc>)
 8003c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c94:	4a62      	ldr	r2, [pc, #392]	; (8003e20 <HAL_ETH_Init+0x1bc>)
 8003c96:	f043 0302 	orr.w	r3, r3, #2
 8003c9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c9e:	4b60      	ldr	r3, [pc, #384]	; (8003e20 <HAL_ETH_Init+0x1bc>)
 8003ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7a1b      	ldrb	r3, [r3, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d103      	bne.n	8003cbc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f7fd fc8b 	bl	80015d0 <HAL_SYSCFG_ETHInterfaceSelect>
 8003cba:	e003      	b.n	8003cc4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003cbc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003cc0:	f7fd fc86 	bl	80015d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003cc4:	4b57      	ldr	r3, [pc, #348]	; (8003e24 <HAL_ETH_Init+0x1c0>)
 8003cc6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ce0:	f7fd fc3a 	bl	8001558 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ce6:	e011      	b.n	8003d0c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ce8:	f7fd fc36 	bl	8001558 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003cf6:	d909      	bls.n	8003d0c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	22e0      	movs	r2, #224	; 0xe0
 8003d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e084      	b.n	8003e16 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e4      	bne.n	8003ce8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f886 	bl	8003e30 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003d24:	f001 fee4 	bl	8005af0 <HAL_RCC_GetHCLKFreq>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4a3f      	ldr	r2, [pc, #252]	; (8003e28 <HAL_ETH_Init+0x1c4>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	0c9a      	lsrs	r2, r3, #18
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3a01      	subs	r2, #1
 8003d38:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fa71 	bl	8004224 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d4e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d5e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	22e0      	movs	r2, #224	; 0xe0
 8003d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e049      	b.n	8003e16 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003d8e:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <HAL_ETH_Init+0x1c8>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6952      	ldr	r2, [r2, #20]
 8003d96:	0051      	lsls	r1, r2, #1
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003da2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fad9 	bl	800435e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fb1f 	bl	80043f0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	3305      	adds	r3, #5
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	021a      	lsls	r2, r3, #8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	3303      	adds	r3, #3
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	061a      	lsls	r2, r3, #24
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	3302      	adds	r3, #2
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	3301      	adds	r3, #1
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003df0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003dfe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003e00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2210      	movs	r2, #16
 8003e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	58024400 	.word	0x58024400
 8003e24:	58000400 	.word	0x58000400
 8003e28:	431bde83 	.word	0x431bde83
 8003e2c:	ffff8001 	.word	0xffff8001

08003e30 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003e4a:	f001 fe51 	bl	8005af0 <HAL_RCC_GetHCLKFreq>
 8003e4e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d908      	bls.n	8003e6a <HAL_ETH_SetMDIOClockRange+0x3a>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d804      	bhi.n	8003e6a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	e027      	b.n	8003eba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d908      	bls.n	8003e84 <HAL_ETH_SetMDIOClockRange+0x54>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d204      	bcs.n	8003e84 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	e01a      	b.n	8003eba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d303      	bcc.n	8003e94 <HAL_ETH_SetMDIOClockRange+0x64>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d911      	bls.n	8003eb8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d908      	bls.n	8003eae <HAL_ETH_SetMDIOClockRange+0x7e>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4a0f      	ldr	r2, [pc, #60]	; (8003edc <HAL_ETH_SetMDIOClockRange+0xac>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d804      	bhi.n	8003eae <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e005      	b.n	8003eba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e000      	b.n	8003eba <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003eb8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	01312cff 	.word	0x01312cff
 8003ed0:	02160ebf 	.word	0x02160ebf
 8003ed4:	03938700 	.word	0x03938700
 8003ed8:	05f5e0ff 	.word	0x05f5e0ff
 8003edc:	08f0d17f 	.word	0x08f0d17f

08003ee0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003ef2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	791b      	ldrb	r3, [r3, #4]
 8003ef8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003efa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	7b1b      	ldrb	r3, [r3, #12]
 8003f00:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003f02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	7b5b      	ldrb	r3, [r3, #13]
 8003f08:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003f0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	7b9b      	ldrb	r3, [r3, #14]
 8003f10:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003f12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	7bdb      	ldrb	r3, [r3, #15]
 8003f18:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003f1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	7c12      	ldrb	r2, [r2, #16]
 8003f20:	2a00      	cmp	r2, #0
 8003f22:	d102      	bne.n	8003f2a <ETH_SetMACConfig+0x4a>
 8003f24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f28:	e000      	b.n	8003f2c <ETH_SetMACConfig+0x4c>
 8003f2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003f2c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	7c52      	ldrb	r2, [r2, #17]
 8003f32:	2a00      	cmp	r2, #0
 8003f34:	d102      	bne.n	8003f3c <ETH_SetMACConfig+0x5c>
 8003f36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f3a:	e000      	b.n	8003f3e <ETH_SetMACConfig+0x5e>
 8003f3c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003f3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	7c9b      	ldrb	r3, [r3, #18]
 8003f44:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003f46:	431a      	orrs	r2, r3
               macconf->Speed |
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003f4c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003f52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	7f1b      	ldrb	r3, [r3, #28]
 8003f58:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003f5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	7f5b      	ldrb	r3, [r3, #29]
 8003f60:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003f62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	7f92      	ldrb	r2, [r2, #30]
 8003f68:	2a00      	cmp	r2, #0
 8003f6a:	d102      	bne.n	8003f72 <ETH_SetMACConfig+0x92>
 8003f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f70:	e000      	b.n	8003f74 <ETH_SetMACConfig+0x94>
 8003f72:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003f74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	7fdb      	ldrb	r3, [r3, #31]
 8003f7a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003f7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	d102      	bne.n	8003f8e <ETH_SetMACConfig+0xae>
 8003f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f8c:	e000      	b.n	8003f90 <ETH_SetMACConfig+0xb0>
 8003f8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003f90:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003f96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f9e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003fa0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b56      	ldr	r3, [pc, #344]	; (800410c <ETH_SetMACConfig+0x22c>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003fcc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fd4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003fd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003fde:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003fe0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	d102      	bne.n	8003ff2 <ETH_SetMACConfig+0x112>
 8003fec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ff0:	e000      	b.n	8003ff4 <ETH_SetMACConfig+0x114>
 8003ff2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003ff4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	4b42      	ldr	r3, [pc, #264]	; (8004110 <ETH_SetMACConfig+0x230>)
 8004006:	4013      	ands	r3, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	68f9      	ldr	r1, [r7, #12]
 800400e:	430b      	orrs	r3, r1
 8004010:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004018:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <ETH_SetMACConfig+0x234>)
 800402a:	4013      	ands	r3, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	68f9      	ldr	r1, [r7, #12]
 8004032:	430b      	orrs	r3, r1
 8004034:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800403c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004042:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800404a:	2a00      	cmp	r2, #0
 800404c:	d101      	bne.n	8004052 <ETH_SetMACConfig+0x172>
 800404e:	2280      	movs	r2, #128	; 0x80
 8004050:	e000      	b.n	8004054 <ETH_SetMACConfig+0x174>
 8004052:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004054:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004066:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800406a:	4013      	ands	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	68f9      	ldr	r1, [r7, #12]
 8004072:	430b      	orrs	r3, r1
 8004074:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800407c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004084:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f023 0103 	bic.w	r1, r3, #3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	430a      	orrs	r2, r1
 800409e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80040aa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80040c6:	2a00      	cmp	r2, #0
 80040c8:	d101      	bne.n	80040ce <ETH_SetMACConfig+0x1ee>
 80040ca:	2240      	movs	r2, #64	; 0x40
 80040cc:	e000      	b.n	80040d0 <ETH_SetMACConfig+0x1f0>
 80040ce:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80040d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80040d8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80040da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80040e2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80040f0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	00048083 	.word	0x00048083
 8004110:	c0f88000 	.word	0xc0f88000
 8004114:	fffffef0 	.word	0xfffffef0

08004118 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4b38      	ldr	r3, [pc, #224]	; (8004210 <ETH_SetDMAConfig+0xf8>)
 800412e:	4013      	ands	r3, r2
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	6811      	ldr	r1, [r2, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	430b      	orrs	r3, r1
 800413a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800413e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	791b      	ldrb	r3, [r3, #4]
 8004144:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800414a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	7b1b      	ldrb	r3, [r3, #12]
 8004150:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	4b2c      	ldr	r3, [pc, #176]	; (8004214 <ETH_SetDMAConfig+0xfc>)
 8004162:	4013      	ands	r3, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	68f9      	ldr	r1, [r7, #12]
 800416a:	430b      	orrs	r3, r1
 800416c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004170:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	7b5b      	ldrb	r3, [r3, #13]
 8004176:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004188:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800418c:	4b22      	ldr	r3, [pc, #136]	; (8004218 <ETH_SetDMAConfig+0x100>)
 800418e:	4013      	ands	r3, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	68f9      	ldr	r1, [r7, #12]
 8004196:	430b      	orrs	r3, r1
 8004198:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800419c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	7d1b      	ldrb	r3, [r3, #20]
 80041a8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80041aa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	7f5b      	ldrb	r3, [r3, #29]
 80041b0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <ETH_SetDMAConfig+0x104>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	68f9      	ldr	r1, [r7, #12]
 80041cc:	430b      	orrs	r3, r1
 80041ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041d2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	7f1b      	ldrb	r3, [r3, #28]
 80041da:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ec:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <ETH_SetDMAConfig+0x108>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	68f9      	ldr	r1, [r7, #12]
 80041fa:	430b      	orrs	r3, r1
 80041fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004200:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	ffff87fd 	.word	0xffff87fd
 8004214:	ffff2ffe 	.word	0xffff2ffe
 8004218:	fffec000 	.word	0xfffec000
 800421c:	ffc0efef 	.word	0xffc0efef
 8004220:	7fc0ffff 	.word	0x7fc0ffff

08004224 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b0a4      	sub	sp, #144	; 0x90
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004232:	2300      	movs	r3, #0
 8004234:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800423c:	2300      	movs	r3, #0
 800423e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004254:	2300      	movs	r3, #0
 8004256:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004264:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800426c:	2300      	movs	r3, #0
 800426e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004270:	2300      	movs	r3, #0
 8004272:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004276:	2300      	movs	r3, #0
 8004278:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800427c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004280:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004288:	2300      	movs	r3, #0
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800428c:	2301      	movs	r3, #1
 800428e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004292:	2300      	movs	r3, #0
 8004294:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004298:	2300      	movs	r3, #0
 800429a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800429e:	2300      	movs	r3, #0
 80042a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80042a6:	2300      	movs	r3, #0
 80042a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80042bc:	2320      	movs	r3, #32
 80042be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80042ce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80042d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042d8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80042da:	2300      	movs	r3, #0
 80042dc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80042e0:	2302      	movs	r3, #2
 80042e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80042fe:	2300      	movs	r3, #0
 8004300:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fde6 	bl	8003ee0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004314:	2301      	movs	r3, #1
 8004316:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004318:	2301      	movs	r3, #1
 800431a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800431c:	2300      	movs	r3, #0
 800431e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004326:	2300      	movs	r3, #0
 8004328:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800432a:	2300      	movs	r3, #0
 800432c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800432e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004332:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004334:	2300      	movs	r3, #0
 8004336:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800433c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004344:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800434a:	f107 0308 	add.w	r3, r7, #8
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fee1 	bl	8004118 <ETH_SetDMAConfig>
}
 8004356:	bf00      	nop
 8004358:	3790      	adds	r7, #144	; 0x90
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e01d      	b.n	80043a8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68d9      	ldr	r1, [r3, #12]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4613      	mov	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	440b      	add	r3, r1
 800437c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2200      	movs	r2, #0
 8004388:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2200      	movs	r2, #0
 800438e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	3206      	adds	r2, #6
 800439e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3301      	adds	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d9de      	bls.n	800436c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043bc:	461a      	mov	r2, r3
 80043be:	2303      	movs	r3, #3
 80043c0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e023      	b.n	8004446 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6919      	ldr	r1, [r3, #16]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4613      	mov	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4413      	add	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	440b      	add	r3, r1
 800440e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2200      	movs	r2, #0
 800441a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2200      	movs	r2, #0
 8004432:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	3212      	adds	r2, #18
 800443c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3301      	adds	r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d9d8      	bls.n	80043fe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004472:	461a      	mov	r2, r3
 8004474:	2303      	movs	r3, #3
 8004476:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004486:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044ba:	4b89      	ldr	r3, [pc, #548]	; (80046e0 <HAL_GPIO_Init+0x234>)
 80044bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044be:	e194      	b.n	80047ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	2101      	movs	r1, #1
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8186 	beq.w	80047e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d005      	beq.n	80044f0 <HAL_GPIO_Init+0x44>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d130      	bne.n	8004552 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	2203      	movs	r2, #3
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4013      	ands	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004526:	2201      	movs	r2, #1
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 0201 	and.w	r2, r3, #1
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b03      	cmp	r3, #3
 800455c:	d017      	beq.n	800458e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	2203      	movs	r2, #3
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d123      	bne.n	80045e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	08da      	lsrs	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3208      	adds	r2, #8
 80045a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	220f      	movs	r2, #15
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	08da      	lsrs	r2, r3, #3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3208      	adds	r2, #8
 80045dc:	69b9      	ldr	r1, [r7, #24]
 80045de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	2203      	movs	r2, #3
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0203 	and.w	r2, r3, #3
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80e0 	beq.w	80047e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004624:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <HAL_GPIO_Init+0x238>)
 8004626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800462a:	4a2e      	ldr	r2, [pc, #184]	; (80046e4 <HAL_GPIO_Init+0x238>)
 800462c:	f043 0302 	orr.w	r3, r3, #2
 8004630:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004634:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <HAL_GPIO_Init+0x238>)
 8004636:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004642:	4a29      	ldr	r2, [pc, #164]	; (80046e8 <HAL_GPIO_Init+0x23c>)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	089b      	lsrs	r3, r3, #2
 8004648:	3302      	adds	r3, #2
 800464a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	220f      	movs	r2, #15
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4013      	ands	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a20      	ldr	r2, [pc, #128]	; (80046ec <HAL_GPIO_Init+0x240>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d052      	beq.n	8004714 <HAL_GPIO_Init+0x268>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1f      	ldr	r2, [pc, #124]	; (80046f0 <HAL_GPIO_Init+0x244>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d031      	beq.n	80046da <HAL_GPIO_Init+0x22e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <HAL_GPIO_Init+0x248>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d02b      	beq.n	80046d6 <HAL_GPIO_Init+0x22a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <HAL_GPIO_Init+0x24c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d025      	beq.n	80046d2 <HAL_GPIO_Init+0x226>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <HAL_GPIO_Init+0x250>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01f      	beq.n	80046ce <HAL_GPIO_Init+0x222>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_GPIO_Init+0x254>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d019      	beq.n	80046ca <HAL_GPIO_Init+0x21e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <HAL_GPIO_Init+0x258>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_GPIO_Init+0x21a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <HAL_GPIO_Init+0x25c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00d      	beq.n	80046c2 <HAL_GPIO_Init+0x216>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <HAL_GPIO_Init+0x260>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <HAL_GPIO_Init+0x212>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a17      	ldr	r2, [pc, #92]	; (8004710 <HAL_GPIO_Init+0x264>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d101      	bne.n	80046ba <HAL_GPIO_Init+0x20e>
 80046b6:	2309      	movs	r3, #9
 80046b8:	e02d      	b.n	8004716 <HAL_GPIO_Init+0x26a>
 80046ba:	230a      	movs	r3, #10
 80046bc:	e02b      	b.n	8004716 <HAL_GPIO_Init+0x26a>
 80046be:	2308      	movs	r3, #8
 80046c0:	e029      	b.n	8004716 <HAL_GPIO_Init+0x26a>
 80046c2:	2307      	movs	r3, #7
 80046c4:	e027      	b.n	8004716 <HAL_GPIO_Init+0x26a>
 80046c6:	2306      	movs	r3, #6
 80046c8:	e025      	b.n	8004716 <HAL_GPIO_Init+0x26a>
 80046ca:	2305      	movs	r3, #5
 80046cc:	e023      	b.n	8004716 <HAL_GPIO_Init+0x26a>
 80046ce:	2304      	movs	r3, #4
 80046d0:	e021      	b.n	8004716 <HAL_GPIO_Init+0x26a>
 80046d2:	2303      	movs	r3, #3
 80046d4:	e01f      	b.n	8004716 <HAL_GPIO_Init+0x26a>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e01d      	b.n	8004716 <HAL_GPIO_Init+0x26a>
 80046da:	2301      	movs	r3, #1
 80046dc:	e01b      	b.n	8004716 <HAL_GPIO_Init+0x26a>
 80046de:	bf00      	nop
 80046e0:	58000080 	.word	0x58000080
 80046e4:	58024400 	.word	0x58024400
 80046e8:	58000400 	.word	0x58000400
 80046ec:	58020000 	.word	0x58020000
 80046f0:	58020400 	.word	0x58020400
 80046f4:	58020800 	.word	0x58020800
 80046f8:	58020c00 	.word	0x58020c00
 80046fc:	58021000 	.word	0x58021000
 8004700:	58021400 	.word	0x58021400
 8004704:	58021800 	.word	0x58021800
 8004708:	58021c00 	.word	0x58021c00
 800470c:	58022000 	.word	0x58022000
 8004710:	58022400 	.word	0x58022400
 8004714:	2300      	movs	r3, #0
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	f002 0203 	and.w	r2, r2, #3
 800471c:	0092      	lsls	r2, r2, #2
 800471e:	4093      	lsls	r3, r2
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004726:	4938      	ldr	r1, [pc, #224]	; (8004808 <HAL_GPIO_Init+0x35c>)
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	3302      	adds	r3, #2
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	43db      	mvns	r3, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4013      	ands	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800475a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	3301      	adds	r3, #1
 80047e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f47f ae63 	bne.w	80044c0 <HAL_GPIO_Init+0x14>
  }
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	3724      	adds	r7, #36	; 0x24
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	58000400 	.word	0x58000400

0800480c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]
 8004818:	4613      	mov	r3, r2
 800481a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800481c:	787b      	ldrb	r3, [r7, #1]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004828:	e003      	b.n	8004832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800482a:	887b      	ldrh	r3, [r7, #2]
 800482c:	041a      	lsls	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	619a      	str	r2, [r3, #24]
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004850:	887a      	ldrh	r2, [r7, #2]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4013      	ands	r3, r2
 8004856:	041a      	lsls	r2, r3, #16
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	43d9      	mvns	r1, r3
 800485c:	887b      	ldrh	r3, [r7, #2]
 800485e:	400b      	ands	r3, r1
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	619a      	str	r2, [r3, #24]
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800487c:	4a08      	ldr	r2, [pc, #32]	; (80048a0 <HAL_HSEM_FastTake+0x2c>)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3320      	adds	r3, #32
 8004882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004886:	4a07      	ldr	r2, [pc, #28]	; (80048a4 <HAL_HSEM_FastTake+0x30>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	e000      	b.n	8004892 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
}
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	58026400 	.word	0x58026400
 80048a4:	80000300 	.word	0x80000300

080048a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80048b2:	4906      	ldr	r1, [pc, #24]	; (80048cc <HAL_HSEM_Release+0x24>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	58026400 	.word	0x58026400

080048d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d2:	b08f      	sub	sp, #60	; 0x3c
 80048d4:	af0a      	add	r7, sp, #40	; 0x28
 80048d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e116      	b.n	8004b10 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fc fcc5 	bl	800128c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2203      	movs	r2, #3
 8004906:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f004 fddb 	bl	80094dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	687e      	ldr	r6, [r7, #4]
 800492e:	466d      	mov	r5, sp
 8004930:	f106 0410 	add.w	r4, r6, #16
 8004934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800493a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800493c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004940:	e885 0003 	stmia.w	r5, {r0, r1}
 8004944:	1d33      	adds	r3, r6, #4
 8004946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004948:	6838      	ldr	r0, [r7, #0]
 800494a:	f004 fd59 	bl	8009400 <USB_CoreInit>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0d7      	b.n	8004b10 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f004 fdc9 	bl	80094fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
 8004970:	e04a      	b.n	8004a08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004972:	7bfa      	ldrb	r2, [r7, #15]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	333d      	adds	r3, #61	; 0x3d
 8004982:	2201      	movs	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	333c      	adds	r3, #60	; 0x3c
 8004996:	7bfa      	ldrb	r2, [r7, #15]
 8004998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800499a:	7bfa      	ldrb	r2, [r7, #15]
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	b298      	uxth	r0, r3
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	3344      	adds	r3, #68	; 0x44
 80049ae:	4602      	mov	r2, r0
 80049b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049b2:	7bfa      	ldrb	r2, [r7, #15]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	3340      	adds	r3, #64	; 0x40
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049c6:	7bfa      	ldrb	r2, [r7, #15]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	3348      	adds	r3, #72	; 0x48
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049da:	7bfa      	ldrb	r2, [r7, #15]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	334c      	adds	r3, #76	; 0x4c
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049ee:	7bfa      	ldrb	r2, [r7, #15]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	3354      	adds	r3, #84	; 0x54
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	3301      	adds	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	7bfa      	ldrb	r2, [r7, #15]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d3af      	bcc.n	8004972 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]
 8004a16:	e044      	b.n	8004aa2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a18:	7bfa      	ldrb	r2, [r7, #15]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a2e:	7bfa      	ldrb	r2, [r7, #15]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a44:	7bfa      	ldrb	r2, [r7, #15]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a70:	7bfa      	ldrb	r2, [r7, #15]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	7bfa      	ldrb	r2, [r7, #15]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d3b5      	bcc.n	8004a18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	687e      	ldr	r6, [r7, #4]
 8004ab4:	466d      	mov	r5, sp
 8004ab6:	f106 0410 	add.w	r4, r6, #16
 8004aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ac6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004aca:	1d33      	adds	r3, r6, #4
 8004acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ace:	6838      	ldr	r0, [r7, #0]
 8004ad0:	f004 fd62 	bl	8009598 <USB_DevInit>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e014      	b.n	8004b10 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d102      	bne.n	8004b04 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f80a 	bl	8004b18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f004 ff20 	bl	800994e <USB_DevDisconnect>

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <HAL_PCDEx_ActivateLPM+0x44>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	10000003 	.word	0x10000003

08004b60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004b68:	4b29      	ldr	r3, [pc, #164]	; (8004c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	2b06      	cmp	r3, #6
 8004b72:	d00a      	beq.n	8004b8a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b74:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d001      	beq.n	8004b86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e040      	b.n	8004c08 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e03e      	b.n	8004c08 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004b92:	491f      	ldr	r1, [pc, #124]	; (8004c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b9a:	f7fc fcdd 	bl	8001558 <HAL_GetTick>
 8004b9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ba0:	e009      	b.n	8004bb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ba2:	f7fc fcd9 	bl	8001558 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb0:	d901      	bls.n	8004bb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e028      	b.n	8004c08 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bb6:	4b16      	ldr	r3, [pc, #88]	; (8004c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	d1ee      	bne.n	8004ba2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b1e      	cmp	r3, #30
 8004bc8:	d008      	beq.n	8004bdc <HAL_PWREx_ConfigSupply+0x7c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8004bce:	d005      	beq.n	8004bdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b1d      	cmp	r3, #29
 8004bd4:	d002      	beq.n	8004bdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b2d      	cmp	r3, #45	; 0x2d
 8004bda:	d114      	bne.n	8004c06 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004bdc:	f7fc fcbc 	bl	8001558 <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004be2:	e009      	b.n	8004bf8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004be4:	f7fc fcb8 	bl	8001558 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bf2:	d901      	bls.n	8004bf8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e007      	b.n	8004c08 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d1ee      	bne.n	8004be4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	58024800 	.word	0x58024800

08004c14 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c22:	60d3      	str	r3, [r2, #12]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	58024800 	.word	0x58024800

08004c34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	; 0x30
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f000 bc1d 	b.w	8005482 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8087 	beq.w	8004d64 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c56:	4b99      	ldr	r3, [pc, #612]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c60:	4b96      	ldr	r3, [pc, #600]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d007      	beq.n	8004c7c <HAL_RCC_OscConfig+0x48>
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	2b18      	cmp	r3, #24
 8004c70:	d110      	bne.n	8004c94 <HAL_RCC_OscConfig+0x60>
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d10b      	bne.n	8004c94 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7c:	4b8f      	ldr	r3, [pc, #572]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d06c      	beq.n	8004d62 <HAL_RCC_OscConfig+0x12e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d168      	bne.n	8004d62 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e3f6      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9c:	d106      	bne.n	8004cac <HAL_RCC_OscConfig+0x78>
 8004c9e:	4b87      	ldr	r3, [pc, #540]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a86      	ldr	r2, [pc, #536]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e02e      	b.n	8004d0a <HAL_RCC_OscConfig+0xd6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10c      	bne.n	8004cce <HAL_RCC_OscConfig+0x9a>
 8004cb4:	4b81      	ldr	r3, [pc, #516]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a80      	ldr	r2, [pc, #512]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	4b7e      	ldr	r3, [pc, #504]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a7d      	ldr	r2, [pc, #500]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e01d      	b.n	8004d0a <HAL_RCC_OscConfig+0xd6>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd6:	d10c      	bne.n	8004cf2 <HAL_RCC_OscConfig+0xbe>
 8004cd8:	4b78      	ldr	r3, [pc, #480]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a77      	ldr	r2, [pc, #476]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4b75      	ldr	r3, [pc, #468]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a74      	ldr	r2, [pc, #464]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	e00b      	b.n	8004d0a <HAL_RCC_OscConfig+0xd6>
 8004cf2:	4b72      	ldr	r3, [pc, #456]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a71      	ldr	r2, [pc, #452]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4b6f      	ldr	r3, [pc, #444]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6e      	ldr	r2, [pc, #440]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d013      	beq.n	8004d3a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fc fc21 	bl	8001558 <HAL_GetTick>
 8004d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d1a:	f7fc fc1d 	bl	8001558 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b64      	cmp	r3, #100	; 0x64
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e3aa      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d2c:	4b63      	ldr	r3, [pc, #396]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0xe6>
 8004d38:	e014      	b.n	8004d64 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3a:	f7fc fc0d 	bl	8001558 <HAL_GetTick>
 8004d3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d42:	f7fc fc09 	bl	8001558 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b64      	cmp	r3, #100	; 0x64
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e396      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d54:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f0      	bne.n	8004d42 <HAL_RCC_OscConfig+0x10e>
 8004d60:	e000      	b.n	8004d64 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80cb 	beq.w	8004f08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d72:	4b52      	ldr	r3, [pc, #328]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d7a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d7c:	4b4f      	ldr	r3, [pc, #316]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <HAL_RCC_OscConfig+0x164>
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	2b18      	cmp	r3, #24
 8004d8c:	d156      	bne.n	8004e3c <HAL_RCC_OscConfig+0x208>
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d151      	bne.n	8004e3c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d98:	4b48      	ldr	r3, [pc, #288]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_RCC_OscConfig+0x17c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e368      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004db0:	4b42      	ldr	r3, [pc, #264]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f023 0219 	bic.w	r2, r3, #25
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	493f      	ldr	r1, [pc, #252]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dc2:	f7fc fbc9 	bl	8001558 <HAL_GetTick>
 8004dc6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dca:	f7fc fbc5 	bl	8001558 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e352      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ddc:	4b37      	ldr	r3, [pc, #220]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de8:	f7fc fbe6 	bl	80015b8 <HAL_GetREVID>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f241 0203 	movw	r2, #4099	; 0x1003
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d817      	bhi.n	8004e26 <HAL_RCC_OscConfig+0x1f2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d108      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1dc>
 8004dfe:	4b2f      	ldr	r3, [pc, #188]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e06:	4a2d      	ldr	r2, [pc, #180]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e0e:	e07b      	b.n	8004f08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	031b      	lsls	r3, r3, #12
 8004e1e:	4927      	ldr	r1, [pc, #156]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e24:	e070      	b.n	8004f08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e26:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	061b      	lsls	r3, r3, #24
 8004e34:	4921      	ldr	r1, [pc, #132]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3a:	e065      	b.n	8004f08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d048      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e44:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 0219 	bic.w	r2, r3, #25
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	491a      	ldr	r1, [pc, #104]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7fc fb7f 	bl	8001558 <HAL_GetTick>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e5e:	f7fc fb7b 	bl	8001558 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e308      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e70:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7c:	f7fc fb9c 	bl	80015b8 <HAL_GetREVID>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d81a      	bhi.n	8004ec0 <HAL_RCC_OscConfig+0x28c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d108      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x270>
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea0:	6053      	str	r3, [r2, #4]
 8004ea2:	e031      	b.n	8004f08 <HAL_RCC_OscConfig+0x2d4>
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	031b      	lsls	r3, r3, #12
 8004eb2:	4902      	ldr	r1, [pc, #8]	; (8004ebc <HAL_RCC_OscConfig+0x288>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
 8004eb8:	e026      	b.n	8004f08 <HAL_RCC_OscConfig+0x2d4>
 8004eba:	bf00      	nop
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	4b9a      	ldr	r3, [pc, #616]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	4997      	ldr	r1, [pc, #604]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	604b      	str	r3, [r1, #4]
 8004ed4:	e018      	b.n	8004f08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed6:	4b95      	ldr	r3, [pc, #596]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a94      	ldr	r2, [pc, #592]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fc fb39 	bl	8001558 <HAL_GetTick>
 8004ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eea:	f7fc fb35 	bl	8001558 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e2c2      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004efc:	4b8b      	ldr	r3, [pc, #556]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f0      	bne.n	8004eea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80a9 	beq.w	8005068 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f16:	4b85      	ldr	r3, [pc, #532]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f20:	4b82      	ldr	r3, [pc, #520]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d007      	beq.n	8004f3c <HAL_RCC_OscConfig+0x308>
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b18      	cmp	r3, #24
 8004f30:	d13a      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x374>
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d135      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f3c:	4b7b      	ldr	r3, [pc, #492]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_OscConfig+0x320>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e296      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f54:	f7fc fb30 	bl	80015b8 <HAL_GetREVID>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d817      	bhi.n	8004f92 <HAL_RCC_OscConfig+0x35e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d108      	bne.n	8004f7c <HAL_RCC_OscConfig+0x348>
 8004f6a:	4b70      	ldr	r3, [pc, #448]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f72:	4a6e      	ldr	r2, [pc, #440]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f78:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f7a:	e075      	b.n	8005068 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f7c:	4b6b      	ldr	r3, [pc, #428]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	069b      	lsls	r3, r3, #26
 8004f8a:	4968      	ldr	r1, [pc, #416]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f90:	e06a      	b.n	8005068 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f92:	4b66      	ldr	r3, [pc, #408]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	061b      	lsls	r3, r3, #24
 8004fa0:	4962      	ldr	r1, [pc, #392]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fa6:	e05f      	b.n	8005068 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d042      	beq.n	8005036 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fb0:	4b5e      	ldr	r3, [pc, #376]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a5d      	ldr	r2, [pc, #372]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fc facc 	bl	8001558 <HAL_GetTick>
 8004fc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004fc4:	f7fc fac8 	bl	8001558 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e255      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fd6:	4b55      	ldr	r3, [pc, #340]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fe2:	f7fc fae9 	bl	80015b8 <HAL_GetREVID>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d817      	bhi.n	8005020 <HAL_RCC_OscConfig+0x3ec>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d108      	bne.n	800500a <HAL_RCC_OscConfig+0x3d6>
 8004ff8:	4b4c      	ldr	r3, [pc, #304]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005000:	4a4a      	ldr	r2, [pc, #296]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8005002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005006:	6053      	str	r3, [r2, #4]
 8005008:	e02e      	b.n	8005068 <HAL_RCC_OscConfig+0x434>
 800500a:	4b48      	ldr	r3, [pc, #288]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	069b      	lsls	r3, r3, #26
 8005018:	4944      	ldr	r1, [pc, #272]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 800501a:	4313      	orrs	r3, r2
 800501c:	604b      	str	r3, [r1, #4]
 800501e:	e023      	b.n	8005068 <HAL_RCC_OscConfig+0x434>
 8005020:	4b42      	ldr	r3, [pc, #264]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	061b      	lsls	r3, r3, #24
 800502e:	493f      	ldr	r1, [pc, #252]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8005030:	4313      	orrs	r3, r2
 8005032:	60cb      	str	r3, [r1, #12]
 8005034:	e018      	b.n	8005068 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005036:	4b3d      	ldr	r3, [pc, #244]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3c      	ldr	r2, [pc, #240]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 800503c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005042:	f7fc fa89 	bl	8001558 <HAL_GetTick>
 8005046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800504a:	f7fc fa85 	bl	8001558 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e212      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800505c:	4b33      	ldr	r3, [pc, #204]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f0      	bne.n	800504a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d036      	beq.n	80050e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d019      	beq.n	80050b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507c:	4b2b      	ldr	r3, [pc, #172]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 800507e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005080:	4a2a      	ldr	r2, [pc, #168]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fc fa66 	bl	8001558 <HAL_GetTick>
 800508c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005090:	f7fc fa62 	bl	8001558 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e1ef      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050a2:	4b22      	ldr	r3, [pc, #136]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 80050a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x45c>
 80050ae:	e018      	b.n	80050e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b0:	4b1e      	ldr	r3, [pc, #120]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 80050b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050bc:	f7fc fa4c 	bl	8001558 <HAL_GetTick>
 80050c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c4:	f7fc fa48 	bl	8001558 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e1d5      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 80050d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d039      	beq.n	8005162 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d01c      	beq.n	8005130 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a0c      	ldr	r2, [pc, #48]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 80050fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005100:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005102:	f7fc fa29 	bl	8001558 <HAL_GetTick>
 8005106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800510a:	f7fc fa25 	bl	8001558 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1b2      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800511c:	4b03      	ldr	r3, [pc, #12]	; (800512c <HAL_RCC_OscConfig+0x4f8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x4d6>
 8005128:	e01b      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
 800512a:	bf00      	nop
 800512c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005130:	4b9b      	ldr	r3, [pc, #620]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a9a      	ldr	r2, [pc, #616]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800513a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800513c:	f7fc fa0c 	bl	8001558 <HAL_GetTick>
 8005140:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005144:	f7fc fa08 	bl	8001558 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e195      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005156:	4b92      	ldr	r3, [pc, #584]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8081 	beq.w	8005272 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005170:	4b8c      	ldr	r3, [pc, #560]	; (80053a4 <HAL_RCC_OscConfig+0x770>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a8b      	ldr	r2, [pc, #556]	; (80053a4 <HAL_RCC_OscConfig+0x770>)
 8005176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800517c:	f7fc f9ec 	bl	8001558 <HAL_GetTick>
 8005180:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005184:	f7fc f9e8 	bl	8001558 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	; 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e175      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005196:	4b83      	ldr	r3, [pc, #524]	; (80053a4 <HAL_RCC_OscConfig+0x770>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d106      	bne.n	80051b8 <HAL_RCC_OscConfig+0x584>
 80051aa:	4b7d      	ldr	r3, [pc, #500]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	4a7c      	ldr	r2, [pc, #496]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	6713      	str	r3, [r2, #112]	; 0x70
 80051b6:	e02d      	b.n	8005214 <HAL_RCC_OscConfig+0x5e0>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10c      	bne.n	80051da <HAL_RCC_OscConfig+0x5a6>
 80051c0:	4b77      	ldr	r3, [pc, #476]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c4:	4a76      	ldr	r2, [pc, #472]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	6713      	str	r3, [r2, #112]	; 0x70
 80051cc:	4b74      	ldr	r3, [pc, #464]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d0:	4a73      	ldr	r2, [pc, #460]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051d2:	f023 0304 	bic.w	r3, r3, #4
 80051d6:	6713      	str	r3, [r2, #112]	; 0x70
 80051d8:	e01c      	b.n	8005214 <HAL_RCC_OscConfig+0x5e0>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2b05      	cmp	r3, #5
 80051e0:	d10c      	bne.n	80051fc <HAL_RCC_OscConfig+0x5c8>
 80051e2:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	4a6e      	ldr	r2, [pc, #440]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051e8:	f043 0304 	orr.w	r3, r3, #4
 80051ec:	6713      	str	r3, [r2, #112]	; 0x70
 80051ee:	4b6c      	ldr	r3, [pc, #432]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f2:	4a6b      	ldr	r2, [pc, #428]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	6713      	str	r3, [r2, #112]	; 0x70
 80051fa:	e00b      	b.n	8005214 <HAL_RCC_OscConfig+0x5e0>
 80051fc:	4b68      	ldr	r3, [pc, #416]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005200:	4a67      	ldr	r2, [pc, #412]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005202:	f023 0301 	bic.w	r3, r3, #1
 8005206:	6713      	str	r3, [r2, #112]	; 0x70
 8005208:	4b65      	ldr	r3, [pc, #404]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 800520a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520c:	4a64      	ldr	r2, [pc, #400]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 800520e:	f023 0304 	bic.w	r3, r3, #4
 8005212:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d015      	beq.n	8005248 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521c:	f7fc f99c 	bl	8001558 <HAL_GetTick>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005222:	e00a      	b.n	800523a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005224:	f7fc f998 	bl	8001558 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e123      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800523a:	4b59      	ldr	r3, [pc, #356]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0ee      	beq.n	8005224 <HAL_RCC_OscConfig+0x5f0>
 8005246:	e014      	b.n	8005272 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fc f986 	bl	8001558 <HAL_GetTick>
 800524c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800524e:	e00a      	b.n	8005266 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005250:	f7fc f982 	bl	8001558 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	f241 3288 	movw	r2, #5000	; 0x1388
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e10d      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005266:	4b4e      	ldr	r3, [pc, #312]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1ee      	bne.n	8005250 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 8102 	beq.w	8005480 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800527c:	4b48      	ldr	r3, [pc, #288]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005284:	2b18      	cmp	r3, #24
 8005286:	f000 80bd 	beq.w	8005404 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2b02      	cmp	r3, #2
 8005290:	f040 809e 	bne.w	80053d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005294:	4b42      	ldr	r3, [pc, #264]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a41      	ldr	r2, [pc, #260]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 800529a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800529e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fc f95a 	bl	8001558 <HAL_GetTick>
 80052a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a8:	f7fc f956 	bl	8001558 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e0e3      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052ba:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052c6:	4b36      	ldr	r3, [pc, #216]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80052c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ca:	4b37      	ldr	r3, [pc, #220]	; (80053a8 <HAL_RCC_OscConfig+0x774>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052d6:	0112      	lsls	r2, r2, #4
 80052d8:	430a      	orrs	r2, r1
 80052da:	4931      	ldr	r1, [pc, #196]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	628b      	str	r3, [r1, #40]	; 0x28
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	3b01      	subs	r3, #1
 80052e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	3b01      	subs	r3, #1
 80052f0:	025b      	lsls	r3, r3, #9
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	3b01      	subs	r3, #1
 80052fc:	041b      	lsls	r3, r3, #16
 80052fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	3b01      	subs	r3, #1
 800530a:	061b      	lsls	r3, r3, #24
 800530c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005310:	4923      	ldr	r1, [pc, #140]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005312:	4313      	orrs	r3, r2
 8005314:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005316:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005322:	4b1f      	ldr	r3, [pc, #124]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005326:	4b21      	ldr	r3, [pc, #132]	; (80053ac <HAL_RCC_OscConfig+0x778>)
 8005328:	4013      	ands	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800532e:	00d2      	lsls	r2, r2, #3
 8005330:	491b      	ldr	r1, [pc, #108]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005332:	4313      	orrs	r3, r2
 8005334:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005336:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	f023 020c 	bic.w	r2, r3, #12
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	4917      	ldr	r1, [pc, #92]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005344:	4313      	orrs	r3, r2
 8005346:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005348:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	f023 0202 	bic.w	r2, r3, #2
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005354:	4912      	ldr	r1, [pc, #72]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005356:	4313      	orrs	r3, r2
 8005358:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800535a:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005366:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 800536c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005370:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800537c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	4a07      	ldr	r2, [pc, #28]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a04      	ldr	r2, [pc, #16]	; (80053a0 <HAL_RCC_OscConfig+0x76c>)
 8005390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005396:	f7fc f8df 	bl	8001558 <HAL_GetTick>
 800539a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800539c:	e011      	b.n	80053c2 <HAL_RCC_OscConfig+0x78e>
 800539e:	bf00      	nop
 80053a0:	58024400 	.word	0x58024400
 80053a4:	58024800 	.word	0x58024800
 80053a8:	fffffc0c 	.word	0xfffffc0c
 80053ac:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b0:	f7fc f8d2 	bl	8001558 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e05f      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053c2:	4b32      	ldr	r3, [pc, #200]	; (800548c <HAL_RCC_OscConfig+0x858>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0x77c>
 80053ce:	e057      	b.n	8005480 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d0:	4b2e      	ldr	r3, [pc, #184]	; (800548c <HAL_RCC_OscConfig+0x858>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2d      	ldr	r2, [pc, #180]	; (800548c <HAL_RCC_OscConfig+0x858>)
 80053d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fc f8bc 	bl	8001558 <HAL_GetTick>
 80053e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e4:	f7fc f8b8 	bl	8001558 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e045      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053f6:	4b25      	ldr	r3, [pc, #148]	; (800548c <HAL_RCC_OscConfig+0x858>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x7b0>
 8005402:	e03d      	b.n	8005480 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005404:	4b21      	ldr	r3, [pc, #132]	; (800548c <HAL_RCC_OscConfig+0x858>)
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800540a:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_RCC_OscConfig+0x858>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	2b01      	cmp	r3, #1
 8005416:	d031      	beq.n	800547c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f003 0203 	and.w	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d12a      	bne.n	800547c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d122      	bne.n	800547c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d11a      	bne.n	800547c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	0a5b      	lsrs	r3, r3, #9
 800544a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005452:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005454:	429a      	cmp	r2, r3
 8005456:	d111      	bne.n	800547c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	0c1b      	lsrs	r3, r3, #16
 800545c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005466:	429a      	cmp	r2, r3
 8005468:	d108      	bne.n	800547c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	0e1b      	lsrs	r3, r3, #24
 800546e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005476:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005478:	429a      	cmp	r2, r3
 800547a:	d001      	beq.n	8005480 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3730      	adds	r7, #48	; 0x30
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	58024400 	.word	0x58024400

08005490 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e19c      	b.n	80057de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054a4:	4b8a      	ldr	r3, [pc, #552]	; (80056d0 <HAL_RCC_ClockConfig+0x240>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d910      	bls.n	80054d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b2:	4b87      	ldr	r3, [pc, #540]	; (80056d0 <HAL_RCC_ClockConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f023 020f 	bic.w	r2, r3, #15
 80054ba:	4985      	ldr	r1, [pc, #532]	; (80056d0 <HAL_RCC_ClockConfig+0x240>)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	4313      	orrs	r3, r2
 80054c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c2:	4b83      	ldr	r3, [pc, #524]	; (80056d0 <HAL_RCC_ClockConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d001      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e184      	b.n	80057de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d010      	beq.n	8005502 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	4b7b      	ldr	r3, [pc, #492]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d908      	bls.n	8005502 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054f0:	4b78      	ldr	r3, [pc, #480]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	4975      	ldr	r1, [pc, #468]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d010      	beq.n	8005530 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	4b70      	ldr	r3, [pc, #448]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800551a:	429a      	cmp	r2, r3
 800551c:	d908      	bls.n	8005530 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800551e:	4b6d      	ldr	r3, [pc, #436]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	496a      	ldr	r1, [pc, #424]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 800552c:	4313      	orrs	r3, r2
 800552e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d010      	beq.n	800555e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	4b64      	ldr	r3, [pc, #400]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005548:	429a      	cmp	r2, r3
 800554a:	d908      	bls.n	800555e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800554c:	4b61      	ldr	r3, [pc, #388]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	495e      	ldr	r1, [pc, #376]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 800555a:	4313      	orrs	r3, r2
 800555c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d010      	beq.n	800558c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69da      	ldr	r2, [r3, #28]
 800556e:	4b59      	ldr	r3, [pc, #356]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005576:	429a      	cmp	r2, r3
 8005578:	d908      	bls.n	800558c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800557a:	4b56      	ldr	r3, [pc, #344]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	4953      	ldr	r1, [pc, #332]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005588:	4313      	orrs	r3, r2
 800558a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d010      	beq.n	80055ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	4b4d      	ldr	r3, [pc, #308]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d908      	bls.n	80055ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a8:	4b4a      	ldr	r3, [pc, #296]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f023 020f 	bic.w	r2, r3, #15
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4947      	ldr	r1, [pc, #284]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d055      	beq.n	8005672 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80055c6:	4b43      	ldr	r3, [pc, #268]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	4940      	ldr	r1, [pc, #256]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d107      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055e0:	4b3c      	ldr	r3, [pc, #240]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d121      	bne.n	8005630 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0f6      	b.n	80057de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d107      	bne.n	8005608 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055f8:	4b36      	ldr	r3, [pc, #216]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d115      	bne.n	8005630 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0ea      	b.n	80057de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d107      	bne.n	8005620 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005610:	4b30      	ldr	r3, [pc, #192]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d109      	bne.n	8005630 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0de      	b.n	80057de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005620:	4b2c      	ldr	r3, [pc, #176]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0d6      	b.n	80057de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005630:	4b28      	ldr	r3, [pc, #160]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f023 0207 	bic.w	r2, r3, #7
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	4925      	ldr	r1, [pc, #148]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 800563e:	4313      	orrs	r3, r2
 8005640:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005642:	f7fb ff89 	bl	8001558 <HAL_GetTick>
 8005646:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005648:	e00a      	b.n	8005660 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800564a:	f7fb ff85 	bl	8001558 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	f241 3288 	movw	r2, #5000	; 0x1388
 8005658:	4293      	cmp	r3, r2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e0be      	b.n	80057de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005660:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	429a      	cmp	r2, r3
 8005670:	d1eb      	bne.n	800564a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d010      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	429a      	cmp	r2, r3
 800568c:	d208      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800568e:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f023 020f 	bic.w	r2, r3, #15
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	490e      	ldr	r1, [pc, #56]	; (80056d4 <HAL_RCC_ClockConfig+0x244>)
 800569c:	4313      	orrs	r3, r2
 800569e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <HAL_RCC_ClockConfig+0x240>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d214      	bcs.n	80056d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <HAL_RCC_ClockConfig+0x240>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 020f 	bic.w	r2, r3, #15
 80056b6:	4906      	ldr	r1, [pc, #24]	; (80056d0 <HAL_RCC_ClockConfig+0x240>)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056be:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <HAL_RCC_ClockConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d005      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e086      	b.n	80057de <HAL_RCC_ClockConfig+0x34e>
 80056d0:	52002000 	.word	0x52002000
 80056d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d010      	beq.n	8005706 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d208      	bcs.n	8005706 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056f4:	4b3c      	ldr	r3, [pc, #240]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	4939      	ldr	r1, [pc, #228]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 8005702:	4313      	orrs	r3, r2
 8005704:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d010      	beq.n	8005734 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695a      	ldr	r2, [r3, #20]
 8005716:	4b34      	ldr	r3, [pc, #208]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800571e:	429a      	cmp	r2, r3
 8005720:	d208      	bcs.n	8005734 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005722:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	492e      	ldr	r1, [pc, #184]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 8005730:	4313      	orrs	r3, r2
 8005732:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	d010      	beq.n	8005762 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	4b28      	ldr	r3, [pc, #160]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800574c:	429a      	cmp	r2, r3
 800574e:	d208      	bcs.n	8005762 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005750:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	4922      	ldr	r1, [pc, #136]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 800575e:	4313      	orrs	r3, r2
 8005760:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d010      	beq.n	8005790 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69da      	ldr	r2, [r3, #28]
 8005772:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800577a:	429a      	cmp	r2, r3
 800577c:	d208      	bcs.n	8005790 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800577e:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	4917      	ldr	r1, [pc, #92]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 800578c:	4313      	orrs	r3, r2
 800578e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005790:	f000 f834 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8005794:	4602      	mov	r2, r0
 8005796:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	0a1b      	lsrs	r3, r3, #8
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	4912      	ldr	r1, [pc, #72]	; (80057ec <HAL_RCC_ClockConfig+0x35c>)
 80057a2:	5ccb      	ldrb	r3, [r1, r3]
 80057a4:	f003 031f 	and.w	r3, r3, #31
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057ae:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <HAL_RCC_ClockConfig+0x358>)
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	4a0d      	ldr	r2, [pc, #52]	; (80057ec <HAL_RCC_ClockConfig+0x35c>)
 80057b8:	5cd3      	ldrb	r3, [r2, r3]
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
 80057c4:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <HAL_RCC_ClockConfig+0x360>)
 80057c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057c8:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <HAL_RCC_ClockConfig+0x364>)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80057ce:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <HAL_RCC_ClockConfig+0x368>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fb fe76 	bl	80014c4 <HAL_InitTick>
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	58024400 	.word	0x58024400
 80057ec:	08009a84 	.word	0x08009a84
 80057f0:	24000004 	.word	0x24000004
 80057f4:	24000000 	.word	0x24000000
 80057f8:	24000008 	.word	0x24000008

080057fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005802:	4bb3      	ldr	r3, [pc, #716]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800580a:	2b18      	cmp	r3, #24
 800580c:	f200 8155 	bhi.w	8005aba <HAL_RCC_GetSysClockFreq+0x2be>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	0800587d 	.word	0x0800587d
 800581c:	08005abb 	.word	0x08005abb
 8005820:	08005abb 	.word	0x08005abb
 8005824:	08005abb 	.word	0x08005abb
 8005828:	08005abb 	.word	0x08005abb
 800582c:	08005abb 	.word	0x08005abb
 8005830:	08005abb 	.word	0x08005abb
 8005834:	08005abb 	.word	0x08005abb
 8005838:	080058a3 	.word	0x080058a3
 800583c:	08005abb 	.word	0x08005abb
 8005840:	08005abb 	.word	0x08005abb
 8005844:	08005abb 	.word	0x08005abb
 8005848:	08005abb 	.word	0x08005abb
 800584c:	08005abb 	.word	0x08005abb
 8005850:	08005abb 	.word	0x08005abb
 8005854:	08005abb 	.word	0x08005abb
 8005858:	080058a9 	.word	0x080058a9
 800585c:	08005abb 	.word	0x08005abb
 8005860:	08005abb 	.word	0x08005abb
 8005864:	08005abb 	.word	0x08005abb
 8005868:	08005abb 	.word	0x08005abb
 800586c:	08005abb 	.word	0x08005abb
 8005870:	08005abb 	.word	0x08005abb
 8005874:	08005abb 	.word	0x08005abb
 8005878:	080058af 	.word	0x080058af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800587c:	4b94      	ldr	r3, [pc, #592]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005888:	4b91      	ldr	r3, [pc, #580]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	08db      	lsrs	r3, r3, #3
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	4a90      	ldr	r2, [pc, #576]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
 8005898:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800589a:	e111      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800589c:	4b8d      	ldr	r3, [pc, #564]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800589e:	61bb      	str	r3, [r7, #24]
    break;
 80058a0:	e10e      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80058a2:	4b8d      	ldr	r3, [pc, #564]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058a4:	61bb      	str	r3, [r7, #24]
    break;
 80058a6:	e10b      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80058a8:	4b8c      	ldr	r3, [pc, #560]	; (8005adc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80058aa:	61bb      	str	r3, [r7, #24]
    break;
 80058ac:	e108      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058ae:	4b88      	ldr	r3, [pc, #544]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80058b8:	4b85      	ldr	r3, [pc, #532]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	091b      	lsrs	r3, r3, #4
 80058be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80058c4:	4b82      	ldr	r3, [pc, #520]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80058ce:	4b80      	ldr	r3, [pc, #512]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d2:	08db      	lsrs	r3, r3, #3
 80058d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	fb02 f303 	mul.w	r3, r2, r3
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80e1 	beq.w	8005ab4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	f000 8083 	beq.w	8005a00 <HAL_RCC_GetSysClockFreq+0x204>
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	f200 80a1 	bhi.w	8005a44 <HAL_RCC_GetSysClockFreq+0x248>
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_RCC_GetSysClockFreq+0x114>
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d056      	beq.n	80059bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800590e:	e099      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005910:	4b6f      	ldr	r3, [pc, #444]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d02d      	beq.n	8005978 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800591c:	4b6c      	ldr	r3, [pc, #432]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	08db      	lsrs	r3, r3, #3
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	4a6b      	ldr	r2, [pc, #428]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
 800592c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	ee07 3a90 	vmov	s15, r3
 8005934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005946:	4b62      	ldr	r3, [pc, #392]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005956:	ed97 6a02 	vldr	s12, [r7, #8]
 800595a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800595e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800596a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005972:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005976:	e087      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005982:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005ae4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800598a:	4b51      	ldr	r3, [pc, #324]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599a:	ed97 6a02 	vldr	s12, [r7, #8]
 800599e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059ba:	e065      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005ae8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ce:	4b40      	ldr	r3, [pc, #256]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059de:	ed97 6a02 	vldr	s12, [r7, #8]
 80059e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059fe:	e043      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005aec <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a12:	4b2f      	ldr	r3, [pc, #188]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a42:	e021      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005ae8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a56:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a86:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005a88:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	0a5b      	lsrs	r3, r3, #9
 8005a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a92:	3301      	adds	r3, #1
 8005a94:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	ee07 3a90 	vmov	s15, r3
 8005a9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aac:	ee17 3a90 	vmov	r3, s15
 8005ab0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005ab2:	e005      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61bb      	str	r3, [r7, #24]
    break;
 8005ab8:	e002      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005abc:	61bb      	str	r3, [r7, #24]
    break;
 8005abe:	bf00      	nop
  }

  return sysclockfreq;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	03d09000 	.word	0x03d09000
 8005ad8:	003d0900 	.word	0x003d0900
 8005adc:	007a1200 	.word	0x007a1200
 8005ae0:	46000000 	.word	0x46000000
 8005ae4:	4c742400 	.word	0x4c742400
 8005ae8:	4a742400 	.word	0x4a742400
 8005aec:	4af42400 	.word	0x4af42400

08005af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005af6:	f7ff fe81 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <HAL_RCC_GetHCLKFreq+0x50>)
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	0a1b      	lsrs	r3, r3, #8
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	490f      	ldr	r1, [pc, #60]	; (8005b44 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b08:	5ccb      	ldrb	r3, [r1, r3]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b1e:	5cd3      	ldrb	r3, [r2, r3]
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2a:	4a07      	ldr	r2, [pc, #28]	; (8005b48 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b2e:	4a07      	ldr	r2, [pc, #28]	; (8005b4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b36:	681b      	ldr	r3, [r3, #0]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	58024400 	.word	0x58024400
 8005b44:	08009a84 	.word	0x08009a84
 8005b48:	24000004 	.word	0x24000004
 8005b4c:	24000000 	.word	0x24000000

08005b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b54:	f7ff ffcc 	bl	8005af0 <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	091b      	lsrs	r3, r3, #4
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4904      	ldr	r1, [pc, #16]	; (8005b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	58024400 	.word	0x58024400
 8005b78:	08009a84 	.word	0x08009a84

08005b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b80:	f7ff ffb6 	bl	8005af0 <HAL_RCC_GetHCLKFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	4904      	ldr	r1, [pc, #16]	; (8005ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b92:	5ccb      	ldrb	r3, [r1, r3]
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	08009a84 	.word	0x08009a84

08005ba8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d03f      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bcc:	d02a      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005bce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bd2:	d824      	bhi.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bd8:	d018      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bde:	d81e      	bhi.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be8:	d007      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005bea:	e018      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bec:	4ba3      	ldr	r3, [pc, #652]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	4aa2      	ldr	r2, [pc, #648]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bf8:	e015      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	2102      	movs	r1, #2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 f9d5 	bl	8006fb0 <RCCEx_PLL2_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c0a:	e00c      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3324      	adds	r3, #36	; 0x24
 8005c10:	2102      	movs	r1, #2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fa7e 	bl	8007114 <RCCEx_PLL3_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c1c:	e003      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	75fb      	strb	r3, [r7, #23]
      break;
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d109      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c2c:	4b93      	ldr	r3, [pc, #588]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c38:	4990      	ldr	r1, [pc, #576]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	650b      	str	r3, [r1, #80]	; 0x50
 8005c3e:	e001      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d03d      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d826      	bhi.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c58:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005c75 	.word	0x08005c75
 8005c64:	08005c83 	.word	0x08005c83
 8005c68:	08005c95 	.word	0x08005c95
 8005c6c:	08005cad 	.word	0x08005cad
 8005c70:	08005cad 	.word	0x08005cad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c74:	4b81      	ldr	r3, [pc, #516]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	4a80      	ldr	r2, [pc, #512]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c80:	e015      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3304      	adds	r3, #4
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 f991 	bl	8006fb0 <RCCEx_PLL2_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c92:	e00c      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3324      	adds	r3, #36	; 0x24
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 fa3a 	bl	8007114 <RCCEx_PLL3_Config>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ca4:	e003      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8005caa:	e000      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d109      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cb4:	4b71      	ldr	r3, [pc, #452]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb8:	f023 0207 	bic.w	r2, r3, #7
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc0:	496e      	ldr	r1, [pc, #440]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	650b      	str	r3, [r1, #80]	; 0x50
 8005cc6:	e001      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
 8005cca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d042      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce0:	d02b      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce6:	d825      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ce8:	2bc0      	cmp	r3, #192	; 0xc0
 8005cea:	d028      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005cec:	2bc0      	cmp	r3, #192	; 0xc0
 8005cee:	d821      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cf0:	2b80      	cmp	r3, #128	; 0x80
 8005cf2:	d016      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005cf4:	2b80      	cmp	r3, #128	; 0x80
 8005cf6:	d81d      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d007      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005d00:	e018      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d02:	4b5e      	ldr	r3, [pc, #376]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	4a5d      	ldr	r2, [pc, #372]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d0e:	e017      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3304      	adds	r3, #4
 8005d14:	2100      	movs	r1, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 f94a 	bl	8006fb0 <RCCEx_PLL2_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d20:	e00e      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3324      	adds	r3, #36	; 0x24
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 f9f3 	bl	8007114 <RCCEx_PLL3_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d32:	e005      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	75fb      	strb	r3, [r7, #23]
      break;
 8005d38:	e002      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d3a:	bf00      	nop
 8005d3c:	e000      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d46:	4b4d      	ldr	r3, [pc, #308]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	494a      	ldr	r1, [pc, #296]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	650b      	str	r3, [r1, #80]	; 0x50
 8005d58:	e001      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d049      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d74:	d030      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005d76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d7a:	d82a      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d80:	d02c      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005d82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d86:	d824      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d8c:	d018      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d92:	d81e      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005d98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d9c:	d007      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d9e:	e018      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da0:	4b36      	ldr	r3, [pc, #216]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	4a35      	ldr	r2, [pc, #212]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dac:	e017      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3304      	adds	r3, #4
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 f8fb 	bl	8006fb0 <RCCEx_PLL2_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005dbe:	e00e      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3324      	adds	r3, #36	; 0x24
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 f9a4 	bl	8007114 <RCCEx_PLL3_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dd0:	e005      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd6:	e002      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005dd8:	bf00      	nop
 8005dda:	e000      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005de4:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005df2:	4922      	ldr	r1, [pc, #136]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	658b      	str	r3, [r1, #88]	; 0x58
 8005df8:	e001      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d04b      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e14:	d030      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e1a:	d82a      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e20:	d02e      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005e22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e26:	d824      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e2c:	d018      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e32:	d81e      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e3c:	d007      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e3e:	e018      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e40:	4b0e      	ldr	r3, [pc, #56]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e4c:	e019      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3304      	adds	r3, #4
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 f8ab 	bl	8006fb0 <RCCEx_PLL2_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e5e:	e010      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3324      	adds	r3, #36	; 0x24
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 f954 	bl	8007114 <RCCEx_PLL3_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e70:	e007      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
      break;
 8005e76:	e004      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005e78:	bf00      	nop
 8005e7a:	e002      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e7c:	58024400 	.word	0x58024400
      break;
 8005e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e88:	4b99      	ldr	r3, [pc, #612]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e96:	4996      	ldr	r1, [pc, #600]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	658b      	str	r3, [r1, #88]	; 0x58
 8005e9c:	e001      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ea0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d032      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb2:	2b30      	cmp	r3, #48	; 0x30
 8005eb4:	d01c      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005eb6:	2b30      	cmp	r3, #48	; 0x30
 8005eb8:	d817      	bhi.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d00c      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d813      	bhi.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d016      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005ec6:	2b10      	cmp	r3, #16
 8005ec8:	d10f      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eca:	4b89      	ldr	r3, [pc, #548]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	4a88      	ldr	r2, [pc, #544]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ed6:	e00e      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	2102      	movs	r1, #2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 f866 	bl	8006fb0 <RCCEx_PLL2_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ee8:	e005      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	75fb      	strb	r3, [r7, #23]
      break;
 8005eee:	e002      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005ef0:	bf00      	nop
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d109      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005efc:	4b7c      	ldr	r3, [pc, #496]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f08:	4979      	ldr	r1, [pc, #484]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f0e:	e001      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d047      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f28:	d030      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f2e:	d82a      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f34:	d02c      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005f36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f3a:	d824      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f40:	d018      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f46:	d81e      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f50:	d007      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005f52:	e018      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f54:	4b66      	ldr	r3, [pc, #408]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	4a65      	ldr	r2, [pc, #404]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f60:	e017      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	2100      	movs	r1, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f001 f821 	bl	8006fb0 <RCCEx_PLL2_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f72:	e00e      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3324      	adds	r3, #36	; 0x24
 8005f78:	2100      	movs	r1, #0
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 f8ca 	bl	8007114 <RCCEx_PLL3_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f84:	e005      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8a:	e002      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005f8c:	bf00      	nop
 8005f8e:	e000      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f98:	4b55      	ldr	r3, [pc, #340]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa4:	4952      	ldr	r1, [pc, #328]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	650b      	str	r3, [r1, #80]	; 0x50
 8005faa:	e001      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d049      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc4:	d02e      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005fc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fca:	d828      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005fcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fd0:	d02a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005fd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fd6:	d822      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005fd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fdc:	d026      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005fde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fe2:	d81c      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fe8:	d010      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fee:	d816      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01d      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff8:	d111      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	2101      	movs	r1, #1
 8006000:	4618      	mov	r0, r3
 8006002:	f000 ffd5 	bl	8006fb0 <RCCEx_PLL2_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800600a:	e012      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3324      	adds	r3, #36	; 0x24
 8006010:	2101      	movs	r1, #1
 8006012:	4618      	mov	r0, r3
 8006014:	f001 f87e 	bl	8007114 <RCCEx_PLL3_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800601c:	e009      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	75fb      	strb	r3, [r7, #23]
      break;
 8006022:	e006      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006024:	bf00      	nop
 8006026:	e004      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006028:	bf00      	nop
 800602a:	e002      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d109      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006038:	4b2d      	ldr	r3, [pc, #180]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800603a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006044:	492a      	ldr	r1, [pc, #168]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006046:	4313      	orrs	r3, r2
 8006048:	650b      	str	r3, [r1, #80]	; 0x50
 800604a:	e001      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604c:	7dfb      	ldrb	r3, [r7, #23]
 800604e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d04d      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006066:	d02e      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800606c:	d828      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800606e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006072:	d02a      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006078:	d822      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800607a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800607e:	d026      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006080:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006084:	d81c      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800608a:	d010      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 800608c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006090:	d816      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01d      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800609a:	d111      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3304      	adds	r3, #4
 80060a0:	2101      	movs	r1, #1
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 ff84 	bl	8006fb0 <RCCEx_PLL2_Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060ac:	e012      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3324      	adds	r3, #36	; 0x24
 80060b2:	2101      	movs	r1, #1
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 f82d 	bl	8007114 <RCCEx_PLL3_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060be:	e009      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	75fb      	strb	r3, [r7, #23]
      break;
 80060c4:	e006      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060c6:	bf00      	nop
 80060c8:	e004      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10c      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060e8:	4901      	ldr	r1, [pc, #4]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	658b      	str	r3, [r1, #88]	; 0x58
 80060ee:	e003      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80060f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d02f      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800610c:	d00e      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800610e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006112:	d814      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d015      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800611c:	d10f      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800611e:	4baf      	ldr	r3, [pc, #700]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	4aae      	ldr	r2, [pc, #696]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006128:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800612a:	e00c      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ff3c 	bl	8006fb0 <RCCEx_PLL2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800613c:	e003      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006146:	7dfb      	ldrb	r3, [r7, #23]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800614c:	4ba3      	ldr	r3, [pc, #652]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006150:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006158:	49a0      	ldr	r1, [pc, #640]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800615a:	4313      	orrs	r3, r2
 800615c:	650b      	str	r3, [r1, #80]	; 0x50
 800615e:	e001      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d032      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006174:	2b03      	cmp	r3, #3
 8006176:	d81b      	bhi.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006178:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617e:	bf00      	nop
 8006180:	080061b7 	.word	0x080061b7
 8006184:	08006191 	.word	0x08006191
 8006188:	0800619f 	.word	0x0800619f
 800618c:	080061b7 	.word	0x080061b7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006190:	4b92      	ldr	r3, [pc, #584]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	4a91      	ldr	r2, [pc, #580]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800619a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800619c:	e00c      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3304      	adds	r3, #4
 80061a2:	2102      	movs	r1, #2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 ff03 	bl	8006fb0 <RCCEx_PLL2_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061ae:	e003      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	75fb      	strb	r3, [r7, #23]
      break;
 80061b4:	e000      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80061b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061be:	4b87      	ldr	r3, [pc, #540]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c2:	f023 0203 	bic.w	r2, r3, #3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	4984      	ldr	r1, [pc, #528]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061d0:	e001      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 8086 	beq.w	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061e4:	4b7e      	ldr	r3, [pc, #504]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a7d      	ldr	r2, [pc, #500]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80061ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061f0:	f7fb f9b2 	bl	8001558 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061f6:	e009      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f8:	f7fb f9ae 	bl	8001558 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b64      	cmp	r3, #100	; 0x64
 8006204:	d902      	bls.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	75fb      	strb	r3, [r7, #23]
        break;
 800620a:	e005      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800620c:	4b74      	ldr	r3, [pc, #464]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0ef      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d166      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800621e:	4b6f      	ldr	r3, [pc, #444]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006220:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006228:	4053      	eors	r3, r2
 800622a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622e:	2b00      	cmp	r3, #0
 8006230:	d013      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006232:	4b6a      	ldr	r3, [pc, #424]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800623a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800623c:	4b67      	ldr	r3, [pc, #412]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800623e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006240:	4a66      	ldr	r2, [pc, #408]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006246:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006248:	4b64      	ldr	r3, [pc, #400]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800624a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624c:	4a63      	ldr	r2, [pc, #396]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800624e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006252:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006254:	4a61      	ldr	r2, [pc, #388]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006264:	d115      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006266:	f7fb f977 	bl	8001558 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800626c:	e00b      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626e:	f7fb f973 	bl	8001558 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	f241 3288 	movw	r2, #5000	; 0x1388
 800627c:	4293      	cmp	r3, r2
 800627e:	d902      	bls.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	75fb      	strb	r3, [r7, #23]
            break;
 8006284:	e005      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006286:	4b55      	ldr	r3, [pc, #340]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0ed      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d126      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800629e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a6:	d10d      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80062a8:	4b4c      	ldr	r3, [pc, #304]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062b6:	0919      	lsrs	r1, r3, #4
 80062b8:	4b4a      	ldr	r3, [pc, #296]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80062ba:	400b      	ands	r3, r1
 80062bc:	4947      	ldr	r1, [pc, #284]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	610b      	str	r3, [r1, #16]
 80062c2:	e005      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80062c4:	4b45      	ldr	r3, [pc, #276]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	4a44      	ldr	r2, [pc, #272]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062ce:	6113      	str	r3, [r2, #16]
 80062d0:	4b42      	ldr	r3, [pc, #264]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062de:	493f      	ldr	r1, [pc, #252]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	670b      	str	r3, [r1, #112]	; 0x70
 80062e4:	e004      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
 80062e8:	75bb      	strb	r3, [r7, #22]
 80062ea:	e001      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8085 	beq.w	8006408 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006302:	2b28      	cmp	r3, #40	; 0x28
 8006304:	d866      	bhi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	080063e9 	.word	0x080063e9
 8006310:	080063d5 	.word	0x080063d5
 8006314:	080063d5 	.word	0x080063d5
 8006318:	080063d5 	.word	0x080063d5
 800631c:	080063d5 	.word	0x080063d5
 8006320:	080063d5 	.word	0x080063d5
 8006324:	080063d5 	.word	0x080063d5
 8006328:	080063d5 	.word	0x080063d5
 800632c:	080063b1 	.word	0x080063b1
 8006330:	080063d5 	.word	0x080063d5
 8006334:	080063d5 	.word	0x080063d5
 8006338:	080063d5 	.word	0x080063d5
 800633c:	080063d5 	.word	0x080063d5
 8006340:	080063d5 	.word	0x080063d5
 8006344:	080063d5 	.word	0x080063d5
 8006348:	080063d5 	.word	0x080063d5
 800634c:	080063c3 	.word	0x080063c3
 8006350:	080063d5 	.word	0x080063d5
 8006354:	080063d5 	.word	0x080063d5
 8006358:	080063d5 	.word	0x080063d5
 800635c:	080063d5 	.word	0x080063d5
 8006360:	080063d5 	.word	0x080063d5
 8006364:	080063d5 	.word	0x080063d5
 8006368:	080063d5 	.word	0x080063d5
 800636c:	080063e9 	.word	0x080063e9
 8006370:	080063d5 	.word	0x080063d5
 8006374:	080063d5 	.word	0x080063d5
 8006378:	080063d5 	.word	0x080063d5
 800637c:	080063d5 	.word	0x080063d5
 8006380:	080063d5 	.word	0x080063d5
 8006384:	080063d5 	.word	0x080063d5
 8006388:	080063d5 	.word	0x080063d5
 800638c:	080063e9 	.word	0x080063e9
 8006390:	080063d5 	.word	0x080063d5
 8006394:	080063d5 	.word	0x080063d5
 8006398:	080063d5 	.word	0x080063d5
 800639c:	080063d5 	.word	0x080063d5
 80063a0:	080063d5 	.word	0x080063d5
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	080063d5 	.word	0x080063d5
 80063ac:	080063e9 	.word	0x080063e9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3304      	adds	r3, #4
 80063b4:	2101      	movs	r1, #1
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fdfa 	bl	8006fb0 <RCCEx_PLL2_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063c0:	e013      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3324      	adds	r3, #36	; 0x24
 80063c6:	2101      	movs	r1, #1
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fea3 	bl	8007114 <RCCEx_PLL3_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063d2:	e00a      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	75fb      	strb	r3, [r7, #23]
      break;
 80063d8:	e007      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 80063da:	bf00      	nop
 80063dc:	58024400 	.word	0x58024400
 80063e0:	58024800 	.word	0x58024800
 80063e4:	00ffffcf 	.word	0x00ffffcf
      break;
 80063e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d109      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063f0:	4b96      	ldr	r3, [pc, #600]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063fc:	4993      	ldr	r1, [pc, #588]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	654b      	str	r3, [r1, #84]	; 0x54
 8006402:	e001      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d038      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006418:	2b05      	cmp	r3, #5
 800641a:	d821      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006467 	.word	0x08006467
 8006428:	0800643d 	.word	0x0800643d
 800642c:	0800644f 	.word	0x0800644f
 8006430:	08006467 	.word	0x08006467
 8006434:	08006467 	.word	0x08006467
 8006438:	08006467 	.word	0x08006467
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3304      	adds	r3, #4
 8006440:	2101      	movs	r1, #1
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fdb4 	bl	8006fb0 <RCCEx_PLL2_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800644c:	e00c      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3324      	adds	r3, #36	; 0x24
 8006452:	2101      	movs	r1, #1
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fe5d 	bl	8007114 <RCCEx_PLL3_Config>
 800645a:	4603      	mov	r3, r0
 800645c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800645e:	e003      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	75fb      	strb	r3, [r7, #23]
      break;
 8006464:	e000      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800646e:	4b77      	ldr	r3, [pc, #476]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	f023 0207 	bic.w	r2, r3, #7
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647a:	4974      	ldr	r1, [pc, #464]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800647c:	4313      	orrs	r3, r2
 800647e:	654b      	str	r3, [r1, #84]	; 0x54
 8006480:	e001      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	d03a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006498:	2b05      	cmp	r3, #5
 800649a:	d821      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800649c:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064e7 	.word	0x080064e7
 80064a8:	080064bd 	.word	0x080064bd
 80064ac:	080064cf 	.word	0x080064cf
 80064b0:	080064e7 	.word	0x080064e7
 80064b4:	080064e7 	.word	0x080064e7
 80064b8:	080064e7 	.word	0x080064e7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	2101      	movs	r1, #1
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fd74 	bl	8006fb0 <RCCEx_PLL2_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064cc:	e00c      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3324      	adds	r3, #36	; 0x24
 80064d2:	2101      	movs	r1, #1
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fe1d 	bl	8007114 <RCCEx_PLL3_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064de:	e003      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
      break;
 80064e4:	e000      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80064e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064ee:	4b57      	ldr	r3, [pc, #348]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f2:	f023 0207 	bic.w	r2, r3, #7
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fc:	4953      	ldr	r1, [pc, #332]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	658b      	str	r3, [r1, #88]	; 0x58
 8006502:	e001      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d04b      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800651a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800651e:	d02e      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006524:	d828      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652a:	d02a      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800652c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006530:	d822      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006532:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006536:	d026      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006538:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800653c:	d81c      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800653e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006542:	d010      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006548:	d816      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01d      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800654e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006552:	d111      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3304      	adds	r3, #4
 8006558:	2100      	movs	r1, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fd28 	bl	8006fb0 <RCCEx_PLL2_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006564:	e012      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3324      	adds	r3, #36	; 0x24
 800656a:	2102      	movs	r1, #2
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fdd1 	bl	8007114 <RCCEx_PLL3_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006576:	e009      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	75fb      	strb	r3, [r7, #23]
      break;
 800657c:	e006      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800657e:	bf00      	nop
 8006580:	e004      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800658a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006592:	4b2e      	ldr	r3, [pc, #184]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a0:	492a      	ldr	r1, [pc, #168]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	654b      	str	r3, [r1, #84]	; 0x54
 80065a6:	e001      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d04d      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065c2:	d02e      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80065c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065c8:	d828      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	d02a      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80065d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d4:	d822      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065da:	d026      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80065dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065e0:	d81c      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e6:	d010      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80065e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ec:	d816      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01d      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80065f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f6:	d111      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fcd6 	bl	8006fb0 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006608:	e012      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3324      	adds	r3, #36	; 0x24
 800660e:	2102      	movs	r1, #2
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fd7f 	bl	8007114 <RCCEx_PLL3_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800661a:	e009      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	75fb      	strb	r3, [r7, #23]
      break;
 8006620:	e006      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006622:	bf00      	nop
 8006624:	e004      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006626:	bf00      	nop
 8006628:	e002      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800662e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10c      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006636:	4b05      	ldr	r3, [pc, #20]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006644:	4901      	ldr	r1, [pc, #4]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006646:	4313      	orrs	r3, r2
 8006648:	658b      	str	r3, [r1, #88]	; 0x58
 800664a:	e003      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800664c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665c:	2b00      	cmp	r3, #0
 800665e:	d04b      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006666:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800666a:	d02e      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800666c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006670:	d828      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006676:	d02a      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667c:	d822      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800667e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006682:	d026      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006684:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006688:	d81c      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800668a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800668e:	d010      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006694:	d816      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01d      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800669a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800669e:	d111      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3304      	adds	r3, #4
 80066a4:	2100      	movs	r1, #0
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fc82 	bl	8006fb0 <RCCEx_PLL2_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066b0:	e012      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3324      	adds	r3, #36	; 0x24
 80066b6:	2102      	movs	r1, #2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fd2b 	bl	8007114 <RCCEx_PLL3_Config>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066c2:	e009      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]
      break;
 80066c8:	e006      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066ca:	bf00      	nop
 80066cc:	e004      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066ce:	bf00      	nop
 80066d0:	e002      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066d2:	bf00      	nop
 80066d4:	e000      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066de:	4b9d      	ldr	r3, [pc, #628]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066ec:	4999      	ldr	r1, [pc, #612]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	658b      	str	r3, [r1, #88]	; 0x58
 80066f2:	e001      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01a      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670e:	d10a      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3324      	adds	r3, #36	; 0x24
 8006714:	2102      	movs	r1, #2
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fcfc 	bl	8007114 <RCCEx_PLL3_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006726:	4b8b      	ldr	r3, [pc, #556]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006734:	4987      	ldr	r1, [pc, #540]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006736:	4313      	orrs	r3, r2
 8006738:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0310 	and.w	r3, r3, #16
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01a      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800674c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006750:	d10a      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3324      	adds	r3, #36	; 0x24
 8006756:	2102      	movs	r1, #2
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fcdb 	bl	8007114 <RCCEx_PLL3_Config>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006768:	4b7a      	ldr	r3, [pc, #488]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800676a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006776:	4977      	ldr	r1, [pc, #476]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006778:	4313      	orrs	r3, r2
 800677a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d034      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800678e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006792:	d01d      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006798:	d817      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800679e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a2:	d009      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80067a4:	e011      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3304      	adds	r3, #4
 80067aa:	2100      	movs	r1, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fbff 	bl	8006fb0 <RCCEx_PLL2_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067b6:	e00c      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3324      	adds	r3, #36	; 0x24
 80067bc:	2102      	movs	r1, #2
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fca8 	bl	8007114 <RCCEx_PLL3_Config>
 80067c4:	4603      	mov	r3, r0
 80067c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067c8:	e003      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	75fb      	strb	r3, [r7, #23]
      break;
 80067ce:	e000      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80067d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067d8:	4b5e      	ldr	r3, [pc, #376]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067e6:	495b      	ldr	r1, [pc, #364]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	658b      	str	r3, [r1, #88]	; 0x58
 80067ec:	e001      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d033      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006804:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006808:	d01c      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800680a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800680e:	d816      	bhi.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006814:	d003      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800681a:	d007      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800681c:	e00f      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800681e:	4b4d      	ldr	r3, [pc, #308]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	4a4c      	ldr	r2, [pc, #304]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006828:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800682a:	e00c      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3324      	adds	r3, #36	; 0x24
 8006830:	2101      	movs	r1, #1
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fc6e 	bl	8007114 <RCCEx_PLL3_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800683c:	e003      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	75fb      	strb	r3, [r7, #23]
      break;
 8006842:	e000      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800684c:	4b41      	ldr	r3, [pc, #260]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800684e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800685a:	493e      	ldr	r1, [pc, #248]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800685c:	4313      	orrs	r3, r2
 800685e:	654b      	str	r3, [r1, #84]	; 0x54
 8006860:	e001      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d029      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800687a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687e:	d007      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006880:	e00f      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006882:	4b34      	ldr	r3, [pc, #208]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	4a33      	ldr	r2, [pc, #204]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800688c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800688e:	e00b      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	2102      	movs	r1, #2
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fb8a 	bl	8006fb0 <RCCEx_PLL2_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80068a0:	e002      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	75fb      	strb	r3, [r7, #23]
      break;
 80068a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ba:	4926      	ldr	r1, [pc, #152]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068c0:	e001      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3324      	adds	r3, #36	; 0x24
 80068d6:	2102      	movs	r1, #2
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fc1b 	bl	8007114 <RCCEx_PLL3_Config>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d033      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068fc:	d017      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80068fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006902:	d811      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006908:	d013      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800690a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800690e:	d80b      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d010      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006918:	d106      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800691a:	4b0e      	ldr	r3, [pc, #56]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	4a0d      	ldr	r2, [pc, #52]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006924:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006926:	e007      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	75fb      	strb	r3, [r7, #23]
      break;
 800692c:	e004      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800692e:	bf00      	nop
 8006930:	e002      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006932:	bf00      	nop
 8006934:	e000      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10c      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800693e:	4b05      	ldr	r3, [pc, #20]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800694a:	4902      	ldr	r1, [pc, #8]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800694c:	4313      	orrs	r3, r2
 800694e:	654b      	str	r3, [r1, #84]	; 0x54
 8006950:	e004      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006952:	bf00      	nop
 8006954:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006968:	4b31      	ldr	r3, [pc, #196]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	492e      	ldr	r1, [pc, #184]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006976:	4313      	orrs	r3, r2
 8006978:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006986:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006994:	4926      	ldr	r1, [pc, #152]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006996:	4313      	orrs	r3, r2
 8006998:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d008      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069a6:	4b22      	ldr	r3, [pc, #136]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069b2:	491f      	ldr	r1, [pc, #124]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00d      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069c4:	4b1a      	ldr	r3, [pc, #104]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	4a19      	ldr	r2, [pc, #100]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ce:	6113      	str	r3, [r2, #16]
 80069d0:	4b17      	ldr	r3, [pc, #92]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069da:	4915      	ldr	r1, [pc, #84]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	da08      	bge.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069e8:	4b11      	ldr	r3, [pc, #68]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f4:	490e      	ldr	r1, [pc, #56]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a14:	4906      	ldr	r1, [pc, #24]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006a1a:	7dbb      	ldrb	r3, [r7, #22]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	e000      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	58024400 	.word	0x58024400

08006a34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a38:	f7ff f85a 	bl	8005af0 <HAL_RCC_GetHCLKFreq>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	091b      	lsrs	r3, r3, #4
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	4904      	ldr	r1, [pc, #16]	; (8006a5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a4a:	5ccb      	ldrb	r3, [r1, r3]
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	08009a84 	.word	0x08009a84

08006a60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b089      	sub	sp, #36	; 0x24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a68:	4ba1      	ldr	r3, [pc, #644]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006a72:	4b9f      	ldr	r3, [pc, #636]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	0b1b      	lsrs	r3, r3, #12
 8006a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a7e:	4b9c      	ldr	r3, [pc, #624]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	091b      	lsrs	r3, r3, #4
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006a8a:	4b99      	ldr	r3, [pc, #612]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	08db      	lsrs	r3, r3, #3
 8006a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	fb02 f303 	mul.w	r3, r2, r3
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8111 	beq.w	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	f000 8083 	beq.w	8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	f200 80a1 	bhi.w	8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d056      	beq.n	8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006aca:	e099      	b.n	8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006acc:	4b88      	ldr	r3, [pc, #544]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d02d      	beq.n	8006b34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ad8:	4b85      	ldr	r3, [pc, #532]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	08db      	lsrs	r3, r3, #3
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	4a84      	ldr	r2, [pc, #528]	; (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	ee07 3a90 	vmov	s15, r3
 8006af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b02:	4b7b      	ldr	r3, [pc, #492]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b32:	e087      	b.n	8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b46:	4b6a      	ldr	r3, [pc, #424]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b76:	e065      	b.n	8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8a:	4b59      	ldr	r3, [pc, #356]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bba:	e043      	b.n	8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bce:	4b48      	ldr	r3, [pc, #288]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006be2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bfe:	e021      	b.n	8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c12:	4b37      	ldr	r3, [pc, #220]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c44:	4b2a      	ldr	r3, [pc, #168]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	0a5b      	lsrs	r3, r3, #9
 8006c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c6a:	ee17 2a90 	vmov	r2, s15
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006c72:	4b1f      	ldr	r3, [pc, #124]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	0c1b      	lsrs	r3, r3, #16
 8006c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c98:	ee17 2a90 	vmov	r2, s15
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006ca0:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	0e1b      	lsrs	r3, r3, #24
 8006ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc6:	ee17 2a90 	vmov	r2, s15
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006cce:	e008      	b.n	8006ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	609a      	str	r2, [r3, #8]
}
 8006ce2:	bf00      	nop
 8006ce4:	3724      	adds	r7, #36	; 0x24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	58024400 	.word	0x58024400
 8006cf4:	03d09000 	.word	0x03d09000
 8006cf8:	46000000 	.word	0x46000000
 8006cfc:	4c742400 	.word	0x4c742400
 8006d00:	4a742400 	.word	0x4a742400
 8006d04:	4af42400 	.word	0x4af42400

08006d08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b089      	sub	sp, #36	; 0x24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d10:	4ba1      	ldr	r3, [pc, #644]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006d1a:	4b9f      	ldr	r3, [pc, #636]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	0d1b      	lsrs	r3, r3, #20
 8006d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d26:	4b9c      	ldr	r3, [pc, #624]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	0a1b      	lsrs	r3, r3, #8
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d32:	4b99      	ldr	r3, [pc, #612]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d36:	08db      	lsrs	r3, r3, #3
 8006d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	fb02 f303 	mul.w	r3, r2, r3
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8111 	beq.w	8006f78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	f000 8083 	beq.w	8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	f200 80a1 	bhi.w	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d056      	beq.n	8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d72:	e099      	b.n	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d74:	4b88      	ldr	r3, [pc, #544]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d02d      	beq.n	8006ddc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d80:	4b85      	ldr	r3, [pc, #532]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	08db      	lsrs	r3, r3, #3
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	4a84      	ldr	r2, [pc, #528]	; (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d90:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	ee07 3a90 	vmov	s15, r3
 8006d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006daa:	4b7b      	ldr	r3, [pc, #492]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006dda:	e087      	b.n	8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dee:	4b6a      	ldr	r3, [pc, #424]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e1e:	e065      	b.n	8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e32:	4b59      	ldr	r3, [pc, #356]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e62:	e043      	b.n	8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e76:	4b48      	ldr	r3, [pc, #288]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ea6:	e021      	b.n	8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eba:	4b37      	ldr	r3, [pc, #220]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ece:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006eec:	4b2a      	ldr	r3, [pc, #168]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	0a5b      	lsrs	r3, r3, #9
 8006ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f12:	ee17 2a90 	vmov	r2, s15
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006f1a:	4b1f      	ldr	r3, [pc, #124]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	0c1b      	lsrs	r3, r3, #16
 8006f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f24:	ee07 3a90 	vmov	s15, r3
 8006f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f40:	ee17 2a90 	vmov	r2, s15
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f48:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	0e1b      	lsrs	r3, r3, #24
 8006f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f6e:	ee17 2a90 	vmov	r2, s15
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f76:	e008      	b.n	8006f8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	609a      	str	r2, [r3, #8]
}
 8006f8a:	bf00      	nop
 8006f8c:	3724      	adds	r7, #36	; 0x24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	58024400 	.word	0x58024400
 8006f9c:	03d09000 	.word	0x03d09000
 8006fa0:	46000000 	.word	0x46000000
 8006fa4:	4c742400 	.word	0x4c742400
 8006fa8:	4a742400 	.word	0x4a742400
 8006fac:	4af42400 	.word	0x4af42400

08006fb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fbe:	4b53      	ldr	r3, [pc, #332]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d101      	bne.n	8006fce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e099      	b.n	8007102 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fce:	4b4f      	ldr	r3, [pc, #316]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a4e      	ldr	r2, [pc, #312]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8006fd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fda:	f7fa fabd 	bl	8001558 <HAL_GetTick>
 8006fde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fe0:	e008      	b.n	8006ff4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006fe2:	f7fa fab9 	bl	8001558 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e086      	b.n	8007102 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ff4:	4b45      	ldr	r3, [pc, #276]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1f0      	bne.n	8006fe2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007000:	4b42      	ldr	r3, [pc, #264]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	031b      	lsls	r3, r3, #12
 800700e:	493f      	ldr	r1, [pc, #252]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8007010:	4313      	orrs	r3, r2
 8007012:	628b      	str	r3, [r1, #40]	; 0x28
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	3b01      	subs	r3, #1
 800701a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	3b01      	subs	r3, #1
 8007024:	025b      	lsls	r3, r3, #9
 8007026:	b29b      	uxth	r3, r3
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	3b01      	subs	r3, #1
 8007030:	041b      	lsls	r3, r3, #16
 8007032:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	3b01      	subs	r3, #1
 800703e:	061b      	lsls	r3, r3, #24
 8007040:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007044:	4931      	ldr	r1, [pc, #196]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8007046:	4313      	orrs	r3, r2
 8007048:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800704a:	4b30      	ldr	r3, [pc, #192]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	492d      	ldr	r1, [pc, #180]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8007058:	4313      	orrs	r3, r2
 800705a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800705c:	4b2b      	ldr	r3, [pc, #172]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	f023 0220 	bic.w	r2, r3, #32
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	4928      	ldr	r1, [pc, #160]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 800706a:	4313      	orrs	r3, r2
 800706c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800706e:	4b27      	ldr	r3, [pc, #156]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	4a26      	ldr	r2, [pc, #152]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8007074:	f023 0310 	bic.w	r3, r3, #16
 8007078:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800707a:	4b24      	ldr	r3, [pc, #144]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 800707c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800707e:	4b24      	ldr	r3, [pc, #144]	; (8007110 <RCCEx_PLL2_Config+0x160>)
 8007080:	4013      	ands	r3, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	69d2      	ldr	r2, [r2, #28]
 8007086:	00d2      	lsls	r2, r2, #3
 8007088:	4920      	ldr	r1, [pc, #128]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 800708a:	4313      	orrs	r3, r2
 800708c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800708e:	4b1f      	ldr	r3, [pc, #124]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	4a1e      	ldr	r2, [pc, #120]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 8007094:	f043 0310 	orr.w	r3, r3, #16
 8007098:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d106      	bne.n	80070ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80070a0:	4b1a      	ldr	r3, [pc, #104]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	4a19      	ldr	r2, [pc, #100]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 80070a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070ac:	e00f      	b.n	80070ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d106      	bne.n	80070c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070b4:	4b15      	ldr	r3, [pc, #84]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	4a14      	ldr	r2, [pc, #80]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 80070ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070c0:	e005      	b.n	80070ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	4a11      	ldr	r2, [pc, #68]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 80070c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070ce:	4b0f      	ldr	r3, [pc, #60]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a0e      	ldr	r2, [pc, #56]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 80070d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070da:	f7fa fa3d 	bl	8001558 <HAL_GetTick>
 80070de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070e0:	e008      	b.n	80070f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80070e2:	f7fa fa39 	bl	8001558 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d901      	bls.n	80070f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e006      	b.n	8007102 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <RCCEx_PLL2_Config+0x15c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0f0      	beq.n	80070e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	58024400 	.word	0x58024400
 8007110:	ffff0007 	.word	0xffff0007

08007114 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007122:	4b53      	ldr	r3, [pc, #332]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 8007124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	2b03      	cmp	r3, #3
 800712c:	d101      	bne.n	8007132 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e099      	b.n	8007266 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007132:	4b4f      	ldr	r3, [pc, #316]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a4e      	ldr	r2, [pc, #312]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 8007138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800713c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713e:	f7fa fa0b 	bl	8001558 <HAL_GetTick>
 8007142:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007144:	e008      	b.n	8007158 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007146:	f7fa fa07 	bl	8001558 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d901      	bls.n	8007158 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e086      	b.n	8007266 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007158:	4b45      	ldr	r3, [pc, #276]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1f0      	bne.n	8007146 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007164:	4b42      	ldr	r3, [pc, #264]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	051b      	lsls	r3, r3, #20
 8007172:	493f      	ldr	r1, [pc, #252]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 8007174:	4313      	orrs	r3, r2
 8007176:	628b      	str	r3, [r1, #40]	; 0x28
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	3b01      	subs	r3, #1
 800717e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	3b01      	subs	r3, #1
 8007188:	025b      	lsls	r3, r3, #9
 800718a:	b29b      	uxth	r3, r3
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	3b01      	subs	r3, #1
 8007194:	041b      	lsls	r3, r3, #16
 8007196:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	061b      	lsls	r3, r3, #24
 80071a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071a8:	4931      	ldr	r1, [pc, #196]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071ae:	4b30      	ldr	r3, [pc, #192]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	492d      	ldr	r1, [pc, #180]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071c0:	4b2b      	ldr	r3, [pc, #172]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	4928      	ldr	r1, [pc, #160]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071d2:	4b27      	ldr	r3, [pc, #156]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	4a26      	ldr	r2, [pc, #152]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071de:	4b24      	ldr	r3, [pc, #144]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e2:	4b24      	ldr	r3, [pc, #144]	; (8007274 <RCCEx_PLL3_Config+0x160>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	69d2      	ldr	r2, [r2, #28]
 80071ea:	00d2      	lsls	r2, r2, #3
 80071ec:	4920      	ldr	r1, [pc, #128]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071f2:	4b1f      	ldr	r3, [pc, #124]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 80071f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007204:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	4a19      	ldr	r2, [pc, #100]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 800720a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800720e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007210:	e00f      	b.n	8007232 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d106      	bne.n	8007226 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	4a14      	ldr	r2, [pc, #80]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 800721e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007222:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007224:	e005      	b.n	8007232 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007226:	4b12      	ldr	r3, [pc, #72]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	4a11      	ldr	r2, [pc, #68]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 800722c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007230:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007232:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a0e      	ldr	r2, [pc, #56]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 8007238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800723c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800723e:	f7fa f98b 	bl	8001558 <HAL_GetTick>
 8007242:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007244:	e008      	b.n	8007258 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007246:	f7fa f987 	bl	8001558 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d901      	bls.n	8007258 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e006      	b.n	8007266 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007258:	4b05      	ldr	r3, [pc, #20]	; (8007270 <RCCEx_PLL3_Config+0x15c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0f0      	beq.n	8007246 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	58024400 	.word	0x58024400
 8007274:	ffff0007 	.word	0xffff0007

08007278 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e0f1      	b.n	800746e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a78      	ldr	r2, [pc, #480]	; (8007478 <HAL_SPI_Init+0x200>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00f      	beq.n	80072ba <HAL_SPI_Init+0x42>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a77      	ldr	r2, [pc, #476]	; (800747c <HAL_SPI_Init+0x204>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00a      	beq.n	80072ba <HAL_SPI_Init+0x42>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a75      	ldr	r2, [pc, #468]	; (8007480 <HAL_SPI_Init+0x208>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d005      	beq.n	80072ba <HAL_SPI_Init+0x42>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	2b0f      	cmp	r3, #15
 80072b4:	d901      	bls.n	80072ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e0d9      	b.n	800746e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fb90 	bl	80079e0 <SPI_GetPacketSize>
 80072c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a6c      	ldr	r2, [pc, #432]	; (8007478 <HAL_SPI_Init+0x200>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00c      	beq.n	80072e6 <HAL_SPI_Init+0x6e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a6a      	ldr	r2, [pc, #424]	; (800747c <HAL_SPI_Init+0x204>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d007      	beq.n	80072e6 <HAL_SPI_Init+0x6e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a69      	ldr	r2, [pc, #420]	; (8007480 <HAL_SPI_Init+0x208>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d002      	beq.n	80072e6 <HAL_SPI_Init+0x6e>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d811      	bhi.n	800730a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072ea:	4a63      	ldr	r2, [pc, #396]	; (8007478 <HAL_SPI_Init+0x200>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d009      	beq.n	8007304 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a61      	ldr	r2, [pc, #388]	; (800747c <HAL_SPI_Init+0x204>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d004      	beq.n	8007304 <HAL_SPI_Init+0x8c>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a60      	ldr	r2, [pc, #384]	; (8007480 <HAL_SPI_Init+0x208>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d104      	bne.n	800730e <HAL_SPI_Init+0x96>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b10      	cmp	r3, #16
 8007308:	d901      	bls.n	800730e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e0af      	b.n	800746e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7f9 fe3a 	bl	8000f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800734a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007354:	d119      	bne.n	800738a <HAL_SPI_Init+0x112>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800735e:	d103      	bne.n	8007368 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10c      	bne.n	800738a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007378:	d107      	bne.n	800738a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007388:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69da      	ldr	r2, [r3, #28]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	431a      	orrs	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739c:	ea42 0103 	orr.w	r1, r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ea:	ea42 0103 	orr.w	r1, r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d113      	bne.n	800742a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007414:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007428:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0201 	bic.w	r2, r2, #1
 8007438:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40013000 	.word	0x40013000
 800747c:	40003800 	.word	0x40003800
 8007480:	40003c00 	.word	0x40003c00

08007484 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	; 0x28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800749c:	6a3a      	ldr	r2, [r7, #32]
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	4013      	ands	r3, r2
 80074a2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80074b6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3330      	adds	r3, #48	; 0x30
 80074be:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d113      	bne.n	80074f2 <HAL_SPI_IRQHandler+0x6e>
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10e      	bne.n	80074f2 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
    handled = 1UL;
 80074ee:	2301      	movs	r3, #1
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10f      	bne.n	800751c <HAL_SPI_IRQHandler+0x98>
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800750c:	2b00      	cmp	r3, #0
 800750e:	d105      	bne.n	800751c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
    handled = 1UL;
 8007518:	2301      	movs	r3, #1
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10f      	bne.n	8007546 <HAL_SPI_IRQHandler+0xc2>
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
    handled = 1UL;
 8007542:	2301      	movs	r3, #1
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	2b00      	cmp	r3, #0
 800754a:	f040 815a 	bne.w	8007802 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 808b 	beq.w	8007670 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f042 0208 	orr.w	r2, r2, #8
 8007568:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699a      	ldr	r2, [r3, #24]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f042 0210 	orr.w	r2, r2, #16
 8007578:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	699a      	ldr	r2, [r3, #24]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007588:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0208 	bic.w	r2, r2, #8
 8007598:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d13d      	bne.n	8007624 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80075a8:	e036      	b.n	8007618 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	2b0f      	cmp	r3, #15
 80075b0:	d90b      	bls.n	80075ca <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075bc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	665a      	str	r2, [r3, #100]	; 0x64
 80075c8:	e01d      	b.n	8007606 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	2b07      	cmp	r3, #7
 80075d0:	d90b      	bls.n	80075ea <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	8812      	ldrh	r2, [r2, #0]
 80075da:	b292      	uxth	r2, r2
 80075dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e2:	1c9a      	adds	r2, r3, #2
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	665a      	str	r2, [r3, #100]	; 0x64
 80075e8:	e00d      	b.n	8007606 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f6:	7812      	ldrb	r2, [r2, #0]
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	b29a      	uxth	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1c2      	bne.n	80075aa <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f93b 	bl	80078a0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f90b 	bl	8007858 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007642:	e0e3      	b.n	800780c <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007644:	7cfb      	ldrb	r3, [r7, #19]
 8007646:	2b05      	cmp	r3, #5
 8007648:	d103      	bne.n	8007652 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8fa 	bl	8007844 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007650:	e0d9      	b.n	8007806 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007652:	7cfb      	ldrb	r3, [r7, #19]
 8007654:	2b04      	cmp	r3, #4
 8007656:	d103      	bne.n	8007660 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f8e9 	bl	8007830 <HAL_SPI_RxCpltCallback>
    return;
 800765e:	e0d2      	b.n	8007806 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007660:	7cfb      	ldrb	r3, [r7, #19]
 8007662:	2b03      	cmp	r3, #3
 8007664:	f040 80cf 	bne.w	8007806 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f8d7 	bl	800781c <HAL_SPI_TxCpltCallback>
    return;
 800766e:	e0ca      	b.n	8007806 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00d      	beq.n	8007696 <HAL_SPI_IRQHandler+0x212>
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	699a      	ldr	r2, [r3, #24]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007692:	619a      	str	r2, [r3, #24]

    return;
 8007694:	e0ba      	b.n	800780c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 80b5 	beq.w	800780c <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00f      	beq.n	80076cc <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b2:	f043 0204 	orr.w	r2, r3, #4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ca:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00f      	beq.n	80076f6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076dc:	f043 0201 	orr.w	r2, r3, #1
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	699a      	ldr	r2, [r3, #24]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076f4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00f      	beq.n	8007720 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007706:	f043 0208 	orr.w	r2, r3, #8
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800771e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00f      	beq.n	800774a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007730:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699a      	ldr	r2, [r3, #24]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0220 	orr.w	r2, r2, #32
 8007748:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007750:	2b00      	cmp	r3, #0
 8007752:	d05a      	beq.n	800780a <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0201 	bic.w	r2, r2, #1
 8007762:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6919      	ldr	r1, [r3, #16]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	4b29      	ldr	r3, [pc, #164]	; (8007814 <HAL_SPI_IRQHandler+0x390>)
 8007770:	400b      	ands	r3, r1
 8007772:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800777a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800777e:	d138      	bne.n	80077f2 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800778e:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d013      	beq.n	80077c0 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800779c:	4a1e      	ldr	r2, [pc, #120]	; (8007818 <HAL_SPI_IRQHandler+0x394>)
 800779e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fa feb1 	bl	800250c <HAL_DMA_Abort_IT>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d007      	beq.n	80077c0 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d020      	beq.n	800780a <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077cc:	4a12      	ldr	r2, [pc, #72]	; (8007818 <HAL_SPI_IRQHandler+0x394>)
 80077ce:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fa fe99 	bl	800250c <HAL_DMA_Abort_IT>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d014      	beq.n	800780a <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80077f0:	e00b      	b.n	800780a <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f82c 	bl	8007858 <HAL_SPI_ErrorCallback>
    return;
 8007800:	e003      	b.n	800780a <HAL_SPI_IRQHandler+0x386>
    return;
 8007802:	bf00      	nop
 8007804:	e002      	b.n	800780c <HAL_SPI_IRQHandler+0x388>
    return;
 8007806:	bf00      	nop
 8007808:	e000      	b.n	800780c <HAL_SPI_IRQHandler+0x388>
    return;
 800780a:	bf00      	nop
  }
}
 800780c:	3728      	adds	r7, #40	; 0x28
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	fffffc94 	.word	0xfffffc94
 8007818:	0800786d 	.word	0x0800786d

0800781c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7ff ffe0 	bl	8007858 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007898:	bf00      	nop
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0208 	orr.w	r2, r2, #8
 80078be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0210 	orr.w	r2, r2, #16
 80078ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0201 	bic.w	r2, r2, #1
 80078de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6919      	ldr	r1, [r3, #16]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b3c      	ldr	r3, [pc, #240]	; (80079dc <SPI_CloseTransfer+0x13c>)
 80078ec:	400b      	ands	r3, r1
 80078ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80078fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b04      	cmp	r3, #4
 800790a:	d014      	beq.n	8007936 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00f      	beq.n	8007936 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800791c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0220 	orr.w	r2, r2, #32
 8007934:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b03      	cmp	r3, #3
 8007940:	d014      	beq.n	800796c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00f      	beq.n	800796c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007952:	f043 0204 	orr.w	r2, r3, #4
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800796a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00f      	beq.n	8007996 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797c:	f043 0201 	orr.w	r2, r3, #1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699a      	ldr	r2, [r3, #24]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007994:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00f      	beq.n	80079c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a6:	f043 0208 	orr.w	r2, r3, #8
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	fffffc90 	.word	0xfffffc90

080079e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ec:	095b      	lsrs	r3, r3, #5
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	3301      	adds	r3, #1
 80079f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	3307      	adds	r3, #7
 80079fe:	08db      	lsrs	r3, r3, #3
 8007a00:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	fb02 f303 	mul.w	r3, r2, r3
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e042      	b.n	8007aae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d106      	bne.n	8007a40 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7f9 fb54 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2224      	movs	r2, #36	; 0x24
 8007a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0201 	bic.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fbeb 	bl	8008234 <UART_SetConfig>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e022      	b.n	8007aae <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f947 	bl	8008d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0201 	orr.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 f9ce 	bl	8008e48 <UART_CheckIdleState>
 8007aac:	4603      	mov	r3, r0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b0ba      	sub	sp, #232	; 0xe8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ade:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ae2:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d11b      	bne.n	8007b2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d015      	beq.n	8007b2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d105      	bne.n	8007b18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d009      	beq.n	8007b2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 835a 	beq.w	80081d6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
      }
      return;
 8007b2a:	e354      	b.n	80081d6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 811f 	beq.w	8007d74 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b3a:	4b8b      	ldr	r3, [pc, #556]	; (8007d68 <HAL_UART_IRQHandler+0x2b0>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b46:	4b89      	ldr	r3, [pc, #548]	; (8007d6c <HAL_UART_IRQHandler+0x2b4>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 8112 	beq.w	8007d74 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d011      	beq.n	8007b80 <HAL_UART_IRQHandler+0xc8>
 8007b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b76:	f043 0201 	orr.w	r2, r3, #1
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d011      	beq.n	8007bb0 <HAL_UART_IRQHandler+0xf8>
 8007b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba6:	f043 0204 	orr.w	r2, r3, #4
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d011      	beq.n	8007be0 <HAL_UART_IRQHandler+0x128>
 8007bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2204      	movs	r2, #4
 8007bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd6:	f043 0202 	orr.w	r2, r3, #2
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d017      	beq.n	8007c1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007bf8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007bfc:	4b5a      	ldr	r3, [pc, #360]	; (8007d68 <HAL_UART_IRQHandler+0x2b0>)
 8007bfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2208      	movs	r2, #8
 8007c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c12:	f043 0208 	orr.w	r2, r3, #8
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d012      	beq.n	8007c4e <HAL_UART_IRQHandler+0x196>
 8007c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00c      	beq.n	8007c4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c44:	f043 0220 	orr.w	r2, r3, #32
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 82c0 	beq.w	80081da <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d013      	beq.n	8007c8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d105      	bne.n	8007c7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	d005      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007caa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d04f      	beq.n	8007d52 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 f9dc 	bl	8009070 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d141      	bne.n	8007d4a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3308      	adds	r3, #8
 8007cee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1d9      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d013      	beq.n	8007d42 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1e:	4a14      	ldr	r2, [pc, #80]	; (8007d70 <HAL_UART_IRQHandler+0x2b8>)
 8007d20:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fa fbf0 	bl	800250c <HAL_DMA_Abort_IT>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d017      	beq.n	8007d62 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d40:	e00f      	b.n	8007d62 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa60 	bl	8008208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d48:	e00b      	b.n	8007d62 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa5c 	bl	8008208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d50:	e007      	b.n	8007d62 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa58 	bl	8008208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007d60:	e23b      	b.n	80081da <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d62:	bf00      	nop
    return;
 8007d64:	e239      	b.n	80081da <HAL_UART_IRQHandler+0x722>
 8007d66:	bf00      	nop
 8007d68:	10000001 	.word	0x10000001
 8007d6c:	04000120 	.word	0x04000120
 8007d70:	0800913d 	.word	0x0800913d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	f040 81ce 	bne.w	800811a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d82:	f003 0310 	and.w	r3, r3, #16
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 81c7 	beq.w	800811a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d90:	f003 0310 	and.w	r3, r3, #16
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 81c0 	beq.w	800811a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2210      	movs	r2, #16
 8007da0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dac:	2b40      	cmp	r3, #64	; 0x40
 8007dae:	f040 813b 	bne.w	8008028 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a8b      	ldr	r2, [pc, #556]	; (8007fe8 <HAL_UART_IRQHandler+0x530>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d059      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a89      	ldr	r2, [pc, #548]	; (8007fec <HAL_UART_IRQHandler+0x534>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d053      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a87      	ldr	r2, [pc, #540]	; (8007ff0 <HAL_UART_IRQHandler+0x538>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d04d      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a85      	ldr	r2, [pc, #532]	; (8007ff4 <HAL_UART_IRQHandler+0x53c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d047      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a83      	ldr	r2, [pc, #524]	; (8007ff8 <HAL_UART_IRQHandler+0x540>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d041      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a81      	ldr	r2, [pc, #516]	; (8007ffc <HAL_UART_IRQHandler+0x544>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d03b      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a7f      	ldr	r2, [pc, #508]	; (8008000 <HAL_UART_IRQHandler+0x548>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d035      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a7d      	ldr	r2, [pc, #500]	; (8008004 <HAL_UART_IRQHandler+0x54c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d02f      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a7b      	ldr	r2, [pc, #492]	; (8008008 <HAL_UART_IRQHandler+0x550>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d029      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a79      	ldr	r2, [pc, #484]	; (800800c <HAL_UART_IRQHandler+0x554>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d023      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a77      	ldr	r2, [pc, #476]	; (8008010 <HAL_UART_IRQHandler+0x558>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01d      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a75      	ldr	r2, [pc, #468]	; (8008014 <HAL_UART_IRQHandler+0x55c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d017      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a73      	ldr	r2, [pc, #460]	; (8008018 <HAL_UART_IRQHandler+0x560>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d011      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a71      	ldr	r2, [pc, #452]	; (800801c <HAL_UART_IRQHandler+0x564>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00b      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a6f      	ldr	r2, [pc, #444]	; (8008020 <HAL_UART_IRQHandler+0x568>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d005      	beq.n	8007e72 <HAL_UART_IRQHandler+0x3ba>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a6d      	ldr	r2, [pc, #436]	; (8008024 <HAL_UART_IRQHandler+0x56c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d105      	bne.n	8007e7e <HAL_UART_IRQHandler+0x3c6>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	e004      	b.n	8007e88 <HAL_UART_IRQHandler+0x3d0>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 81a4 	beq.w	80081de <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	f080 819c 	bcs.w	80081de <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007eac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eba:	f000 8086 	beq.w	8007fca <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ed6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007eda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ee8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007eec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ef4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1da      	bne.n	8007ebe <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f1a:	f023 0301 	bic.w	r3, r3, #1
 8007f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3308      	adds	r3, #8
 8007f28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f2c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f30:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e1      	bne.n	8007f08 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3308      	adds	r3, #8
 8007f4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3308      	adds	r3, #8
 8007f64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f68:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e3      	bne.n	8007f44 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f9a:	f023 0310 	bic.w	r3, r3, #16
 8007f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fac:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e4      	bne.n	8007f8a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7f9 ff83 	bl	8001ed0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f91c 	bl	800821c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fe4:	e0fb      	b.n	80081de <HAL_UART_IRQHandler+0x726>
 8007fe6:	bf00      	nop
 8007fe8:	40020010 	.word	0x40020010
 8007fec:	40020028 	.word	0x40020028
 8007ff0:	40020040 	.word	0x40020040
 8007ff4:	40020058 	.word	0x40020058
 8007ff8:	40020070 	.word	0x40020070
 8007ffc:	40020088 	.word	0x40020088
 8008000:	400200a0 	.word	0x400200a0
 8008004:	400200b8 	.word	0x400200b8
 8008008:	40020410 	.word	0x40020410
 800800c:	40020428 	.word	0x40020428
 8008010:	40020440 	.word	0x40020440
 8008014:	40020458 	.word	0x40020458
 8008018:	40020470 	.word	0x40020470
 800801c:	40020488 	.word	0x40020488
 8008020:	400204a0 	.word	0x400204a0
 8008024:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008034:	b29b      	uxth	r3, r3
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008042:	b29b      	uxth	r3, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 80cc 	beq.w	80081e2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800804a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 80c7 	beq.w	80081e2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	e853 3f00 	ldrex	r3, [r3]
 8008060:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
 8008072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008076:	647b      	str	r3, [r7, #68]	; 0x44
 8008078:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800807c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e4      	bne.n	8008054 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	623b      	str	r3, [r7, #32]
   return(result);
 800809a:	6a3a      	ldr	r2, [r7, #32]
 800809c:	4b54      	ldr	r3, [pc, #336]	; (80081f0 <HAL_UART_IRQHandler+0x738>)
 800809e:	4013      	ands	r3, r2
 80080a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080ae:	633a      	str	r2, [r7, #48]	; 0x30
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e3      	bne.n	800808a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0310 	bic.w	r3, r3, #16
 80080ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080f8:	61fb      	str	r3, [r7, #28]
 80080fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	69b9      	ldr	r1, [r7, #24]
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	617b      	str	r3, [r7, #20]
   return(result);
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e4      	bne.n	80080d6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800810c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f882 	bl	800821c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008118:	e063      	b.n	80081e2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800811a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00e      	beq.n	8008144 <HAL_UART_IRQHandler+0x68c>
 8008126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800812a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d008      	beq.n	8008144 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800813a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 f83e 	bl	80091be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008142:	e051      	b.n	80081e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814c:	2b00      	cmp	r3, #0
 800814e:	d014      	beq.n	800817a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008158:	2b00      	cmp	r3, #0
 800815a:	d105      	bne.n	8008168 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800815c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d008      	beq.n	800817a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816c:	2b00      	cmp	r3, #0
 800816e:	d03a      	beq.n	80081e6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	4798      	blx	r3
    }
    return;
 8008178:	e035      	b.n	80081e6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800817a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d009      	beq.n	800819a <HAL_UART_IRQHandler+0x6e2>
 8008186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 ffe8 	bl	8009168 <UART_EndTransmit_IT>
    return;
 8008198:	e026      	b.n	80081e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800819a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d009      	beq.n	80081ba <HAL_UART_IRQHandler+0x702>
 80081a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 f817 	bl	80091e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081b8:	e016      	b.n	80081e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80081ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d010      	beq.n	80081e8 <HAL_UART_IRQHandler+0x730>
 80081c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	da0c      	bge.n	80081e8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 ffff 	bl	80091d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081d4:	e008      	b.n	80081e8 <HAL_UART_IRQHandler+0x730>
      return;
 80081d6:	bf00      	nop
 80081d8:	e006      	b.n	80081e8 <HAL_UART_IRQHandler+0x730>
    return;
 80081da:	bf00      	nop
 80081dc:	e004      	b.n	80081e8 <HAL_UART_IRQHandler+0x730>
      return;
 80081de:	bf00      	nop
 80081e0:	e002      	b.n	80081e8 <HAL_UART_IRQHandler+0x730>
      return;
 80081e2:	bf00      	nop
 80081e4:	e000      	b.n	80081e8 <HAL_UART_IRQHandler+0x730>
    return;
 80081e6:	bf00      	nop
  }
}
 80081e8:	37e8      	adds	r7, #232	; 0xe8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	effffffe 	.word	0xeffffffe

080081f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008238:	b092      	sub	sp, #72	; 0x48
 800823a:	af00      	add	r7, sp, #0
 800823c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	431a      	orrs	r2, r3
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	431a      	orrs	r2, r3
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	4313      	orrs	r3, r2
 800825a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4bbe      	ldr	r3, [pc, #760]	; (800855c <UART_SetConfig+0x328>)
 8008264:	4013      	ands	r3, r2
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	6812      	ldr	r2, [r2, #0]
 800826a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800826c:	430b      	orrs	r3, r1
 800826e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4ab3      	ldr	r2, [pc, #716]	; (8008560 <UART_SetConfig+0x32c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d004      	beq.n	80082a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800829c:	4313      	orrs	r3, r2
 800829e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	4baf      	ldr	r3, [pc, #700]	; (8008564 <UART_SetConfig+0x330>)
 80082a8:	4013      	ands	r3, r2
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	f023 010f 	bic.w	r1, r3, #15
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4aa6      	ldr	r2, [pc, #664]	; (8008568 <UART_SetConfig+0x334>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d177      	bne.n	80083c4 <UART_SetConfig+0x190>
 80082d4:	4ba5      	ldr	r3, [pc, #660]	; (800856c <UART_SetConfig+0x338>)
 80082d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082dc:	2b28      	cmp	r3, #40	; 0x28
 80082de:	d86d      	bhi.n	80083bc <UART_SetConfig+0x188>
 80082e0:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <UART_SetConfig+0xb4>)
 80082e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e6:	bf00      	nop
 80082e8:	0800838d 	.word	0x0800838d
 80082ec:	080083bd 	.word	0x080083bd
 80082f0:	080083bd 	.word	0x080083bd
 80082f4:	080083bd 	.word	0x080083bd
 80082f8:	080083bd 	.word	0x080083bd
 80082fc:	080083bd 	.word	0x080083bd
 8008300:	080083bd 	.word	0x080083bd
 8008304:	080083bd 	.word	0x080083bd
 8008308:	08008395 	.word	0x08008395
 800830c:	080083bd 	.word	0x080083bd
 8008310:	080083bd 	.word	0x080083bd
 8008314:	080083bd 	.word	0x080083bd
 8008318:	080083bd 	.word	0x080083bd
 800831c:	080083bd 	.word	0x080083bd
 8008320:	080083bd 	.word	0x080083bd
 8008324:	080083bd 	.word	0x080083bd
 8008328:	0800839d 	.word	0x0800839d
 800832c:	080083bd 	.word	0x080083bd
 8008330:	080083bd 	.word	0x080083bd
 8008334:	080083bd 	.word	0x080083bd
 8008338:	080083bd 	.word	0x080083bd
 800833c:	080083bd 	.word	0x080083bd
 8008340:	080083bd 	.word	0x080083bd
 8008344:	080083bd 	.word	0x080083bd
 8008348:	080083a5 	.word	0x080083a5
 800834c:	080083bd 	.word	0x080083bd
 8008350:	080083bd 	.word	0x080083bd
 8008354:	080083bd 	.word	0x080083bd
 8008358:	080083bd 	.word	0x080083bd
 800835c:	080083bd 	.word	0x080083bd
 8008360:	080083bd 	.word	0x080083bd
 8008364:	080083bd 	.word	0x080083bd
 8008368:	080083ad 	.word	0x080083ad
 800836c:	080083bd 	.word	0x080083bd
 8008370:	080083bd 	.word	0x080083bd
 8008374:	080083bd 	.word	0x080083bd
 8008378:	080083bd 	.word	0x080083bd
 800837c:	080083bd 	.word	0x080083bd
 8008380:	080083bd 	.word	0x080083bd
 8008384:	080083bd 	.word	0x080083bd
 8008388:	080083b5 	.word	0x080083b5
 800838c:	2301      	movs	r3, #1
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008392:	e222      	b.n	80087da <UART_SetConfig+0x5a6>
 8008394:	2304      	movs	r3, #4
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839a:	e21e      	b.n	80087da <UART_SetConfig+0x5a6>
 800839c:	2308      	movs	r3, #8
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a2:	e21a      	b.n	80087da <UART_SetConfig+0x5a6>
 80083a4:	2310      	movs	r3, #16
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e216      	b.n	80087da <UART_SetConfig+0x5a6>
 80083ac:	2320      	movs	r3, #32
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e212      	b.n	80087da <UART_SetConfig+0x5a6>
 80083b4:	2340      	movs	r3, #64	; 0x40
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e20e      	b.n	80087da <UART_SetConfig+0x5a6>
 80083bc:	2380      	movs	r3, #128	; 0x80
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e20a      	b.n	80087da <UART_SetConfig+0x5a6>
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a69      	ldr	r2, [pc, #420]	; (8008570 <UART_SetConfig+0x33c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d130      	bne.n	8008430 <UART_SetConfig+0x1fc>
 80083ce:	4b67      	ldr	r3, [pc, #412]	; (800856c <UART_SetConfig+0x338>)
 80083d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	d826      	bhi.n	8008428 <UART_SetConfig+0x1f4>
 80083da:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <UART_SetConfig+0x1ac>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	080083f9 	.word	0x080083f9
 80083e4:	08008401 	.word	0x08008401
 80083e8:	08008409 	.word	0x08008409
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008419 	.word	0x08008419
 80083f4:	08008421 	.word	0x08008421
 80083f8:	2300      	movs	r3, #0
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fe:	e1ec      	b.n	80087da <UART_SetConfig+0x5a6>
 8008400:	2304      	movs	r3, #4
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008406:	e1e8      	b.n	80087da <UART_SetConfig+0x5a6>
 8008408:	2308      	movs	r3, #8
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840e:	e1e4      	b.n	80087da <UART_SetConfig+0x5a6>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008416:	e1e0      	b.n	80087da <UART_SetConfig+0x5a6>
 8008418:	2320      	movs	r3, #32
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e1dc      	b.n	80087da <UART_SetConfig+0x5a6>
 8008420:	2340      	movs	r3, #64	; 0x40
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e1d8      	b.n	80087da <UART_SetConfig+0x5a6>
 8008428:	2380      	movs	r3, #128	; 0x80
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e1d4      	b.n	80087da <UART_SetConfig+0x5a6>
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a4f      	ldr	r2, [pc, #316]	; (8008574 <UART_SetConfig+0x340>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d130      	bne.n	800849c <UART_SetConfig+0x268>
 800843a:	4b4c      	ldr	r3, [pc, #304]	; (800856c <UART_SetConfig+0x338>)
 800843c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	2b05      	cmp	r3, #5
 8008444:	d826      	bhi.n	8008494 <UART_SetConfig+0x260>
 8008446:	a201      	add	r2, pc, #4	; (adr r2, 800844c <UART_SetConfig+0x218>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	08008465 	.word	0x08008465
 8008450:	0800846d 	.word	0x0800846d
 8008454:	08008475 	.word	0x08008475
 8008458:	0800847d 	.word	0x0800847d
 800845c:	08008485 	.word	0x08008485
 8008460:	0800848d 	.word	0x0800848d
 8008464:	2300      	movs	r3, #0
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846a:	e1b6      	b.n	80087da <UART_SetConfig+0x5a6>
 800846c:	2304      	movs	r3, #4
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008472:	e1b2      	b.n	80087da <UART_SetConfig+0x5a6>
 8008474:	2308      	movs	r3, #8
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847a:	e1ae      	b.n	80087da <UART_SetConfig+0x5a6>
 800847c:	2310      	movs	r3, #16
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e1aa      	b.n	80087da <UART_SetConfig+0x5a6>
 8008484:	2320      	movs	r3, #32
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e1a6      	b.n	80087da <UART_SetConfig+0x5a6>
 800848c:	2340      	movs	r3, #64	; 0x40
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e1a2      	b.n	80087da <UART_SetConfig+0x5a6>
 8008494:	2380      	movs	r3, #128	; 0x80
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e19e      	b.n	80087da <UART_SetConfig+0x5a6>
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a35      	ldr	r2, [pc, #212]	; (8008578 <UART_SetConfig+0x344>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d130      	bne.n	8008508 <UART_SetConfig+0x2d4>
 80084a6:	4b31      	ldr	r3, [pc, #196]	; (800856c <UART_SetConfig+0x338>)
 80084a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	2b05      	cmp	r3, #5
 80084b0:	d826      	bhi.n	8008500 <UART_SetConfig+0x2cc>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <UART_SetConfig+0x284>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	080084d1 	.word	0x080084d1
 80084bc:	080084d9 	.word	0x080084d9
 80084c0:	080084e1 	.word	0x080084e1
 80084c4:	080084e9 	.word	0x080084e9
 80084c8:	080084f1 	.word	0x080084f1
 80084cc:	080084f9 	.word	0x080084f9
 80084d0:	2300      	movs	r3, #0
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d6:	e180      	b.n	80087da <UART_SetConfig+0x5a6>
 80084d8:	2304      	movs	r3, #4
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084de:	e17c      	b.n	80087da <UART_SetConfig+0x5a6>
 80084e0:	2308      	movs	r3, #8
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e6:	e178      	b.n	80087da <UART_SetConfig+0x5a6>
 80084e8:	2310      	movs	r3, #16
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ee:	e174      	b.n	80087da <UART_SetConfig+0x5a6>
 80084f0:	2320      	movs	r3, #32
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f6:	e170      	b.n	80087da <UART_SetConfig+0x5a6>
 80084f8:	2340      	movs	r3, #64	; 0x40
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fe:	e16c      	b.n	80087da <UART_SetConfig+0x5a6>
 8008500:	2380      	movs	r3, #128	; 0x80
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008506:	e168      	b.n	80087da <UART_SetConfig+0x5a6>
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1b      	ldr	r2, [pc, #108]	; (800857c <UART_SetConfig+0x348>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d142      	bne.n	8008598 <UART_SetConfig+0x364>
 8008512:	4b16      	ldr	r3, [pc, #88]	; (800856c <UART_SetConfig+0x338>)
 8008514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b05      	cmp	r3, #5
 800851c:	d838      	bhi.n	8008590 <UART_SetConfig+0x35c>
 800851e:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <UART_SetConfig+0x2f0>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	0800853d 	.word	0x0800853d
 8008528:	08008545 	.word	0x08008545
 800852c:	0800854d 	.word	0x0800854d
 8008530:	08008555 	.word	0x08008555
 8008534:	08008581 	.word	0x08008581
 8008538:	08008589 	.word	0x08008589
 800853c:	2300      	movs	r3, #0
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008542:	e14a      	b.n	80087da <UART_SetConfig+0x5a6>
 8008544:	2304      	movs	r3, #4
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854a:	e146      	b.n	80087da <UART_SetConfig+0x5a6>
 800854c:	2308      	movs	r3, #8
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008552:	e142      	b.n	80087da <UART_SetConfig+0x5a6>
 8008554:	2310      	movs	r3, #16
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855a:	e13e      	b.n	80087da <UART_SetConfig+0x5a6>
 800855c:	cfff69f3 	.word	0xcfff69f3
 8008560:	58000c00 	.word	0x58000c00
 8008564:	11fff4ff 	.word	0x11fff4ff
 8008568:	40011000 	.word	0x40011000
 800856c:	58024400 	.word	0x58024400
 8008570:	40004400 	.word	0x40004400
 8008574:	40004800 	.word	0x40004800
 8008578:	40004c00 	.word	0x40004c00
 800857c:	40005000 	.word	0x40005000
 8008580:	2320      	movs	r3, #32
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008586:	e128      	b.n	80087da <UART_SetConfig+0x5a6>
 8008588:	2340      	movs	r3, #64	; 0x40
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858e:	e124      	b.n	80087da <UART_SetConfig+0x5a6>
 8008590:	2380      	movs	r3, #128	; 0x80
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008596:	e120      	b.n	80087da <UART_SetConfig+0x5a6>
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4acb      	ldr	r2, [pc, #812]	; (80088cc <UART_SetConfig+0x698>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d176      	bne.n	8008690 <UART_SetConfig+0x45c>
 80085a2:	4bcb      	ldr	r3, [pc, #812]	; (80088d0 <UART_SetConfig+0x69c>)
 80085a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085aa:	2b28      	cmp	r3, #40	; 0x28
 80085ac:	d86c      	bhi.n	8008688 <UART_SetConfig+0x454>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <UART_SetConfig+0x380>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	08008659 	.word	0x08008659
 80085b8:	08008689 	.word	0x08008689
 80085bc:	08008689 	.word	0x08008689
 80085c0:	08008689 	.word	0x08008689
 80085c4:	08008689 	.word	0x08008689
 80085c8:	08008689 	.word	0x08008689
 80085cc:	08008689 	.word	0x08008689
 80085d0:	08008689 	.word	0x08008689
 80085d4:	08008661 	.word	0x08008661
 80085d8:	08008689 	.word	0x08008689
 80085dc:	08008689 	.word	0x08008689
 80085e0:	08008689 	.word	0x08008689
 80085e4:	08008689 	.word	0x08008689
 80085e8:	08008689 	.word	0x08008689
 80085ec:	08008689 	.word	0x08008689
 80085f0:	08008689 	.word	0x08008689
 80085f4:	08008669 	.word	0x08008669
 80085f8:	08008689 	.word	0x08008689
 80085fc:	08008689 	.word	0x08008689
 8008600:	08008689 	.word	0x08008689
 8008604:	08008689 	.word	0x08008689
 8008608:	08008689 	.word	0x08008689
 800860c:	08008689 	.word	0x08008689
 8008610:	08008689 	.word	0x08008689
 8008614:	08008671 	.word	0x08008671
 8008618:	08008689 	.word	0x08008689
 800861c:	08008689 	.word	0x08008689
 8008620:	08008689 	.word	0x08008689
 8008624:	08008689 	.word	0x08008689
 8008628:	08008689 	.word	0x08008689
 800862c:	08008689 	.word	0x08008689
 8008630:	08008689 	.word	0x08008689
 8008634:	08008679 	.word	0x08008679
 8008638:	08008689 	.word	0x08008689
 800863c:	08008689 	.word	0x08008689
 8008640:	08008689 	.word	0x08008689
 8008644:	08008689 	.word	0x08008689
 8008648:	08008689 	.word	0x08008689
 800864c:	08008689 	.word	0x08008689
 8008650:	08008689 	.word	0x08008689
 8008654:	08008681 	.word	0x08008681
 8008658:	2301      	movs	r3, #1
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865e:	e0bc      	b.n	80087da <UART_SetConfig+0x5a6>
 8008660:	2304      	movs	r3, #4
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008666:	e0b8      	b.n	80087da <UART_SetConfig+0x5a6>
 8008668:	2308      	movs	r3, #8
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866e:	e0b4      	b.n	80087da <UART_SetConfig+0x5a6>
 8008670:	2310      	movs	r3, #16
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008676:	e0b0      	b.n	80087da <UART_SetConfig+0x5a6>
 8008678:	2320      	movs	r3, #32
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867e:	e0ac      	b.n	80087da <UART_SetConfig+0x5a6>
 8008680:	2340      	movs	r3, #64	; 0x40
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008686:	e0a8      	b.n	80087da <UART_SetConfig+0x5a6>
 8008688:	2380      	movs	r3, #128	; 0x80
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868e:	e0a4      	b.n	80087da <UART_SetConfig+0x5a6>
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a8f      	ldr	r2, [pc, #572]	; (80088d4 <UART_SetConfig+0x6a0>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d130      	bne.n	80086fc <UART_SetConfig+0x4c8>
 800869a:	4b8d      	ldr	r3, [pc, #564]	; (80088d0 <UART_SetConfig+0x69c>)
 800869c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869e:	f003 0307 	and.w	r3, r3, #7
 80086a2:	2b05      	cmp	r3, #5
 80086a4:	d826      	bhi.n	80086f4 <UART_SetConfig+0x4c0>
 80086a6:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <UART_SetConfig+0x478>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086c5 	.word	0x080086c5
 80086b0:	080086cd 	.word	0x080086cd
 80086b4:	080086d5 	.word	0x080086d5
 80086b8:	080086dd 	.word	0x080086dd
 80086bc:	080086e5 	.word	0x080086e5
 80086c0:	080086ed 	.word	0x080086ed
 80086c4:	2300      	movs	r3, #0
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ca:	e086      	b.n	80087da <UART_SetConfig+0x5a6>
 80086cc:	2304      	movs	r3, #4
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d2:	e082      	b.n	80087da <UART_SetConfig+0x5a6>
 80086d4:	2308      	movs	r3, #8
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086da:	e07e      	b.n	80087da <UART_SetConfig+0x5a6>
 80086dc:	2310      	movs	r3, #16
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e2:	e07a      	b.n	80087da <UART_SetConfig+0x5a6>
 80086e4:	2320      	movs	r3, #32
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e076      	b.n	80087da <UART_SetConfig+0x5a6>
 80086ec:	2340      	movs	r3, #64	; 0x40
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f2:	e072      	b.n	80087da <UART_SetConfig+0x5a6>
 80086f4:	2380      	movs	r3, #128	; 0x80
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e06e      	b.n	80087da <UART_SetConfig+0x5a6>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a75      	ldr	r2, [pc, #468]	; (80088d8 <UART_SetConfig+0x6a4>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d130      	bne.n	8008768 <UART_SetConfig+0x534>
 8008706:	4b72      	ldr	r3, [pc, #456]	; (80088d0 <UART_SetConfig+0x69c>)
 8008708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870a:	f003 0307 	and.w	r3, r3, #7
 800870e:	2b05      	cmp	r3, #5
 8008710:	d826      	bhi.n	8008760 <UART_SetConfig+0x52c>
 8008712:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <UART_SetConfig+0x4e4>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	08008731 	.word	0x08008731
 800871c:	08008739 	.word	0x08008739
 8008720:	08008741 	.word	0x08008741
 8008724:	08008749 	.word	0x08008749
 8008728:	08008751 	.word	0x08008751
 800872c:	08008759 	.word	0x08008759
 8008730:	2300      	movs	r3, #0
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008736:	e050      	b.n	80087da <UART_SetConfig+0x5a6>
 8008738:	2304      	movs	r3, #4
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873e:	e04c      	b.n	80087da <UART_SetConfig+0x5a6>
 8008740:	2308      	movs	r3, #8
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e048      	b.n	80087da <UART_SetConfig+0x5a6>
 8008748:	2310      	movs	r3, #16
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e044      	b.n	80087da <UART_SetConfig+0x5a6>
 8008750:	2320      	movs	r3, #32
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008756:	e040      	b.n	80087da <UART_SetConfig+0x5a6>
 8008758:	2340      	movs	r3, #64	; 0x40
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875e:	e03c      	b.n	80087da <UART_SetConfig+0x5a6>
 8008760:	2380      	movs	r3, #128	; 0x80
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e038      	b.n	80087da <UART_SetConfig+0x5a6>
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a5b      	ldr	r2, [pc, #364]	; (80088dc <UART_SetConfig+0x6a8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d130      	bne.n	80087d4 <UART_SetConfig+0x5a0>
 8008772:	4b57      	ldr	r3, [pc, #348]	; (80088d0 <UART_SetConfig+0x69c>)
 8008774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b05      	cmp	r3, #5
 800877c:	d826      	bhi.n	80087cc <UART_SetConfig+0x598>
 800877e:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <UART_SetConfig+0x550>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	0800879d 	.word	0x0800879d
 8008788:	080087a5 	.word	0x080087a5
 800878c:	080087ad 	.word	0x080087ad
 8008790:	080087b5 	.word	0x080087b5
 8008794:	080087bd 	.word	0x080087bd
 8008798:	080087c5 	.word	0x080087c5
 800879c:	2302      	movs	r3, #2
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a2:	e01a      	b.n	80087da <UART_SetConfig+0x5a6>
 80087a4:	2304      	movs	r3, #4
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087aa:	e016      	b.n	80087da <UART_SetConfig+0x5a6>
 80087ac:	2308      	movs	r3, #8
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b2:	e012      	b.n	80087da <UART_SetConfig+0x5a6>
 80087b4:	2310      	movs	r3, #16
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ba:	e00e      	b.n	80087da <UART_SetConfig+0x5a6>
 80087bc:	2320      	movs	r3, #32
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087c2:	e00a      	b.n	80087da <UART_SetConfig+0x5a6>
 80087c4:	2340      	movs	r3, #64	; 0x40
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ca:	e006      	b.n	80087da <UART_SetConfig+0x5a6>
 80087cc:	2380      	movs	r3, #128	; 0x80
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d2:	e002      	b.n	80087da <UART_SetConfig+0x5a6>
 80087d4:	2380      	movs	r3, #128	; 0x80
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a3f      	ldr	r2, [pc, #252]	; (80088dc <UART_SetConfig+0x6a8>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	f040 80f8 	bne.w	80089d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087ea:	2b20      	cmp	r3, #32
 80087ec:	dc46      	bgt.n	800887c <UART_SetConfig+0x648>
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	f2c0 8082 	blt.w	80088f8 <UART_SetConfig+0x6c4>
 80087f4:	3b02      	subs	r3, #2
 80087f6:	2b1e      	cmp	r3, #30
 80087f8:	d87e      	bhi.n	80088f8 <UART_SetConfig+0x6c4>
 80087fa:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <UART_SetConfig+0x5cc>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	08008883 	.word	0x08008883
 8008804:	080088f9 	.word	0x080088f9
 8008808:	0800888b 	.word	0x0800888b
 800880c:	080088f9 	.word	0x080088f9
 8008810:	080088f9 	.word	0x080088f9
 8008814:	080088f9 	.word	0x080088f9
 8008818:	0800889b 	.word	0x0800889b
 800881c:	080088f9 	.word	0x080088f9
 8008820:	080088f9 	.word	0x080088f9
 8008824:	080088f9 	.word	0x080088f9
 8008828:	080088f9 	.word	0x080088f9
 800882c:	080088f9 	.word	0x080088f9
 8008830:	080088f9 	.word	0x080088f9
 8008834:	080088f9 	.word	0x080088f9
 8008838:	080088ab 	.word	0x080088ab
 800883c:	080088f9 	.word	0x080088f9
 8008840:	080088f9 	.word	0x080088f9
 8008844:	080088f9 	.word	0x080088f9
 8008848:	080088f9 	.word	0x080088f9
 800884c:	080088f9 	.word	0x080088f9
 8008850:	080088f9 	.word	0x080088f9
 8008854:	080088f9 	.word	0x080088f9
 8008858:	080088f9 	.word	0x080088f9
 800885c:	080088f9 	.word	0x080088f9
 8008860:	080088f9 	.word	0x080088f9
 8008864:	080088f9 	.word	0x080088f9
 8008868:	080088f9 	.word	0x080088f9
 800886c:	080088f9 	.word	0x080088f9
 8008870:	080088f9 	.word	0x080088f9
 8008874:	080088f9 	.word	0x080088f9
 8008878:	080088eb 	.word	0x080088eb
 800887c:	2b40      	cmp	r3, #64	; 0x40
 800887e:	d037      	beq.n	80088f0 <UART_SetConfig+0x6bc>
 8008880:	e03a      	b.n	80088f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008882:	f7fe f8d7 	bl	8006a34 <HAL_RCCEx_GetD3PCLK1Freq>
 8008886:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008888:	e03c      	b.n	8008904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800888a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe f8e6 	bl	8006a60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008898:	e034      	b.n	8008904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800889a:	f107 0318 	add.w	r3, r7, #24
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fa32 	bl	8006d08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a8:	e02c      	b.n	8008904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <UART_SetConfig+0x69c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d016      	beq.n	80088e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088b6:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <UART_SetConfig+0x69c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	08db      	lsrs	r3, r3, #3
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	4a07      	ldr	r2, [pc, #28]	; (80088e0 <UART_SetConfig+0x6ac>)
 80088c2:	fa22 f303 	lsr.w	r3, r2, r3
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088c8:	e01c      	b.n	8008904 <UART_SetConfig+0x6d0>
 80088ca:	bf00      	nop
 80088cc:	40011400 	.word	0x40011400
 80088d0:	58024400 	.word	0x58024400
 80088d4:	40007800 	.word	0x40007800
 80088d8:	40007c00 	.word	0x40007c00
 80088dc:	58000c00 	.word	0x58000c00
 80088e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80088e4:	4b9d      	ldr	r3, [pc, #628]	; (8008b5c <UART_SetConfig+0x928>)
 80088e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e8:	e00c      	b.n	8008904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088ea:	4b9d      	ldr	r3, [pc, #628]	; (8008b60 <UART_SetConfig+0x92c>)
 80088ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ee:	e009      	b.n	8008904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f6:	e005      	b.n	8008904 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008902:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 81de 	beq.w	8008cc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	4a94      	ldr	r2, [pc, #592]	; (8008b64 <UART_SetConfig+0x930>)
 8008912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008916:	461a      	mov	r2, r3
 8008918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891a:	fbb3 f3f2 	udiv	r3, r3, r2
 800891e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	4613      	mov	r3, r2
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	4413      	add	r3, r2
 800892a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800892c:	429a      	cmp	r2, r3
 800892e:	d305      	bcc.n	800893c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008938:	429a      	cmp	r2, r3
 800893a:	d903      	bls.n	8008944 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008942:	e1c1      	b.n	8008cc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008946:	2200      	movs	r2, #0
 8008948:	60bb      	str	r3, [r7, #8]
 800894a:	60fa      	str	r2, [r7, #12]
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	4a84      	ldr	r2, [pc, #528]	; (8008b64 <UART_SetConfig+0x930>)
 8008952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008956:	b29b      	uxth	r3, r3
 8008958:	2200      	movs	r2, #0
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008966:	f7f7 fcb7 	bl	80002d8 <__aeabi_uldivmod>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4610      	mov	r0, r2
 8008970:	4619      	mov	r1, r3
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	f04f 0300 	mov.w	r3, #0
 800897a:	020b      	lsls	r3, r1, #8
 800897c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008980:	0202      	lsls	r2, r0, #8
 8008982:	6979      	ldr	r1, [r7, #20]
 8008984:	6849      	ldr	r1, [r1, #4]
 8008986:	0849      	lsrs	r1, r1, #1
 8008988:	2000      	movs	r0, #0
 800898a:	460c      	mov	r4, r1
 800898c:	4605      	mov	r5, r0
 800898e:	eb12 0804 	adds.w	r8, r2, r4
 8008992:	eb43 0905 	adc.w	r9, r3, r5
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	469a      	mov	sl, r3
 800899e:	4693      	mov	fp, r2
 80089a0:	4652      	mov	r2, sl
 80089a2:	465b      	mov	r3, fp
 80089a4:	4640      	mov	r0, r8
 80089a6:	4649      	mov	r1, r9
 80089a8:	f7f7 fc96 	bl	80002d8 <__aeabi_uldivmod>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4613      	mov	r3, r2
 80089b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089ba:	d308      	bcc.n	80089ce <UART_SetConfig+0x79a>
 80089bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089c2:	d204      	bcs.n	80089ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ca:	60da      	str	r2, [r3, #12]
 80089cc:	e17c      	b.n	8008cc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80089d4:	e178      	b.n	8008cc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089de:	f040 80c5 	bne.w	8008b6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80089e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	dc48      	bgt.n	8008a7c <UART_SetConfig+0x848>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	db7b      	blt.n	8008ae6 <UART_SetConfig+0x8b2>
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d879      	bhi.n	8008ae6 <UART_SetConfig+0x8b2>
 80089f2:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <UART_SetConfig+0x7c4>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a83 	.word	0x08008a83
 80089fc:	08008a8b 	.word	0x08008a8b
 8008a00:	08008ae7 	.word	0x08008ae7
 8008a04:	08008ae7 	.word	0x08008ae7
 8008a08:	08008a93 	.word	0x08008a93
 8008a0c:	08008ae7 	.word	0x08008ae7
 8008a10:	08008ae7 	.word	0x08008ae7
 8008a14:	08008ae7 	.word	0x08008ae7
 8008a18:	08008aa3 	.word	0x08008aa3
 8008a1c:	08008ae7 	.word	0x08008ae7
 8008a20:	08008ae7 	.word	0x08008ae7
 8008a24:	08008ae7 	.word	0x08008ae7
 8008a28:	08008ae7 	.word	0x08008ae7
 8008a2c:	08008ae7 	.word	0x08008ae7
 8008a30:	08008ae7 	.word	0x08008ae7
 8008a34:	08008ae7 	.word	0x08008ae7
 8008a38:	08008ab3 	.word	0x08008ab3
 8008a3c:	08008ae7 	.word	0x08008ae7
 8008a40:	08008ae7 	.word	0x08008ae7
 8008a44:	08008ae7 	.word	0x08008ae7
 8008a48:	08008ae7 	.word	0x08008ae7
 8008a4c:	08008ae7 	.word	0x08008ae7
 8008a50:	08008ae7 	.word	0x08008ae7
 8008a54:	08008ae7 	.word	0x08008ae7
 8008a58:	08008ae7 	.word	0x08008ae7
 8008a5c:	08008ae7 	.word	0x08008ae7
 8008a60:	08008ae7 	.word	0x08008ae7
 8008a64:	08008ae7 	.word	0x08008ae7
 8008a68:	08008ae7 	.word	0x08008ae7
 8008a6c:	08008ae7 	.word	0x08008ae7
 8008a70:	08008ae7 	.word	0x08008ae7
 8008a74:	08008ae7 	.word	0x08008ae7
 8008a78:	08008ad9 	.word	0x08008ad9
 8008a7c:	2b40      	cmp	r3, #64	; 0x40
 8008a7e:	d02e      	beq.n	8008ade <UART_SetConfig+0x8aa>
 8008a80:	e031      	b.n	8008ae6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a82:	f7fd f865 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8008a86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a88:	e033      	b.n	8008af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a8a:	f7fd f877 	bl	8005b7c <HAL_RCC_GetPCLK2Freq>
 8008a8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a90:	e02f      	b.n	8008af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fd ffe2 	bl	8006a60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa0:	e027      	b.n	8008af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aa2:	f107 0318 	add.w	r3, r7, #24
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe f92e 	bl	8006d08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab0:	e01f      	b.n	8008af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ab2:	4b2d      	ldr	r3, [pc, #180]	; (8008b68 <UART_SetConfig+0x934>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d009      	beq.n	8008ad2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008abe:	4b2a      	ldr	r3, [pc, #168]	; (8008b68 <UART_SetConfig+0x934>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	08db      	lsrs	r3, r3, #3
 8008ac4:	f003 0303 	and.w	r3, r3, #3
 8008ac8:	4a24      	ldr	r2, [pc, #144]	; (8008b5c <UART_SetConfig+0x928>)
 8008aca:	fa22 f303 	lsr.w	r3, r2, r3
 8008ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ad0:	e00f      	b.n	8008af2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008ad2:	4b22      	ldr	r3, [pc, #136]	; (8008b5c <UART_SetConfig+0x928>)
 8008ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad6:	e00c      	b.n	8008af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ad8:	4b21      	ldr	r3, [pc, #132]	; (8008b60 <UART_SetConfig+0x92c>)
 8008ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008adc:	e009      	b.n	8008af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae4:	e005      	b.n	8008af2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008af0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 80e7 	beq.w	8008cc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	4a19      	ldr	r2, [pc, #100]	; (8008b64 <UART_SetConfig+0x930>)
 8008b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b0c:	005a      	lsls	r2, r3, #1
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	085b      	lsrs	r3, r3, #1
 8008b14:	441a      	add	r2, r3
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	2b0f      	cmp	r3, #15
 8008b24:	d916      	bls.n	8008b54 <UART_SetConfig+0x920>
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2c:	d212      	bcs.n	8008b54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	f023 030f 	bic.w	r3, r3, #15
 8008b36:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	085b      	lsrs	r3, r3, #1
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b46:	4313      	orrs	r3, r2
 8008b48:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008b50:	60da      	str	r2, [r3, #12]
 8008b52:	e0b9      	b.n	8008cc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b5a:	e0b5      	b.n	8008cc8 <UART_SetConfig+0xa94>
 8008b5c:	03d09000 	.word	0x03d09000
 8008b60:	003d0900 	.word	0x003d0900
 8008b64:	08009a9c 	.word	0x08009a9c
 8008b68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	dc49      	bgt.n	8008c08 <UART_SetConfig+0x9d4>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	db7c      	blt.n	8008c72 <UART_SetConfig+0xa3e>
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	d87a      	bhi.n	8008c72 <UART_SetConfig+0xa3e>
 8008b7c:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <UART_SetConfig+0x950>)
 8008b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b82:	bf00      	nop
 8008b84:	08008c0f 	.word	0x08008c0f
 8008b88:	08008c17 	.word	0x08008c17
 8008b8c:	08008c73 	.word	0x08008c73
 8008b90:	08008c73 	.word	0x08008c73
 8008b94:	08008c1f 	.word	0x08008c1f
 8008b98:	08008c73 	.word	0x08008c73
 8008b9c:	08008c73 	.word	0x08008c73
 8008ba0:	08008c73 	.word	0x08008c73
 8008ba4:	08008c2f 	.word	0x08008c2f
 8008ba8:	08008c73 	.word	0x08008c73
 8008bac:	08008c73 	.word	0x08008c73
 8008bb0:	08008c73 	.word	0x08008c73
 8008bb4:	08008c73 	.word	0x08008c73
 8008bb8:	08008c73 	.word	0x08008c73
 8008bbc:	08008c73 	.word	0x08008c73
 8008bc0:	08008c73 	.word	0x08008c73
 8008bc4:	08008c3f 	.word	0x08008c3f
 8008bc8:	08008c73 	.word	0x08008c73
 8008bcc:	08008c73 	.word	0x08008c73
 8008bd0:	08008c73 	.word	0x08008c73
 8008bd4:	08008c73 	.word	0x08008c73
 8008bd8:	08008c73 	.word	0x08008c73
 8008bdc:	08008c73 	.word	0x08008c73
 8008be0:	08008c73 	.word	0x08008c73
 8008be4:	08008c73 	.word	0x08008c73
 8008be8:	08008c73 	.word	0x08008c73
 8008bec:	08008c73 	.word	0x08008c73
 8008bf0:	08008c73 	.word	0x08008c73
 8008bf4:	08008c73 	.word	0x08008c73
 8008bf8:	08008c73 	.word	0x08008c73
 8008bfc:	08008c73 	.word	0x08008c73
 8008c00:	08008c73 	.word	0x08008c73
 8008c04:	08008c65 	.word	0x08008c65
 8008c08:	2b40      	cmp	r3, #64	; 0x40
 8008c0a:	d02e      	beq.n	8008c6a <UART_SetConfig+0xa36>
 8008c0c:	e031      	b.n	8008c72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c0e:	f7fc ff9f 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8008c12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c14:	e033      	b.n	8008c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c16:	f7fc ffb1 	bl	8005b7c <HAL_RCC_GetPCLK2Freq>
 8008c1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c1c:	e02f      	b.n	8008c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fd ff1c 	bl	8006a60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c2c:	e027      	b.n	8008c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c2e:	f107 0318 	add.w	r3, r7, #24
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe f868 	bl	8006d08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c3c:	e01f      	b.n	8008c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c3e:	4b2d      	ldr	r3, [pc, #180]	; (8008cf4 <UART_SetConfig+0xac0>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c4a:	4b2a      	ldr	r3, [pc, #168]	; (8008cf4 <UART_SetConfig+0xac0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	08db      	lsrs	r3, r3, #3
 8008c50:	f003 0303 	and.w	r3, r3, #3
 8008c54:	4a28      	ldr	r2, [pc, #160]	; (8008cf8 <UART_SetConfig+0xac4>)
 8008c56:	fa22 f303 	lsr.w	r3, r2, r3
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c5c:	e00f      	b.n	8008c7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008c5e:	4b26      	ldr	r3, [pc, #152]	; (8008cf8 <UART_SetConfig+0xac4>)
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c62:	e00c      	b.n	8008c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c64:	4b25      	ldr	r3, [pc, #148]	; (8008cfc <UART_SetConfig+0xac8>)
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c68:	e009      	b.n	8008c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c70:	e005      	b.n	8008c7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c7c:	bf00      	nop
    }

    if (pclk != 0U)
 8008c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d021      	beq.n	8008cc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c88:	4a1d      	ldr	r2, [pc, #116]	; (8008d00 <UART_SetConfig+0xacc>)
 8008c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c92:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	085b      	lsrs	r3, r3, #1
 8008c9c:	441a      	add	r2, r3
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008caa:	2b0f      	cmp	r3, #15
 8008cac:	d909      	bls.n	8008cc2 <UART_SetConfig+0xa8e>
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb4:	d205      	bcs.n	8008cc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60da      	str	r2, [r3, #12]
 8008cc0:	e002      	b.n	8008cc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008ce4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3748      	adds	r7, #72	; 0x48
 8008cec:	46bd      	mov	sp, r7
 8008cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cf2:	bf00      	nop
 8008cf4:	58024400 	.word	0x58024400
 8008cf8:	03d09000 	.word	0x03d09000
 8008cfc:	003d0900 	.word	0x003d0900
 8008d00:	08009a9c 	.word	0x08009a9c

08008d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00a      	beq.n	8008d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00a      	beq.n	8008d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00a      	beq.n	8008d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	f003 0308 	and.w	r3, r3, #8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	f003 0310 	and.w	r3, r3, #16
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00a      	beq.n	8008db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01a      	beq.n	8008e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e02:	d10a      	bne.n	8008e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	605a      	str	r2, [r3, #4]
  }
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af02      	add	r7, sp, #8
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e58:	f7f8 fb7e 	bl	8001558 <HAL_GetTick>
 8008e5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0308 	and.w	r3, r3, #8
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d10e      	bne.n	8008e8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f82f 	bl	8008ede <UART_WaitOnFlagUntilTimeout>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e025      	b.n	8008ed6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d10e      	bne.n	8008eb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f819 	bl	8008ede <UART_WaitOnFlagUntilTimeout>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e00f      	b.n	8008ed6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b09c      	sub	sp, #112	; 0x70
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	60b9      	str	r1, [r7, #8]
 8008ee8:	603b      	str	r3, [r7, #0]
 8008eea:	4613      	mov	r3, r2
 8008eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eee:	e0a9      	b.n	8009044 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef6:	f000 80a5 	beq.w	8009044 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008efa:	f7f8 fb2d 	bl	8001558 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d302      	bcc.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d140      	bne.n	8008f92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f24:	667b      	str	r3, [r7, #100]	; 0x64
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e6      	bne.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3308      	adds	r3, #8
 8008f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	f023 0301 	bic.w	r3, r3, #1
 8008f58:	663b      	str	r3, [r7, #96]	; 0x60
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3308      	adds	r3, #8
 8008f60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f62:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e5      	bne.n	8008f42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2220      	movs	r2, #32
 8008f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2220      	movs	r2, #32
 8008f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e069      	b.n	8009066 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d051      	beq.n	8009044 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fae:	d149      	bne.n	8009044 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	e853 3f00 	ldrex	r3, [r3]
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8008fda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fe0:	e841 2300 	strex	r3, r2, [r1]
 8008fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e6      	bne.n	8008fba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f023 0301 	bic.w	r3, r3, #1
 8009002:	66bb      	str	r3, [r7, #104]	; 0x68
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3308      	adds	r3, #8
 800900a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800900c:	623a      	str	r2, [r7, #32]
 800900e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	69f9      	ldr	r1, [r7, #28]
 8009012:	6a3a      	ldr	r2, [r7, #32]
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	61bb      	str	r3, [r7, #24]
   return(result);
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e5      	bne.n	8008fec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2220      	movs	r2, #32
 8009024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2220      	movs	r2, #32
 800902c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2220      	movs	r2, #32
 8009034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e010      	b.n	8009066 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69da      	ldr	r2, [r3, #28]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	4013      	ands	r3, r2
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	429a      	cmp	r2, r3
 8009052:	bf0c      	ite	eq
 8009054:	2301      	moveq	r3, #1
 8009056:	2300      	movne	r3, #0
 8009058:	b2db      	uxtb	r3, r3
 800905a:	461a      	mov	r2, r3
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	429a      	cmp	r2, r3
 8009060:	f43f af46 	beq.w	8008ef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3770      	adds	r7, #112	; 0x70
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009070:	b480      	push	{r7}
 8009072:	b095      	sub	sp, #84	; 0x54
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800908c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009096:	643b      	str	r3, [r7, #64]	; 0x40
 8009098:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800909c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e6      	bne.n	8009078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3308      	adds	r3, #8
 80090b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	4b1e      	ldr	r3, [pc, #120]	; (8009138 <UART_EndRxTransfer+0xc8>)
 80090be:	4013      	ands	r3, r2
 80090c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e5      	bne.n	80090aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d118      	bne.n	8009118 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	f023 0310 	bic.w	r3, r3, #16
 80090fa:	647b      	str	r3, [r7, #68]	; 0x44
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	461a      	mov	r2, r3
 8009102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009104:	61bb      	str	r3, [r7, #24]
 8009106:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6979      	ldr	r1, [r7, #20]
 800910a:	69ba      	ldr	r2, [r7, #24]
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	613b      	str	r3, [r7, #16]
   return(result);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e6      	bne.n	80090e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2220      	movs	r2, #32
 800911c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800912c:	bf00      	nop
 800912e:	3754      	adds	r7, #84	; 0x54
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	effffffe 	.word	0xeffffffe

0800913c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009148:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f7ff f854 	bl	8008208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009160:	bf00      	nop
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	60bb      	str	r3, [r7, #8]
   return(result);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009184:	61fb      	str	r3, [r7, #28]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	61bb      	str	r3, [r7, #24]
 8009190:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009192:	6979      	ldr	r1, [r7, #20]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	613b      	str	r3, [r7, #16]
   return(result);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e6      	bne.n	8009170 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2220      	movs	r2, #32
 80091a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7ff f81f 	bl	80081f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091b6:	bf00      	nop
 80091b8:	3720      	adds	r7, #32
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091c6:	bf00      	nop
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b083      	sub	sp, #12
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b085      	sub	sp, #20
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_UARTEx_DisableFifoMode+0x16>
 800920c:	2302      	movs	r3, #2
 800920e:	e027      	b.n	8009260 <HAL_UARTEx_DisableFifoMode+0x66>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2224      	movs	r2, #36	; 0x24
 800921c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0201 	bic.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800923e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2220      	movs	r2, #32
 8009252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800927c:	2b01      	cmp	r3, #1
 800927e:	d101      	bne.n	8009284 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009280:	2302      	movs	r3, #2
 8009282:	e02d      	b.n	80092e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2224      	movs	r2, #36	; 0x24
 8009290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 0201 	bic.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	430a      	orrs	r2, r1
 80092be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f84f 	bl	8009364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2220      	movs	r2, #32
 80092d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d101      	bne.n	8009300 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092fc:	2302      	movs	r3, #2
 80092fe:	e02d      	b.n	800935c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2224      	movs	r2, #36	; 0x24
 800930c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f022 0201 	bic.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f811 	bl	8009364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2220      	movs	r2, #32
 800934e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009370:	2b00      	cmp	r3, #0
 8009372:	d108      	bne.n	8009386 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009384:	e031      	b.n	80093ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009386:	2310      	movs	r3, #16
 8009388:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800938a:	2310      	movs	r3, #16
 800938c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	0e5b      	lsrs	r3, r3, #25
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 0307 	and.w	r3, r3, #7
 800939c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	0f5b      	lsrs	r3, r3, #29
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	f003 0307 	and.w	r3, r3, #7
 80093ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	7b3a      	ldrb	r2, [r7, #12]
 80093b2:	4911      	ldr	r1, [pc, #68]	; (80093f8 <UARTEx_SetNbDataToProcess+0x94>)
 80093b4:	5c8a      	ldrb	r2, [r1, r2]
 80093b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093ba:	7b3a      	ldrb	r2, [r7, #12]
 80093bc:	490f      	ldr	r1, [pc, #60]	; (80093fc <UARTEx_SetNbDataToProcess+0x98>)
 80093be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	7b7a      	ldrb	r2, [r7, #13]
 80093d0:	4909      	ldr	r1, [pc, #36]	; (80093f8 <UARTEx_SetNbDataToProcess+0x94>)
 80093d2:	5c8a      	ldrb	r2, [r1, r2]
 80093d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093d8:	7b7a      	ldrb	r2, [r7, #13]
 80093da:	4908      	ldr	r1, [pc, #32]	; (80093fc <UARTEx_SetNbDataToProcess+0x98>)
 80093dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093de:	fb93 f3f2 	sdiv	r3, r3, r2
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80093ea:	bf00      	nop
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	08009ab4 	.word	0x08009ab4
 80093fc:	08009abc 	.word	0x08009abc

08009400 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009400:	b084      	sub	sp, #16
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	f107 001c 	add.w	r0, r7, #28
 800940e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	2b01      	cmp	r3, #1
 8009416:	d120      	bne.n	800945a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	4b2a      	ldr	r3, [pc, #168]	; (80094d4 <USB_CoreInit+0xd4>)
 800942a:	4013      	ands	r3, r2
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800943c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800943e:	2b01      	cmp	r3, #1
 8009440:	d105      	bne.n	800944e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 faac 	bl	80099ac <USB_CoreReset>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]
 8009458:	e01a      	b.n	8009490 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 faa0 	bl	80099ac <USB_CoreReset>
 800946c:	4603      	mov	r3, r0
 800946e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009472:	2b00      	cmp	r3, #0
 8009474:	d106      	bne.n	8009484 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	639a      	str	r2, [r3, #56]	; 0x38
 8009482:	e005      	b.n	8009490 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009492:	2b01      	cmp	r3, #1
 8009494:	d116      	bne.n	80094c4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800949a:	b29a      	uxth	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094a4:	4b0c      	ldr	r3, [pc, #48]	; (80094d8 <USB_CoreInit+0xd8>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f043 0206 	orr.w	r2, r3, #6
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f043 0220 	orr.w	r2, r3, #32
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094d0:	b004      	add	sp, #16
 80094d2:	4770      	bx	lr
 80094d4:	ffbdffbf 	.word	0xffbdffbf
 80094d8:	03ee0000 	.word	0x03ee0000

080094dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f023 0201 	bic.w	r2, r3, #1
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	460b      	mov	r3, r1
 8009508:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d115      	bne.n	800954c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800952c:	2001      	movs	r0, #1
 800952e:	f7f8 f81f 	bl	8001570 <HAL_Delay>
      ms++;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3301      	adds	r3, #1
 8009536:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fa29 	bl	8009990 <USB_GetMode>
 800953e:	4603      	mov	r3, r0
 8009540:	2b01      	cmp	r3, #1
 8009542:	d01e      	beq.n	8009582 <USB_SetCurrentMode+0x84>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b31      	cmp	r3, #49	; 0x31
 8009548:	d9f0      	bls.n	800952c <USB_SetCurrentMode+0x2e>
 800954a:	e01a      	b.n	8009582 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800954c:	78fb      	ldrb	r3, [r7, #3]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d115      	bne.n	800957e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800955e:	2001      	movs	r0, #1
 8009560:	f7f8 f806 	bl	8001570 <HAL_Delay>
      ms++;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3301      	adds	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fa10 	bl	8009990 <USB_GetMode>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d005      	beq.n	8009582 <USB_SetCurrentMode+0x84>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b31      	cmp	r3, #49	; 0x31
 800957a:	d9f0      	bls.n	800955e <USB_SetCurrentMode+0x60>
 800957c:	e001      	b.n	8009582 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e005      	b.n	800958e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b32      	cmp	r3, #50	; 0x32
 8009586:	d101      	bne.n	800958c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009598:	b084      	sub	sp, #16
 800959a:	b580      	push	{r7, lr}
 800959c:	b086      	sub	sp, #24
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095b2:	2300      	movs	r3, #0
 80095b4:	613b      	str	r3, [r7, #16]
 80095b6:	e009      	b.n	80095cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	3340      	adds	r3, #64	; 0x40
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	2200      	movs	r2, #0
 80095c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	3301      	adds	r3, #1
 80095ca:	613b      	str	r3, [r7, #16]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2b0e      	cmp	r3, #14
 80095d0:	d9f2      	bls.n	80095b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d11c      	bne.n	8009612 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095e6:	f043 0302 	orr.w	r3, r3, #2
 80095ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	601a      	str	r2, [r3, #0]
 8009610:	e005      	b.n	800961e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009624:	461a      	mov	r2, r3
 8009626:	2300      	movs	r3, #0
 8009628:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009630:	4619      	mov	r1, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009638:	461a      	mov	r2, r3
 800963a:	680b      	ldr	r3, [r1, #0]
 800963c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800963e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009640:	2b01      	cmp	r3, #1
 8009642:	d10c      	bne.n	800965e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d104      	bne.n	8009654 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800964a:	2100      	movs	r1, #0
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f965 	bl	800991c <USB_SetDevSpeed>
 8009652:	e008      	b.n	8009666 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009654:	2101      	movs	r1, #1
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f960 	bl	800991c <USB_SetDevSpeed>
 800965c:	e003      	b.n	8009666 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800965e:	2103      	movs	r1, #3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f95b 	bl	800991c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009666:	2110      	movs	r1, #16
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f8f3 	bl	8009854 <USB_FlushTxFifo>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f91f 	bl	80098bc <USB_FlushRxFifo>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800968e:	461a      	mov	r2, r3
 8009690:	2300      	movs	r3, #0
 8009692:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969a:	461a      	mov	r2, r3
 800969c:	2300      	movs	r3, #0
 800969e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a6:	461a      	mov	r2, r3
 80096a8:	2300      	movs	r3, #0
 80096aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096ac:	2300      	movs	r3, #0
 80096ae:	613b      	str	r3, [r7, #16]
 80096b0:	e043      	b.n	800973a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096c8:	d118      	bne.n	80096fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096dc:	461a      	mov	r2, r3
 80096de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	e013      	b.n	800970e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f2:	461a      	mov	r2, r3
 80096f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	e008      	b.n	800970e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009708:	461a      	mov	r2, r3
 800970a:	2300      	movs	r3, #0
 800970c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971a:	461a      	mov	r2, r3
 800971c:	2300      	movs	r3, #0
 800971e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800972c:	461a      	mov	r2, r3
 800972e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009732:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	3301      	adds	r3, #1
 8009738:	613b      	str	r3, [r7, #16]
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	429a      	cmp	r2, r3
 8009740:	d3b7      	bcc.n	80096b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009742:	2300      	movs	r3, #0
 8009744:	613b      	str	r3, [r7, #16]
 8009746:	e043      	b.n	80097d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800975a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800975e:	d118      	bne.n	8009792 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10a      	bne.n	800977c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009772:	461a      	mov	r2, r3
 8009774:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009778:	6013      	str	r3, [r2, #0]
 800977a:	e013      	b.n	80097a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009788:	461a      	mov	r2, r3
 800978a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	e008      	b.n	80097a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979e:	461a      	mov	r2, r3
 80097a0:	2300      	movs	r3, #0
 80097a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b0:	461a      	mov	r2, r3
 80097b2:	2300      	movs	r3, #0
 80097b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c2:	461a      	mov	r2, r3
 80097c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	3301      	adds	r3, #1
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d3b7      	bcc.n	8009748 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80097f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d105      	bne.n	800980c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	f043 0210 	orr.w	r2, r3, #16
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	699a      	ldr	r2, [r3, #24]
 8009810:	4b0e      	ldr	r3, [pc, #56]	; (800984c <USB_DevInit+0x2b4>)
 8009812:	4313      	orrs	r3, r2
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981a:	2b00      	cmp	r3, #0
 800981c:	d005      	beq.n	800982a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f043 0208 	orr.w	r2, r3, #8
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800982a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800982c:	2b01      	cmp	r3, #1
 800982e:	d105      	bne.n	800983c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699a      	ldr	r2, [r3, #24]
 8009834:	4b06      	ldr	r3, [pc, #24]	; (8009850 <USB_DevInit+0x2b8>)
 8009836:	4313      	orrs	r3, r2
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800983c:	7dfb      	ldrb	r3, [r7, #23]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009848:	b004      	add	sp, #16
 800984a:	4770      	bx	lr
 800984c:	803c3800 	.word	0x803c3800
 8009850:	40000004 	.word	0x40000004

08009854 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4a13      	ldr	r2, [pc, #76]	; (80098b8 <USB_FlushTxFifo+0x64>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d901      	bls.n	8009874 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e01b      	b.n	80098ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	daf2      	bge.n	8009862 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	019b      	lsls	r3, r3, #6
 8009884:	f043 0220 	orr.w	r2, r3, #32
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3301      	adds	r3, #1
 8009890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4a08      	ldr	r2, [pc, #32]	; (80098b8 <USB_FlushTxFifo+0x64>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d901      	bls.n	800989e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e006      	b.n	80098ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b20      	cmp	r3, #32
 80098a8:	d0f0      	beq.n	800988c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	00030d40 	.word	0x00030d40

080098bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3301      	adds	r3, #1
 80098cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	4a11      	ldr	r2, [pc, #68]	; (8009918 <USB_FlushRxFifo+0x5c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d901      	bls.n	80098da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e018      	b.n	800990c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	daf2      	bge.n	80098c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2210      	movs	r2, #16
 80098ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	3301      	adds	r3, #1
 80098f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	4a08      	ldr	r2, [pc, #32]	; (8009918 <USB_FlushRxFifo+0x5c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d901      	bls.n	80098fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e006      	b.n	800990c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f003 0310 	and.w	r3, r3, #16
 8009906:	2b10      	cmp	r3, #16
 8009908:	d0f0      	beq.n	80098ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	00030d40 	.word	0x00030d40

0800991c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800993c:	4313      	orrs	r3, r2
 800993e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3714      	adds	r7, #20
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800994e:	b480      	push	{r7}
 8009950:	b085      	sub	sp, #20
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009968:	f023 0303 	bic.w	r3, r3, #3
 800996c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800997c:	f043 0302 	orr.w	r3, r3, #2
 8009980:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	f003 0301 	and.w	r3, r3, #1
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3301      	adds	r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	4a13      	ldr	r2, [pc, #76]	; (8009a10 <USB_CoreReset+0x64>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d901      	bls.n	80099ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099c6:	2303      	movs	r3, #3
 80099c8:	e01b      	b.n	8009a02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	daf2      	bge.n	80099b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	f043 0201 	orr.w	r2, r3, #1
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3301      	adds	r3, #1
 80099e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <USB_CoreReset+0x64>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d901      	bls.n	80099f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e006      	b.n	8009a02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d0f0      	beq.n	80099e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	00030d40 	.word	0x00030d40

08009a14 <__libc_init_array>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	4d0d      	ldr	r5, [pc, #52]	; (8009a4c <__libc_init_array+0x38>)
 8009a18:	4c0d      	ldr	r4, [pc, #52]	; (8009a50 <__libc_init_array+0x3c>)
 8009a1a:	1b64      	subs	r4, r4, r5
 8009a1c:	10a4      	asrs	r4, r4, #2
 8009a1e:	2600      	movs	r6, #0
 8009a20:	42a6      	cmp	r6, r4
 8009a22:	d109      	bne.n	8009a38 <__libc_init_array+0x24>
 8009a24:	4d0b      	ldr	r5, [pc, #44]	; (8009a54 <__libc_init_array+0x40>)
 8009a26:	4c0c      	ldr	r4, [pc, #48]	; (8009a58 <__libc_init_array+0x44>)
 8009a28:	f000 f820 	bl	8009a6c <_init>
 8009a2c:	1b64      	subs	r4, r4, r5
 8009a2e:	10a4      	asrs	r4, r4, #2
 8009a30:	2600      	movs	r6, #0
 8009a32:	42a6      	cmp	r6, r4
 8009a34:	d105      	bne.n	8009a42 <__libc_init_array+0x2e>
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a3c:	4798      	blx	r3
 8009a3e:	3601      	adds	r6, #1
 8009a40:	e7ee      	b.n	8009a20 <__libc_init_array+0xc>
 8009a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a46:	4798      	blx	r3
 8009a48:	3601      	adds	r6, #1
 8009a4a:	e7f2      	b.n	8009a32 <__libc_init_array+0x1e>
 8009a4c:	08009acc 	.word	0x08009acc
 8009a50:	08009acc 	.word	0x08009acc
 8009a54:	08009acc 	.word	0x08009acc
 8009a58:	08009ad0 	.word	0x08009ad0

08009a5c <memset>:
 8009a5c:	4402      	add	r2, r0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d100      	bne.n	8009a66 <memset+0xa>
 8009a64:	4770      	bx	lr
 8009a66:	f803 1b01 	strb.w	r1, [r3], #1
 8009a6a:	e7f9      	b.n	8009a60 <memset+0x4>

08009a6c <_init>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	bf00      	nop
 8009a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a72:	bc08      	pop	{r3}
 8009a74:	469e      	mov	lr, r3
 8009a76:	4770      	bx	lr

08009a78 <_fini>:
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	bf00      	nop
 8009a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7e:	bc08      	pop	{r3}
 8009a80:	469e      	mov	lr, r3
 8009a82:	4770      	bx	lr
