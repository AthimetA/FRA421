
FRA421_Project_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f00  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08105198  08105198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081056b0  081056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081056b4  081056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  081056b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e8  10000010  081056c8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100001f8  081056c8  000201f8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000efce  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020fe  00000000  00000000  0002f00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a60  00000000  00000000  00031110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000968  00000000  00000000  00031b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a5ab  00000000  00000000  000324d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e78e  00000000  00000000  0006ca83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017b849  00000000  00000000  0007b211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f6a5a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028c0  00000000  00000000  001f6aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08105180 	.word	0x08105180

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08105180 	.word	0x08105180

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <RFID_Main_init>:
#include <stdlib.h>
#include <string.h>

// RFID Handle Function
void RFID_Main_init(RFIDHandle *rfidmain)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b084      	sub	sp, #16
 810030c:	af00      	add	r7, sp, #0
 810030e:	6078      	str	r0, [r7, #4]
	RFID *ptrRFID = rfidmain->RFID;
 8100310:	687b      	ldr	r3, [r7, #4]
 8100312:	3328      	adds	r3, #40	; 0x28
 8100314:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = 0;  i < RFID_NUM_MAX; ++i)
 8100316:	2300      	movs	r3, #0
 8100318:	73fb      	strb	r3, [r7, #15]
 810031a:	e018      	b.n	810034e <RFID_Main_init+0x46>
	{
		ptrRFID = &rfidmain->RFID[i];
 810031c:	7bfa      	ldrb	r2, [r7, #15]
 810031e:	4613      	mov	r3, r2
 8100320:	011b      	lsls	r3, r3, #4
 8100322:	4413      	add	r3, r2
 8100324:	009b      	lsls	r3, r3, #2
 8100326:	3328      	adds	r3, #40	; 0x28
 8100328:	687a      	ldr	r2, [r7, #4]
 810032a:	4413      	add	r3, r2
 810032c:	60bb      	str	r3, [r7, #8]
		ptrRFID->slaveAddr = i;
 810032e:	7bfb      	ldrb	r3, [r7, #15]
 8100330:	b29a      	uxth	r2, r3
 8100332:	68bb      	ldr	r3, [r7, #8]
 8100334:	801a      	strh	r2, [r3, #0]
		ptrRFID->status = 0;
 8100336:	68bb      	ldr	r3, [r7, #8]
 8100338:	2200      	movs	r2, #0
 810033a:	709a      	strb	r2, [r3, #2]
		ptrRFID->action = 0;
 810033c:	68bb      	ldr	r3, [r7, #8]
 810033e:	2200      	movs	r2, #0
 8100340:	70da      	strb	r2, [r3, #3]
		RFID_Clear_Card_Bufffer(ptrRFID);
 8100342:	68b8      	ldr	r0, [r7, #8]
 8100344:	f000 f832 	bl	81003ac <RFID_Clear_Card_Bufffer>
	for (uint8_t i = 0;  i < RFID_NUM_MAX; ++i)
 8100348:	7bfb      	ldrb	r3, [r7, #15]
 810034a:	3301      	adds	r3, #1
 810034c:	73fb      	strb	r3, [r7, #15]
 810034e:	7bfb      	ldrb	r3, [r7, #15]
 8100350:	2b0b      	cmp	r3, #11
 8100352:	d9e3      	bls.n	810031c <RFID_Main_init+0x14>
	}
}
 8100354:	bf00      	nop
 8100356:	bf00      	nop
 8100358:	3710      	adds	r7, #16
 810035a:	46bd      	mov	sp, r7
 810035c:	bd80      	pop	{r7, pc}

0810035e <YUGIOH_card_copy>:

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst)
{
 810035e:	b480      	push	{r7}
 8100360:	b083      	sub	sp, #12
 8100362:	af00      	add	r7, sp, #0
 8100364:	6078      	str	r0, [r7, #4]
 8100366:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 8100368:	687b      	ldr	r3, [r7, #4]
 810036a:	689a      	ldr	r2, [r3, #8]
 810036c:	683b      	ldr	r3, [r7, #0]
 810036e:	609a      	str	r2, [r3, #8]
	dst->cardSignature = src->cardSignature;
 8100370:	687b      	ldr	r3, [r7, #4]
 8100372:	781a      	ldrb	r2, [r3, #0]
 8100374:	683b      	ldr	r3, [r7, #0]
 8100376:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 8100378:	687b      	ldr	r3, [r7, #4]
 810037a:	789a      	ldrb	r2, [r3, #2]
 810037c:	683b      	ldr	r3, [r7, #0]
 810037e:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 8100380:	687b      	ldr	r3, [r7, #4]
 8100382:	785a      	ldrb	r2, [r3, #1]
 8100384:	683b      	ldr	r3, [r7, #0]
 8100386:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 8100388:	687b      	ldr	r3, [r7, #4]
 810038a:	78da      	ldrb	r2, [r3, #3]
 810038c:	683b      	ldr	r3, [r7, #0]
 810038e:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 8100390:	687b      	ldr	r3, [r7, #4]
 8100392:	791a      	ldrb	r2, [r3, #4]
 8100394:	683b      	ldr	r3, [r7, #0]
 8100396:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 8100398:	687b      	ldr	r3, [r7, #4]
 810039a:	795a      	ldrb	r2, [r3, #5]
 810039c:	683b      	ldr	r3, [r7, #0]
 810039e:	715a      	strb	r2, [r3, #5]
}
 81003a0:	bf00      	nop
 81003a2:	370c      	adds	r7, #12
 81003a4:	46bd      	mov	sp, r7
 81003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003aa:	4770      	bx	lr

081003ac <RFID_Clear_Card_Bufffer>:
void RFID_Clear_Card_Bufffer(RFID *rfid)
{
 81003ac:	b580      	push	{r7, lr}
 81003ae:	b088      	sub	sp, #32
 81003b0:	af00      	add	r7, sp, #0
 81003b2:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = {0};
 81003b4:	f107 030c 	add.w	r3, r7, #12
 81003b8:	2200      	movs	r2, #0
 81003ba:	601a      	str	r2, [r3, #0]
 81003bc:	605a      	str	r2, [r3, #4]
 81003be:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 81003c0:	687b      	ldr	r3, [r7, #4]
 81003c2:	3314      	adds	r3, #20
 81003c4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN ; ++i)
 81003c6:	2300      	movs	r3, #0
 81003c8:	76fb      	strb	r3, [r7, #27]
 81003ca:	e00b      	b.n	81003e4 <RFID_Clear_Card_Bufffer+0x38>
	{
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 81003cc:	f107 030c 	add.w	r3, r7, #12
 81003d0:	69f9      	ldr	r1, [r7, #28]
 81003d2:	4618      	mov	r0, r3
 81003d4:	f7ff ffc3 	bl	810035e <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 81003d8:	69fb      	ldr	r3, [r7, #28]
 81003da:	330c      	adds	r3, #12
 81003dc:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN ; ++i)
 81003de:	7efb      	ldrb	r3, [r7, #27]
 81003e0:	3301      	adds	r3, #1
 81003e2:	76fb      	strb	r3, [r7, #27]
 81003e4:	7efb      	ldrb	r3, [r7, #27]
 81003e6:	2b03      	cmp	r3, #3
 81003e8:	d9f0      	bls.n	81003cc <RFID_Clear_Card_Bufffer+0x20>
	}
}
 81003ea:	bf00      	nop
 81003ec:	bf00      	nop
 81003ee:	3720      	adds	r7, #32
 81003f0:	46bd      	mov	sp, r7
 81003f2:	bd80      	pop	{r7, pc}

081003f4 <YUGIOH_card_register>:
void YUGIOH_card_register(RFIDHandle *rfidmain)
{
 81003f4:	b580      	push	{r7, lr}
 81003f6:	b086      	sub	sp, #24
 81003f8:	af00      	add	r7, sp, #0
 81003fa:	6078      	str	r0, [r7, #4]
	RFID *ptrRFID = rfidmain->RFID;
 81003fc:	687b      	ldr	r3, [r7, #4]
 81003fe:	3328      	adds	r3, #40	; 0x28
 8100400:	617b      	str	r3, [r7, #20]
	Fra421_Card *ptrCard;
	YUGIOH_Card *ptrYUGIOHCard;
	ptrRFID = &rfidmain->RFID[rfidmain->slaveNum];
 8100402:	687b      	ldr	r3, [r7, #4]
 8100404:	881b      	ldrh	r3, [r3, #0]
 8100406:	461a      	mov	r2, r3
 8100408:	4613      	mov	r3, r2
 810040a:	011b      	lsls	r3, r3, #4
 810040c:	4413      	add	r3, r2
 810040e:	009b      	lsls	r3, r3, #2
 8100410:	3328      	adds	r3, #40	; 0x28
 8100412:	687a      	ldr	r2, [r7, #4]
 8100414:	4413      	add	r3, r2
 8100416:	617b      	str	r3, [r7, #20]
	ptrCard = &ptrRFID->detectedCard;
 8100418:	697b      	ldr	r3, [r7, #20]
 810041a:	3304      	adds	r3, #4
 810041c:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard = ptrRFID->bufferCard;
 810041e:	697b      	ldr	r3, [r7, #20]
 8100420:	3314      	adds	r3, #20
 8100422:	60fb      	str	r3, [r7, #12]
	// For now fix number
	ptrYUGIOHCard->cardData = ptrCard->data;
 8100424:	693b      	ldr	r3, [r7, #16]
 8100426:	681a      	ldr	r2, [r3, #0]
 8100428:	68fb      	ldr	r3, [r7, #12]
 810042a:	609a      	str	r2, [r3, #8]
	// Load Data from Hash
	YUGIOH_card_Load_Data(ptrYUGIOHCard);
 810042c:	68f8      	ldr	r0, [r7, #12]
 810042e:	f000 f85f 	bl	81004f0 <YUGIOH_card_Load_Data>
}
 8100432:	bf00      	nop
 8100434:	3718      	adds	r7, #24
 8100436:	46bd      	mov	sp, r7
 8100438:	bd80      	pop	{r7, pc}

0810043a <YUGIOH_card_Buffer_Update>:
void YUGIOH_card_Buffer_Update(RFIDHandle *rfidmain)
{
 810043a:	b580      	push	{r7, lr}
 810043c:	b086      	sub	sp, #24
 810043e:	af00      	add	r7, sp, #0
 8100440:	6078      	str	r0, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = rfidmain->RFID;
 8100442:	687b      	ldr	r3, [r7, #4]
 8100444:	3328      	adds	r3, #40	; 0x28
 8100446:	60bb      	str	r3, [r7, #8]
	ptrRFID = &rfidmain->RFID[rfidmain->slaveNum];
 8100448:	687b      	ldr	r3, [r7, #4]
 810044a:	881b      	ldrh	r3, [r3, #0]
 810044c:	461a      	mov	r2, r3
 810044e:	4613      	mov	r3, r2
 8100450:	011b      	lsls	r3, r3, #4
 8100452:	4413      	add	r3, r2
 8100454:	009b      	lsls	r3, r3, #2
 8100456:	3328      	adds	r3, #40	; 0x28
 8100458:	687a      	ldr	r2, [r7, #4]
 810045a:	4413      	add	r3, r2
 810045c:	60bb      	str	r3, [r7, #8]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = ptrRFID->bufferCard;
 810045e:	68bb      	ldr	r3, [r7, #8]
 8100460:	3314      	adds	r3, #20
 8100462:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &ptrRFID->bufferCard[CARD_BUFF_LEN-2];
 8100464:	68bb      	ldr	r3, [r7, #8]
 8100466:	332c      	adds	r3, #44	; 0x2c
 8100468:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = ptrRFID->bufferCard;
 810046a:	68bb      	ldr	r3, [r7, #8]
 810046c:	3314      	adds	r3, #20
 810046e:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &ptrRFID->bufferCard[CARD_BUFF_LEN-1];
 8100470:	68bb      	ldr	r3, [r7, #8]
 8100472:	3338      	adds	r3, #56	; 0x38
 8100474:	613b      	str	r3, [r7, #16]
	for (int i = CARD_BUFF_LEN; i >= 1 ; i--)
 8100476:	2304      	movs	r3, #4
 8100478:	60fb      	str	r3, [r7, #12]
 810047a:	e00c      	b.n	8100496 <YUGIOH_card_Buffer_Update+0x5c>
	{
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 810047c:	6939      	ldr	r1, [r7, #16]
 810047e:	6978      	ldr	r0, [r7, #20]
 8100480:	f7ff ff6d 	bl	810035e <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8100484:	697b      	ldr	r3, [r7, #20]
 8100486:	3b0c      	subs	r3, #12
 8100488:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 810048a:	693b      	ldr	r3, [r7, #16]
 810048c:	3b0c      	subs	r3, #12
 810048e:	613b      	str	r3, [r7, #16]
	for (int i = CARD_BUFF_LEN; i >= 1 ; i--)
 8100490:	68fb      	ldr	r3, [r7, #12]
 8100492:	3b01      	subs	r3, #1
 8100494:	60fb      	str	r3, [r7, #12]
 8100496:	68fb      	ldr	r3, [r7, #12]
 8100498:	2b00      	cmp	r3, #0
 810049a:	dcef      	bgt.n	810047c <YUGIOH_card_Buffer_Update+0x42>
	}
}
 810049c:	bf00      	nop
 810049e:	bf00      	nop
 81004a0:	3718      	adds	r7, #24
 81004a2:	46bd      	mov	sp, r7
 81004a4:	bd80      	pop	{r7, pc}
	...

081004a8 <CardHash_Encode>:
		 0,  0,  0, 21,  0,  0,  0,  0, 25,  0,  0,  0,  0,  0, 20,
		 0,  0,  0,  0,  0,  0, 19,  0,  0,  0,  0, 12,  0,  0,  0,
		};

uint8_t CardHash_Encode(uint32_t key)
{
 81004a8:	b480      	push	{r7}
 81004aa:	b083      	sub	sp, #12
 81004ac:	af00      	add	r7, sp, #0
 81004ae:	6078      	str	r0, [r7, #4]
	key = ((key >> 16) ^ key) * 0x45d9f3b;
 81004b0:	687b      	ldr	r3, [r7, #4]
 81004b2:	0c1a      	lsrs	r2, r3, #16
 81004b4:	687b      	ldr	r3, [r7, #4]
 81004b6:	4053      	eors	r3, r2
 81004b8:	4a0c      	ldr	r2, [pc, #48]	; (81004ec <CardHash_Encode+0x44>)
 81004ba:	fb02 f303 	mul.w	r3, r2, r3
 81004be:	607b      	str	r3, [r7, #4]
	key = ((key >> 16) ^ key) * 0x45d9f3b;
 81004c0:	687b      	ldr	r3, [r7, #4]
 81004c2:	0c1a      	lsrs	r2, r3, #16
 81004c4:	687b      	ldr	r3, [r7, #4]
 81004c6:	4053      	eors	r3, r2
 81004c8:	4a08      	ldr	r2, [pc, #32]	; (81004ec <CardHash_Encode+0x44>)
 81004ca:	fb02 f303 	mul.w	r3, r2, r3
 81004ce:	607b      	str	r3, [r7, #4]
	key = (key >> 16) ^ key;
 81004d0:	687b      	ldr	r3, [r7, #4]
 81004d2:	0c1b      	lsrs	r3, r3, #16
 81004d4:	687a      	ldr	r2, [r7, #4]
 81004d6:	4053      	eors	r3, r2
 81004d8:	607b      	str	r3, [r7, #4]
  return (uint8_t)(key & 0xff);
 81004da:	687b      	ldr	r3, [r7, #4]
 81004dc:	b2db      	uxtb	r3, r3
}
 81004de:	4618      	mov	r0, r3
 81004e0:	370c      	adds	r7, #12
 81004e2:	46bd      	mov	sp, r7
 81004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004e8:	4770      	bx	lr
 81004ea:	bf00      	nop
 81004ec:	045d9f3b 	.word	0x045d9f3b

081004f0 <YUGIOH_card_Load_Data>:

void YUGIOH_card_Load_Data(YUGIOH_Card *card)
{
 81004f0:	b580      	push	{r7, lr}
 81004f2:	b084      	sub	sp, #16
 81004f4:	af00      	add	r7, sp, #0
 81004f6:	6078      	str	r0, [r7, #4]
	uint8_t idx = CardHash_Encode(card->cardData);
 81004f8:	687b      	ldr	r3, [r7, #4]
 81004fa:	689b      	ldr	r3, [r3, #8]
 81004fc:	4618      	mov	r0, r3
 81004fe:	f7ff ffd3 	bl	81004a8 <CardHash_Encode>
 8100502:	4603      	mov	r3, r0
 8100504:	73fb      	strb	r3, [r7, #15]
	card->cardSignature = archive_yugioh_card_sig[idx];
 8100506:	7bfb      	ldrb	r3, [r7, #15]
 8100508:	4a0f      	ldr	r2, [pc, #60]	; (8100548 <YUGIOH_card_Load_Data+0x58>)
 810050a:	5cd2      	ldrb	r2, [r2, r3]
 810050c:	687b      	ldr	r3, [r7, #4]
 810050e:	701a      	strb	r2, [r3, #0]
	card->cardType = archive_yugioh_card_type[idx];
 8100510:	7bfb      	ldrb	r3, [r7, #15]
 8100512:	4a0e      	ldr	r2, [pc, #56]	; (810054c <YUGIOH_card_Load_Data+0x5c>)
 8100514:	5cd2      	ldrb	r2, [r2, r3]
 8100516:	687b      	ldr	r3, [r7, #4]
 8100518:	705a      	strb	r2, [r3, #1]
	card->cardState = 0;
 810051a:	687b      	ldr	r3, [r7, #4]
 810051c:	2200      	movs	r2, #0
 810051e:	709a      	strb	r2, [r3, #2]
	card->cardLevel = archive_yugioh_card_level[idx];
 8100520:	7bfb      	ldrb	r3, [r7, #15]
 8100522:	4a0b      	ldr	r2, [pc, #44]	; (8100550 <YUGIOH_card_Load_Data+0x60>)
 8100524:	5cd2      	ldrb	r2, [r2, r3]
 8100526:	687b      	ldr	r3, [r7, #4]
 8100528:	70da      	strb	r2, [r3, #3]
	card->cardAtk = archive_yugioh_card_atk[idx];
 810052a:	7bfb      	ldrb	r3, [r7, #15]
 810052c:	4a09      	ldr	r2, [pc, #36]	; (8100554 <YUGIOH_card_Load_Data+0x64>)
 810052e:	5cd2      	ldrb	r2, [r2, r3]
 8100530:	687b      	ldr	r3, [r7, #4]
 8100532:	711a      	strb	r2, [r3, #4]
	card->cardDef = archive_yugioh_card_def[idx];
 8100534:	7bfb      	ldrb	r3, [r7, #15]
 8100536:	4a08      	ldr	r2, [pc, #32]	; (8100558 <YUGIOH_card_Load_Data+0x68>)
 8100538:	5cd2      	ldrb	r2, [r2, r3]
 810053a:	687b      	ldr	r3, [r7, #4]
 810053c:	715a      	strb	r2, [r3, #5]
}
 810053e:	bf00      	nop
 8100540:	3710      	adds	r7, #16
 8100542:	46bd      	mov	sp, r7
 8100544:	bd80      	pop	{r7, pc}
 8100546:	bf00      	nop
 8100548:	081051a8 	.word	0x081051a8
 810054c:	081052a8 	.word	0x081052a8
 8100550:	081053a8 	.word	0x081053a8
 8100554:	081054a8 	.word	0x081054a8
 8100558:	081055a8 	.word	0x081055a8

0810055c <MC14515_Latch>:


#include "MC14515.h"

void MC14515_Latch(MC14515Handle *mc14515,uint16_t selected_output)
{
 810055c:	b580      	push	{r7, lr}
 810055e:	b082      	sub	sp, #8
 8100560:	af00      	add	r7, sp, #0
 8100562:	6078      	str	r0, [r7, #4]
 8100564:	460b      	mov	r3, r1
 8100566:	807b      	strh	r3, [r7, #2]

	switch (selected_output)
 8100568:	887b      	ldrh	r3, [r7, #2]
 810056a:	2b0f      	cmp	r3, #15
 810056c:	f200 8234 	bhi.w	81009d8 <MC14515_Latch+0x47c>
 8100570:	a201      	add	r2, pc, #4	; (adr r2, 8100578 <MC14515_Latch+0x1c>)
 8100572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100576:	bf00      	nop
 8100578:	081005b9 	.word	0x081005b9
 810057c:	081005fb 	.word	0x081005fb
 8100580:	0810063d 	.word	0x0810063d
 8100584:	0810067f 	.word	0x0810067f
 8100588:	081006c1 	.word	0x081006c1
 810058c:	08100703 	.word	0x08100703
 8100590:	08100745 	.word	0x08100745
 8100594:	08100787 	.word	0x08100787
 8100598:	081007c9 	.word	0x081007c9
 810059c:	0810080b 	.word	0x0810080b
 81005a0:	0810084d 	.word	0x0810084d
 81005a4:	0810088f 	.word	0x0810088f
 81005a8:	081008d1 	.word	0x081008d1
 81005ac:	08100913 	.word	0x08100913
 81005b0:	08100955 	.word	0x08100955
 81005b4:	08100997 	.word	0x08100997
	{
		case 0:
			// Set Data 0000
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 81005b8:	687b      	ldr	r3, [r7, #4]
 81005ba:	6898      	ldr	r0, [r3, #8]
 81005bc:	687b      	ldr	r3, [r7, #4]
 81005be:	8b9b      	ldrh	r3, [r3, #28]
 81005c0:	2200      	movs	r2, #0
 81005c2:	4619      	mov	r1, r3
 81005c4:	f003 fb5e 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 81005c8:	687b      	ldr	r3, [r7, #4]
 81005ca:	68d8      	ldr	r0, [r3, #12]
 81005cc:	687b      	ldr	r3, [r7, #4]
 81005ce:	8bdb      	ldrh	r3, [r3, #30]
 81005d0:	2200      	movs	r2, #0
 81005d2:	4619      	mov	r1, r3
 81005d4:	f003 fb56 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 81005d8:	687b      	ldr	r3, [r7, #4]
 81005da:	6918      	ldr	r0, [r3, #16]
 81005dc:	687b      	ldr	r3, [r7, #4]
 81005de:	8c1b      	ldrh	r3, [r3, #32]
 81005e0:	2200      	movs	r2, #0
 81005e2:	4619      	mov	r1, r3
 81005e4:	f003 fb4e 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 81005e8:	687b      	ldr	r3, [r7, #4]
 81005ea:	6958      	ldr	r0, [r3, #20]
 81005ec:	687b      	ldr	r3, [r7, #4]
 81005ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81005f0:	2200      	movs	r2, #0
 81005f2:	4619      	mov	r1, r3
 81005f4:	f003 fb46 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 81005f8:	e1ee      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 1:
			// Set Data 0001
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 81005fa:	687b      	ldr	r3, [r7, #4]
 81005fc:	6898      	ldr	r0, [r3, #8]
 81005fe:	687b      	ldr	r3, [r7, #4]
 8100600:	8b9b      	ldrh	r3, [r3, #28]
 8100602:	2201      	movs	r2, #1
 8100604:	4619      	mov	r1, r3
 8100606:	f003 fb3d 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 810060a:	687b      	ldr	r3, [r7, #4]
 810060c:	68d8      	ldr	r0, [r3, #12]
 810060e:	687b      	ldr	r3, [r7, #4]
 8100610:	8bdb      	ldrh	r3, [r3, #30]
 8100612:	2200      	movs	r2, #0
 8100614:	4619      	mov	r1, r3
 8100616:	f003 fb35 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810061a:	687b      	ldr	r3, [r7, #4]
 810061c:	6918      	ldr	r0, [r3, #16]
 810061e:	687b      	ldr	r3, [r7, #4]
 8100620:	8c1b      	ldrh	r3, [r3, #32]
 8100622:	2200      	movs	r2, #0
 8100624:	4619      	mov	r1, r3
 8100626:	f003 fb2d 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 810062a:	687b      	ldr	r3, [r7, #4]
 810062c:	6958      	ldr	r0, [r3, #20]
 810062e:	687b      	ldr	r3, [r7, #4]
 8100630:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100632:	2200      	movs	r2, #0
 8100634:	4619      	mov	r1, r3
 8100636:	f003 fb25 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 810063a:	e1cd      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 2:
			// Set Data 0010
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 810063c:	687b      	ldr	r3, [r7, #4]
 810063e:	6898      	ldr	r0, [r3, #8]
 8100640:	687b      	ldr	r3, [r7, #4]
 8100642:	8b9b      	ldrh	r3, [r3, #28]
 8100644:	2200      	movs	r2, #0
 8100646:	4619      	mov	r1, r3
 8100648:	f003 fb1c 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 810064c:	687b      	ldr	r3, [r7, #4]
 810064e:	68d8      	ldr	r0, [r3, #12]
 8100650:	687b      	ldr	r3, [r7, #4]
 8100652:	8bdb      	ldrh	r3, [r3, #30]
 8100654:	2201      	movs	r2, #1
 8100656:	4619      	mov	r1, r3
 8100658:	f003 fb14 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810065c:	687b      	ldr	r3, [r7, #4]
 810065e:	6918      	ldr	r0, [r3, #16]
 8100660:	687b      	ldr	r3, [r7, #4]
 8100662:	8c1b      	ldrh	r3, [r3, #32]
 8100664:	2200      	movs	r2, #0
 8100666:	4619      	mov	r1, r3
 8100668:	f003 fb0c 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 810066c:	687b      	ldr	r3, [r7, #4]
 810066e:	6958      	ldr	r0, [r3, #20]
 8100670:	687b      	ldr	r3, [r7, #4]
 8100672:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100674:	2200      	movs	r2, #0
 8100676:	4619      	mov	r1, r3
 8100678:	f003 fb04 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 810067c:	e1ac      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 3:
			// Set Data 0011
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 810067e:	687b      	ldr	r3, [r7, #4]
 8100680:	6898      	ldr	r0, [r3, #8]
 8100682:	687b      	ldr	r3, [r7, #4]
 8100684:	8b9b      	ldrh	r3, [r3, #28]
 8100686:	2201      	movs	r2, #1
 8100688:	4619      	mov	r1, r3
 810068a:	f003 fafb 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 810068e:	687b      	ldr	r3, [r7, #4]
 8100690:	68d8      	ldr	r0, [r3, #12]
 8100692:	687b      	ldr	r3, [r7, #4]
 8100694:	8bdb      	ldrh	r3, [r3, #30]
 8100696:	2201      	movs	r2, #1
 8100698:	4619      	mov	r1, r3
 810069a:	f003 faf3 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810069e:	687b      	ldr	r3, [r7, #4]
 81006a0:	6918      	ldr	r0, [r3, #16]
 81006a2:	687b      	ldr	r3, [r7, #4]
 81006a4:	8c1b      	ldrh	r3, [r3, #32]
 81006a6:	2200      	movs	r2, #0
 81006a8:	4619      	mov	r1, r3
 81006aa:	f003 faeb 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 81006ae:	687b      	ldr	r3, [r7, #4]
 81006b0:	6958      	ldr	r0, [r3, #20]
 81006b2:	687b      	ldr	r3, [r7, #4]
 81006b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81006b6:	2200      	movs	r2, #0
 81006b8:	4619      	mov	r1, r3
 81006ba:	f003 fae3 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 81006be:	e18b      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 4:
			// Set Data 0100
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 81006c0:	687b      	ldr	r3, [r7, #4]
 81006c2:	6898      	ldr	r0, [r3, #8]
 81006c4:	687b      	ldr	r3, [r7, #4]
 81006c6:	8b9b      	ldrh	r3, [r3, #28]
 81006c8:	2200      	movs	r2, #0
 81006ca:	4619      	mov	r1, r3
 81006cc:	f003 fada 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 81006d0:	687b      	ldr	r3, [r7, #4]
 81006d2:	68d8      	ldr	r0, [r3, #12]
 81006d4:	687b      	ldr	r3, [r7, #4]
 81006d6:	8bdb      	ldrh	r3, [r3, #30]
 81006d8:	2200      	movs	r2, #0
 81006da:	4619      	mov	r1, r3
 81006dc:	f003 fad2 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 81006e0:	687b      	ldr	r3, [r7, #4]
 81006e2:	6918      	ldr	r0, [r3, #16]
 81006e4:	687b      	ldr	r3, [r7, #4]
 81006e6:	8c1b      	ldrh	r3, [r3, #32]
 81006e8:	2201      	movs	r2, #1
 81006ea:	4619      	mov	r1, r3
 81006ec:	f003 faca 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 81006f0:	687b      	ldr	r3, [r7, #4]
 81006f2:	6958      	ldr	r0, [r3, #20]
 81006f4:	687b      	ldr	r3, [r7, #4]
 81006f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81006f8:	2200      	movs	r2, #0
 81006fa:	4619      	mov	r1, r3
 81006fc:	f003 fac2 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 8100700:	e16a      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 5:
			// Set Data 0101
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 8100702:	687b      	ldr	r3, [r7, #4]
 8100704:	6898      	ldr	r0, [r3, #8]
 8100706:	687b      	ldr	r3, [r7, #4]
 8100708:	8b9b      	ldrh	r3, [r3, #28]
 810070a:	2201      	movs	r2, #1
 810070c:	4619      	mov	r1, r3
 810070e:	f003 fab9 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 8100712:	687b      	ldr	r3, [r7, #4]
 8100714:	68d8      	ldr	r0, [r3, #12]
 8100716:	687b      	ldr	r3, [r7, #4]
 8100718:	8bdb      	ldrh	r3, [r3, #30]
 810071a:	2200      	movs	r2, #0
 810071c:	4619      	mov	r1, r3
 810071e:	f003 fab1 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100722:	687b      	ldr	r3, [r7, #4]
 8100724:	6918      	ldr	r0, [r3, #16]
 8100726:	687b      	ldr	r3, [r7, #4]
 8100728:	8c1b      	ldrh	r3, [r3, #32]
 810072a:	2201      	movs	r2, #1
 810072c:	4619      	mov	r1, r3
 810072e:	f003 faa9 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 8100732:	687b      	ldr	r3, [r7, #4]
 8100734:	6958      	ldr	r0, [r3, #20]
 8100736:	687b      	ldr	r3, [r7, #4]
 8100738:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810073a:	2200      	movs	r2, #0
 810073c:	4619      	mov	r1, r3
 810073e:	f003 faa1 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 8100742:	e149      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 6:
			// Set Data 0110
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 8100744:	687b      	ldr	r3, [r7, #4]
 8100746:	6898      	ldr	r0, [r3, #8]
 8100748:	687b      	ldr	r3, [r7, #4]
 810074a:	8b9b      	ldrh	r3, [r3, #28]
 810074c:	2200      	movs	r2, #0
 810074e:	4619      	mov	r1, r3
 8100750:	f003 fa98 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 8100754:	687b      	ldr	r3, [r7, #4]
 8100756:	68d8      	ldr	r0, [r3, #12]
 8100758:	687b      	ldr	r3, [r7, #4]
 810075a:	8bdb      	ldrh	r3, [r3, #30]
 810075c:	2201      	movs	r2, #1
 810075e:	4619      	mov	r1, r3
 8100760:	f003 fa90 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100764:	687b      	ldr	r3, [r7, #4]
 8100766:	6918      	ldr	r0, [r3, #16]
 8100768:	687b      	ldr	r3, [r7, #4]
 810076a:	8c1b      	ldrh	r3, [r3, #32]
 810076c:	2201      	movs	r2, #1
 810076e:	4619      	mov	r1, r3
 8100770:	f003 fa88 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 8100774:	687b      	ldr	r3, [r7, #4]
 8100776:	6958      	ldr	r0, [r3, #20]
 8100778:	687b      	ldr	r3, [r7, #4]
 810077a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810077c:	2200      	movs	r2, #0
 810077e:	4619      	mov	r1, r3
 8100780:	f003 fa80 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 8100784:	e128      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 7:
			// Set Data 0111
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 8100786:	687b      	ldr	r3, [r7, #4]
 8100788:	6898      	ldr	r0, [r3, #8]
 810078a:	687b      	ldr	r3, [r7, #4]
 810078c:	8b9b      	ldrh	r3, [r3, #28]
 810078e:	2201      	movs	r2, #1
 8100790:	4619      	mov	r1, r3
 8100792:	f003 fa77 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 8100796:	687b      	ldr	r3, [r7, #4]
 8100798:	68d8      	ldr	r0, [r3, #12]
 810079a:	687b      	ldr	r3, [r7, #4]
 810079c:	8bdb      	ldrh	r3, [r3, #30]
 810079e:	2201      	movs	r2, #1
 81007a0:	4619      	mov	r1, r3
 81007a2:	f003 fa6f 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 81007a6:	687b      	ldr	r3, [r7, #4]
 81007a8:	6918      	ldr	r0, [r3, #16]
 81007aa:	687b      	ldr	r3, [r7, #4]
 81007ac:	8c1b      	ldrh	r3, [r3, #32]
 81007ae:	2201      	movs	r2, #1
 81007b0:	4619      	mov	r1, r3
 81007b2:	f003 fa67 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 81007b6:	687b      	ldr	r3, [r7, #4]
 81007b8:	6958      	ldr	r0, [r3, #20]
 81007ba:	687b      	ldr	r3, [r7, #4]
 81007bc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81007be:	2200      	movs	r2, #0
 81007c0:	4619      	mov	r1, r3
 81007c2:	f003 fa5f 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 81007c6:	e107      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 8:
			// Set Data 1000
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 81007c8:	687b      	ldr	r3, [r7, #4]
 81007ca:	6898      	ldr	r0, [r3, #8]
 81007cc:	687b      	ldr	r3, [r7, #4]
 81007ce:	8b9b      	ldrh	r3, [r3, #28]
 81007d0:	2200      	movs	r2, #0
 81007d2:	4619      	mov	r1, r3
 81007d4:	f003 fa56 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 81007d8:	687b      	ldr	r3, [r7, #4]
 81007da:	68d8      	ldr	r0, [r3, #12]
 81007dc:	687b      	ldr	r3, [r7, #4]
 81007de:	8bdb      	ldrh	r3, [r3, #30]
 81007e0:	2200      	movs	r2, #0
 81007e2:	4619      	mov	r1, r3
 81007e4:	f003 fa4e 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 81007e8:	687b      	ldr	r3, [r7, #4]
 81007ea:	6918      	ldr	r0, [r3, #16]
 81007ec:	687b      	ldr	r3, [r7, #4]
 81007ee:	8c1b      	ldrh	r3, [r3, #32]
 81007f0:	2200      	movs	r2, #0
 81007f2:	4619      	mov	r1, r3
 81007f4:	f003 fa46 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 81007f8:	687b      	ldr	r3, [r7, #4]
 81007fa:	6958      	ldr	r0, [r3, #20]
 81007fc:	687b      	ldr	r3, [r7, #4]
 81007fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100800:	2201      	movs	r2, #1
 8100802:	4619      	mov	r1, r3
 8100804:	f003 fa3e 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 8100808:	e0e6      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 9:
			// Set Data 1001
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 810080a:	687b      	ldr	r3, [r7, #4]
 810080c:	6898      	ldr	r0, [r3, #8]
 810080e:	687b      	ldr	r3, [r7, #4]
 8100810:	8b9b      	ldrh	r3, [r3, #28]
 8100812:	2201      	movs	r2, #1
 8100814:	4619      	mov	r1, r3
 8100816:	f003 fa35 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 810081a:	687b      	ldr	r3, [r7, #4]
 810081c:	68d8      	ldr	r0, [r3, #12]
 810081e:	687b      	ldr	r3, [r7, #4]
 8100820:	8bdb      	ldrh	r3, [r3, #30]
 8100822:	2200      	movs	r2, #0
 8100824:	4619      	mov	r1, r3
 8100826:	f003 fa2d 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810082a:	687b      	ldr	r3, [r7, #4]
 810082c:	6918      	ldr	r0, [r3, #16]
 810082e:	687b      	ldr	r3, [r7, #4]
 8100830:	8c1b      	ldrh	r3, [r3, #32]
 8100832:	2200      	movs	r2, #0
 8100834:	4619      	mov	r1, r3
 8100836:	f003 fa25 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 810083a:	687b      	ldr	r3, [r7, #4]
 810083c:	6958      	ldr	r0, [r3, #20]
 810083e:	687b      	ldr	r3, [r7, #4]
 8100840:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100842:	2201      	movs	r2, #1
 8100844:	4619      	mov	r1, r3
 8100846:	f003 fa1d 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 810084a:	e0c5      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 10:
			// Set Data 1010
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 810084c:	687b      	ldr	r3, [r7, #4]
 810084e:	6898      	ldr	r0, [r3, #8]
 8100850:	687b      	ldr	r3, [r7, #4]
 8100852:	8b9b      	ldrh	r3, [r3, #28]
 8100854:	2200      	movs	r2, #0
 8100856:	4619      	mov	r1, r3
 8100858:	f003 fa14 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 810085c:	687b      	ldr	r3, [r7, #4]
 810085e:	68d8      	ldr	r0, [r3, #12]
 8100860:	687b      	ldr	r3, [r7, #4]
 8100862:	8bdb      	ldrh	r3, [r3, #30]
 8100864:	2201      	movs	r2, #1
 8100866:	4619      	mov	r1, r3
 8100868:	f003 fa0c 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810086c:	687b      	ldr	r3, [r7, #4]
 810086e:	6918      	ldr	r0, [r3, #16]
 8100870:	687b      	ldr	r3, [r7, #4]
 8100872:	8c1b      	ldrh	r3, [r3, #32]
 8100874:	2200      	movs	r2, #0
 8100876:	4619      	mov	r1, r3
 8100878:	f003 fa04 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 810087c:	687b      	ldr	r3, [r7, #4]
 810087e:	6958      	ldr	r0, [r3, #20]
 8100880:	687b      	ldr	r3, [r7, #4]
 8100882:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100884:	2201      	movs	r2, #1
 8100886:	4619      	mov	r1, r3
 8100888:	f003 f9fc 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 810088c:	e0a4      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 11:
			// Set Data 1011
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 810088e:	687b      	ldr	r3, [r7, #4]
 8100890:	6898      	ldr	r0, [r3, #8]
 8100892:	687b      	ldr	r3, [r7, #4]
 8100894:	8b9b      	ldrh	r3, [r3, #28]
 8100896:	2201      	movs	r2, #1
 8100898:	4619      	mov	r1, r3
 810089a:	f003 f9f3 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 810089e:	687b      	ldr	r3, [r7, #4]
 81008a0:	68d8      	ldr	r0, [r3, #12]
 81008a2:	687b      	ldr	r3, [r7, #4]
 81008a4:	8bdb      	ldrh	r3, [r3, #30]
 81008a6:	2201      	movs	r2, #1
 81008a8:	4619      	mov	r1, r3
 81008aa:	f003 f9eb 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 81008ae:	687b      	ldr	r3, [r7, #4]
 81008b0:	6918      	ldr	r0, [r3, #16]
 81008b2:	687b      	ldr	r3, [r7, #4]
 81008b4:	8c1b      	ldrh	r3, [r3, #32]
 81008b6:	2200      	movs	r2, #0
 81008b8:	4619      	mov	r1, r3
 81008ba:	f003 f9e3 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 81008be:	687b      	ldr	r3, [r7, #4]
 81008c0:	6958      	ldr	r0, [r3, #20]
 81008c2:	687b      	ldr	r3, [r7, #4]
 81008c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81008c6:	2201      	movs	r2, #1
 81008c8:	4619      	mov	r1, r3
 81008ca:	f003 f9db 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 81008ce:	e083      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 12:
			// Set Data 1100
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 81008d0:	687b      	ldr	r3, [r7, #4]
 81008d2:	6898      	ldr	r0, [r3, #8]
 81008d4:	687b      	ldr	r3, [r7, #4]
 81008d6:	8b9b      	ldrh	r3, [r3, #28]
 81008d8:	2200      	movs	r2, #0
 81008da:	4619      	mov	r1, r3
 81008dc:	f003 f9d2 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 81008e0:	687b      	ldr	r3, [r7, #4]
 81008e2:	68d8      	ldr	r0, [r3, #12]
 81008e4:	687b      	ldr	r3, [r7, #4]
 81008e6:	8bdb      	ldrh	r3, [r3, #30]
 81008e8:	2200      	movs	r2, #0
 81008ea:	4619      	mov	r1, r3
 81008ec:	f003 f9ca 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 81008f0:	687b      	ldr	r3, [r7, #4]
 81008f2:	6918      	ldr	r0, [r3, #16]
 81008f4:	687b      	ldr	r3, [r7, #4]
 81008f6:	8c1b      	ldrh	r3, [r3, #32]
 81008f8:	2201      	movs	r2, #1
 81008fa:	4619      	mov	r1, r3
 81008fc:	f003 f9c2 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 8100900:	687b      	ldr	r3, [r7, #4]
 8100902:	6958      	ldr	r0, [r3, #20]
 8100904:	687b      	ldr	r3, [r7, #4]
 8100906:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100908:	2201      	movs	r2, #1
 810090a:	4619      	mov	r1, r3
 810090c:	f003 f9ba 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 8100910:	e062      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 13:
			// Set Data 1101
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 8100912:	687b      	ldr	r3, [r7, #4]
 8100914:	6898      	ldr	r0, [r3, #8]
 8100916:	687b      	ldr	r3, [r7, #4]
 8100918:	8b9b      	ldrh	r3, [r3, #28]
 810091a:	2201      	movs	r2, #1
 810091c:	4619      	mov	r1, r3
 810091e:	f003 f9b1 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 8100922:	687b      	ldr	r3, [r7, #4]
 8100924:	68d8      	ldr	r0, [r3, #12]
 8100926:	687b      	ldr	r3, [r7, #4]
 8100928:	8bdb      	ldrh	r3, [r3, #30]
 810092a:	2200      	movs	r2, #0
 810092c:	4619      	mov	r1, r3
 810092e:	f003 f9a9 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100932:	687b      	ldr	r3, [r7, #4]
 8100934:	6918      	ldr	r0, [r3, #16]
 8100936:	687b      	ldr	r3, [r7, #4]
 8100938:	8c1b      	ldrh	r3, [r3, #32]
 810093a:	2201      	movs	r2, #1
 810093c:	4619      	mov	r1, r3
 810093e:	f003 f9a1 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 8100942:	687b      	ldr	r3, [r7, #4]
 8100944:	6958      	ldr	r0, [r3, #20]
 8100946:	687b      	ldr	r3, [r7, #4]
 8100948:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810094a:	2201      	movs	r2, #1
 810094c:	4619      	mov	r1, r3
 810094e:	f003 f999 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 8100952:	e041      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 14:
			// Set Data 1110
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 8100954:	687b      	ldr	r3, [r7, #4]
 8100956:	6898      	ldr	r0, [r3, #8]
 8100958:	687b      	ldr	r3, [r7, #4]
 810095a:	8b9b      	ldrh	r3, [r3, #28]
 810095c:	2201      	movs	r2, #1
 810095e:	4619      	mov	r1, r3
 8100960:	f003 f990 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 8100964:	687b      	ldr	r3, [r7, #4]
 8100966:	68d8      	ldr	r0, [r3, #12]
 8100968:	687b      	ldr	r3, [r7, #4]
 810096a:	8bdb      	ldrh	r3, [r3, #30]
 810096c:	2201      	movs	r2, #1
 810096e:	4619      	mov	r1, r3
 8100970:	f003 f988 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100974:	687b      	ldr	r3, [r7, #4]
 8100976:	6918      	ldr	r0, [r3, #16]
 8100978:	687b      	ldr	r3, [r7, #4]
 810097a:	8c1b      	ldrh	r3, [r3, #32]
 810097c:	2201      	movs	r2, #1
 810097e:	4619      	mov	r1, r3
 8100980:	f003 f980 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 8100984:	687b      	ldr	r3, [r7, #4]
 8100986:	6958      	ldr	r0, [r3, #20]
 8100988:	687b      	ldr	r3, [r7, #4]
 810098a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810098c:	2201      	movs	r2, #1
 810098e:	4619      	mov	r1, r3
 8100990:	f003 f978 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 8100994:	e020      	b.n	81009d8 <MC14515_Latch+0x47c>
		case 15:
			// Set Data 1111
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 8100996:	687b      	ldr	r3, [r7, #4]
 8100998:	6898      	ldr	r0, [r3, #8]
 810099a:	687b      	ldr	r3, [r7, #4]
 810099c:	8b9b      	ldrh	r3, [r3, #28]
 810099e:	2201      	movs	r2, #1
 81009a0:	4619      	mov	r1, r3
 81009a2:	f003 f96f 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81009a6:	687b      	ldr	r3, [r7, #4]
 81009a8:	68d8      	ldr	r0, [r3, #12]
 81009aa:	687b      	ldr	r3, [r7, #4]
 81009ac:	8bdb      	ldrh	r3, [r3, #30]
 81009ae:	2201      	movs	r2, #1
 81009b0:	4619      	mov	r1, r3
 81009b2:	f003 f967 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 81009b6:	687b      	ldr	r3, [r7, #4]
 81009b8:	6918      	ldr	r0, [r3, #16]
 81009ba:	687b      	ldr	r3, [r7, #4]
 81009bc:	8c1b      	ldrh	r3, [r3, #32]
 81009be:	2201      	movs	r2, #1
 81009c0:	4619      	mov	r1, r3
 81009c2:	f003 f95f 	bl	8103c84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 81009c6:	687b      	ldr	r3, [r7, #4]
 81009c8:	6958      	ldr	r0, [r3, #20]
 81009ca:	687b      	ldr	r3, [r7, #4]
 81009cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81009ce:	2201      	movs	r2, #1
 81009d0:	4619      	mov	r1, r3
 81009d2:	f003 f957 	bl	8103c84 <HAL_GPIO_WritePin>
			break;
 81009d6:	bf00      	nop
	}

	// Set ST to High ready to store data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_SET);
 81009d8:	687b      	ldr	r3, [r7, #4]
 81009da:	6818      	ldr	r0, [r3, #0]
 81009dc:	687b      	ldr	r3, [r7, #4]
 81009de:	8b1b      	ldrh	r3, [r3, #24]
 81009e0:	2201      	movs	r2, #1
 81009e2:	4619      	mov	r1, r3
 81009e4:	f003 f94e 	bl	8103c84 <HAL_GPIO_WritePin>

	// Set INH to Low
	HAL_GPIO_WritePin(mc14515->INHPort, mc14515->INHPin, GPIO_PIN_RESET);
 81009e8:	687b      	ldr	r3, [r7, #4]
 81009ea:	6858      	ldr	r0, [r3, #4]
 81009ec:	687b      	ldr	r3, [r7, #4]
 81009ee:	8b5b      	ldrh	r3, [r3, #26]
 81009f0:	2200      	movs	r2, #0
 81009f2:	4619      	mov	r1, r3
 81009f4:	f003 f946 	bl	8103c84 <HAL_GPIO_WritePin>

	// Latch Data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_RESET);
 81009f8:	687b      	ldr	r3, [r7, #4]
 81009fa:	6818      	ldr	r0, [r3, #0]
 81009fc:	687b      	ldr	r3, [r7, #4]
 81009fe:	8b1b      	ldrh	r3, [r3, #24]
 8100a00:	2200      	movs	r2, #0
 8100a02:	4619      	mov	r1, r3
 8100a04:	f003 f93e 	bl	8103c84 <HAL_GPIO_WritePin>

}
 8100a08:	bf00      	nop
 8100a0a:	3708      	adds	r7, #8
 8100a0c:	46bd      	mov	sp, r7
 8100a0e:	bd80      	pop	{r7, pc}

08100a10 <MC14515_Set_Output_All_High>:

void MC14515_Set_Output_All_High(MC14515Handle *mc14515)
{
 8100a10:	b580      	push	{r7, lr}
 8100a12:	b082      	sub	sp, #8
 8100a14:	af00      	add	r7, sp, #0
 8100a16:	6078      	str	r0, [r7, #4]
	// Set INH to High
	HAL_GPIO_WritePin(mc14515->INHPort, mc14515->INHPin, GPIO_PIN_SET);
 8100a18:	687b      	ldr	r3, [r7, #4]
 8100a1a:	6858      	ldr	r0, [r3, #4]
 8100a1c:	687b      	ldr	r3, [r7, #4]
 8100a1e:	8b5b      	ldrh	r3, [r3, #26]
 8100a20:	2201      	movs	r2, #1
 8100a22:	4619      	mov	r1, r3
 8100a24:	f003 f92e 	bl	8103c84 <HAL_GPIO_WritePin>

	// Set ST to High ready to store data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_SET);
 8100a28:	687b      	ldr	r3, [r7, #4]
 8100a2a:	6818      	ldr	r0, [r3, #0]
 8100a2c:	687b      	ldr	r3, [r7, #4]
 8100a2e:	8b1b      	ldrh	r3, [r3, #24]
 8100a30:	2201      	movs	r2, #1
 8100a32:	4619      	mov	r1, r3
 8100a34:	f003 f926 	bl	8103c84 <HAL_GPIO_WritePin>

	// Latch Data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_RESET);
 8100a38:	687b      	ldr	r3, [r7, #4]
 8100a3a:	6818      	ldr	r0, [r3, #0]
 8100a3c:	687b      	ldr	r3, [r7, #4]
 8100a3e:	8b1b      	ldrh	r3, [r3, #24]
 8100a40:	2200      	movs	r2, #0
 8100a42:	4619      	mov	r1, r3
 8100a44:	f003 f91e 	bl	8103c84 <HAL_GPIO_WritePin>
}
 8100a48:	bf00      	nop
 8100a4a:	3708      	adds	r7, #8
 8100a4c:	46bd      	mov	sp, r7
 8100a4e:	bd80      	pop	{r7, pc}

08100a50 <MFRC522_Write_Data>:
 * Function Name: MFRC522_Write_Data
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void MFRC522_Write_Data(uint8_t addr, uint8_t val, uint16_t nss_num) {
 8100a50:	b580      	push	{r7, lr}
 8100a52:	b084      	sub	sp, #16
 8100a54:	af00      	add	r7, sp, #0
 8100a56:	4603      	mov	r3, r0
 8100a58:	71fb      	strb	r3, [r7, #7]
 8100a5a:	460b      	mov	r3, r1
 8100a5c:	71bb      	strb	r3, [r7, #6]
 8100a5e:	4613      	mov	r3, r2
 8100a60:	80bb      	strh	r3, [r7, #4]

	uint8_t addr_bits = (((addr<<1) & 0x7E));
 8100a62:	79fb      	ldrb	r3, [r7, #7]
 8100a64:	005b      	lsls	r3, r3, #1
 8100a66:	b2db      	uxtb	r3, r3
 8100a68:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8100a6c:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuff[2] = {addr_bits,val};
 8100a6e:	7bfb      	ldrb	r3, [r7, #15]
 8100a70:	733b      	strb	r3, [r7, #12]
 8100a72:	79bb      	ldrb	r3, [r7, #6]
 8100a74:	737b      	strb	r3, [r7, #13]
#endif

#ifdef MC14515USE

	// Slave select Low
	MC14515_Latch(&MC14515HANDLER,nss_num);
 8100a76:	88bb      	ldrh	r3, [r7, #4]
 8100a78:	4619      	mov	r1, r3
 8100a7a:	4809      	ldr	r0, [pc, #36]	; (8100aa0 <MFRC522_Write_Data+0x50>)
 8100a7c:	f7ff fd6e 	bl	810055c <MC14515_Latch>

#endif

	// Transmit Data
	HAL_SPI_Transmit(&MFRC522_PORT, TxBuff, 2, 500);
 8100a80:	f107 010c 	add.w	r1, r7, #12
 8100a84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100a88:	2202      	movs	r2, #2
 8100a8a:	4806      	ldr	r0, [pc, #24]	; (8100aa4 <MFRC522_Write_Data+0x54>)
 8100a8c:	f003 fc48 	bl	8104320 <HAL_SPI_Transmit>
#endif

#ifdef MC14515USE

	// Slave select High
	MC14515_Set_Output_All_High(&MC14515HANDLER);
 8100a90:	4803      	ldr	r0, [pc, #12]	; (8100aa0 <MFRC522_Write_Data+0x50>)
 8100a92:	f7ff ffbd 	bl	8100a10 <MC14515_Set_Output_All_High>

#endif

}
 8100a96:	bf00      	nop
 8100a98:	3710      	adds	r7, #16
 8100a9a:	46bd      	mov	sp, r7
 8100a9c:	bd80      	pop	{r7, pc}
 8100a9e:	bf00      	nop
 8100aa0:	100001a4 	.word	0x100001a4
 8100aa4:	1000002c 	.word	0x1000002c

08100aa8 <MFRC522_Read_Data>:
 * Function Name: MFRC522_Read_Data
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
uint8_t MFRC522_Read_Data(uint8_t addr, uint16_t nss_num) {
 8100aa8:	b580      	push	{r7, lr}
 8100aaa:	b088      	sub	sp, #32
 8100aac:	af02      	add	r7, sp, #8
 8100aae:	4603      	mov	r3, r0
 8100ab0:	460a      	mov	r2, r1
 8100ab2:	71fb      	strb	r3, [r7, #7]
 8100ab4:	4613      	mov	r3, r2
 8100ab6:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef hal_status;

	uint8_t addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8100ab8:	79fb      	ldrb	r3, [r7, #7]
 8100aba:	005b      	lsls	r3, r3, #1
 8100abc:	b25b      	sxtb	r3, r3
 8100abe:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8100ac2:	b25b      	sxtb	r3, r3
 8100ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8100ac8:	b25b      	sxtb	r3, r3
 8100aca:	75bb      	strb	r3, [r7, #22]

	uint8_t Txbuff[2] = {addr_bits,0};
 8100acc:	7dbb      	ldrb	r3, [r7, #22]
 8100ace:	743b      	strb	r3, [r7, #16]
 8100ad0:	2300      	movs	r3, #0
 8100ad2:	747b      	strb	r3, [r7, #17]
#endif

#ifdef MC14515USE

	// Slave select Low
	MC14515_Latch(&MC14515HANDLER,nss_num);
 8100ad4:	88bb      	ldrh	r3, [r7, #4]
 8100ad6:	4619      	mov	r1, r3
 8100ad8:	480e      	ldr	r0, [pc, #56]	; (8100b14 <MFRC522_Read_Data+0x6c>)
 8100ada:	f7ff fd3f 	bl	810055c <MC14515_Latch>

#endif

	hal_status = HAL_SPI_TransmitReceive(&MFRC522_PORT, Txbuff, Rxbuff, 2, 500);
 8100ade:	f107 020c 	add.w	r2, r7, #12
 8100ae2:	f107 0110 	add.w	r1, r7, #16
 8100ae6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100aea:	9300      	str	r3, [sp, #0]
 8100aec:	2302      	movs	r3, #2
 8100aee:	480a      	ldr	r0, [pc, #40]	; (8100b18 <MFRC522_Read_Data+0x70>)
 8100af0:	f003 fe04 	bl	81046fc <HAL_SPI_TransmitReceive>
 8100af4:	4603      	mov	r3, r0
 8100af6:	757b      	strb	r3, [r7, #21]

	if (hal_status == HAL_OK)
 8100af8:	7d7b      	ldrb	r3, [r7, #21]
 8100afa:	2b00      	cmp	r3, #0
 8100afc:	d101      	bne.n	8100b02 <MFRC522_Read_Data+0x5a>
	{
		rx_bits = Rxbuff[1];    // response is in the second byte
 8100afe:	7b7b      	ldrb	r3, [r7, #13]
 8100b00:	75fb      	strb	r3, [r7, #23]
#endif

#ifdef MC14515USE

	// Slave select High
	MC14515_Set_Output_All_High(&MC14515HANDLER);
 8100b02:	4804      	ldr	r0, [pc, #16]	; (8100b14 <MFRC522_Read_Data+0x6c>)
 8100b04:	f7ff ff84 	bl	8100a10 <MC14515_Set_Output_All_High>

#endif

	return (uint8_t) rx_bits; // return the rx bits, casting to an 8 bit int
 8100b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8100b0a:	4618      	mov	r0, r3
 8100b0c:	3718      	adds	r7, #24
 8100b0e:	46bd      	mov	sp, r7
 8100b10:	bd80      	pop	{r7, pc}
 8100b12:	bf00      	nop
 8100b14:	100001a4 	.word	0x100001a4
 8100b18:	1000002c 	.word	0x1000002c

08100b1c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uint8_t reg, uint8_t mask, uint16_t nss_num)
{
 8100b1c:	b580      	push	{r7, lr}
 8100b1e:	b084      	sub	sp, #16
 8100b20:	af00      	add	r7, sp, #0
 8100b22:	4603      	mov	r3, r0
 8100b24:	71fb      	strb	r3, [r7, #7]
 8100b26:	460b      	mov	r3, r1
 8100b28:	71bb      	strb	r3, [r7, #6]
 8100b2a:	4613      	mov	r3, r2
 8100b2c:	80bb      	strh	r3, [r7, #4]
	uint8_t tmp;
	tmp = MFRC522_Read_Data(reg, nss_num);
 8100b2e:	88ba      	ldrh	r2, [r7, #4]
 8100b30:	79fb      	ldrb	r3, [r7, #7]
 8100b32:	4611      	mov	r1, r2
 8100b34:	4618      	mov	r0, r3
 8100b36:	f7ff ffb7 	bl	8100aa8 <MFRC522_Read_Data>
 8100b3a:	4603      	mov	r3, r0
 8100b3c:	73fb      	strb	r3, [r7, #15]
	MFRC522_Write_Data(reg, tmp | mask, nss_num);  // set bit mask
 8100b3e:	7bfa      	ldrb	r2, [r7, #15]
 8100b40:	79bb      	ldrb	r3, [r7, #6]
 8100b42:	4313      	orrs	r3, r2
 8100b44:	b2d9      	uxtb	r1, r3
 8100b46:	88ba      	ldrh	r2, [r7, #4]
 8100b48:	79fb      	ldrb	r3, [r7, #7]
 8100b4a:	4618      	mov	r0, r3
 8100b4c:	f7ff ff80 	bl	8100a50 <MFRC522_Write_Data>
}
 8100b50:	bf00      	nop
 8100b52:	3710      	adds	r7, #16
 8100b54:	46bd      	mov	sp, r7
 8100b56:	bd80      	pop	{r7, pc}

08100b58 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
 */
void ClearBitMask(uint8_t reg, uint8_t mask, uint16_t nss_num)
{
 8100b58:	b580      	push	{r7, lr}
 8100b5a:	b084      	sub	sp, #16
 8100b5c:	af00      	add	r7, sp, #0
 8100b5e:	4603      	mov	r3, r0
 8100b60:	71fb      	strb	r3, [r7, #7]
 8100b62:	460b      	mov	r3, r1
 8100b64:	71bb      	strb	r3, [r7, #6]
 8100b66:	4613      	mov	r3, r2
 8100b68:	80bb      	strh	r3, [r7, #4]
	uint8_t tmp;
	tmp = MFRC522_Read_Data(reg, nss_num);
 8100b6a:	88ba      	ldrh	r2, [r7, #4]
 8100b6c:	79fb      	ldrb	r3, [r7, #7]
 8100b6e:	4611      	mov	r1, r2
 8100b70:	4618      	mov	r0, r3
 8100b72:	f7ff ff99 	bl	8100aa8 <MFRC522_Read_Data>
 8100b76:	4603      	mov	r3, r0
 8100b78:	73fb      	strb	r3, [r7, #15]
	MFRC522_Write_Data(reg, tmp & (~mask), nss_num);  // clear bit mask
 8100b7a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8100b7e:	43db      	mvns	r3, r3
 8100b80:	b25a      	sxtb	r2, r3
 8100b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100b86:	4013      	ands	r3, r2
 8100b88:	b25b      	sxtb	r3, r3
 8100b8a:	b2d9      	uxtb	r1, r3
 8100b8c:	88ba      	ldrh	r2, [r7, #4]
 8100b8e:	79fb      	ldrb	r3, [r7, #7]
 8100b90:	4618      	mov	r0, r3
 8100b92:	f7ff ff5d 	bl	8100a50 <MFRC522_Write_Data>
}
 8100b96:	bf00      	nop
 8100b98:	3710      	adds	r7, #16
 8100b9a:	46bd      	mov	sp, r7
 8100b9c:	bd80      	pop	{r7, pc}

08100b9e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(uint16_t nss_num)
{
 8100b9e:	b580      	push	{r7, lr}
 8100ba0:	b082      	sub	sp, #8
 8100ba2:	af00      	add	r7, sp, #0
 8100ba4:	4603      	mov	r3, r0
 8100ba6:	80fb      	strh	r3, [r7, #6]
	SetBitMask(TxControlReg, 0x03,nss_num);
 8100ba8:	88fb      	ldrh	r3, [r7, #6]
 8100baa:	461a      	mov	r2, r3
 8100bac:	2103      	movs	r1, #3
 8100bae:	2014      	movs	r0, #20
 8100bb0:	f7ff ffb4 	bl	8100b1c <SetBitMask>
}
 8100bb4:	bf00      	nop
 8100bb6:	3708      	adds	r7, #8
 8100bb8:	46bd      	mov	sp, r7
 8100bba:	bd80      	pop	{r7, pc}

08100bbc <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(uint16_t nss_num)
{
 8100bbc:	b580      	push	{r7, lr}
 8100bbe:	b082      	sub	sp, #8
 8100bc0:	af00      	add	r7, sp, #0
 8100bc2:	4603      	mov	r3, r0
 8100bc4:	80fb      	strh	r3, [r7, #6]
	MFRC522_Write_Data(CommandReg, PCD_RESETPHASE, nss_num);
 8100bc6:	88fb      	ldrh	r3, [r7, #6]
 8100bc8:	461a      	mov	r2, r3
 8100bca:	210f      	movs	r1, #15
 8100bcc:	2001      	movs	r0, #1
 8100bce:	f7ff ff3f 	bl	8100a50 <MFRC522_Write_Data>
}
 8100bd2:	bf00      	nop
 8100bd4:	3708      	adds	r7, #8
 8100bd6:	46bd      	mov	sp, r7
 8100bd8:	bd80      	pop	{r7, pc}

08100bda <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Init(uint16_t nss_num)
{
 8100bda:	b580      	push	{r7, lr}
 8100bdc:	b082      	sub	sp, #8
 8100bde:	af00      	add	r7, sp, #0
 8100be0:	4603      	mov	r3, r0
 8100be2:	80fb      	strh	r3, [r7, #6]
	MFRC522_Reset(nss_num);
 8100be4:	88fb      	ldrh	r3, [r7, #6]
 8100be6:	4618      	mov	r0, r3
 8100be8:	f7ff ffe8 	bl	8100bbc <MFRC522_Reset>

	// Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	MFRC522_Write_Data(TModeReg, 0x80, nss_num); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8100bec:	88fb      	ldrh	r3, [r7, #6]
 8100bee:	461a      	mov	r2, r3
 8100bf0:	2180      	movs	r1, #128	; 0x80
 8100bf2:	202a      	movs	r0, #42	; 0x2a
 8100bf4:	f7ff ff2c 	bl	8100a50 <MFRC522_Write_Data>
	MFRC522_Write_Data(TPrescalerReg, 0xA9, nss_num); //0x34); // TModeReg[3..0] + TPrescalerReg
 8100bf8:	88fb      	ldrh	r3, [r7, #6]
 8100bfa:	461a      	mov	r2, r3
 8100bfc:	21a9      	movs	r1, #169	; 0xa9
 8100bfe:	202b      	movs	r0, #43	; 0x2b
 8100c00:	f7ff ff26 	bl	8100a50 <MFRC522_Write_Data>
	MFRC522_Write_Data(TReloadRegL, 0x03, nss_num); //30);
 8100c04:	88fb      	ldrh	r3, [r7, #6]
 8100c06:	461a      	mov	r2, r3
 8100c08:	2103      	movs	r1, #3
 8100c0a:	202d      	movs	r0, #45	; 0x2d
 8100c0c:	f7ff ff20 	bl	8100a50 <MFRC522_Write_Data>
	MFRC522_Write_Data(TReloadRegH, 0xE8, nss_num); //0);
 8100c10:	88fb      	ldrh	r3, [r7, #6]
 8100c12:	461a      	mov	r2, r3
 8100c14:	21e8      	movs	r1, #232	; 0xe8
 8100c16:	202c      	movs	r0, #44	; 0x2c
 8100c18:	f7ff ff1a 	bl	8100a50 <MFRC522_Write_Data>
	MFRC522_Write_Data(TxAutoReg, 0x40, nss_num);     // force 100% ASK modulation
 8100c1c:	88fb      	ldrh	r3, [r7, #6]
 8100c1e:	461a      	mov	r2, r3
 8100c20:	2140      	movs	r1, #64	; 0x40
 8100c22:	2015      	movs	r0, #21
 8100c24:	f7ff ff14 	bl	8100a50 <MFRC522_Write_Data>
	MFRC522_Write_Data(ModeReg, 0x3D, nss_num);       // CRC Initial value 0x6363
 8100c28:	88fb      	ldrh	r3, [r7, #6]
 8100c2a:	461a      	mov	r2, r3
 8100c2c:	213d      	movs	r1, #61	; 0x3d
 8100c2e:	2011      	movs	r0, #17
 8100c30:	f7ff ff0e 	bl	8100a50 <MFRC522_Write_Data>
	////  MFRC522_Write_Data(DivlEnReg, 0x14);
	//  MFRC522_Write_Data(DivlEnReg, 0x00, nss_num);
	//  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);

	// turn antenna on
	AntennaOn(nss_num);
 8100c34:	88fb      	ldrh	r3, [r7, #6]
 8100c36:	4618      	mov	r0, r3
 8100c38:	f7ff ffb1 	bl	8100b9e <AntennaOn>
	//  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
}
 8100c3c:	bf00      	nop
 8100c3e:	3708      	adds	r7, #8
 8100c40:	46bd      	mov	sp, r7
 8100c42:	bd80      	pop	{r7, pc}

08100c44 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType, uint16_t nss_num)
{
 8100c44:	b580      	push	{r7, lr}
 8100c46:	b086      	sub	sp, #24
 8100c48:	af02      	add	r7, sp, #8
 8100c4a:	4603      	mov	r3, r0
 8100c4c:	6039      	str	r1, [r7, #0]
 8100c4e:	71fb      	strb	r3, [r7, #7]
 8100c50:	4613      	mov	r3, r2
 8100c52:	80bb      	strh	r3, [r7, #4]
	uint8_t status;
	uint backBits; // The received data bits

	MFRC522_Write_Data(BitFramingReg, 0x07, nss_num);   // TxLastBists = BitFramingReg[2..0]
 8100c54:	88bb      	ldrh	r3, [r7, #4]
 8100c56:	461a      	mov	r2, r3
 8100c58:	2107      	movs	r1, #7
 8100c5a:	200d      	movs	r0, #13
 8100c5c:	f7ff fef8 	bl	8100a50 <MFRC522_Write_Data>

	TagType[0] = reqMode;
 8100c60:	683b      	ldr	r3, [r7, #0]
 8100c62:	79fa      	ldrb	r2, [r7, #7]
 8100c64:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits, nss_num);
 8100c66:	88bb      	ldrh	r3, [r7, #4]
 8100c68:	9301      	str	r3, [sp, #4]
 8100c6a:	f107 0308 	add.w	r3, r7, #8
 8100c6e:	9300      	str	r3, [sp, #0]
 8100c70:	683b      	ldr	r3, [r7, #0]
 8100c72:	2201      	movs	r2, #1
 8100c74:	6839      	ldr	r1, [r7, #0]
 8100c76:	200c      	movs	r0, #12
 8100c78:	f000 f80f 	bl	8100c9a <MFRC522_ToCard>
 8100c7c:	4603      	mov	r3, r0
 8100c7e:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8100c80:	7bfb      	ldrb	r3, [r7, #15]
 8100c82:	2b00      	cmp	r3, #0
 8100c84:	d102      	bne.n	8100c8c <MFRC522_Request+0x48>
 8100c86:	68bb      	ldr	r3, [r7, #8]
 8100c88:	2b10      	cmp	r3, #16
 8100c8a:	d001      	beq.n	8100c90 <MFRC522_Request+0x4c>
		status = MI_ERR;
 8100c8c:	2302      	movs	r3, #2
 8100c8e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8100c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8100c92:	4618      	mov	r0, r3
 8100c94:	3710      	adds	r7, #16
 8100c96:	46bd      	mov	sp, r7
 8100c98:	bd80      	pop	{r7, pc}

08100c9a <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen, uint16_t nss_num)
{
 8100c9a:	b590      	push	{r4, r7, lr}
 8100c9c:	b089      	sub	sp, #36	; 0x24
 8100c9e:	af00      	add	r7, sp, #0
 8100ca0:	60b9      	str	r1, [r7, #8]
 8100ca2:	607b      	str	r3, [r7, #4]
 8100ca4:	4603      	mov	r3, r0
 8100ca6:	73fb      	strb	r3, [r7, #15]
 8100ca8:	4613      	mov	r3, r2
 8100caa:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8100cac:	2302      	movs	r3, #2
 8100cae:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn = 0x00;
 8100cb0:	2300      	movs	r3, #0
 8100cb2:	77bb      	strb	r3, [r7, #30]
	uint8_t waitIRq = 0x00;
 8100cb4:	2300      	movs	r3, #0
 8100cb6:	777b      	strb	r3, [r7, #29]
	uint8_t lastBits;
	uint8_t n;
	uint i;

	switch (command)
 8100cb8:	7bfb      	ldrb	r3, [r7, #15]
 8100cba:	2b0c      	cmp	r3, #12
 8100cbc:	d006      	beq.n	8100ccc <MFRC522_ToCard+0x32>
 8100cbe:	2b0e      	cmp	r3, #14
 8100cc0:	d109      	bne.n	8100cd6 <MFRC522_ToCard+0x3c>
	{
	case PCD_AUTHENT:     // Certification cards close
	{
		irqEn = 0x12;
 8100cc2:	2312      	movs	r3, #18
 8100cc4:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 8100cc6:	2310      	movs	r3, #16
 8100cc8:	777b      	strb	r3, [r7, #29]
		break;
 8100cca:	e005      	b.n	8100cd8 <MFRC522_ToCard+0x3e>
	}
	case PCD_TRANSCEIVE:  // Transmit FIFO data
	{
		irqEn = 0x77;
 8100ccc:	2377      	movs	r3, #119	; 0x77
 8100cce:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 8100cd0:	2330      	movs	r3, #48	; 0x30
 8100cd2:	777b      	strb	r3, [r7, #29]
		break;
 8100cd4:	e000      	b.n	8100cd8 <MFRC522_ToCard+0x3e>
	}
	default:
		break;
 8100cd6:	bf00      	nop
	}

	MFRC522_Write_Data(CommIEnReg, irqEn|0x80, nss_num);  // Interrupt request
 8100cd8:	7fbb      	ldrb	r3, [r7, #30]
 8100cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8100cde:	b2db      	uxtb	r3, r3
 8100ce0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8100ce2:	4619      	mov	r1, r3
 8100ce4:	2002      	movs	r0, #2
 8100ce6:	f7ff feb3 	bl	8100a50 <MFRC522_Write_Data>
	//  MFRC522_Write_Data(CommIEnReg, 0x7F); //Edit Some

	ClearBitMask(CommIrqReg, 0x80, nss_num);         // Clear all interrupt request bit
 8100cea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100cec:	461a      	mov	r2, r3
 8100cee:	2180      	movs	r1, #128	; 0x80
 8100cf0:	2004      	movs	r0, #4
 8100cf2:	f7ff ff31 	bl	8100b58 <ClearBitMask>

	SetBitMask(FIFOLevelReg, 0x80, nss_num);         // FlushBuffer=1, FIFO Initialization
 8100cf6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100cf8:	461a      	mov	r2, r3
 8100cfa:	2180      	movs	r1, #128	; 0x80
 8100cfc:	200a      	movs	r0, #10
 8100cfe:	f7ff ff0d 	bl	8100b1c <SetBitMask>


	MFRC522_Write_Data(CommandReg, PCD_IDLE, nss_num);    // NO action; Cancel the current command
 8100d02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100d04:	461a      	mov	r2, r3
 8100d06:	2100      	movs	r1, #0
 8100d08:	2001      	movs	r0, #1
 8100d0a:	f7ff fea1 	bl	8100a50 <MFRC522_Write_Data>

	// Writing data to the FIFO
	for (i=0; i<sendLen; i++)
 8100d0e:	2300      	movs	r3, #0
 8100d10:	61bb      	str	r3, [r7, #24]
 8100d12:	e00b      	b.n	8100d2c <MFRC522_ToCard+0x92>
	{
		MFRC522_Write_Data(FIFODataReg, sendData[i], nss_num);
 8100d14:	68ba      	ldr	r2, [r7, #8]
 8100d16:	69bb      	ldr	r3, [r7, #24]
 8100d18:	4413      	add	r3, r2
 8100d1a:	781b      	ldrb	r3, [r3, #0]
 8100d1c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8100d1e:	4619      	mov	r1, r3
 8100d20:	2009      	movs	r0, #9
 8100d22:	f7ff fe95 	bl	8100a50 <MFRC522_Write_Data>
	for (i=0; i<sendLen; i++)
 8100d26:	69bb      	ldr	r3, [r7, #24]
 8100d28:	3301      	adds	r3, #1
 8100d2a:	61bb      	str	r3, [r7, #24]
 8100d2c:	7bbb      	ldrb	r3, [r7, #14]
 8100d2e:	69ba      	ldr	r2, [r7, #24]
 8100d30:	429a      	cmp	r2, r3
 8100d32:	d3ef      	bcc.n	8100d14 <MFRC522_ToCard+0x7a>
	}

	// Execute the command
	MFRC522_Write_Data(CommandReg, command, nss_num);
 8100d34:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8100d36:	7bfb      	ldrb	r3, [r7, #15]
 8100d38:	4619      	mov	r1, r3
 8100d3a:	2001      	movs	r0, #1
 8100d3c:	f7ff fe88 	bl	8100a50 <MFRC522_Write_Data>
	if (command == PCD_TRANSCEIVE)
 8100d40:	7bfb      	ldrb	r3, [r7, #15]
 8100d42:	2b0c      	cmp	r3, #12
 8100d44:	d105      	bne.n	8100d52 <MFRC522_ToCard+0xb8>
	{
		SetBitMask(BitFramingReg, 0x80, nss_num);      // StartSend=1,transmission of data starts
 8100d46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100d48:	461a      	mov	r2, r3
 8100d4a:	2180      	movs	r1, #128	; 0x80
 8100d4c:	200d      	movs	r0, #13
 8100d4e:	f7ff fee5 	bl	8100b1c <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8100d52:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8100d56:	61bb      	str	r3, [r7, #24]
	do
	{
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_Read_Data(CommIrqReg, nss_num);
 8100d58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100d5a:	4619      	mov	r1, r3
 8100d5c:	2004      	movs	r0, #4
 8100d5e:	f7ff fea3 	bl	8100aa8 <MFRC522_Read_Data>
 8100d62:	4603      	mov	r3, r0
 8100d64:	773b      	strb	r3, [r7, #28]
		i--;
 8100d66:	69bb      	ldr	r3, [r7, #24]
 8100d68:	3b01      	subs	r3, #1
 8100d6a:	61bb      	str	r3, [r7, #24]
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8100d6c:	69bb      	ldr	r3, [r7, #24]
 8100d6e:	2b00      	cmp	r3, #0
 8100d70:	d00a      	beq.n	8100d88 <MFRC522_ToCard+0xee>
 8100d72:	7f3b      	ldrb	r3, [r7, #28]
 8100d74:	f003 0301 	and.w	r3, r3, #1
 8100d78:	2b00      	cmp	r3, #0
 8100d7a:	d105      	bne.n	8100d88 <MFRC522_ToCard+0xee>
 8100d7c:	7f3a      	ldrb	r2, [r7, #28]
 8100d7e:	7f7b      	ldrb	r3, [r7, #29]
 8100d80:	4013      	ands	r3, r2
 8100d82:	b2db      	uxtb	r3, r3
 8100d84:	2b00      	cmp	r3, #0
 8100d86:	d0e7      	beq.n	8100d58 <MFRC522_ToCard+0xbe>

	ClearBitMask(BitFramingReg, 0x80, nss_num);      // StartSend=0
 8100d88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100d8a:	461a      	mov	r2, r3
 8100d8c:	2180      	movs	r1, #128	; 0x80
 8100d8e:	200d      	movs	r0, #13
 8100d90:	f7ff fee2 	bl	8100b58 <ClearBitMask>

	if (i != 0)
 8100d94:	69bb      	ldr	r3, [r7, #24]
 8100d96:	2b00      	cmp	r3, #0
 8100d98:	d05a      	beq.n	8100e50 <MFRC522_ToCard+0x1b6>
	{
		if(!(MFRC522_Read_Data(ErrorReg, nss_num) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8100d9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100d9c:	4619      	mov	r1, r3
 8100d9e:	2006      	movs	r0, #6
 8100da0:	f7ff fe82 	bl	8100aa8 <MFRC522_Read_Data>
 8100da4:	4603      	mov	r3, r0
 8100da6:	f003 031b 	and.w	r3, r3, #27
 8100daa:	2b00      	cmp	r3, #0
 8100dac:	d14e      	bne.n	8100e4c <MFRC522_ToCard+0x1b2>
		{
			status = MI_OK;
 8100dae:	2300      	movs	r3, #0
 8100db0:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01)
 8100db2:	7f3a      	ldrb	r2, [r7, #28]
 8100db4:	7fbb      	ldrb	r3, [r7, #30]
 8100db6:	4013      	ands	r3, r2
 8100db8:	b2db      	uxtb	r3, r3
 8100dba:	f003 0301 	and.w	r3, r3, #1
 8100dbe:	2b00      	cmp	r3, #0
 8100dc0:	d001      	beq.n	8100dc6 <MFRC522_ToCard+0x12c>
			{
				status = MI_NOTAGERR;             // ??
 8100dc2:	2301      	movs	r3, #1
 8100dc4:	77fb      	strb	r3, [r7, #31]
			}

			if (command == PCD_TRANSCEIVE)
 8100dc6:	7bfb      	ldrb	r3, [r7, #15]
 8100dc8:	2b0c      	cmp	r3, #12
 8100dca:	d141      	bne.n	8100e50 <MFRC522_ToCard+0x1b6>
			{
				n = MFRC522_Read_Data(FIFOLevelReg, nss_num);
 8100dcc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100dce:	4619      	mov	r1, r3
 8100dd0:	200a      	movs	r0, #10
 8100dd2:	f7ff fe69 	bl	8100aa8 <MFRC522_Read_Data>
 8100dd6:	4603      	mov	r3, r0
 8100dd8:	773b      	strb	r3, [r7, #28]
				lastBits = MFRC522_Read_Data(ControlReg, nss_num) & 0x07;
 8100dda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100ddc:	4619      	mov	r1, r3
 8100dde:	200c      	movs	r0, #12
 8100de0:	f7ff fe62 	bl	8100aa8 <MFRC522_Read_Data>
 8100de4:	4603      	mov	r3, r0
 8100de6:	f003 0307 	and.w	r3, r3, #7
 8100dea:	75fb      	strb	r3, [r7, #23]
				if (lastBits)
 8100dec:	7dfb      	ldrb	r3, [r7, #23]
 8100dee:	2b00      	cmp	r3, #0
 8100df0:	d008      	beq.n	8100e04 <MFRC522_ToCard+0x16a>
				{
					*backLen = (n-1)*8 + lastBits;
 8100df2:	7f3b      	ldrb	r3, [r7, #28]
 8100df4:	3b01      	subs	r3, #1
 8100df6:	00da      	lsls	r2, r3, #3
 8100df8:	7dfb      	ldrb	r3, [r7, #23]
 8100dfa:	4413      	add	r3, r2
 8100dfc:	461a      	mov	r2, r3
 8100dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100e00:	601a      	str	r2, [r3, #0]
 8100e02:	e004      	b.n	8100e0e <MFRC522_ToCard+0x174>
				}
				else
				{
					*backLen = n*8;
 8100e04:	7f3b      	ldrb	r3, [r7, #28]
 8100e06:	00db      	lsls	r3, r3, #3
 8100e08:	461a      	mov	r2, r3
 8100e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100e0c:	601a      	str	r2, [r3, #0]
				}

				if (n == 0)
 8100e0e:	7f3b      	ldrb	r3, [r7, #28]
 8100e10:	2b00      	cmp	r3, #0
 8100e12:	d101      	bne.n	8100e18 <MFRC522_ToCard+0x17e>
				{
					n = 1;
 8100e14:	2301      	movs	r3, #1
 8100e16:	773b      	strb	r3, [r7, #28]
				}
				if (n > MAX_LEN)
 8100e18:	7f3b      	ldrb	r3, [r7, #28]
 8100e1a:	2b10      	cmp	r3, #16
 8100e1c:	d901      	bls.n	8100e22 <MFRC522_ToCard+0x188>
				{
					n = MAX_LEN;
 8100e1e:	2310      	movs	r3, #16
 8100e20:	773b      	strb	r3, [r7, #28]
				}

				// Reading the received data in FIFO
				for (i=0; i<n; i++)
 8100e22:	2300      	movs	r3, #0
 8100e24:	61bb      	str	r3, [r7, #24]
 8100e26:	e00c      	b.n	8100e42 <MFRC522_ToCard+0x1a8>
				{
					backData[i] = MFRC522_Read_Data(FIFODataReg, nss_num);
 8100e28:	687a      	ldr	r2, [r7, #4]
 8100e2a:	69bb      	ldr	r3, [r7, #24]
 8100e2c:	18d4      	adds	r4, r2, r3
 8100e2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100e30:	4619      	mov	r1, r3
 8100e32:	2009      	movs	r0, #9
 8100e34:	f7ff fe38 	bl	8100aa8 <MFRC522_Read_Data>
 8100e38:	4603      	mov	r3, r0
 8100e3a:	7023      	strb	r3, [r4, #0]
				for (i=0; i<n; i++)
 8100e3c:	69bb      	ldr	r3, [r7, #24]
 8100e3e:	3301      	adds	r3, #1
 8100e40:	61bb      	str	r3, [r7, #24]
 8100e42:	7f3b      	ldrb	r3, [r7, #28]
 8100e44:	69ba      	ldr	r2, [r7, #24]
 8100e46:	429a      	cmp	r2, r3
 8100e48:	d3ee      	bcc.n	8100e28 <MFRC522_ToCard+0x18e>
 8100e4a:	e001      	b.n	8100e50 <MFRC522_ToCard+0x1b6>
				}
			}
		}
		else {
			//printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			status = MI_ERR;
 8100e4c:	2302      	movs	r3, #2
 8100e4e:	77fb      	strb	r3, [r7, #31]
	}
	else {
		//printf("~~~ request timed out\r\n");
	}

	return status;
 8100e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8100e52:	4618      	mov	r0, r3
 8100e54:	3724      	adds	r7, #36	; 0x24
 8100e56:	46bd      	mov	sp, r7
 8100e58:	bd90      	pop	{r4, r7, pc}

08100e5a <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum, uint16_t nss_num)
{
 8100e5a:	b580      	push	{r7, lr}
 8100e5c:	b086      	sub	sp, #24
 8100e5e:	af02      	add	r7, sp, #8
 8100e60:	6078      	str	r0, [r7, #4]
 8100e62:	460b      	mov	r3, r1
 8100e64:	807b      	strh	r3, [r7, #2]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
 8100e66:	2300      	movs	r3, #0
 8100e68:	737b      	strb	r3, [r7, #13]
	uint unLen;


	//ClearBitMask(Status2Reg, 0x08);		//TempSensclear
	//ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	MFRC522_Write_Data(BitFramingReg, 0x00, nss_num);		//TxLastBists = BitFramingReg[2..0]
 8100e6a:	887b      	ldrh	r3, [r7, #2]
 8100e6c:	461a      	mov	r2, r3
 8100e6e:	2100      	movs	r1, #0
 8100e70:	200d      	movs	r0, #13
 8100e72:	f7ff fded 	bl	8100a50 <MFRC522_Write_Data>

	serNum[0] = PICC_ANTICOLL;
 8100e76:	687b      	ldr	r3, [r7, #4]
 8100e78:	2293      	movs	r2, #147	; 0x93
 8100e7a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8100e7c:	687b      	ldr	r3, [r7, #4]
 8100e7e:	3301      	adds	r3, #1
 8100e80:	2220      	movs	r2, #32
 8100e82:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen, nss_num);
 8100e84:	887b      	ldrh	r3, [r7, #2]
 8100e86:	9301      	str	r3, [sp, #4]
 8100e88:	f107 0308 	add.w	r3, r7, #8
 8100e8c:	9300      	str	r3, [sp, #0]
 8100e8e:	687b      	ldr	r3, [r7, #4]
 8100e90:	2202      	movs	r2, #2
 8100e92:	6879      	ldr	r1, [r7, #4]
 8100e94:	200c      	movs	r0, #12
 8100e96:	f7ff ff00 	bl	8100c9a <MFRC522_ToCard>
 8100e9a:	4603      	mov	r3, r0
 8100e9c:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK)
 8100e9e:	7bfb      	ldrb	r3, [r7, #15]
 8100ea0:	2b00      	cmp	r3, #0
 8100ea2:	d118      	bne.n	8100ed6 <MFRC522_Anticoll+0x7c>
	{
		//Check card serial number
		for (i=0; i<4; i++)
 8100ea4:	2300      	movs	r3, #0
 8100ea6:	73bb      	strb	r3, [r7, #14]
 8100ea8:	e009      	b.n	8100ebe <MFRC522_Anticoll+0x64>
		{
			serNumCheck ^= serNum[i];
 8100eaa:	7bbb      	ldrb	r3, [r7, #14]
 8100eac:	687a      	ldr	r2, [r7, #4]
 8100eae:	4413      	add	r3, r2
 8100eb0:	781a      	ldrb	r2, [r3, #0]
 8100eb2:	7b7b      	ldrb	r3, [r7, #13]
 8100eb4:	4053      	eors	r3, r2
 8100eb6:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8100eb8:	7bbb      	ldrb	r3, [r7, #14]
 8100eba:	3301      	adds	r3, #1
 8100ebc:	73bb      	strb	r3, [r7, #14]
 8100ebe:	7bbb      	ldrb	r3, [r7, #14]
 8100ec0:	2b03      	cmp	r3, #3
 8100ec2:	d9f2      	bls.n	8100eaa <MFRC522_Anticoll+0x50>
		}
		if (serNumCheck != serNum[i])
 8100ec4:	7bbb      	ldrb	r3, [r7, #14]
 8100ec6:	687a      	ldr	r2, [r7, #4]
 8100ec8:	4413      	add	r3, r2
 8100eca:	781b      	ldrb	r3, [r3, #0]
 8100ecc:	7b7a      	ldrb	r2, [r7, #13]
 8100ece:	429a      	cmp	r2, r3
 8100ed0:	d001      	beq.n	8100ed6 <MFRC522_Anticoll+0x7c>
		{
			status = MI_ERR;
 8100ed2:	2302      	movs	r3, #2
 8100ed4:	73fb      	strb	r3, [r7, #15]
		}
	}

	//SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

	return status;
 8100ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8100ed8:	4618      	mov	r0, r3
 8100eda:	3710      	adds	r7, #16
 8100edc:	46bd      	mov	sp, r7
 8100ede:	bd80      	pop	{r7, pc}

08100ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100ee0:	b580      	push	{r7, lr}
 8100ee2:	b084      	sub	sp, #16
 8100ee4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8100ee6:	4b67      	ldr	r3, [pc, #412]	; (8101084 <main+0x1a4>)
 8100ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eec:	4a65      	ldr	r2, [pc, #404]	; (8101084 <main+0x1a4>)
 8100eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ef6:	4b63      	ldr	r3, [pc, #396]	; (8101084 <main+0x1a4>)
 8100ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100f00:	607b      	str	r3, [r7, #4]
 8100f02:	687b      	ldr	r3, [r7, #4]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100f04:	2001      	movs	r0, #1
 8100f06:	f002 fef1 	bl	8103cec <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8100f0a:	f002 ff7b 	bl	8103e04 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100f0e:	2201      	movs	r2, #1
 8100f10:	2102      	movs	r1, #2
 8100f12:	2000      	movs	r0, #0
 8100f14:	f002 fefc 	bl	8103d10 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100f18:	4b5b      	ldr	r3, [pc, #364]	; (8101088 <main+0x1a8>)
 8100f1a:	681b      	ldr	r3, [r3, #0]
 8100f1c:	091b      	lsrs	r3, r3, #4
 8100f1e:	f003 030f 	and.w	r3, r3, #15
 8100f22:	2b07      	cmp	r3, #7
 8100f24:	d108      	bne.n	8100f38 <main+0x58>
 8100f26:	4b59      	ldr	r3, [pc, #356]	; (810108c <main+0x1ac>)
 8100f28:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100f2c:	4a57      	ldr	r2, [pc, #348]	; (810108c <main+0x1ac>)
 8100f2e:	f043 0301 	orr.w	r3, r3, #1
 8100f32:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100f36:	e007      	b.n	8100f48 <main+0x68>
 8100f38:	4b54      	ldr	r3, [pc, #336]	; (810108c <main+0x1ac>)
 8100f3a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100f3e:	4a53      	ldr	r2, [pc, #332]	; (810108c <main+0x1ac>)
 8100f40:	f043 0301 	orr.w	r3, r3, #1
 8100f44:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100f48:	f000 fbea 	bl	8101720 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100f4c:	f000 f9d6 	bl	81012fc <MX_GPIO_Init>
  MX_DMA_Init();
 8100f50:	f000 f9ac 	bl	81012ac <MX_DMA_Init>
  MX_SPI1_Init();
 8100f54:	f000 f954 	bl	8101200 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	// MC14515 Handle Init
	MC14515.STPort = GPIOC;
 8100f58:	4b4d      	ldr	r3, [pc, #308]	; (8101090 <main+0x1b0>)
 8100f5a:	4a4e      	ldr	r2, [pc, #312]	; (8101094 <main+0x1b4>)
 8100f5c:	601a      	str	r2, [r3, #0]
	MC14515.STPin = GPIO_PIN_6;
 8100f5e:	4b4c      	ldr	r3, [pc, #304]	; (8101090 <main+0x1b0>)
 8100f60:	2240      	movs	r2, #64	; 0x40
 8100f62:	831a      	strh	r2, [r3, #24]
	MC14515.INHPort = GPIOB;
 8100f64:	4b4a      	ldr	r3, [pc, #296]	; (8101090 <main+0x1b0>)
 8100f66:	4a4c      	ldr	r2, [pc, #304]	; (8101098 <main+0x1b8>)
 8100f68:	605a      	str	r2, [r3, #4]
	MC14515.INHPin = GPIO_PIN_8;
 8100f6a:	4b49      	ldr	r3, [pc, #292]	; (8101090 <main+0x1b0>)
 8100f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100f70:	835a      	strh	r2, [r3, #26]
	MC14515.D1Port = GPIOB;
 8100f72:	4b47      	ldr	r3, [pc, #284]	; (8101090 <main+0x1b0>)
 8100f74:	4a48      	ldr	r2, [pc, #288]	; (8101098 <main+0x1b8>)
 8100f76:	609a      	str	r2, [r3, #8]
	MC14515.D1Pin = GPIO_PIN_15;
 8100f78:	4b45      	ldr	r3, [pc, #276]	; (8101090 <main+0x1b0>)
 8100f7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100f7e:	839a      	strh	r2, [r3, #28]
	MC14515.D2Port = GPIOB;
 8100f80:	4b43      	ldr	r3, [pc, #268]	; (8101090 <main+0x1b0>)
 8100f82:	4a45      	ldr	r2, [pc, #276]	; (8101098 <main+0x1b8>)
 8100f84:	60da      	str	r2, [r3, #12]
	MC14515.D2Pin = GPIO_PIN_12;
 8100f86:	4b42      	ldr	r3, [pc, #264]	; (8101090 <main+0x1b0>)
 8100f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8100f8c:	83da      	strh	r2, [r3, #30]
	MC14515.D3Port = GPIOB;
 8100f8e:	4b40      	ldr	r3, [pc, #256]	; (8101090 <main+0x1b0>)
 8100f90:	4a41      	ldr	r2, [pc, #260]	; (8101098 <main+0x1b8>)
 8100f92:	611a      	str	r2, [r3, #16]
	MC14515.D3Pin = GPIO_PIN_9;
 8100f94:	4b3e      	ldr	r3, [pc, #248]	; (8101090 <main+0x1b0>)
 8100f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8100f9a:	841a      	strh	r2, [r3, #32]
	MC14515.D4Port = GPIOC;
 8100f9c:	4b3c      	ldr	r3, [pc, #240]	; (8101090 <main+0x1b0>)
 8100f9e:	4a3d      	ldr	r2, [pc, #244]	; (8101094 <main+0x1b4>)
 8100fa0:	615a      	str	r2, [r3, #20]
	MC14515.D4Pin = GPIO_PIN_7;
 8100fa2:	4b3b      	ldr	r3, [pc, #236]	; (8101090 <main+0x1b0>)
 8100fa4:	2280      	movs	r2, #128	; 0x80
 8100fa6:	845a      	strh	r2, [r3, #34]	; 0x22

	// Reset MC14515
	MC14515_Set_Output_All_High(&MC14515);
 8100fa8:	4839      	ldr	r0, [pc, #228]	; (8101090 <main+0x1b0>)
 8100faa:	f7ff fd31 	bl	8100a10 <MC14515_Set_Output_All_High>

	// Reset MFRC522
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8100fae:	2201      	movs	r2, #1
 8100fb0:	2120      	movs	r1, #32
 8100fb2:	4839      	ldr	r0, [pc, #228]	; (8101098 <main+0x1b8>)
 8100fb4:	f002 fe66 	bl	8103c84 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8100fb8:	200a      	movs	r0, #10
 8100fba:	f000 fc65 	bl	8101888 <HAL_Delay>

	// Init MFRC522
	for (int i = 0; i < MFRC522_SLAVE_MAX; ++i)
 8100fbe:	2300      	movs	r3, #0
 8100fc0:	60fb      	str	r3, [r7, #12]
 8100fc2:	e007      	b.n	8100fd4 <main+0xf4>
	{
		MFRC522_Init(i);
 8100fc4:	68fb      	ldr	r3, [r7, #12]
 8100fc6:	b29b      	uxth	r3, r3
 8100fc8:	4618      	mov	r0, r3
 8100fca:	f7ff fe06 	bl	8100bda <MFRC522_Init>
	for (int i = 0; i < MFRC522_SLAVE_MAX; ++i)
 8100fce:	68fb      	ldr	r3, [r7, #12]
 8100fd0:	3301      	adds	r3, #1
 8100fd2:	60fb      	str	r3, [r7, #12]
 8100fd4:	68fb      	ldr	r3, [r7, #12]
 8100fd6:	2b0b      	cmp	r3, #11
 8100fd8:	ddf4      	ble.n	8100fc4 <main+0xe4>
	}

	// RFID Handle Init
	status = MFRC522_Read_Data(VersionReg,slave_num);
 8100fda:	4b30      	ldr	r3, [pc, #192]	; (810109c <main+0x1bc>)
 8100fdc:	881b      	ldrh	r3, [r3, #0]
 8100fde:	4619      	mov	r1, r3
 8100fe0:	2037      	movs	r0, #55	; 0x37
 8100fe2:	f7ff fd61 	bl	8100aa8 <MFRC522_Read_Data>
 8100fe6:	4603      	mov	r3, r0
 8100fe8:	461a      	mov	r2, r3
 8100fea:	4b2d      	ldr	r3, [pc, #180]	; (81010a0 <main+0x1c0>)
 8100fec:	701a      	strb	r2, [r3, #0]
	RFIDMain->status = status;
 8100fee:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100ff2:	4a2b      	ldr	r2, [pc, #172]	; (81010a0 <main+0x1c0>)
 8100ff4:	7812      	ldrb	r2, [r2, #0]
 8100ff6:	709a      	strb	r2, [r3, #2]
	RFID_Main_init(RFIDMain);
 8100ff8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100ffc:	4618      	mov	r0, r3
 8100ffe:	f7ff f983 	bl	8100308 <RFID_Main_init>
	ptrRFIDCheck = RFIDMain;
 8101002:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8101006:	4b27      	ldr	r3, [pc, #156]	; (81010a4 <main+0x1c4>)
 8101008:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(HAL_GetTick() - timemsM4 > 200)
 810100a:	f000 fc31 	bl	8101870 <HAL_GetTick>
 810100e:	4602      	mov	r2, r0
 8101010:	4b25      	ldr	r3, [pc, #148]	; (81010a8 <main+0x1c8>)
 8101012:	681b      	ldr	r3, [r3, #0]
 8101014:	1ad3      	subs	r3, r2, r3
 8101016:	2bc8      	cmp	r3, #200	; 0xc8
 8101018:	f240 80cf 	bls.w	81011ba <main+0x2da>
		{
			timemsM4 = HAL_GetTick();
 810101c:	f000 fc28 	bl	8101870 <HAL_GetTick>
 8101020:	4603      	mov	r3, r0
 8101022:	4a21      	ldr	r2, [pc, #132]	; (81010a8 <main+0x1c8>)
 8101024:	6013      	str	r3, [r2, #0]
			// Update Slave number and Update RFID PTR
			slave_num = (slave_num + 1) % MFRC522_SLAVE_MAX ;
 8101026:	4b1d      	ldr	r3, [pc, #116]	; (810109c <main+0x1bc>)
 8101028:	881b      	ldrh	r3, [r3, #0]
 810102a:	1c5a      	adds	r2, r3, #1
 810102c:	4b1f      	ldr	r3, [pc, #124]	; (81010ac <main+0x1cc>)
 810102e:	fb83 1302 	smull	r1, r3, r3, r2
 8101032:	1059      	asrs	r1, r3, #1
 8101034:	17d3      	asrs	r3, r2, #31
 8101036:	1ac9      	subs	r1, r1, r3
 8101038:	460b      	mov	r3, r1
 810103a:	005b      	lsls	r3, r3, #1
 810103c:	440b      	add	r3, r1
 810103e:	009b      	lsls	r3, r3, #2
 8101040:	1ad1      	subs	r1, r2, r3
 8101042:	b28a      	uxth	r2, r1
 8101044:	4b15      	ldr	r3, [pc, #84]	; (810109c <main+0x1bc>)
 8101046:	801a      	strh	r2, [r3, #0]
			RFIDMain->slaveNum = slave_num;
 8101048:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 810104c:	4a13      	ldr	r2, [pc, #76]	; (810109c <main+0x1bc>)
 810104e:	8812      	ldrh	r2, [r2, #0]
 8101050:	801a      	strh	r2, [r3, #0]
			ptrRFID = &RFIDMain->RFID[RFIDMain->slaveNum];
 8101052:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8101056:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 810105a:	881b      	ldrh	r3, [r3, #0]
 810105c:	4619      	mov	r1, r3
 810105e:	460b      	mov	r3, r1
 8101060:	011b      	lsls	r3, r3, #4
 8101062:	440b      	add	r3, r1
 8101064:	009b      	lsls	r3, r3, #2
 8101066:	3328      	adds	r3, #40	; 0x28
 8101068:	4413      	add	r3, r2
 810106a:	4a11      	ldr	r2, [pc, #68]	; (81010b0 <main+0x1d0>)
 810106c:	6013      	str	r3, [r2, #0]
			if(hspi1.State == HAL_SPI_STATE_READY)
 810106e:	4b11      	ldr	r3, [pc, #68]	; (81010b4 <main+0x1d4>)
 8101070:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8101074:	b2db      	uxtb	r3, r3
 8101076:	2b01      	cmp	r3, #1
 8101078:	f040 809f 	bne.w	81011ba <main+0x2da>
			{
				for (int i = 0; i < 16; i++)
 810107c:	2300      	movs	r3, #0
 810107e:	60bb      	str	r3, [r7, #8]
 8101080:	e02d      	b.n	81010de <main+0x1fe>
 8101082:	bf00      	nop
 8101084:	58024400 	.word	0x58024400
 8101088:	e000ed00 	.word	0xe000ed00
 810108c:	58026400 	.word	0x58026400
 8101090:	100001a4 	.word	0x100001a4
 8101094:	58020800 	.word	0x58020800
 8101098:	58020400 	.word	0x58020400
 810109c:	100001dc 	.word	0x100001dc
 81010a0:	100001de 	.word	0x100001de
 81010a4:	100001c8 	.word	0x100001c8
 81010a8:	100001d4 	.word	0x100001d4
 81010ac:	2aaaaaab 	.word	0x2aaaaaab
 81010b0:	100001cc 	.word	0x100001cc
 81010b4:	1000002c 	.word	0x1000002c
				{
					// Clear cardstr
					cardstr[i] = 0;
 81010b8:	4a4a      	ldr	r2, [pc, #296]	; (81011e4 <main+0x304>)
 81010ba:	68bb      	ldr	r3, [r7, #8]
 81010bc:	4413      	add	r3, r2
 81010be:	2200      	movs	r2, #0
 81010c0:	701a      	strb	r2, [r3, #0]
					RFIDMain->cardStr[i] = cardstr[i];
 81010c2:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 81010c6:	4947      	ldr	r1, [pc, #284]	; (81011e4 <main+0x304>)
 81010c8:	68bb      	ldr	r3, [r7, #8]
 81010ca:	440b      	add	r3, r1
 81010cc:	7819      	ldrb	r1, [r3, #0]
 81010ce:	68bb      	ldr	r3, [r7, #8]
 81010d0:	4413      	add	r3, r2
 81010d2:	3303      	adds	r3, #3
 81010d4:	460a      	mov	r2, r1
 81010d6:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 16; i++)
 81010d8:	68bb      	ldr	r3, [r7, #8]
 81010da:	3301      	adds	r3, #1
 81010dc:	60bb      	str	r3, [r7, #8]
 81010de:	68bb      	ldr	r3, [r7, #8]
 81010e0:	2b0f      	cmp	r3, #15
 81010e2:	dde9      	ble.n	81010b8 <main+0x1d8>
				}
				status = 99;
 81010e4:	4b40      	ldr	r3, [pc, #256]	; (81011e8 <main+0x308>)
 81010e6:	2263      	movs	r2, #99	; 0x63
 81010e8:	701a      	strb	r2, [r3, #0]
				RFIDMain->status = status;
 81010ea:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 81010ee:	4a3e      	ldr	r2, [pc, #248]	; (81011e8 <main+0x308>)
 81010f0:	7812      	ldrb	r2, [r2, #0]
 81010f2:	709a      	strb	r2, [r3, #2]
				ptrRFID->status =status;
 81010f4:	4b3d      	ldr	r3, [pc, #244]	; (81011ec <main+0x30c>)
 81010f6:	681b      	ldr	r3, [r3, #0]
 81010f8:	4a3b      	ldr	r2, [pc, #236]	; (81011e8 <main+0x308>)
 81010fa:	7812      	ldrb	r2, [r2, #0]
 81010fc:	709a      	strb	r2, [r3, #2]
				// Find cards
				status = MFRC522_Request(PICC_REQIDL, cardstr,slave_num);
 81010fe:	4b3c      	ldr	r3, [pc, #240]	; (81011f0 <main+0x310>)
 8101100:	881b      	ldrh	r3, [r3, #0]
 8101102:	461a      	mov	r2, r3
 8101104:	4937      	ldr	r1, [pc, #220]	; (81011e4 <main+0x304>)
 8101106:	2026      	movs	r0, #38	; 0x26
 8101108:	f7ff fd9c 	bl	8100c44 <MFRC522_Request>
 810110c:	4603      	mov	r3, r0
 810110e:	461a      	mov	r2, r3
 8101110:	4b35      	ldr	r3, [pc, #212]	; (81011e8 <main+0x308>)
 8101112:	701a      	strb	r2, [r3, #0]
				RFIDMain->status = status;
 8101114:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8101118:	4a33      	ldr	r2, [pc, #204]	; (81011e8 <main+0x308>)
 810111a:	7812      	ldrb	r2, [r2, #0]
 810111c:	709a      	strb	r2, [r3, #2]
				ptrRFID->status =status;
 810111e:	4b33      	ldr	r3, [pc, #204]	; (81011ec <main+0x30c>)
 8101120:	681b      	ldr	r3, [r3, #0]
 8101122:	4a31      	ldr	r2, [pc, #196]	; (81011e8 <main+0x308>)
 8101124:	7812      	ldrb	r2, [r2, #0]
 8101126:	709a      	strb	r2, [r3, #2]
				if(status == MI_OK)
 8101128:	4b2f      	ldr	r3, [pc, #188]	; (81011e8 <main+0x308>)
 810112a:	781b      	ldrb	r3, [r3, #0]
 810112c:	2b00      	cmp	r3, #0
 810112e:	d144      	bne.n	81011ba <main+0x2da>
				{
					status = MFRC522_Anticoll(cardstr,slave_num);
 8101130:	4b2f      	ldr	r3, [pc, #188]	; (81011f0 <main+0x310>)
 8101132:	881b      	ldrh	r3, [r3, #0]
 8101134:	4619      	mov	r1, r3
 8101136:	482b      	ldr	r0, [pc, #172]	; (81011e4 <main+0x304>)
 8101138:	f7ff fe8f 	bl	8100e5a <MFRC522_Anticoll>
 810113c:	4603      	mov	r3, r0
 810113e:	461a      	mov	r2, r3
 8101140:	4b29      	ldr	r3, [pc, #164]	; (81011e8 <main+0x308>)
 8101142:	701a      	strb	r2, [r3, #0]
					RFIDMain->status = status;
 8101144:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8101148:	4a27      	ldr	r2, [pc, #156]	; (81011e8 <main+0x308>)
 810114a:	7812      	ldrb	r2, [r2, #0]
 810114c:	709a      	strb	r2, [r3, #2]
					ptrRFID->status =status;
 810114e:	4b27      	ldr	r3, [pc, #156]	; (81011ec <main+0x30c>)
 8101150:	681b      	ldr	r3, [r3, #0]
 8101152:	4a25      	ldr	r2, [pc, #148]	; (81011e8 <main+0x308>)
 8101154:	7812      	ldrb	r2, [r2, #0]
 8101156:	709a      	strb	r2, [r3, #2]
					if(status == MI_OK)
 8101158:	4b23      	ldr	r3, [pc, #140]	; (81011e8 <main+0x308>)
 810115a:	781b      	ldrb	r3, [r3, #0]
 810115c:	2b00      	cmp	r3, #0
 810115e:	d12c      	bne.n	81011ba <main+0x2da>
					{
						// Update Card PTR
						ptrCard = &RFIDMain->RFID[RFIDMain->slaveNum].detectedCard;
 8101160:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8101164:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8101168:	881b      	ldrh	r3, [r3, #0]
 810116a:	4619      	mov	r1, r3
 810116c:	460b      	mov	r3, r1
 810116e:	011b      	lsls	r3, r3, #4
 8101170:	440b      	add	r3, r1
 8101172:	009b      	lsls	r3, r3, #2
 8101174:	3328      	adds	r3, #40	; 0x28
 8101176:	4413      	add	r3, r2
 8101178:	3304      	adds	r3, #4
 810117a:	4a1e      	ldr	r2, [pc, #120]	; (81011f4 <main+0x314>)
 810117c:	6013      	str	r3, [r2, #0]
						// Update detected Card
						ptrCard->Cardbit.bit0 = cardstr[0];
 810117e:	4b1d      	ldr	r3, [pc, #116]	; (81011f4 <main+0x314>)
 8101180:	681b      	ldr	r3, [r3, #0]
 8101182:	4a18      	ldr	r2, [pc, #96]	; (81011e4 <main+0x304>)
 8101184:	7812      	ldrb	r2, [r2, #0]
 8101186:	701a      	strb	r2, [r3, #0]
						ptrCard->Cardbit.bit1 = cardstr[1];
 8101188:	4b1a      	ldr	r3, [pc, #104]	; (81011f4 <main+0x314>)
 810118a:	681b      	ldr	r3, [r3, #0]
 810118c:	4a15      	ldr	r2, [pc, #84]	; (81011e4 <main+0x304>)
 810118e:	7852      	ldrb	r2, [r2, #1]
 8101190:	705a      	strb	r2, [r3, #1]
						ptrCard->Cardbit.bit2 = cardstr[2];
 8101192:	4b18      	ldr	r3, [pc, #96]	; (81011f4 <main+0x314>)
 8101194:	681b      	ldr	r3, [r3, #0]
 8101196:	4a13      	ldr	r2, [pc, #76]	; (81011e4 <main+0x304>)
 8101198:	7892      	ldrb	r2, [r2, #2]
 810119a:	709a      	strb	r2, [r3, #2]
						ptrCard->Cardbit.bit3 = cardstr[3];
 810119c:	4b15      	ldr	r3, [pc, #84]	; (81011f4 <main+0x314>)
 810119e:	681b      	ldr	r3, [r3, #0]
 81011a0:	4a10      	ldr	r2, [pc, #64]	; (81011e4 <main+0x304>)
 81011a2:	78d2      	ldrb	r2, [r2, #3]
 81011a4:	70da      	strb	r2, [r3, #3]
						// Update Card Memory
						YUGIOH_card_Buffer_Update(RFIDMain);
 81011a6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 81011aa:	4618      	mov	r0, r3
 81011ac:	f7ff f945 	bl	810043a <YUGIOH_card_Buffer_Update>
						// Update New Card
						YUGIOH_card_register(RFIDMain);
 81011b0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 81011b4:	4618      	mov	r0, r3
 81011b6:	f7ff f91d 	bl	81003f4 <YUGIOH_card_register>
			}
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(HAL_GetTick() - timemsM4_LED > 1000)
 81011ba:	f000 fb59 	bl	8101870 <HAL_GetTick>
 81011be:	4602      	mov	r2, r0
 81011c0:	4b0d      	ldr	r3, [pc, #52]	; (81011f8 <main+0x318>)
 81011c2:	681b      	ldr	r3, [r3, #0]
 81011c4:	1ad3      	subs	r3, r2, r3
 81011c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81011ca:	f67f af1e 	bls.w	810100a <main+0x12a>
		{
			timemsM4_LED = HAL_GetTick();
 81011ce:	f000 fb4f 	bl	8101870 <HAL_GetTick>
 81011d2:	4603      	mov	r3, r0
 81011d4:	4a08      	ldr	r2, [pc, #32]	; (81011f8 <main+0x318>)
 81011d6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 81011d8:	2102      	movs	r1, #2
 81011da:	4808      	ldr	r0, [pc, #32]	; (81011fc <main+0x31c>)
 81011dc:	f002 fd6b 	bl	8103cb6 <HAL_GPIO_TogglePin>
		if(HAL_GetTick() - timemsM4 > 200)
 81011e0:	e713      	b.n	810100a <main+0x12a>
 81011e2:	bf00      	nop
 81011e4:	100001e0 	.word	0x100001e0
 81011e8:	100001de 	.word	0x100001de
 81011ec:	100001cc 	.word	0x100001cc
 81011f0:	100001dc 	.word	0x100001dc
 81011f4:	100001d0 	.word	0x100001d0
 81011f8:	100001d8 	.word	0x100001d8
 81011fc:	58021000 	.word	0x58021000

08101200 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8101200:	b580      	push	{r7, lr}
 8101202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8101204:	4b27      	ldr	r3, [pc, #156]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101206:	4a28      	ldr	r2, [pc, #160]	; (81012a8 <MX_SPI1_Init+0xa8>)
 8101208:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810120a:	4b26      	ldr	r3, [pc, #152]	; (81012a4 <MX_SPI1_Init+0xa4>)
 810120c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101210:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101212:	4b24      	ldr	r3, [pc, #144]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101214:	2200      	movs	r2, #0
 8101216:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8101218:	4b22      	ldr	r3, [pc, #136]	; (81012a4 <MX_SPI1_Init+0xa4>)
 810121a:	2207      	movs	r2, #7
 810121c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810121e:	4b21      	ldr	r3, [pc, #132]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101220:	2200      	movs	r2, #0
 8101222:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101224:	4b1f      	ldr	r3, [pc, #124]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101226:	2200      	movs	r2, #0
 8101228:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 810122a:	4b1e      	ldr	r3, [pc, #120]	; (81012a4 <MX_SPI1_Init+0xa4>)
 810122c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8101230:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8101232:	4b1c      	ldr	r3, [pc, #112]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101234:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8101238:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810123a:	4b1a      	ldr	r3, [pc, #104]	; (81012a4 <MX_SPI1_Init+0xa4>)
 810123c:	2200      	movs	r2, #0
 810123e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101240:	4b18      	ldr	r3, [pc, #96]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101242:	2200      	movs	r2, #0
 8101244:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101246:	4b17      	ldr	r3, [pc, #92]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101248:	2200      	movs	r2, #0
 810124a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810124c:	4b15      	ldr	r3, [pc, #84]	; (81012a4 <MX_SPI1_Init+0xa4>)
 810124e:	2200      	movs	r2, #0
 8101250:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101252:	4b14      	ldr	r3, [pc, #80]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101258:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810125a:	4b12      	ldr	r3, [pc, #72]	; (81012a4 <MX_SPI1_Init+0xa4>)
 810125c:	2200      	movs	r2, #0
 810125e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101260:	4b10      	ldr	r3, [pc, #64]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101262:	2200      	movs	r2, #0
 8101264:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101266:	4b0f      	ldr	r3, [pc, #60]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101268:	2200      	movs	r2, #0
 810126a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810126c:	4b0d      	ldr	r3, [pc, #52]	; (81012a4 <MX_SPI1_Init+0xa4>)
 810126e:	2200      	movs	r2, #0
 8101270:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101272:	4b0c      	ldr	r3, [pc, #48]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101274:	2200      	movs	r2, #0
 8101276:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101278:	4b0a      	ldr	r3, [pc, #40]	; (81012a4 <MX_SPI1_Init+0xa4>)
 810127a:	2200      	movs	r2, #0
 810127c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810127e:	4b09      	ldr	r3, [pc, #36]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101280:	2200      	movs	r2, #0
 8101282:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101284:	4b07      	ldr	r3, [pc, #28]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101286:	2200      	movs	r2, #0
 8101288:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810128a:	4b06      	ldr	r3, [pc, #24]	; (81012a4 <MX_SPI1_Init+0xa4>)
 810128c:	2200      	movs	r2, #0
 810128e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101290:	4804      	ldr	r0, [pc, #16]	; (81012a4 <MX_SPI1_Init+0xa4>)
 8101292:	f002 ff3f 	bl	8104114 <HAL_SPI_Init>
 8101296:	4603      	mov	r3, r0
 8101298:	2b00      	cmp	r3, #0
 810129a:	d001      	beq.n	81012a0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 810129c:	f000 f8d8 	bl	8101450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81012a0:	bf00      	nop
 81012a2:	bd80      	pop	{r7, pc}
 81012a4:	1000002c 	.word	0x1000002c
 81012a8:	40013000 	.word	0x40013000

081012ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 81012ac:	b580      	push	{r7, lr}
 81012ae:	b082      	sub	sp, #8
 81012b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81012b2:	4b11      	ldr	r3, [pc, #68]	; (81012f8 <MX_DMA_Init+0x4c>)
 81012b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012b8:	4a0f      	ldr	r2, [pc, #60]	; (81012f8 <MX_DMA_Init+0x4c>)
 81012ba:	f043 0301 	orr.w	r3, r3, #1
 81012be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81012c2:	4b0d      	ldr	r3, [pc, #52]	; (81012f8 <MX_DMA_Init+0x4c>)
 81012c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012c8:	f003 0301 	and.w	r3, r3, #1
 81012cc:	607b      	str	r3, [r7, #4]
 81012ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 81012d0:	2200      	movs	r2, #0
 81012d2:	2100      	movs	r1, #0
 81012d4:	200b      	movs	r0, #11
 81012d6:	f000 fbd6 	bl	8101a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 81012da:	200b      	movs	r0, #11
 81012dc:	f000 fbed 	bl	8101aba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 81012e0:	2200      	movs	r2, #0
 81012e2:	2100      	movs	r1, #0
 81012e4:	200e      	movs	r0, #14
 81012e6:	f000 fbce 	bl	8101a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 81012ea:	200e      	movs	r0, #14
 81012ec:	f000 fbe5 	bl	8101aba <HAL_NVIC_EnableIRQ>

}
 81012f0:	bf00      	nop
 81012f2:	3708      	adds	r7, #8
 81012f4:	46bd      	mov	sp, r7
 81012f6:	bd80      	pop	{r7, pc}
 81012f8:	58024400 	.word	0x58024400

081012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81012fc:	b580      	push	{r7, lr}
 81012fe:	b08a      	sub	sp, #40	; 0x28
 8101300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101302:	f107 0314 	add.w	r3, r7, #20
 8101306:	2200      	movs	r2, #0
 8101308:	601a      	str	r2, [r3, #0]
 810130a:	605a      	str	r2, [r3, #4]
 810130c:	609a      	str	r2, [r3, #8]
 810130e:	60da      	str	r2, [r3, #12]
 8101310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101312:	4b4b      	ldr	r3, [pc, #300]	; (8101440 <MX_GPIO_Init+0x144>)
 8101314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101318:	4a49      	ldr	r2, [pc, #292]	; (8101440 <MX_GPIO_Init+0x144>)
 810131a:	f043 0304 	orr.w	r3, r3, #4
 810131e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101322:	4b47      	ldr	r3, [pc, #284]	; (8101440 <MX_GPIO_Init+0x144>)
 8101324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101328:	f003 0304 	and.w	r3, r3, #4
 810132c:	613b      	str	r3, [r7, #16]
 810132e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101330:	4b43      	ldr	r3, [pc, #268]	; (8101440 <MX_GPIO_Init+0x144>)
 8101332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101336:	4a42      	ldr	r2, [pc, #264]	; (8101440 <MX_GPIO_Init+0x144>)
 8101338:	f043 0301 	orr.w	r3, r3, #1
 810133c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101340:	4b3f      	ldr	r3, [pc, #252]	; (8101440 <MX_GPIO_Init+0x144>)
 8101342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101346:	f003 0301 	and.w	r3, r3, #1
 810134a:	60fb      	str	r3, [r7, #12]
 810134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810134e:	4b3c      	ldr	r3, [pc, #240]	; (8101440 <MX_GPIO_Init+0x144>)
 8101350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101354:	4a3a      	ldr	r2, [pc, #232]	; (8101440 <MX_GPIO_Init+0x144>)
 8101356:	f043 0302 	orr.w	r3, r3, #2
 810135a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810135e:	4b38      	ldr	r3, [pc, #224]	; (8101440 <MX_GPIO_Init+0x144>)
 8101360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101364:	f003 0302 	and.w	r3, r3, #2
 8101368:	60bb      	str	r3, [r7, #8]
 810136a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810136c:	4b34      	ldr	r3, [pc, #208]	; (8101440 <MX_GPIO_Init+0x144>)
 810136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101372:	4a33      	ldr	r2, [pc, #204]	; (8101440 <MX_GPIO_Init+0x144>)
 8101374:	f043 0308 	orr.w	r3, r3, #8
 8101378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810137c:	4b30      	ldr	r3, [pc, #192]	; (8101440 <MX_GPIO_Init+0x144>)
 810137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101382:	f003 0308 	and.w	r3, r3, #8
 8101386:	607b      	str	r3, [r7, #4]
 8101388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810138a:	4b2d      	ldr	r3, [pc, #180]	; (8101440 <MX_GPIO_Init+0x144>)
 810138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101390:	4a2b      	ldr	r2, [pc, #172]	; (8101440 <MX_GPIO_Init+0x144>)
 8101392:	f043 0310 	orr.w	r3, r3, #16
 8101396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810139a:	4b29      	ldr	r3, [pc, #164]	; (8101440 <MX_GPIO_Init+0x144>)
 810139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013a0:	f003 0310 	and.w	r3, r3, #16
 81013a4:	603b      	str	r3, [r7, #0]
 81013a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MC14515_D2_Pin|MC14515_D1_Pin|RC522_Rst_Pin
 81013a8:	2200      	movs	r2, #0
 81013aa:	f249 3121 	movw	r1, #37665	; 0x9321
 81013ae:	4825      	ldr	r0, [pc, #148]	; (8101444 <MX_GPIO_Init+0x148>)
 81013b0:	f002 fc68 	bl	8103c84 <HAL_GPIO_WritePin>
                          |MC14515_INH_Pin|MC14515_D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MC14515_ST_Pin|MC14515_D4_Pin, GPIO_PIN_RESET);
 81013b4:	2200      	movs	r2, #0
 81013b6:	21c0      	movs	r1, #192	; 0xc0
 81013b8:	4823      	ldr	r0, [pc, #140]	; (8101448 <MX_GPIO_Init+0x14c>)
 81013ba:	f002 fc63 	bl	8103c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81013be:	2200      	movs	r2, #0
 81013c0:	2102      	movs	r1, #2
 81013c2:	4822      	ldr	r0, [pc, #136]	; (810144c <MX_GPIO_Init+0x150>)
 81013c4:	f002 fc5e 	bl	8103c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 81013c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81013ce:	2300      	movs	r3, #0
 81013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013d2:	2300      	movs	r3, #0
 81013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 81013d6:	f107 0314 	add.w	r3, r7, #20
 81013da:	4619      	mov	r1, r3
 81013dc:	481a      	ldr	r0, [pc, #104]	; (8101448 <MX_GPIO_Init+0x14c>)
 81013de:	f002 faa1 	bl	8103924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MC14515_D2_Pin MC14515_D1_Pin RC522_Rst_Pin
                           MC14515_INH_Pin MC14515_D3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MC14515_D2_Pin|MC14515_D1_Pin|RC522_Rst_Pin
 81013e2:	f249 3321 	movw	r3, #37665	; 0x9321
 81013e6:	617b      	str	r3, [r7, #20]
                          |MC14515_INH_Pin|MC14515_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81013e8:	2301      	movs	r3, #1
 81013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013ec:	2300      	movs	r3, #0
 81013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013f0:	2300      	movs	r3, #0
 81013f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81013f4:	f107 0314 	add.w	r3, r7, #20
 81013f8:	4619      	mov	r1, r3
 81013fa:	4812      	ldr	r0, [pc, #72]	; (8101444 <MX_GPIO_Init+0x148>)
 81013fc:	f002 fa92 	bl	8103924 <HAL_GPIO_Init>

  /*Configure GPIO pins : MC14515_ST_Pin MC14515_D4_Pin */
  GPIO_InitStruct.Pin = MC14515_ST_Pin|MC14515_D4_Pin;
 8101400:	23c0      	movs	r3, #192	; 0xc0
 8101402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101404:	2301      	movs	r3, #1
 8101406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101408:	2300      	movs	r3, #0
 810140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810140c:	2300      	movs	r3, #0
 810140e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101410:	f107 0314 	add.w	r3, r7, #20
 8101414:	4619      	mov	r1, r3
 8101416:	480c      	ldr	r0, [pc, #48]	; (8101448 <MX_GPIO_Init+0x14c>)
 8101418:	f002 fa84 	bl	8103924 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 810141c:	2302      	movs	r3, #2
 810141e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101420:	2301      	movs	r3, #1
 8101422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101424:	2300      	movs	r3, #0
 8101426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101428:	2300      	movs	r3, #0
 810142a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 810142c:	f107 0314 	add.w	r3, r7, #20
 8101430:	4619      	mov	r1, r3
 8101432:	4806      	ldr	r0, [pc, #24]	; (810144c <MX_GPIO_Init+0x150>)
 8101434:	f002 fa76 	bl	8103924 <HAL_GPIO_Init>

}
 8101438:	bf00      	nop
 810143a:	3728      	adds	r7, #40	; 0x28
 810143c:	46bd      	mov	sp, r7
 810143e:	bd80      	pop	{r7, pc}
 8101440:	58024400 	.word	0x58024400
 8101444:	58020400 	.word	0x58020400
 8101448:	58020800 	.word	0x58020800
 810144c:	58021000 	.word	0x58021000

08101450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101450:	b480      	push	{r7}
 8101452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101454:	b672      	cpsid	i
}
 8101456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8101458:	e7fe      	b.n	8101458 <Error_Handler+0x8>
	...

0810145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810145c:	b480      	push	{r7}
 810145e:	b083      	sub	sp, #12
 8101460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101462:	4b0a      	ldr	r3, [pc, #40]	; (810148c <HAL_MspInit+0x30>)
 8101464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101468:	4a08      	ldr	r2, [pc, #32]	; (810148c <HAL_MspInit+0x30>)
 810146a:	f043 0302 	orr.w	r3, r3, #2
 810146e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101472:	4b06      	ldr	r3, [pc, #24]	; (810148c <HAL_MspInit+0x30>)
 8101474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101478:	f003 0302 	and.w	r3, r3, #2
 810147c:	607b      	str	r3, [r7, #4]
 810147e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101480:	bf00      	nop
 8101482:	370c      	adds	r7, #12
 8101484:	46bd      	mov	sp, r7
 8101486:	f85d 7b04 	ldr.w	r7, [sp], #4
 810148a:	4770      	bx	lr
 810148c:	58024400 	.word	0x58024400

08101490 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101490:	b580      	push	{r7, lr}
 8101492:	b08a      	sub	sp, #40	; 0x28
 8101494:	af00      	add	r7, sp, #0
 8101496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101498:	f107 0314 	add.w	r3, r7, #20
 810149c:	2200      	movs	r2, #0
 810149e:	601a      	str	r2, [r3, #0]
 81014a0:	605a      	str	r2, [r3, #4]
 81014a2:	609a      	str	r2, [r3, #8]
 81014a4:	60da      	str	r2, [r3, #12]
 81014a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	681b      	ldr	r3, [r3, #0]
 81014ac:	4a5b      	ldr	r2, [pc, #364]	; (810161c <HAL_SPI_MspInit+0x18c>)
 81014ae:	4293      	cmp	r3, r2
 81014b0:	f040 80af 	bne.w	8101612 <HAL_SPI_MspInit+0x182>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81014b4:	4b5a      	ldr	r3, [pc, #360]	; (8101620 <HAL_SPI_MspInit+0x190>)
 81014b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81014ba:	4a59      	ldr	r2, [pc, #356]	; (8101620 <HAL_SPI_MspInit+0x190>)
 81014bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81014c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81014c4:	4b56      	ldr	r3, [pc, #344]	; (8101620 <HAL_SPI_MspInit+0x190>)
 81014c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81014ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81014ce:	613b      	str	r3, [r7, #16]
 81014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81014d2:	4b53      	ldr	r3, [pc, #332]	; (8101620 <HAL_SPI_MspInit+0x190>)
 81014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014d8:	4a51      	ldr	r2, [pc, #324]	; (8101620 <HAL_SPI_MspInit+0x190>)
 81014da:	f043 0301 	orr.w	r3, r3, #1
 81014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014e2:	4b4f      	ldr	r3, [pc, #316]	; (8101620 <HAL_SPI_MspInit+0x190>)
 81014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014e8:	f003 0301 	and.w	r3, r3, #1
 81014ec:	60fb      	str	r3, [r7, #12]
 81014ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81014f0:	4b4b      	ldr	r3, [pc, #300]	; (8101620 <HAL_SPI_MspInit+0x190>)
 81014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014f6:	4a4a      	ldr	r2, [pc, #296]	; (8101620 <HAL_SPI_MspInit+0x190>)
 81014f8:	f043 0308 	orr.w	r3, r3, #8
 81014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101500:	4b47      	ldr	r3, [pc, #284]	; (8101620 <HAL_SPI_MspInit+0x190>)
 8101502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101506:	f003 0308 	and.w	r3, r3, #8
 810150a:	60bb      	str	r3, [r7, #8]
 810150c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 810150e:	2370      	movs	r3, #112	; 0x70
 8101510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101512:	2302      	movs	r3, #2
 8101514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101516:	2300      	movs	r3, #0
 8101518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810151a:	2300      	movs	r3, #0
 810151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810151e:	2305      	movs	r3, #5
 8101520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101522:	f107 0314 	add.w	r3, r7, #20
 8101526:	4619      	mov	r1, r3
 8101528:	483e      	ldr	r0, [pc, #248]	; (8101624 <HAL_SPI_MspInit+0x194>)
 810152a:	f002 f9fb 	bl	8103924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 810152e:	2380      	movs	r3, #128	; 0x80
 8101530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101532:	2302      	movs	r3, #2
 8101534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101536:	2300      	movs	r3, #0
 8101538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810153a:	2300      	movs	r3, #0
 810153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810153e:	2305      	movs	r3, #5
 8101540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101542:	f107 0314 	add.w	r3, r7, #20
 8101546:	4619      	mov	r1, r3
 8101548:	4837      	ldr	r0, [pc, #220]	; (8101628 <HAL_SPI_MspInit+0x198>)
 810154a:	f002 f9eb 	bl	8103924 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 810154e:	4b37      	ldr	r3, [pc, #220]	; (810162c <HAL_SPI_MspInit+0x19c>)
 8101550:	4a37      	ldr	r2, [pc, #220]	; (8101630 <HAL_SPI_MspInit+0x1a0>)
 8101552:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101554:	4b35      	ldr	r3, [pc, #212]	; (810162c <HAL_SPI_MspInit+0x19c>)
 8101556:	2225      	movs	r2, #37	; 0x25
 8101558:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810155a:	4b34      	ldr	r3, [pc, #208]	; (810162c <HAL_SPI_MspInit+0x19c>)
 810155c:	2200      	movs	r2, #0
 810155e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101560:	4b32      	ldr	r3, [pc, #200]	; (810162c <HAL_SPI_MspInit+0x19c>)
 8101562:	2200      	movs	r2, #0
 8101564:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101566:	4b31      	ldr	r3, [pc, #196]	; (810162c <HAL_SPI_MspInit+0x19c>)
 8101568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810156c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810156e:	4b2f      	ldr	r3, [pc, #188]	; (810162c <HAL_SPI_MspInit+0x19c>)
 8101570:	2200      	movs	r2, #0
 8101572:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101574:	4b2d      	ldr	r3, [pc, #180]	; (810162c <HAL_SPI_MspInit+0x19c>)
 8101576:	2200      	movs	r2, #0
 8101578:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 810157a:	4b2c      	ldr	r3, [pc, #176]	; (810162c <HAL_SPI_MspInit+0x19c>)
 810157c:	2200      	movs	r2, #0
 810157e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8101580:	4b2a      	ldr	r3, [pc, #168]	; (810162c <HAL_SPI_MspInit+0x19c>)
 8101582:	2200      	movs	r2, #0
 8101584:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101586:	4b29      	ldr	r3, [pc, #164]	; (810162c <HAL_SPI_MspInit+0x19c>)
 8101588:	2200      	movs	r2, #0
 810158a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 810158c:	4827      	ldr	r0, [pc, #156]	; (810162c <HAL_SPI_MspInit+0x19c>)
 810158e:	f000 fac3 	bl	8101b18 <HAL_DMA_Init>
 8101592:	4603      	mov	r3, r0
 8101594:	2b00      	cmp	r3, #0
 8101596:	d001      	beq.n	810159c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8101598:	f7ff ff5a 	bl	8101450 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 810159c:	687b      	ldr	r3, [r7, #4]
 810159e:	4a23      	ldr	r2, [pc, #140]	; (810162c <HAL_SPI_MspInit+0x19c>)
 81015a0:	67da      	str	r2, [r3, #124]	; 0x7c
 81015a2:	4a22      	ldr	r2, [pc, #136]	; (810162c <HAL_SPI_MspInit+0x19c>)
 81015a4:	687b      	ldr	r3, [r7, #4]
 81015a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 81015a8:	4b22      	ldr	r3, [pc, #136]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015aa:	4a23      	ldr	r2, [pc, #140]	; (8101638 <HAL_SPI_MspInit+0x1a8>)
 81015ac:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 81015ae:	4b21      	ldr	r3, [pc, #132]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015b0:	2226      	movs	r2, #38	; 0x26
 81015b2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81015b4:	4b1f      	ldr	r3, [pc, #124]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015b6:	2240      	movs	r2, #64	; 0x40
 81015b8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81015ba:	4b1e      	ldr	r3, [pc, #120]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015bc:	2200      	movs	r2, #0
 81015be:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81015c0:	4b1c      	ldr	r3, [pc, #112]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81015c6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81015c8:	4b1a      	ldr	r3, [pc, #104]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015ca:	2200      	movs	r2, #0
 81015cc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81015ce:	4b19      	ldr	r3, [pc, #100]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015d0:	2200      	movs	r2, #0
 81015d2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 81015d4:	4b17      	ldr	r3, [pc, #92]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015d6:	2200      	movs	r2, #0
 81015d8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 81015da:	4b16      	ldr	r3, [pc, #88]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015dc:	2200      	movs	r2, #0
 81015de:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81015e0:	4b14      	ldr	r3, [pc, #80]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015e2:	2200      	movs	r2, #0
 81015e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 81015e6:	4813      	ldr	r0, [pc, #76]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015e8:	f000 fa96 	bl	8101b18 <HAL_DMA_Init>
 81015ec:	4603      	mov	r3, r0
 81015ee:	2b00      	cmp	r3, #0
 81015f0:	d001      	beq.n	81015f6 <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 81015f2:	f7ff ff2d 	bl	8101450 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 81015f6:	687b      	ldr	r3, [r7, #4]
 81015f8:	4a0e      	ldr	r2, [pc, #56]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015fa:	679a      	str	r2, [r3, #120]	; 0x78
 81015fc:	4a0d      	ldr	r2, [pc, #52]	; (8101634 <HAL_SPI_MspInit+0x1a4>)
 81015fe:	687b      	ldr	r3, [r7, #4]
 8101600:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8101602:	2200      	movs	r2, #0
 8101604:	2100      	movs	r1, #0
 8101606:	2023      	movs	r0, #35	; 0x23
 8101608:	f000 fa3d 	bl	8101a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 810160c:	2023      	movs	r0, #35	; 0x23
 810160e:	f000 fa54 	bl	8101aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8101612:	bf00      	nop
 8101614:	3728      	adds	r7, #40	; 0x28
 8101616:	46bd      	mov	sp, r7
 8101618:	bd80      	pop	{r7, pc}
 810161a:	bf00      	nop
 810161c:	40013000 	.word	0x40013000
 8101620:	58024400 	.word	0x58024400
 8101624:	58020000 	.word	0x58020000
 8101628:	58020c00 	.word	0x58020c00
 810162c:	100000b4 	.word	0x100000b4
 8101630:	40020010 	.word	0x40020010
 8101634:	1000012c 	.word	0x1000012c
 8101638:	40020058 	.word	0x40020058

0810163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810163c:	b480      	push	{r7}
 810163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101640:	e7fe      	b.n	8101640 <NMI_Handler+0x4>

08101642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101642:	b480      	push	{r7}
 8101644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101646:	e7fe      	b.n	8101646 <HardFault_Handler+0x4>

08101648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101648:	b480      	push	{r7}
 810164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810164c:	e7fe      	b.n	810164c <MemManage_Handler+0x4>

0810164e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810164e:	b480      	push	{r7}
 8101650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101652:	e7fe      	b.n	8101652 <BusFault_Handler+0x4>

08101654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101654:	b480      	push	{r7}
 8101656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101658:	e7fe      	b.n	8101658 <UsageFault_Handler+0x4>

0810165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810165a:	b480      	push	{r7}
 810165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810165e:	bf00      	nop
 8101660:	46bd      	mov	sp, r7
 8101662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101666:	4770      	bx	lr

08101668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101668:	b480      	push	{r7}
 810166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810166c:	bf00      	nop
 810166e:	46bd      	mov	sp, r7
 8101670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101674:	4770      	bx	lr

08101676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101676:	b480      	push	{r7}
 8101678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810167a:	bf00      	nop
 810167c:	46bd      	mov	sp, r7
 810167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101682:	4770      	bx	lr

08101684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101684:	b580      	push	{r7, lr}
 8101686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101688:	f000 f8de 	bl	8101848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810168c:	bf00      	nop
 810168e:	bd80      	pop	{r7, pc}

08101690 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101690:	b580      	push	{r7, lr}
 8101692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101694:	4802      	ldr	r0, [pc, #8]	; (81016a0 <DMA1_Stream0_IRQHandler+0x10>)
 8101696:	f000 ffdf 	bl	8102658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 810169a:	bf00      	nop
 810169c:	bd80      	pop	{r7, pc}
 810169e:	bf00      	nop
 81016a0:	100000b4 	.word	0x100000b4

081016a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 81016a4:	b580      	push	{r7, lr}
 81016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 81016a8:	4802      	ldr	r0, [pc, #8]	; (81016b4 <DMA1_Stream3_IRQHandler+0x10>)
 81016aa:	f000 ffd5 	bl	8102658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 81016ae:	bf00      	nop
 81016b0:	bd80      	pop	{r7, pc}
 81016b2:	bf00      	nop
 81016b4:	1000012c 	.word	0x1000012c

081016b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 81016b8:	b580      	push	{r7, lr}
 81016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 81016bc:	4802      	ldr	r0, [pc, #8]	; (81016c8 <SPI1_IRQHandler+0x10>)
 81016be:	f003 fa43 	bl	8104b48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 81016c2:	bf00      	nop
 81016c4:	bd80      	pop	{r7, pc}
 81016c6:	bf00      	nop
 81016c8:	1000002c 	.word	0x1000002c

081016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101704 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81016d0:	f7fe fe02 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81016d4:	480c      	ldr	r0, [pc, #48]	; (8101708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81016d6:	490d      	ldr	r1, [pc, #52]	; (810170c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81016d8:	4a0d      	ldr	r2, [pc, #52]	; (8101710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81016dc:	e002      	b.n	81016e4 <LoopCopyDataInit>

081016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81016e2:	3304      	adds	r3, #4

081016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81016e8:	d3f9      	bcc.n	81016de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81016ea:	4a0a      	ldr	r2, [pc, #40]	; (8101714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81016ec:	4c0a      	ldr	r4, [pc, #40]	; (8101718 <LoopFillZerobss+0x22>)
  movs r3, #0
 81016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 81016f0:	e001      	b.n	81016f6 <LoopFillZerobss>

081016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81016f4:	3204      	adds	r2, #4

081016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81016f8:	d3fb      	bcc.n	81016f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81016fa:	f003 fd1d 	bl	8105138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81016fe:	f7ff fbef 	bl	8100ee0 <main>
  bx  lr
 8101702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101704:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101708:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810170c:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101710:	081056b8 	.word	0x081056b8
  ldr r2, =_sbss
 8101714:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8101718:	100001f8 	.word	0x100001f8

0810171c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810171c:	e7fe      	b.n	810171c <ADC3_IRQHandler>
	...

08101720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101720:	b580      	push	{r7, lr}
 8101722:	b082      	sub	sp, #8
 8101724:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101726:	4b28      	ldr	r3, [pc, #160]	; (81017c8 <HAL_Init+0xa8>)
 8101728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810172c:	4a26      	ldr	r2, [pc, #152]	; (81017c8 <HAL_Init+0xa8>)
 810172e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101732:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101736:	4b24      	ldr	r3, [pc, #144]	; (81017c8 <HAL_Init+0xa8>)
 8101738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810173c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101740:	603b      	str	r3, [r7, #0]
 8101742:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101744:	4b21      	ldr	r3, [pc, #132]	; (81017cc <HAL_Init+0xac>)
 8101746:	681b      	ldr	r3, [r3, #0]
 8101748:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810174c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101750:	4a1e      	ldr	r2, [pc, #120]	; (81017cc <HAL_Init+0xac>)
 8101752:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101756:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101758:	4b1c      	ldr	r3, [pc, #112]	; (81017cc <HAL_Init+0xac>)
 810175a:	681b      	ldr	r3, [r3, #0]
 810175c:	4a1b      	ldr	r2, [pc, #108]	; (81017cc <HAL_Init+0xac>)
 810175e:	f043 0301 	orr.w	r3, r3, #1
 8101762:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101764:	2003      	movs	r0, #3
 8101766:	f000 f983 	bl	8101a70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810176a:	f002 fb59 	bl	8103e20 <HAL_RCC_GetSysClockFreq>
 810176e:	4602      	mov	r2, r0
 8101770:	4b15      	ldr	r3, [pc, #84]	; (81017c8 <HAL_Init+0xa8>)
 8101772:	699b      	ldr	r3, [r3, #24]
 8101774:	0a1b      	lsrs	r3, r3, #8
 8101776:	f003 030f 	and.w	r3, r3, #15
 810177a:	4915      	ldr	r1, [pc, #84]	; (81017d0 <HAL_Init+0xb0>)
 810177c:	5ccb      	ldrb	r3, [r1, r3]
 810177e:	f003 031f 	and.w	r3, r3, #31
 8101782:	fa22 f303 	lsr.w	r3, r2, r3
 8101786:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101788:	4b0f      	ldr	r3, [pc, #60]	; (81017c8 <HAL_Init+0xa8>)
 810178a:	699b      	ldr	r3, [r3, #24]
 810178c:	f003 030f 	and.w	r3, r3, #15
 8101790:	4a0f      	ldr	r2, [pc, #60]	; (81017d0 <HAL_Init+0xb0>)
 8101792:	5cd3      	ldrb	r3, [r2, r3]
 8101794:	f003 031f 	and.w	r3, r3, #31
 8101798:	687a      	ldr	r2, [r7, #4]
 810179a:	fa22 f303 	lsr.w	r3, r2, r3
 810179e:	4a0d      	ldr	r2, [pc, #52]	; (81017d4 <HAL_Init+0xb4>)
 81017a0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81017a2:	4b0c      	ldr	r3, [pc, #48]	; (81017d4 <HAL_Init+0xb4>)
 81017a4:	681b      	ldr	r3, [r3, #0]
 81017a6:	4a0c      	ldr	r2, [pc, #48]	; (81017d8 <HAL_Init+0xb8>)
 81017a8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81017aa:	2000      	movs	r0, #0
 81017ac:	f000 f816 	bl	81017dc <HAL_InitTick>
 81017b0:	4603      	mov	r3, r0
 81017b2:	2b00      	cmp	r3, #0
 81017b4:	d001      	beq.n	81017ba <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81017b6:	2301      	movs	r3, #1
 81017b8:	e002      	b.n	81017c0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81017ba:	f7ff fe4f 	bl	810145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81017be:	2300      	movs	r3, #0
}
 81017c0:	4618      	mov	r0, r3
 81017c2:	3708      	adds	r7, #8
 81017c4:	46bd      	mov	sp, r7
 81017c6:	bd80      	pop	{r7, pc}
 81017c8:	58024400 	.word	0x58024400
 81017cc:	40024400 	.word	0x40024400
 81017d0:	08105198 	.word	0x08105198
 81017d4:	10000004 	.word	0x10000004
 81017d8:	10000000 	.word	0x10000000

081017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81017dc:	b580      	push	{r7, lr}
 81017de:	b082      	sub	sp, #8
 81017e0:	af00      	add	r7, sp, #0
 81017e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81017e4:	4b15      	ldr	r3, [pc, #84]	; (810183c <HAL_InitTick+0x60>)
 81017e6:	781b      	ldrb	r3, [r3, #0]
 81017e8:	2b00      	cmp	r3, #0
 81017ea:	d101      	bne.n	81017f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81017ec:	2301      	movs	r3, #1
 81017ee:	e021      	b.n	8101834 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81017f0:	4b13      	ldr	r3, [pc, #76]	; (8101840 <HAL_InitTick+0x64>)
 81017f2:	681a      	ldr	r2, [r3, #0]
 81017f4:	4b11      	ldr	r3, [pc, #68]	; (810183c <HAL_InitTick+0x60>)
 81017f6:	781b      	ldrb	r3, [r3, #0]
 81017f8:	4619      	mov	r1, r3
 81017fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81017fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8101802:	fbb2 f3f3 	udiv	r3, r2, r3
 8101806:	4618      	mov	r0, r3
 8101808:	f000 f965 	bl	8101ad6 <HAL_SYSTICK_Config>
 810180c:	4603      	mov	r3, r0
 810180e:	2b00      	cmp	r3, #0
 8101810:	d001      	beq.n	8101816 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101812:	2301      	movs	r3, #1
 8101814:	e00e      	b.n	8101834 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101816:	687b      	ldr	r3, [r7, #4]
 8101818:	2b0f      	cmp	r3, #15
 810181a:	d80a      	bhi.n	8101832 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810181c:	2200      	movs	r2, #0
 810181e:	6879      	ldr	r1, [r7, #4]
 8101820:	f04f 30ff 	mov.w	r0, #4294967295
 8101824:	f000 f92f 	bl	8101a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101828:	4a06      	ldr	r2, [pc, #24]	; (8101844 <HAL_InitTick+0x68>)
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810182e:	2300      	movs	r3, #0
 8101830:	e000      	b.n	8101834 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101832:	2301      	movs	r3, #1
}
 8101834:	4618      	mov	r0, r3
 8101836:	3708      	adds	r7, #8
 8101838:	46bd      	mov	sp, r7
 810183a:	bd80      	pop	{r7, pc}
 810183c:	1000000c 	.word	0x1000000c
 8101840:	10000000 	.word	0x10000000
 8101844:	10000008 	.word	0x10000008

08101848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101848:	b480      	push	{r7}
 810184a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810184c:	4b06      	ldr	r3, [pc, #24]	; (8101868 <HAL_IncTick+0x20>)
 810184e:	781b      	ldrb	r3, [r3, #0]
 8101850:	461a      	mov	r2, r3
 8101852:	4b06      	ldr	r3, [pc, #24]	; (810186c <HAL_IncTick+0x24>)
 8101854:	681b      	ldr	r3, [r3, #0]
 8101856:	4413      	add	r3, r2
 8101858:	4a04      	ldr	r2, [pc, #16]	; (810186c <HAL_IncTick+0x24>)
 810185a:	6013      	str	r3, [r2, #0]
}
 810185c:	bf00      	nop
 810185e:	46bd      	mov	sp, r7
 8101860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101864:	4770      	bx	lr
 8101866:	bf00      	nop
 8101868:	1000000c 	.word	0x1000000c
 810186c:	100001f4 	.word	0x100001f4

08101870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101870:	b480      	push	{r7}
 8101872:	af00      	add	r7, sp, #0
  return uwTick;
 8101874:	4b03      	ldr	r3, [pc, #12]	; (8101884 <HAL_GetTick+0x14>)
 8101876:	681b      	ldr	r3, [r3, #0]
}
 8101878:	4618      	mov	r0, r3
 810187a:	46bd      	mov	sp, r7
 810187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101880:	4770      	bx	lr
 8101882:	bf00      	nop
 8101884:	100001f4 	.word	0x100001f4

08101888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101888:	b580      	push	{r7, lr}
 810188a:	b084      	sub	sp, #16
 810188c:	af00      	add	r7, sp, #0
 810188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101890:	f7ff ffee 	bl	8101870 <HAL_GetTick>
 8101894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101896:	687b      	ldr	r3, [r7, #4]
 8101898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810189a:	68fb      	ldr	r3, [r7, #12]
 810189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81018a0:	d005      	beq.n	81018ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81018a2:	4b0a      	ldr	r3, [pc, #40]	; (81018cc <HAL_Delay+0x44>)
 81018a4:	781b      	ldrb	r3, [r3, #0]
 81018a6:	461a      	mov	r2, r3
 81018a8:	68fb      	ldr	r3, [r7, #12]
 81018aa:	4413      	add	r3, r2
 81018ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81018ae:	bf00      	nop
 81018b0:	f7ff ffde 	bl	8101870 <HAL_GetTick>
 81018b4:	4602      	mov	r2, r0
 81018b6:	68bb      	ldr	r3, [r7, #8]
 81018b8:	1ad3      	subs	r3, r2, r3
 81018ba:	68fa      	ldr	r2, [r7, #12]
 81018bc:	429a      	cmp	r2, r3
 81018be:	d8f7      	bhi.n	81018b0 <HAL_Delay+0x28>
  {
  }
}
 81018c0:	bf00      	nop
 81018c2:	bf00      	nop
 81018c4:	3710      	adds	r7, #16
 81018c6:	46bd      	mov	sp, r7
 81018c8:	bd80      	pop	{r7, pc}
 81018ca:	bf00      	nop
 81018cc:	1000000c 	.word	0x1000000c

081018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81018d0:	b480      	push	{r7}
 81018d2:	b085      	sub	sp, #20
 81018d4:	af00      	add	r7, sp, #0
 81018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81018d8:	687b      	ldr	r3, [r7, #4]
 81018da:	f003 0307 	and.w	r3, r3, #7
 81018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81018e0:	4b0c      	ldr	r3, [pc, #48]	; (8101914 <__NVIC_SetPriorityGrouping+0x44>)
 81018e2:	68db      	ldr	r3, [r3, #12]
 81018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81018e6:	68ba      	ldr	r2, [r7, #8]
 81018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81018ec:	4013      	ands	r3, r2
 81018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81018f0:	68fb      	ldr	r3, [r7, #12]
 81018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81018f4:	68bb      	ldr	r3, [r7, #8]
 81018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101902:	4a04      	ldr	r2, [pc, #16]	; (8101914 <__NVIC_SetPriorityGrouping+0x44>)
 8101904:	68bb      	ldr	r3, [r7, #8]
 8101906:	60d3      	str	r3, [r2, #12]
}
 8101908:	bf00      	nop
 810190a:	3714      	adds	r7, #20
 810190c:	46bd      	mov	sp, r7
 810190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101912:	4770      	bx	lr
 8101914:	e000ed00 	.word	0xe000ed00

08101918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101918:	b480      	push	{r7}
 810191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810191c:	4b04      	ldr	r3, [pc, #16]	; (8101930 <__NVIC_GetPriorityGrouping+0x18>)
 810191e:	68db      	ldr	r3, [r3, #12]
 8101920:	0a1b      	lsrs	r3, r3, #8
 8101922:	f003 0307 	and.w	r3, r3, #7
}
 8101926:	4618      	mov	r0, r3
 8101928:	46bd      	mov	sp, r7
 810192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810192e:	4770      	bx	lr
 8101930:	e000ed00 	.word	0xe000ed00

08101934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101934:	b480      	push	{r7}
 8101936:	b083      	sub	sp, #12
 8101938:	af00      	add	r7, sp, #0
 810193a:	4603      	mov	r3, r0
 810193c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810193e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101942:	2b00      	cmp	r3, #0
 8101944:	db0b      	blt.n	810195e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101946:	88fb      	ldrh	r3, [r7, #6]
 8101948:	f003 021f 	and.w	r2, r3, #31
 810194c:	4907      	ldr	r1, [pc, #28]	; (810196c <__NVIC_EnableIRQ+0x38>)
 810194e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101952:	095b      	lsrs	r3, r3, #5
 8101954:	2001      	movs	r0, #1
 8101956:	fa00 f202 	lsl.w	r2, r0, r2
 810195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810195e:	bf00      	nop
 8101960:	370c      	adds	r7, #12
 8101962:	46bd      	mov	sp, r7
 8101964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101968:	4770      	bx	lr
 810196a:	bf00      	nop
 810196c:	e000e100 	.word	0xe000e100

08101970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101970:	b480      	push	{r7}
 8101972:	b083      	sub	sp, #12
 8101974:	af00      	add	r7, sp, #0
 8101976:	4603      	mov	r3, r0
 8101978:	6039      	str	r1, [r7, #0]
 810197a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810197c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101980:	2b00      	cmp	r3, #0
 8101982:	db0a      	blt.n	810199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101984:	683b      	ldr	r3, [r7, #0]
 8101986:	b2da      	uxtb	r2, r3
 8101988:	490c      	ldr	r1, [pc, #48]	; (81019bc <__NVIC_SetPriority+0x4c>)
 810198a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810198e:	0112      	lsls	r2, r2, #4
 8101990:	b2d2      	uxtb	r2, r2
 8101992:	440b      	add	r3, r1
 8101994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101998:	e00a      	b.n	81019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810199a:	683b      	ldr	r3, [r7, #0]
 810199c:	b2da      	uxtb	r2, r3
 810199e:	4908      	ldr	r1, [pc, #32]	; (81019c0 <__NVIC_SetPriority+0x50>)
 81019a0:	88fb      	ldrh	r3, [r7, #6]
 81019a2:	f003 030f 	and.w	r3, r3, #15
 81019a6:	3b04      	subs	r3, #4
 81019a8:	0112      	lsls	r2, r2, #4
 81019aa:	b2d2      	uxtb	r2, r2
 81019ac:	440b      	add	r3, r1
 81019ae:	761a      	strb	r2, [r3, #24]
}
 81019b0:	bf00      	nop
 81019b2:	370c      	adds	r7, #12
 81019b4:	46bd      	mov	sp, r7
 81019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ba:	4770      	bx	lr
 81019bc:	e000e100 	.word	0xe000e100
 81019c0:	e000ed00 	.word	0xe000ed00

081019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81019c4:	b480      	push	{r7}
 81019c6:	b089      	sub	sp, #36	; 0x24
 81019c8:	af00      	add	r7, sp, #0
 81019ca:	60f8      	str	r0, [r7, #12]
 81019cc:	60b9      	str	r1, [r7, #8]
 81019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81019d0:	68fb      	ldr	r3, [r7, #12]
 81019d2:	f003 0307 	and.w	r3, r3, #7
 81019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81019d8:	69fb      	ldr	r3, [r7, #28]
 81019da:	f1c3 0307 	rsb	r3, r3, #7
 81019de:	2b04      	cmp	r3, #4
 81019e0:	bf28      	it	cs
 81019e2:	2304      	movcs	r3, #4
 81019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81019e6:	69fb      	ldr	r3, [r7, #28]
 81019e8:	3304      	adds	r3, #4
 81019ea:	2b06      	cmp	r3, #6
 81019ec:	d902      	bls.n	81019f4 <NVIC_EncodePriority+0x30>
 81019ee:	69fb      	ldr	r3, [r7, #28]
 81019f0:	3b03      	subs	r3, #3
 81019f2:	e000      	b.n	81019f6 <NVIC_EncodePriority+0x32>
 81019f4:	2300      	movs	r3, #0
 81019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81019f8:	f04f 32ff 	mov.w	r2, #4294967295
 81019fc:	69bb      	ldr	r3, [r7, #24]
 81019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8101a02:	43da      	mvns	r2, r3
 8101a04:	68bb      	ldr	r3, [r7, #8]
 8101a06:	401a      	ands	r2, r3
 8101a08:	697b      	ldr	r3, [r7, #20]
 8101a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8101a10:	697b      	ldr	r3, [r7, #20]
 8101a12:	fa01 f303 	lsl.w	r3, r1, r3
 8101a16:	43d9      	mvns	r1, r3
 8101a18:	687b      	ldr	r3, [r7, #4]
 8101a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a1c:	4313      	orrs	r3, r2
         );
}
 8101a1e:	4618      	mov	r0, r3
 8101a20:	3724      	adds	r7, #36	; 0x24
 8101a22:	46bd      	mov	sp, r7
 8101a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a28:	4770      	bx	lr
	...

08101a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101a2c:	b580      	push	{r7, lr}
 8101a2e:	b082      	sub	sp, #8
 8101a30:	af00      	add	r7, sp, #0
 8101a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101a34:	687b      	ldr	r3, [r7, #4]
 8101a36:	3b01      	subs	r3, #1
 8101a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101a3c:	d301      	bcc.n	8101a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101a3e:	2301      	movs	r3, #1
 8101a40:	e00f      	b.n	8101a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101a42:	4a0a      	ldr	r2, [pc, #40]	; (8101a6c <SysTick_Config+0x40>)
 8101a44:	687b      	ldr	r3, [r7, #4]
 8101a46:	3b01      	subs	r3, #1
 8101a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101a4a:	210f      	movs	r1, #15
 8101a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8101a50:	f7ff ff8e 	bl	8101970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101a54:	4b05      	ldr	r3, [pc, #20]	; (8101a6c <SysTick_Config+0x40>)
 8101a56:	2200      	movs	r2, #0
 8101a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101a5a:	4b04      	ldr	r3, [pc, #16]	; (8101a6c <SysTick_Config+0x40>)
 8101a5c:	2207      	movs	r2, #7
 8101a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101a60:	2300      	movs	r3, #0
}
 8101a62:	4618      	mov	r0, r3
 8101a64:	3708      	adds	r7, #8
 8101a66:	46bd      	mov	sp, r7
 8101a68:	bd80      	pop	{r7, pc}
 8101a6a:	bf00      	nop
 8101a6c:	e000e010 	.word	0xe000e010

08101a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101a70:	b580      	push	{r7, lr}
 8101a72:	b082      	sub	sp, #8
 8101a74:	af00      	add	r7, sp, #0
 8101a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101a78:	6878      	ldr	r0, [r7, #4]
 8101a7a:	f7ff ff29 	bl	81018d0 <__NVIC_SetPriorityGrouping>
}
 8101a7e:	bf00      	nop
 8101a80:	3708      	adds	r7, #8
 8101a82:	46bd      	mov	sp, r7
 8101a84:	bd80      	pop	{r7, pc}

08101a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101a86:	b580      	push	{r7, lr}
 8101a88:	b086      	sub	sp, #24
 8101a8a:	af00      	add	r7, sp, #0
 8101a8c:	4603      	mov	r3, r0
 8101a8e:	60b9      	str	r1, [r7, #8]
 8101a90:	607a      	str	r2, [r7, #4]
 8101a92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101a94:	f7ff ff40 	bl	8101918 <__NVIC_GetPriorityGrouping>
 8101a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101a9a:	687a      	ldr	r2, [r7, #4]
 8101a9c:	68b9      	ldr	r1, [r7, #8]
 8101a9e:	6978      	ldr	r0, [r7, #20]
 8101aa0:	f7ff ff90 	bl	81019c4 <NVIC_EncodePriority>
 8101aa4:	4602      	mov	r2, r0
 8101aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101aaa:	4611      	mov	r1, r2
 8101aac:	4618      	mov	r0, r3
 8101aae:	f7ff ff5f 	bl	8101970 <__NVIC_SetPriority>
}
 8101ab2:	bf00      	nop
 8101ab4:	3718      	adds	r7, #24
 8101ab6:	46bd      	mov	sp, r7
 8101ab8:	bd80      	pop	{r7, pc}

08101aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101aba:	b580      	push	{r7, lr}
 8101abc:	b082      	sub	sp, #8
 8101abe:	af00      	add	r7, sp, #0
 8101ac0:	4603      	mov	r3, r0
 8101ac2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ac8:	4618      	mov	r0, r3
 8101aca:	f7ff ff33 	bl	8101934 <__NVIC_EnableIRQ>
}
 8101ace:	bf00      	nop
 8101ad0:	3708      	adds	r7, #8
 8101ad2:	46bd      	mov	sp, r7
 8101ad4:	bd80      	pop	{r7, pc}

08101ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101ad6:	b580      	push	{r7, lr}
 8101ad8:	b082      	sub	sp, #8
 8101ada:	af00      	add	r7, sp, #0
 8101adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101ade:	6878      	ldr	r0, [r7, #4]
 8101ae0:	f7ff ffa4 	bl	8101a2c <SysTick_Config>
 8101ae4:	4603      	mov	r3, r0
}
 8101ae6:	4618      	mov	r0, r3
 8101ae8:	3708      	adds	r7, #8
 8101aea:	46bd      	mov	sp, r7
 8101aec:	bd80      	pop	{r7, pc}
	...

08101af0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101af0:	b480      	push	{r7}
 8101af2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101af4:	4b07      	ldr	r3, [pc, #28]	; (8101b14 <HAL_GetCurrentCPUID+0x24>)
 8101af6:	681b      	ldr	r3, [r3, #0]
 8101af8:	091b      	lsrs	r3, r3, #4
 8101afa:	f003 030f 	and.w	r3, r3, #15
 8101afe:	2b07      	cmp	r3, #7
 8101b00:	d101      	bne.n	8101b06 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101b02:	2303      	movs	r3, #3
 8101b04:	e000      	b.n	8101b08 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101b06:	2301      	movs	r3, #1
  }
}
 8101b08:	4618      	mov	r0, r3
 8101b0a:	46bd      	mov	sp, r7
 8101b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b10:	4770      	bx	lr
 8101b12:	bf00      	nop
 8101b14:	e000ed00 	.word	0xe000ed00

08101b18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8101b18:	b580      	push	{r7, lr}
 8101b1a:	b086      	sub	sp, #24
 8101b1c:	af00      	add	r7, sp, #0
 8101b1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8101b20:	f7ff fea6 	bl	8101870 <HAL_GetTick>
 8101b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101b26:	687b      	ldr	r3, [r7, #4]
 8101b28:	2b00      	cmp	r3, #0
 8101b2a:	d101      	bne.n	8101b30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8101b2c:	2301      	movs	r3, #1
 8101b2e:	e314      	b.n	810215a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101b30:	687b      	ldr	r3, [r7, #4]
 8101b32:	681b      	ldr	r3, [r3, #0]
 8101b34:	4a66      	ldr	r2, [pc, #408]	; (8101cd0 <HAL_DMA_Init+0x1b8>)
 8101b36:	4293      	cmp	r3, r2
 8101b38:	d04a      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b3a:	687b      	ldr	r3, [r7, #4]
 8101b3c:	681b      	ldr	r3, [r3, #0]
 8101b3e:	4a65      	ldr	r2, [pc, #404]	; (8101cd4 <HAL_DMA_Init+0x1bc>)
 8101b40:	4293      	cmp	r3, r2
 8101b42:	d045      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b44:	687b      	ldr	r3, [r7, #4]
 8101b46:	681b      	ldr	r3, [r3, #0]
 8101b48:	4a63      	ldr	r2, [pc, #396]	; (8101cd8 <HAL_DMA_Init+0x1c0>)
 8101b4a:	4293      	cmp	r3, r2
 8101b4c:	d040      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b4e:	687b      	ldr	r3, [r7, #4]
 8101b50:	681b      	ldr	r3, [r3, #0]
 8101b52:	4a62      	ldr	r2, [pc, #392]	; (8101cdc <HAL_DMA_Init+0x1c4>)
 8101b54:	4293      	cmp	r3, r2
 8101b56:	d03b      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b58:	687b      	ldr	r3, [r7, #4]
 8101b5a:	681b      	ldr	r3, [r3, #0]
 8101b5c:	4a60      	ldr	r2, [pc, #384]	; (8101ce0 <HAL_DMA_Init+0x1c8>)
 8101b5e:	4293      	cmp	r3, r2
 8101b60:	d036      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	681b      	ldr	r3, [r3, #0]
 8101b66:	4a5f      	ldr	r2, [pc, #380]	; (8101ce4 <HAL_DMA_Init+0x1cc>)
 8101b68:	4293      	cmp	r3, r2
 8101b6a:	d031      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	681b      	ldr	r3, [r3, #0]
 8101b70:	4a5d      	ldr	r2, [pc, #372]	; (8101ce8 <HAL_DMA_Init+0x1d0>)
 8101b72:	4293      	cmp	r3, r2
 8101b74:	d02c      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b76:	687b      	ldr	r3, [r7, #4]
 8101b78:	681b      	ldr	r3, [r3, #0]
 8101b7a:	4a5c      	ldr	r2, [pc, #368]	; (8101cec <HAL_DMA_Init+0x1d4>)
 8101b7c:	4293      	cmp	r3, r2
 8101b7e:	d027      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	681b      	ldr	r3, [r3, #0]
 8101b84:	4a5a      	ldr	r2, [pc, #360]	; (8101cf0 <HAL_DMA_Init+0x1d8>)
 8101b86:	4293      	cmp	r3, r2
 8101b88:	d022      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b8a:	687b      	ldr	r3, [r7, #4]
 8101b8c:	681b      	ldr	r3, [r3, #0]
 8101b8e:	4a59      	ldr	r2, [pc, #356]	; (8101cf4 <HAL_DMA_Init+0x1dc>)
 8101b90:	4293      	cmp	r3, r2
 8101b92:	d01d      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	681b      	ldr	r3, [r3, #0]
 8101b98:	4a57      	ldr	r2, [pc, #348]	; (8101cf8 <HAL_DMA_Init+0x1e0>)
 8101b9a:	4293      	cmp	r3, r2
 8101b9c:	d018      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101b9e:	687b      	ldr	r3, [r7, #4]
 8101ba0:	681b      	ldr	r3, [r3, #0]
 8101ba2:	4a56      	ldr	r2, [pc, #344]	; (8101cfc <HAL_DMA_Init+0x1e4>)
 8101ba4:	4293      	cmp	r3, r2
 8101ba6:	d013      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	681b      	ldr	r3, [r3, #0]
 8101bac:	4a54      	ldr	r2, [pc, #336]	; (8101d00 <HAL_DMA_Init+0x1e8>)
 8101bae:	4293      	cmp	r3, r2
 8101bb0:	d00e      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101bb2:	687b      	ldr	r3, [r7, #4]
 8101bb4:	681b      	ldr	r3, [r3, #0]
 8101bb6:	4a53      	ldr	r2, [pc, #332]	; (8101d04 <HAL_DMA_Init+0x1ec>)
 8101bb8:	4293      	cmp	r3, r2
 8101bba:	d009      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	681b      	ldr	r3, [r3, #0]
 8101bc0:	4a51      	ldr	r2, [pc, #324]	; (8101d08 <HAL_DMA_Init+0x1f0>)
 8101bc2:	4293      	cmp	r3, r2
 8101bc4:	d004      	beq.n	8101bd0 <HAL_DMA_Init+0xb8>
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	681b      	ldr	r3, [r3, #0]
 8101bca:	4a50      	ldr	r2, [pc, #320]	; (8101d0c <HAL_DMA_Init+0x1f4>)
 8101bcc:	4293      	cmp	r3, r2
 8101bce:	d101      	bne.n	8101bd4 <HAL_DMA_Init+0xbc>
 8101bd0:	2301      	movs	r3, #1
 8101bd2:	e000      	b.n	8101bd6 <HAL_DMA_Init+0xbe>
 8101bd4:	2300      	movs	r3, #0
 8101bd6:	2b00      	cmp	r3, #0
 8101bd8:	f000 813b 	beq.w	8101e52 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	2202      	movs	r2, #2
 8101be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101be4:	687b      	ldr	r3, [r7, #4]
 8101be6:	2200      	movs	r2, #0
 8101be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	4a37      	ldr	r2, [pc, #220]	; (8101cd0 <HAL_DMA_Init+0x1b8>)
 8101bf2:	4293      	cmp	r3, r2
 8101bf4:	d04a      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101bf6:	687b      	ldr	r3, [r7, #4]
 8101bf8:	681b      	ldr	r3, [r3, #0]
 8101bfa:	4a36      	ldr	r2, [pc, #216]	; (8101cd4 <HAL_DMA_Init+0x1bc>)
 8101bfc:	4293      	cmp	r3, r2
 8101bfe:	d045      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c00:	687b      	ldr	r3, [r7, #4]
 8101c02:	681b      	ldr	r3, [r3, #0]
 8101c04:	4a34      	ldr	r2, [pc, #208]	; (8101cd8 <HAL_DMA_Init+0x1c0>)
 8101c06:	4293      	cmp	r3, r2
 8101c08:	d040      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c0a:	687b      	ldr	r3, [r7, #4]
 8101c0c:	681b      	ldr	r3, [r3, #0]
 8101c0e:	4a33      	ldr	r2, [pc, #204]	; (8101cdc <HAL_DMA_Init+0x1c4>)
 8101c10:	4293      	cmp	r3, r2
 8101c12:	d03b      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	681b      	ldr	r3, [r3, #0]
 8101c18:	4a31      	ldr	r2, [pc, #196]	; (8101ce0 <HAL_DMA_Init+0x1c8>)
 8101c1a:	4293      	cmp	r3, r2
 8101c1c:	d036      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c1e:	687b      	ldr	r3, [r7, #4]
 8101c20:	681b      	ldr	r3, [r3, #0]
 8101c22:	4a30      	ldr	r2, [pc, #192]	; (8101ce4 <HAL_DMA_Init+0x1cc>)
 8101c24:	4293      	cmp	r3, r2
 8101c26:	d031      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c28:	687b      	ldr	r3, [r7, #4]
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	4a2e      	ldr	r2, [pc, #184]	; (8101ce8 <HAL_DMA_Init+0x1d0>)
 8101c2e:	4293      	cmp	r3, r2
 8101c30:	d02c      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	681b      	ldr	r3, [r3, #0]
 8101c36:	4a2d      	ldr	r2, [pc, #180]	; (8101cec <HAL_DMA_Init+0x1d4>)
 8101c38:	4293      	cmp	r3, r2
 8101c3a:	d027      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c3c:	687b      	ldr	r3, [r7, #4]
 8101c3e:	681b      	ldr	r3, [r3, #0]
 8101c40:	4a2b      	ldr	r2, [pc, #172]	; (8101cf0 <HAL_DMA_Init+0x1d8>)
 8101c42:	4293      	cmp	r3, r2
 8101c44:	d022      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	681b      	ldr	r3, [r3, #0]
 8101c4a:	4a2a      	ldr	r2, [pc, #168]	; (8101cf4 <HAL_DMA_Init+0x1dc>)
 8101c4c:	4293      	cmp	r3, r2
 8101c4e:	d01d      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	681b      	ldr	r3, [r3, #0]
 8101c54:	4a28      	ldr	r2, [pc, #160]	; (8101cf8 <HAL_DMA_Init+0x1e0>)
 8101c56:	4293      	cmp	r3, r2
 8101c58:	d018      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c5a:	687b      	ldr	r3, [r7, #4]
 8101c5c:	681b      	ldr	r3, [r3, #0]
 8101c5e:	4a27      	ldr	r2, [pc, #156]	; (8101cfc <HAL_DMA_Init+0x1e4>)
 8101c60:	4293      	cmp	r3, r2
 8101c62:	d013      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	681b      	ldr	r3, [r3, #0]
 8101c68:	4a25      	ldr	r2, [pc, #148]	; (8101d00 <HAL_DMA_Init+0x1e8>)
 8101c6a:	4293      	cmp	r3, r2
 8101c6c:	d00e      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	681b      	ldr	r3, [r3, #0]
 8101c72:	4a24      	ldr	r2, [pc, #144]	; (8101d04 <HAL_DMA_Init+0x1ec>)
 8101c74:	4293      	cmp	r3, r2
 8101c76:	d009      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c78:	687b      	ldr	r3, [r7, #4]
 8101c7a:	681b      	ldr	r3, [r3, #0]
 8101c7c:	4a22      	ldr	r2, [pc, #136]	; (8101d08 <HAL_DMA_Init+0x1f0>)
 8101c7e:	4293      	cmp	r3, r2
 8101c80:	d004      	beq.n	8101c8c <HAL_DMA_Init+0x174>
 8101c82:	687b      	ldr	r3, [r7, #4]
 8101c84:	681b      	ldr	r3, [r3, #0]
 8101c86:	4a21      	ldr	r2, [pc, #132]	; (8101d0c <HAL_DMA_Init+0x1f4>)
 8101c88:	4293      	cmp	r3, r2
 8101c8a:	d108      	bne.n	8101c9e <HAL_DMA_Init+0x186>
 8101c8c:	687b      	ldr	r3, [r7, #4]
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	681a      	ldr	r2, [r3, #0]
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	681b      	ldr	r3, [r3, #0]
 8101c96:	f022 0201 	bic.w	r2, r2, #1
 8101c9a:	601a      	str	r2, [r3, #0]
 8101c9c:	e007      	b.n	8101cae <HAL_DMA_Init+0x196>
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	681b      	ldr	r3, [r3, #0]
 8101ca2:	681a      	ldr	r2, [r3, #0]
 8101ca4:	687b      	ldr	r3, [r7, #4]
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	f022 0201 	bic.w	r2, r2, #1
 8101cac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101cae:	e02f      	b.n	8101d10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101cb0:	f7ff fdde 	bl	8101870 <HAL_GetTick>
 8101cb4:	4602      	mov	r2, r0
 8101cb6:	693b      	ldr	r3, [r7, #16]
 8101cb8:	1ad3      	subs	r3, r2, r3
 8101cba:	2b05      	cmp	r3, #5
 8101cbc:	d928      	bls.n	8101d10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101cbe:	687b      	ldr	r3, [r7, #4]
 8101cc0:	2220      	movs	r2, #32
 8101cc2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8101cc4:	687b      	ldr	r3, [r7, #4]
 8101cc6:	2203      	movs	r2, #3
 8101cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8101ccc:	2301      	movs	r3, #1
 8101cce:	e244      	b.n	810215a <HAL_DMA_Init+0x642>
 8101cd0:	40020010 	.word	0x40020010
 8101cd4:	40020028 	.word	0x40020028
 8101cd8:	40020040 	.word	0x40020040
 8101cdc:	40020058 	.word	0x40020058
 8101ce0:	40020070 	.word	0x40020070
 8101ce4:	40020088 	.word	0x40020088
 8101ce8:	400200a0 	.word	0x400200a0
 8101cec:	400200b8 	.word	0x400200b8
 8101cf0:	40020410 	.word	0x40020410
 8101cf4:	40020428 	.word	0x40020428
 8101cf8:	40020440 	.word	0x40020440
 8101cfc:	40020458 	.word	0x40020458
 8101d00:	40020470 	.word	0x40020470
 8101d04:	40020488 	.word	0x40020488
 8101d08:	400204a0 	.word	0x400204a0
 8101d0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101d10:	687b      	ldr	r3, [r7, #4]
 8101d12:	681b      	ldr	r3, [r3, #0]
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	f003 0301 	and.w	r3, r3, #1
 8101d1a:	2b00      	cmp	r3, #0
 8101d1c:	d1c8      	bne.n	8101cb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8101d1e:	687b      	ldr	r3, [r7, #4]
 8101d20:	681b      	ldr	r3, [r3, #0]
 8101d22:	681b      	ldr	r3, [r3, #0]
 8101d24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8101d26:	697a      	ldr	r2, [r7, #20]
 8101d28:	4b84      	ldr	r3, [pc, #528]	; (8101f3c <HAL_DMA_Init+0x424>)
 8101d2a:	4013      	ands	r3, r2
 8101d2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101d32:	687b      	ldr	r3, [r7, #4]
 8101d34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8101d36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101d38:	687b      	ldr	r3, [r7, #4]
 8101d3a:	691b      	ldr	r3, [r3, #16]
 8101d3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101d42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101d44:	687b      	ldr	r3, [r7, #4]
 8101d46:	699b      	ldr	r3, [r3, #24]
 8101d48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101d4a:	687b      	ldr	r3, [r7, #4]
 8101d4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101d4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101d50:	687b      	ldr	r3, [r7, #4]
 8101d52:	6a1b      	ldr	r3, [r3, #32]
 8101d54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8101d56:	697a      	ldr	r2, [r7, #20]
 8101d58:	4313      	orrs	r3, r2
 8101d5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101d5c:	687b      	ldr	r3, [r7, #4]
 8101d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101d60:	2b04      	cmp	r3, #4
 8101d62:	d107      	bne.n	8101d74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101d6c:	4313      	orrs	r3, r2
 8101d6e:	697a      	ldr	r2, [r7, #20]
 8101d70:	4313      	orrs	r3, r2
 8101d72:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8101d74:	4b72      	ldr	r3, [pc, #456]	; (8101f40 <HAL_DMA_Init+0x428>)
 8101d76:	681b      	ldr	r3, [r3, #0]
 8101d78:	0c1b      	lsrs	r3, r3, #16
 8101d7a:	041b      	lsls	r3, r3, #16
 8101d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101d80:	d328      	bcc.n	8101dd4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8101d82:	687b      	ldr	r3, [r7, #4]
 8101d84:	685b      	ldr	r3, [r3, #4]
 8101d86:	2b28      	cmp	r3, #40	; 0x28
 8101d88:	d903      	bls.n	8101d92 <HAL_DMA_Init+0x27a>
 8101d8a:	687b      	ldr	r3, [r7, #4]
 8101d8c:	685b      	ldr	r3, [r3, #4]
 8101d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8101d90:	d917      	bls.n	8101dc2 <HAL_DMA_Init+0x2aa>
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	685b      	ldr	r3, [r3, #4]
 8101d96:	2b3e      	cmp	r3, #62	; 0x3e
 8101d98:	d903      	bls.n	8101da2 <HAL_DMA_Init+0x28a>
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	685b      	ldr	r3, [r3, #4]
 8101d9e:	2b42      	cmp	r3, #66	; 0x42
 8101da0:	d90f      	bls.n	8101dc2 <HAL_DMA_Init+0x2aa>
 8101da2:	687b      	ldr	r3, [r7, #4]
 8101da4:	685b      	ldr	r3, [r3, #4]
 8101da6:	2b46      	cmp	r3, #70	; 0x46
 8101da8:	d903      	bls.n	8101db2 <HAL_DMA_Init+0x29a>
 8101daa:	687b      	ldr	r3, [r7, #4]
 8101dac:	685b      	ldr	r3, [r3, #4]
 8101dae:	2b48      	cmp	r3, #72	; 0x48
 8101db0:	d907      	bls.n	8101dc2 <HAL_DMA_Init+0x2aa>
 8101db2:	687b      	ldr	r3, [r7, #4]
 8101db4:	685b      	ldr	r3, [r3, #4]
 8101db6:	2b4e      	cmp	r3, #78	; 0x4e
 8101db8:	d905      	bls.n	8101dc6 <HAL_DMA_Init+0x2ae>
 8101dba:	687b      	ldr	r3, [r7, #4]
 8101dbc:	685b      	ldr	r3, [r3, #4]
 8101dbe:	2b52      	cmp	r3, #82	; 0x52
 8101dc0:	d801      	bhi.n	8101dc6 <HAL_DMA_Init+0x2ae>
 8101dc2:	2301      	movs	r3, #1
 8101dc4:	e000      	b.n	8101dc8 <HAL_DMA_Init+0x2b0>
 8101dc6:	2300      	movs	r3, #0
 8101dc8:	2b00      	cmp	r3, #0
 8101dca:	d003      	beq.n	8101dd4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8101dcc:	697b      	ldr	r3, [r7, #20]
 8101dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8101dd2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8101dd4:	687b      	ldr	r3, [r7, #4]
 8101dd6:	681b      	ldr	r3, [r3, #0]
 8101dd8:	697a      	ldr	r2, [r7, #20]
 8101dda:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8101ddc:	687b      	ldr	r3, [r7, #4]
 8101dde:	681b      	ldr	r3, [r3, #0]
 8101de0:	695b      	ldr	r3, [r3, #20]
 8101de2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8101de4:	697b      	ldr	r3, [r7, #20]
 8101de6:	f023 0307 	bic.w	r3, r3, #7
 8101dea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8101dec:	687b      	ldr	r3, [r7, #4]
 8101dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101df0:	697a      	ldr	r2, [r7, #20]
 8101df2:	4313      	orrs	r3, r2
 8101df4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101dfa:	2b04      	cmp	r3, #4
 8101dfc:	d117      	bne.n	8101e2e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8101dfe:	687b      	ldr	r3, [r7, #4]
 8101e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101e02:	697a      	ldr	r2, [r7, #20]
 8101e04:	4313      	orrs	r3, r2
 8101e06:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101e0c:	2b00      	cmp	r3, #0
 8101e0e:	d00e      	beq.n	8101e2e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8101e10:	6878      	ldr	r0, [r7, #4]
 8101e12:	f001 fbfd 	bl	8103610 <DMA_CheckFifoParam>
 8101e16:	4603      	mov	r3, r0
 8101e18:	2b00      	cmp	r3, #0
 8101e1a:	d008      	beq.n	8101e2e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101e1c:	687b      	ldr	r3, [r7, #4]
 8101e1e:	2240      	movs	r2, #64	; 0x40
 8101e20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8101e22:	687b      	ldr	r3, [r7, #4]
 8101e24:	2201      	movs	r2, #1
 8101e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8101e2a:	2301      	movs	r3, #1
 8101e2c:	e195      	b.n	810215a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	681b      	ldr	r3, [r3, #0]
 8101e32:	697a      	ldr	r2, [r7, #20]
 8101e34:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8101e36:	6878      	ldr	r0, [r7, #4]
 8101e38:	f001 fb38 	bl	81034ac <DMA_CalcBaseAndBitshift>
 8101e3c:	4603      	mov	r3, r0
 8101e3e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101e40:	687b      	ldr	r3, [r7, #4]
 8101e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101e44:	f003 031f 	and.w	r3, r3, #31
 8101e48:	223f      	movs	r2, #63	; 0x3f
 8101e4a:	409a      	lsls	r2, r3
 8101e4c:	68bb      	ldr	r3, [r7, #8]
 8101e4e:	609a      	str	r2, [r3, #8]
 8101e50:	e0cb      	b.n	8101fea <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	681b      	ldr	r3, [r3, #0]
 8101e56:	4a3b      	ldr	r2, [pc, #236]	; (8101f44 <HAL_DMA_Init+0x42c>)
 8101e58:	4293      	cmp	r3, r2
 8101e5a:	d022      	beq.n	8101ea2 <HAL_DMA_Init+0x38a>
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	4a39      	ldr	r2, [pc, #228]	; (8101f48 <HAL_DMA_Init+0x430>)
 8101e62:	4293      	cmp	r3, r2
 8101e64:	d01d      	beq.n	8101ea2 <HAL_DMA_Init+0x38a>
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	681b      	ldr	r3, [r3, #0]
 8101e6a:	4a38      	ldr	r2, [pc, #224]	; (8101f4c <HAL_DMA_Init+0x434>)
 8101e6c:	4293      	cmp	r3, r2
 8101e6e:	d018      	beq.n	8101ea2 <HAL_DMA_Init+0x38a>
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	4a36      	ldr	r2, [pc, #216]	; (8101f50 <HAL_DMA_Init+0x438>)
 8101e76:	4293      	cmp	r3, r2
 8101e78:	d013      	beq.n	8101ea2 <HAL_DMA_Init+0x38a>
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	681b      	ldr	r3, [r3, #0]
 8101e7e:	4a35      	ldr	r2, [pc, #212]	; (8101f54 <HAL_DMA_Init+0x43c>)
 8101e80:	4293      	cmp	r3, r2
 8101e82:	d00e      	beq.n	8101ea2 <HAL_DMA_Init+0x38a>
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	681b      	ldr	r3, [r3, #0]
 8101e88:	4a33      	ldr	r2, [pc, #204]	; (8101f58 <HAL_DMA_Init+0x440>)
 8101e8a:	4293      	cmp	r3, r2
 8101e8c:	d009      	beq.n	8101ea2 <HAL_DMA_Init+0x38a>
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	681b      	ldr	r3, [r3, #0]
 8101e92:	4a32      	ldr	r2, [pc, #200]	; (8101f5c <HAL_DMA_Init+0x444>)
 8101e94:	4293      	cmp	r3, r2
 8101e96:	d004      	beq.n	8101ea2 <HAL_DMA_Init+0x38a>
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	4a30      	ldr	r2, [pc, #192]	; (8101f60 <HAL_DMA_Init+0x448>)
 8101e9e:	4293      	cmp	r3, r2
 8101ea0:	d101      	bne.n	8101ea6 <HAL_DMA_Init+0x38e>
 8101ea2:	2301      	movs	r3, #1
 8101ea4:	e000      	b.n	8101ea8 <HAL_DMA_Init+0x390>
 8101ea6:	2300      	movs	r3, #0
 8101ea8:	2b00      	cmp	r3, #0
 8101eaa:	f000 8095 	beq.w	8101fd8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8101eae:	687b      	ldr	r3, [r7, #4]
 8101eb0:	681b      	ldr	r3, [r3, #0]
 8101eb2:	4a24      	ldr	r2, [pc, #144]	; (8101f44 <HAL_DMA_Init+0x42c>)
 8101eb4:	4293      	cmp	r3, r2
 8101eb6:	d021      	beq.n	8101efc <HAL_DMA_Init+0x3e4>
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	681b      	ldr	r3, [r3, #0]
 8101ebc:	4a22      	ldr	r2, [pc, #136]	; (8101f48 <HAL_DMA_Init+0x430>)
 8101ebe:	4293      	cmp	r3, r2
 8101ec0:	d01c      	beq.n	8101efc <HAL_DMA_Init+0x3e4>
 8101ec2:	687b      	ldr	r3, [r7, #4]
 8101ec4:	681b      	ldr	r3, [r3, #0]
 8101ec6:	4a21      	ldr	r2, [pc, #132]	; (8101f4c <HAL_DMA_Init+0x434>)
 8101ec8:	4293      	cmp	r3, r2
 8101eca:	d017      	beq.n	8101efc <HAL_DMA_Init+0x3e4>
 8101ecc:	687b      	ldr	r3, [r7, #4]
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	4a1f      	ldr	r2, [pc, #124]	; (8101f50 <HAL_DMA_Init+0x438>)
 8101ed2:	4293      	cmp	r3, r2
 8101ed4:	d012      	beq.n	8101efc <HAL_DMA_Init+0x3e4>
 8101ed6:	687b      	ldr	r3, [r7, #4]
 8101ed8:	681b      	ldr	r3, [r3, #0]
 8101eda:	4a1e      	ldr	r2, [pc, #120]	; (8101f54 <HAL_DMA_Init+0x43c>)
 8101edc:	4293      	cmp	r3, r2
 8101ede:	d00d      	beq.n	8101efc <HAL_DMA_Init+0x3e4>
 8101ee0:	687b      	ldr	r3, [r7, #4]
 8101ee2:	681b      	ldr	r3, [r3, #0]
 8101ee4:	4a1c      	ldr	r2, [pc, #112]	; (8101f58 <HAL_DMA_Init+0x440>)
 8101ee6:	4293      	cmp	r3, r2
 8101ee8:	d008      	beq.n	8101efc <HAL_DMA_Init+0x3e4>
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	681b      	ldr	r3, [r3, #0]
 8101eee:	4a1b      	ldr	r2, [pc, #108]	; (8101f5c <HAL_DMA_Init+0x444>)
 8101ef0:	4293      	cmp	r3, r2
 8101ef2:	d003      	beq.n	8101efc <HAL_DMA_Init+0x3e4>
 8101ef4:	687b      	ldr	r3, [r7, #4]
 8101ef6:	681b      	ldr	r3, [r3, #0]
 8101ef8:	4a19      	ldr	r2, [pc, #100]	; (8101f60 <HAL_DMA_Init+0x448>)
 8101efa:	4293      	cmp	r3, r2
 8101efc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	2202      	movs	r2, #2
 8101f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	2200      	movs	r2, #0
 8101f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	681b      	ldr	r3, [r3, #0]
 8101f12:	681b      	ldr	r3, [r3, #0]
 8101f14:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8101f16:	697b      	ldr	r3, [r7, #20]
 8101f18:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8101f1c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8101f20:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	689b      	ldr	r3, [r3, #8]
 8101f26:	2b40      	cmp	r3, #64	; 0x40
 8101f28:	d01c      	beq.n	8101f64 <HAL_DMA_Init+0x44c>
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	689b      	ldr	r3, [r3, #8]
 8101f2e:	2b80      	cmp	r3, #128	; 0x80
 8101f30:	d102      	bne.n	8101f38 <HAL_DMA_Init+0x420>
 8101f32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8101f36:	e016      	b.n	8101f66 <HAL_DMA_Init+0x44e>
 8101f38:	2300      	movs	r3, #0
 8101f3a:	e014      	b.n	8101f66 <HAL_DMA_Init+0x44e>
 8101f3c:	fe10803f 	.word	0xfe10803f
 8101f40:	5c001000 	.word	0x5c001000
 8101f44:	58025408 	.word	0x58025408
 8101f48:	5802541c 	.word	0x5802541c
 8101f4c:	58025430 	.word	0x58025430
 8101f50:	58025444 	.word	0x58025444
 8101f54:	58025458 	.word	0x58025458
 8101f58:	5802546c 	.word	0x5802546c
 8101f5c:	58025480 	.word	0x58025480
 8101f60:	58025494 	.word	0x58025494
 8101f64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8101f66:	687a      	ldr	r2, [r7, #4]
 8101f68:	68d2      	ldr	r2, [r2, #12]
 8101f6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101f6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	691b      	ldr	r3, [r3, #16]
 8101f72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8101f74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	695b      	ldr	r3, [r3, #20]
 8101f7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8101f7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	699b      	ldr	r3, [r3, #24]
 8101f82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8101f84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	69db      	ldr	r3, [r3, #28]
 8101f8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8101f8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	6a1b      	ldr	r3, [r3, #32]
 8101f92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8101f94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101f96:	697a      	ldr	r2, [r7, #20]
 8101f98:	4313      	orrs	r3, r2
 8101f9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8101f9c:	687b      	ldr	r3, [r7, #4]
 8101f9e:	681b      	ldr	r3, [r3, #0]
 8101fa0:	697a      	ldr	r2, [r7, #20]
 8101fa2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	461a      	mov	r2, r3
 8101faa:	4b6e      	ldr	r3, [pc, #440]	; (8102164 <HAL_DMA_Init+0x64c>)
 8101fac:	4413      	add	r3, r2
 8101fae:	4a6e      	ldr	r2, [pc, #440]	; (8102168 <HAL_DMA_Init+0x650>)
 8101fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8101fb4:	091b      	lsrs	r3, r3, #4
 8101fb6:	009a      	lsls	r2, r3, #2
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8101fbc:	6878      	ldr	r0, [r7, #4]
 8101fbe:	f001 fa75 	bl	81034ac <DMA_CalcBaseAndBitshift>
 8101fc2:	4603      	mov	r3, r0
 8101fc4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101fca:	f003 031f 	and.w	r3, r3, #31
 8101fce:	2201      	movs	r2, #1
 8101fd0:	409a      	lsls	r2, r3
 8101fd2:	68fb      	ldr	r3, [r7, #12]
 8101fd4:	605a      	str	r2, [r3, #4]
 8101fd6:	e008      	b.n	8101fea <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	2240      	movs	r2, #64	; 0x40
 8101fdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	2203      	movs	r2, #3
 8101fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8101fe6:	2301      	movs	r3, #1
 8101fe8:	e0b7      	b.n	810215a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	681b      	ldr	r3, [r3, #0]
 8101fee:	4a5f      	ldr	r2, [pc, #380]	; (810216c <HAL_DMA_Init+0x654>)
 8101ff0:	4293      	cmp	r3, r2
 8101ff2:	d072      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	4a5d      	ldr	r2, [pc, #372]	; (8102170 <HAL_DMA_Init+0x658>)
 8101ffa:	4293      	cmp	r3, r2
 8101ffc:	d06d      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	681b      	ldr	r3, [r3, #0]
 8102002:	4a5c      	ldr	r2, [pc, #368]	; (8102174 <HAL_DMA_Init+0x65c>)
 8102004:	4293      	cmp	r3, r2
 8102006:	d068      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	681b      	ldr	r3, [r3, #0]
 810200c:	4a5a      	ldr	r2, [pc, #360]	; (8102178 <HAL_DMA_Init+0x660>)
 810200e:	4293      	cmp	r3, r2
 8102010:	d063      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	681b      	ldr	r3, [r3, #0]
 8102016:	4a59      	ldr	r2, [pc, #356]	; (810217c <HAL_DMA_Init+0x664>)
 8102018:	4293      	cmp	r3, r2
 810201a:	d05e      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	681b      	ldr	r3, [r3, #0]
 8102020:	4a57      	ldr	r2, [pc, #348]	; (8102180 <HAL_DMA_Init+0x668>)
 8102022:	4293      	cmp	r3, r2
 8102024:	d059      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	681b      	ldr	r3, [r3, #0]
 810202a:	4a56      	ldr	r2, [pc, #344]	; (8102184 <HAL_DMA_Init+0x66c>)
 810202c:	4293      	cmp	r3, r2
 810202e:	d054      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8102030:	687b      	ldr	r3, [r7, #4]
 8102032:	681b      	ldr	r3, [r3, #0]
 8102034:	4a54      	ldr	r2, [pc, #336]	; (8102188 <HAL_DMA_Init+0x670>)
 8102036:	4293      	cmp	r3, r2
 8102038:	d04f      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	681b      	ldr	r3, [r3, #0]
 810203e:	4a53      	ldr	r2, [pc, #332]	; (810218c <HAL_DMA_Init+0x674>)
 8102040:	4293      	cmp	r3, r2
 8102042:	d04a      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	681b      	ldr	r3, [r3, #0]
 8102048:	4a51      	ldr	r2, [pc, #324]	; (8102190 <HAL_DMA_Init+0x678>)
 810204a:	4293      	cmp	r3, r2
 810204c:	d045      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	4a50      	ldr	r2, [pc, #320]	; (8102194 <HAL_DMA_Init+0x67c>)
 8102054:	4293      	cmp	r3, r2
 8102056:	d040      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	681b      	ldr	r3, [r3, #0]
 810205c:	4a4e      	ldr	r2, [pc, #312]	; (8102198 <HAL_DMA_Init+0x680>)
 810205e:	4293      	cmp	r3, r2
 8102060:	d03b      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	4a4d      	ldr	r2, [pc, #308]	; (810219c <HAL_DMA_Init+0x684>)
 8102068:	4293      	cmp	r3, r2
 810206a:	d036      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	681b      	ldr	r3, [r3, #0]
 8102070:	4a4b      	ldr	r2, [pc, #300]	; (81021a0 <HAL_DMA_Init+0x688>)
 8102072:	4293      	cmp	r3, r2
 8102074:	d031      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	4a4a      	ldr	r2, [pc, #296]	; (81021a4 <HAL_DMA_Init+0x68c>)
 810207c:	4293      	cmp	r3, r2
 810207e:	d02c      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8102080:	687b      	ldr	r3, [r7, #4]
 8102082:	681b      	ldr	r3, [r3, #0]
 8102084:	4a48      	ldr	r2, [pc, #288]	; (81021a8 <HAL_DMA_Init+0x690>)
 8102086:	4293      	cmp	r3, r2
 8102088:	d027      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	681b      	ldr	r3, [r3, #0]
 810208e:	4a47      	ldr	r2, [pc, #284]	; (81021ac <HAL_DMA_Init+0x694>)
 8102090:	4293      	cmp	r3, r2
 8102092:	d022      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	681b      	ldr	r3, [r3, #0]
 8102098:	4a45      	ldr	r2, [pc, #276]	; (81021b0 <HAL_DMA_Init+0x698>)
 810209a:	4293      	cmp	r3, r2
 810209c:	d01d      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	681b      	ldr	r3, [r3, #0]
 81020a2:	4a44      	ldr	r2, [pc, #272]	; (81021b4 <HAL_DMA_Init+0x69c>)
 81020a4:	4293      	cmp	r3, r2
 81020a6:	d018      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	4a42      	ldr	r2, [pc, #264]	; (81021b8 <HAL_DMA_Init+0x6a0>)
 81020ae:	4293      	cmp	r3, r2
 81020b0:	d013      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	4a41      	ldr	r2, [pc, #260]	; (81021bc <HAL_DMA_Init+0x6a4>)
 81020b8:	4293      	cmp	r3, r2
 81020ba:	d00e      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	4a3f      	ldr	r2, [pc, #252]	; (81021c0 <HAL_DMA_Init+0x6a8>)
 81020c2:	4293      	cmp	r3, r2
 81020c4:	d009      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	4a3e      	ldr	r2, [pc, #248]	; (81021c4 <HAL_DMA_Init+0x6ac>)
 81020cc:	4293      	cmp	r3, r2
 81020ce:	d004      	beq.n	81020da <HAL_DMA_Init+0x5c2>
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	681b      	ldr	r3, [r3, #0]
 81020d4:	4a3c      	ldr	r2, [pc, #240]	; (81021c8 <HAL_DMA_Init+0x6b0>)
 81020d6:	4293      	cmp	r3, r2
 81020d8:	d101      	bne.n	81020de <HAL_DMA_Init+0x5c6>
 81020da:	2301      	movs	r3, #1
 81020dc:	e000      	b.n	81020e0 <HAL_DMA_Init+0x5c8>
 81020de:	2300      	movs	r3, #0
 81020e0:	2b00      	cmp	r3, #0
 81020e2:	d032      	beq.n	810214a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81020e4:	6878      	ldr	r0, [r7, #4]
 81020e6:	f001 fb0f 	bl	8103708 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81020ea:	687b      	ldr	r3, [r7, #4]
 81020ec:	689b      	ldr	r3, [r3, #8]
 81020ee:	2b80      	cmp	r3, #128	; 0x80
 81020f0:	d102      	bne.n	81020f8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	2200      	movs	r2, #0
 81020f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	685a      	ldr	r2, [r3, #4]
 81020fc:	687b      	ldr	r3, [r7, #4]
 81020fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102100:	b2d2      	uxtb	r2, r2
 8102102:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102108:	687a      	ldr	r2, [r7, #4]
 810210a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810210c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	685b      	ldr	r3, [r3, #4]
 8102112:	2b00      	cmp	r3, #0
 8102114:	d010      	beq.n	8102138 <HAL_DMA_Init+0x620>
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	685b      	ldr	r3, [r3, #4]
 810211a:	2b08      	cmp	r3, #8
 810211c:	d80c      	bhi.n	8102138 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810211e:	6878      	ldr	r0, [r7, #4]
 8102120:	f001 fb8c 	bl	810383c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102128:	2200      	movs	r2, #0
 810212a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810212c:	687b      	ldr	r3, [r7, #4]
 810212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102130:	687a      	ldr	r2, [r7, #4]
 8102132:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102134:	605a      	str	r2, [r3, #4]
 8102136:	e008      	b.n	810214a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	2200      	movs	r2, #0
 810213c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	2200      	movs	r2, #0
 8102142:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	2200      	movs	r2, #0
 8102148:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	2200      	movs	r2, #0
 810214e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102150:	687b      	ldr	r3, [r7, #4]
 8102152:	2201      	movs	r2, #1
 8102154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102158:	2300      	movs	r3, #0
}
 810215a:	4618      	mov	r0, r3
 810215c:	3718      	adds	r7, #24
 810215e:	46bd      	mov	sp, r7
 8102160:	bd80      	pop	{r7, pc}
 8102162:	bf00      	nop
 8102164:	a7fdabf8 	.word	0xa7fdabf8
 8102168:	cccccccd 	.word	0xcccccccd
 810216c:	40020010 	.word	0x40020010
 8102170:	40020028 	.word	0x40020028
 8102174:	40020040 	.word	0x40020040
 8102178:	40020058 	.word	0x40020058
 810217c:	40020070 	.word	0x40020070
 8102180:	40020088 	.word	0x40020088
 8102184:	400200a0 	.word	0x400200a0
 8102188:	400200b8 	.word	0x400200b8
 810218c:	40020410 	.word	0x40020410
 8102190:	40020428 	.word	0x40020428
 8102194:	40020440 	.word	0x40020440
 8102198:	40020458 	.word	0x40020458
 810219c:	40020470 	.word	0x40020470
 81021a0:	40020488 	.word	0x40020488
 81021a4:	400204a0 	.word	0x400204a0
 81021a8:	400204b8 	.word	0x400204b8
 81021ac:	58025408 	.word	0x58025408
 81021b0:	5802541c 	.word	0x5802541c
 81021b4:	58025430 	.word	0x58025430
 81021b8:	58025444 	.word	0x58025444
 81021bc:	58025458 	.word	0x58025458
 81021c0:	5802546c 	.word	0x5802546c
 81021c4:	58025480 	.word	0x58025480
 81021c8:	58025494 	.word	0x58025494

081021cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81021cc:	b580      	push	{r7, lr}
 81021ce:	b084      	sub	sp, #16
 81021d0:	af00      	add	r7, sp, #0
 81021d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81021d4:	687b      	ldr	r3, [r7, #4]
 81021d6:	2b00      	cmp	r3, #0
 81021d8:	d101      	bne.n	81021de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81021da:	2301      	movs	r3, #1
 81021dc:	e237      	b.n	810264e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81021de:	687b      	ldr	r3, [r7, #4]
 81021e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81021e4:	b2db      	uxtb	r3, r3
 81021e6:	2b02      	cmp	r3, #2
 81021e8:	d004      	beq.n	81021f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	2280      	movs	r2, #128	; 0x80
 81021ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81021f0:	2301      	movs	r3, #1
 81021f2:	e22c      	b.n	810264e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	681b      	ldr	r3, [r3, #0]
 81021f8:	4a5c      	ldr	r2, [pc, #368]	; (810236c <HAL_DMA_Abort_IT+0x1a0>)
 81021fa:	4293      	cmp	r3, r2
 81021fc:	d04a      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	4a5b      	ldr	r2, [pc, #364]	; (8102370 <HAL_DMA_Abort_IT+0x1a4>)
 8102204:	4293      	cmp	r3, r2
 8102206:	d045      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	681b      	ldr	r3, [r3, #0]
 810220c:	4a59      	ldr	r2, [pc, #356]	; (8102374 <HAL_DMA_Abort_IT+0x1a8>)
 810220e:	4293      	cmp	r3, r2
 8102210:	d040      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	681b      	ldr	r3, [r3, #0]
 8102216:	4a58      	ldr	r2, [pc, #352]	; (8102378 <HAL_DMA_Abort_IT+0x1ac>)
 8102218:	4293      	cmp	r3, r2
 810221a:	d03b      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	681b      	ldr	r3, [r3, #0]
 8102220:	4a56      	ldr	r2, [pc, #344]	; (810237c <HAL_DMA_Abort_IT+0x1b0>)
 8102222:	4293      	cmp	r3, r2
 8102224:	d036      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	681b      	ldr	r3, [r3, #0]
 810222a:	4a55      	ldr	r2, [pc, #340]	; (8102380 <HAL_DMA_Abort_IT+0x1b4>)
 810222c:	4293      	cmp	r3, r2
 810222e:	d031      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 8102230:	687b      	ldr	r3, [r7, #4]
 8102232:	681b      	ldr	r3, [r3, #0]
 8102234:	4a53      	ldr	r2, [pc, #332]	; (8102384 <HAL_DMA_Abort_IT+0x1b8>)
 8102236:	4293      	cmp	r3, r2
 8102238:	d02c      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	681b      	ldr	r3, [r3, #0]
 810223e:	4a52      	ldr	r2, [pc, #328]	; (8102388 <HAL_DMA_Abort_IT+0x1bc>)
 8102240:	4293      	cmp	r3, r2
 8102242:	d027      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	4a50      	ldr	r2, [pc, #320]	; (810238c <HAL_DMA_Abort_IT+0x1c0>)
 810224a:	4293      	cmp	r3, r2
 810224c:	d022      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	681b      	ldr	r3, [r3, #0]
 8102252:	4a4f      	ldr	r2, [pc, #316]	; (8102390 <HAL_DMA_Abort_IT+0x1c4>)
 8102254:	4293      	cmp	r3, r2
 8102256:	d01d      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	681b      	ldr	r3, [r3, #0]
 810225c:	4a4d      	ldr	r2, [pc, #308]	; (8102394 <HAL_DMA_Abort_IT+0x1c8>)
 810225e:	4293      	cmp	r3, r2
 8102260:	d018      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	4a4c      	ldr	r2, [pc, #304]	; (8102398 <HAL_DMA_Abort_IT+0x1cc>)
 8102268:	4293      	cmp	r3, r2
 810226a:	d013      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	4a4a      	ldr	r2, [pc, #296]	; (810239c <HAL_DMA_Abort_IT+0x1d0>)
 8102272:	4293      	cmp	r3, r2
 8102274:	d00e      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 8102276:	687b      	ldr	r3, [r7, #4]
 8102278:	681b      	ldr	r3, [r3, #0]
 810227a:	4a49      	ldr	r2, [pc, #292]	; (81023a0 <HAL_DMA_Abort_IT+0x1d4>)
 810227c:	4293      	cmp	r3, r2
 810227e:	d009      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	681b      	ldr	r3, [r3, #0]
 8102284:	4a47      	ldr	r2, [pc, #284]	; (81023a4 <HAL_DMA_Abort_IT+0x1d8>)
 8102286:	4293      	cmp	r3, r2
 8102288:	d004      	beq.n	8102294 <HAL_DMA_Abort_IT+0xc8>
 810228a:	687b      	ldr	r3, [r7, #4]
 810228c:	681b      	ldr	r3, [r3, #0]
 810228e:	4a46      	ldr	r2, [pc, #280]	; (81023a8 <HAL_DMA_Abort_IT+0x1dc>)
 8102290:	4293      	cmp	r3, r2
 8102292:	d101      	bne.n	8102298 <HAL_DMA_Abort_IT+0xcc>
 8102294:	2301      	movs	r3, #1
 8102296:	e000      	b.n	810229a <HAL_DMA_Abort_IT+0xce>
 8102298:	2300      	movs	r3, #0
 810229a:	2b00      	cmp	r3, #0
 810229c:	f000 8086 	beq.w	81023ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	2204      	movs	r2, #4
 81022a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81022a8:	687b      	ldr	r3, [r7, #4]
 81022aa:	681b      	ldr	r3, [r3, #0]
 81022ac:	4a2f      	ldr	r2, [pc, #188]	; (810236c <HAL_DMA_Abort_IT+0x1a0>)
 81022ae:	4293      	cmp	r3, r2
 81022b0:	d04a      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 81022b2:	687b      	ldr	r3, [r7, #4]
 81022b4:	681b      	ldr	r3, [r3, #0]
 81022b6:	4a2e      	ldr	r2, [pc, #184]	; (8102370 <HAL_DMA_Abort_IT+0x1a4>)
 81022b8:	4293      	cmp	r3, r2
 81022ba:	d045      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 81022bc:	687b      	ldr	r3, [r7, #4]
 81022be:	681b      	ldr	r3, [r3, #0]
 81022c0:	4a2c      	ldr	r2, [pc, #176]	; (8102374 <HAL_DMA_Abort_IT+0x1a8>)
 81022c2:	4293      	cmp	r3, r2
 81022c4:	d040      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	4a2b      	ldr	r2, [pc, #172]	; (8102378 <HAL_DMA_Abort_IT+0x1ac>)
 81022cc:	4293      	cmp	r3, r2
 81022ce:	d03b      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	681b      	ldr	r3, [r3, #0]
 81022d4:	4a29      	ldr	r2, [pc, #164]	; (810237c <HAL_DMA_Abort_IT+0x1b0>)
 81022d6:	4293      	cmp	r3, r2
 81022d8:	d036      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	681b      	ldr	r3, [r3, #0]
 81022de:	4a28      	ldr	r2, [pc, #160]	; (8102380 <HAL_DMA_Abort_IT+0x1b4>)
 81022e0:	4293      	cmp	r3, r2
 81022e2:	d031      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 81022e4:	687b      	ldr	r3, [r7, #4]
 81022e6:	681b      	ldr	r3, [r3, #0]
 81022e8:	4a26      	ldr	r2, [pc, #152]	; (8102384 <HAL_DMA_Abort_IT+0x1b8>)
 81022ea:	4293      	cmp	r3, r2
 81022ec:	d02c      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	681b      	ldr	r3, [r3, #0]
 81022f2:	4a25      	ldr	r2, [pc, #148]	; (8102388 <HAL_DMA_Abort_IT+0x1bc>)
 81022f4:	4293      	cmp	r3, r2
 81022f6:	d027      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	681b      	ldr	r3, [r3, #0]
 81022fc:	4a23      	ldr	r2, [pc, #140]	; (810238c <HAL_DMA_Abort_IT+0x1c0>)
 81022fe:	4293      	cmp	r3, r2
 8102300:	d022      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	681b      	ldr	r3, [r3, #0]
 8102306:	4a22      	ldr	r2, [pc, #136]	; (8102390 <HAL_DMA_Abort_IT+0x1c4>)
 8102308:	4293      	cmp	r3, r2
 810230a:	d01d      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 810230c:	687b      	ldr	r3, [r7, #4]
 810230e:	681b      	ldr	r3, [r3, #0]
 8102310:	4a20      	ldr	r2, [pc, #128]	; (8102394 <HAL_DMA_Abort_IT+0x1c8>)
 8102312:	4293      	cmp	r3, r2
 8102314:	d018      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	681b      	ldr	r3, [r3, #0]
 810231a:	4a1f      	ldr	r2, [pc, #124]	; (8102398 <HAL_DMA_Abort_IT+0x1cc>)
 810231c:	4293      	cmp	r3, r2
 810231e:	d013      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	681b      	ldr	r3, [r3, #0]
 8102324:	4a1d      	ldr	r2, [pc, #116]	; (810239c <HAL_DMA_Abort_IT+0x1d0>)
 8102326:	4293      	cmp	r3, r2
 8102328:	d00e      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 810232a:	687b      	ldr	r3, [r7, #4]
 810232c:	681b      	ldr	r3, [r3, #0]
 810232e:	4a1c      	ldr	r2, [pc, #112]	; (81023a0 <HAL_DMA_Abort_IT+0x1d4>)
 8102330:	4293      	cmp	r3, r2
 8102332:	d009      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 8102334:	687b      	ldr	r3, [r7, #4]
 8102336:	681b      	ldr	r3, [r3, #0]
 8102338:	4a1a      	ldr	r2, [pc, #104]	; (81023a4 <HAL_DMA_Abort_IT+0x1d8>)
 810233a:	4293      	cmp	r3, r2
 810233c:	d004      	beq.n	8102348 <HAL_DMA_Abort_IT+0x17c>
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	681b      	ldr	r3, [r3, #0]
 8102342:	4a19      	ldr	r2, [pc, #100]	; (81023a8 <HAL_DMA_Abort_IT+0x1dc>)
 8102344:	4293      	cmp	r3, r2
 8102346:	d108      	bne.n	810235a <HAL_DMA_Abort_IT+0x18e>
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	681b      	ldr	r3, [r3, #0]
 810234c:	681a      	ldr	r2, [r3, #0]
 810234e:	687b      	ldr	r3, [r7, #4]
 8102350:	681b      	ldr	r3, [r3, #0]
 8102352:	f022 0201 	bic.w	r2, r2, #1
 8102356:	601a      	str	r2, [r3, #0]
 8102358:	e178      	b.n	810264c <HAL_DMA_Abort_IT+0x480>
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	681b      	ldr	r3, [r3, #0]
 810235e:	681a      	ldr	r2, [r3, #0]
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	f022 0201 	bic.w	r2, r2, #1
 8102368:	601a      	str	r2, [r3, #0]
 810236a:	e16f      	b.n	810264c <HAL_DMA_Abort_IT+0x480>
 810236c:	40020010 	.word	0x40020010
 8102370:	40020028 	.word	0x40020028
 8102374:	40020040 	.word	0x40020040
 8102378:	40020058 	.word	0x40020058
 810237c:	40020070 	.word	0x40020070
 8102380:	40020088 	.word	0x40020088
 8102384:	400200a0 	.word	0x400200a0
 8102388:	400200b8 	.word	0x400200b8
 810238c:	40020410 	.word	0x40020410
 8102390:	40020428 	.word	0x40020428
 8102394:	40020440 	.word	0x40020440
 8102398:	40020458 	.word	0x40020458
 810239c:	40020470 	.word	0x40020470
 81023a0:	40020488 	.word	0x40020488
 81023a4:	400204a0 	.word	0x400204a0
 81023a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81023ac:	687b      	ldr	r3, [r7, #4]
 81023ae:	681b      	ldr	r3, [r3, #0]
 81023b0:	681a      	ldr	r2, [r3, #0]
 81023b2:	687b      	ldr	r3, [r7, #4]
 81023b4:	681b      	ldr	r3, [r3, #0]
 81023b6:	f022 020e 	bic.w	r2, r2, #14
 81023ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	4a6c      	ldr	r2, [pc, #432]	; (8102574 <HAL_DMA_Abort_IT+0x3a8>)
 81023c2:	4293      	cmp	r3, r2
 81023c4:	d04a      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	4a6b      	ldr	r2, [pc, #428]	; (8102578 <HAL_DMA_Abort_IT+0x3ac>)
 81023cc:	4293      	cmp	r3, r2
 81023ce:	d045      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	4a69      	ldr	r2, [pc, #420]	; (810257c <HAL_DMA_Abort_IT+0x3b0>)
 81023d6:	4293      	cmp	r3, r2
 81023d8:	d040      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	681b      	ldr	r3, [r3, #0]
 81023de:	4a68      	ldr	r2, [pc, #416]	; (8102580 <HAL_DMA_Abort_IT+0x3b4>)
 81023e0:	4293      	cmp	r3, r2
 81023e2:	d03b      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	4a66      	ldr	r2, [pc, #408]	; (8102584 <HAL_DMA_Abort_IT+0x3b8>)
 81023ea:	4293      	cmp	r3, r2
 81023ec:	d036      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	4a65      	ldr	r2, [pc, #404]	; (8102588 <HAL_DMA_Abort_IT+0x3bc>)
 81023f4:	4293      	cmp	r3, r2
 81023f6:	d031      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	4a63      	ldr	r2, [pc, #396]	; (810258c <HAL_DMA_Abort_IT+0x3c0>)
 81023fe:	4293      	cmp	r3, r2
 8102400:	d02c      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	681b      	ldr	r3, [r3, #0]
 8102406:	4a62      	ldr	r2, [pc, #392]	; (8102590 <HAL_DMA_Abort_IT+0x3c4>)
 8102408:	4293      	cmp	r3, r2
 810240a:	d027      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	4a60      	ldr	r2, [pc, #384]	; (8102594 <HAL_DMA_Abort_IT+0x3c8>)
 8102412:	4293      	cmp	r3, r2
 8102414:	d022      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	4a5f      	ldr	r2, [pc, #380]	; (8102598 <HAL_DMA_Abort_IT+0x3cc>)
 810241c:	4293      	cmp	r3, r2
 810241e:	d01d      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	4a5d      	ldr	r2, [pc, #372]	; (810259c <HAL_DMA_Abort_IT+0x3d0>)
 8102426:	4293      	cmp	r3, r2
 8102428:	d018      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	681b      	ldr	r3, [r3, #0]
 810242e:	4a5c      	ldr	r2, [pc, #368]	; (81025a0 <HAL_DMA_Abort_IT+0x3d4>)
 8102430:	4293      	cmp	r3, r2
 8102432:	d013      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	4a5a      	ldr	r2, [pc, #360]	; (81025a4 <HAL_DMA_Abort_IT+0x3d8>)
 810243a:	4293      	cmp	r3, r2
 810243c:	d00e      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	681b      	ldr	r3, [r3, #0]
 8102442:	4a59      	ldr	r2, [pc, #356]	; (81025a8 <HAL_DMA_Abort_IT+0x3dc>)
 8102444:	4293      	cmp	r3, r2
 8102446:	d009      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	4a57      	ldr	r2, [pc, #348]	; (81025ac <HAL_DMA_Abort_IT+0x3e0>)
 810244e:	4293      	cmp	r3, r2
 8102450:	d004      	beq.n	810245c <HAL_DMA_Abort_IT+0x290>
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	681b      	ldr	r3, [r3, #0]
 8102456:	4a56      	ldr	r2, [pc, #344]	; (81025b0 <HAL_DMA_Abort_IT+0x3e4>)
 8102458:	4293      	cmp	r3, r2
 810245a:	d108      	bne.n	810246e <HAL_DMA_Abort_IT+0x2a2>
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	681a      	ldr	r2, [r3, #0]
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	f022 0201 	bic.w	r2, r2, #1
 810246a:	601a      	str	r2, [r3, #0]
 810246c:	e007      	b.n	810247e <HAL_DMA_Abort_IT+0x2b2>
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	681b      	ldr	r3, [r3, #0]
 8102472:	681a      	ldr	r2, [r3, #0]
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	681b      	ldr	r3, [r3, #0]
 8102478:	f022 0201 	bic.w	r2, r2, #1
 810247c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	681b      	ldr	r3, [r3, #0]
 8102482:	4a3c      	ldr	r2, [pc, #240]	; (8102574 <HAL_DMA_Abort_IT+0x3a8>)
 8102484:	4293      	cmp	r3, r2
 8102486:	d072      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 8102488:	687b      	ldr	r3, [r7, #4]
 810248a:	681b      	ldr	r3, [r3, #0]
 810248c:	4a3a      	ldr	r2, [pc, #232]	; (8102578 <HAL_DMA_Abort_IT+0x3ac>)
 810248e:	4293      	cmp	r3, r2
 8102490:	d06d      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 8102492:	687b      	ldr	r3, [r7, #4]
 8102494:	681b      	ldr	r3, [r3, #0]
 8102496:	4a39      	ldr	r2, [pc, #228]	; (810257c <HAL_DMA_Abort_IT+0x3b0>)
 8102498:	4293      	cmp	r3, r2
 810249a:	d068      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 810249c:	687b      	ldr	r3, [r7, #4]
 810249e:	681b      	ldr	r3, [r3, #0]
 81024a0:	4a37      	ldr	r2, [pc, #220]	; (8102580 <HAL_DMA_Abort_IT+0x3b4>)
 81024a2:	4293      	cmp	r3, r2
 81024a4:	d063      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	681b      	ldr	r3, [r3, #0]
 81024aa:	4a36      	ldr	r2, [pc, #216]	; (8102584 <HAL_DMA_Abort_IT+0x3b8>)
 81024ac:	4293      	cmp	r3, r2
 81024ae:	d05e      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	681b      	ldr	r3, [r3, #0]
 81024b4:	4a34      	ldr	r2, [pc, #208]	; (8102588 <HAL_DMA_Abort_IT+0x3bc>)
 81024b6:	4293      	cmp	r3, r2
 81024b8:	d059      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	4a33      	ldr	r2, [pc, #204]	; (810258c <HAL_DMA_Abort_IT+0x3c0>)
 81024c0:	4293      	cmp	r3, r2
 81024c2:	d054      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	681b      	ldr	r3, [r3, #0]
 81024c8:	4a31      	ldr	r2, [pc, #196]	; (8102590 <HAL_DMA_Abort_IT+0x3c4>)
 81024ca:	4293      	cmp	r3, r2
 81024cc:	d04f      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	681b      	ldr	r3, [r3, #0]
 81024d2:	4a30      	ldr	r2, [pc, #192]	; (8102594 <HAL_DMA_Abort_IT+0x3c8>)
 81024d4:	4293      	cmp	r3, r2
 81024d6:	d04a      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	681b      	ldr	r3, [r3, #0]
 81024dc:	4a2e      	ldr	r2, [pc, #184]	; (8102598 <HAL_DMA_Abort_IT+0x3cc>)
 81024de:	4293      	cmp	r3, r2
 81024e0:	d045      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	4a2d      	ldr	r2, [pc, #180]	; (810259c <HAL_DMA_Abort_IT+0x3d0>)
 81024e8:	4293      	cmp	r3, r2
 81024ea:	d040      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	4a2b      	ldr	r2, [pc, #172]	; (81025a0 <HAL_DMA_Abort_IT+0x3d4>)
 81024f2:	4293      	cmp	r3, r2
 81024f4:	d03b      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	681b      	ldr	r3, [r3, #0]
 81024fa:	4a2a      	ldr	r2, [pc, #168]	; (81025a4 <HAL_DMA_Abort_IT+0x3d8>)
 81024fc:	4293      	cmp	r3, r2
 81024fe:	d036      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 8102500:	687b      	ldr	r3, [r7, #4]
 8102502:	681b      	ldr	r3, [r3, #0]
 8102504:	4a28      	ldr	r2, [pc, #160]	; (81025a8 <HAL_DMA_Abort_IT+0x3dc>)
 8102506:	4293      	cmp	r3, r2
 8102508:	d031      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	681b      	ldr	r3, [r3, #0]
 810250e:	4a27      	ldr	r2, [pc, #156]	; (81025ac <HAL_DMA_Abort_IT+0x3e0>)
 8102510:	4293      	cmp	r3, r2
 8102512:	d02c      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 8102514:	687b      	ldr	r3, [r7, #4]
 8102516:	681b      	ldr	r3, [r3, #0]
 8102518:	4a25      	ldr	r2, [pc, #148]	; (81025b0 <HAL_DMA_Abort_IT+0x3e4>)
 810251a:	4293      	cmp	r3, r2
 810251c:	d027      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 810251e:	687b      	ldr	r3, [r7, #4]
 8102520:	681b      	ldr	r3, [r3, #0]
 8102522:	4a24      	ldr	r2, [pc, #144]	; (81025b4 <HAL_DMA_Abort_IT+0x3e8>)
 8102524:	4293      	cmp	r3, r2
 8102526:	d022      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	4a22      	ldr	r2, [pc, #136]	; (81025b8 <HAL_DMA_Abort_IT+0x3ec>)
 810252e:	4293      	cmp	r3, r2
 8102530:	d01d      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	681b      	ldr	r3, [r3, #0]
 8102536:	4a21      	ldr	r2, [pc, #132]	; (81025bc <HAL_DMA_Abort_IT+0x3f0>)
 8102538:	4293      	cmp	r3, r2
 810253a:	d018      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 810253c:	687b      	ldr	r3, [r7, #4]
 810253e:	681b      	ldr	r3, [r3, #0]
 8102540:	4a1f      	ldr	r2, [pc, #124]	; (81025c0 <HAL_DMA_Abort_IT+0x3f4>)
 8102542:	4293      	cmp	r3, r2
 8102544:	d013      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	681b      	ldr	r3, [r3, #0]
 810254a:	4a1e      	ldr	r2, [pc, #120]	; (81025c4 <HAL_DMA_Abort_IT+0x3f8>)
 810254c:	4293      	cmp	r3, r2
 810254e:	d00e      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	4a1c      	ldr	r2, [pc, #112]	; (81025c8 <HAL_DMA_Abort_IT+0x3fc>)
 8102556:	4293      	cmp	r3, r2
 8102558:	d009      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	681b      	ldr	r3, [r3, #0]
 810255e:	4a1b      	ldr	r2, [pc, #108]	; (81025cc <HAL_DMA_Abort_IT+0x400>)
 8102560:	4293      	cmp	r3, r2
 8102562:	d004      	beq.n	810256e <HAL_DMA_Abort_IT+0x3a2>
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	4a19      	ldr	r2, [pc, #100]	; (81025d0 <HAL_DMA_Abort_IT+0x404>)
 810256a:	4293      	cmp	r3, r2
 810256c:	d132      	bne.n	81025d4 <HAL_DMA_Abort_IT+0x408>
 810256e:	2301      	movs	r3, #1
 8102570:	e031      	b.n	81025d6 <HAL_DMA_Abort_IT+0x40a>
 8102572:	bf00      	nop
 8102574:	40020010 	.word	0x40020010
 8102578:	40020028 	.word	0x40020028
 810257c:	40020040 	.word	0x40020040
 8102580:	40020058 	.word	0x40020058
 8102584:	40020070 	.word	0x40020070
 8102588:	40020088 	.word	0x40020088
 810258c:	400200a0 	.word	0x400200a0
 8102590:	400200b8 	.word	0x400200b8
 8102594:	40020410 	.word	0x40020410
 8102598:	40020428 	.word	0x40020428
 810259c:	40020440 	.word	0x40020440
 81025a0:	40020458 	.word	0x40020458
 81025a4:	40020470 	.word	0x40020470
 81025a8:	40020488 	.word	0x40020488
 81025ac:	400204a0 	.word	0x400204a0
 81025b0:	400204b8 	.word	0x400204b8
 81025b4:	58025408 	.word	0x58025408
 81025b8:	5802541c 	.word	0x5802541c
 81025bc:	58025430 	.word	0x58025430
 81025c0:	58025444 	.word	0x58025444
 81025c4:	58025458 	.word	0x58025458
 81025c8:	5802546c 	.word	0x5802546c
 81025cc:	58025480 	.word	0x58025480
 81025d0:	58025494 	.word	0x58025494
 81025d4:	2300      	movs	r3, #0
 81025d6:	2b00      	cmp	r3, #0
 81025d8:	d028      	beq.n	810262c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81025de:	681a      	ldr	r2, [r3, #0]
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81025e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81025e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81025ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81025f4:	f003 031f 	and.w	r3, r3, #31
 81025f8:	2201      	movs	r2, #1
 81025fa:	409a      	lsls	r2, r3
 81025fc:	68fb      	ldr	r3, [r7, #12]
 81025fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102604:	687a      	ldr	r2, [r7, #4]
 8102606:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102608:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810260e:	2b00      	cmp	r3, #0
 8102610:	d00c      	beq.n	810262c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102616:	681a      	ldr	r2, [r3, #0]
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810261c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102620:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102626:	687a      	ldr	r2, [r7, #4]
 8102628:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810262a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	2201      	movs	r2, #1
 8102630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	2200      	movs	r2, #0
 8102638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102640:	2b00      	cmp	r3, #0
 8102642:	d003      	beq.n	810264c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8102644:	687b      	ldr	r3, [r7, #4]
 8102646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102648:	6878      	ldr	r0, [r7, #4]
 810264a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 810264c:	2300      	movs	r3, #0
}
 810264e:	4618      	mov	r0, r3
 8102650:	3710      	adds	r7, #16
 8102652:	46bd      	mov	sp, r7
 8102654:	bd80      	pop	{r7, pc}
 8102656:	bf00      	nop

08102658 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8102658:	b580      	push	{r7, lr}
 810265a:	b08a      	sub	sp, #40	; 0x28
 810265c:	af00      	add	r7, sp, #0
 810265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8102660:	2300      	movs	r3, #0
 8102662:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8102664:	4b67      	ldr	r3, [pc, #412]	; (8102804 <HAL_DMA_IRQHandler+0x1ac>)
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	4a67      	ldr	r2, [pc, #412]	; (8102808 <HAL_DMA_IRQHandler+0x1b0>)
 810266a:	fba2 2303 	umull	r2, r3, r2, r3
 810266e:	0a9b      	lsrs	r3, r3, #10
 8102670:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102676:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810267c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810267e:	6a3b      	ldr	r3, [r7, #32]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8102684:	69fb      	ldr	r3, [r7, #28]
 8102686:	681b      	ldr	r3, [r3, #0]
 8102688:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810268a:	687b      	ldr	r3, [r7, #4]
 810268c:	681b      	ldr	r3, [r3, #0]
 810268e:	4a5f      	ldr	r2, [pc, #380]	; (810280c <HAL_DMA_IRQHandler+0x1b4>)
 8102690:	4293      	cmp	r3, r2
 8102692:	d04a      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 8102694:	687b      	ldr	r3, [r7, #4]
 8102696:	681b      	ldr	r3, [r3, #0]
 8102698:	4a5d      	ldr	r2, [pc, #372]	; (8102810 <HAL_DMA_IRQHandler+0x1b8>)
 810269a:	4293      	cmp	r3, r2
 810269c:	d045      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	681b      	ldr	r3, [r3, #0]
 81026a2:	4a5c      	ldr	r2, [pc, #368]	; (8102814 <HAL_DMA_IRQHandler+0x1bc>)
 81026a4:	4293      	cmp	r3, r2
 81026a6:	d040      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	681b      	ldr	r3, [r3, #0]
 81026ac:	4a5a      	ldr	r2, [pc, #360]	; (8102818 <HAL_DMA_IRQHandler+0x1c0>)
 81026ae:	4293      	cmp	r3, r2
 81026b0:	d03b      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	681b      	ldr	r3, [r3, #0]
 81026b6:	4a59      	ldr	r2, [pc, #356]	; (810281c <HAL_DMA_IRQHandler+0x1c4>)
 81026b8:	4293      	cmp	r3, r2
 81026ba:	d036      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	681b      	ldr	r3, [r3, #0]
 81026c0:	4a57      	ldr	r2, [pc, #348]	; (8102820 <HAL_DMA_IRQHandler+0x1c8>)
 81026c2:	4293      	cmp	r3, r2
 81026c4:	d031      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 81026c6:	687b      	ldr	r3, [r7, #4]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	4a56      	ldr	r2, [pc, #344]	; (8102824 <HAL_DMA_IRQHandler+0x1cc>)
 81026cc:	4293      	cmp	r3, r2
 81026ce:	d02c      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	681b      	ldr	r3, [r3, #0]
 81026d4:	4a54      	ldr	r2, [pc, #336]	; (8102828 <HAL_DMA_IRQHandler+0x1d0>)
 81026d6:	4293      	cmp	r3, r2
 81026d8:	d027      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 81026da:	687b      	ldr	r3, [r7, #4]
 81026dc:	681b      	ldr	r3, [r3, #0]
 81026de:	4a53      	ldr	r2, [pc, #332]	; (810282c <HAL_DMA_IRQHandler+0x1d4>)
 81026e0:	4293      	cmp	r3, r2
 81026e2:	d022      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 81026e4:	687b      	ldr	r3, [r7, #4]
 81026e6:	681b      	ldr	r3, [r3, #0]
 81026e8:	4a51      	ldr	r2, [pc, #324]	; (8102830 <HAL_DMA_IRQHandler+0x1d8>)
 81026ea:	4293      	cmp	r3, r2
 81026ec:	d01d      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	681b      	ldr	r3, [r3, #0]
 81026f2:	4a50      	ldr	r2, [pc, #320]	; (8102834 <HAL_DMA_IRQHandler+0x1dc>)
 81026f4:	4293      	cmp	r3, r2
 81026f6:	d018      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	681b      	ldr	r3, [r3, #0]
 81026fc:	4a4e      	ldr	r2, [pc, #312]	; (8102838 <HAL_DMA_IRQHandler+0x1e0>)
 81026fe:	4293      	cmp	r3, r2
 8102700:	d013      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 8102702:	687b      	ldr	r3, [r7, #4]
 8102704:	681b      	ldr	r3, [r3, #0]
 8102706:	4a4d      	ldr	r2, [pc, #308]	; (810283c <HAL_DMA_IRQHandler+0x1e4>)
 8102708:	4293      	cmp	r3, r2
 810270a:	d00e      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 810270c:	687b      	ldr	r3, [r7, #4]
 810270e:	681b      	ldr	r3, [r3, #0]
 8102710:	4a4b      	ldr	r2, [pc, #300]	; (8102840 <HAL_DMA_IRQHandler+0x1e8>)
 8102712:	4293      	cmp	r3, r2
 8102714:	d009      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 8102716:	687b      	ldr	r3, [r7, #4]
 8102718:	681b      	ldr	r3, [r3, #0]
 810271a:	4a4a      	ldr	r2, [pc, #296]	; (8102844 <HAL_DMA_IRQHandler+0x1ec>)
 810271c:	4293      	cmp	r3, r2
 810271e:	d004      	beq.n	810272a <HAL_DMA_IRQHandler+0xd2>
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	681b      	ldr	r3, [r3, #0]
 8102724:	4a48      	ldr	r2, [pc, #288]	; (8102848 <HAL_DMA_IRQHandler+0x1f0>)
 8102726:	4293      	cmp	r3, r2
 8102728:	d101      	bne.n	810272e <HAL_DMA_IRQHandler+0xd6>
 810272a:	2301      	movs	r3, #1
 810272c:	e000      	b.n	8102730 <HAL_DMA_IRQHandler+0xd8>
 810272e:	2300      	movs	r3, #0
 8102730:	2b00      	cmp	r3, #0
 8102732:	f000 842b 	beq.w	8102f8c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810273a:	f003 031f 	and.w	r3, r3, #31
 810273e:	2208      	movs	r2, #8
 8102740:	409a      	lsls	r2, r3
 8102742:	69bb      	ldr	r3, [r7, #24]
 8102744:	4013      	ands	r3, r2
 8102746:	2b00      	cmp	r3, #0
 8102748:	f000 80a2 	beq.w	8102890 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	4a2e      	ldr	r2, [pc, #184]	; (810280c <HAL_DMA_IRQHandler+0x1b4>)
 8102752:	4293      	cmp	r3, r2
 8102754:	d04a      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	681b      	ldr	r3, [r3, #0]
 810275a:	4a2d      	ldr	r2, [pc, #180]	; (8102810 <HAL_DMA_IRQHandler+0x1b8>)
 810275c:	4293      	cmp	r3, r2
 810275e:	d045      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 8102760:	687b      	ldr	r3, [r7, #4]
 8102762:	681b      	ldr	r3, [r3, #0]
 8102764:	4a2b      	ldr	r2, [pc, #172]	; (8102814 <HAL_DMA_IRQHandler+0x1bc>)
 8102766:	4293      	cmp	r3, r2
 8102768:	d040      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	681b      	ldr	r3, [r3, #0]
 810276e:	4a2a      	ldr	r2, [pc, #168]	; (8102818 <HAL_DMA_IRQHandler+0x1c0>)
 8102770:	4293      	cmp	r3, r2
 8102772:	d03b      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	681b      	ldr	r3, [r3, #0]
 8102778:	4a28      	ldr	r2, [pc, #160]	; (810281c <HAL_DMA_IRQHandler+0x1c4>)
 810277a:	4293      	cmp	r3, r2
 810277c:	d036      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 810277e:	687b      	ldr	r3, [r7, #4]
 8102780:	681b      	ldr	r3, [r3, #0]
 8102782:	4a27      	ldr	r2, [pc, #156]	; (8102820 <HAL_DMA_IRQHandler+0x1c8>)
 8102784:	4293      	cmp	r3, r2
 8102786:	d031      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	681b      	ldr	r3, [r3, #0]
 810278c:	4a25      	ldr	r2, [pc, #148]	; (8102824 <HAL_DMA_IRQHandler+0x1cc>)
 810278e:	4293      	cmp	r3, r2
 8102790:	d02c      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 8102792:	687b      	ldr	r3, [r7, #4]
 8102794:	681b      	ldr	r3, [r3, #0]
 8102796:	4a24      	ldr	r2, [pc, #144]	; (8102828 <HAL_DMA_IRQHandler+0x1d0>)
 8102798:	4293      	cmp	r3, r2
 810279a:	d027      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	681b      	ldr	r3, [r3, #0]
 81027a0:	4a22      	ldr	r2, [pc, #136]	; (810282c <HAL_DMA_IRQHandler+0x1d4>)
 81027a2:	4293      	cmp	r3, r2
 81027a4:	d022      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 81027a6:	687b      	ldr	r3, [r7, #4]
 81027a8:	681b      	ldr	r3, [r3, #0]
 81027aa:	4a21      	ldr	r2, [pc, #132]	; (8102830 <HAL_DMA_IRQHandler+0x1d8>)
 81027ac:	4293      	cmp	r3, r2
 81027ae:	d01d      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	4a1f      	ldr	r2, [pc, #124]	; (8102834 <HAL_DMA_IRQHandler+0x1dc>)
 81027b6:	4293      	cmp	r3, r2
 81027b8:	d018      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	681b      	ldr	r3, [r3, #0]
 81027be:	4a1e      	ldr	r2, [pc, #120]	; (8102838 <HAL_DMA_IRQHandler+0x1e0>)
 81027c0:	4293      	cmp	r3, r2
 81027c2:	d013      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 81027c4:	687b      	ldr	r3, [r7, #4]
 81027c6:	681b      	ldr	r3, [r3, #0]
 81027c8:	4a1c      	ldr	r2, [pc, #112]	; (810283c <HAL_DMA_IRQHandler+0x1e4>)
 81027ca:	4293      	cmp	r3, r2
 81027cc:	d00e      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 81027ce:	687b      	ldr	r3, [r7, #4]
 81027d0:	681b      	ldr	r3, [r3, #0]
 81027d2:	4a1b      	ldr	r2, [pc, #108]	; (8102840 <HAL_DMA_IRQHandler+0x1e8>)
 81027d4:	4293      	cmp	r3, r2
 81027d6:	d009      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	681b      	ldr	r3, [r3, #0]
 81027dc:	4a19      	ldr	r2, [pc, #100]	; (8102844 <HAL_DMA_IRQHandler+0x1ec>)
 81027de:	4293      	cmp	r3, r2
 81027e0:	d004      	beq.n	81027ec <HAL_DMA_IRQHandler+0x194>
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	681b      	ldr	r3, [r3, #0]
 81027e6:	4a18      	ldr	r2, [pc, #96]	; (8102848 <HAL_DMA_IRQHandler+0x1f0>)
 81027e8:	4293      	cmp	r3, r2
 81027ea:	d12f      	bne.n	810284c <HAL_DMA_IRQHandler+0x1f4>
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	681b      	ldr	r3, [r3, #0]
 81027f0:	681b      	ldr	r3, [r3, #0]
 81027f2:	f003 0304 	and.w	r3, r3, #4
 81027f6:	2b00      	cmp	r3, #0
 81027f8:	bf14      	ite	ne
 81027fa:	2301      	movne	r3, #1
 81027fc:	2300      	moveq	r3, #0
 81027fe:	b2db      	uxtb	r3, r3
 8102800:	e02e      	b.n	8102860 <HAL_DMA_IRQHandler+0x208>
 8102802:	bf00      	nop
 8102804:	10000000 	.word	0x10000000
 8102808:	1b4e81b5 	.word	0x1b4e81b5
 810280c:	40020010 	.word	0x40020010
 8102810:	40020028 	.word	0x40020028
 8102814:	40020040 	.word	0x40020040
 8102818:	40020058 	.word	0x40020058
 810281c:	40020070 	.word	0x40020070
 8102820:	40020088 	.word	0x40020088
 8102824:	400200a0 	.word	0x400200a0
 8102828:	400200b8 	.word	0x400200b8
 810282c:	40020410 	.word	0x40020410
 8102830:	40020428 	.word	0x40020428
 8102834:	40020440 	.word	0x40020440
 8102838:	40020458 	.word	0x40020458
 810283c:	40020470 	.word	0x40020470
 8102840:	40020488 	.word	0x40020488
 8102844:	400204a0 	.word	0x400204a0
 8102848:	400204b8 	.word	0x400204b8
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	681b      	ldr	r3, [r3, #0]
 8102852:	f003 0308 	and.w	r3, r3, #8
 8102856:	2b00      	cmp	r3, #0
 8102858:	bf14      	ite	ne
 810285a:	2301      	movne	r3, #1
 810285c:	2300      	moveq	r3, #0
 810285e:	b2db      	uxtb	r3, r3
 8102860:	2b00      	cmp	r3, #0
 8102862:	d015      	beq.n	8102890 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	681b      	ldr	r3, [r3, #0]
 8102868:	681a      	ldr	r2, [r3, #0]
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	681b      	ldr	r3, [r3, #0]
 810286e:	f022 0204 	bic.w	r2, r2, #4
 8102872:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102878:	f003 031f 	and.w	r3, r3, #31
 810287c:	2208      	movs	r2, #8
 810287e:	409a      	lsls	r2, r3
 8102880:	6a3b      	ldr	r3, [r7, #32]
 8102882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102888:	f043 0201 	orr.w	r2, r3, #1
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102894:	f003 031f 	and.w	r3, r3, #31
 8102898:	69ba      	ldr	r2, [r7, #24]
 810289a:	fa22 f303 	lsr.w	r3, r2, r3
 810289e:	f003 0301 	and.w	r3, r3, #1
 81028a2:	2b00      	cmp	r3, #0
 81028a4:	d06e      	beq.n	8102984 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 81028a6:	687b      	ldr	r3, [r7, #4]
 81028a8:	681b      	ldr	r3, [r3, #0]
 81028aa:	4a69      	ldr	r2, [pc, #420]	; (8102a50 <HAL_DMA_IRQHandler+0x3f8>)
 81028ac:	4293      	cmp	r3, r2
 81028ae:	d04a      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	681b      	ldr	r3, [r3, #0]
 81028b4:	4a67      	ldr	r2, [pc, #412]	; (8102a54 <HAL_DMA_IRQHandler+0x3fc>)
 81028b6:	4293      	cmp	r3, r2
 81028b8:	d045      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	681b      	ldr	r3, [r3, #0]
 81028be:	4a66      	ldr	r2, [pc, #408]	; (8102a58 <HAL_DMA_IRQHandler+0x400>)
 81028c0:	4293      	cmp	r3, r2
 81028c2:	d040      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	681b      	ldr	r3, [r3, #0]
 81028c8:	4a64      	ldr	r2, [pc, #400]	; (8102a5c <HAL_DMA_IRQHandler+0x404>)
 81028ca:	4293      	cmp	r3, r2
 81028cc:	d03b      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	681b      	ldr	r3, [r3, #0]
 81028d2:	4a63      	ldr	r2, [pc, #396]	; (8102a60 <HAL_DMA_IRQHandler+0x408>)
 81028d4:	4293      	cmp	r3, r2
 81028d6:	d036      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 81028d8:	687b      	ldr	r3, [r7, #4]
 81028da:	681b      	ldr	r3, [r3, #0]
 81028dc:	4a61      	ldr	r2, [pc, #388]	; (8102a64 <HAL_DMA_IRQHandler+0x40c>)
 81028de:	4293      	cmp	r3, r2
 81028e0:	d031      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 81028e2:	687b      	ldr	r3, [r7, #4]
 81028e4:	681b      	ldr	r3, [r3, #0]
 81028e6:	4a60      	ldr	r2, [pc, #384]	; (8102a68 <HAL_DMA_IRQHandler+0x410>)
 81028e8:	4293      	cmp	r3, r2
 81028ea:	d02c      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	681b      	ldr	r3, [r3, #0]
 81028f0:	4a5e      	ldr	r2, [pc, #376]	; (8102a6c <HAL_DMA_IRQHandler+0x414>)
 81028f2:	4293      	cmp	r3, r2
 81028f4:	d027      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 81028f6:	687b      	ldr	r3, [r7, #4]
 81028f8:	681b      	ldr	r3, [r3, #0]
 81028fa:	4a5d      	ldr	r2, [pc, #372]	; (8102a70 <HAL_DMA_IRQHandler+0x418>)
 81028fc:	4293      	cmp	r3, r2
 81028fe:	d022      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 8102900:	687b      	ldr	r3, [r7, #4]
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	4a5b      	ldr	r2, [pc, #364]	; (8102a74 <HAL_DMA_IRQHandler+0x41c>)
 8102906:	4293      	cmp	r3, r2
 8102908:	d01d      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	681b      	ldr	r3, [r3, #0]
 810290e:	4a5a      	ldr	r2, [pc, #360]	; (8102a78 <HAL_DMA_IRQHandler+0x420>)
 8102910:	4293      	cmp	r3, r2
 8102912:	d018      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	681b      	ldr	r3, [r3, #0]
 8102918:	4a58      	ldr	r2, [pc, #352]	; (8102a7c <HAL_DMA_IRQHandler+0x424>)
 810291a:	4293      	cmp	r3, r2
 810291c:	d013      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 810291e:	687b      	ldr	r3, [r7, #4]
 8102920:	681b      	ldr	r3, [r3, #0]
 8102922:	4a57      	ldr	r2, [pc, #348]	; (8102a80 <HAL_DMA_IRQHandler+0x428>)
 8102924:	4293      	cmp	r3, r2
 8102926:	d00e      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 8102928:	687b      	ldr	r3, [r7, #4]
 810292a:	681b      	ldr	r3, [r3, #0]
 810292c:	4a55      	ldr	r2, [pc, #340]	; (8102a84 <HAL_DMA_IRQHandler+0x42c>)
 810292e:	4293      	cmp	r3, r2
 8102930:	d009      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	681b      	ldr	r3, [r3, #0]
 8102936:	4a54      	ldr	r2, [pc, #336]	; (8102a88 <HAL_DMA_IRQHandler+0x430>)
 8102938:	4293      	cmp	r3, r2
 810293a:	d004      	beq.n	8102946 <HAL_DMA_IRQHandler+0x2ee>
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	681b      	ldr	r3, [r3, #0]
 8102940:	4a52      	ldr	r2, [pc, #328]	; (8102a8c <HAL_DMA_IRQHandler+0x434>)
 8102942:	4293      	cmp	r3, r2
 8102944:	d10a      	bne.n	810295c <HAL_DMA_IRQHandler+0x304>
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	681b      	ldr	r3, [r3, #0]
 810294a:	695b      	ldr	r3, [r3, #20]
 810294c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102950:	2b00      	cmp	r3, #0
 8102952:	bf14      	ite	ne
 8102954:	2301      	movne	r3, #1
 8102956:	2300      	moveq	r3, #0
 8102958:	b2db      	uxtb	r3, r3
 810295a:	e003      	b.n	8102964 <HAL_DMA_IRQHandler+0x30c>
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	681b      	ldr	r3, [r3, #0]
 8102962:	2300      	movs	r3, #0
 8102964:	2b00      	cmp	r3, #0
 8102966:	d00d      	beq.n	8102984 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810296c:	f003 031f 	and.w	r3, r3, #31
 8102970:	2201      	movs	r2, #1
 8102972:	409a      	lsls	r2, r3
 8102974:	6a3b      	ldr	r3, [r7, #32]
 8102976:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810297c:	f043 0202 	orr.w	r2, r3, #2
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102988:	f003 031f 	and.w	r3, r3, #31
 810298c:	2204      	movs	r2, #4
 810298e:	409a      	lsls	r2, r3
 8102990:	69bb      	ldr	r3, [r7, #24]
 8102992:	4013      	ands	r3, r2
 8102994:	2b00      	cmp	r3, #0
 8102996:	f000 808f 	beq.w	8102ab8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	4a2c      	ldr	r2, [pc, #176]	; (8102a50 <HAL_DMA_IRQHandler+0x3f8>)
 81029a0:	4293      	cmp	r3, r2
 81029a2:	d04a      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 81029a4:	687b      	ldr	r3, [r7, #4]
 81029a6:	681b      	ldr	r3, [r3, #0]
 81029a8:	4a2a      	ldr	r2, [pc, #168]	; (8102a54 <HAL_DMA_IRQHandler+0x3fc>)
 81029aa:	4293      	cmp	r3, r2
 81029ac:	d045      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	4a29      	ldr	r2, [pc, #164]	; (8102a58 <HAL_DMA_IRQHandler+0x400>)
 81029b4:	4293      	cmp	r3, r2
 81029b6:	d040      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	681b      	ldr	r3, [r3, #0]
 81029bc:	4a27      	ldr	r2, [pc, #156]	; (8102a5c <HAL_DMA_IRQHandler+0x404>)
 81029be:	4293      	cmp	r3, r2
 81029c0:	d03b      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 81029c2:	687b      	ldr	r3, [r7, #4]
 81029c4:	681b      	ldr	r3, [r3, #0]
 81029c6:	4a26      	ldr	r2, [pc, #152]	; (8102a60 <HAL_DMA_IRQHandler+0x408>)
 81029c8:	4293      	cmp	r3, r2
 81029ca:	d036      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 81029cc:	687b      	ldr	r3, [r7, #4]
 81029ce:	681b      	ldr	r3, [r3, #0]
 81029d0:	4a24      	ldr	r2, [pc, #144]	; (8102a64 <HAL_DMA_IRQHandler+0x40c>)
 81029d2:	4293      	cmp	r3, r2
 81029d4:	d031      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 81029d6:	687b      	ldr	r3, [r7, #4]
 81029d8:	681b      	ldr	r3, [r3, #0]
 81029da:	4a23      	ldr	r2, [pc, #140]	; (8102a68 <HAL_DMA_IRQHandler+0x410>)
 81029dc:	4293      	cmp	r3, r2
 81029de:	d02c      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 81029e0:	687b      	ldr	r3, [r7, #4]
 81029e2:	681b      	ldr	r3, [r3, #0]
 81029e4:	4a21      	ldr	r2, [pc, #132]	; (8102a6c <HAL_DMA_IRQHandler+0x414>)
 81029e6:	4293      	cmp	r3, r2
 81029e8:	d027      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	681b      	ldr	r3, [r3, #0]
 81029ee:	4a20      	ldr	r2, [pc, #128]	; (8102a70 <HAL_DMA_IRQHandler+0x418>)
 81029f0:	4293      	cmp	r3, r2
 81029f2:	d022      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	4a1e      	ldr	r2, [pc, #120]	; (8102a74 <HAL_DMA_IRQHandler+0x41c>)
 81029fa:	4293      	cmp	r3, r2
 81029fc:	d01d      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 81029fe:	687b      	ldr	r3, [r7, #4]
 8102a00:	681b      	ldr	r3, [r3, #0]
 8102a02:	4a1d      	ldr	r2, [pc, #116]	; (8102a78 <HAL_DMA_IRQHandler+0x420>)
 8102a04:	4293      	cmp	r3, r2
 8102a06:	d018      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 8102a08:	687b      	ldr	r3, [r7, #4]
 8102a0a:	681b      	ldr	r3, [r3, #0]
 8102a0c:	4a1b      	ldr	r2, [pc, #108]	; (8102a7c <HAL_DMA_IRQHandler+0x424>)
 8102a0e:	4293      	cmp	r3, r2
 8102a10:	d013      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	681b      	ldr	r3, [r3, #0]
 8102a16:	4a1a      	ldr	r2, [pc, #104]	; (8102a80 <HAL_DMA_IRQHandler+0x428>)
 8102a18:	4293      	cmp	r3, r2
 8102a1a:	d00e      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	681b      	ldr	r3, [r3, #0]
 8102a20:	4a18      	ldr	r2, [pc, #96]	; (8102a84 <HAL_DMA_IRQHandler+0x42c>)
 8102a22:	4293      	cmp	r3, r2
 8102a24:	d009      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	4a17      	ldr	r2, [pc, #92]	; (8102a88 <HAL_DMA_IRQHandler+0x430>)
 8102a2c:	4293      	cmp	r3, r2
 8102a2e:	d004      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x3e2>
 8102a30:	687b      	ldr	r3, [r7, #4]
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	4a15      	ldr	r2, [pc, #84]	; (8102a8c <HAL_DMA_IRQHandler+0x434>)
 8102a36:	4293      	cmp	r3, r2
 8102a38:	d12a      	bne.n	8102a90 <HAL_DMA_IRQHandler+0x438>
 8102a3a:	687b      	ldr	r3, [r7, #4]
 8102a3c:	681b      	ldr	r3, [r3, #0]
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	f003 0302 	and.w	r3, r3, #2
 8102a44:	2b00      	cmp	r3, #0
 8102a46:	bf14      	ite	ne
 8102a48:	2301      	movne	r3, #1
 8102a4a:	2300      	moveq	r3, #0
 8102a4c:	b2db      	uxtb	r3, r3
 8102a4e:	e023      	b.n	8102a98 <HAL_DMA_IRQHandler+0x440>
 8102a50:	40020010 	.word	0x40020010
 8102a54:	40020028 	.word	0x40020028
 8102a58:	40020040 	.word	0x40020040
 8102a5c:	40020058 	.word	0x40020058
 8102a60:	40020070 	.word	0x40020070
 8102a64:	40020088 	.word	0x40020088
 8102a68:	400200a0 	.word	0x400200a0
 8102a6c:	400200b8 	.word	0x400200b8
 8102a70:	40020410 	.word	0x40020410
 8102a74:	40020428 	.word	0x40020428
 8102a78:	40020440 	.word	0x40020440
 8102a7c:	40020458 	.word	0x40020458
 8102a80:	40020470 	.word	0x40020470
 8102a84:	40020488 	.word	0x40020488
 8102a88:	400204a0 	.word	0x400204a0
 8102a8c:	400204b8 	.word	0x400204b8
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	2300      	movs	r3, #0
 8102a98:	2b00      	cmp	r3, #0
 8102a9a:	d00d      	beq.n	8102ab8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102aa0:	f003 031f 	and.w	r3, r3, #31
 8102aa4:	2204      	movs	r2, #4
 8102aa6:	409a      	lsls	r2, r3
 8102aa8:	6a3b      	ldr	r3, [r7, #32]
 8102aaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ab0:	f043 0204 	orr.w	r2, r3, #4
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102abc:	f003 031f 	and.w	r3, r3, #31
 8102ac0:	2210      	movs	r2, #16
 8102ac2:	409a      	lsls	r2, r3
 8102ac4:	69bb      	ldr	r3, [r7, #24]
 8102ac6:	4013      	ands	r3, r2
 8102ac8:	2b00      	cmp	r3, #0
 8102aca:	f000 80a6 	beq.w	8102c1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	681b      	ldr	r3, [r3, #0]
 8102ad2:	4a85      	ldr	r2, [pc, #532]	; (8102ce8 <HAL_DMA_IRQHandler+0x690>)
 8102ad4:	4293      	cmp	r3, r2
 8102ad6:	d04a      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	681b      	ldr	r3, [r3, #0]
 8102adc:	4a83      	ldr	r2, [pc, #524]	; (8102cec <HAL_DMA_IRQHandler+0x694>)
 8102ade:	4293      	cmp	r3, r2
 8102ae0:	d045      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	681b      	ldr	r3, [r3, #0]
 8102ae6:	4a82      	ldr	r2, [pc, #520]	; (8102cf0 <HAL_DMA_IRQHandler+0x698>)
 8102ae8:	4293      	cmp	r3, r2
 8102aea:	d040      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	681b      	ldr	r3, [r3, #0]
 8102af0:	4a80      	ldr	r2, [pc, #512]	; (8102cf4 <HAL_DMA_IRQHandler+0x69c>)
 8102af2:	4293      	cmp	r3, r2
 8102af4:	d03b      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102af6:	687b      	ldr	r3, [r7, #4]
 8102af8:	681b      	ldr	r3, [r3, #0]
 8102afa:	4a7f      	ldr	r2, [pc, #508]	; (8102cf8 <HAL_DMA_IRQHandler+0x6a0>)
 8102afc:	4293      	cmp	r3, r2
 8102afe:	d036      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b00:	687b      	ldr	r3, [r7, #4]
 8102b02:	681b      	ldr	r3, [r3, #0]
 8102b04:	4a7d      	ldr	r2, [pc, #500]	; (8102cfc <HAL_DMA_IRQHandler+0x6a4>)
 8102b06:	4293      	cmp	r3, r2
 8102b08:	d031      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	681b      	ldr	r3, [r3, #0]
 8102b0e:	4a7c      	ldr	r2, [pc, #496]	; (8102d00 <HAL_DMA_IRQHandler+0x6a8>)
 8102b10:	4293      	cmp	r3, r2
 8102b12:	d02c      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b14:	687b      	ldr	r3, [r7, #4]
 8102b16:	681b      	ldr	r3, [r3, #0]
 8102b18:	4a7a      	ldr	r2, [pc, #488]	; (8102d04 <HAL_DMA_IRQHandler+0x6ac>)
 8102b1a:	4293      	cmp	r3, r2
 8102b1c:	d027      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b1e:	687b      	ldr	r3, [r7, #4]
 8102b20:	681b      	ldr	r3, [r3, #0]
 8102b22:	4a79      	ldr	r2, [pc, #484]	; (8102d08 <HAL_DMA_IRQHandler+0x6b0>)
 8102b24:	4293      	cmp	r3, r2
 8102b26:	d022      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	681b      	ldr	r3, [r3, #0]
 8102b2c:	4a77      	ldr	r2, [pc, #476]	; (8102d0c <HAL_DMA_IRQHandler+0x6b4>)
 8102b2e:	4293      	cmp	r3, r2
 8102b30:	d01d      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b32:	687b      	ldr	r3, [r7, #4]
 8102b34:	681b      	ldr	r3, [r3, #0]
 8102b36:	4a76      	ldr	r2, [pc, #472]	; (8102d10 <HAL_DMA_IRQHandler+0x6b8>)
 8102b38:	4293      	cmp	r3, r2
 8102b3a:	d018      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b3c:	687b      	ldr	r3, [r7, #4]
 8102b3e:	681b      	ldr	r3, [r3, #0]
 8102b40:	4a74      	ldr	r2, [pc, #464]	; (8102d14 <HAL_DMA_IRQHandler+0x6bc>)
 8102b42:	4293      	cmp	r3, r2
 8102b44:	d013      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	4a73      	ldr	r2, [pc, #460]	; (8102d18 <HAL_DMA_IRQHandler+0x6c0>)
 8102b4c:	4293      	cmp	r3, r2
 8102b4e:	d00e      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	681b      	ldr	r3, [r3, #0]
 8102b54:	4a71      	ldr	r2, [pc, #452]	; (8102d1c <HAL_DMA_IRQHandler+0x6c4>)
 8102b56:	4293      	cmp	r3, r2
 8102b58:	d009      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	681b      	ldr	r3, [r3, #0]
 8102b5e:	4a70      	ldr	r2, [pc, #448]	; (8102d20 <HAL_DMA_IRQHandler+0x6c8>)
 8102b60:	4293      	cmp	r3, r2
 8102b62:	d004      	beq.n	8102b6e <HAL_DMA_IRQHandler+0x516>
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	4a6e      	ldr	r2, [pc, #440]	; (8102d24 <HAL_DMA_IRQHandler+0x6cc>)
 8102b6a:	4293      	cmp	r3, r2
 8102b6c:	d10a      	bne.n	8102b84 <HAL_DMA_IRQHandler+0x52c>
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	681b      	ldr	r3, [r3, #0]
 8102b72:	681b      	ldr	r3, [r3, #0]
 8102b74:	f003 0308 	and.w	r3, r3, #8
 8102b78:	2b00      	cmp	r3, #0
 8102b7a:	bf14      	ite	ne
 8102b7c:	2301      	movne	r3, #1
 8102b7e:	2300      	moveq	r3, #0
 8102b80:	b2db      	uxtb	r3, r3
 8102b82:	e009      	b.n	8102b98 <HAL_DMA_IRQHandler+0x540>
 8102b84:	687b      	ldr	r3, [r7, #4]
 8102b86:	681b      	ldr	r3, [r3, #0]
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	f003 0304 	and.w	r3, r3, #4
 8102b8e:	2b00      	cmp	r3, #0
 8102b90:	bf14      	ite	ne
 8102b92:	2301      	movne	r3, #1
 8102b94:	2300      	moveq	r3, #0
 8102b96:	b2db      	uxtb	r3, r3
 8102b98:	2b00      	cmp	r3, #0
 8102b9a:	d03e      	beq.n	8102c1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ba0:	f003 031f 	and.w	r3, r3, #31
 8102ba4:	2210      	movs	r2, #16
 8102ba6:	409a      	lsls	r2, r3
 8102ba8:	6a3b      	ldr	r3, [r7, #32]
 8102baa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102bac:	687b      	ldr	r3, [r7, #4]
 8102bae:	681b      	ldr	r3, [r3, #0]
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102bb6:	2b00      	cmp	r3, #0
 8102bb8:	d018      	beq.n	8102bec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102bba:	687b      	ldr	r3, [r7, #4]
 8102bbc:	681b      	ldr	r3, [r3, #0]
 8102bbe:	681b      	ldr	r3, [r3, #0]
 8102bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102bc4:	2b00      	cmp	r3, #0
 8102bc6:	d108      	bne.n	8102bda <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102bcc:	2b00      	cmp	r3, #0
 8102bce:	d024      	beq.n	8102c1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8102bd0:	687b      	ldr	r3, [r7, #4]
 8102bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102bd4:	6878      	ldr	r0, [r7, #4]
 8102bd6:	4798      	blx	r3
 8102bd8:	e01f      	b.n	8102c1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102bde:	2b00      	cmp	r3, #0
 8102be0:	d01b      	beq.n	8102c1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102be6:	6878      	ldr	r0, [r7, #4]
 8102be8:	4798      	blx	r3
 8102bea:	e016      	b.n	8102c1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102bec:	687b      	ldr	r3, [r7, #4]
 8102bee:	681b      	ldr	r3, [r3, #0]
 8102bf0:	681b      	ldr	r3, [r3, #0]
 8102bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102bf6:	2b00      	cmp	r3, #0
 8102bf8:	d107      	bne.n	8102c0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	681b      	ldr	r3, [r3, #0]
 8102bfe:	681a      	ldr	r2, [r3, #0]
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	681b      	ldr	r3, [r3, #0]
 8102c04:	f022 0208 	bic.w	r2, r2, #8
 8102c08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c0e:	2b00      	cmp	r3, #0
 8102c10:	d003      	beq.n	8102c1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c16:	6878      	ldr	r0, [r7, #4]
 8102c18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c1e:	f003 031f 	and.w	r3, r3, #31
 8102c22:	2220      	movs	r2, #32
 8102c24:	409a      	lsls	r2, r3
 8102c26:	69bb      	ldr	r3, [r7, #24]
 8102c28:	4013      	ands	r3, r2
 8102c2a:	2b00      	cmp	r3, #0
 8102c2c:	f000 8110 	beq.w	8102e50 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	4a2c      	ldr	r2, [pc, #176]	; (8102ce8 <HAL_DMA_IRQHandler+0x690>)
 8102c36:	4293      	cmp	r3, r2
 8102c38:	d04a      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c3a:	687b      	ldr	r3, [r7, #4]
 8102c3c:	681b      	ldr	r3, [r3, #0]
 8102c3e:	4a2b      	ldr	r2, [pc, #172]	; (8102cec <HAL_DMA_IRQHandler+0x694>)
 8102c40:	4293      	cmp	r3, r2
 8102c42:	d045      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	681b      	ldr	r3, [r3, #0]
 8102c48:	4a29      	ldr	r2, [pc, #164]	; (8102cf0 <HAL_DMA_IRQHandler+0x698>)
 8102c4a:	4293      	cmp	r3, r2
 8102c4c:	d040      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	681b      	ldr	r3, [r3, #0]
 8102c52:	4a28      	ldr	r2, [pc, #160]	; (8102cf4 <HAL_DMA_IRQHandler+0x69c>)
 8102c54:	4293      	cmp	r3, r2
 8102c56:	d03b      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c58:	687b      	ldr	r3, [r7, #4]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	4a26      	ldr	r2, [pc, #152]	; (8102cf8 <HAL_DMA_IRQHandler+0x6a0>)
 8102c5e:	4293      	cmp	r3, r2
 8102c60:	d036      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	4a25      	ldr	r2, [pc, #148]	; (8102cfc <HAL_DMA_IRQHandler+0x6a4>)
 8102c68:	4293      	cmp	r3, r2
 8102c6a:	d031      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c6c:	687b      	ldr	r3, [r7, #4]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	4a23      	ldr	r2, [pc, #140]	; (8102d00 <HAL_DMA_IRQHandler+0x6a8>)
 8102c72:	4293      	cmp	r3, r2
 8102c74:	d02c      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	4a22      	ldr	r2, [pc, #136]	; (8102d04 <HAL_DMA_IRQHandler+0x6ac>)
 8102c7c:	4293      	cmp	r3, r2
 8102c7e:	d027      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c80:	687b      	ldr	r3, [r7, #4]
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	4a20      	ldr	r2, [pc, #128]	; (8102d08 <HAL_DMA_IRQHandler+0x6b0>)
 8102c86:	4293      	cmp	r3, r2
 8102c88:	d022      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c8a:	687b      	ldr	r3, [r7, #4]
 8102c8c:	681b      	ldr	r3, [r3, #0]
 8102c8e:	4a1f      	ldr	r2, [pc, #124]	; (8102d0c <HAL_DMA_IRQHandler+0x6b4>)
 8102c90:	4293      	cmp	r3, r2
 8102c92:	d01d      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	681b      	ldr	r3, [r3, #0]
 8102c98:	4a1d      	ldr	r2, [pc, #116]	; (8102d10 <HAL_DMA_IRQHandler+0x6b8>)
 8102c9a:	4293      	cmp	r3, r2
 8102c9c:	d018      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	681b      	ldr	r3, [r3, #0]
 8102ca2:	4a1c      	ldr	r2, [pc, #112]	; (8102d14 <HAL_DMA_IRQHandler+0x6bc>)
 8102ca4:	4293      	cmp	r3, r2
 8102ca6:	d013      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	4a1a      	ldr	r2, [pc, #104]	; (8102d18 <HAL_DMA_IRQHandler+0x6c0>)
 8102cae:	4293      	cmp	r3, r2
 8102cb0:	d00e      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	4a19      	ldr	r2, [pc, #100]	; (8102d1c <HAL_DMA_IRQHandler+0x6c4>)
 8102cb8:	4293      	cmp	r3, r2
 8102cba:	d009      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	4a17      	ldr	r2, [pc, #92]	; (8102d20 <HAL_DMA_IRQHandler+0x6c8>)
 8102cc2:	4293      	cmp	r3, r2
 8102cc4:	d004      	beq.n	8102cd0 <HAL_DMA_IRQHandler+0x678>
 8102cc6:	687b      	ldr	r3, [r7, #4]
 8102cc8:	681b      	ldr	r3, [r3, #0]
 8102cca:	4a16      	ldr	r2, [pc, #88]	; (8102d24 <HAL_DMA_IRQHandler+0x6cc>)
 8102ccc:	4293      	cmp	r3, r2
 8102cce:	d12b      	bne.n	8102d28 <HAL_DMA_IRQHandler+0x6d0>
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	681b      	ldr	r3, [r3, #0]
 8102cd6:	f003 0310 	and.w	r3, r3, #16
 8102cda:	2b00      	cmp	r3, #0
 8102cdc:	bf14      	ite	ne
 8102cde:	2301      	movne	r3, #1
 8102ce0:	2300      	moveq	r3, #0
 8102ce2:	b2db      	uxtb	r3, r3
 8102ce4:	e02a      	b.n	8102d3c <HAL_DMA_IRQHandler+0x6e4>
 8102ce6:	bf00      	nop
 8102ce8:	40020010 	.word	0x40020010
 8102cec:	40020028 	.word	0x40020028
 8102cf0:	40020040 	.word	0x40020040
 8102cf4:	40020058 	.word	0x40020058
 8102cf8:	40020070 	.word	0x40020070
 8102cfc:	40020088 	.word	0x40020088
 8102d00:	400200a0 	.word	0x400200a0
 8102d04:	400200b8 	.word	0x400200b8
 8102d08:	40020410 	.word	0x40020410
 8102d0c:	40020428 	.word	0x40020428
 8102d10:	40020440 	.word	0x40020440
 8102d14:	40020458 	.word	0x40020458
 8102d18:	40020470 	.word	0x40020470
 8102d1c:	40020488 	.word	0x40020488
 8102d20:	400204a0 	.word	0x400204a0
 8102d24:	400204b8 	.word	0x400204b8
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	681b      	ldr	r3, [r3, #0]
 8102d2e:	f003 0302 	and.w	r3, r3, #2
 8102d32:	2b00      	cmp	r3, #0
 8102d34:	bf14      	ite	ne
 8102d36:	2301      	movne	r3, #1
 8102d38:	2300      	moveq	r3, #0
 8102d3a:	b2db      	uxtb	r3, r3
 8102d3c:	2b00      	cmp	r3, #0
 8102d3e:	f000 8087 	beq.w	8102e50 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102d46:	f003 031f 	and.w	r3, r3, #31
 8102d4a:	2220      	movs	r2, #32
 8102d4c:	409a      	lsls	r2, r3
 8102d4e:	6a3b      	ldr	r3, [r7, #32]
 8102d50:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8102d52:	687b      	ldr	r3, [r7, #4]
 8102d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102d58:	b2db      	uxtb	r3, r3
 8102d5a:	2b04      	cmp	r3, #4
 8102d5c:	d139      	bne.n	8102dd2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	681a      	ldr	r2, [r3, #0]
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	681b      	ldr	r3, [r3, #0]
 8102d68:	f022 0216 	bic.w	r2, r2, #22
 8102d6c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	681b      	ldr	r3, [r3, #0]
 8102d72:	695a      	ldr	r2, [r3, #20]
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102d7c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d82:	2b00      	cmp	r3, #0
 8102d84:	d103      	bne.n	8102d8e <HAL_DMA_IRQHandler+0x736>
 8102d86:	687b      	ldr	r3, [r7, #4]
 8102d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102d8a:	2b00      	cmp	r3, #0
 8102d8c:	d007      	beq.n	8102d9e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102d8e:	687b      	ldr	r3, [r7, #4]
 8102d90:	681b      	ldr	r3, [r3, #0]
 8102d92:	681a      	ldr	r2, [r3, #0]
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	f022 0208 	bic.w	r2, r2, #8
 8102d9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102d9e:	687b      	ldr	r3, [r7, #4]
 8102da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102da2:	f003 031f 	and.w	r3, r3, #31
 8102da6:	223f      	movs	r2, #63	; 0x3f
 8102da8:	409a      	lsls	r2, r3
 8102daa:	6a3b      	ldr	r3, [r7, #32]
 8102dac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	2201      	movs	r2, #1
 8102db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	2200      	movs	r2, #0
 8102dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102dc2:	2b00      	cmp	r3, #0
 8102dc4:	f000 834a 	beq.w	810345c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102dcc:	6878      	ldr	r0, [r7, #4]
 8102dce:	4798      	blx	r3
          }
          return;
 8102dd0:	e344      	b.n	810345c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	681b      	ldr	r3, [r3, #0]
 8102dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102ddc:	2b00      	cmp	r3, #0
 8102dde:	d018      	beq.n	8102e12 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	681b      	ldr	r3, [r3, #0]
 8102de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102dea:	2b00      	cmp	r3, #0
 8102dec:	d108      	bne.n	8102e00 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102df2:	2b00      	cmp	r3, #0
 8102df4:	d02c      	beq.n	8102e50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102dfa:	6878      	ldr	r0, [r7, #4]
 8102dfc:	4798      	blx	r3
 8102dfe:	e027      	b.n	8102e50 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8102e00:	687b      	ldr	r3, [r7, #4]
 8102e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102e04:	2b00      	cmp	r3, #0
 8102e06:	d023      	beq.n	8102e50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102e0c:	6878      	ldr	r0, [r7, #4]
 8102e0e:	4798      	blx	r3
 8102e10:	e01e      	b.n	8102e50 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	681b      	ldr	r3, [r3, #0]
 8102e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102e1c:	2b00      	cmp	r3, #0
 8102e1e:	d10f      	bne.n	8102e40 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	681a      	ldr	r2, [r3, #0]
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	f022 0210 	bic.w	r2, r2, #16
 8102e2e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	2201      	movs	r2, #1
 8102e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	2200      	movs	r2, #0
 8102e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102e44:	2b00      	cmp	r3, #0
 8102e46:	d003      	beq.n	8102e50 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102e4c:	6878      	ldr	r0, [r7, #4]
 8102e4e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e54:	2b00      	cmp	r3, #0
 8102e56:	f000 8306 	beq.w	8103466 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102e5a:	687b      	ldr	r3, [r7, #4]
 8102e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e5e:	f003 0301 	and.w	r3, r3, #1
 8102e62:	2b00      	cmp	r3, #0
 8102e64:	f000 8088 	beq.w	8102f78 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	2204      	movs	r2, #4
 8102e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	4a7a      	ldr	r2, [pc, #488]	; (8103060 <HAL_DMA_IRQHandler+0xa08>)
 8102e76:	4293      	cmp	r3, r2
 8102e78:	d04a      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	4a79      	ldr	r2, [pc, #484]	; (8103064 <HAL_DMA_IRQHandler+0xa0c>)
 8102e80:	4293      	cmp	r3, r2
 8102e82:	d045      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	681b      	ldr	r3, [r3, #0]
 8102e88:	4a77      	ldr	r2, [pc, #476]	; (8103068 <HAL_DMA_IRQHandler+0xa10>)
 8102e8a:	4293      	cmp	r3, r2
 8102e8c:	d040      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	4a76      	ldr	r2, [pc, #472]	; (810306c <HAL_DMA_IRQHandler+0xa14>)
 8102e94:	4293      	cmp	r3, r2
 8102e96:	d03b      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	4a74      	ldr	r2, [pc, #464]	; (8103070 <HAL_DMA_IRQHandler+0xa18>)
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d036      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	681b      	ldr	r3, [r3, #0]
 8102ea6:	4a73      	ldr	r2, [pc, #460]	; (8103074 <HAL_DMA_IRQHandler+0xa1c>)
 8102ea8:	4293      	cmp	r3, r2
 8102eaa:	d031      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	681b      	ldr	r3, [r3, #0]
 8102eb0:	4a71      	ldr	r2, [pc, #452]	; (8103078 <HAL_DMA_IRQHandler+0xa20>)
 8102eb2:	4293      	cmp	r3, r2
 8102eb4:	d02c      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	4a70      	ldr	r2, [pc, #448]	; (810307c <HAL_DMA_IRQHandler+0xa24>)
 8102ebc:	4293      	cmp	r3, r2
 8102ebe:	d027      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	4a6e      	ldr	r2, [pc, #440]	; (8103080 <HAL_DMA_IRQHandler+0xa28>)
 8102ec6:	4293      	cmp	r3, r2
 8102ec8:	d022      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	681b      	ldr	r3, [r3, #0]
 8102ece:	4a6d      	ldr	r2, [pc, #436]	; (8103084 <HAL_DMA_IRQHandler+0xa2c>)
 8102ed0:	4293      	cmp	r3, r2
 8102ed2:	d01d      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	681b      	ldr	r3, [r3, #0]
 8102ed8:	4a6b      	ldr	r2, [pc, #428]	; (8103088 <HAL_DMA_IRQHandler+0xa30>)
 8102eda:	4293      	cmp	r3, r2
 8102edc:	d018      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	681b      	ldr	r3, [r3, #0]
 8102ee2:	4a6a      	ldr	r2, [pc, #424]	; (810308c <HAL_DMA_IRQHandler+0xa34>)
 8102ee4:	4293      	cmp	r3, r2
 8102ee6:	d013      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	4a68      	ldr	r2, [pc, #416]	; (8103090 <HAL_DMA_IRQHandler+0xa38>)
 8102eee:	4293      	cmp	r3, r2
 8102ef0:	d00e      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	4a67      	ldr	r2, [pc, #412]	; (8103094 <HAL_DMA_IRQHandler+0xa3c>)
 8102ef8:	4293      	cmp	r3, r2
 8102efa:	d009      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	681b      	ldr	r3, [r3, #0]
 8102f00:	4a65      	ldr	r2, [pc, #404]	; (8103098 <HAL_DMA_IRQHandler+0xa40>)
 8102f02:	4293      	cmp	r3, r2
 8102f04:	d004      	beq.n	8102f10 <HAL_DMA_IRQHandler+0x8b8>
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	4a64      	ldr	r2, [pc, #400]	; (810309c <HAL_DMA_IRQHandler+0xa44>)
 8102f0c:	4293      	cmp	r3, r2
 8102f0e:	d108      	bne.n	8102f22 <HAL_DMA_IRQHandler+0x8ca>
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	681a      	ldr	r2, [r3, #0]
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	681b      	ldr	r3, [r3, #0]
 8102f1a:	f022 0201 	bic.w	r2, r2, #1
 8102f1e:	601a      	str	r2, [r3, #0]
 8102f20:	e007      	b.n	8102f32 <HAL_DMA_IRQHandler+0x8da>
 8102f22:	687b      	ldr	r3, [r7, #4]
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	681a      	ldr	r2, [r3, #0]
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	681b      	ldr	r3, [r3, #0]
 8102f2c:	f022 0201 	bic.w	r2, r2, #1
 8102f30:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8102f32:	68fb      	ldr	r3, [r7, #12]
 8102f34:	3301      	adds	r3, #1
 8102f36:	60fb      	str	r3, [r7, #12]
 8102f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102f3a:	429a      	cmp	r2, r3
 8102f3c:	d307      	bcc.n	8102f4e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8102f3e:	687b      	ldr	r3, [r7, #4]
 8102f40:	681b      	ldr	r3, [r3, #0]
 8102f42:	681b      	ldr	r3, [r3, #0]
 8102f44:	f003 0301 	and.w	r3, r3, #1
 8102f48:	2b00      	cmp	r3, #0
 8102f4a:	d1f2      	bne.n	8102f32 <HAL_DMA_IRQHandler+0x8da>
 8102f4c:	e000      	b.n	8102f50 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8102f4e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	681b      	ldr	r3, [r3, #0]
 8102f54:	681b      	ldr	r3, [r3, #0]
 8102f56:	f003 0301 	and.w	r3, r3, #1
 8102f5a:	2b00      	cmp	r3, #0
 8102f5c:	d004      	beq.n	8102f68 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	2203      	movs	r2, #3
 8102f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8102f66:	e003      	b.n	8102f70 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	2201      	movs	r2, #1
 8102f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8102f70:	687b      	ldr	r3, [r7, #4]
 8102f72:	2200      	movs	r2, #0
 8102f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f7c:	2b00      	cmp	r3, #0
 8102f7e:	f000 8272 	beq.w	8103466 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f86:	6878      	ldr	r0, [r7, #4]
 8102f88:	4798      	blx	r3
 8102f8a:	e26c      	b.n	8103466 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	681b      	ldr	r3, [r3, #0]
 8102f90:	4a43      	ldr	r2, [pc, #268]	; (81030a0 <HAL_DMA_IRQHandler+0xa48>)
 8102f92:	4293      	cmp	r3, r2
 8102f94:	d022      	beq.n	8102fdc <HAL_DMA_IRQHandler+0x984>
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	681b      	ldr	r3, [r3, #0]
 8102f9a:	4a42      	ldr	r2, [pc, #264]	; (81030a4 <HAL_DMA_IRQHandler+0xa4c>)
 8102f9c:	4293      	cmp	r3, r2
 8102f9e:	d01d      	beq.n	8102fdc <HAL_DMA_IRQHandler+0x984>
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	4a40      	ldr	r2, [pc, #256]	; (81030a8 <HAL_DMA_IRQHandler+0xa50>)
 8102fa6:	4293      	cmp	r3, r2
 8102fa8:	d018      	beq.n	8102fdc <HAL_DMA_IRQHandler+0x984>
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	681b      	ldr	r3, [r3, #0]
 8102fae:	4a3f      	ldr	r2, [pc, #252]	; (81030ac <HAL_DMA_IRQHandler+0xa54>)
 8102fb0:	4293      	cmp	r3, r2
 8102fb2:	d013      	beq.n	8102fdc <HAL_DMA_IRQHandler+0x984>
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	681b      	ldr	r3, [r3, #0]
 8102fb8:	4a3d      	ldr	r2, [pc, #244]	; (81030b0 <HAL_DMA_IRQHandler+0xa58>)
 8102fba:	4293      	cmp	r3, r2
 8102fbc:	d00e      	beq.n	8102fdc <HAL_DMA_IRQHandler+0x984>
 8102fbe:	687b      	ldr	r3, [r7, #4]
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	4a3c      	ldr	r2, [pc, #240]	; (81030b4 <HAL_DMA_IRQHandler+0xa5c>)
 8102fc4:	4293      	cmp	r3, r2
 8102fc6:	d009      	beq.n	8102fdc <HAL_DMA_IRQHandler+0x984>
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	4a3a      	ldr	r2, [pc, #232]	; (81030b8 <HAL_DMA_IRQHandler+0xa60>)
 8102fce:	4293      	cmp	r3, r2
 8102fd0:	d004      	beq.n	8102fdc <HAL_DMA_IRQHandler+0x984>
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	4a39      	ldr	r2, [pc, #228]	; (81030bc <HAL_DMA_IRQHandler+0xa64>)
 8102fd8:	4293      	cmp	r3, r2
 8102fda:	d101      	bne.n	8102fe0 <HAL_DMA_IRQHandler+0x988>
 8102fdc:	2301      	movs	r3, #1
 8102fde:	e000      	b.n	8102fe2 <HAL_DMA_IRQHandler+0x98a>
 8102fe0:	2300      	movs	r3, #0
 8102fe2:	2b00      	cmp	r3, #0
 8102fe4:	f000 823f 	beq.w	8103466 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	681b      	ldr	r3, [r3, #0]
 8102fec:	681b      	ldr	r3, [r3, #0]
 8102fee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ff4:	f003 031f 	and.w	r3, r3, #31
 8102ff8:	2204      	movs	r2, #4
 8102ffa:	409a      	lsls	r2, r3
 8102ffc:	697b      	ldr	r3, [r7, #20]
 8102ffe:	4013      	ands	r3, r2
 8103000:	2b00      	cmp	r3, #0
 8103002:	f000 80cd 	beq.w	81031a0 <HAL_DMA_IRQHandler+0xb48>
 8103006:	693b      	ldr	r3, [r7, #16]
 8103008:	f003 0304 	and.w	r3, r3, #4
 810300c:	2b00      	cmp	r3, #0
 810300e:	f000 80c7 	beq.w	81031a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103016:	f003 031f 	and.w	r3, r3, #31
 810301a:	2204      	movs	r2, #4
 810301c:	409a      	lsls	r2, r3
 810301e:	69fb      	ldr	r3, [r7, #28]
 8103020:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103022:	693b      	ldr	r3, [r7, #16]
 8103024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103028:	2b00      	cmp	r3, #0
 810302a:	d049      	beq.n	81030c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810302c:	693b      	ldr	r3, [r7, #16]
 810302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103032:	2b00      	cmp	r3, #0
 8103034:	d109      	bne.n	810304a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810303a:	2b00      	cmp	r3, #0
 810303c:	f000 8210 	beq.w	8103460 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103044:	6878      	ldr	r0, [r7, #4]
 8103046:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103048:	e20a      	b.n	8103460 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810304e:	2b00      	cmp	r3, #0
 8103050:	f000 8206 	beq.w	8103460 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103058:	6878      	ldr	r0, [r7, #4]
 810305a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810305c:	e200      	b.n	8103460 <HAL_DMA_IRQHandler+0xe08>
 810305e:	bf00      	nop
 8103060:	40020010 	.word	0x40020010
 8103064:	40020028 	.word	0x40020028
 8103068:	40020040 	.word	0x40020040
 810306c:	40020058 	.word	0x40020058
 8103070:	40020070 	.word	0x40020070
 8103074:	40020088 	.word	0x40020088
 8103078:	400200a0 	.word	0x400200a0
 810307c:	400200b8 	.word	0x400200b8
 8103080:	40020410 	.word	0x40020410
 8103084:	40020428 	.word	0x40020428
 8103088:	40020440 	.word	0x40020440
 810308c:	40020458 	.word	0x40020458
 8103090:	40020470 	.word	0x40020470
 8103094:	40020488 	.word	0x40020488
 8103098:	400204a0 	.word	0x400204a0
 810309c:	400204b8 	.word	0x400204b8
 81030a0:	58025408 	.word	0x58025408
 81030a4:	5802541c 	.word	0x5802541c
 81030a8:	58025430 	.word	0x58025430
 81030ac:	58025444 	.word	0x58025444
 81030b0:	58025458 	.word	0x58025458
 81030b4:	5802546c 	.word	0x5802546c
 81030b8:	58025480 	.word	0x58025480
 81030bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81030c0:	693b      	ldr	r3, [r7, #16]
 81030c2:	f003 0320 	and.w	r3, r3, #32
 81030c6:	2b00      	cmp	r3, #0
 81030c8:	d160      	bne.n	810318c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	4a7f      	ldr	r2, [pc, #508]	; (81032cc <HAL_DMA_IRQHandler+0xc74>)
 81030d0:	4293      	cmp	r3, r2
 81030d2:	d04a      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	4a7d      	ldr	r2, [pc, #500]	; (81032d0 <HAL_DMA_IRQHandler+0xc78>)
 81030da:	4293      	cmp	r3, r2
 81030dc:	d045      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	681b      	ldr	r3, [r3, #0]
 81030e2:	4a7c      	ldr	r2, [pc, #496]	; (81032d4 <HAL_DMA_IRQHandler+0xc7c>)
 81030e4:	4293      	cmp	r3, r2
 81030e6:	d040      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	4a7a      	ldr	r2, [pc, #488]	; (81032d8 <HAL_DMA_IRQHandler+0xc80>)
 81030ee:	4293      	cmp	r3, r2
 81030f0:	d03b      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	681b      	ldr	r3, [r3, #0]
 81030f6:	4a79      	ldr	r2, [pc, #484]	; (81032dc <HAL_DMA_IRQHandler+0xc84>)
 81030f8:	4293      	cmp	r3, r2
 81030fa:	d036      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	681b      	ldr	r3, [r3, #0]
 8103100:	4a77      	ldr	r2, [pc, #476]	; (81032e0 <HAL_DMA_IRQHandler+0xc88>)
 8103102:	4293      	cmp	r3, r2
 8103104:	d031      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	681b      	ldr	r3, [r3, #0]
 810310a:	4a76      	ldr	r2, [pc, #472]	; (81032e4 <HAL_DMA_IRQHandler+0xc8c>)
 810310c:	4293      	cmp	r3, r2
 810310e:	d02c      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	681b      	ldr	r3, [r3, #0]
 8103114:	4a74      	ldr	r2, [pc, #464]	; (81032e8 <HAL_DMA_IRQHandler+0xc90>)
 8103116:	4293      	cmp	r3, r2
 8103118:	d027      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	681b      	ldr	r3, [r3, #0]
 810311e:	4a73      	ldr	r2, [pc, #460]	; (81032ec <HAL_DMA_IRQHandler+0xc94>)
 8103120:	4293      	cmp	r3, r2
 8103122:	d022      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	4a71      	ldr	r2, [pc, #452]	; (81032f0 <HAL_DMA_IRQHandler+0xc98>)
 810312a:	4293      	cmp	r3, r2
 810312c:	d01d      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	681b      	ldr	r3, [r3, #0]
 8103132:	4a70      	ldr	r2, [pc, #448]	; (81032f4 <HAL_DMA_IRQHandler+0xc9c>)
 8103134:	4293      	cmp	r3, r2
 8103136:	d018      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	4a6e      	ldr	r2, [pc, #440]	; (81032f8 <HAL_DMA_IRQHandler+0xca0>)
 810313e:	4293      	cmp	r3, r2
 8103140:	d013      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	681b      	ldr	r3, [r3, #0]
 8103146:	4a6d      	ldr	r2, [pc, #436]	; (81032fc <HAL_DMA_IRQHandler+0xca4>)
 8103148:	4293      	cmp	r3, r2
 810314a:	d00e      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	4a6b      	ldr	r2, [pc, #428]	; (8103300 <HAL_DMA_IRQHandler+0xca8>)
 8103152:	4293      	cmp	r3, r2
 8103154:	d009      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	4a6a      	ldr	r2, [pc, #424]	; (8103304 <HAL_DMA_IRQHandler+0xcac>)
 810315c:	4293      	cmp	r3, r2
 810315e:	d004      	beq.n	810316a <HAL_DMA_IRQHandler+0xb12>
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4a68      	ldr	r2, [pc, #416]	; (8103308 <HAL_DMA_IRQHandler+0xcb0>)
 8103166:	4293      	cmp	r3, r2
 8103168:	d108      	bne.n	810317c <HAL_DMA_IRQHandler+0xb24>
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	681a      	ldr	r2, [r3, #0]
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	f022 0208 	bic.w	r2, r2, #8
 8103178:	601a      	str	r2, [r3, #0]
 810317a:	e007      	b.n	810318c <HAL_DMA_IRQHandler+0xb34>
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	681b      	ldr	r3, [r3, #0]
 8103180:	681a      	ldr	r2, [r3, #0]
 8103182:	687b      	ldr	r3, [r7, #4]
 8103184:	681b      	ldr	r3, [r3, #0]
 8103186:	f022 0204 	bic.w	r2, r2, #4
 810318a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103190:	2b00      	cmp	r3, #0
 8103192:	f000 8165 	beq.w	8103460 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810319a:	6878      	ldr	r0, [r7, #4]
 810319c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810319e:	e15f      	b.n	8103460 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031a4:	f003 031f 	and.w	r3, r3, #31
 81031a8:	2202      	movs	r2, #2
 81031aa:	409a      	lsls	r2, r3
 81031ac:	697b      	ldr	r3, [r7, #20]
 81031ae:	4013      	ands	r3, r2
 81031b0:	2b00      	cmp	r3, #0
 81031b2:	f000 80c5 	beq.w	8103340 <HAL_DMA_IRQHandler+0xce8>
 81031b6:	693b      	ldr	r3, [r7, #16]
 81031b8:	f003 0302 	and.w	r3, r3, #2
 81031bc:	2b00      	cmp	r3, #0
 81031be:	f000 80bf 	beq.w	8103340 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81031c2:	687b      	ldr	r3, [r7, #4]
 81031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031c6:	f003 031f 	and.w	r3, r3, #31
 81031ca:	2202      	movs	r2, #2
 81031cc:	409a      	lsls	r2, r3
 81031ce:	69fb      	ldr	r3, [r7, #28]
 81031d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81031d2:	693b      	ldr	r3, [r7, #16]
 81031d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81031d8:	2b00      	cmp	r3, #0
 81031da:	d018      	beq.n	810320e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81031dc:	693b      	ldr	r3, [r7, #16]
 81031de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81031e2:	2b00      	cmp	r3, #0
 81031e4:	d109      	bne.n	81031fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81031ea:	2b00      	cmp	r3, #0
 81031ec:	f000 813a 	beq.w	8103464 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81031f4:	6878      	ldr	r0, [r7, #4]
 81031f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81031f8:	e134      	b.n	8103464 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81031fe:	2b00      	cmp	r3, #0
 8103200:	f000 8130 	beq.w	8103464 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103208:	6878      	ldr	r0, [r7, #4]
 810320a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810320c:	e12a      	b.n	8103464 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810320e:	693b      	ldr	r3, [r7, #16]
 8103210:	f003 0320 	and.w	r3, r3, #32
 8103214:	2b00      	cmp	r3, #0
 8103216:	f040 8089 	bne.w	810332c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	681b      	ldr	r3, [r3, #0]
 810321e:	4a2b      	ldr	r2, [pc, #172]	; (81032cc <HAL_DMA_IRQHandler+0xc74>)
 8103220:	4293      	cmp	r3, r2
 8103222:	d04a      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	681b      	ldr	r3, [r3, #0]
 8103228:	4a29      	ldr	r2, [pc, #164]	; (81032d0 <HAL_DMA_IRQHandler+0xc78>)
 810322a:	4293      	cmp	r3, r2
 810322c:	d045      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	681b      	ldr	r3, [r3, #0]
 8103232:	4a28      	ldr	r2, [pc, #160]	; (81032d4 <HAL_DMA_IRQHandler+0xc7c>)
 8103234:	4293      	cmp	r3, r2
 8103236:	d040      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	681b      	ldr	r3, [r3, #0]
 810323c:	4a26      	ldr	r2, [pc, #152]	; (81032d8 <HAL_DMA_IRQHandler+0xc80>)
 810323e:	4293      	cmp	r3, r2
 8103240:	d03b      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	681b      	ldr	r3, [r3, #0]
 8103246:	4a25      	ldr	r2, [pc, #148]	; (81032dc <HAL_DMA_IRQHandler+0xc84>)
 8103248:	4293      	cmp	r3, r2
 810324a:	d036      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	681b      	ldr	r3, [r3, #0]
 8103250:	4a23      	ldr	r2, [pc, #140]	; (81032e0 <HAL_DMA_IRQHandler+0xc88>)
 8103252:	4293      	cmp	r3, r2
 8103254:	d031      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	4a22      	ldr	r2, [pc, #136]	; (81032e4 <HAL_DMA_IRQHandler+0xc8c>)
 810325c:	4293      	cmp	r3, r2
 810325e:	d02c      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	681b      	ldr	r3, [r3, #0]
 8103264:	4a20      	ldr	r2, [pc, #128]	; (81032e8 <HAL_DMA_IRQHandler+0xc90>)
 8103266:	4293      	cmp	r3, r2
 8103268:	d027      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	681b      	ldr	r3, [r3, #0]
 810326e:	4a1f      	ldr	r2, [pc, #124]	; (81032ec <HAL_DMA_IRQHandler+0xc94>)
 8103270:	4293      	cmp	r3, r2
 8103272:	d022      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	681b      	ldr	r3, [r3, #0]
 8103278:	4a1d      	ldr	r2, [pc, #116]	; (81032f0 <HAL_DMA_IRQHandler+0xc98>)
 810327a:	4293      	cmp	r3, r2
 810327c:	d01d      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	681b      	ldr	r3, [r3, #0]
 8103282:	4a1c      	ldr	r2, [pc, #112]	; (81032f4 <HAL_DMA_IRQHandler+0xc9c>)
 8103284:	4293      	cmp	r3, r2
 8103286:	d018      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 8103288:	687b      	ldr	r3, [r7, #4]
 810328a:	681b      	ldr	r3, [r3, #0]
 810328c:	4a1a      	ldr	r2, [pc, #104]	; (81032f8 <HAL_DMA_IRQHandler+0xca0>)
 810328e:	4293      	cmp	r3, r2
 8103290:	d013      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	681b      	ldr	r3, [r3, #0]
 8103296:	4a19      	ldr	r2, [pc, #100]	; (81032fc <HAL_DMA_IRQHandler+0xca4>)
 8103298:	4293      	cmp	r3, r2
 810329a:	d00e      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 810329c:	687b      	ldr	r3, [r7, #4]
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	4a17      	ldr	r2, [pc, #92]	; (8103300 <HAL_DMA_IRQHandler+0xca8>)
 81032a2:	4293      	cmp	r3, r2
 81032a4:	d009      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 81032a6:	687b      	ldr	r3, [r7, #4]
 81032a8:	681b      	ldr	r3, [r3, #0]
 81032aa:	4a16      	ldr	r2, [pc, #88]	; (8103304 <HAL_DMA_IRQHandler+0xcac>)
 81032ac:	4293      	cmp	r3, r2
 81032ae:	d004      	beq.n	81032ba <HAL_DMA_IRQHandler+0xc62>
 81032b0:	687b      	ldr	r3, [r7, #4]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	4a14      	ldr	r2, [pc, #80]	; (8103308 <HAL_DMA_IRQHandler+0xcb0>)
 81032b6:	4293      	cmp	r3, r2
 81032b8:	d128      	bne.n	810330c <HAL_DMA_IRQHandler+0xcb4>
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	681b      	ldr	r3, [r3, #0]
 81032be:	681a      	ldr	r2, [r3, #0]
 81032c0:	687b      	ldr	r3, [r7, #4]
 81032c2:	681b      	ldr	r3, [r3, #0]
 81032c4:	f022 0214 	bic.w	r2, r2, #20
 81032c8:	601a      	str	r2, [r3, #0]
 81032ca:	e027      	b.n	810331c <HAL_DMA_IRQHandler+0xcc4>
 81032cc:	40020010 	.word	0x40020010
 81032d0:	40020028 	.word	0x40020028
 81032d4:	40020040 	.word	0x40020040
 81032d8:	40020058 	.word	0x40020058
 81032dc:	40020070 	.word	0x40020070
 81032e0:	40020088 	.word	0x40020088
 81032e4:	400200a0 	.word	0x400200a0
 81032e8:	400200b8 	.word	0x400200b8
 81032ec:	40020410 	.word	0x40020410
 81032f0:	40020428 	.word	0x40020428
 81032f4:	40020440 	.word	0x40020440
 81032f8:	40020458 	.word	0x40020458
 81032fc:	40020470 	.word	0x40020470
 8103300:	40020488 	.word	0x40020488
 8103304:	400204a0 	.word	0x400204a0
 8103308:	400204b8 	.word	0x400204b8
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	681a      	ldr	r2, [r3, #0]
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	f022 020a 	bic.w	r2, r2, #10
 810331a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	2201      	movs	r2, #1
 8103320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	2200      	movs	r2, #0
 8103328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103330:	2b00      	cmp	r3, #0
 8103332:	f000 8097 	beq.w	8103464 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810333a:	6878      	ldr	r0, [r7, #4]
 810333c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810333e:	e091      	b.n	8103464 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103340:	687b      	ldr	r3, [r7, #4]
 8103342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103344:	f003 031f 	and.w	r3, r3, #31
 8103348:	2208      	movs	r2, #8
 810334a:	409a      	lsls	r2, r3
 810334c:	697b      	ldr	r3, [r7, #20]
 810334e:	4013      	ands	r3, r2
 8103350:	2b00      	cmp	r3, #0
 8103352:	f000 8088 	beq.w	8103466 <HAL_DMA_IRQHandler+0xe0e>
 8103356:	693b      	ldr	r3, [r7, #16]
 8103358:	f003 0308 	and.w	r3, r3, #8
 810335c:	2b00      	cmp	r3, #0
 810335e:	f000 8082 	beq.w	8103466 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	681b      	ldr	r3, [r3, #0]
 8103366:	4a41      	ldr	r2, [pc, #260]	; (810346c <HAL_DMA_IRQHandler+0xe14>)
 8103368:	4293      	cmp	r3, r2
 810336a:	d04a      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 810336c:	687b      	ldr	r3, [r7, #4]
 810336e:	681b      	ldr	r3, [r3, #0]
 8103370:	4a3f      	ldr	r2, [pc, #252]	; (8103470 <HAL_DMA_IRQHandler+0xe18>)
 8103372:	4293      	cmp	r3, r2
 8103374:	d045      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 8103376:	687b      	ldr	r3, [r7, #4]
 8103378:	681b      	ldr	r3, [r3, #0]
 810337a:	4a3e      	ldr	r2, [pc, #248]	; (8103474 <HAL_DMA_IRQHandler+0xe1c>)
 810337c:	4293      	cmp	r3, r2
 810337e:	d040      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	4a3c      	ldr	r2, [pc, #240]	; (8103478 <HAL_DMA_IRQHandler+0xe20>)
 8103386:	4293      	cmp	r3, r2
 8103388:	d03b      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	681b      	ldr	r3, [r3, #0]
 810338e:	4a3b      	ldr	r2, [pc, #236]	; (810347c <HAL_DMA_IRQHandler+0xe24>)
 8103390:	4293      	cmp	r3, r2
 8103392:	d036      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	681b      	ldr	r3, [r3, #0]
 8103398:	4a39      	ldr	r2, [pc, #228]	; (8103480 <HAL_DMA_IRQHandler+0xe28>)
 810339a:	4293      	cmp	r3, r2
 810339c:	d031      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 810339e:	687b      	ldr	r3, [r7, #4]
 81033a0:	681b      	ldr	r3, [r3, #0]
 81033a2:	4a38      	ldr	r2, [pc, #224]	; (8103484 <HAL_DMA_IRQHandler+0xe2c>)
 81033a4:	4293      	cmp	r3, r2
 81033a6:	d02c      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	4a36      	ldr	r2, [pc, #216]	; (8103488 <HAL_DMA_IRQHandler+0xe30>)
 81033ae:	4293      	cmp	r3, r2
 81033b0:	d027      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	4a35      	ldr	r2, [pc, #212]	; (810348c <HAL_DMA_IRQHandler+0xe34>)
 81033b8:	4293      	cmp	r3, r2
 81033ba:	d022      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	4a33      	ldr	r2, [pc, #204]	; (8103490 <HAL_DMA_IRQHandler+0xe38>)
 81033c2:	4293      	cmp	r3, r2
 81033c4:	d01d      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	4a32      	ldr	r2, [pc, #200]	; (8103494 <HAL_DMA_IRQHandler+0xe3c>)
 81033cc:	4293      	cmp	r3, r2
 81033ce:	d018      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	681b      	ldr	r3, [r3, #0]
 81033d4:	4a30      	ldr	r2, [pc, #192]	; (8103498 <HAL_DMA_IRQHandler+0xe40>)
 81033d6:	4293      	cmp	r3, r2
 81033d8:	d013      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	681b      	ldr	r3, [r3, #0]
 81033de:	4a2f      	ldr	r2, [pc, #188]	; (810349c <HAL_DMA_IRQHandler+0xe44>)
 81033e0:	4293      	cmp	r3, r2
 81033e2:	d00e      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 81033e4:	687b      	ldr	r3, [r7, #4]
 81033e6:	681b      	ldr	r3, [r3, #0]
 81033e8:	4a2d      	ldr	r2, [pc, #180]	; (81034a0 <HAL_DMA_IRQHandler+0xe48>)
 81033ea:	4293      	cmp	r3, r2
 81033ec:	d009      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	681b      	ldr	r3, [r3, #0]
 81033f2:	4a2c      	ldr	r2, [pc, #176]	; (81034a4 <HAL_DMA_IRQHandler+0xe4c>)
 81033f4:	4293      	cmp	r3, r2
 81033f6:	d004      	beq.n	8103402 <HAL_DMA_IRQHandler+0xdaa>
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	4a2a      	ldr	r2, [pc, #168]	; (81034a8 <HAL_DMA_IRQHandler+0xe50>)
 81033fe:	4293      	cmp	r3, r2
 8103400:	d108      	bne.n	8103414 <HAL_DMA_IRQHandler+0xdbc>
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	681a      	ldr	r2, [r3, #0]
 8103408:	687b      	ldr	r3, [r7, #4]
 810340a:	681b      	ldr	r3, [r3, #0]
 810340c:	f022 021c 	bic.w	r2, r2, #28
 8103410:	601a      	str	r2, [r3, #0]
 8103412:	e007      	b.n	8103424 <HAL_DMA_IRQHandler+0xdcc>
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	681a      	ldr	r2, [r3, #0]
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	681b      	ldr	r3, [r3, #0]
 810341e:	f022 020e 	bic.w	r2, r2, #14
 8103422:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103428:	f003 031f 	and.w	r3, r3, #31
 810342c:	2201      	movs	r2, #1
 810342e:	409a      	lsls	r2, r3
 8103430:	69fb      	ldr	r3, [r7, #28]
 8103432:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	2201      	movs	r2, #1
 8103438:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	2201      	movs	r2, #1
 810343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103442:	687b      	ldr	r3, [r7, #4]
 8103444:	2200      	movs	r2, #0
 8103446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810344e:	2b00      	cmp	r3, #0
 8103450:	d009      	beq.n	8103466 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103456:	6878      	ldr	r0, [r7, #4]
 8103458:	4798      	blx	r3
 810345a:	e004      	b.n	8103466 <HAL_DMA_IRQHandler+0xe0e>
          return;
 810345c:	bf00      	nop
 810345e:	e002      	b.n	8103466 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103460:	bf00      	nop
 8103462:	e000      	b.n	8103466 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103464:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103466:	3728      	adds	r7, #40	; 0x28
 8103468:	46bd      	mov	sp, r7
 810346a:	bd80      	pop	{r7, pc}
 810346c:	40020010 	.word	0x40020010
 8103470:	40020028 	.word	0x40020028
 8103474:	40020040 	.word	0x40020040
 8103478:	40020058 	.word	0x40020058
 810347c:	40020070 	.word	0x40020070
 8103480:	40020088 	.word	0x40020088
 8103484:	400200a0 	.word	0x400200a0
 8103488:	400200b8 	.word	0x400200b8
 810348c:	40020410 	.word	0x40020410
 8103490:	40020428 	.word	0x40020428
 8103494:	40020440 	.word	0x40020440
 8103498:	40020458 	.word	0x40020458
 810349c:	40020470 	.word	0x40020470
 81034a0:	40020488 	.word	0x40020488
 81034a4:	400204a0 	.word	0x400204a0
 81034a8:	400204b8 	.word	0x400204b8

081034ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81034ac:	b480      	push	{r7}
 81034ae:	b085      	sub	sp, #20
 81034b0:	af00      	add	r7, sp, #0
 81034b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	4a43      	ldr	r2, [pc, #268]	; (81035c8 <DMA_CalcBaseAndBitshift+0x11c>)
 81034ba:	4293      	cmp	r3, r2
 81034bc:	d04a      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	681b      	ldr	r3, [r3, #0]
 81034c2:	4a42      	ldr	r2, [pc, #264]	; (81035cc <DMA_CalcBaseAndBitshift+0x120>)
 81034c4:	4293      	cmp	r3, r2
 81034c6:	d045      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	681b      	ldr	r3, [r3, #0]
 81034cc:	4a40      	ldr	r2, [pc, #256]	; (81035d0 <DMA_CalcBaseAndBitshift+0x124>)
 81034ce:	4293      	cmp	r3, r2
 81034d0:	d040      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	681b      	ldr	r3, [r3, #0]
 81034d6:	4a3f      	ldr	r2, [pc, #252]	; (81035d4 <DMA_CalcBaseAndBitshift+0x128>)
 81034d8:	4293      	cmp	r3, r2
 81034da:	d03b      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	681b      	ldr	r3, [r3, #0]
 81034e0:	4a3d      	ldr	r2, [pc, #244]	; (81035d8 <DMA_CalcBaseAndBitshift+0x12c>)
 81034e2:	4293      	cmp	r3, r2
 81034e4:	d036      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	681b      	ldr	r3, [r3, #0]
 81034ea:	4a3c      	ldr	r2, [pc, #240]	; (81035dc <DMA_CalcBaseAndBitshift+0x130>)
 81034ec:	4293      	cmp	r3, r2
 81034ee:	d031      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	681b      	ldr	r3, [r3, #0]
 81034f4:	4a3a      	ldr	r2, [pc, #232]	; (81035e0 <DMA_CalcBaseAndBitshift+0x134>)
 81034f6:	4293      	cmp	r3, r2
 81034f8:	d02c      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	681b      	ldr	r3, [r3, #0]
 81034fe:	4a39      	ldr	r2, [pc, #228]	; (81035e4 <DMA_CalcBaseAndBitshift+0x138>)
 8103500:	4293      	cmp	r3, r2
 8103502:	d027      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	681b      	ldr	r3, [r3, #0]
 8103508:	4a37      	ldr	r2, [pc, #220]	; (81035e8 <DMA_CalcBaseAndBitshift+0x13c>)
 810350a:	4293      	cmp	r3, r2
 810350c:	d022      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	4a36      	ldr	r2, [pc, #216]	; (81035ec <DMA_CalcBaseAndBitshift+0x140>)
 8103514:	4293      	cmp	r3, r2
 8103516:	d01d      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	4a34      	ldr	r2, [pc, #208]	; (81035f0 <DMA_CalcBaseAndBitshift+0x144>)
 810351e:	4293      	cmp	r3, r2
 8103520:	d018      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	4a33      	ldr	r2, [pc, #204]	; (81035f4 <DMA_CalcBaseAndBitshift+0x148>)
 8103528:	4293      	cmp	r3, r2
 810352a:	d013      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	4a31      	ldr	r2, [pc, #196]	; (81035f8 <DMA_CalcBaseAndBitshift+0x14c>)
 8103532:	4293      	cmp	r3, r2
 8103534:	d00e      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	681b      	ldr	r3, [r3, #0]
 810353a:	4a30      	ldr	r2, [pc, #192]	; (81035fc <DMA_CalcBaseAndBitshift+0x150>)
 810353c:	4293      	cmp	r3, r2
 810353e:	d009      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	4a2e      	ldr	r2, [pc, #184]	; (8103600 <DMA_CalcBaseAndBitshift+0x154>)
 8103546:	4293      	cmp	r3, r2
 8103548:	d004      	beq.n	8103554 <DMA_CalcBaseAndBitshift+0xa8>
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	4a2d      	ldr	r2, [pc, #180]	; (8103604 <DMA_CalcBaseAndBitshift+0x158>)
 8103550:	4293      	cmp	r3, r2
 8103552:	d101      	bne.n	8103558 <DMA_CalcBaseAndBitshift+0xac>
 8103554:	2301      	movs	r3, #1
 8103556:	e000      	b.n	810355a <DMA_CalcBaseAndBitshift+0xae>
 8103558:	2300      	movs	r3, #0
 810355a:	2b00      	cmp	r3, #0
 810355c:	d026      	beq.n	81035ac <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	b2db      	uxtb	r3, r3
 8103564:	3b10      	subs	r3, #16
 8103566:	4a28      	ldr	r2, [pc, #160]	; (8103608 <DMA_CalcBaseAndBitshift+0x15c>)
 8103568:	fba2 2303 	umull	r2, r3, r2, r3
 810356c:	091b      	lsrs	r3, r3, #4
 810356e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103570:	68fb      	ldr	r3, [r7, #12]
 8103572:	f003 0307 	and.w	r3, r3, #7
 8103576:	4a25      	ldr	r2, [pc, #148]	; (810360c <DMA_CalcBaseAndBitshift+0x160>)
 8103578:	5cd3      	ldrb	r3, [r2, r3]
 810357a:	461a      	mov	r2, r3
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8103580:	68fb      	ldr	r3, [r7, #12]
 8103582:	2b03      	cmp	r3, #3
 8103584:	d909      	bls.n	810359a <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810358e:	f023 0303 	bic.w	r3, r3, #3
 8103592:	1d1a      	adds	r2, r3, #4
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	659a      	str	r2, [r3, #88]	; 0x58
 8103598:	e00e      	b.n	81035b8 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81035a2:	f023 0303 	bic.w	r3, r3, #3
 81035a6:	687a      	ldr	r2, [r7, #4]
 81035a8:	6593      	str	r3, [r2, #88]	; 0x58
 81035aa:	e005      	b.n	81035b8 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81035ac:	687b      	ldr	r3, [r7, #4]
 81035ae:	681b      	ldr	r3, [r3, #0]
 81035b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 81035bc:	4618      	mov	r0, r3
 81035be:	3714      	adds	r7, #20
 81035c0:	46bd      	mov	sp, r7
 81035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035c6:	4770      	bx	lr
 81035c8:	40020010 	.word	0x40020010
 81035cc:	40020028 	.word	0x40020028
 81035d0:	40020040 	.word	0x40020040
 81035d4:	40020058 	.word	0x40020058
 81035d8:	40020070 	.word	0x40020070
 81035dc:	40020088 	.word	0x40020088
 81035e0:	400200a0 	.word	0x400200a0
 81035e4:	400200b8 	.word	0x400200b8
 81035e8:	40020410 	.word	0x40020410
 81035ec:	40020428 	.word	0x40020428
 81035f0:	40020440 	.word	0x40020440
 81035f4:	40020458 	.word	0x40020458
 81035f8:	40020470 	.word	0x40020470
 81035fc:	40020488 	.word	0x40020488
 8103600:	400204a0 	.word	0x400204a0
 8103604:	400204b8 	.word	0x400204b8
 8103608:	aaaaaaab 	.word	0xaaaaaaab
 810360c:	081056a8 	.word	0x081056a8

08103610 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8103610:	b480      	push	{r7}
 8103612:	b085      	sub	sp, #20
 8103614:	af00      	add	r7, sp, #0
 8103616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103618:	2300      	movs	r3, #0
 810361a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	699b      	ldr	r3, [r3, #24]
 8103620:	2b00      	cmp	r3, #0
 8103622:	d120      	bne.n	8103666 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103628:	2b03      	cmp	r3, #3
 810362a:	d858      	bhi.n	81036de <DMA_CheckFifoParam+0xce>
 810362c:	a201      	add	r2, pc, #4	; (adr r2, 8103634 <DMA_CheckFifoParam+0x24>)
 810362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103632:	bf00      	nop
 8103634:	08103645 	.word	0x08103645
 8103638:	08103657 	.word	0x08103657
 810363c:	08103645 	.word	0x08103645
 8103640:	081036df 	.word	0x081036df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810364c:	2b00      	cmp	r3, #0
 810364e:	d048      	beq.n	81036e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8103650:	2301      	movs	r3, #1
 8103652:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103654:	e045      	b.n	81036e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810365a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810365e:	d142      	bne.n	81036e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8103660:	2301      	movs	r3, #1
 8103662:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103664:	e03f      	b.n	81036e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	699b      	ldr	r3, [r3, #24]
 810366a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810366e:	d123      	bne.n	81036b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103674:	2b03      	cmp	r3, #3
 8103676:	d838      	bhi.n	81036ea <DMA_CheckFifoParam+0xda>
 8103678:	a201      	add	r2, pc, #4	; (adr r2, 8103680 <DMA_CheckFifoParam+0x70>)
 810367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810367e:	bf00      	nop
 8103680:	08103691 	.word	0x08103691
 8103684:	08103697 	.word	0x08103697
 8103688:	08103691 	.word	0x08103691
 810368c:	081036a9 	.word	0x081036a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8103690:	2301      	movs	r3, #1
 8103692:	73fb      	strb	r3, [r7, #15]
        break;
 8103694:	e030      	b.n	81036f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810369a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810369e:	2b00      	cmp	r3, #0
 81036a0:	d025      	beq.n	81036ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81036a2:	2301      	movs	r3, #1
 81036a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81036a6:	e022      	b.n	81036ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81036b0:	d11f      	bne.n	81036f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81036b2:	2301      	movs	r3, #1
 81036b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81036b6:	e01c      	b.n	81036f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036bc:	2b02      	cmp	r3, #2
 81036be:	d902      	bls.n	81036c6 <DMA_CheckFifoParam+0xb6>
 81036c0:	2b03      	cmp	r3, #3
 81036c2:	d003      	beq.n	81036cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81036c4:	e018      	b.n	81036f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81036c6:	2301      	movs	r3, #1
 81036c8:	73fb      	strb	r3, [r7, #15]
        break;
 81036ca:	e015      	b.n	81036f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81036d4:	2b00      	cmp	r3, #0
 81036d6:	d00e      	beq.n	81036f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81036d8:	2301      	movs	r3, #1
 81036da:	73fb      	strb	r3, [r7, #15]
    break;
 81036dc:	e00b      	b.n	81036f6 <DMA_CheckFifoParam+0xe6>
        break;
 81036de:	bf00      	nop
 81036e0:	e00a      	b.n	81036f8 <DMA_CheckFifoParam+0xe8>
        break;
 81036e2:	bf00      	nop
 81036e4:	e008      	b.n	81036f8 <DMA_CheckFifoParam+0xe8>
        break;
 81036e6:	bf00      	nop
 81036e8:	e006      	b.n	81036f8 <DMA_CheckFifoParam+0xe8>
        break;
 81036ea:	bf00      	nop
 81036ec:	e004      	b.n	81036f8 <DMA_CheckFifoParam+0xe8>
        break;
 81036ee:	bf00      	nop
 81036f0:	e002      	b.n	81036f8 <DMA_CheckFifoParam+0xe8>
        break;
 81036f2:	bf00      	nop
 81036f4:	e000      	b.n	81036f8 <DMA_CheckFifoParam+0xe8>
    break;
 81036f6:	bf00      	nop
    }
  }

  return status;
 81036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 81036fa:	4618      	mov	r0, r3
 81036fc:	3714      	adds	r7, #20
 81036fe:	46bd      	mov	sp, r7
 8103700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103704:	4770      	bx	lr
 8103706:	bf00      	nop

08103708 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103708:	b480      	push	{r7}
 810370a:	b085      	sub	sp, #20
 810370c:	af00      	add	r7, sp, #0
 810370e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103716:	687b      	ldr	r3, [r7, #4]
 8103718:	681b      	ldr	r3, [r3, #0]
 810371a:	4a3a      	ldr	r2, [pc, #232]	; (8103804 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 810371c:	4293      	cmp	r3, r2
 810371e:	d022      	beq.n	8103766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103720:	687b      	ldr	r3, [r7, #4]
 8103722:	681b      	ldr	r3, [r3, #0]
 8103724:	4a38      	ldr	r2, [pc, #224]	; (8103808 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8103726:	4293      	cmp	r3, r2
 8103728:	d01d      	beq.n	8103766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810372a:	687b      	ldr	r3, [r7, #4]
 810372c:	681b      	ldr	r3, [r3, #0]
 810372e:	4a37      	ldr	r2, [pc, #220]	; (810380c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8103730:	4293      	cmp	r3, r2
 8103732:	d018      	beq.n	8103766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	681b      	ldr	r3, [r3, #0]
 8103738:	4a35      	ldr	r2, [pc, #212]	; (8103810 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810373a:	4293      	cmp	r3, r2
 810373c:	d013      	beq.n	8103766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	4a34      	ldr	r2, [pc, #208]	; (8103814 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103744:	4293      	cmp	r3, r2
 8103746:	d00e      	beq.n	8103766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	4a32      	ldr	r2, [pc, #200]	; (8103818 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810374e:	4293      	cmp	r3, r2
 8103750:	d009      	beq.n	8103766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	681b      	ldr	r3, [r3, #0]
 8103756:	4a31      	ldr	r2, [pc, #196]	; (810381c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8103758:	4293      	cmp	r3, r2
 810375a:	d004      	beq.n	8103766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810375c:	687b      	ldr	r3, [r7, #4]
 810375e:	681b      	ldr	r3, [r3, #0]
 8103760:	4a2f      	ldr	r2, [pc, #188]	; (8103820 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8103762:	4293      	cmp	r3, r2
 8103764:	d101      	bne.n	810376a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103766:	2301      	movs	r3, #1
 8103768:	e000      	b.n	810376c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 810376a:	2300      	movs	r3, #0
 810376c:	2b00      	cmp	r3, #0
 810376e:	d01c      	beq.n	81037aa <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	681b      	ldr	r3, [r3, #0]
 8103774:	b2db      	uxtb	r3, r3
 8103776:	3b08      	subs	r3, #8
 8103778:	4a2a      	ldr	r2, [pc, #168]	; (8103824 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810377a:	fba2 2303 	umull	r2, r3, r2, r3
 810377e:	091b      	lsrs	r3, r3, #4
 8103780:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103782:	68fb      	ldr	r3, [r7, #12]
 8103784:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8103788:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 810378c:	009b      	lsls	r3, r3, #2
 810378e:	461a      	mov	r2, r3
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8103794:	687b      	ldr	r3, [r7, #4]
 8103796:	4a24      	ldr	r2, [pc, #144]	; (8103828 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8103798:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810379a:	68fb      	ldr	r3, [r7, #12]
 810379c:	f003 031f 	and.w	r3, r3, #31
 81037a0:	2201      	movs	r2, #1
 81037a2:	409a      	lsls	r2, r3
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81037a8:	e026      	b.n	81037f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	681b      	ldr	r3, [r3, #0]
 81037ae:	b2db      	uxtb	r3, r3
 81037b0:	3b10      	subs	r3, #16
 81037b2:	4a1e      	ldr	r2, [pc, #120]	; (810382c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81037b4:	fba2 2303 	umull	r2, r3, r2, r3
 81037b8:	091b      	lsrs	r3, r3, #4
 81037ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81037bc:	68bb      	ldr	r3, [r7, #8]
 81037be:	4a1c      	ldr	r2, [pc, #112]	; (8103830 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81037c0:	4293      	cmp	r3, r2
 81037c2:	d806      	bhi.n	81037d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81037c4:	68bb      	ldr	r3, [r7, #8]
 81037c6:	4a1b      	ldr	r2, [pc, #108]	; (8103834 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81037c8:	4293      	cmp	r3, r2
 81037ca:	d902      	bls.n	81037d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81037cc:	68fb      	ldr	r3, [r7, #12]
 81037ce:	3308      	adds	r3, #8
 81037d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81037d2:	68fb      	ldr	r3, [r7, #12]
 81037d4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81037d8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81037dc:	009b      	lsls	r3, r3, #2
 81037de:	461a      	mov	r2, r3
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	4a14      	ldr	r2, [pc, #80]	; (8103838 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81037e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81037ea:	68fb      	ldr	r3, [r7, #12]
 81037ec:	f003 031f 	and.w	r3, r3, #31
 81037f0:	2201      	movs	r2, #1
 81037f2:	409a      	lsls	r2, r3
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 81037f8:	bf00      	nop
 81037fa:	3714      	adds	r7, #20
 81037fc:	46bd      	mov	sp, r7
 81037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103802:	4770      	bx	lr
 8103804:	58025408 	.word	0x58025408
 8103808:	5802541c 	.word	0x5802541c
 810380c:	58025430 	.word	0x58025430
 8103810:	58025444 	.word	0x58025444
 8103814:	58025458 	.word	0x58025458
 8103818:	5802546c 	.word	0x5802546c
 810381c:	58025480 	.word	0x58025480
 8103820:	58025494 	.word	0x58025494
 8103824:	cccccccd 	.word	0xcccccccd
 8103828:	58025880 	.word	0x58025880
 810382c:	aaaaaaab 	.word	0xaaaaaaab
 8103830:	400204b8 	.word	0x400204b8
 8103834:	4002040f 	.word	0x4002040f
 8103838:	40020880 	.word	0x40020880

0810383c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810383c:	b480      	push	{r7}
 810383e:	b085      	sub	sp, #20
 8103840:	af00      	add	r7, sp, #0
 8103842:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	685b      	ldr	r3, [r3, #4]
 8103848:	b2db      	uxtb	r3, r3
 810384a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 810384c:	68fb      	ldr	r3, [r7, #12]
 810384e:	2b00      	cmp	r3, #0
 8103850:	d04a      	beq.n	81038e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8103852:	68fb      	ldr	r3, [r7, #12]
 8103854:	2b08      	cmp	r3, #8
 8103856:	d847      	bhi.n	81038e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	4a25      	ldr	r2, [pc, #148]	; (81038f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810385e:	4293      	cmp	r3, r2
 8103860:	d022      	beq.n	81038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	681b      	ldr	r3, [r3, #0]
 8103866:	4a24      	ldr	r2, [pc, #144]	; (81038f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8103868:	4293      	cmp	r3, r2
 810386a:	d01d      	beq.n	81038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	4a22      	ldr	r2, [pc, #136]	; (81038fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8103872:	4293      	cmp	r3, r2
 8103874:	d018      	beq.n	81038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	4a21      	ldr	r2, [pc, #132]	; (8103900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 810387c:	4293      	cmp	r3, r2
 810387e:	d013      	beq.n	81038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	681b      	ldr	r3, [r3, #0]
 8103884:	4a1f      	ldr	r2, [pc, #124]	; (8103904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8103886:	4293      	cmp	r3, r2
 8103888:	d00e      	beq.n	81038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	681b      	ldr	r3, [r3, #0]
 810388e:	4a1e      	ldr	r2, [pc, #120]	; (8103908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8103890:	4293      	cmp	r3, r2
 8103892:	d009      	beq.n	81038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	4a1c      	ldr	r2, [pc, #112]	; (810390c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810389a:	4293      	cmp	r3, r2
 810389c:	d004      	beq.n	81038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	4a1b      	ldr	r2, [pc, #108]	; (8103910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81038a4:	4293      	cmp	r3, r2
 81038a6:	d101      	bne.n	81038ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81038a8:	2301      	movs	r3, #1
 81038aa:	e000      	b.n	81038ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81038ac:	2300      	movs	r3, #0
 81038ae:	2b00      	cmp	r3, #0
 81038b0:	d00a      	beq.n	81038c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81038b2:	68fa      	ldr	r2, [r7, #12]
 81038b4:	4b17      	ldr	r3, [pc, #92]	; (8103914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81038b6:	4413      	add	r3, r2
 81038b8:	009b      	lsls	r3, r3, #2
 81038ba:	461a      	mov	r2, r3
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	4a15      	ldr	r2, [pc, #84]	; (8103918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81038c4:	671a      	str	r2, [r3, #112]	; 0x70
 81038c6:	e009      	b.n	81038dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81038c8:	68fa      	ldr	r2, [r7, #12]
 81038ca:	4b14      	ldr	r3, [pc, #80]	; (810391c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81038cc:	4413      	add	r3, r2
 81038ce:	009b      	lsls	r3, r3, #2
 81038d0:	461a      	mov	r2, r3
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	4a11      	ldr	r2, [pc, #68]	; (8103920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81038da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81038dc:	68fb      	ldr	r3, [r7, #12]
 81038de:	3b01      	subs	r3, #1
 81038e0:	2201      	movs	r2, #1
 81038e2:	409a      	lsls	r2, r3
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81038e8:	bf00      	nop
 81038ea:	3714      	adds	r7, #20
 81038ec:	46bd      	mov	sp, r7
 81038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038f2:	4770      	bx	lr
 81038f4:	58025408 	.word	0x58025408
 81038f8:	5802541c 	.word	0x5802541c
 81038fc:	58025430 	.word	0x58025430
 8103900:	58025444 	.word	0x58025444
 8103904:	58025458 	.word	0x58025458
 8103908:	5802546c 	.word	0x5802546c
 810390c:	58025480 	.word	0x58025480
 8103910:	58025494 	.word	0x58025494
 8103914:	1600963f 	.word	0x1600963f
 8103918:	58025940 	.word	0x58025940
 810391c:	1000823f 	.word	0x1000823f
 8103920:	40020940 	.word	0x40020940

08103924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103924:	b480      	push	{r7}
 8103926:	b089      	sub	sp, #36	; 0x24
 8103928:	af00      	add	r7, sp, #0
 810392a:	6078      	str	r0, [r7, #4]
 810392c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810392e:	2300      	movs	r3, #0
 8103930:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103932:	4b89      	ldr	r3, [pc, #548]	; (8103b58 <HAL_GPIO_Init+0x234>)
 8103934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103936:	e194      	b.n	8103c62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103938:	683b      	ldr	r3, [r7, #0]
 810393a:	681a      	ldr	r2, [r3, #0]
 810393c:	2101      	movs	r1, #1
 810393e:	69fb      	ldr	r3, [r7, #28]
 8103940:	fa01 f303 	lsl.w	r3, r1, r3
 8103944:	4013      	ands	r3, r2
 8103946:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103948:	693b      	ldr	r3, [r7, #16]
 810394a:	2b00      	cmp	r3, #0
 810394c:	f000 8186 	beq.w	8103c5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103950:	683b      	ldr	r3, [r7, #0]
 8103952:	685b      	ldr	r3, [r3, #4]
 8103954:	f003 0303 	and.w	r3, r3, #3
 8103958:	2b01      	cmp	r3, #1
 810395a:	d005      	beq.n	8103968 <HAL_GPIO_Init+0x44>
 810395c:	683b      	ldr	r3, [r7, #0]
 810395e:	685b      	ldr	r3, [r3, #4]
 8103960:	f003 0303 	and.w	r3, r3, #3
 8103964:	2b02      	cmp	r3, #2
 8103966:	d130      	bne.n	81039ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	689b      	ldr	r3, [r3, #8]
 810396c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810396e:	69fb      	ldr	r3, [r7, #28]
 8103970:	005b      	lsls	r3, r3, #1
 8103972:	2203      	movs	r2, #3
 8103974:	fa02 f303 	lsl.w	r3, r2, r3
 8103978:	43db      	mvns	r3, r3
 810397a:	69ba      	ldr	r2, [r7, #24]
 810397c:	4013      	ands	r3, r2
 810397e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103980:	683b      	ldr	r3, [r7, #0]
 8103982:	68da      	ldr	r2, [r3, #12]
 8103984:	69fb      	ldr	r3, [r7, #28]
 8103986:	005b      	lsls	r3, r3, #1
 8103988:	fa02 f303 	lsl.w	r3, r2, r3
 810398c:	69ba      	ldr	r2, [r7, #24]
 810398e:	4313      	orrs	r3, r2
 8103990:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103992:	687b      	ldr	r3, [r7, #4]
 8103994:	69ba      	ldr	r2, [r7, #24]
 8103996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	685b      	ldr	r3, [r3, #4]
 810399c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810399e:	2201      	movs	r2, #1
 81039a0:	69fb      	ldr	r3, [r7, #28]
 81039a2:	fa02 f303 	lsl.w	r3, r2, r3
 81039a6:	43db      	mvns	r3, r3
 81039a8:	69ba      	ldr	r2, [r7, #24]
 81039aa:	4013      	ands	r3, r2
 81039ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81039ae:	683b      	ldr	r3, [r7, #0]
 81039b0:	685b      	ldr	r3, [r3, #4]
 81039b2:	091b      	lsrs	r3, r3, #4
 81039b4:	f003 0201 	and.w	r2, r3, #1
 81039b8:	69fb      	ldr	r3, [r7, #28]
 81039ba:	fa02 f303 	lsl.w	r3, r2, r3
 81039be:	69ba      	ldr	r2, [r7, #24]
 81039c0:	4313      	orrs	r3, r2
 81039c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	69ba      	ldr	r2, [r7, #24]
 81039c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81039ca:	683b      	ldr	r3, [r7, #0]
 81039cc:	685b      	ldr	r3, [r3, #4]
 81039ce:	f003 0303 	and.w	r3, r3, #3
 81039d2:	2b03      	cmp	r3, #3
 81039d4:	d017      	beq.n	8103a06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	68db      	ldr	r3, [r3, #12]
 81039da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81039dc:	69fb      	ldr	r3, [r7, #28]
 81039de:	005b      	lsls	r3, r3, #1
 81039e0:	2203      	movs	r2, #3
 81039e2:	fa02 f303 	lsl.w	r3, r2, r3
 81039e6:	43db      	mvns	r3, r3
 81039e8:	69ba      	ldr	r2, [r7, #24]
 81039ea:	4013      	ands	r3, r2
 81039ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81039ee:	683b      	ldr	r3, [r7, #0]
 81039f0:	689a      	ldr	r2, [r3, #8]
 81039f2:	69fb      	ldr	r3, [r7, #28]
 81039f4:	005b      	lsls	r3, r3, #1
 81039f6:	fa02 f303 	lsl.w	r3, r2, r3
 81039fa:	69ba      	ldr	r2, [r7, #24]
 81039fc:	4313      	orrs	r3, r2
 81039fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	69ba      	ldr	r2, [r7, #24]
 8103a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8103a06:	683b      	ldr	r3, [r7, #0]
 8103a08:	685b      	ldr	r3, [r3, #4]
 8103a0a:	f003 0303 	and.w	r3, r3, #3
 8103a0e:	2b02      	cmp	r3, #2
 8103a10:	d123      	bne.n	8103a5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103a12:	69fb      	ldr	r3, [r7, #28]
 8103a14:	08da      	lsrs	r2, r3, #3
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	3208      	adds	r2, #8
 8103a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103a20:	69fb      	ldr	r3, [r7, #28]
 8103a22:	f003 0307 	and.w	r3, r3, #7
 8103a26:	009b      	lsls	r3, r3, #2
 8103a28:	220f      	movs	r2, #15
 8103a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8103a2e:	43db      	mvns	r3, r3
 8103a30:	69ba      	ldr	r2, [r7, #24]
 8103a32:	4013      	ands	r3, r2
 8103a34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103a36:	683b      	ldr	r3, [r7, #0]
 8103a38:	691a      	ldr	r2, [r3, #16]
 8103a3a:	69fb      	ldr	r3, [r7, #28]
 8103a3c:	f003 0307 	and.w	r3, r3, #7
 8103a40:	009b      	lsls	r3, r3, #2
 8103a42:	fa02 f303 	lsl.w	r3, r2, r3
 8103a46:	69ba      	ldr	r2, [r7, #24]
 8103a48:	4313      	orrs	r3, r2
 8103a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103a4c:	69fb      	ldr	r3, [r7, #28]
 8103a4e:	08da      	lsrs	r2, r3, #3
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	3208      	adds	r2, #8
 8103a54:	69b9      	ldr	r1, [r7, #24]
 8103a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103a60:	69fb      	ldr	r3, [r7, #28]
 8103a62:	005b      	lsls	r3, r3, #1
 8103a64:	2203      	movs	r2, #3
 8103a66:	fa02 f303 	lsl.w	r3, r2, r3
 8103a6a:	43db      	mvns	r3, r3
 8103a6c:	69ba      	ldr	r2, [r7, #24]
 8103a6e:	4013      	ands	r3, r2
 8103a70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103a72:	683b      	ldr	r3, [r7, #0]
 8103a74:	685b      	ldr	r3, [r3, #4]
 8103a76:	f003 0203 	and.w	r2, r3, #3
 8103a7a:	69fb      	ldr	r3, [r7, #28]
 8103a7c:	005b      	lsls	r3, r3, #1
 8103a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8103a82:	69ba      	ldr	r2, [r7, #24]
 8103a84:	4313      	orrs	r3, r2
 8103a86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	69ba      	ldr	r2, [r7, #24]
 8103a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8103a8e:	683b      	ldr	r3, [r7, #0]
 8103a90:	685b      	ldr	r3, [r3, #4]
 8103a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103a96:	2b00      	cmp	r3, #0
 8103a98:	f000 80e0 	beq.w	8103c5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103a9c:	4b2f      	ldr	r3, [pc, #188]	; (8103b5c <HAL_GPIO_Init+0x238>)
 8103a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103aa2:	4a2e      	ldr	r2, [pc, #184]	; (8103b5c <HAL_GPIO_Init+0x238>)
 8103aa4:	f043 0302 	orr.w	r3, r3, #2
 8103aa8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103aac:	4b2b      	ldr	r3, [pc, #172]	; (8103b5c <HAL_GPIO_Init+0x238>)
 8103aae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103ab2:	f003 0302 	and.w	r3, r3, #2
 8103ab6:	60fb      	str	r3, [r7, #12]
 8103ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103aba:	4a29      	ldr	r2, [pc, #164]	; (8103b60 <HAL_GPIO_Init+0x23c>)
 8103abc:	69fb      	ldr	r3, [r7, #28]
 8103abe:	089b      	lsrs	r3, r3, #2
 8103ac0:	3302      	adds	r3, #2
 8103ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103ac8:	69fb      	ldr	r3, [r7, #28]
 8103aca:	f003 0303 	and.w	r3, r3, #3
 8103ace:	009b      	lsls	r3, r3, #2
 8103ad0:	220f      	movs	r2, #15
 8103ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8103ad6:	43db      	mvns	r3, r3
 8103ad8:	69ba      	ldr	r2, [r7, #24]
 8103ada:	4013      	ands	r3, r2
 8103adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	4a20      	ldr	r2, [pc, #128]	; (8103b64 <HAL_GPIO_Init+0x240>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d052      	beq.n	8103b8c <HAL_GPIO_Init+0x268>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	4a1f      	ldr	r2, [pc, #124]	; (8103b68 <HAL_GPIO_Init+0x244>)
 8103aea:	4293      	cmp	r3, r2
 8103aec:	d031      	beq.n	8103b52 <HAL_GPIO_Init+0x22e>
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	4a1e      	ldr	r2, [pc, #120]	; (8103b6c <HAL_GPIO_Init+0x248>)
 8103af2:	4293      	cmp	r3, r2
 8103af4:	d02b      	beq.n	8103b4e <HAL_GPIO_Init+0x22a>
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	4a1d      	ldr	r2, [pc, #116]	; (8103b70 <HAL_GPIO_Init+0x24c>)
 8103afa:	4293      	cmp	r3, r2
 8103afc:	d025      	beq.n	8103b4a <HAL_GPIO_Init+0x226>
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	4a1c      	ldr	r2, [pc, #112]	; (8103b74 <HAL_GPIO_Init+0x250>)
 8103b02:	4293      	cmp	r3, r2
 8103b04:	d01f      	beq.n	8103b46 <HAL_GPIO_Init+0x222>
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	4a1b      	ldr	r2, [pc, #108]	; (8103b78 <HAL_GPIO_Init+0x254>)
 8103b0a:	4293      	cmp	r3, r2
 8103b0c:	d019      	beq.n	8103b42 <HAL_GPIO_Init+0x21e>
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	4a1a      	ldr	r2, [pc, #104]	; (8103b7c <HAL_GPIO_Init+0x258>)
 8103b12:	4293      	cmp	r3, r2
 8103b14:	d013      	beq.n	8103b3e <HAL_GPIO_Init+0x21a>
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	4a19      	ldr	r2, [pc, #100]	; (8103b80 <HAL_GPIO_Init+0x25c>)
 8103b1a:	4293      	cmp	r3, r2
 8103b1c:	d00d      	beq.n	8103b3a <HAL_GPIO_Init+0x216>
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	4a18      	ldr	r2, [pc, #96]	; (8103b84 <HAL_GPIO_Init+0x260>)
 8103b22:	4293      	cmp	r3, r2
 8103b24:	d007      	beq.n	8103b36 <HAL_GPIO_Init+0x212>
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	4a17      	ldr	r2, [pc, #92]	; (8103b88 <HAL_GPIO_Init+0x264>)
 8103b2a:	4293      	cmp	r3, r2
 8103b2c:	d101      	bne.n	8103b32 <HAL_GPIO_Init+0x20e>
 8103b2e:	2309      	movs	r3, #9
 8103b30:	e02d      	b.n	8103b8e <HAL_GPIO_Init+0x26a>
 8103b32:	230a      	movs	r3, #10
 8103b34:	e02b      	b.n	8103b8e <HAL_GPIO_Init+0x26a>
 8103b36:	2308      	movs	r3, #8
 8103b38:	e029      	b.n	8103b8e <HAL_GPIO_Init+0x26a>
 8103b3a:	2307      	movs	r3, #7
 8103b3c:	e027      	b.n	8103b8e <HAL_GPIO_Init+0x26a>
 8103b3e:	2306      	movs	r3, #6
 8103b40:	e025      	b.n	8103b8e <HAL_GPIO_Init+0x26a>
 8103b42:	2305      	movs	r3, #5
 8103b44:	e023      	b.n	8103b8e <HAL_GPIO_Init+0x26a>
 8103b46:	2304      	movs	r3, #4
 8103b48:	e021      	b.n	8103b8e <HAL_GPIO_Init+0x26a>
 8103b4a:	2303      	movs	r3, #3
 8103b4c:	e01f      	b.n	8103b8e <HAL_GPIO_Init+0x26a>
 8103b4e:	2302      	movs	r3, #2
 8103b50:	e01d      	b.n	8103b8e <HAL_GPIO_Init+0x26a>
 8103b52:	2301      	movs	r3, #1
 8103b54:	e01b      	b.n	8103b8e <HAL_GPIO_Init+0x26a>
 8103b56:	bf00      	nop
 8103b58:	580000c0 	.word	0x580000c0
 8103b5c:	58024400 	.word	0x58024400
 8103b60:	58000400 	.word	0x58000400
 8103b64:	58020000 	.word	0x58020000
 8103b68:	58020400 	.word	0x58020400
 8103b6c:	58020800 	.word	0x58020800
 8103b70:	58020c00 	.word	0x58020c00
 8103b74:	58021000 	.word	0x58021000
 8103b78:	58021400 	.word	0x58021400
 8103b7c:	58021800 	.word	0x58021800
 8103b80:	58021c00 	.word	0x58021c00
 8103b84:	58022000 	.word	0x58022000
 8103b88:	58022400 	.word	0x58022400
 8103b8c:	2300      	movs	r3, #0
 8103b8e:	69fa      	ldr	r2, [r7, #28]
 8103b90:	f002 0203 	and.w	r2, r2, #3
 8103b94:	0092      	lsls	r2, r2, #2
 8103b96:	4093      	lsls	r3, r2
 8103b98:	69ba      	ldr	r2, [r7, #24]
 8103b9a:	4313      	orrs	r3, r2
 8103b9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103b9e:	4938      	ldr	r1, [pc, #224]	; (8103c80 <HAL_GPIO_Init+0x35c>)
 8103ba0:	69fb      	ldr	r3, [r7, #28]
 8103ba2:	089b      	lsrs	r3, r3, #2
 8103ba4:	3302      	adds	r3, #2
 8103ba6:	69ba      	ldr	r2, [r7, #24]
 8103ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103bb0:	681b      	ldr	r3, [r3, #0]
 8103bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103bb4:	693b      	ldr	r3, [r7, #16]
 8103bb6:	43db      	mvns	r3, r3
 8103bb8:	69ba      	ldr	r2, [r7, #24]
 8103bba:	4013      	ands	r3, r2
 8103bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103bbe:	683b      	ldr	r3, [r7, #0]
 8103bc0:	685b      	ldr	r3, [r3, #4]
 8103bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103bc6:	2b00      	cmp	r3, #0
 8103bc8:	d003      	beq.n	8103bd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103bca:	69ba      	ldr	r2, [r7, #24]
 8103bcc:	693b      	ldr	r3, [r7, #16]
 8103bce:	4313      	orrs	r3, r2
 8103bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103bd6:	69bb      	ldr	r3, [r7, #24]
 8103bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103bde:	685b      	ldr	r3, [r3, #4]
 8103be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103be2:	693b      	ldr	r3, [r7, #16]
 8103be4:	43db      	mvns	r3, r3
 8103be6:	69ba      	ldr	r2, [r7, #24]
 8103be8:	4013      	ands	r3, r2
 8103bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103bec:	683b      	ldr	r3, [r7, #0]
 8103bee:	685b      	ldr	r3, [r3, #4]
 8103bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103bf4:	2b00      	cmp	r3, #0
 8103bf6:	d003      	beq.n	8103c00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103bf8:	69ba      	ldr	r2, [r7, #24]
 8103bfa:	693b      	ldr	r3, [r7, #16]
 8103bfc:	4313      	orrs	r3, r2
 8103bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103c04:	69bb      	ldr	r3, [r7, #24]
 8103c06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103c08:	697b      	ldr	r3, [r7, #20]
 8103c0a:	685b      	ldr	r3, [r3, #4]
 8103c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103c0e:	693b      	ldr	r3, [r7, #16]
 8103c10:	43db      	mvns	r3, r3
 8103c12:	69ba      	ldr	r2, [r7, #24]
 8103c14:	4013      	ands	r3, r2
 8103c16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103c18:	683b      	ldr	r3, [r7, #0]
 8103c1a:	685b      	ldr	r3, [r3, #4]
 8103c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103c20:	2b00      	cmp	r3, #0
 8103c22:	d003      	beq.n	8103c2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103c24:	69ba      	ldr	r2, [r7, #24]
 8103c26:	693b      	ldr	r3, [r7, #16]
 8103c28:	4313      	orrs	r3, r2
 8103c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103c2c:	697b      	ldr	r3, [r7, #20]
 8103c2e:	69ba      	ldr	r2, [r7, #24]
 8103c30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103c32:	697b      	ldr	r3, [r7, #20]
 8103c34:	681b      	ldr	r3, [r3, #0]
 8103c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103c38:	693b      	ldr	r3, [r7, #16]
 8103c3a:	43db      	mvns	r3, r3
 8103c3c:	69ba      	ldr	r2, [r7, #24]
 8103c3e:	4013      	ands	r3, r2
 8103c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103c42:	683b      	ldr	r3, [r7, #0]
 8103c44:	685b      	ldr	r3, [r3, #4]
 8103c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103c4a:	2b00      	cmp	r3, #0
 8103c4c:	d003      	beq.n	8103c56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103c4e:	69ba      	ldr	r2, [r7, #24]
 8103c50:	693b      	ldr	r3, [r7, #16]
 8103c52:	4313      	orrs	r3, r2
 8103c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103c56:	697b      	ldr	r3, [r7, #20]
 8103c58:	69ba      	ldr	r2, [r7, #24]
 8103c5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103c5c:	69fb      	ldr	r3, [r7, #28]
 8103c5e:	3301      	adds	r3, #1
 8103c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103c62:	683b      	ldr	r3, [r7, #0]
 8103c64:	681a      	ldr	r2, [r3, #0]
 8103c66:	69fb      	ldr	r3, [r7, #28]
 8103c68:	fa22 f303 	lsr.w	r3, r2, r3
 8103c6c:	2b00      	cmp	r3, #0
 8103c6e:	f47f ae63 	bne.w	8103938 <HAL_GPIO_Init+0x14>
  }
}
 8103c72:	bf00      	nop
 8103c74:	bf00      	nop
 8103c76:	3724      	adds	r7, #36	; 0x24
 8103c78:	46bd      	mov	sp, r7
 8103c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c7e:	4770      	bx	lr
 8103c80:	58000400 	.word	0x58000400

08103c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103c84:	b480      	push	{r7}
 8103c86:	b083      	sub	sp, #12
 8103c88:	af00      	add	r7, sp, #0
 8103c8a:	6078      	str	r0, [r7, #4]
 8103c8c:	460b      	mov	r3, r1
 8103c8e:	807b      	strh	r3, [r7, #2]
 8103c90:	4613      	mov	r3, r2
 8103c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103c94:	787b      	ldrb	r3, [r7, #1]
 8103c96:	2b00      	cmp	r3, #0
 8103c98:	d003      	beq.n	8103ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103c9a:	887a      	ldrh	r2, [r7, #2]
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103ca0:	e003      	b.n	8103caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103ca2:	887b      	ldrh	r3, [r7, #2]
 8103ca4:	041a      	lsls	r2, r3, #16
 8103ca6:	687b      	ldr	r3, [r7, #4]
 8103ca8:	619a      	str	r2, [r3, #24]
}
 8103caa:	bf00      	nop
 8103cac:	370c      	adds	r7, #12
 8103cae:	46bd      	mov	sp, r7
 8103cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cb4:	4770      	bx	lr

08103cb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103cb6:	b480      	push	{r7}
 8103cb8:	b085      	sub	sp, #20
 8103cba:	af00      	add	r7, sp, #0
 8103cbc:	6078      	str	r0, [r7, #4]
 8103cbe:	460b      	mov	r3, r1
 8103cc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	695b      	ldr	r3, [r3, #20]
 8103cc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8103cc8:	887a      	ldrh	r2, [r7, #2]
 8103cca:	68fb      	ldr	r3, [r7, #12]
 8103ccc:	4013      	ands	r3, r2
 8103cce:	041a      	lsls	r2, r3, #16
 8103cd0:	68fb      	ldr	r3, [r7, #12]
 8103cd2:	43d9      	mvns	r1, r3
 8103cd4:	887b      	ldrh	r3, [r7, #2]
 8103cd6:	400b      	ands	r3, r1
 8103cd8:	431a      	orrs	r2, r3
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	619a      	str	r2, [r3, #24]
}
 8103cde:	bf00      	nop
 8103ce0:	3714      	adds	r7, #20
 8103ce2:	46bd      	mov	sp, r7
 8103ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ce8:	4770      	bx	lr
	...

08103cec <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103cec:	b480      	push	{r7}
 8103cee:	b083      	sub	sp, #12
 8103cf0:	af00      	add	r7, sp, #0
 8103cf2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103cf4:	4b05      	ldr	r3, [pc, #20]	; (8103d0c <HAL_HSEM_ActivateNotification+0x20>)
 8103cf6:	681a      	ldr	r2, [r3, #0]
 8103cf8:	4904      	ldr	r1, [pc, #16]	; (8103d0c <HAL_HSEM_ActivateNotification+0x20>)
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	4313      	orrs	r3, r2
 8103cfe:	600b      	str	r3, [r1, #0]
#endif
}
 8103d00:	bf00      	nop
 8103d02:	370c      	adds	r7, #12
 8103d04:	46bd      	mov	sp, r7
 8103d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d0a:	4770      	bx	lr
 8103d0c:	58026510 	.word	0x58026510

08103d10 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103d10:	b580      	push	{r7, lr}
 8103d12:	b084      	sub	sp, #16
 8103d14:	af00      	add	r7, sp, #0
 8103d16:	60f8      	str	r0, [r7, #12]
 8103d18:	460b      	mov	r3, r1
 8103d1a:	607a      	str	r2, [r7, #4]
 8103d1c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103d1e:	4b37      	ldr	r3, [pc, #220]	; (8103dfc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103d20:	681b      	ldr	r3, [r3, #0]
 8103d22:	f023 0201 	bic.w	r2, r3, #1
 8103d26:	4935      	ldr	r1, [pc, #212]	; (8103dfc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103d28:	68fb      	ldr	r3, [r7, #12]
 8103d2a:	4313      	orrs	r3, r2
 8103d2c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	2b00      	cmp	r3, #0
 8103d32:	d123      	bne.n	8103d7c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103d34:	f7fd fedc 	bl	8101af0 <HAL_GetCurrentCPUID>
 8103d38:	4603      	mov	r3, r0
 8103d3a:	2b03      	cmp	r3, #3
 8103d3c:	d158      	bne.n	8103df0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103d3e:	4b2f      	ldr	r3, [pc, #188]	; (8103dfc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103d40:	691b      	ldr	r3, [r3, #16]
 8103d42:	4a2e      	ldr	r2, [pc, #184]	; (8103dfc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103d44:	f023 0301 	bic.w	r3, r3, #1
 8103d48:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103d4a:	4b2d      	ldr	r3, [pc, #180]	; (8103e00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103d4c:	691b      	ldr	r3, [r3, #16]
 8103d4e:	4a2c      	ldr	r2, [pc, #176]	; (8103e00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103d50:	f043 0304 	orr.w	r3, r3, #4
 8103d54:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103d56:	f3bf 8f4f 	dsb	sy
}
 8103d5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103d5c:	f3bf 8f6f 	isb	sy
}
 8103d60:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103d62:	7afb      	ldrb	r3, [r7, #11]
 8103d64:	2b01      	cmp	r3, #1
 8103d66:	d101      	bne.n	8103d6c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103d68:	bf30      	wfi
 8103d6a:	e000      	b.n	8103d6e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103d6c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103d6e:	4b24      	ldr	r3, [pc, #144]	; (8103e00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103d70:	691b      	ldr	r3, [r3, #16]
 8103d72:	4a23      	ldr	r2, [pc, #140]	; (8103e00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103d74:	f023 0304 	bic.w	r3, r3, #4
 8103d78:	6113      	str	r3, [r2, #16]
 8103d7a:	e03c      	b.n	8103df6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	2b01      	cmp	r3, #1
 8103d80:	d123      	bne.n	8103dca <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103d82:	f7fd feb5 	bl	8101af0 <HAL_GetCurrentCPUID>
 8103d86:	4603      	mov	r3, r0
 8103d88:	2b01      	cmp	r3, #1
 8103d8a:	d133      	bne.n	8103df4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103d8c:	4b1b      	ldr	r3, [pc, #108]	; (8103dfc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103d8e:	695b      	ldr	r3, [r3, #20]
 8103d90:	4a1a      	ldr	r2, [pc, #104]	; (8103dfc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103d92:	f023 0302 	bic.w	r3, r3, #2
 8103d96:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103d98:	4b19      	ldr	r3, [pc, #100]	; (8103e00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103d9a:	691b      	ldr	r3, [r3, #16]
 8103d9c:	4a18      	ldr	r2, [pc, #96]	; (8103e00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103d9e:	f043 0304 	orr.w	r3, r3, #4
 8103da2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103da4:	f3bf 8f4f 	dsb	sy
}
 8103da8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103daa:	f3bf 8f6f 	isb	sy
}
 8103dae:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103db0:	7afb      	ldrb	r3, [r7, #11]
 8103db2:	2b01      	cmp	r3, #1
 8103db4:	d101      	bne.n	8103dba <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103db6:	bf30      	wfi
 8103db8:	e000      	b.n	8103dbc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103dba:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103dbc:	4b10      	ldr	r3, [pc, #64]	; (8103e00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103dbe:	691b      	ldr	r3, [r3, #16]
 8103dc0:	4a0f      	ldr	r2, [pc, #60]	; (8103e00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103dc2:	f023 0304 	bic.w	r3, r3, #4
 8103dc6:	6113      	str	r3, [r2, #16]
 8103dc8:	e015      	b.n	8103df6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103dca:	f7fd fe91 	bl	8101af0 <HAL_GetCurrentCPUID>
 8103dce:	4603      	mov	r3, r0
 8103dd0:	2b03      	cmp	r3, #3
 8103dd2:	d106      	bne.n	8103de2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103dd4:	4b09      	ldr	r3, [pc, #36]	; (8103dfc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103dd6:	691b      	ldr	r3, [r3, #16]
 8103dd8:	4a08      	ldr	r2, [pc, #32]	; (8103dfc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103dda:	f023 0304 	bic.w	r3, r3, #4
 8103dde:	6113      	str	r3, [r2, #16]
 8103de0:	e009      	b.n	8103df6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103de2:	4b06      	ldr	r3, [pc, #24]	; (8103dfc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103de4:	695b      	ldr	r3, [r3, #20]
 8103de6:	4a05      	ldr	r2, [pc, #20]	; (8103dfc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103de8:	f023 0304 	bic.w	r3, r3, #4
 8103dec:	6153      	str	r3, [r2, #20]
 8103dee:	e002      	b.n	8103df6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103df0:	bf00      	nop
 8103df2:	e000      	b.n	8103df6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103df4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103df6:	3710      	adds	r7, #16
 8103df8:	46bd      	mov	sp, r7
 8103dfa:	bd80      	pop	{r7, pc}
 8103dfc:	58024800 	.word	0x58024800
 8103e00:	e000ed00 	.word	0xe000ed00

08103e04 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103e04:	b580      	push	{r7, lr}
 8103e06:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103e08:	f7fd fe72 	bl	8101af0 <HAL_GetCurrentCPUID>
 8103e0c:	4603      	mov	r3, r0
 8103e0e:	2b03      	cmp	r3, #3
 8103e10:	d101      	bne.n	8103e16 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103e12:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103e14:	e001      	b.n	8103e1a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103e16:	bf40      	sev
    __WFE ();
 8103e18:	bf20      	wfe
}
 8103e1a:	bf00      	nop
 8103e1c:	bd80      	pop	{r7, pc}
	...

08103e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103e20:	b480      	push	{r7}
 8103e22:	b089      	sub	sp, #36	; 0x24
 8103e24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103e26:	4bb3      	ldr	r3, [pc, #716]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e28:	691b      	ldr	r3, [r3, #16]
 8103e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103e2e:	2b18      	cmp	r3, #24
 8103e30:	f200 8155 	bhi.w	81040de <HAL_RCC_GetSysClockFreq+0x2be>
 8103e34:	a201      	add	r2, pc, #4	; (adr r2, 8103e3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e3a:	bf00      	nop
 8103e3c:	08103ea1 	.word	0x08103ea1
 8103e40:	081040df 	.word	0x081040df
 8103e44:	081040df 	.word	0x081040df
 8103e48:	081040df 	.word	0x081040df
 8103e4c:	081040df 	.word	0x081040df
 8103e50:	081040df 	.word	0x081040df
 8103e54:	081040df 	.word	0x081040df
 8103e58:	081040df 	.word	0x081040df
 8103e5c:	08103ec7 	.word	0x08103ec7
 8103e60:	081040df 	.word	0x081040df
 8103e64:	081040df 	.word	0x081040df
 8103e68:	081040df 	.word	0x081040df
 8103e6c:	081040df 	.word	0x081040df
 8103e70:	081040df 	.word	0x081040df
 8103e74:	081040df 	.word	0x081040df
 8103e78:	081040df 	.word	0x081040df
 8103e7c:	08103ecd 	.word	0x08103ecd
 8103e80:	081040df 	.word	0x081040df
 8103e84:	081040df 	.word	0x081040df
 8103e88:	081040df 	.word	0x081040df
 8103e8c:	081040df 	.word	0x081040df
 8103e90:	081040df 	.word	0x081040df
 8103e94:	081040df 	.word	0x081040df
 8103e98:	081040df 	.word	0x081040df
 8103e9c:	08103ed3 	.word	0x08103ed3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103ea0:	4b94      	ldr	r3, [pc, #592]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	f003 0320 	and.w	r3, r3, #32
 8103ea8:	2b00      	cmp	r3, #0
 8103eaa:	d009      	beq.n	8103ec0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103eac:	4b91      	ldr	r3, [pc, #580]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	08db      	lsrs	r3, r3, #3
 8103eb2:	f003 0303 	and.w	r3, r3, #3
 8103eb6:	4a90      	ldr	r2, [pc, #576]	; (81040f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8103ebc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103ebe:	e111      	b.n	81040e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103ec0:	4b8d      	ldr	r3, [pc, #564]	; (81040f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103ec2:	61bb      	str	r3, [r7, #24]
    break;
 8103ec4:	e10e      	b.n	81040e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103ec6:	4b8d      	ldr	r3, [pc, #564]	; (81040fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103ec8:	61bb      	str	r3, [r7, #24]
    break;
 8103eca:	e10b      	b.n	81040e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103ecc:	4b8c      	ldr	r3, [pc, #560]	; (8104100 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103ece:	61bb      	str	r3, [r7, #24]
    break;
 8103ed0:	e108      	b.n	81040e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103ed2:	4b88      	ldr	r3, [pc, #544]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ed6:	f003 0303 	and.w	r3, r3, #3
 8103eda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103edc:	4b85      	ldr	r3, [pc, #532]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ee0:	091b      	lsrs	r3, r3, #4
 8103ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103ee6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103ee8:	4b82      	ldr	r3, [pc, #520]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103eec:	f003 0301 	and.w	r3, r3, #1
 8103ef0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103ef2:	4b80      	ldr	r3, [pc, #512]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103ef6:	08db      	lsrs	r3, r3, #3
 8103ef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103efc:	68fa      	ldr	r2, [r7, #12]
 8103efe:	fb02 f303 	mul.w	r3, r2, r3
 8103f02:	ee07 3a90 	vmov	s15, r3
 8103f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103f0e:	693b      	ldr	r3, [r7, #16]
 8103f10:	2b00      	cmp	r3, #0
 8103f12:	f000 80e1 	beq.w	81040d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103f16:	697b      	ldr	r3, [r7, #20]
 8103f18:	2b02      	cmp	r3, #2
 8103f1a:	f000 8083 	beq.w	8104024 <HAL_RCC_GetSysClockFreq+0x204>
 8103f1e:	697b      	ldr	r3, [r7, #20]
 8103f20:	2b02      	cmp	r3, #2
 8103f22:	f200 80a1 	bhi.w	8104068 <HAL_RCC_GetSysClockFreq+0x248>
 8103f26:	697b      	ldr	r3, [r7, #20]
 8103f28:	2b00      	cmp	r3, #0
 8103f2a:	d003      	beq.n	8103f34 <HAL_RCC_GetSysClockFreq+0x114>
 8103f2c:	697b      	ldr	r3, [r7, #20]
 8103f2e:	2b01      	cmp	r3, #1
 8103f30:	d056      	beq.n	8103fe0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103f32:	e099      	b.n	8104068 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103f34:	4b6f      	ldr	r3, [pc, #444]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	f003 0320 	and.w	r3, r3, #32
 8103f3c:	2b00      	cmp	r3, #0
 8103f3e:	d02d      	beq.n	8103f9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103f40:	4b6c      	ldr	r3, [pc, #432]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	08db      	lsrs	r3, r3, #3
 8103f46:	f003 0303 	and.w	r3, r3, #3
 8103f4a:	4a6b      	ldr	r2, [pc, #428]	; (81040f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8103f50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	ee07 3a90 	vmov	s15, r3
 8103f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f5c:	693b      	ldr	r3, [r7, #16]
 8103f5e:	ee07 3a90 	vmov	s15, r3
 8103f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f6a:	4b62      	ldr	r3, [pc, #392]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f72:	ee07 3a90 	vmov	s15, r3
 8103f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103f7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104104 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103f9a:	e087      	b.n	81040ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103f9c:	693b      	ldr	r3, [r7, #16]
 8103f9e:	ee07 3a90 	vmov	s15, r3
 8103fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103fa6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104108 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103fae:	4b51      	ldr	r3, [pc, #324]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103fb6:	ee07 3a90 	vmov	s15, r3
 8103fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8103fc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104104 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103fde:	e065      	b.n	81040ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103fe0:	693b      	ldr	r3, [r7, #16]
 8103fe2:	ee07 3a90 	vmov	s15, r3
 8103fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103fea:	eddf 6a48 	vldr	s13, [pc, #288]	; 810410c <HAL_RCC_GetSysClockFreq+0x2ec>
 8103fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ff2:	4b40      	ldr	r3, [pc, #256]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ffa:	ee07 3a90 	vmov	s15, r3
 8103ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104002:	ed97 6a02 	vldr	s12, [r7, #8]
 8104006:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104104 <HAL_RCC_GetSysClockFreq+0x2e4>
 810400a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810400e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810401e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104022:	e043      	b.n	81040ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104024:	693b      	ldr	r3, [r7, #16]
 8104026:	ee07 3a90 	vmov	s15, r3
 810402a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810402e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104110 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104036:	4b2f      	ldr	r3, [pc, #188]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810403a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810403e:	ee07 3a90 	vmov	s15, r3
 8104042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104046:	ed97 6a02 	vldr	s12, [r7, #8]
 810404a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104104 <HAL_RCC_GetSysClockFreq+0x2e4>
 810404e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810405a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810405e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104066:	e021      	b.n	81040ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104068:	693b      	ldr	r3, [r7, #16]
 810406a:	ee07 3a90 	vmov	s15, r3
 810406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104072:	eddf 6a26 	vldr	s13, [pc, #152]	; 810410c <HAL_RCC_GetSysClockFreq+0x2ec>
 8104076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810407a:	4b1e      	ldr	r3, [pc, #120]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810407e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104082:	ee07 3a90 	vmov	s15, r3
 8104086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810408a:	ed97 6a02 	vldr	s12, [r7, #8]
 810408e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104104 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810409a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810409e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81040a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81040a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81040aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81040ac:	4b11      	ldr	r3, [pc, #68]	; (81040f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81040b0:	0a5b      	lsrs	r3, r3, #9
 81040b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81040b6:	3301      	adds	r3, #1
 81040b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81040ba:	683b      	ldr	r3, [r7, #0]
 81040bc:	ee07 3a90 	vmov	s15, r3
 81040c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81040c4:	edd7 6a07 	vldr	s13, [r7, #28]
 81040c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81040cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81040d0:	ee17 3a90 	vmov	r3, s15
 81040d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81040d6:	e005      	b.n	81040e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81040d8:	2300      	movs	r3, #0
 81040da:	61bb      	str	r3, [r7, #24]
    break;
 81040dc:	e002      	b.n	81040e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81040de:	4b07      	ldr	r3, [pc, #28]	; (81040fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81040e0:	61bb      	str	r3, [r7, #24]
    break;
 81040e2:	bf00      	nop
  }

  return sysclockfreq;
 81040e4:	69bb      	ldr	r3, [r7, #24]
}
 81040e6:	4618      	mov	r0, r3
 81040e8:	3724      	adds	r7, #36	; 0x24
 81040ea:	46bd      	mov	sp, r7
 81040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040f0:	4770      	bx	lr
 81040f2:	bf00      	nop
 81040f4:	58024400 	.word	0x58024400
 81040f8:	03d09000 	.word	0x03d09000
 81040fc:	003d0900 	.word	0x003d0900
 8104100:	007a1200 	.word	0x007a1200
 8104104:	46000000 	.word	0x46000000
 8104108:	4c742400 	.word	0x4c742400
 810410c:	4a742400 	.word	0x4a742400
 8104110:	4af42400 	.word	0x4af42400

08104114 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104114:	b580      	push	{r7, lr}
 8104116:	b084      	sub	sp, #16
 8104118:	af00      	add	r7, sp, #0
 810411a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	2b00      	cmp	r3, #0
 8104120:	d101      	bne.n	8104126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8104122:	2301      	movs	r3, #1
 8104124:	e0f1      	b.n	810430a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	2200      	movs	r2, #0
 810412a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	4a78      	ldr	r2, [pc, #480]	; (8104314 <HAL_SPI_Init+0x200>)
 8104132:	4293      	cmp	r3, r2
 8104134:	d00f      	beq.n	8104156 <HAL_SPI_Init+0x42>
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	681b      	ldr	r3, [r3, #0]
 810413a:	4a77      	ldr	r2, [pc, #476]	; (8104318 <HAL_SPI_Init+0x204>)
 810413c:	4293      	cmp	r3, r2
 810413e:	d00a      	beq.n	8104156 <HAL_SPI_Init+0x42>
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	681b      	ldr	r3, [r3, #0]
 8104144:	4a75      	ldr	r2, [pc, #468]	; (810431c <HAL_SPI_Init+0x208>)
 8104146:	4293      	cmp	r3, r2
 8104148:	d005      	beq.n	8104156 <HAL_SPI_Init+0x42>
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	68db      	ldr	r3, [r3, #12]
 810414e:	2b0f      	cmp	r3, #15
 8104150:	d901      	bls.n	8104156 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8104152:	2301      	movs	r3, #1
 8104154:	e0d9      	b.n	810430a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8104156:	6878      	ldr	r0, [r7, #4]
 8104158:	f000 ffd2 	bl	8105100 <SPI_GetPacketSize>
 810415c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	681b      	ldr	r3, [r3, #0]
 8104162:	4a6c      	ldr	r2, [pc, #432]	; (8104314 <HAL_SPI_Init+0x200>)
 8104164:	4293      	cmp	r3, r2
 8104166:	d00c      	beq.n	8104182 <HAL_SPI_Init+0x6e>
 8104168:	687b      	ldr	r3, [r7, #4]
 810416a:	681b      	ldr	r3, [r3, #0]
 810416c:	4a6a      	ldr	r2, [pc, #424]	; (8104318 <HAL_SPI_Init+0x204>)
 810416e:	4293      	cmp	r3, r2
 8104170:	d007      	beq.n	8104182 <HAL_SPI_Init+0x6e>
 8104172:	687b      	ldr	r3, [r7, #4]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	4a69      	ldr	r2, [pc, #420]	; (810431c <HAL_SPI_Init+0x208>)
 8104178:	4293      	cmp	r3, r2
 810417a:	d002      	beq.n	8104182 <HAL_SPI_Init+0x6e>
 810417c:	68fb      	ldr	r3, [r7, #12]
 810417e:	2b08      	cmp	r3, #8
 8104180:	d811      	bhi.n	81041a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104186:	4a63      	ldr	r2, [pc, #396]	; (8104314 <HAL_SPI_Init+0x200>)
 8104188:	4293      	cmp	r3, r2
 810418a:	d009      	beq.n	81041a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	681b      	ldr	r3, [r3, #0]
 8104190:	4a61      	ldr	r2, [pc, #388]	; (8104318 <HAL_SPI_Init+0x204>)
 8104192:	4293      	cmp	r3, r2
 8104194:	d004      	beq.n	81041a0 <HAL_SPI_Init+0x8c>
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	681b      	ldr	r3, [r3, #0]
 810419a:	4a60      	ldr	r2, [pc, #384]	; (810431c <HAL_SPI_Init+0x208>)
 810419c:	4293      	cmp	r3, r2
 810419e:	d104      	bne.n	81041aa <HAL_SPI_Init+0x96>
 81041a0:	68fb      	ldr	r3, [r7, #12]
 81041a2:	2b10      	cmp	r3, #16
 81041a4:	d901      	bls.n	81041aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81041a6:	2301      	movs	r3, #1
 81041a8:	e0af      	b.n	810430a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81041b0:	b2db      	uxtb	r3, r3
 81041b2:	2b00      	cmp	r3, #0
 81041b4:	d106      	bne.n	81041c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	2200      	movs	r2, #0
 81041ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81041be:	6878      	ldr	r0, [r7, #4]
 81041c0:	f7fd f966 	bl	8101490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	2202      	movs	r2, #2
 81041c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	681a      	ldr	r2, [r3, #0]
 81041d2:	687b      	ldr	r3, [r7, #4]
 81041d4:	681b      	ldr	r3, [r3, #0]
 81041d6:	f022 0201 	bic.w	r2, r2, #1
 81041da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	681b      	ldr	r3, [r3, #0]
 81041e0:	689b      	ldr	r3, [r3, #8]
 81041e2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 81041e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81041e8:	687b      	ldr	r3, [r7, #4]
 81041ea:	699b      	ldr	r3, [r3, #24]
 81041ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81041f0:	d119      	bne.n	8104226 <HAL_SPI_Init+0x112>
 81041f2:	687b      	ldr	r3, [r7, #4]
 81041f4:	685b      	ldr	r3, [r3, #4]
 81041f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81041fa:	d103      	bne.n	8104204 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81041fc:	687b      	ldr	r3, [r7, #4]
 81041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104200:	2b00      	cmp	r3, #0
 8104202:	d008      	beq.n	8104216 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104208:	2b00      	cmp	r3, #0
 810420a:	d10c      	bne.n	8104226 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810420c:	687b      	ldr	r3, [r7, #4]
 810420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104210:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104214:	d107      	bne.n	8104226 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	681b      	ldr	r3, [r3, #0]
 810421a:	681a      	ldr	r2, [r3, #0]
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	681b      	ldr	r3, [r3, #0]
 8104220:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8104224:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	69da      	ldr	r2, [r3, #28]
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810422e:	431a      	orrs	r2, r3
 8104230:	68bb      	ldr	r3, [r7, #8]
 8104232:	431a      	orrs	r2, r3
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104238:	ea42 0103 	orr.w	r1, r2, r3
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	68da      	ldr	r2, [r3, #12]
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	430a      	orrs	r2, r1
 8104246:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810424c:	687b      	ldr	r3, [r7, #4]
 810424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104250:	431a      	orrs	r2, r3
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104256:	431a      	orrs	r2, r3
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	699b      	ldr	r3, [r3, #24]
 810425c:	431a      	orrs	r2, r3
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	691b      	ldr	r3, [r3, #16]
 8104262:	431a      	orrs	r2, r3
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	695b      	ldr	r3, [r3, #20]
 8104268:	431a      	orrs	r2, r3
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	6a1b      	ldr	r3, [r3, #32]
 810426e:	431a      	orrs	r2, r3
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	685b      	ldr	r3, [r3, #4]
 8104274:	431a      	orrs	r2, r3
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810427a:	431a      	orrs	r2, r3
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	689b      	ldr	r3, [r3, #8]
 8104280:	431a      	orrs	r2, r3
 8104282:	687b      	ldr	r3, [r7, #4]
 8104284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104286:	ea42 0103 	orr.w	r1, r2, r3
 810428a:	687b      	ldr	r3, [r7, #4]
 810428c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	681b      	ldr	r3, [r3, #0]
 8104292:	430a      	orrs	r2, r1
 8104294:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	685b      	ldr	r3, [r3, #4]
 810429a:	2b00      	cmp	r3, #0
 810429c:	d113      	bne.n	81042c6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	689b      	ldr	r3, [r3, #8]
 81042a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81042b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81042b2:	687b      	ldr	r3, [r7, #4]
 81042b4:	681b      	ldr	r3, [r3, #0]
 81042b6:	689b      	ldr	r3, [r3, #8]
 81042b8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	681b      	ldr	r3, [r3, #0]
 81042c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 81042c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	f022 0201 	bic.w	r2, r2, #1
 81042d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	685b      	ldr	r3, [r3, #4]
 81042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81042de:	2b00      	cmp	r3, #0
 81042e0:	d00a      	beq.n	81042f8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	681b      	ldr	r3, [r3, #0]
 81042e6:	68db      	ldr	r3, [r3, #12]
 81042e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	681b      	ldr	r3, [r3, #0]
 81042f4:	430a      	orrs	r2, r1
 81042f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	2200      	movs	r2, #0
 81042fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	2201      	movs	r2, #1
 8104304:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8104308:	2300      	movs	r3, #0
}
 810430a:	4618      	mov	r0, r3
 810430c:	3710      	adds	r7, #16
 810430e:	46bd      	mov	sp, r7
 8104310:	bd80      	pop	{r7, pc}
 8104312:	bf00      	nop
 8104314:	40013000 	.word	0x40013000
 8104318:	40003800 	.word	0x40003800
 810431c:	40003c00 	.word	0x40003c00

08104320 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104320:	b580      	push	{r7, lr}
 8104322:	b08a      	sub	sp, #40	; 0x28
 8104324:	af02      	add	r7, sp, #8
 8104326:	60f8      	str	r0, [r7, #12]
 8104328:	60b9      	str	r1, [r7, #8]
 810432a:	603b      	str	r3, [r7, #0]
 810432c:	4613      	mov	r3, r2
 810432e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104330:	68fb      	ldr	r3, [r7, #12]
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	3320      	adds	r3, #32
 8104336:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104338:	2300      	movs	r3, #0
 810433a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 810433c:	68fb      	ldr	r3, [r7, #12]
 810433e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104342:	2b01      	cmp	r3, #1
 8104344:	d101      	bne.n	810434a <HAL_SPI_Transmit+0x2a>
 8104346:	2302      	movs	r3, #2
 8104348:	e1d4      	b.n	81046f4 <HAL_SPI_Transmit+0x3d4>
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	2201      	movs	r2, #1
 810434e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104352:	f7fd fa8d 	bl	8101870 <HAL_GetTick>
 8104356:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8104358:	68fb      	ldr	r3, [r7, #12]
 810435a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810435e:	b2db      	uxtb	r3, r3
 8104360:	2b01      	cmp	r3, #1
 8104362:	d007      	beq.n	8104374 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8104364:	2302      	movs	r3, #2
 8104366:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	2200      	movs	r2, #0
 810436c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104370:	7efb      	ldrb	r3, [r7, #27]
 8104372:	e1bf      	b.n	81046f4 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8104374:	68bb      	ldr	r3, [r7, #8]
 8104376:	2b00      	cmp	r3, #0
 8104378:	d002      	beq.n	8104380 <HAL_SPI_Transmit+0x60>
 810437a:	88fb      	ldrh	r3, [r7, #6]
 810437c:	2b00      	cmp	r3, #0
 810437e:	d107      	bne.n	8104390 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8104380:	2301      	movs	r3, #1
 8104382:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8104384:	68fb      	ldr	r3, [r7, #12]
 8104386:	2200      	movs	r2, #0
 8104388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810438c:	7efb      	ldrb	r3, [r7, #27]
 810438e:	e1b1      	b.n	81046f4 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	2203      	movs	r2, #3
 8104394:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104398:	68fb      	ldr	r3, [r7, #12]
 810439a:	2200      	movs	r2, #0
 810439c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 81043a0:	68fb      	ldr	r3, [r7, #12]
 81043a2:	68ba      	ldr	r2, [r7, #8]
 81043a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 81043a6:	68fb      	ldr	r3, [r7, #12]
 81043a8:	88fa      	ldrh	r2, [r7, #6]
 81043aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 81043ae:	68fb      	ldr	r3, [r7, #12]
 81043b0:	88fa      	ldrh	r2, [r7, #6]
 81043b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 81043b6:	68fb      	ldr	r3, [r7, #12]
 81043b8:	2200      	movs	r2, #0
 81043ba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 81043bc:	68fb      	ldr	r3, [r7, #12]
 81043be:	2200      	movs	r2, #0
 81043c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 81043c4:	68fb      	ldr	r3, [r7, #12]
 81043c6:	2200      	movs	r2, #0
 81043c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 81043cc:	68fb      	ldr	r3, [r7, #12]
 81043ce:	2200      	movs	r2, #0
 81043d0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 81043d2:	68fb      	ldr	r3, [r7, #12]
 81043d4:	2200      	movs	r2, #0
 81043d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 81043d8:	68fb      	ldr	r3, [r7, #12]
 81043da:	689b      	ldr	r3, [r3, #8]
 81043dc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 81043e0:	d107      	bne.n	81043f2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 81043e2:	68fb      	ldr	r3, [r7, #12]
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	681a      	ldr	r2, [r3, #0]
 81043e8:	68fb      	ldr	r3, [r7, #12]
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81043f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81043f2:	68fb      	ldr	r3, [r7, #12]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	685b      	ldr	r3, [r3, #4]
 81043f8:	0c1b      	lsrs	r3, r3, #16
 81043fa:	041b      	lsls	r3, r3, #16
 81043fc:	88f9      	ldrh	r1, [r7, #6]
 81043fe:	68fa      	ldr	r2, [r7, #12]
 8104400:	6812      	ldr	r2, [r2, #0]
 8104402:	430b      	orrs	r3, r1
 8104404:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104406:	68fb      	ldr	r3, [r7, #12]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	681a      	ldr	r2, [r3, #0]
 810440c:	68fb      	ldr	r3, [r7, #12]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	f042 0201 	orr.w	r2, r2, #1
 8104414:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104416:	68fb      	ldr	r3, [r7, #12]
 8104418:	685b      	ldr	r3, [r3, #4]
 810441a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810441e:	d107      	bne.n	8104430 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104420:	68fb      	ldr	r3, [r7, #12]
 8104422:	681b      	ldr	r3, [r3, #0]
 8104424:	681a      	ldr	r2, [r3, #0]
 8104426:	68fb      	ldr	r3, [r7, #12]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810442e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104430:	68fb      	ldr	r3, [r7, #12]
 8104432:	68db      	ldr	r3, [r3, #12]
 8104434:	2b0f      	cmp	r3, #15
 8104436:	d947      	bls.n	81044c8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8104438:	e03f      	b.n	81044ba <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810443a:	68fb      	ldr	r3, [r7, #12]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	695b      	ldr	r3, [r3, #20]
 8104440:	f003 0302 	and.w	r3, r3, #2
 8104444:	2b02      	cmp	r3, #2
 8104446:	d114      	bne.n	8104472 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104448:	68fb      	ldr	r3, [r7, #12]
 810444a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810444c:	68fb      	ldr	r3, [r7, #12]
 810444e:	681b      	ldr	r3, [r3, #0]
 8104450:	6812      	ldr	r2, [r2, #0]
 8104452:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104454:	68fb      	ldr	r3, [r7, #12]
 8104456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104458:	1d1a      	adds	r2, r3, #4
 810445a:	68fb      	ldr	r3, [r7, #12]
 810445c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104464:	b29b      	uxth	r3, r3
 8104466:	3b01      	subs	r3, #1
 8104468:	b29a      	uxth	r2, r3
 810446a:	68fb      	ldr	r3, [r7, #12]
 810446c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104470:	e023      	b.n	81044ba <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104472:	f7fd f9fd 	bl	8101870 <HAL_GetTick>
 8104476:	4602      	mov	r2, r0
 8104478:	697b      	ldr	r3, [r7, #20]
 810447a:	1ad3      	subs	r3, r2, r3
 810447c:	683a      	ldr	r2, [r7, #0]
 810447e:	429a      	cmp	r2, r3
 8104480:	d803      	bhi.n	810448a <HAL_SPI_Transmit+0x16a>
 8104482:	683b      	ldr	r3, [r7, #0]
 8104484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104488:	d102      	bne.n	8104490 <HAL_SPI_Transmit+0x170>
 810448a:	683b      	ldr	r3, [r7, #0]
 810448c:	2b00      	cmp	r3, #0
 810448e:	d114      	bne.n	81044ba <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104490:	68f8      	ldr	r0, [r7, #12]
 8104492:	f000 fd67 	bl	8104f64 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104496:	68fb      	ldr	r3, [r7, #12]
 8104498:	2200      	movs	r2, #0
 810449a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810449e:	68fb      	ldr	r3, [r7, #12]
 81044a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81044a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81044a8:	68fb      	ldr	r3, [r7, #12]
 81044aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81044ae:	68fb      	ldr	r3, [r7, #12]
 81044b0:	2201      	movs	r2, #1
 81044b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81044b6:	2303      	movs	r3, #3
 81044b8:	e11c      	b.n	81046f4 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81044ba:	68fb      	ldr	r3, [r7, #12]
 81044bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81044c0:	b29b      	uxth	r3, r3
 81044c2:	2b00      	cmp	r3, #0
 81044c4:	d1b9      	bne.n	810443a <HAL_SPI_Transmit+0x11a>
 81044c6:	e0ef      	b.n	81046a8 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81044c8:	68fb      	ldr	r3, [r7, #12]
 81044ca:	68db      	ldr	r3, [r3, #12]
 81044cc:	2b07      	cmp	r3, #7
 81044ce:	f240 80e4 	bls.w	810469a <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81044d2:	e05d      	b.n	8104590 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81044d4:	68fb      	ldr	r3, [r7, #12]
 81044d6:	681b      	ldr	r3, [r3, #0]
 81044d8:	695b      	ldr	r3, [r3, #20]
 81044da:	f003 0302 	and.w	r3, r3, #2
 81044de:	2b02      	cmp	r3, #2
 81044e0:	d132      	bne.n	8104548 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81044e2:	68fb      	ldr	r3, [r7, #12]
 81044e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81044e8:	b29b      	uxth	r3, r3
 81044ea:	2b01      	cmp	r3, #1
 81044ec:	d918      	bls.n	8104520 <HAL_SPI_Transmit+0x200>
 81044ee:	68fb      	ldr	r3, [r7, #12]
 81044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81044f2:	2b00      	cmp	r3, #0
 81044f4:	d014      	beq.n	8104520 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81044f6:	68fb      	ldr	r3, [r7, #12]
 81044f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81044fa:	68fb      	ldr	r3, [r7, #12]
 81044fc:	681b      	ldr	r3, [r3, #0]
 81044fe:	6812      	ldr	r2, [r2, #0]
 8104500:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104502:	68fb      	ldr	r3, [r7, #12]
 8104504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104506:	1d1a      	adds	r2, r3, #4
 8104508:	68fb      	ldr	r3, [r7, #12]
 810450a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810450c:	68fb      	ldr	r3, [r7, #12]
 810450e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104512:	b29b      	uxth	r3, r3
 8104514:	3b02      	subs	r3, #2
 8104516:	b29a      	uxth	r2, r3
 8104518:	68fb      	ldr	r3, [r7, #12]
 810451a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810451e:	e037      	b.n	8104590 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104520:	68fb      	ldr	r3, [r7, #12]
 8104522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104524:	881a      	ldrh	r2, [r3, #0]
 8104526:	69fb      	ldr	r3, [r7, #28]
 8104528:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810452e:	1c9a      	adds	r2, r3, #2
 8104530:	68fb      	ldr	r3, [r7, #12]
 8104532:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104534:	68fb      	ldr	r3, [r7, #12]
 8104536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810453a:	b29b      	uxth	r3, r3
 810453c:	3b01      	subs	r3, #1
 810453e:	b29a      	uxth	r2, r3
 8104540:	68fb      	ldr	r3, [r7, #12]
 8104542:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104546:	e023      	b.n	8104590 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104548:	f7fd f992 	bl	8101870 <HAL_GetTick>
 810454c:	4602      	mov	r2, r0
 810454e:	697b      	ldr	r3, [r7, #20]
 8104550:	1ad3      	subs	r3, r2, r3
 8104552:	683a      	ldr	r2, [r7, #0]
 8104554:	429a      	cmp	r2, r3
 8104556:	d803      	bhi.n	8104560 <HAL_SPI_Transmit+0x240>
 8104558:	683b      	ldr	r3, [r7, #0]
 810455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810455e:	d102      	bne.n	8104566 <HAL_SPI_Transmit+0x246>
 8104560:	683b      	ldr	r3, [r7, #0]
 8104562:	2b00      	cmp	r3, #0
 8104564:	d114      	bne.n	8104590 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104566:	68f8      	ldr	r0, [r7, #12]
 8104568:	f000 fcfc 	bl	8104f64 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810456c:	68fb      	ldr	r3, [r7, #12]
 810456e:	2200      	movs	r2, #0
 8104570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104574:	68fb      	ldr	r3, [r7, #12]
 8104576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810457a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810457e:	68fb      	ldr	r3, [r7, #12]
 8104580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104584:	68fb      	ldr	r3, [r7, #12]
 8104586:	2201      	movs	r2, #1
 8104588:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810458c:	2303      	movs	r3, #3
 810458e:	e0b1      	b.n	81046f4 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8104590:	68fb      	ldr	r3, [r7, #12]
 8104592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104596:	b29b      	uxth	r3, r3
 8104598:	2b00      	cmp	r3, #0
 810459a:	d19b      	bne.n	81044d4 <HAL_SPI_Transmit+0x1b4>
 810459c:	e084      	b.n	81046a8 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810459e:	68fb      	ldr	r3, [r7, #12]
 81045a0:	681b      	ldr	r3, [r3, #0]
 81045a2:	695b      	ldr	r3, [r3, #20]
 81045a4:	f003 0302 	and.w	r3, r3, #2
 81045a8:	2b02      	cmp	r3, #2
 81045aa:	d152      	bne.n	8104652 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81045ac:	68fb      	ldr	r3, [r7, #12]
 81045ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81045b2:	b29b      	uxth	r3, r3
 81045b4:	2b03      	cmp	r3, #3
 81045b6:	d918      	bls.n	81045ea <HAL_SPI_Transmit+0x2ca>
 81045b8:	68fb      	ldr	r3, [r7, #12]
 81045ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81045bc:	2b40      	cmp	r3, #64	; 0x40
 81045be:	d914      	bls.n	81045ea <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81045c0:	68fb      	ldr	r3, [r7, #12]
 81045c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81045c4:	68fb      	ldr	r3, [r7, #12]
 81045c6:	681b      	ldr	r3, [r3, #0]
 81045c8:	6812      	ldr	r2, [r2, #0]
 81045ca:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81045cc:	68fb      	ldr	r3, [r7, #12]
 81045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81045d0:	1d1a      	adds	r2, r3, #4
 81045d2:	68fb      	ldr	r3, [r7, #12]
 81045d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 81045d6:	68fb      	ldr	r3, [r7, #12]
 81045d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81045dc:	b29b      	uxth	r3, r3
 81045de:	3b04      	subs	r3, #4
 81045e0:	b29a      	uxth	r2, r3
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81045e8:	e057      	b.n	810469a <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81045ea:	68fb      	ldr	r3, [r7, #12]
 81045ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81045f0:	b29b      	uxth	r3, r3
 81045f2:	2b01      	cmp	r3, #1
 81045f4:	d917      	bls.n	8104626 <HAL_SPI_Transmit+0x306>
 81045f6:	68fb      	ldr	r3, [r7, #12]
 81045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81045fa:	2b00      	cmp	r3, #0
 81045fc:	d013      	beq.n	8104626 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81045fe:	68fb      	ldr	r3, [r7, #12]
 8104600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104602:	881a      	ldrh	r2, [r3, #0]
 8104604:	69fb      	ldr	r3, [r7, #28]
 8104606:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104608:	68fb      	ldr	r3, [r7, #12]
 810460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810460c:	1c9a      	adds	r2, r3, #2
 810460e:	68fb      	ldr	r3, [r7, #12]
 8104610:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104612:	68fb      	ldr	r3, [r7, #12]
 8104614:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104618:	b29b      	uxth	r3, r3
 810461a:	3b02      	subs	r3, #2
 810461c:	b29a      	uxth	r2, r3
 810461e:	68fb      	ldr	r3, [r7, #12]
 8104620:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104624:	e039      	b.n	810469a <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8104626:	68fb      	ldr	r3, [r7, #12]
 8104628:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810462a:	68fb      	ldr	r3, [r7, #12]
 810462c:	681b      	ldr	r3, [r3, #0]
 810462e:	3320      	adds	r3, #32
 8104630:	7812      	ldrb	r2, [r2, #0]
 8104632:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104634:	68fb      	ldr	r3, [r7, #12]
 8104636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104638:	1c5a      	adds	r2, r3, #1
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810463e:	68fb      	ldr	r3, [r7, #12]
 8104640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104644:	b29b      	uxth	r3, r3
 8104646:	3b01      	subs	r3, #1
 8104648:	b29a      	uxth	r2, r3
 810464a:	68fb      	ldr	r3, [r7, #12]
 810464c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104650:	e023      	b.n	810469a <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104652:	f7fd f90d 	bl	8101870 <HAL_GetTick>
 8104656:	4602      	mov	r2, r0
 8104658:	697b      	ldr	r3, [r7, #20]
 810465a:	1ad3      	subs	r3, r2, r3
 810465c:	683a      	ldr	r2, [r7, #0]
 810465e:	429a      	cmp	r2, r3
 8104660:	d803      	bhi.n	810466a <HAL_SPI_Transmit+0x34a>
 8104662:	683b      	ldr	r3, [r7, #0]
 8104664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104668:	d102      	bne.n	8104670 <HAL_SPI_Transmit+0x350>
 810466a:	683b      	ldr	r3, [r7, #0]
 810466c:	2b00      	cmp	r3, #0
 810466e:	d114      	bne.n	810469a <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104670:	68f8      	ldr	r0, [r7, #12]
 8104672:	f000 fc77 	bl	8104f64 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104676:	68fb      	ldr	r3, [r7, #12]
 8104678:	2200      	movs	r2, #0
 810467a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810467e:	68fb      	ldr	r3, [r7, #12]
 8104680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104684:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104688:	68fb      	ldr	r3, [r7, #12]
 810468a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810468e:	68fb      	ldr	r3, [r7, #12]
 8104690:	2201      	movs	r2, #1
 8104692:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104696:	2303      	movs	r3, #3
 8104698:	e02c      	b.n	81046f4 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810469a:	68fb      	ldr	r3, [r7, #12]
 810469c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046a0:	b29b      	uxth	r3, r3
 81046a2:	2b00      	cmp	r3, #0
 81046a4:	f47f af7b 	bne.w	810459e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81046a8:	683b      	ldr	r3, [r7, #0]
 81046aa:	9300      	str	r3, [sp, #0]
 81046ac:	697b      	ldr	r3, [r7, #20]
 81046ae:	2200      	movs	r2, #0
 81046b0:	2108      	movs	r1, #8
 81046b2:	68f8      	ldr	r0, [r7, #12]
 81046b4:	f000 fcf6 	bl	81050a4 <SPI_WaitOnFlagUntilTimeout>
 81046b8:	4603      	mov	r3, r0
 81046ba:	2b00      	cmp	r3, #0
 81046bc:	d007      	beq.n	81046ce <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81046be:	68fb      	ldr	r3, [r7, #12]
 81046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81046c4:	f043 0220 	orr.w	r2, r3, #32
 81046c8:	68fb      	ldr	r3, [r7, #12]
 81046ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81046ce:	68f8      	ldr	r0, [r7, #12]
 81046d0:	f000 fc48 	bl	8104f64 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81046d4:	68fb      	ldr	r3, [r7, #12]
 81046d6:	2200      	movs	r2, #0
 81046d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 81046dc:	68fb      	ldr	r3, [r7, #12]
 81046de:	2201      	movs	r2, #1
 81046e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81046e4:	68fb      	ldr	r3, [r7, #12]
 81046e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81046ea:	2b00      	cmp	r3, #0
 81046ec:	d001      	beq.n	81046f2 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 81046ee:	2301      	movs	r3, #1
 81046f0:	e000      	b.n	81046f4 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 81046f2:	7efb      	ldrb	r3, [r7, #27]
}
 81046f4:	4618      	mov	r0, r3
 81046f6:	3720      	adds	r7, #32
 81046f8:	46bd      	mov	sp, r7
 81046fa:	bd80      	pop	{r7, pc}

081046fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 81046fc:	b580      	push	{r7, lr}
 81046fe:	b08e      	sub	sp, #56	; 0x38
 8104700:	af02      	add	r7, sp, #8
 8104702:	60f8      	str	r0, [r7, #12]
 8104704:	60b9      	str	r1, [r7, #8]
 8104706:	607a      	str	r2, [r7, #4]
 8104708:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810470a:	2300      	movs	r3, #0
 810470c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104710:	68fb      	ldr	r3, [r7, #12]
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	3320      	adds	r3, #32
 8104716:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104718:	68fb      	ldr	r3, [r7, #12]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	3330      	adds	r3, #48	; 0x30
 810471e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104720:	68fb      	ldr	r3, [r7, #12]
 8104722:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104726:	2b01      	cmp	r3, #1
 8104728:	d101      	bne.n	810472e <HAL_SPI_TransmitReceive+0x32>
 810472a:	2302      	movs	r3, #2
 810472c:	e207      	b.n	8104b3e <HAL_SPI_TransmitReceive+0x442>
 810472e:	68fb      	ldr	r3, [r7, #12]
 8104730:	2201      	movs	r2, #1
 8104732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104736:	f7fd f89b 	bl	8101870 <HAL_GetTick>
 810473a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 810473c:	887b      	ldrh	r3, [r7, #2]
 810473e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8104740:	887b      	ldrh	r3, [r7, #2]
 8104742:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8104744:	68fb      	ldr	r3, [r7, #12]
 8104746:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810474a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 810474c:	68fb      	ldr	r3, [r7, #12]
 810474e:	685b      	ldr	r3, [r3, #4]
 8104750:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8104752:	7efb      	ldrb	r3, [r7, #27]
 8104754:	2b01      	cmp	r3, #1
 8104756:	d014      	beq.n	8104782 <HAL_SPI_TransmitReceive+0x86>
 8104758:	697b      	ldr	r3, [r7, #20]
 810475a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810475e:	d106      	bne.n	810476e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104760:	68fb      	ldr	r3, [r7, #12]
 8104762:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8104764:	2b00      	cmp	r3, #0
 8104766:	d102      	bne.n	810476e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104768:	7efb      	ldrb	r3, [r7, #27]
 810476a:	2b04      	cmp	r3, #4
 810476c:	d009      	beq.n	8104782 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 810476e:	2302      	movs	r3, #2
 8104770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8104774:	68fb      	ldr	r3, [r7, #12]
 8104776:	2200      	movs	r2, #0
 8104778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810477c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104780:	e1dd      	b.n	8104b3e <HAL_SPI_TransmitReceive+0x442>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8104782:	68bb      	ldr	r3, [r7, #8]
 8104784:	2b00      	cmp	r3, #0
 8104786:	d005      	beq.n	8104794 <HAL_SPI_TransmitReceive+0x98>
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	2b00      	cmp	r3, #0
 810478c:	d002      	beq.n	8104794 <HAL_SPI_TransmitReceive+0x98>
 810478e:	887b      	ldrh	r3, [r7, #2]
 8104790:	2b00      	cmp	r3, #0
 8104792:	d109      	bne.n	81047a8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8104794:	2301      	movs	r3, #1
 8104796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810479a:	68fb      	ldr	r3, [r7, #12]
 810479c:	2200      	movs	r2, #0
 810479e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81047a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81047a6:	e1ca      	b.n	8104b3e <HAL_SPI_TransmitReceive+0x442>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81047a8:	68fb      	ldr	r3, [r7, #12]
 81047aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81047ae:	b2db      	uxtb	r3, r3
 81047b0:	2b04      	cmp	r3, #4
 81047b2:	d003      	beq.n	81047bc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 81047b4:	68fb      	ldr	r3, [r7, #12]
 81047b6:	2205      	movs	r2, #5
 81047b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81047bc:	68fb      	ldr	r3, [r7, #12]
 81047be:	2200      	movs	r2, #0
 81047c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 81047c4:	68fb      	ldr	r3, [r7, #12]
 81047c6:	687a      	ldr	r2, [r7, #4]
 81047c8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 81047ca:	68fb      	ldr	r3, [r7, #12]
 81047cc:	887a      	ldrh	r2, [r7, #2]
 81047ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 81047d2:	68fb      	ldr	r3, [r7, #12]
 81047d4:	887a      	ldrh	r2, [r7, #2]
 81047d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 81047da:	68fb      	ldr	r3, [r7, #12]
 81047dc:	68ba      	ldr	r2, [r7, #8]
 81047de:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 81047e0:	68fb      	ldr	r3, [r7, #12]
 81047e2:	887a      	ldrh	r2, [r7, #2]
 81047e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 81047e8:	68fb      	ldr	r3, [r7, #12]
 81047ea:	887a      	ldrh	r2, [r7, #2]
 81047ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 81047f0:	68fb      	ldr	r3, [r7, #12]
 81047f2:	2200      	movs	r2, #0
 81047f4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 81047f6:	68fb      	ldr	r3, [r7, #12]
 81047f8:	2200      	movs	r2, #0
 81047fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81047fc:	68fb      	ldr	r3, [r7, #12]
 81047fe:	681b      	ldr	r3, [r3, #0]
 8104800:	685b      	ldr	r3, [r3, #4]
 8104802:	0c1b      	lsrs	r3, r3, #16
 8104804:	041b      	lsls	r3, r3, #16
 8104806:	8879      	ldrh	r1, [r7, #2]
 8104808:	68fa      	ldr	r2, [r7, #12]
 810480a:	6812      	ldr	r2, [r2, #0]
 810480c:	430b      	orrs	r3, r1
 810480e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8104810:	68fb      	ldr	r3, [r7, #12]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	681a      	ldr	r2, [r3, #0]
 8104816:	68fb      	ldr	r3, [r7, #12]
 8104818:	681b      	ldr	r3, [r3, #0]
 810481a:	f042 0201 	orr.w	r2, r2, #1
 810481e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104820:	68fb      	ldr	r3, [r7, #12]
 8104822:	685b      	ldr	r3, [r3, #4]
 8104824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104828:	d107      	bne.n	810483a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810482a:	68fb      	ldr	r3, [r7, #12]
 810482c:	681b      	ldr	r3, [r3, #0]
 810482e:	681a      	ldr	r2, [r3, #0]
 8104830:	68fb      	ldr	r3, [r7, #12]
 8104832:	681b      	ldr	r3, [r3, #0]
 8104834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104838:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810483a:	68fb      	ldr	r3, [r7, #12]
 810483c:	68db      	ldr	r3, [r3, #12]
 810483e:	2b0f      	cmp	r3, #15
 8104840:	d970      	bls.n	8104924 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104842:	e068      	b.n	8104916 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104844:	68fb      	ldr	r3, [r7, #12]
 8104846:	681b      	ldr	r3, [r3, #0]
 8104848:	695b      	ldr	r3, [r3, #20]
 810484a:	f003 0302 	and.w	r3, r3, #2
 810484e:	2b02      	cmp	r3, #2
 8104850:	d11a      	bne.n	8104888 <HAL_SPI_TransmitReceive+0x18c>
 8104852:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104854:	2b00      	cmp	r3, #0
 8104856:	d017      	beq.n	8104888 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104858:	68fb      	ldr	r3, [r7, #12]
 810485a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810485c:	68fb      	ldr	r3, [r7, #12]
 810485e:	681b      	ldr	r3, [r3, #0]
 8104860:	6812      	ldr	r2, [r2, #0]
 8104862:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104864:	68fb      	ldr	r3, [r7, #12]
 8104866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104868:	1d1a      	adds	r2, r3, #4
 810486a:	68fb      	ldr	r3, [r7, #12]
 810486c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 810486e:	68fb      	ldr	r3, [r7, #12]
 8104870:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104874:	b29b      	uxth	r3, r3
 8104876:	3b01      	subs	r3, #1
 8104878:	b29a      	uxth	r2, r3
 810487a:	68fb      	ldr	r3, [r7, #12]
 810487c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104880:	68fb      	ldr	r3, [r7, #12]
 8104882:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104886:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8104888:	68fb      	ldr	r3, [r7, #12]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	695a      	ldr	r2, [r3, #20]
 810488e:	f248 0308 	movw	r3, #32776	; 0x8008
 8104892:	4013      	ands	r3, r2
 8104894:	2b00      	cmp	r3, #0
 8104896:	d01a      	beq.n	81048ce <HAL_SPI_TransmitReceive+0x1d2>
 8104898:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810489a:	2b00      	cmp	r3, #0
 810489c:	d017      	beq.n	81048ce <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810489e:	68fb      	ldr	r3, [r7, #12]
 81048a0:	681a      	ldr	r2, [r3, #0]
 81048a2:	68fb      	ldr	r3, [r7, #12]
 81048a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81048a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81048a8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 81048aa:	68fb      	ldr	r3, [r7, #12]
 81048ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81048ae:	1d1a      	adds	r2, r3, #4
 81048b0:	68fb      	ldr	r3, [r7, #12]
 81048b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 81048b4:	68fb      	ldr	r3, [r7, #12]
 81048b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81048ba:	b29b      	uxth	r3, r3
 81048bc:	3b01      	subs	r3, #1
 81048be:	b29a      	uxth	r2, r3
 81048c0:	68fb      	ldr	r3, [r7, #12]
 81048c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 81048c6:	68fb      	ldr	r3, [r7, #12]
 81048c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81048cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81048ce:	f7fc ffcf 	bl	8101870 <HAL_GetTick>
 81048d2:	4602      	mov	r2, r0
 81048d4:	69fb      	ldr	r3, [r7, #28]
 81048d6:	1ad3      	subs	r3, r2, r3
 81048d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81048da:	429a      	cmp	r2, r3
 81048dc:	d803      	bhi.n	81048e6 <HAL_SPI_TransmitReceive+0x1ea>
 81048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81048e4:	d102      	bne.n	81048ec <HAL_SPI_TransmitReceive+0x1f0>
 81048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81048e8:	2b00      	cmp	r3, #0
 81048ea:	d114      	bne.n	8104916 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81048ec:	68f8      	ldr	r0, [r7, #12]
 81048ee:	f000 fb39 	bl	8104f64 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81048f2:	68fb      	ldr	r3, [r7, #12]
 81048f4:	2200      	movs	r2, #0
 81048f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81048fa:	68fb      	ldr	r3, [r7, #12]
 81048fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104900:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104904:	68fb      	ldr	r3, [r7, #12]
 8104906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810490a:	68fb      	ldr	r3, [r7, #12]
 810490c:	2201      	movs	r2, #1
 810490e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104912:	2303      	movs	r3, #3
 8104914:	e113      	b.n	8104b3e <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104916:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104918:	2b00      	cmp	r3, #0
 810491a:	d193      	bne.n	8104844 <HAL_SPI_TransmitReceive+0x148>
 810491c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810491e:	2b00      	cmp	r3, #0
 8104920:	d190      	bne.n	8104844 <HAL_SPI_TransmitReceive+0x148>
 8104922:	e0e5      	b.n	8104af0 <HAL_SPI_TransmitReceive+0x3f4>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104924:	68fb      	ldr	r3, [r7, #12]
 8104926:	68db      	ldr	r3, [r3, #12]
 8104928:	2b07      	cmp	r3, #7
 810492a:	f240 80db 	bls.w	8104ae4 <HAL_SPI_TransmitReceive+0x3e8>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810492e:	e066      	b.n	81049fe <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8104930:	68fb      	ldr	r3, [r7, #12]
 8104932:	681b      	ldr	r3, [r3, #0]
 8104934:	695b      	ldr	r3, [r3, #20]
 8104936:	f003 0302 	and.w	r3, r3, #2
 810493a:	2b02      	cmp	r3, #2
 810493c:	d119      	bne.n	8104972 <HAL_SPI_TransmitReceive+0x276>
 810493e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104940:	2b00      	cmp	r3, #0
 8104942:	d016      	beq.n	8104972 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104944:	68fb      	ldr	r3, [r7, #12]
 8104946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104948:	881a      	ldrh	r2, [r3, #0]
 810494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810494c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 810494e:	68fb      	ldr	r3, [r7, #12]
 8104950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104952:	1c9a      	adds	r2, r3, #2
 8104954:	68fb      	ldr	r3, [r7, #12]
 8104956:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8104958:	68fb      	ldr	r3, [r7, #12]
 810495a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810495e:	b29b      	uxth	r3, r3
 8104960:	3b01      	subs	r3, #1
 8104962:	b29a      	uxth	r2, r3
 8104964:	68fb      	ldr	r3, [r7, #12]
 8104966:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810496a:	68fb      	ldr	r3, [r7, #12]
 810496c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104970:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8104972:	68fb      	ldr	r3, [r7, #12]
 8104974:	681b      	ldr	r3, [r3, #0]
 8104976:	695b      	ldr	r3, [r3, #20]
 8104978:	f003 0301 	and.w	r3, r3, #1
 810497c:	2b01      	cmp	r3, #1
 810497e:	d11a      	bne.n	81049b6 <HAL_SPI_TransmitReceive+0x2ba>
 8104980:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104982:	2b00      	cmp	r3, #0
 8104984:	d017      	beq.n	81049b6 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104986:	68fb      	ldr	r3, [r7, #12]
 8104988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810498a:	6a3a      	ldr	r2, [r7, #32]
 810498c:	8812      	ldrh	r2, [r2, #0]
 810498e:	b292      	uxth	r2, r2
 8104990:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8104992:	68fb      	ldr	r3, [r7, #12]
 8104994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104996:	1c9a      	adds	r2, r3, #2
 8104998:	68fb      	ldr	r3, [r7, #12]
 810499a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810499c:	68fb      	ldr	r3, [r7, #12]
 810499e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81049a2:	b29b      	uxth	r3, r3
 81049a4:	3b01      	subs	r3, #1
 81049a6:	b29a      	uxth	r2, r3
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81049b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81049b6:	f7fc ff5b 	bl	8101870 <HAL_GetTick>
 81049ba:	4602      	mov	r2, r0
 81049bc:	69fb      	ldr	r3, [r7, #28]
 81049be:	1ad3      	subs	r3, r2, r3
 81049c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81049c2:	429a      	cmp	r2, r3
 81049c4:	d803      	bhi.n	81049ce <HAL_SPI_TransmitReceive+0x2d2>
 81049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81049cc:	d102      	bne.n	81049d4 <HAL_SPI_TransmitReceive+0x2d8>
 81049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81049d0:	2b00      	cmp	r3, #0
 81049d2:	d114      	bne.n	81049fe <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81049d4:	68f8      	ldr	r0, [r7, #12]
 81049d6:	f000 fac5 	bl	8104f64 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81049da:	68fb      	ldr	r3, [r7, #12]
 81049dc:	2200      	movs	r2, #0
 81049de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81049e2:	68fb      	ldr	r3, [r7, #12]
 81049e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81049e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81049ec:	68fb      	ldr	r3, [r7, #12]
 81049ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81049f2:	68fb      	ldr	r3, [r7, #12]
 81049f4:	2201      	movs	r2, #1
 81049f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81049fa:	2303      	movs	r3, #3
 81049fc:	e09f      	b.n	8104b3e <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81049fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104a00:	2b00      	cmp	r3, #0
 8104a02:	d195      	bne.n	8104930 <HAL_SPI_TransmitReceive+0x234>
 8104a04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104a06:	2b00      	cmp	r3, #0
 8104a08:	d192      	bne.n	8104930 <HAL_SPI_TransmitReceive+0x234>
 8104a0a:	e071      	b.n	8104af0 <HAL_SPI_TransmitReceive+0x3f4>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104a0c:	68fb      	ldr	r3, [r7, #12]
 8104a0e:	681b      	ldr	r3, [r3, #0]
 8104a10:	695b      	ldr	r3, [r3, #20]
 8104a12:	f003 0302 	and.w	r3, r3, #2
 8104a16:	2b02      	cmp	r3, #2
 8104a18:	d11b      	bne.n	8104a52 <HAL_SPI_TransmitReceive+0x356>
 8104a1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104a1c:	2b00      	cmp	r3, #0
 8104a1e:	d018      	beq.n	8104a52 <HAL_SPI_TransmitReceive+0x356>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8104a20:	68fb      	ldr	r3, [r7, #12]
 8104a22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104a24:	68fb      	ldr	r3, [r7, #12]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	3320      	adds	r3, #32
 8104a2a:	7812      	ldrb	r2, [r2, #0]
 8104a2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8104a2e:	68fb      	ldr	r3, [r7, #12]
 8104a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a32:	1c5a      	adds	r2, r3, #1
 8104a34:	68fb      	ldr	r3, [r7, #12]
 8104a36:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8104a38:	68fb      	ldr	r3, [r7, #12]
 8104a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104a3e:	b29b      	uxth	r3, r3
 8104a40:	3b01      	subs	r3, #1
 8104a42:	b29a      	uxth	r2, r3
 8104a44:	68fb      	ldr	r3, [r7, #12]
 8104a46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104a4a:	68fb      	ldr	r3, [r7, #12]
 8104a4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104a50:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8104a52:	68fb      	ldr	r3, [r7, #12]
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	695b      	ldr	r3, [r3, #20]
 8104a58:	f003 0301 	and.w	r3, r3, #1
 8104a5c:	2b01      	cmp	r3, #1
 8104a5e:	d11d      	bne.n	8104a9c <HAL_SPI_TransmitReceive+0x3a0>
 8104a60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104a62:	2b00      	cmp	r3, #0
 8104a64:	d01a      	beq.n	8104a9c <HAL_SPI_TransmitReceive+0x3a0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104a66:	68fb      	ldr	r3, [r7, #12]
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104a6e:	68fb      	ldr	r3, [r7, #12]
 8104a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104a72:	7812      	ldrb	r2, [r2, #0]
 8104a74:	b2d2      	uxtb	r2, r2
 8104a76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8104a78:	68fb      	ldr	r3, [r7, #12]
 8104a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104a7c:	1c5a      	adds	r2, r3, #1
 8104a7e:	68fb      	ldr	r3, [r7, #12]
 8104a80:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104a82:	68fb      	ldr	r3, [r7, #12]
 8104a84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104a88:	b29b      	uxth	r3, r3
 8104a8a:	3b01      	subs	r3, #1
 8104a8c:	b29a      	uxth	r2, r3
 8104a8e:	68fb      	ldr	r3, [r7, #12]
 8104a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104a94:	68fb      	ldr	r3, [r7, #12]
 8104a96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104a9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104a9c:	f7fc fee8 	bl	8101870 <HAL_GetTick>
 8104aa0:	4602      	mov	r2, r0
 8104aa2:	69fb      	ldr	r3, [r7, #28]
 8104aa4:	1ad3      	subs	r3, r2, r3
 8104aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104aa8:	429a      	cmp	r2, r3
 8104aaa:	d803      	bhi.n	8104ab4 <HAL_SPI_TransmitReceive+0x3b8>
 8104aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104ab2:	d102      	bne.n	8104aba <HAL_SPI_TransmitReceive+0x3be>
 8104ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ab6:	2b00      	cmp	r3, #0
 8104ab8:	d114      	bne.n	8104ae4 <HAL_SPI_TransmitReceive+0x3e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104aba:	68f8      	ldr	r0, [r7, #12]
 8104abc:	f000 fa52 	bl	8104f64 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104ac0:	68fb      	ldr	r3, [r7, #12]
 8104ac2:	2200      	movs	r2, #0
 8104ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104ace:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104ad2:	68fb      	ldr	r3, [r7, #12]
 8104ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104ad8:	68fb      	ldr	r3, [r7, #12]
 8104ada:	2201      	movs	r2, #1
 8104adc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104ae0:	2303      	movs	r3, #3
 8104ae2:	e02c      	b.n	8104b3e <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104ae4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104ae6:	2b00      	cmp	r3, #0
 8104ae8:	d190      	bne.n	8104a0c <HAL_SPI_TransmitReceive+0x310>
 8104aea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104aec:	2b00      	cmp	r3, #0
 8104aee:	d18d      	bne.n	8104a0c <HAL_SPI_TransmitReceive+0x310>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8104af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104af2:	9300      	str	r3, [sp, #0]
 8104af4:	69fb      	ldr	r3, [r7, #28]
 8104af6:	2200      	movs	r2, #0
 8104af8:	2108      	movs	r1, #8
 8104afa:	68f8      	ldr	r0, [r7, #12]
 8104afc:	f000 fad2 	bl	81050a4 <SPI_WaitOnFlagUntilTimeout>
 8104b00:	4603      	mov	r3, r0
 8104b02:	2b00      	cmp	r3, #0
 8104b04:	d007      	beq.n	8104b16 <HAL_SPI_TransmitReceive+0x41a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8104b06:	68fb      	ldr	r3, [r7, #12]
 8104b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104b0c:	f043 0220 	orr.w	r2, r3, #32
 8104b10:	68fb      	ldr	r3, [r7, #12]
 8104b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104b16:	68f8      	ldr	r0, [r7, #12]
 8104b18:	f000 fa24 	bl	8104f64 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104b1c:	68fb      	ldr	r3, [r7, #12]
 8104b1e:	2200      	movs	r2, #0
 8104b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104b24:	68fb      	ldr	r3, [r7, #12]
 8104b26:	2201      	movs	r2, #1
 8104b28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104b2c:	68fb      	ldr	r3, [r7, #12]
 8104b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104b32:	2b00      	cmp	r3, #0
 8104b34:	d001      	beq.n	8104b3a <HAL_SPI_TransmitReceive+0x43e>
  {
    return HAL_ERROR;
 8104b36:	2301      	movs	r3, #1
 8104b38:	e001      	b.n	8104b3e <HAL_SPI_TransmitReceive+0x442>
  }
  return errorcode;
 8104b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8104b3e:	4618      	mov	r0, r3
 8104b40:	3730      	adds	r7, #48	; 0x30
 8104b42:	46bd      	mov	sp, r7
 8104b44:	bd80      	pop	{r7, pc}
	...

08104b48 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8104b48:	b580      	push	{r7, lr}
 8104b4a:	b08a      	sub	sp, #40	; 0x28
 8104b4c:	af00      	add	r7, sp, #0
 8104b4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	691b      	ldr	r3, [r3, #16]
 8104b56:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	695b      	ldr	r3, [r3, #20]
 8104b5e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8104b60:	6a3a      	ldr	r2, [r7, #32]
 8104b62:	69fb      	ldr	r3, [r7, #28]
 8104b64:	4013      	ands	r3, r2
 8104b66:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8104b68:	687b      	ldr	r3, [r7, #4]
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	689b      	ldr	r3, [r3, #8]
 8104b6e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8104b70:	2300      	movs	r3, #0
 8104b72:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104b7a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	3330      	adds	r3, #48	; 0x30
 8104b82:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8104b84:	69bb      	ldr	r3, [r7, #24]
 8104b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104b8a:	2b00      	cmp	r3, #0
 8104b8c:	d113      	bne.n	8104bb6 <HAL_SPI_IRQHandler+0x6e>
 8104b8e:	69bb      	ldr	r3, [r7, #24]
 8104b90:	f003 0320 	and.w	r3, r3, #32
 8104b94:	2b00      	cmp	r3, #0
 8104b96:	d10e      	bne.n	8104bb6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8104b98:	69bb      	ldr	r3, [r7, #24]
 8104b9a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8104b9e:	2b00      	cmp	r3, #0
 8104ba0:	d009      	beq.n	8104bb6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8104ba2:	687b      	ldr	r3, [r7, #4]
 8104ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104ba6:	6878      	ldr	r0, [r7, #4]
 8104ba8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104bae:	6878      	ldr	r0, [r7, #4]
 8104bb0:	4798      	blx	r3
    handled = 1UL;
 8104bb2:	2301      	movs	r3, #1
 8104bb4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8104bb6:	69bb      	ldr	r3, [r7, #24]
 8104bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104bbc:	2b00      	cmp	r3, #0
 8104bbe:	d10f      	bne.n	8104be0 <HAL_SPI_IRQHandler+0x98>
 8104bc0:	69bb      	ldr	r3, [r7, #24]
 8104bc2:	f003 0301 	and.w	r3, r3, #1
 8104bc6:	2b00      	cmp	r3, #0
 8104bc8:	d00a      	beq.n	8104be0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8104bca:	69bb      	ldr	r3, [r7, #24]
 8104bcc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8104bd0:	2b00      	cmp	r3, #0
 8104bd2:	d105      	bne.n	8104be0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104bd8:	6878      	ldr	r0, [r7, #4]
 8104bda:	4798      	blx	r3
    handled = 1UL;
 8104bdc:	2301      	movs	r3, #1
 8104bde:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8104be0:	69bb      	ldr	r3, [r7, #24]
 8104be2:	f003 0320 	and.w	r3, r3, #32
 8104be6:	2b00      	cmp	r3, #0
 8104be8:	d10f      	bne.n	8104c0a <HAL_SPI_IRQHandler+0xc2>
 8104bea:	69bb      	ldr	r3, [r7, #24]
 8104bec:	f003 0302 	and.w	r3, r3, #2
 8104bf0:	2b00      	cmp	r3, #0
 8104bf2:	d00a      	beq.n	8104c0a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8104bf4:	69bb      	ldr	r3, [r7, #24]
 8104bf6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8104bfa:	2b00      	cmp	r3, #0
 8104bfc:	d105      	bne.n	8104c0a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104c02:	6878      	ldr	r0, [r7, #4]
 8104c04:	4798      	blx	r3
    handled = 1UL;
 8104c06:	2301      	movs	r3, #1
 8104c08:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8104c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104c0c:	2b00      	cmp	r3, #0
 8104c0e:	f040 815c 	bne.w	8104eca <HAL_SPI_IRQHandler+0x382>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8104c12:	69bb      	ldr	r3, [r7, #24]
 8104c14:	f003 0308 	and.w	r3, r3, #8
 8104c18:	2b00      	cmp	r3, #0
 8104c1a:	f000 808b 	beq.w	8104d34 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	681b      	ldr	r3, [r3, #0]
 8104c22:	699a      	ldr	r2, [r3, #24]
 8104c24:	687b      	ldr	r3, [r7, #4]
 8104c26:	681b      	ldr	r3, [r3, #0]
 8104c28:	f042 0208 	orr.w	r2, r2, #8
 8104c2c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	699a      	ldr	r2, [r3, #24]
 8104c34:	687b      	ldr	r3, [r7, #4]
 8104c36:	681b      	ldr	r3, [r3, #0]
 8104c38:	f042 0210 	orr.w	r2, r2, #16
 8104c3c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	681b      	ldr	r3, [r3, #0]
 8104c42:	699a      	ldr	r2, [r3, #24]
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	681b      	ldr	r3, [r3, #0]
 8104c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104c4c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8104c4e:	687b      	ldr	r3, [r7, #4]
 8104c50:	681b      	ldr	r3, [r3, #0]
 8104c52:	691a      	ldr	r2, [r3, #16]
 8104c54:	687b      	ldr	r3, [r7, #4]
 8104c56:	681b      	ldr	r3, [r3, #0]
 8104c58:	f022 0208 	bic.w	r2, r2, #8
 8104c5c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8104c5e:	687b      	ldr	r3, [r7, #4]
 8104c60:	681b      	ldr	r3, [r3, #0]
 8104c62:	689b      	ldr	r3, [r3, #8]
 8104c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8104c68:	2b00      	cmp	r3, #0
 8104c6a:	d13d      	bne.n	8104ce8 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8104c6c:	e036      	b.n	8104cdc <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104c6e:	687b      	ldr	r3, [r7, #4]
 8104c70:	68db      	ldr	r3, [r3, #12]
 8104c72:	2b0f      	cmp	r3, #15
 8104c74:	d90b      	bls.n	8104c8e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	681a      	ldr	r2, [r3, #0]
 8104c7a:	687b      	ldr	r3, [r7, #4]
 8104c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104c80:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104c82:	687b      	ldr	r3, [r7, #4]
 8104c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c86:	1d1a      	adds	r2, r3, #4
 8104c88:	687b      	ldr	r3, [r7, #4]
 8104c8a:	665a      	str	r2, [r3, #100]	; 0x64
 8104c8c:	e01d      	b.n	8104cca <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104c8e:	687b      	ldr	r3, [r7, #4]
 8104c90:	68db      	ldr	r3, [r3, #12]
 8104c92:	2b07      	cmp	r3, #7
 8104c94:	d90b      	bls.n	8104cae <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104c96:	687b      	ldr	r3, [r7, #4]
 8104c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c9a:	68fa      	ldr	r2, [r7, #12]
 8104c9c:	8812      	ldrh	r2, [r2, #0]
 8104c9e:	b292      	uxth	r2, r2
 8104ca0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104ca2:	687b      	ldr	r3, [r7, #4]
 8104ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104ca6:	1c9a      	adds	r2, r3, #2
 8104ca8:	687b      	ldr	r3, [r7, #4]
 8104caa:	665a      	str	r2, [r3, #100]	; 0x64
 8104cac:	e00d      	b.n	8104cca <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104cba:	7812      	ldrb	r2, [r2, #0]
 8104cbc:	b2d2      	uxtb	r2, r2
 8104cbe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104cc0:	687b      	ldr	r3, [r7, #4]
 8104cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104cc4:	1c5a      	adds	r2, r3, #1
 8104cc6:	687b      	ldr	r3, [r7, #4]
 8104cc8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104cd0:	b29b      	uxth	r3, r3
 8104cd2:	3b01      	subs	r3, #1
 8104cd4:	b29a      	uxth	r2, r3
 8104cd6:	687b      	ldr	r3, [r7, #4]
 8104cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104ce2:	b29b      	uxth	r3, r3
 8104ce4:	2b00      	cmp	r3, #0
 8104ce6:	d1c2      	bne.n	8104c6e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8104ce8:	6878      	ldr	r0, [r7, #4]
 8104cea:	f000 f93b 	bl	8104f64 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	2201      	movs	r2, #1
 8104cf2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104cfc:	2b00      	cmp	r3, #0
 8104cfe:	d003      	beq.n	8104d08 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8104d00:	6878      	ldr	r0, [r7, #4]
 8104d02:	f000 f90b 	bl	8104f1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8104d06:	e0e5      	b.n	8104ed4 <HAL_SPI_IRQHandler+0x38c>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8104d08:	7cfb      	ldrb	r3, [r7, #19]
 8104d0a:	2b05      	cmp	r3, #5
 8104d0c:	d103      	bne.n	8104d16 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8104d0e:	6878      	ldr	r0, [r7, #4]
 8104d10:	f000 f8fa 	bl	8104f08 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8104d14:	e0db      	b.n	8104ece <HAL_SPI_IRQHandler+0x386>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8104d16:	7cfb      	ldrb	r3, [r7, #19]
 8104d18:	2b04      	cmp	r3, #4
 8104d1a:	d103      	bne.n	8104d24 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8104d1c:	6878      	ldr	r0, [r7, #4]
 8104d1e:	f000 f8e9 	bl	8104ef4 <HAL_SPI_RxCpltCallback>
    return;
 8104d22:	e0d4      	b.n	8104ece <HAL_SPI_IRQHandler+0x386>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8104d24:	7cfb      	ldrb	r3, [r7, #19]
 8104d26:	2b03      	cmp	r3, #3
 8104d28:	f040 80d1 	bne.w	8104ece <HAL_SPI_IRQHandler+0x386>
      HAL_SPI_TxCpltCallback(hspi);
 8104d2c:	6878      	ldr	r0, [r7, #4]
 8104d2e:	f000 f8d7 	bl	8104ee0 <HAL_SPI_TxCpltCallback>
    return;
 8104d32:	e0cc      	b.n	8104ece <HAL_SPI_IRQHandler+0x386>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8104d34:	69fb      	ldr	r3, [r7, #28]
 8104d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104d3a:	2b00      	cmp	r3, #0
 8104d3c:	d00d      	beq.n	8104d5a <HAL_SPI_IRQHandler+0x212>
 8104d3e:	6a3b      	ldr	r3, [r7, #32]
 8104d40:	f003 0308 	and.w	r3, r3, #8
 8104d44:	2b00      	cmp	r3, #0
 8104d46:	d008      	beq.n	8104d5a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8104d48:	687b      	ldr	r3, [r7, #4]
 8104d4a:	681b      	ldr	r3, [r3, #0]
 8104d4c:	699a      	ldr	r2, [r3, #24]
 8104d4e:	687b      	ldr	r3, [r7, #4]
 8104d50:	681b      	ldr	r3, [r3, #0]
 8104d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104d56:	619a      	str	r2, [r3, #24]

    return;
 8104d58:	e0bc      	b.n	8104ed4 <HAL_SPI_IRQHandler+0x38c>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8104d5a:	69bb      	ldr	r3, [r7, #24]
 8104d5c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8104d60:	2b00      	cmp	r3, #0
 8104d62:	f000 80b7 	beq.w	8104ed4 <HAL_SPI_IRQHandler+0x38c>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8104d66:	69bb      	ldr	r3, [r7, #24]
 8104d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104d6c:	2b00      	cmp	r3, #0
 8104d6e:	d00f      	beq.n	8104d90 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d76:	f043 0204 	orr.w	r2, r3, #4
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	681b      	ldr	r3, [r3, #0]
 8104d84:	699a      	ldr	r2, [r3, #24]
 8104d86:	687b      	ldr	r3, [r7, #4]
 8104d88:	681b      	ldr	r3, [r3, #0]
 8104d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8104d8e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8104d90:	69bb      	ldr	r3, [r7, #24]
 8104d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104d96:	2b00      	cmp	r3, #0
 8104d98:	d00f      	beq.n	8104dba <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104da0:	f043 0201 	orr.w	r2, r3, #1
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	681b      	ldr	r3, [r3, #0]
 8104dae:	699a      	ldr	r2, [r3, #24]
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	681b      	ldr	r3, [r3, #0]
 8104db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104db8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8104dba:	69bb      	ldr	r3, [r7, #24]
 8104dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104dc0:	2b00      	cmp	r3, #0
 8104dc2:	d00f      	beq.n	8104de4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104dca:	f043 0208 	orr.w	r2, r3, #8
 8104dce:	687b      	ldr	r3, [r7, #4]
 8104dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	699a      	ldr	r2, [r3, #24]
 8104dda:	687b      	ldr	r3, [r7, #4]
 8104ddc:	681b      	ldr	r3, [r3, #0]
 8104dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104de2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8104de4:	69bb      	ldr	r3, [r7, #24]
 8104de6:	f003 0320 	and.w	r3, r3, #32
 8104dea:	2b00      	cmp	r3, #0
 8104dec:	d00f      	beq.n	8104e0e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104df4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8104dfe:	687b      	ldr	r3, [r7, #4]
 8104e00:	681b      	ldr	r3, [r3, #0]
 8104e02:	699a      	ldr	r2, [r3, #24]
 8104e04:	687b      	ldr	r3, [r7, #4]
 8104e06:	681b      	ldr	r3, [r3, #0]
 8104e08:	f042 0220 	orr.w	r2, r2, #32
 8104e0c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104e0e:	687b      	ldr	r3, [r7, #4]
 8104e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104e14:	2b00      	cmp	r3, #0
 8104e16:	d05c      	beq.n	8104ed2 <HAL_SPI_IRQHandler+0x38a>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8104e18:	687b      	ldr	r3, [r7, #4]
 8104e1a:	681b      	ldr	r3, [r3, #0]
 8104e1c:	681a      	ldr	r2, [r3, #0]
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	f022 0201 	bic.w	r2, r2, #1
 8104e26:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	691b      	ldr	r3, [r3, #16]
 8104e2e:	687a      	ldr	r2, [r7, #4]
 8104e30:	6812      	ldr	r2, [r2, #0]
 8104e32:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8104e36:	f023 0303 	bic.w	r3, r3, #3
 8104e3a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8104e3c:	697b      	ldr	r3, [r7, #20]
 8104e3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8104e42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8104e46:	d138      	bne.n	8104eba <HAL_SPI_IRQHandler+0x372>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8104e48:	687b      	ldr	r3, [r7, #4]
 8104e4a:	681b      	ldr	r3, [r3, #0]
 8104e4c:	689a      	ldr	r2, [r3, #8]
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	681b      	ldr	r3, [r3, #0]
 8104e52:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8104e56:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8104e58:	687b      	ldr	r3, [r7, #4]
 8104e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104e5c:	2b00      	cmp	r3, #0
 8104e5e:	d013      	beq.n	8104e88 <HAL_SPI_IRQHandler+0x340>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104e64:	4a1d      	ldr	r2, [pc, #116]	; (8104edc <HAL_SPI_IRQHandler+0x394>)
 8104e66:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104e6c:	4618      	mov	r0, r3
 8104e6e:	f7fd f9ad 	bl	81021cc <HAL_DMA_Abort_IT>
 8104e72:	4603      	mov	r3, r0
 8104e74:	2b00      	cmp	r3, #0
 8104e76:	d007      	beq.n	8104e88 <HAL_SPI_IRQHandler+0x340>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104e7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8104e88:	687b      	ldr	r3, [r7, #4]
 8104e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104e8c:	2b00      	cmp	r3, #0
 8104e8e:	d020      	beq.n	8104ed2 <HAL_SPI_IRQHandler+0x38a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8104e90:	687b      	ldr	r3, [r7, #4]
 8104e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104e94:	4a11      	ldr	r2, [pc, #68]	; (8104edc <HAL_SPI_IRQHandler+0x394>)
 8104e96:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104e9c:	4618      	mov	r0, r3
 8104e9e:	f7fd f995 	bl	81021cc <HAL_DMA_Abort_IT>
 8104ea2:	4603      	mov	r3, r0
 8104ea4:	2b00      	cmp	r3, #0
 8104ea6:	d014      	beq.n	8104ed2 <HAL_SPI_IRQHandler+0x38a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104eae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8104eb8:	e00b      	b.n	8104ed2 <HAL_SPI_IRQHandler+0x38a>
        hspi->State = HAL_SPI_STATE_READY;
 8104eba:	687b      	ldr	r3, [r7, #4]
 8104ebc:	2201      	movs	r2, #1
 8104ebe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8104ec2:	6878      	ldr	r0, [r7, #4]
 8104ec4:	f000 f82a 	bl	8104f1c <HAL_SPI_ErrorCallback>
    return;
 8104ec8:	e003      	b.n	8104ed2 <HAL_SPI_IRQHandler+0x38a>
    return;
 8104eca:	bf00      	nop
 8104ecc:	e002      	b.n	8104ed4 <HAL_SPI_IRQHandler+0x38c>
    return;
 8104ece:	bf00      	nop
 8104ed0:	e000      	b.n	8104ed4 <HAL_SPI_IRQHandler+0x38c>
    return;
 8104ed2:	bf00      	nop
  }
}
 8104ed4:	3728      	adds	r7, #40	; 0x28
 8104ed6:	46bd      	mov	sp, r7
 8104ed8:	bd80      	pop	{r7, pc}
 8104eda:	bf00      	nop
 8104edc:	08104f31 	.word	0x08104f31

08104ee0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8104ee0:	b480      	push	{r7}
 8104ee2:	b083      	sub	sp, #12
 8104ee4:	af00      	add	r7, sp, #0
 8104ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8104ee8:	bf00      	nop
 8104eea:	370c      	adds	r7, #12
 8104eec:	46bd      	mov	sp, r7
 8104eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ef2:	4770      	bx	lr

08104ef4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8104ef4:	b480      	push	{r7}
 8104ef6:	b083      	sub	sp, #12
 8104ef8:	af00      	add	r7, sp, #0
 8104efa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8104efc:	bf00      	nop
 8104efe:	370c      	adds	r7, #12
 8104f00:	46bd      	mov	sp, r7
 8104f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f06:	4770      	bx	lr

08104f08 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8104f08:	b480      	push	{r7}
 8104f0a:	b083      	sub	sp, #12
 8104f0c:	af00      	add	r7, sp, #0
 8104f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8104f10:	bf00      	nop
 8104f12:	370c      	adds	r7, #12
 8104f14:	46bd      	mov	sp, r7
 8104f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f1a:	4770      	bx	lr

08104f1c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8104f1c:	b480      	push	{r7}
 8104f1e:	b083      	sub	sp, #12
 8104f20:	af00      	add	r7, sp, #0
 8104f22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8104f24:	bf00      	nop
 8104f26:	370c      	adds	r7, #12
 8104f28:	46bd      	mov	sp, r7
 8104f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f2e:	4770      	bx	lr

08104f30 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8104f30:	b580      	push	{r7, lr}
 8104f32:	b084      	sub	sp, #16
 8104f34:	af00      	add	r7, sp, #0
 8104f36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8104f38:	687b      	ldr	r3, [r7, #4]
 8104f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104f3c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8104f3e:	68fb      	ldr	r3, [r7, #12]
 8104f40:	2200      	movs	r2, #0
 8104f42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8104f46:	68fb      	ldr	r3, [r7, #12]
 8104f48:	2200      	movs	r2, #0
 8104f4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8104f4e:	68fb      	ldr	r3, [r7, #12]
 8104f50:	2201      	movs	r2, #1
 8104f52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8104f56:	68f8      	ldr	r0, [r7, #12]
 8104f58:	f7ff ffe0 	bl	8104f1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8104f5c:	bf00      	nop
 8104f5e:	3710      	adds	r7, #16
 8104f60:	46bd      	mov	sp, r7
 8104f62:	bd80      	pop	{r7, pc}

08104f64 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8104f64:	b480      	push	{r7}
 8104f66:	b085      	sub	sp, #20
 8104f68:	af00      	add	r7, sp, #0
 8104f6a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8104f6c:	687b      	ldr	r3, [r7, #4]
 8104f6e:	681b      	ldr	r3, [r3, #0]
 8104f70:	695b      	ldr	r3, [r3, #20]
 8104f72:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	681b      	ldr	r3, [r3, #0]
 8104f78:	699a      	ldr	r2, [r3, #24]
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	681b      	ldr	r3, [r3, #0]
 8104f7e:	f042 0208 	orr.w	r2, r2, #8
 8104f82:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	681b      	ldr	r3, [r3, #0]
 8104f88:	699a      	ldr	r2, [r3, #24]
 8104f8a:	687b      	ldr	r3, [r7, #4]
 8104f8c:	681b      	ldr	r3, [r3, #0]
 8104f8e:	f042 0210 	orr.w	r2, r2, #16
 8104f92:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	681a      	ldr	r2, [r3, #0]
 8104f9a:	687b      	ldr	r3, [r7, #4]
 8104f9c:	681b      	ldr	r3, [r3, #0]
 8104f9e:	f022 0201 	bic.w	r2, r2, #1
 8104fa2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	681b      	ldr	r3, [r3, #0]
 8104fa8:	691b      	ldr	r3, [r3, #16]
 8104faa:	687a      	ldr	r2, [r7, #4]
 8104fac:	6812      	ldr	r2, [r2, #0]
 8104fae:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8104fb2:	f023 0303 	bic.w	r3, r3, #3
 8104fb6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	681b      	ldr	r3, [r3, #0]
 8104fbc:	689a      	ldr	r2, [r3, #8]
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8104fc6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104fce:	b2db      	uxtb	r3, r3
 8104fd0:	2b04      	cmp	r3, #4
 8104fd2:	d014      	beq.n	8104ffe <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8104fd4:	68fb      	ldr	r3, [r7, #12]
 8104fd6:	f003 0320 	and.w	r3, r3, #32
 8104fda:	2b00      	cmp	r3, #0
 8104fdc:	d00f      	beq.n	8104ffe <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104fe4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	681b      	ldr	r3, [r3, #0]
 8104ff2:	699a      	ldr	r2, [r3, #24]
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	681b      	ldr	r3, [r3, #0]
 8104ff8:	f042 0220 	orr.w	r2, r2, #32
 8104ffc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8104ffe:	687b      	ldr	r3, [r7, #4]
 8105000:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105004:	b2db      	uxtb	r3, r3
 8105006:	2b03      	cmp	r3, #3
 8105008:	d014      	beq.n	8105034 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810500a:	68fb      	ldr	r3, [r7, #12]
 810500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105010:	2b00      	cmp	r3, #0
 8105012:	d00f      	beq.n	8105034 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810501a:	f043 0204 	orr.w	r2, r3, #4
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	681b      	ldr	r3, [r3, #0]
 8105028:	699a      	ldr	r2, [r3, #24]
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8105032:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8105034:	68fb      	ldr	r3, [r7, #12]
 8105036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810503a:	2b00      	cmp	r3, #0
 810503c:	d00f      	beq.n	810505e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105044:	f043 0201 	orr.w	r2, r3, #1
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	681b      	ldr	r3, [r3, #0]
 8105052:	699a      	ldr	r2, [r3, #24]
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	681b      	ldr	r3, [r3, #0]
 8105058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810505c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810505e:	68fb      	ldr	r3, [r7, #12]
 8105060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105064:	2b00      	cmp	r3, #0
 8105066:	d00f      	beq.n	8105088 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810506e:	f043 0208 	orr.w	r2, r3, #8
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	681b      	ldr	r3, [r3, #0]
 810507c:	699a      	ldr	r2, [r3, #24]
 810507e:	687b      	ldr	r3, [r7, #4]
 8105080:	681b      	ldr	r3, [r3, #0]
 8105082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8105086:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	2200      	movs	r2, #0
 810508c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	2200      	movs	r2, #0
 8105094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8105098:	bf00      	nop
 810509a:	3714      	adds	r7, #20
 810509c:	46bd      	mov	sp, r7
 810509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050a2:	4770      	bx	lr

081050a4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 81050a4:	b580      	push	{r7, lr}
 81050a6:	b084      	sub	sp, #16
 81050a8:	af00      	add	r7, sp, #0
 81050aa:	60f8      	str	r0, [r7, #12]
 81050ac:	60b9      	str	r1, [r7, #8]
 81050ae:	603b      	str	r3, [r7, #0]
 81050b0:	4613      	mov	r3, r2
 81050b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81050b4:	e010      	b.n	81050d8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81050b6:	f7fc fbdb 	bl	8101870 <HAL_GetTick>
 81050ba:	4602      	mov	r2, r0
 81050bc:	683b      	ldr	r3, [r7, #0]
 81050be:	1ad3      	subs	r3, r2, r3
 81050c0:	69ba      	ldr	r2, [r7, #24]
 81050c2:	429a      	cmp	r2, r3
 81050c4:	d803      	bhi.n	81050ce <SPI_WaitOnFlagUntilTimeout+0x2a>
 81050c6:	69bb      	ldr	r3, [r7, #24]
 81050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81050cc:	d102      	bne.n	81050d4 <SPI_WaitOnFlagUntilTimeout+0x30>
 81050ce:	69bb      	ldr	r3, [r7, #24]
 81050d0:	2b00      	cmp	r3, #0
 81050d2:	d101      	bne.n	81050d8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 81050d4:	2303      	movs	r3, #3
 81050d6:	e00f      	b.n	81050f8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81050d8:	68fb      	ldr	r3, [r7, #12]
 81050da:	681b      	ldr	r3, [r3, #0]
 81050dc:	695a      	ldr	r2, [r3, #20]
 81050de:	68bb      	ldr	r3, [r7, #8]
 81050e0:	4013      	ands	r3, r2
 81050e2:	68ba      	ldr	r2, [r7, #8]
 81050e4:	429a      	cmp	r2, r3
 81050e6:	bf0c      	ite	eq
 81050e8:	2301      	moveq	r3, #1
 81050ea:	2300      	movne	r3, #0
 81050ec:	b2db      	uxtb	r3, r3
 81050ee:	461a      	mov	r2, r3
 81050f0:	79fb      	ldrb	r3, [r7, #7]
 81050f2:	429a      	cmp	r2, r3
 81050f4:	d0df      	beq.n	81050b6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81050f6:	2300      	movs	r3, #0
}
 81050f8:	4618      	mov	r0, r3
 81050fa:	3710      	adds	r7, #16
 81050fc:	46bd      	mov	sp, r7
 81050fe:	bd80      	pop	{r7, pc}

08105100 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8105100:	b480      	push	{r7}
 8105102:	b085      	sub	sp, #20
 8105104:	af00      	add	r7, sp, #0
 8105106:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8105108:	687b      	ldr	r3, [r7, #4]
 810510a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810510c:	095b      	lsrs	r3, r3, #5
 810510e:	3301      	adds	r3, #1
 8105110:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8105112:	687b      	ldr	r3, [r7, #4]
 8105114:	68db      	ldr	r3, [r3, #12]
 8105116:	3301      	adds	r3, #1
 8105118:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810511a:	68bb      	ldr	r3, [r7, #8]
 810511c:	3307      	adds	r3, #7
 810511e:	08db      	lsrs	r3, r3, #3
 8105120:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8105122:	68bb      	ldr	r3, [r7, #8]
 8105124:	68fa      	ldr	r2, [r7, #12]
 8105126:	fb02 f303 	mul.w	r3, r2, r3
}
 810512a:	4618      	mov	r0, r3
 810512c:	3714      	adds	r7, #20
 810512e:	46bd      	mov	sp, r7
 8105130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105134:	4770      	bx	lr
	...

08105138 <__libc_init_array>:
 8105138:	b570      	push	{r4, r5, r6, lr}
 810513a:	4d0d      	ldr	r5, [pc, #52]	; (8105170 <__libc_init_array+0x38>)
 810513c:	4c0d      	ldr	r4, [pc, #52]	; (8105174 <__libc_init_array+0x3c>)
 810513e:	1b64      	subs	r4, r4, r5
 8105140:	10a4      	asrs	r4, r4, #2
 8105142:	2600      	movs	r6, #0
 8105144:	42a6      	cmp	r6, r4
 8105146:	d109      	bne.n	810515c <__libc_init_array+0x24>
 8105148:	4d0b      	ldr	r5, [pc, #44]	; (8105178 <__libc_init_array+0x40>)
 810514a:	4c0c      	ldr	r4, [pc, #48]	; (810517c <__libc_init_array+0x44>)
 810514c:	f000 f818 	bl	8105180 <_init>
 8105150:	1b64      	subs	r4, r4, r5
 8105152:	10a4      	asrs	r4, r4, #2
 8105154:	2600      	movs	r6, #0
 8105156:	42a6      	cmp	r6, r4
 8105158:	d105      	bne.n	8105166 <__libc_init_array+0x2e>
 810515a:	bd70      	pop	{r4, r5, r6, pc}
 810515c:	f855 3b04 	ldr.w	r3, [r5], #4
 8105160:	4798      	blx	r3
 8105162:	3601      	adds	r6, #1
 8105164:	e7ee      	b.n	8105144 <__libc_init_array+0xc>
 8105166:	f855 3b04 	ldr.w	r3, [r5], #4
 810516a:	4798      	blx	r3
 810516c:	3601      	adds	r6, #1
 810516e:	e7f2      	b.n	8105156 <__libc_init_array+0x1e>
 8105170:	081056b0 	.word	0x081056b0
 8105174:	081056b0 	.word	0x081056b0
 8105178:	081056b0 	.word	0x081056b0
 810517c:	081056b4 	.word	0x081056b4

08105180 <_init>:
 8105180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105182:	bf00      	nop
 8105184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105186:	bc08      	pop	{r3}
 8105188:	469e      	mov	lr, r3
 810518a:	4770      	bx	lr

0810518c <_fini>:
 810518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810518e:	bf00      	nop
 8105190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105192:	bc08      	pop	{r3}
 8105194:	469e      	mov	lr, r3
 8105196:	4770      	bx	lr
