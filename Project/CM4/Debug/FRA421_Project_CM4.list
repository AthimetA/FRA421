
FRA421_Project_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002380  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08102618  08102618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08102628  08102628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810262c  0810262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08102630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b0  10000010  08102640  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100000c0  08102640  000200c0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d66c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ab4  00000000  00000000  0002d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000009c8  00000000  00000000  0002f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000900  00000000  00000000  0002fb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000393ff  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000bf2a  00000000  00000000  00069827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017edb6  00000000  00000000  00075751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f4507  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002708  00000000  00000000  001f4558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08102600 	.word	0x08102600

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08102600 	.word	0x08102600

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b30      	ldr	r3, [pc, #192]	; (81003d0 <main+0xc8>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a2e      	ldr	r2, [pc, #184]	; (81003d0 <main+0xc8>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b2c      	ldr	r3, [pc, #176]	; (81003d0 <main+0xc8>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f000 fd5b 	bl	8100de8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f000 fde5 	bl	8100f00 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f000 fd66 	bl	8100e0c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b24      	ldr	r3, [pc, #144]	; (81003d4 <main+0xcc>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b22      	ldr	r3, [pc, #136]	; (81003d8 <main+0xd0>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a20      	ldr	r2, [pc, #128]	; (81003d8 <main+0xd0>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b1d      	ldr	r3, [pc, #116]	; (81003d8 <main+0xd0>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a1c      	ldr	r2, [pc, #112]	; (81003d8 <main+0xd0>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 f992 	bl	8100698 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_SPI1_Init();
 8100374:	f000 f83c 	bl	81003f0 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      if(HAL_GetTick() - timemsM4 > 1000)
 8100378:	f000 fa36 	bl	81007e8 <HAL_GetTick>
 810037c:	4602      	mov	r2, r0
 810037e:	4b17      	ldr	r3, [pc, #92]	; (81003dc <main+0xd4>)
 8100380:	681b      	ldr	r3, [r3, #0]
 8100382:	1ad3      	subs	r3, r2, r3
 8100384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8100388:	d908      	bls.n	810039c <main+0x94>
      {
          timemsM4 = HAL_GetTick();
 810038a:	f000 fa2d 	bl	81007e8 <HAL_GetTick>
 810038e:	4603      	mov	r3, r0
 8100390:	4a12      	ldr	r2, [pc, #72]	; (81003dc <main+0xd4>)
 8100392:	6013      	str	r3, [r2, #0]
          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100394:	2102      	movs	r1, #2
 8100396:	4812      	ldr	r0, [pc, #72]	; (81003e0 <main+0xd8>)
 8100398:	f000 fd0b 	bl	8100db2 <HAL_GPIO_TogglePin>
      }

	 testvar = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 810039c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 81003a0:	4810      	ldr	r0, [pc, #64]	; (81003e4 <main+0xdc>)
 81003a2:	f000 fcd5 	bl	8100d50 <HAL_GPIO_ReadPin>
 81003a6:	4603      	mov	r3, r0
 81003a8:	461a      	mov	r2, r3
 81003aa:	4b0f      	ldr	r3, [pc, #60]	; (81003e8 <main+0xe0>)
 81003ac:	701a      	strb	r2, [r3, #0]

		 if(testvar == GPIO_PIN_RESET){
 81003ae:	4b0e      	ldr	r3, [pc, #56]	; (81003e8 <main+0xe0>)
 81003b0:	781b      	ldrb	r3, [r3, #0]
 81003b2:	2b00      	cmp	r3, #0
 81003b4:	d105      	bne.n	81003c2 <main+0xba>
			 HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81003b6:	2200      	movs	r2, #0
 81003b8:	2101      	movs	r1, #1
 81003ba:	480c      	ldr	r0, [pc, #48]	; (81003ec <main+0xe4>)
 81003bc:	f000 fce0 	bl	8100d80 <HAL_GPIO_WritePin>
 81003c0:	e7da      	b.n	8100378 <main+0x70>
		 }
		 else {

			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 81003c2:	2201      	movs	r2, #1
 81003c4:	2101      	movs	r1, #1
 81003c6:	4809      	ldr	r0, [pc, #36]	; (81003ec <main+0xe4>)
 81003c8:	f000 fcda 	bl	8100d80 <HAL_GPIO_WritePin>
      if(HAL_GetTick() - timemsM4 > 1000)
 81003cc:	e7d4      	b.n	8100378 <main+0x70>
 81003ce:	bf00      	nop
 81003d0:	58024400 	.word	0x58024400
 81003d4:	e000ed00 	.word	0xe000ed00
 81003d8:	58026400 	.word	0x58026400
 81003dc:	100000b8 	.word	0x100000b8
 81003e0:	58021000 	.word	0x58021000
 81003e4:	58020800 	.word	0x58020800
 81003e8:	100000b4 	.word	0x100000b4
 81003ec:	58020400 	.word	0x58020400

081003f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 81003f0:	b580      	push	{r7, lr}
 81003f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 81003f4:	4b27      	ldr	r3, [pc, #156]	; (8100494 <MX_SPI1_Init+0xa4>)
 81003f6:	4a28      	ldr	r2, [pc, #160]	; (8100498 <MX_SPI1_Init+0xa8>)
 81003f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81003fa:	4b26      	ldr	r3, [pc, #152]	; (8100494 <MX_SPI1_Init+0xa4>)
 81003fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100400:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8100402:	4b24      	ldr	r3, [pc, #144]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100404:	2200      	movs	r2, #0
 8100406:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8100408:	4b22      	ldr	r3, [pc, #136]	; (8100494 <MX_SPI1_Init+0xa4>)
 810040a:	2207      	movs	r2, #7
 810040c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810040e:	4b21      	ldr	r3, [pc, #132]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100410:	2200      	movs	r2, #0
 8100412:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100414:	4b1f      	ldr	r3, [pc, #124]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100416:	2200      	movs	r2, #0
 8100418:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810041a:	4b1e      	ldr	r3, [pc, #120]	; (8100494 <MX_SPI1_Init+0xa4>)
 810041c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8100420:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8100422:	4b1c      	ldr	r3, [pc, #112]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100428:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810042a:	4b1a      	ldr	r3, [pc, #104]	; (8100494 <MX_SPI1_Init+0xa4>)
 810042c:	2200      	movs	r2, #0
 810042e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8100430:	4b18      	ldr	r3, [pc, #96]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100432:	2200      	movs	r2, #0
 8100434:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100436:	4b17      	ldr	r3, [pc, #92]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100438:	2200      	movs	r2, #0
 810043a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810043c:	4b15      	ldr	r3, [pc, #84]	; (8100494 <MX_SPI1_Init+0xa4>)
 810043e:	2200      	movs	r2, #0
 8100440:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100442:	4b14      	ldr	r3, [pc, #80]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100448:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810044a:	4b12      	ldr	r3, [pc, #72]	; (8100494 <MX_SPI1_Init+0xa4>)
 810044c:	2200      	movs	r2, #0
 810044e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100450:	4b10      	ldr	r3, [pc, #64]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100452:	2200      	movs	r2, #0
 8100454:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100456:	4b0f      	ldr	r3, [pc, #60]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100458:	2200      	movs	r2, #0
 810045a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810045c:	4b0d      	ldr	r3, [pc, #52]	; (8100494 <MX_SPI1_Init+0xa4>)
 810045e:	2200      	movs	r2, #0
 8100460:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100462:	4b0c      	ldr	r3, [pc, #48]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100464:	2200      	movs	r2, #0
 8100466:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100468:	4b0a      	ldr	r3, [pc, #40]	; (8100494 <MX_SPI1_Init+0xa4>)
 810046a:	2200      	movs	r2, #0
 810046c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810046e:	4b09      	ldr	r3, [pc, #36]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100470:	2200      	movs	r2, #0
 8100472:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100474:	4b07      	ldr	r3, [pc, #28]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100476:	2200      	movs	r2, #0
 8100478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810047a:	4b06      	ldr	r3, [pc, #24]	; (8100494 <MX_SPI1_Init+0xa4>)
 810047c:	2200      	movs	r2, #0
 810047e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8100480:	4804      	ldr	r0, [pc, #16]	; (8100494 <MX_SPI1_Init+0xa4>)
 8100482:	f001 ff6f 	bl	8102364 <HAL_SPI_Init>
 8100486:	4603      	mov	r3, r0
 8100488:	2b00      	cmp	r3, #0
 810048a:	d001      	beq.n	8100490 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 810048c:	f000 f806 	bl	810049c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8100490:	bf00      	nop
 8100492:	bd80      	pop	{r7, pc}
 8100494:	1000002c 	.word	0x1000002c
 8100498:	40013000 	.word	0x40013000

0810049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810049c:	b480      	push	{r7}
 810049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81004a0:	b672      	cpsid	i
}
 81004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81004a4:	e7fe      	b.n	81004a4 <Error_Handler+0x8>
	...

081004a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81004a8:	b480      	push	{r7}
 81004aa:	b083      	sub	sp, #12
 81004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81004ae:	4b0a      	ldr	r3, [pc, #40]	; (81004d8 <HAL_MspInit+0x30>)
 81004b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81004b4:	4a08      	ldr	r2, [pc, #32]	; (81004d8 <HAL_MspInit+0x30>)
 81004b6:	f043 0302 	orr.w	r3, r3, #2
 81004ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81004be:	4b06      	ldr	r3, [pc, #24]	; (81004d8 <HAL_MspInit+0x30>)
 81004c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81004c4:	f003 0302 	and.w	r3, r3, #2
 81004c8:	607b      	str	r3, [r7, #4]
 81004ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81004cc:	bf00      	nop
 81004ce:	370c      	adds	r7, #12
 81004d0:	46bd      	mov	sp, r7
 81004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004d6:	4770      	bx	lr
 81004d8:	58024400 	.word	0x58024400

081004dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 81004dc:	b580      	push	{r7, lr}
 81004de:	b0ba      	sub	sp, #232	; 0xe8
 81004e0:	af00      	add	r7, sp, #0
 81004e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81004e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81004e8:	2200      	movs	r2, #0
 81004ea:	601a      	str	r2, [r3, #0]
 81004ec:	605a      	str	r2, [r3, #4]
 81004ee:	609a      	str	r2, [r3, #8]
 81004f0:	60da      	str	r2, [r3, #12]
 81004f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81004f4:	f107 0318 	add.w	r3, r7, #24
 81004f8:	22bc      	movs	r2, #188	; 0xbc
 81004fa:	2100      	movs	r1, #0
 81004fc:	4618      	mov	r0, r3
 81004fe:	f002 f877 	bl	81025f0 <memset>
  if(hspi->Instance==SPI1)
 8100502:	687b      	ldr	r3, [r7, #4]
 8100504:	681b      	ldr	r3, [r3, #0]
 8100506:	4a36      	ldr	r2, [pc, #216]	; (81005e0 <HAL_SPI_MspInit+0x104>)
 8100508:	4293      	cmp	r3, r2
 810050a:	d165      	bne.n	81005d8 <HAL_SPI_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 810050c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100510:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8100512:	2300      	movs	r3, #0
 8100514:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100516:	f107 0318 	add.w	r3, r7, #24
 810051a:	4618      	mov	r0, r3
 810051c:	f000 fe78 	bl	8101210 <HAL_RCCEx_PeriphCLKConfig>
 8100520:	4603      	mov	r3, r0
 8100522:	2b00      	cmp	r3, #0
 8100524:	d001      	beq.n	810052a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8100526:	f7ff ffb9 	bl	810049c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 810052a:	4b2e      	ldr	r3, [pc, #184]	; (81005e4 <HAL_SPI_MspInit+0x108>)
 810052c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100530:	4a2c      	ldr	r2, [pc, #176]	; (81005e4 <HAL_SPI_MspInit+0x108>)
 8100532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8100536:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810053a:	4b2a      	ldr	r3, [pc, #168]	; (81005e4 <HAL_SPI_MspInit+0x108>)
 810053c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8100544:	617b      	str	r3, [r7, #20]
 8100546:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100548:	4b26      	ldr	r3, [pc, #152]	; (81005e4 <HAL_SPI_MspInit+0x108>)
 810054a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810054e:	4a25      	ldr	r2, [pc, #148]	; (81005e4 <HAL_SPI_MspInit+0x108>)
 8100550:	f043 0301 	orr.w	r3, r3, #1
 8100554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100558:	4b22      	ldr	r3, [pc, #136]	; (81005e4 <HAL_SPI_MspInit+0x108>)
 810055a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810055e:	f003 0301 	and.w	r3, r3, #1
 8100562:	613b      	str	r3, [r7, #16]
 8100564:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100566:	4b1f      	ldr	r3, [pc, #124]	; (81005e4 <HAL_SPI_MspInit+0x108>)
 8100568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810056c:	4a1d      	ldr	r2, [pc, #116]	; (81005e4 <HAL_SPI_MspInit+0x108>)
 810056e:	f043 0308 	orr.w	r3, r3, #8
 8100572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100576:	4b1b      	ldr	r3, [pc, #108]	; (81005e4 <HAL_SPI_MspInit+0x108>)
 8100578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810057c:	f003 0308 	and.w	r3, r3, #8
 8100580:	60fb      	str	r3, [r7, #12]
 8100582:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8100584:	2360      	movs	r3, #96	; 0x60
 8100586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810058a:	2302      	movs	r3, #2
 810058c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100590:	2300      	movs	r3, #0
 8100592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100596:	2300      	movs	r3, #0
 8100598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810059c:	2305      	movs	r3, #5
 810059e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81005a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81005a6:	4619      	mov	r1, r3
 81005a8:	480f      	ldr	r0, [pc, #60]	; (81005e8 <HAL_SPI_MspInit+0x10c>)
 81005aa:	f000 fa21 	bl	81009f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81005ae:	2380      	movs	r3, #128	; 0x80
 81005b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81005b4:	2302      	movs	r3, #2
 81005b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81005ba:	2300      	movs	r3, #0
 81005bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81005c0:	2300      	movs	r3, #0
 81005c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81005c6:	2305      	movs	r3, #5
 81005c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81005cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81005d0:	4619      	mov	r1, r3
 81005d2:	4806      	ldr	r0, [pc, #24]	; (81005ec <HAL_SPI_MspInit+0x110>)
 81005d4:	f000 fa0c 	bl	81009f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 81005d8:	bf00      	nop
 81005da:	37e8      	adds	r7, #232	; 0xe8
 81005dc:	46bd      	mov	sp, r7
 81005de:	bd80      	pop	{r7, pc}
 81005e0:	40013000 	.word	0x40013000
 81005e4:	58024400 	.word	0x58024400
 81005e8:	58020000 	.word	0x58020000
 81005ec:	58020c00 	.word	0x58020c00

081005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81005f0:	b480      	push	{r7}
 81005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81005f4:	e7fe      	b.n	81005f4 <NMI_Handler+0x4>

081005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81005f6:	b480      	push	{r7}
 81005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81005fa:	e7fe      	b.n	81005fa <HardFault_Handler+0x4>

081005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81005fc:	b480      	push	{r7}
 81005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100600:	e7fe      	b.n	8100600 <MemManage_Handler+0x4>

08100602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100602:	b480      	push	{r7}
 8100604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100606:	e7fe      	b.n	8100606 <BusFault_Handler+0x4>

08100608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100608:	b480      	push	{r7}
 810060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810060c:	e7fe      	b.n	810060c <UsageFault_Handler+0x4>

0810060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810060e:	b480      	push	{r7}
 8100610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100612:	bf00      	nop
 8100614:	46bd      	mov	sp, r7
 8100616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810061a:	4770      	bx	lr

0810061c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810061c:	b480      	push	{r7}
 810061e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100620:	bf00      	nop
 8100622:	46bd      	mov	sp, r7
 8100624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100628:	4770      	bx	lr

0810062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810062a:	b480      	push	{r7}
 810062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810062e:	bf00      	nop
 8100630:	46bd      	mov	sp, r7
 8100632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100636:	4770      	bx	lr

08100638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100638:	b580      	push	{r7, lr}
 810063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810063c:	f000 f8c0 	bl	81007c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100640:	bf00      	nop
 8100642:	bd80      	pop	{r7, pc}

08100644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100644:	f8df d034 	ldr.w	sp, [pc, #52]	; 810067c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100648:	f7ff fe46 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810064c:	480c      	ldr	r0, [pc, #48]	; (8100680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810064e:	490d      	ldr	r1, [pc, #52]	; (8100684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100650:	4a0d      	ldr	r2, [pc, #52]	; (8100688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100654:	e002      	b.n	810065c <LoopCopyDataInit>

08100656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810065a:	3304      	adds	r3, #4

0810065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100660:	d3f9      	bcc.n	8100656 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100662:	4a0a      	ldr	r2, [pc, #40]	; (810068c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100664:	4c0a      	ldr	r4, [pc, #40]	; (8100690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100668:	e001      	b.n	810066e <LoopFillZerobss>

0810066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810066c:	3204      	adds	r2, #4

0810066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100670:	d3fb      	bcc.n	810066a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100672:	f001 ff99 	bl	81025a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100676:	f7ff fe47 	bl	8100308 <main>
  bx  lr
 810067a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810067c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100680:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100684:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100688:	08102630 	.word	0x08102630
  ldr r2, =_sbss
 810068c:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100690:	100000c0 	.word	0x100000c0

08100694 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100694:	e7fe      	b.n	8100694 <ADC3_IRQHandler>
	...

08100698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100698:	b580      	push	{r7, lr}
 810069a:	b082      	sub	sp, #8
 810069c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810069e:	4b28      	ldr	r3, [pc, #160]	; (8100740 <HAL_Init+0xa8>)
 81006a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81006a4:	4a26      	ldr	r2, [pc, #152]	; (8100740 <HAL_Init+0xa8>)
 81006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81006aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81006ae:	4b24      	ldr	r3, [pc, #144]	; (8100740 <HAL_Init+0xa8>)
 81006b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81006b8:	603b      	str	r3, [r7, #0]
 81006ba:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81006bc:	4b21      	ldr	r3, [pc, #132]	; (8100744 <HAL_Init+0xac>)
 81006be:	681b      	ldr	r3, [r3, #0]
 81006c0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81006c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81006c8:	4a1e      	ldr	r2, [pc, #120]	; (8100744 <HAL_Init+0xac>)
 81006ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81006ce:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81006d0:	4b1c      	ldr	r3, [pc, #112]	; (8100744 <HAL_Init+0xac>)
 81006d2:	681b      	ldr	r3, [r3, #0]
 81006d4:	4a1b      	ldr	r2, [pc, #108]	; (8100744 <HAL_Init+0xac>)
 81006d6:	f043 0301 	orr.w	r3, r3, #1
 81006da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81006dc:	2003      	movs	r0, #3
 81006de:	f000 f941 	bl	8100964 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81006e2:	f000 fc1b 	bl	8100f1c <HAL_RCC_GetSysClockFreq>
 81006e6:	4602      	mov	r2, r0
 81006e8:	4b15      	ldr	r3, [pc, #84]	; (8100740 <HAL_Init+0xa8>)
 81006ea:	699b      	ldr	r3, [r3, #24]
 81006ec:	0a1b      	lsrs	r3, r3, #8
 81006ee:	f003 030f 	and.w	r3, r3, #15
 81006f2:	4915      	ldr	r1, [pc, #84]	; (8100748 <HAL_Init+0xb0>)
 81006f4:	5ccb      	ldrb	r3, [r1, r3]
 81006f6:	f003 031f 	and.w	r3, r3, #31
 81006fa:	fa22 f303 	lsr.w	r3, r2, r3
 81006fe:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100700:	4b0f      	ldr	r3, [pc, #60]	; (8100740 <HAL_Init+0xa8>)
 8100702:	699b      	ldr	r3, [r3, #24]
 8100704:	f003 030f 	and.w	r3, r3, #15
 8100708:	4a0f      	ldr	r2, [pc, #60]	; (8100748 <HAL_Init+0xb0>)
 810070a:	5cd3      	ldrb	r3, [r2, r3]
 810070c:	f003 031f 	and.w	r3, r3, #31
 8100710:	687a      	ldr	r2, [r7, #4]
 8100712:	fa22 f303 	lsr.w	r3, r2, r3
 8100716:	4a0d      	ldr	r2, [pc, #52]	; (810074c <HAL_Init+0xb4>)
 8100718:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810071a:	4b0c      	ldr	r3, [pc, #48]	; (810074c <HAL_Init+0xb4>)
 810071c:	681b      	ldr	r3, [r3, #0]
 810071e:	4a0c      	ldr	r2, [pc, #48]	; (8100750 <HAL_Init+0xb8>)
 8100720:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100722:	2000      	movs	r0, #0
 8100724:	f000 f816 	bl	8100754 <HAL_InitTick>
 8100728:	4603      	mov	r3, r0
 810072a:	2b00      	cmp	r3, #0
 810072c:	d001      	beq.n	8100732 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810072e:	2301      	movs	r3, #1
 8100730:	e002      	b.n	8100738 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100732:	f7ff feb9 	bl	81004a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100736:	2300      	movs	r3, #0
}
 8100738:	4618      	mov	r0, r3
 810073a:	3708      	adds	r7, #8
 810073c:	46bd      	mov	sp, r7
 810073e:	bd80      	pop	{r7, pc}
 8100740:	58024400 	.word	0x58024400
 8100744:	40024400 	.word	0x40024400
 8100748:	08102618 	.word	0x08102618
 810074c:	10000004 	.word	0x10000004
 8100750:	10000000 	.word	0x10000000

08100754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100754:	b580      	push	{r7, lr}
 8100756:	b082      	sub	sp, #8
 8100758:	af00      	add	r7, sp, #0
 810075a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810075c:	4b15      	ldr	r3, [pc, #84]	; (81007b4 <HAL_InitTick+0x60>)
 810075e:	781b      	ldrb	r3, [r3, #0]
 8100760:	2b00      	cmp	r3, #0
 8100762:	d101      	bne.n	8100768 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100764:	2301      	movs	r3, #1
 8100766:	e021      	b.n	81007ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100768:	4b13      	ldr	r3, [pc, #76]	; (81007b8 <HAL_InitTick+0x64>)
 810076a:	681a      	ldr	r2, [r3, #0]
 810076c:	4b11      	ldr	r3, [pc, #68]	; (81007b4 <HAL_InitTick+0x60>)
 810076e:	781b      	ldrb	r3, [r3, #0]
 8100770:	4619      	mov	r1, r3
 8100772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100776:	fbb3 f3f1 	udiv	r3, r3, r1
 810077a:	fbb2 f3f3 	udiv	r3, r2, r3
 810077e:	4618      	mov	r0, r3
 8100780:	f000 f915 	bl	81009ae <HAL_SYSTICK_Config>
 8100784:	4603      	mov	r3, r0
 8100786:	2b00      	cmp	r3, #0
 8100788:	d001      	beq.n	810078e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810078a:	2301      	movs	r3, #1
 810078c:	e00e      	b.n	81007ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810078e:	687b      	ldr	r3, [r7, #4]
 8100790:	2b0f      	cmp	r3, #15
 8100792:	d80a      	bhi.n	81007aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100794:	2200      	movs	r2, #0
 8100796:	6879      	ldr	r1, [r7, #4]
 8100798:	f04f 30ff 	mov.w	r0, #4294967295
 810079c:	f000 f8ed 	bl	810097a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81007a0:	4a06      	ldr	r2, [pc, #24]	; (81007bc <HAL_InitTick+0x68>)
 81007a2:	687b      	ldr	r3, [r7, #4]
 81007a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81007a6:	2300      	movs	r3, #0
 81007a8:	e000      	b.n	81007ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 81007aa:	2301      	movs	r3, #1
}
 81007ac:	4618      	mov	r0, r3
 81007ae:	3708      	adds	r7, #8
 81007b0:	46bd      	mov	sp, r7
 81007b2:	bd80      	pop	{r7, pc}
 81007b4:	1000000c 	.word	0x1000000c
 81007b8:	10000000 	.word	0x10000000
 81007bc:	10000008 	.word	0x10000008

081007c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81007c0:	b480      	push	{r7}
 81007c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81007c4:	4b06      	ldr	r3, [pc, #24]	; (81007e0 <HAL_IncTick+0x20>)
 81007c6:	781b      	ldrb	r3, [r3, #0]
 81007c8:	461a      	mov	r2, r3
 81007ca:	4b06      	ldr	r3, [pc, #24]	; (81007e4 <HAL_IncTick+0x24>)
 81007cc:	681b      	ldr	r3, [r3, #0]
 81007ce:	4413      	add	r3, r2
 81007d0:	4a04      	ldr	r2, [pc, #16]	; (81007e4 <HAL_IncTick+0x24>)
 81007d2:	6013      	str	r3, [r2, #0]
}
 81007d4:	bf00      	nop
 81007d6:	46bd      	mov	sp, r7
 81007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007dc:	4770      	bx	lr
 81007de:	bf00      	nop
 81007e0:	1000000c 	.word	0x1000000c
 81007e4:	100000bc 	.word	0x100000bc

081007e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81007e8:	b480      	push	{r7}
 81007ea:	af00      	add	r7, sp, #0
  return uwTick;
 81007ec:	4b03      	ldr	r3, [pc, #12]	; (81007fc <HAL_GetTick+0x14>)
 81007ee:	681b      	ldr	r3, [r3, #0]
}
 81007f0:	4618      	mov	r0, r3
 81007f2:	46bd      	mov	sp, r7
 81007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007f8:	4770      	bx	lr
 81007fa:	bf00      	nop
 81007fc:	100000bc 	.word	0x100000bc

08100800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100800:	b480      	push	{r7}
 8100802:	b085      	sub	sp, #20
 8100804:	af00      	add	r7, sp, #0
 8100806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100808:	687b      	ldr	r3, [r7, #4]
 810080a:	f003 0307 	and.w	r3, r3, #7
 810080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100810:	4b0c      	ldr	r3, [pc, #48]	; (8100844 <__NVIC_SetPriorityGrouping+0x44>)
 8100812:	68db      	ldr	r3, [r3, #12]
 8100814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100816:	68ba      	ldr	r2, [r7, #8]
 8100818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810081c:	4013      	ands	r3, r2
 810081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100820:	68fb      	ldr	r3, [r7, #12]
 8100822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100824:	68bb      	ldr	r3, [r7, #8]
 8100826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100832:	4a04      	ldr	r2, [pc, #16]	; (8100844 <__NVIC_SetPriorityGrouping+0x44>)
 8100834:	68bb      	ldr	r3, [r7, #8]
 8100836:	60d3      	str	r3, [r2, #12]
}
 8100838:	bf00      	nop
 810083a:	3714      	adds	r7, #20
 810083c:	46bd      	mov	sp, r7
 810083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100842:	4770      	bx	lr
 8100844:	e000ed00 	.word	0xe000ed00

08100848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100848:	b480      	push	{r7}
 810084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810084c:	4b04      	ldr	r3, [pc, #16]	; (8100860 <__NVIC_GetPriorityGrouping+0x18>)
 810084e:	68db      	ldr	r3, [r3, #12]
 8100850:	0a1b      	lsrs	r3, r3, #8
 8100852:	f003 0307 	and.w	r3, r3, #7
}
 8100856:	4618      	mov	r0, r3
 8100858:	46bd      	mov	sp, r7
 810085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810085e:	4770      	bx	lr
 8100860:	e000ed00 	.word	0xe000ed00

08100864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100864:	b480      	push	{r7}
 8100866:	b083      	sub	sp, #12
 8100868:	af00      	add	r7, sp, #0
 810086a:	4603      	mov	r3, r0
 810086c:	6039      	str	r1, [r7, #0]
 810086e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100874:	2b00      	cmp	r3, #0
 8100876:	db0a      	blt.n	810088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100878:	683b      	ldr	r3, [r7, #0]
 810087a:	b2da      	uxtb	r2, r3
 810087c:	490c      	ldr	r1, [pc, #48]	; (81008b0 <__NVIC_SetPriority+0x4c>)
 810087e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100882:	0112      	lsls	r2, r2, #4
 8100884:	b2d2      	uxtb	r2, r2
 8100886:	440b      	add	r3, r1
 8100888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810088c:	e00a      	b.n	81008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810088e:	683b      	ldr	r3, [r7, #0]
 8100890:	b2da      	uxtb	r2, r3
 8100892:	4908      	ldr	r1, [pc, #32]	; (81008b4 <__NVIC_SetPriority+0x50>)
 8100894:	88fb      	ldrh	r3, [r7, #6]
 8100896:	f003 030f 	and.w	r3, r3, #15
 810089a:	3b04      	subs	r3, #4
 810089c:	0112      	lsls	r2, r2, #4
 810089e:	b2d2      	uxtb	r2, r2
 81008a0:	440b      	add	r3, r1
 81008a2:	761a      	strb	r2, [r3, #24]
}
 81008a4:	bf00      	nop
 81008a6:	370c      	adds	r7, #12
 81008a8:	46bd      	mov	sp, r7
 81008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008ae:	4770      	bx	lr
 81008b0:	e000e100 	.word	0xe000e100
 81008b4:	e000ed00 	.word	0xe000ed00

081008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81008b8:	b480      	push	{r7}
 81008ba:	b089      	sub	sp, #36	; 0x24
 81008bc:	af00      	add	r7, sp, #0
 81008be:	60f8      	str	r0, [r7, #12]
 81008c0:	60b9      	str	r1, [r7, #8]
 81008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81008c4:	68fb      	ldr	r3, [r7, #12]
 81008c6:	f003 0307 	and.w	r3, r3, #7
 81008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81008cc:	69fb      	ldr	r3, [r7, #28]
 81008ce:	f1c3 0307 	rsb	r3, r3, #7
 81008d2:	2b04      	cmp	r3, #4
 81008d4:	bf28      	it	cs
 81008d6:	2304      	movcs	r3, #4
 81008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81008da:	69fb      	ldr	r3, [r7, #28]
 81008dc:	3304      	adds	r3, #4
 81008de:	2b06      	cmp	r3, #6
 81008e0:	d902      	bls.n	81008e8 <NVIC_EncodePriority+0x30>
 81008e2:	69fb      	ldr	r3, [r7, #28]
 81008e4:	3b03      	subs	r3, #3
 81008e6:	e000      	b.n	81008ea <NVIC_EncodePriority+0x32>
 81008e8:	2300      	movs	r3, #0
 81008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81008ec:	f04f 32ff 	mov.w	r2, #4294967295
 81008f0:	69bb      	ldr	r3, [r7, #24]
 81008f2:	fa02 f303 	lsl.w	r3, r2, r3
 81008f6:	43da      	mvns	r2, r3
 81008f8:	68bb      	ldr	r3, [r7, #8]
 81008fa:	401a      	ands	r2, r3
 81008fc:	697b      	ldr	r3, [r7, #20]
 81008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100900:	f04f 31ff 	mov.w	r1, #4294967295
 8100904:	697b      	ldr	r3, [r7, #20]
 8100906:	fa01 f303 	lsl.w	r3, r1, r3
 810090a:	43d9      	mvns	r1, r3
 810090c:	687b      	ldr	r3, [r7, #4]
 810090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100910:	4313      	orrs	r3, r2
         );
}
 8100912:	4618      	mov	r0, r3
 8100914:	3724      	adds	r7, #36	; 0x24
 8100916:	46bd      	mov	sp, r7
 8100918:	f85d 7b04 	ldr.w	r7, [sp], #4
 810091c:	4770      	bx	lr
	...

08100920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100920:	b580      	push	{r7, lr}
 8100922:	b082      	sub	sp, #8
 8100924:	af00      	add	r7, sp, #0
 8100926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100928:	687b      	ldr	r3, [r7, #4]
 810092a:	3b01      	subs	r3, #1
 810092c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100930:	d301      	bcc.n	8100936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100932:	2301      	movs	r3, #1
 8100934:	e00f      	b.n	8100956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100936:	4a0a      	ldr	r2, [pc, #40]	; (8100960 <SysTick_Config+0x40>)
 8100938:	687b      	ldr	r3, [r7, #4]
 810093a:	3b01      	subs	r3, #1
 810093c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810093e:	210f      	movs	r1, #15
 8100940:	f04f 30ff 	mov.w	r0, #4294967295
 8100944:	f7ff ff8e 	bl	8100864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100948:	4b05      	ldr	r3, [pc, #20]	; (8100960 <SysTick_Config+0x40>)
 810094a:	2200      	movs	r2, #0
 810094c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810094e:	4b04      	ldr	r3, [pc, #16]	; (8100960 <SysTick_Config+0x40>)
 8100950:	2207      	movs	r2, #7
 8100952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100954:	2300      	movs	r3, #0
}
 8100956:	4618      	mov	r0, r3
 8100958:	3708      	adds	r7, #8
 810095a:	46bd      	mov	sp, r7
 810095c:	bd80      	pop	{r7, pc}
 810095e:	bf00      	nop
 8100960:	e000e010 	.word	0xe000e010

08100964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100964:	b580      	push	{r7, lr}
 8100966:	b082      	sub	sp, #8
 8100968:	af00      	add	r7, sp, #0
 810096a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810096c:	6878      	ldr	r0, [r7, #4]
 810096e:	f7ff ff47 	bl	8100800 <__NVIC_SetPriorityGrouping>
}
 8100972:	bf00      	nop
 8100974:	3708      	adds	r7, #8
 8100976:	46bd      	mov	sp, r7
 8100978:	bd80      	pop	{r7, pc}

0810097a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810097a:	b580      	push	{r7, lr}
 810097c:	b086      	sub	sp, #24
 810097e:	af00      	add	r7, sp, #0
 8100980:	4603      	mov	r3, r0
 8100982:	60b9      	str	r1, [r7, #8]
 8100984:	607a      	str	r2, [r7, #4]
 8100986:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100988:	f7ff ff5e 	bl	8100848 <__NVIC_GetPriorityGrouping>
 810098c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810098e:	687a      	ldr	r2, [r7, #4]
 8100990:	68b9      	ldr	r1, [r7, #8]
 8100992:	6978      	ldr	r0, [r7, #20]
 8100994:	f7ff ff90 	bl	81008b8 <NVIC_EncodePriority>
 8100998:	4602      	mov	r2, r0
 810099a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810099e:	4611      	mov	r1, r2
 81009a0:	4618      	mov	r0, r3
 81009a2:	f7ff ff5f 	bl	8100864 <__NVIC_SetPriority>
}
 81009a6:	bf00      	nop
 81009a8:	3718      	adds	r7, #24
 81009aa:	46bd      	mov	sp, r7
 81009ac:	bd80      	pop	{r7, pc}

081009ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81009ae:	b580      	push	{r7, lr}
 81009b0:	b082      	sub	sp, #8
 81009b2:	af00      	add	r7, sp, #0
 81009b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81009b6:	6878      	ldr	r0, [r7, #4]
 81009b8:	f7ff ffb2 	bl	8100920 <SysTick_Config>
 81009bc:	4603      	mov	r3, r0
}
 81009be:	4618      	mov	r0, r3
 81009c0:	3708      	adds	r7, #8
 81009c2:	46bd      	mov	sp, r7
 81009c4:	bd80      	pop	{r7, pc}
	...

081009c8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81009c8:	b480      	push	{r7}
 81009ca:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81009cc:	4b07      	ldr	r3, [pc, #28]	; (81009ec <HAL_GetCurrentCPUID+0x24>)
 81009ce:	681b      	ldr	r3, [r3, #0]
 81009d0:	091b      	lsrs	r3, r3, #4
 81009d2:	f003 030f 	and.w	r3, r3, #15
 81009d6:	2b07      	cmp	r3, #7
 81009d8:	d101      	bne.n	81009de <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81009da:	2303      	movs	r3, #3
 81009dc:	e000      	b.n	81009e0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81009de:	2301      	movs	r3, #1
  }
}
 81009e0:	4618      	mov	r0, r3
 81009e2:	46bd      	mov	sp, r7
 81009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009e8:	4770      	bx	lr
 81009ea:	bf00      	nop
 81009ec:	e000ed00 	.word	0xe000ed00

081009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81009f0:	b480      	push	{r7}
 81009f2:	b089      	sub	sp, #36	; 0x24
 81009f4:	af00      	add	r7, sp, #0
 81009f6:	6078      	str	r0, [r7, #4]
 81009f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81009fa:	2300      	movs	r3, #0
 81009fc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81009fe:	4b89      	ldr	r3, [pc, #548]	; (8100c24 <HAL_GPIO_Init+0x234>)
 8100a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100a02:	e194      	b.n	8100d2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100a04:	683b      	ldr	r3, [r7, #0]
 8100a06:	681a      	ldr	r2, [r3, #0]
 8100a08:	2101      	movs	r1, #1
 8100a0a:	69fb      	ldr	r3, [r7, #28]
 8100a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8100a10:	4013      	ands	r3, r2
 8100a12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100a14:	693b      	ldr	r3, [r7, #16]
 8100a16:	2b00      	cmp	r3, #0
 8100a18:	f000 8186 	beq.w	8100d28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100a1c:	683b      	ldr	r3, [r7, #0]
 8100a1e:	685b      	ldr	r3, [r3, #4]
 8100a20:	f003 0303 	and.w	r3, r3, #3
 8100a24:	2b01      	cmp	r3, #1
 8100a26:	d005      	beq.n	8100a34 <HAL_GPIO_Init+0x44>
 8100a28:	683b      	ldr	r3, [r7, #0]
 8100a2a:	685b      	ldr	r3, [r3, #4]
 8100a2c:	f003 0303 	and.w	r3, r3, #3
 8100a30:	2b02      	cmp	r3, #2
 8100a32:	d130      	bne.n	8100a96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100a34:	687b      	ldr	r3, [r7, #4]
 8100a36:	689b      	ldr	r3, [r3, #8]
 8100a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100a3a:	69fb      	ldr	r3, [r7, #28]
 8100a3c:	005b      	lsls	r3, r3, #1
 8100a3e:	2203      	movs	r2, #3
 8100a40:	fa02 f303 	lsl.w	r3, r2, r3
 8100a44:	43db      	mvns	r3, r3
 8100a46:	69ba      	ldr	r2, [r7, #24]
 8100a48:	4013      	ands	r3, r2
 8100a4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100a4c:	683b      	ldr	r3, [r7, #0]
 8100a4e:	68da      	ldr	r2, [r3, #12]
 8100a50:	69fb      	ldr	r3, [r7, #28]
 8100a52:	005b      	lsls	r3, r3, #1
 8100a54:	fa02 f303 	lsl.w	r3, r2, r3
 8100a58:	69ba      	ldr	r2, [r7, #24]
 8100a5a:	4313      	orrs	r3, r2
 8100a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100a5e:	687b      	ldr	r3, [r7, #4]
 8100a60:	69ba      	ldr	r2, [r7, #24]
 8100a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100a64:	687b      	ldr	r3, [r7, #4]
 8100a66:	685b      	ldr	r3, [r3, #4]
 8100a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100a6a:	2201      	movs	r2, #1
 8100a6c:	69fb      	ldr	r3, [r7, #28]
 8100a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8100a72:	43db      	mvns	r3, r3
 8100a74:	69ba      	ldr	r2, [r7, #24]
 8100a76:	4013      	ands	r3, r2
 8100a78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100a7a:	683b      	ldr	r3, [r7, #0]
 8100a7c:	685b      	ldr	r3, [r3, #4]
 8100a7e:	091b      	lsrs	r3, r3, #4
 8100a80:	f003 0201 	and.w	r2, r3, #1
 8100a84:	69fb      	ldr	r3, [r7, #28]
 8100a86:	fa02 f303 	lsl.w	r3, r2, r3
 8100a8a:	69ba      	ldr	r2, [r7, #24]
 8100a8c:	4313      	orrs	r3, r2
 8100a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100a90:	687b      	ldr	r3, [r7, #4]
 8100a92:	69ba      	ldr	r2, [r7, #24]
 8100a94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100a96:	683b      	ldr	r3, [r7, #0]
 8100a98:	685b      	ldr	r3, [r3, #4]
 8100a9a:	f003 0303 	and.w	r3, r3, #3
 8100a9e:	2b03      	cmp	r3, #3
 8100aa0:	d017      	beq.n	8100ad2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100aa2:	687b      	ldr	r3, [r7, #4]
 8100aa4:	68db      	ldr	r3, [r3, #12]
 8100aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100aa8:	69fb      	ldr	r3, [r7, #28]
 8100aaa:	005b      	lsls	r3, r3, #1
 8100aac:	2203      	movs	r2, #3
 8100aae:	fa02 f303 	lsl.w	r3, r2, r3
 8100ab2:	43db      	mvns	r3, r3
 8100ab4:	69ba      	ldr	r2, [r7, #24]
 8100ab6:	4013      	ands	r3, r2
 8100ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100aba:	683b      	ldr	r3, [r7, #0]
 8100abc:	689a      	ldr	r2, [r3, #8]
 8100abe:	69fb      	ldr	r3, [r7, #28]
 8100ac0:	005b      	lsls	r3, r3, #1
 8100ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8100ac6:	69ba      	ldr	r2, [r7, #24]
 8100ac8:	4313      	orrs	r3, r2
 8100aca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100acc:	687b      	ldr	r3, [r7, #4]
 8100ace:	69ba      	ldr	r2, [r7, #24]
 8100ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100ad2:	683b      	ldr	r3, [r7, #0]
 8100ad4:	685b      	ldr	r3, [r3, #4]
 8100ad6:	f003 0303 	and.w	r3, r3, #3
 8100ada:	2b02      	cmp	r3, #2
 8100adc:	d123      	bne.n	8100b26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100ade:	69fb      	ldr	r3, [r7, #28]
 8100ae0:	08da      	lsrs	r2, r3, #3
 8100ae2:	687b      	ldr	r3, [r7, #4]
 8100ae4:	3208      	adds	r2, #8
 8100ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100aec:	69fb      	ldr	r3, [r7, #28]
 8100aee:	f003 0307 	and.w	r3, r3, #7
 8100af2:	009b      	lsls	r3, r3, #2
 8100af4:	220f      	movs	r2, #15
 8100af6:	fa02 f303 	lsl.w	r3, r2, r3
 8100afa:	43db      	mvns	r3, r3
 8100afc:	69ba      	ldr	r2, [r7, #24]
 8100afe:	4013      	ands	r3, r2
 8100b00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100b02:	683b      	ldr	r3, [r7, #0]
 8100b04:	691a      	ldr	r2, [r3, #16]
 8100b06:	69fb      	ldr	r3, [r7, #28]
 8100b08:	f003 0307 	and.w	r3, r3, #7
 8100b0c:	009b      	lsls	r3, r3, #2
 8100b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8100b12:	69ba      	ldr	r2, [r7, #24]
 8100b14:	4313      	orrs	r3, r2
 8100b16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100b18:	69fb      	ldr	r3, [r7, #28]
 8100b1a:	08da      	lsrs	r2, r3, #3
 8100b1c:	687b      	ldr	r3, [r7, #4]
 8100b1e:	3208      	adds	r2, #8
 8100b20:	69b9      	ldr	r1, [r7, #24]
 8100b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100b26:	687b      	ldr	r3, [r7, #4]
 8100b28:	681b      	ldr	r3, [r3, #0]
 8100b2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100b2c:	69fb      	ldr	r3, [r7, #28]
 8100b2e:	005b      	lsls	r3, r3, #1
 8100b30:	2203      	movs	r2, #3
 8100b32:	fa02 f303 	lsl.w	r3, r2, r3
 8100b36:	43db      	mvns	r3, r3
 8100b38:	69ba      	ldr	r2, [r7, #24]
 8100b3a:	4013      	ands	r3, r2
 8100b3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100b3e:	683b      	ldr	r3, [r7, #0]
 8100b40:	685b      	ldr	r3, [r3, #4]
 8100b42:	f003 0203 	and.w	r2, r3, #3
 8100b46:	69fb      	ldr	r3, [r7, #28]
 8100b48:	005b      	lsls	r3, r3, #1
 8100b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8100b4e:	69ba      	ldr	r2, [r7, #24]
 8100b50:	4313      	orrs	r3, r2
 8100b52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100b54:	687b      	ldr	r3, [r7, #4]
 8100b56:	69ba      	ldr	r2, [r7, #24]
 8100b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100b5a:	683b      	ldr	r3, [r7, #0]
 8100b5c:	685b      	ldr	r3, [r3, #4]
 8100b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100b62:	2b00      	cmp	r3, #0
 8100b64:	f000 80e0 	beq.w	8100d28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100b68:	4b2f      	ldr	r3, [pc, #188]	; (8100c28 <HAL_GPIO_Init+0x238>)
 8100b6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b6e:	4a2e      	ldr	r2, [pc, #184]	; (8100c28 <HAL_GPIO_Init+0x238>)
 8100b70:	f043 0302 	orr.w	r3, r3, #2
 8100b74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100b78:	4b2b      	ldr	r3, [pc, #172]	; (8100c28 <HAL_GPIO_Init+0x238>)
 8100b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b7e:	f003 0302 	and.w	r3, r3, #2
 8100b82:	60fb      	str	r3, [r7, #12]
 8100b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100b86:	4a29      	ldr	r2, [pc, #164]	; (8100c2c <HAL_GPIO_Init+0x23c>)
 8100b88:	69fb      	ldr	r3, [r7, #28]
 8100b8a:	089b      	lsrs	r3, r3, #2
 8100b8c:	3302      	adds	r3, #2
 8100b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100b94:	69fb      	ldr	r3, [r7, #28]
 8100b96:	f003 0303 	and.w	r3, r3, #3
 8100b9a:	009b      	lsls	r3, r3, #2
 8100b9c:	220f      	movs	r2, #15
 8100b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8100ba2:	43db      	mvns	r3, r3
 8100ba4:	69ba      	ldr	r2, [r7, #24]
 8100ba6:	4013      	ands	r3, r2
 8100ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100baa:	687b      	ldr	r3, [r7, #4]
 8100bac:	4a20      	ldr	r2, [pc, #128]	; (8100c30 <HAL_GPIO_Init+0x240>)
 8100bae:	4293      	cmp	r3, r2
 8100bb0:	d052      	beq.n	8100c58 <HAL_GPIO_Init+0x268>
 8100bb2:	687b      	ldr	r3, [r7, #4]
 8100bb4:	4a1f      	ldr	r2, [pc, #124]	; (8100c34 <HAL_GPIO_Init+0x244>)
 8100bb6:	4293      	cmp	r3, r2
 8100bb8:	d031      	beq.n	8100c1e <HAL_GPIO_Init+0x22e>
 8100bba:	687b      	ldr	r3, [r7, #4]
 8100bbc:	4a1e      	ldr	r2, [pc, #120]	; (8100c38 <HAL_GPIO_Init+0x248>)
 8100bbe:	4293      	cmp	r3, r2
 8100bc0:	d02b      	beq.n	8100c1a <HAL_GPIO_Init+0x22a>
 8100bc2:	687b      	ldr	r3, [r7, #4]
 8100bc4:	4a1d      	ldr	r2, [pc, #116]	; (8100c3c <HAL_GPIO_Init+0x24c>)
 8100bc6:	4293      	cmp	r3, r2
 8100bc8:	d025      	beq.n	8100c16 <HAL_GPIO_Init+0x226>
 8100bca:	687b      	ldr	r3, [r7, #4]
 8100bcc:	4a1c      	ldr	r2, [pc, #112]	; (8100c40 <HAL_GPIO_Init+0x250>)
 8100bce:	4293      	cmp	r3, r2
 8100bd0:	d01f      	beq.n	8100c12 <HAL_GPIO_Init+0x222>
 8100bd2:	687b      	ldr	r3, [r7, #4]
 8100bd4:	4a1b      	ldr	r2, [pc, #108]	; (8100c44 <HAL_GPIO_Init+0x254>)
 8100bd6:	4293      	cmp	r3, r2
 8100bd8:	d019      	beq.n	8100c0e <HAL_GPIO_Init+0x21e>
 8100bda:	687b      	ldr	r3, [r7, #4]
 8100bdc:	4a1a      	ldr	r2, [pc, #104]	; (8100c48 <HAL_GPIO_Init+0x258>)
 8100bde:	4293      	cmp	r3, r2
 8100be0:	d013      	beq.n	8100c0a <HAL_GPIO_Init+0x21a>
 8100be2:	687b      	ldr	r3, [r7, #4]
 8100be4:	4a19      	ldr	r2, [pc, #100]	; (8100c4c <HAL_GPIO_Init+0x25c>)
 8100be6:	4293      	cmp	r3, r2
 8100be8:	d00d      	beq.n	8100c06 <HAL_GPIO_Init+0x216>
 8100bea:	687b      	ldr	r3, [r7, #4]
 8100bec:	4a18      	ldr	r2, [pc, #96]	; (8100c50 <HAL_GPIO_Init+0x260>)
 8100bee:	4293      	cmp	r3, r2
 8100bf0:	d007      	beq.n	8100c02 <HAL_GPIO_Init+0x212>
 8100bf2:	687b      	ldr	r3, [r7, #4]
 8100bf4:	4a17      	ldr	r2, [pc, #92]	; (8100c54 <HAL_GPIO_Init+0x264>)
 8100bf6:	4293      	cmp	r3, r2
 8100bf8:	d101      	bne.n	8100bfe <HAL_GPIO_Init+0x20e>
 8100bfa:	2309      	movs	r3, #9
 8100bfc:	e02d      	b.n	8100c5a <HAL_GPIO_Init+0x26a>
 8100bfe:	230a      	movs	r3, #10
 8100c00:	e02b      	b.n	8100c5a <HAL_GPIO_Init+0x26a>
 8100c02:	2308      	movs	r3, #8
 8100c04:	e029      	b.n	8100c5a <HAL_GPIO_Init+0x26a>
 8100c06:	2307      	movs	r3, #7
 8100c08:	e027      	b.n	8100c5a <HAL_GPIO_Init+0x26a>
 8100c0a:	2306      	movs	r3, #6
 8100c0c:	e025      	b.n	8100c5a <HAL_GPIO_Init+0x26a>
 8100c0e:	2305      	movs	r3, #5
 8100c10:	e023      	b.n	8100c5a <HAL_GPIO_Init+0x26a>
 8100c12:	2304      	movs	r3, #4
 8100c14:	e021      	b.n	8100c5a <HAL_GPIO_Init+0x26a>
 8100c16:	2303      	movs	r3, #3
 8100c18:	e01f      	b.n	8100c5a <HAL_GPIO_Init+0x26a>
 8100c1a:	2302      	movs	r3, #2
 8100c1c:	e01d      	b.n	8100c5a <HAL_GPIO_Init+0x26a>
 8100c1e:	2301      	movs	r3, #1
 8100c20:	e01b      	b.n	8100c5a <HAL_GPIO_Init+0x26a>
 8100c22:	bf00      	nop
 8100c24:	580000c0 	.word	0x580000c0
 8100c28:	58024400 	.word	0x58024400
 8100c2c:	58000400 	.word	0x58000400
 8100c30:	58020000 	.word	0x58020000
 8100c34:	58020400 	.word	0x58020400
 8100c38:	58020800 	.word	0x58020800
 8100c3c:	58020c00 	.word	0x58020c00
 8100c40:	58021000 	.word	0x58021000
 8100c44:	58021400 	.word	0x58021400
 8100c48:	58021800 	.word	0x58021800
 8100c4c:	58021c00 	.word	0x58021c00
 8100c50:	58022000 	.word	0x58022000
 8100c54:	58022400 	.word	0x58022400
 8100c58:	2300      	movs	r3, #0
 8100c5a:	69fa      	ldr	r2, [r7, #28]
 8100c5c:	f002 0203 	and.w	r2, r2, #3
 8100c60:	0092      	lsls	r2, r2, #2
 8100c62:	4093      	lsls	r3, r2
 8100c64:	69ba      	ldr	r2, [r7, #24]
 8100c66:	4313      	orrs	r3, r2
 8100c68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100c6a:	4938      	ldr	r1, [pc, #224]	; (8100d4c <HAL_GPIO_Init+0x35c>)
 8100c6c:	69fb      	ldr	r3, [r7, #28]
 8100c6e:	089b      	lsrs	r3, r3, #2
 8100c70:	3302      	adds	r3, #2
 8100c72:	69ba      	ldr	r2, [r7, #24]
 8100c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100c7c:	681b      	ldr	r3, [r3, #0]
 8100c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c80:	693b      	ldr	r3, [r7, #16]
 8100c82:	43db      	mvns	r3, r3
 8100c84:	69ba      	ldr	r2, [r7, #24]
 8100c86:	4013      	ands	r3, r2
 8100c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100c8a:	683b      	ldr	r3, [r7, #0]
 8100c8c:	685b      	ldr	r3, [r3, #4]
 8100c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100c92:	2b00      	cmp	r3, #0
 8100c94:	d003      	beq.n	8100c9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100c96:	69ba      	ldr	r2, [r7, #24]
 8100c98:	693b      	ldr	r3, [r7, #16]
 8100c9a:	4313      	orrs	r3, r2
 8100c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100ca2:	69bb      	ldr	r3, [r7, #24]
 8100ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100caa:	685b      	ldr	r3, [r3, #4]
 8100cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100cae:	693b      	ldr	r3, [r7, #16]
 8100cb0:	43db      	mvns	r3, r3
 8100cb2:	69ba      	ldr	r2, [r7, #24]
 8100cb4:	4013      	ands	r3, r2
 8100cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100cb8:	683b      	ldr	r3, [r7, #0]
 8100cba:	685b      	ldr	r3, [r3, #4]
 8100cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100cc0:	2b00      	cmp	r3, #0
 8100cc2:	d003      	beq.n	8100ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100cc4:	69ba      	ldr	r2, [r7, #24]
 8100cc6:	693b      	ldr	r3, [r7, #16]
 8100cc8:	4313      	orrs	r3, r2
 8100cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100cd0:	69bb      	ldr	r3, [r7, #24]
 8100cd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100cd4:	697b      	ldr	r3, [r7, #20]
 8100cd6:	685b      	ldr	r3, [r3, #4]
 8100cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100cda:	693b      	ldr	r3, [r7, #16]
 8100cdc:	43db      	mvns	r3, r3
 8100cde:	69ba      	ldr	r2, [r7, #24]
 8100ce0:	4013      	ands	r3, r2
 8100ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100ce4:	683b      	ldr	r3, [r7, #0]
 8100ce6:	685b      	ldr	r3, [r3, #4]
 8100ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100cec:	2b00      	cmp	r3, #0
 8100cee:	d003      	beq.n	8100cf8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100cf0:	69ba      	ldr	r2, [r7, #24]
 8100cf2:	693b      	ldr	r3, [r7, #16]
 8100cf4:	4313      	orrs	r3, r2
 8100cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100cf8:	697b      	ldr	r3, [r7, #20]
 8100cfa:	69ba      	ldr	r2, [r7, #24]
 8100cfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100cfe:	697b      	ldr	r3, [r7, #20]
 8100d00:	681b      	ldr	r3, [r3, #0]
 8100d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100d04:	693b      	ldr	r3, [r7, #16]
 8100d06:	43db      	mvns	r3, r3
 8100d08:	69ba      	ldr	r2, [r7, #24]
 8100d0a:	4013      	ands	r3, r2
 8100d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100d0e:	683b      	ldr	r3, [r7, #0]
 8100d10:	685b      	ldr	r3, [r3, #4]
 8100d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100d16:	2b00      	cmp	r3, #0
 8100d18:	d003      	beq.n	8100d22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100d1a:	69ba      	ldr	r2, [r7, #24]
 8100d1c:	693b      	ldr	r3, [r7, #16]
 8100d1e:	4313      	orrs	r3, r2
 8100d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100d22:	697b      	ldr	r3, [r7, #20]
 8100d24:	69ba      	ldr	r2, [r7, #24]
 8100d26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100d28:	69fb      	ldr	r3, [r7, #28]
 8100d2a:	3301      	adds	r3, #1
 8100d2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100d2e:	683b      	ldr	r3, [r7, #0]
 8100d30:	681a      	ldr	r2, [r3, #0]
 8100d32:	69fb      	ldr	r3, [r7, #28]
 8100d34:	fa22 f303 	lsr.w	r3, r2, r3
 8100d38:	2b00      	cmp	r3, #0
 8100d3a:	f47f ae63 	bne.w	8100a04 <HAL_GPIO_Init+0x14>
  }
}
 8100d3e:	bf00      	nop
 8100d40:	bf00      	nop
 8100d42:	3724      	adds	r7, #36	; 0x24
 8100d44:	46bd      	mov	sp, r7
 8100d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d4a:	4770      	bx	lr
 8100d4c:	58000400 	.word	0x58000400

08100d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100d50:	b480      	push	{r7}
 8100d52:	b085      	sub	sp, #20
 8100d54:	af00      	add	r7, sp, #0
 8100d56:	6078      	str	r0, [r7, #4]
 8100d58:	460b      	mov	r3, r1
 8100d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8100d5c:	687b      	ldr	r3, [r7, #4]
 8100d5e:	691a      	ldr	r2, [r3, #16]
 8100d60:	887b      	ldrh	r3, [r7, #2]
 8100d62:	4013      	ands	r3, r2
 8100d64:	2b00      	cmp	r3, #0
 8100d66:	d002      	beq.n	8100d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8100d68:	2301      	movs	r3, #1
 8100d6a:	73fb      	strb	r3, [r7, #15]
 8100d6c:	e001      	b.n	8100d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8100d6e:	2300      	movs	r3, #0
 8100d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8100d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8100d74:	4618      	mov	r0, r3
 8100d76:	3714      	adds	r7, #20
 8100d78:	46bd      	mov	sp, r7
 8100d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d7e:	4770      	bx	lr

08100d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100d80:	b480      	push	{r7}
 8100d82:	b083      	sub	sp, #12
 8100d84:	af00      	add	r7, sp, #0
 8100d86:	6078      	str	r0, [r7, #4]
 8100d88:	460b      	mov	r3, r1
 8100d8a:	807b      	strh	r3, [r7, #2]
 8100d8c:	4613      	mov	r3, r2
 8100d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100d90:	787b      	ldrb	r3, [r7, #1]
 8100d92:	2b00      	cmp	r3, #0
 8100d94:	d003      	beq.n	8100d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100d96:	887a      	ldrh	r2, [r7, #2]
 8100d98:	687b      	ldr	r3, [r7, #4]
 8100d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100d9c:	e003      	b.n	8100da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100d9e:	887b      	ldrh	r3, [r7, #2]
 8100da0:	041a      	lsls	r2, r3, #16
 8100da2:	687b      	ldr	r3, [r7, #4]
 8100da4:	619a      	str	r2, [r3, #24]
}
 8100da6:	bf00      	nop
 8100da8:	370c      	adds	r7, #12
 8100daa:	46bd      	mov	sp, r7
 8100dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100db0:	4770      	bx	lr

08100db2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100db2:	b480      	push	{r7}
 8100db4:	b085      	sub	sp, #20
 8100db6:	af00      	add	r7, sp, #0
 8100db8:	6078      	str	r0, [r7, #4]
 8100dba:	460b      	mov	r3, r1
 8100dbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100dbe:	687b      	ldr	r3, [r7, #4]
 8100dc0:	695b      	ldr	r3, [r3, #20]
 8100dc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100dc4:	887a      	ldrh	r2, [r7, #2]
 8100dc6:	68fb      	ldr	r3, [r7, #12]
 8100dc8:	4013      	ands	r3, r2
 8100dca:	041a      	lsls	r2, r3, #16
 8100dcc:	68fb      	ldr	r3, [r7, #12]
 8100dce:	43d9      	mvns	r1, r3
 8100dd0:	887b      	ldrh	r3, [r7, #2]
 8100dd2:	400b      	ands	r3, r1
 8100dd4:	431a      	orrs	r2, r3
 8100dd6:	687b      	ldr	r3, [r7, #4]
 8100dd8:	619a      	str	r2, [r3, #24]
}
 8100dda:	bf00      	nop
 8100ddc:	3714      	adds	r7, #20
 8100dde:	46bd      	mov	sp, r7
 8100de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100de4:	4770      	bx	lr
	...

08100de8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100de8:	b480      	push	{r7}
 8100dea:	b083      	sub	sp, #12
 8100dec:	af00      	add	r7, sp, #0
 8100dee:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100df0:	4b05      	ldr	r3, [pc, #20]	; (8100e08 <HAL_HSEM_ActivateNotification+0x20>)
 8100df2:	681a      	ldr	r2, [r3, #0]
 8100df4:	4904      	ldr	r1, [pc, #16]	; (8100e08 <HAL_HSEM_ActivateNotification+0x20>)
 8100df6:	687b      	ldr	r3, [r7, #4]
 8100df8:	4313      	orrs	r3, r2
 8100dfa:	600b      	str	r3, [r1, #0]
#endif
}
 8100dfc:	bf00      	nop
 8100dfe:	370c      	adds	r7, #12
 8100e00:	46bd      	mov	sp, r7
 8100e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e06:	4770      	bx	lr
 8100e08:	58026510 	.word	0x58026510

08100e0c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100e0c:	b580      	push	{r7, lr}
 8100e0e:	b084      	sub	sp, #16
 8100e10:	af00      	add	r7, sp, #0
 8100e12:	60f8      	str	r0, [r7, #12]
 8100e14:	460b      	mov	r3, r1
 8100e16:	607a      	str	r2, [r7, #4]
 8100e18:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100e1a:	4b37      	ldr	r3, [pc, #220]	; (8100ef8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e1c:	681b      	ldr	r3, [r3, #0]
 8100e1e:	f023 0201 	bic.w	r2, r3, #1
 8100e22:	4935      	ldr	r1, [pc, #212]	; (8100ef8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e24:	68fb      	ldr	r3, [r7, #12]
 8100e26:	4313      	orrs	r3, r2
 8100e28:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100e2a:	687b      	ldr	r3, [r7, #4]
 8100e2c:	2b00      	cmp	r3, #0
 8100e2e:	d123      	bne.n	8100e78 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100e30:	f7ff fdca 	bl	81009c8 <HAL_GetCurrentCPUID>
 8100e34:	4603      	mov	r3, r0
 8100e36:	2b03      	cmp	r3, #3
 8100e38:	d158      	bne.n	8100eec <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100e3a:	4b2f      	ldr	r3, [pc, #188]	; (8100ef8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e3c:	691b      	ldr	r3, [r3, #16]
 8100e3e:	4a2e      	ldr	r2, [pc, #184]	; (8100ef8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e40:	f023 0301 	bic.w	r3, r3, #1
 8100e44:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e46:	4b2d      	ldr	r3, [pc, #180]	; (8100efc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e48:	691b      	ldr	r3, [r3, #16]
 8100e4a:	4a2c      	ldr	r2, [pc, #176]	; (8100efc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e4c:	f043 0304 	orr.w	r3, r3, #4
 8100e50:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100e52:	f3bf 8f4f 	dsb	sy
}
 8100e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100e58:	f3bf 8f6f 	isb	sy
}
 8100e5c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100e5e:	7afb      	ldrb	r3, [r7, #11]
 8100e60:	2b01      	cmp	r3, #1
 8100e62:	d101      	bne.n	8100e68 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100e64:	bf30      	wfi
 8100e66:	e000      	b.n	8100e6a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100e68:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e6a:	4b24      	ldr	r3, [pc, #144]	; (8100efc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e6c:	691b      	ldr	r3, [r3, #16]
 8100e6e:	4a23      	ldr	r2, [pc, #140]	; (8100efc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e70:	f023 0304 	bic.w	r3, r3, #4
 8100e74:	6113      	str	r3, [r2, #16]
 8100e76:	e03c      	b.n	8100ef2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	2b01      	cmp	r3, #1
 8100e7c:	d123      	bne.n	8100ec6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100e7e:	f7ff fda3 	bl	81009c8 <HAL_GetCurrentCPUID>
 8100e82:	4603      	mov	r3, r0
 8100e84:	2b01      	cmp	r3, #1
 8100e86:	d133      	bne.n	8100ef0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100e88:	4b1b      	ldr	r3, [pc, #108]	; (8100ef8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e8a:	695b      	ldr	r3, [r3, #20]
 8100e8c:	4a1a      	ldr	r2, [pc, #104]	; (8100ef8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e8e:	f023 0302 	bic.w	r3, r3, #2
 8100e92:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e94:	4b19      	ldr	r3, [pc, #100]	; (8100efc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e96:	691b      	ldr	r3, [r3, #16]
 8100e98:	4a18      	ldr	r2, [pc, #96]	; (8100efc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e9a:	f043 0304 	orr.w	r3, r3, #4
 8100e9e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100ea0:	f3bf 8f4f 	dsb	sy
}
 8100ea4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100ea6:	f3bf 8f6f 	isb	sy
}
 8100eaa:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100eac:	7afb      	ldrb	r3, [r7, #11]
 8100eae:	2b01      	cmp	r3, #1
 8100eb0:	d101      	bne.n	8100eb6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100eb2:	bf30      	wfi
 8100eb4:	e000      	b.n	8100eb8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100eb6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100eb8:	4b10      	ldr	r3, [pc, #64]	; (8100efc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100eba:	691b      	ldr	r3, [r3, #16]
 8100ebc:	4a0f      	ldr	r2, [pc, #60]	; (8100efc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ebe:	f023 0304 	bic.w	r3, r3, #4
 8100ec2:	6113      	str	r3, [r2, #16]
 8100ec4:	e015      	b.n	8100ef2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100ec6:	f7ff fd7f 	bl	81009c8 <HAL_GetCurrentCPUID>
 8100eca:	4603      	mov	r3, r0
 8100ecc:	2b03      	cmp	r3, #3
 8100ece:	d106      	bne.n	8100ede <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100ed0:	4b09      	ldr	r3, [pc, #36]	; (8100ef8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ed2:	691b      	ldr	r3, [r3, #16]
 8100ed4:	4a08      	ldr	r2, [pc, #32]	; (8100ef8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ed6:	f023 0304 	bic.w	r3, r3, #4
 8100eda:	6113      	str	r3, [r2, #16]
 8100edc:	e009      	b.n	8100ef2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100ede:	4b06      	ldr	r3, [pc, #24]	; (8100ef8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ee0:	695b      	ldr	r3, [r3, #20]
 8100ee2:	4a05      	ldr	r2, [pc, #20]	; (8100ef8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ee4:	f023 0304 	bic.w	r3, r3, #4
 8100ee8:	6153      	str	r3, [r2, #20]
 8100eea:	e002      	b.n	8100ef2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100eec:	bf00      	nop
 8100eee:	e000      	b.n	8100ef2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100ef0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100ef2:	3710      	adds	r7, #16
 8100ef4:	46bd      	mov	sp, r7
 8100ef6:	bd80      	pop	{r7, pc}
 8100ef8:	58024800 	.word	0x58024800
 8100efc:	e000ed00 	.word	0xe000ed00

08100f00 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100f00:	b580      	push	{r7, lr}
 8100f02:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100f04:	f7ff fd60 	bl	81009c8 <HAL_GetCurrentCPUID>
 8100f08:	4603      	mov	r3, r0
 8100f0a:	2b03      	cmp	r3, #3
 8100f0c:	d101      	bne.n	8100f12 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100f0e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100f10:	e001      	b.n	8100f16 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100f12:	bf40      	sev
    __WFE ();
 8100f14:	bf20      	wfe
}
 8100f16:	bf00      	nop
 8100f18:	bd80      	pop	{r7, pc}
	...

08100f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100f1c:	b480      	push	{r7}
 8100f1e:	b089      	sub	sp, #36	; 0x24
 8100f20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100f22:	4bb3      	ldr	r3, [pc, #716]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f24:	691b      	ldr	r3, [r3, #16]
 8100f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100f2a:	2b18      	cmp	r3, #24
 8100f2c:	f200 8155 	bhi.w	81011da <HAL_RCC_GetSysClockFreq+0x2be>
 8100f30:	a201      	add	r2, pc, #4	; (adr r2, 8100f38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100f36:	bf00      	nop
 8100f38:	08100f9d 	.word	0x08100f9d
 8100f3c:	081011db 	.word	0x081011db
 8100f40:	081011db 	.word	0x081011db
 8100f44:	081011db 	.word	0x081011db
 8100f48:	081011db 	.word	0x081011db
 8100f4c:	081011db 	.word	0x081011db
 8100f50:	081011db 	.word	0x081011db
 8100f54:	081011db 	.word	0x081011db
 8100f58:	08100fc3 	.word	0x08100fc3
 8100f5c:	081011db 	.word	0x081011db
 8100f60:	081011db 	.word	0x081011db
 8100f64:	081011db 	.word	0x081011db
 8100f68:	081011db 	.word	0x081011db
 8100f6c:	081011db 	.word	0x081011db
 8100f70:	081011db 	.word	0x081011db
 8100f74:	081011db 	.word	0x081011db
 8100f78:	08100fc9 	.word	0x08100fc9
 8100f7c:	081011db 	.word	0x081011db
 8100f80:	081011db 	.word	0x081011db
 8100f84:	081011db 	.word	0x081011db
 8100f88:	081011db 	.word	0x081011db
 8100f8c:	081011db 	.word	0x081011db
 8100f90:	081011db 	.word	0x081011db
 8100f94:	081011db 	.word	0x081011db
 8100f98:	08100fcf 	.word	0x08100fcf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100f9c:	4b94      	ldr	r3, [pc, #592]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f9e:	681b      	ldr	r3, [r3, #0]
 8100fa0:	f003 0320 	and.w	r3, r3, #32
 8100fa4:	2b00      	cmp	r3, #0
 8100fa6:	d009      	beq.n	8100fbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100fa8:	4b91      	ldr	r3, [pc, #580]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100faa:	681b      	ldr	r3, [r3, #0]
 8100fac:	08db      	lsrs	r3, r3, #3
 8100fae:	f003 0303 	and.w	r3, r3, #3
 8100fb2:	4a90      	ldr	r2, [pc, #576]	; (81011f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8100fb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8100fba:	e111      	b.n	81011e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100fbc:	4b8d      	ldr	r3, [pc, #564]	; (81011f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100fbe:	61bb      	str	r3, [r7, #24]
    break;
 8100fc0:	e10e      	b.n	81011e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8100fc2:	4b8d      	ldr	r3, [pc, #564]	; (81011f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100fc4:	61bb      	str	r3, [r7, #24]
    break;
 8100fc6:	e10b      	b.n	81011e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8100fc8:	4b8c      	ldr	r3, [pc, #560]	; (81011fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100fca:	61bb      	str	r3, [r7, #24]
    break;
 8100fcc:	e108      	b.n	81011e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100fce:	4b88      	ldr	r3, [pc, #544]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100fd2:	f003 0303 	and.w	r3, r3, #3
 8100fd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100fd8:	4b85      	ldr	r3, [pc, #532]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100fdc:	091b      	lsrs	r3, r3, #4
 8100fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100fe2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100fe4:	4b82      	ldr	r3, [pc, #520]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100fe8:	f003 0301 	and.w	r3, r3, #1
 8100fec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100fee:	4b80      	ldr	r3, [pc, #512]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100ff2:	08db      	lsrs	r3, r3, #3
 8100ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100ff8:	68fa      	ldr	r2, [r7, #12]
 8100ffa:	fb02 f303 	mul.w	r3, r2, r3
 8100ffe:	ee07 3a90 	vmov	s15, r3
 8101002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101006:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810100a:	693b      	ldr	r3, [r7, #16]
 810100c:	2b00      	cmp	r3, #0
 810100e:	f000 80e1 	beq.w	81011d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101012:	697b      	ldr	r3, [r7, #20]
 8101014:	2b02      	cmp	r3, #2
 8101016:	f000 8083 	beq.w	8101120 <HAL_RCC_GetSysClockFreq+0x204>
 810101a:	697b      	ldr	r3, [r7, #20]
 810101c:	2b02      	cmp	r3, #2
 810101e:	f200 80a1 	bhi.w	8101164 <HAL_RCC_GetSysClockFreq+0x248>
 8101022:	697b      	ldr	r3, [r7, #20]
 8101024:	2b00      	cmp	r3, #0
 8101026:	d003      	beq.n	8101030 <HAL_RCC_GetSysClockFreq+0x114>
 8101028:	697b      	ldr	r3, [r7, #20]
 810102a:	2b01      	cmp	r3, #1
 810102c:	d056      	beq.n	81010dc <HAL_RCC_GetSysClockFreq+0x1c0>
 810102e:	e099      	b.n	8101164 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101030:	4b6f      	ldr	r3, [pc, #444]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101032:	681b      	ldr	r3, [r3, #0]
 8101034:	f003 0320 	and.w	r3, r3, #32
 8101038:	2b00      	cmp	r3, #0
 810103a:	d02d      	beq.n	8101098 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810103c:	4b6c      	ldr	r3, [pc, #432]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810103e:	681b      	ldr	r3, [r3, #0]
 8101040:	08db      	lsrs	r3, r3, #3
 8101042:	f003 0303 	and.w	r3, r3, #3
 8101046:	4a6b      	ldr	r2, [pc, #428]	; (81011f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101048:	fa22 f303 	lsr.w	r3, r2, r3
 810104c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810104e:	687b      	ldr	r3, [r7, #4]
 8101050:	ee07 3a90 	vmov	s15, r3
 8101054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101058:	693b      	ldr	r3, [r7, #16]
 810105a:	ee07 3a90 	vmov	s15, r3
 810105e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101066:	4b62      	ldr	r3, [pc, #392]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810106a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810106e:	ee07 3a90 	vmov	s15, r3
 8101072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101076:	ed97 6a02 	vldr	s12, [r7, #8]
 810107a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101200 <HAL_RCC_GetSysClockFreq+0x2e4>
 810107e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810108a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810108e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101092:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101096:	e087      	b.n	81011a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101098:	693b      	ldr	r3, [r7, #16]
 810109a:	ee07 3a90 	vmov	s15, r3
 810109e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101204 <HAL_RCC_GetSysClockFreq+0x2e8>
 81010a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81010aa:	4b51      	ldr	r3, [pc, #324]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81010ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81010b2:	ee07 3a90 	vmov	s15, r3
 81010b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81010ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81010be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101200 <HAL_RCC_GetSysClockFreq+0x2e4>
 81010c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81010c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81010ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81010ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81010d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81010d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81010da:	e065      	b.n	81011a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81010dc:	693b      	ldr	r3, [r7, #16]
 81010de:	ee07 3a90 	vmov	s15, r3
 81010e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101208 <HAL_RCC_GetSysClockFreq+0x2ec>
 81010ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81010ee:	4b40      	ldr	r3, [pc, #256]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81010f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81010f6:	ee07 3a90 	vmov	s15, r3
 81010fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81010fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8101102:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101200 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810110a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810110e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101116:	ee67 7a27 	vmul.f32	s15, s14, s15
 810111a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810111e:	e043      	b.n	81011a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101120:	693b      	ldr	r3, [r7, #16]
 8101122:	ee07 3a90 	vmov	s15, r3
 8101126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810112a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810120c <HAL_RCC_GetSysClockFreq+0x2f0>
 810112e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101132:	4b2f      	ldr	r3, [pc, #188]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810113a:	ee07 3a90 	vmov	s15, r3
 810113e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101142:	ed97 6a02 	vldr	s12, [r7, #8]
 8101146:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101200 <HAL_RCC_GetSysClockFreq+0x2e4>
 810114a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810114e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810115e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101162:	e021      	b.n	81011a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101164:	693b      	ldr	r3, [r7, #16]
 8101166:	ee07 3a90 	vmov	s15, r3
 810116a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810116e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101208 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101176:	4b1e      	ldr	r3, [pc, #120]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810117a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810117e:	ee07 3a90 	vmov	s15, r3
 8101182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101186:	ed97 6a02 	vldr	s12, [r7, #8]
 810118a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101200 <HAL_RCC_GetSysClockFreq+0x2e4>
 810118e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810119a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810119e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81011a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81011a8:	4b11      	ldr	r3, [pc, #68]	; (81011f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81011ac:	0a5b      	lsrs	r3, r3, #9
 81011ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81011b2:	3301      	adds	r3, #1
 81011b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81011b6:	683b      	ldr	r3, [r7, #0]
 81011b8:	ee07 3a90 	vmov	s15, r3
 81011bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81011c0:	edd7 6a07 	vldr	s13, [r7, #28]
 81011c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81011c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81011cc:	ee17 3a90 	vmov	r3, s15
 81011d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81011d2:	e005      	b.n	81011e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81011d4:	2300      	movs	r3, #0
 81011d6:	61bb      	str	r3, [r7, #24]
    break;
 81011d8:	e002      	b.n	81011e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81011da:	4b07      	ldr	r3, [pc, #28]	; (81011f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81011dc:	61bb      	str	r3, [r7, #24]
    break;
 81011de:	bf00      	nop
  }

  return sysclockfreq;
 81011e0:	69bb      	ldr	r3, [r7, #24]
}
 81011e2:	4618      	mov	r0, r3
 81011e4:	3724      	adds	r7, #36	; 0x24
 81011e6:	46bd      	mov	sp, r7
 81011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ec:	4770      	bx	lr
 81011ee:	bf00      	nop
 81011f0:	58024400 	.word	0x58024400
 81011f4:	03d09000 	.word	0x03d09000
 81011f8:	003d0900 	.word	0x003d0900
 81011fc:	007a1200 	.word	0x007a1200
 8101200:	46000000 	.word	0x46000000
 8101204:	4c742400 	.word	0x4c742400
 8101208:	4a742400 	.word	0x4a742400
 810120c:	4af42400 	.word	0x4af42400

08101210 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101210:	b580      	push	{r7, lr}
 8101212:	b086      	sub	sp, #24
 8101214:	af00      	add	r7, sp, #0
 8101216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101218:	2300      	movs	r3, #0
 810121a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810121c:	2300      	movs	r3, #0
 810121e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101220:	687b      	ldr	r3, [r7, #4]
 8101222:	681b      	ldr	r3, [r3, #0]
 8101224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101228:	2b00      	cmp	r3, #0
 810122a:	d03f      	beq.n	81012ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101230:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101234:	d02a      	beq.n	810128c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8101236:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810123a:	d824      	bhi.n	8101286 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810123c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101240:	d018      	beq.n	8101274 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101246:	d81e      	bhi.n	8101286 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101248:	2b00      	cmp	r3, #0
 810124a:	d003      	beq.n	8101254 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810124c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101250:	d007      	beq.n	8101262 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8101252:	e018      	b.n	8101286 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101254:	4ba3      	ldr	r3, [pc, #652]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101258:	4aa2      	ldr	r2, [pc, #648]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810125a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810125e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101260:	e015      	b.n	810128e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101262:	687b      	ldr	r3, [r7, #4]
 8101264:	3304      	adds	r3, #4
 8101266:	2102      	movs	r1, #2
 8101268:	4618      	mov	r0, r3
 810126a:	f000 ff17 	bl	810209c <RCCEx_PLL2_Config>
 810126e:	4603      	mov	r3, r0
 8101270:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101272:	e00c      	b.n	810128e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101274:	687b      	ldr	r3, [r7, #4]
 8101276:	3324      	adds	r3, #36	; 0x24
 8101278:	2102      	movs	r1, #2
 810127a:	4618      	mov	r0, r3
 810127c:	f000 ffc0 	bl	8102200 <RCCEx_PLL3_Config>
 8101280:	4603      	mov	r3, r0
 8101282:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101284:	e003      	b.n	810128e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101286:	2301      	movs	r3, #1
 8101288:	75fb      	strb	r3, [r7, #23]
      break;
 810128a:	e000      	b.n	810128e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 810128c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810128e:	7dfb      	ldrb	r3, [r7, #23]
 8101290:	2b00      	cmp	r3, #0
 8101292:	d109      	bne.n	81012a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101294:	4b93      	ldr	r3, [pc, #588]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810129c:	687b      	ldr	r3, [r7, #4]
 810129e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81012a0:	4990      	ldr	r1, [pc, #576]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81012a2:	4313      	orrs	r3, r2
 81012a4:	650b      	str	r3, [r1, #80]	; 0x50
 81012a6:	e001      	b.n	81012ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81012a8:	7dfb      	ldrb	r3, [r7, #23]
 81012aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	681b      	ldr	r3, [r3, #0]
 81012b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81012b4:	2b00      	cmp	r3, #0
 81012b6:	d03d      	beq.n	8101334 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81012b8:	687b      	ldr	r3, [r7, #4]
 81012ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81012bc:	2b04      	cmp	r3, #4
 81012be:	d826      	bhi.n	810130e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81012c0:	a201      	add	r2, pc, #4	; (adr r2, 81012c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81012c6:	bf00      	nop
 81012c8:	081012dd 	.word	0x081012dd
 81012cc:	081012eb 	.word	0x081012eb
 81012d0:	081012fd 	.word	0x081012fd
 81012d4:	08101315 	.word	0x08101315
 81012d8:	08101315 	.word	0x08101315
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81012dc:	4b81      	ldr	r3, [pc, #516]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81012e0:	4a80      	ldr	r2, [pc, #512]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81012e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81012e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81012e8:	e015      	b.n	8101316 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81012ea:	687b      	ldr	r3, [r7, #4]
 81012ec:	3304      	adds	r3, #4
 81012ee:	2100      	movs	r1, #0
 81012f0:	4618      	mov	r0, r3
 81012f2:	f000 fed3 	bl	810209c <RCCEx_PLL2_Config>
 81012f6:	4603      	mov	r3, r0
 81012f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81012fa:	e00c      	b.n	8101316 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81012fc:	687b      	ldr	r3, [r7, #4]
 81012fe:	3324      	adds	r3, #36	; 0x24
 8101300:	2100      	movs	r1, #0
 8101302:	4618      	mov	r0, r3
 8101304:	f000 ff7c 	bl	8102200 <RCCEx_PLL3_Config>
 8101308:	4603      	mov	r3, r0
 810130a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810130c:	e003      	b.n	8101316 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810130e:	2301      	movs	r3, #1
 8101310:	75fb      	strb	r3, [r7, #23]
      break;
 8101312:	e000      	b.n	8101316 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8101314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101316:	7dfb      	ldrb	r3, [r7, #23]
 8101318:	2b00      	cmp	r3, #0
 810131a:	d109      	bne.n	8101330 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810131c:	4b71      	ldr	r3, [pc, #452]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810131e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101320:	f023 0207 	bic.w	r2, r3, #7
 8101324:	687b      	ldr	r3, [r7, #4]
 8101326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101328:	496e      	ldr	r1, [pc, #440]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810132a:	4313      	orrs	r3, r2
 810132c:	650b      	str	r3, [r1, #80]	; 0x50
 810132e:	e001      	b.n	8101334 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101330:	7dfb      	ldrb	r3, [r7, #23]
 8101332:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	681b      	ldr	r3, [r3, #0]
 8101338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810133c:	2b00      	cmp	r3, #0
 810133e:	d042      	beq.n	81013c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101348:	d02b      	beq.n	81013a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810134a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810134e:	d825      	bhi.n	810139c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101350:	2bc0      	cmp	r3, #192	; 0xc0
 8101352:	d028      	beq.n	81013a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8101354:	2bc0      	cmp	r3, #192	; 0xc0
 8101356:	d821      	bhi.n	810139c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101358:	2b80      	cmp	r3, #128	; 0x80
 810135a:	d016      	beq.n	810138a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 810135c:	2b80      	cmp	r3, #128	; 0x80
 810135e:	d81d      	bhi.n	810139c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101360:	2b00      	cmp	r3, #0
 8101362:	d002      	beq.n	810136a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8101364:	2b40      	cmp	r3, #64	; 0x40
 8101366:	d007      	beq.n	8101378 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8101368:	e018      	b.n	810139c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810136a:	4b5e      	ldr	r3, [pc, #376]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810136e:	4a5d      	ldr	r2, [pc, #372]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101374:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101376:	e017      	b.n	81013a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101378:	687b      	ldr	r3, [r7, #4]
 810137a:	3304      	adds	r3, #4
 810137c:	2100      	movs	r1, #0
 810137e:	4618      	mov	r0, r3
 8101380:	f000 fe8c 	bl	810209c <RCCEx_PLL2_Config>
 8101384:	4603      	mov	r3, r0
 8101386:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101388:	e00e      	b.n	81013a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810138a:	687b      	ldr	r3, [r7, #4]
 810138c:	3324      	adds	r3, #36	; 0x24
 810138e:	2100      	movs	r1, #0
 8101390:	4618      	mov	r0, r3
 8101392:	f000 ff35 	bl	8102200 <RCCEx_PLL3_Config>
 8101396:	4603      	mov	r3, r0
 8101398:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810139a:	e005      	b.n	81013a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810139c:	2301      	movs	r3, #1
 810139e:	75fb      	strb	r3, [r7, #23]
      break;
 81013a0:	e002      	b.n	81013a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81013a2:	bf00      	nop
 81013a4:	e000      	b.n	81013a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81013a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81013a8:	7dfb      	ldrb	r3, [r7, #23]
 81013aa:	2b00      	cmp	r3, #0
 81013ac:	d109      	bne.n	81013c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81013ae:	4b4d      	ldr	r3, [pc, #308]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81013b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81013b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81013b6:	687b      	ldr	r3, [r7, #4]
 81013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81013ba:	494a      	ldr	r1, [pc, #296]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81013bc:	4313      	orrs	r3, r2
 81013be:	650b      	str	r3, [r1, #80]	; 0x50
 81013c0:	e001      	b.n	81013c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81013c2:	7dfb      	ldrb	r3, [r7, #23]
 81013c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	681b      	ldr	r3, [r3, #0]
 81013ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81013ce:	2b00      	cmp	r3, #0
 81013d0:	d049      	beq.n	8101466 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81013d2:	687b      	ldr	r3, [r7, #4]
 81013d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81013d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81013dc:	d030      	beq.n	8101440 <HAL_RCCEx_PeriphCLKConfig+0x230>
 81013de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81013e2:	d82a      	bhi.n	810143a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81013e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81013e8:	d02c      	beq.n	8101444 <HAL_RCCEx_PeriphCLKConfig+0x234>
 81013ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81013ee:	d824      	bhi.n	810143a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81013f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81013f4:	d018      	beq.n	8101428 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81013f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81013fa:	d81e      	bhi.n	810143a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81013fc:	2b00      	cmp	r3, #0
 81013fe:	d003      	beq.n	8101408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8101400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101404:	d007      	beq.n	8101416 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8101406:	e018      	b.n	810143a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101408:	4b36      	ldr	r3, [pc, #216]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810140c:	4a35      	ldr	r2, [pc, #212]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810140e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101412:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101414:	e017      	b.n	8101446 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101416:	687b      	ldr	r3, [r7, #4]
 8101418:	3304      	adds	r3, #4
 810141a:	2100      	movs	r1, #0
 810141c:	4618      	mov	r0, r3
 810141e:	f000 fe3d 	bl	810209c <RCCEx_PLL2_Config>
 8101422:	4603      	mov	r3, r0
 8101424:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101426:	e00e      	b.n	8101446 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101428:	687b      	ldr	r3, [r7, #4]
 810142a:	3324      	adds	r3, #36	; 0x24
 810142c:	2100      	movs	r1, #0
 810142e:	4618      	mov	r0, r3
 8101430:	f000 fee6 	bl	8102200 <RCCEx_PLL3_Config>
 8101434:	4603      	mov	r3, r0
 8101436:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101438:	e005      	b.n	8101446 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810143a:	2301      	movs	r3, #1
 810143c:	75fb      	strb	r3, [r7, #23]
      break;
 810143e:	e002      	b.n	8101446 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101440:	bf00      	nop
 8101442:	e000      	b.n	8101446 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101446:	7dfb      	ldrb	r3, [r7, #23]
 8101448:	2b00      	cmp	r3, #0
 810144a:	d10a      	bne.n	8101462 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810144c:	4b25      	ldr	r3, [pc, #148]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101450:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101454:	687b      	ldr	r3, [r7, #4]
 8101456:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810145a:	4922      	ldr	r1, [pc, #136]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810145c:	4313      	orrs	r3, r2
 810145e:	658b      	str	r3, [r1, #88]	; 0x58
 8101460:	e001      	b.n	8101466 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101462:	7dfb      	ldrb	r3, [r7, #23]
 8101464:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101466:	687b      	ldr	r3, [r7, #4]
 8101468:	681b      	ldr	r3, [r3, #0]
 810146a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810146e:	2b00      	cmp	r3, #0
 8101470:	d04b      	beq.n	810150a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8101472:	687b      	ldr	r3, [r7, #4]
 8101474:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810147c:	d030      	beq.n	81014e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810147e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101482:	d82a      	bhi.n	81014da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101484:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101488:	d02e      	beq.n	81014e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 810148a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810148e:	d824      	bhi.n	81014da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101494:	d018      	beq.n	81014c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8101496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810149a:	d81e      	bhi.n	81014da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810149c:	2b00      	cmp	r3, #0
 810149e:	d003      	beq.n	81014a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81014a4:	d007      	beq.n	81014b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81014a6:	e018      	b.n	81014da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81014a8:	4b0e      	ldr	r3, [pc, #56]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81014ac:	4a0d      	ldr	r2, [pc, #52]	; (81014e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81014ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81014b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81014b4:	e019      	b.n	81014ea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81014b6:	687b      	ldr	r3, [r7, #4]
 81014b8:	3304      	adds	r3, #4
 81014ba:	2100      	movs	r1, #0
 81014bc:	4618      	mov	r0, r3
 81014be:	f000 fded 	bl	810209c <RCCEx_PLL2_Config>
 81014c2:	4603      	mov	r3, r0
 81014c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81014c6:	e010      	b.n	81014ea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81014c8:	687b      	ldr	r3, [r7, #4]
 81014ca:	3324      	adds	r3, #36	; 0x24
 81014cc:	2100      	movs	r1, #0
 81014ce:	4618      	mov	r0, r3
 81014d0:	f000 fe96 	bl	8102200 <RCCEx_PLL3_Config>
 81014d4:	4603      	mov	r3, r0
 81014d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81014d8:	e007      	b.n	81014ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81014da:	2301      	movs	r3, #1
 81014dc:	75fb      	strb	r3, [r7, #23]
      break;
 81014de:	e004      	b.n	81014ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 81014e0:	bf00      	nop
 81014e2:	e002      	b.n	81014ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 81014e4:	58024400 	.word	0x58024400
      break;
 81014e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81014ea:	7dfb      	ldrb	r3, [r7, #23]
 81014ec:	2b00      	cmp	r3, #0
 81014ee:	d10a      	bne.n	8101506 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81014f0:	4b99      	ldr	r3, [pc, #612]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81014f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81014f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81014fe:	4996      	ldr	r1, [pc, #600]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101500:	4313      	orrs	r3, r2
 8101502:	658b      	str	r3, [r1, #88]	; 0x58
 8101504:	e001      	b.n	810150a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101506:	7dfb      	ldrb	r3, [r7, #23]
 8101508:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810150a:	687b      	ldr	r3, [r7, #4]
 810150c:	681b      	ldr	r3, [r3, #0]
 810150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101512:	2b00      	cmp	r3, #0
 8101514:	d032      	beq.n	810157c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8101516:	687b      	ldr	r3, [r7, #4]
 8101518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810151a:	2b30      	cmp	r3, #48	; 0x30
 810151c:	d01c      	beq.n	8101558 <HAL_RCCEx_PeriphCLKConfig+0x348>
 810151e:	2b30      	cmp	r3, #48	; 0x30
 8101520:	d817      	bhi.n	8101552 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8101522:	2b20      	cmp	r3, #32
 8101524:	d00c      	beq.n	8101540 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8101526:	2b20      	cmp	r3, #32
 8101528:	d813      	bhi.n	8101552 <HAL_RCCEx_PeriphCLKConfig+0x342>
 810152a:	2b00      	cmp	r3, #0
 810152c:	d016      	beq.n	810155c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 810152e:	2b10      	cmp	r3, #16
 8101530:	d10f      	bne.n	8101552 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101532:	4b89      	ldr	r3, [pc, #548]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101536:	4a88      	ldr	r2, [pc, #544]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810153c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810153e:	e00e      	b.n	810155e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101540:	687b      	ldr	r3, [r7, #4]
 8101542:	3304      	adds	r3, #4
 8101544:	2102      	movs	r1, #2
 8101546:	4618      	mov	r0, r3
 8101548:	f000 fda8 	bl	810209c <RCCEx_PLL2_Config>
 810154c:	4603      	mov	r3, r0
 810154e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101550:	e005      	b.n	810155e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101552:	2301      	movs	r3, #1
 8101554:	75fb      	strb	r3, [r7, #23]
      break;
 8101556:	e002      	b.n	810155e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8101558:	bf00      	nop
 810155a:	e000      	b.n	810155e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 810155c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810155e:	7dfb      	ldrb	r3, [r7, #23]
 8101560:	2b00      	cmp	r3, #0
 8101562:	d109      	bne.n	8101578 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101564:	4b7c      	ldr	r3, [pc, #496]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101568:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810156c:	687b      	ldr	r3, [r7, #4]
 810156e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101570:	4979      	ldr	r1, [pc, #484]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101572:	4313      	orrs	r3, r2
 8101574:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101576:	e001      	b.n	810157c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101578:	7dfb      	ldrb	r3, [r7, #23]
 810157a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810157c:	687b      	ldr	r3, [r7, #4]
 810157e:	681b      	ldr	r3, [r3, #0]
 8101580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101584:	2b00      	cmp	r3, #0
 8101586:	d047      	beq.n	8101618 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8101588:	687b      	ldr	r3, [r7, #4]
 810158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810158c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101590:	d030      	beq.n	81015f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8101592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101596:	d82a      	bhi.n	81015ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101598:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810159c:	d02c      	beq.n	81015f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 810159e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81015a2:	d824      	bhi.n	81015ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81015a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81015a8:	d018      	beq.n	81015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 81015aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81015ae:	d81e      	bhi.n	81015ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81015b0:	2b00      	cmp	r3, #0
 81015b2:	d003      	beq.n	81015bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 81015b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81015b8:	d007      	beq.n	81015ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 81015ba:	e018      	b.n	81015ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81015bc:	4b66      	ldr	r3, [pc, #408]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81015c0:	4a65      	ldr	r2, [pc, #404]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81015c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81015c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81015c8:	e017      	b.n	81015fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81015ca:	687b      	ldr	r3, [r7, #4]
 81015cc:	3304      	adds	r3, #4
 81015ce:	2100      	movs	r1, #0
 81015d0:	4618      	mov	r0, r3
 81015d2:	f000 fd63 	bl	810209c <RCCEx_PLL2_Config>
 81015d6:	4603      	mov	r3, r0
 81015d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81015da:	e00e      	b.n	81015fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81015dc:	687b      	ldr	r3, [r7, #4]
 81015de:	3324      	adds	r3, #36	; 0x24
 81015e0:	2100      	movs	r1, #0
 81015e2:	4618      	mov	r0, r3
 81015e4:	f000 fe0c 	bl	8102200 <RCCEx_PLL3_Config>
 81015e8:	4603      	mov	r3, r0
 81015ea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81015ec:	e005      	b.n	81015fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81015ee:	2301      	movs	r3, #1
 81015f0:	75fb      	strb	r3, [r7, #23]
      break;
 81015f2:	e002      	b.n	81015fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81015f4:	bf00      	nop
 81015f6:	e000      	b.n	81015fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81015f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81015fa:	7dfb      	ldrb	r3, [r7, #23]
 81015fc:	2b00      	cmp	r3, #0
 81015fe:	d109      	bne.n	8101614 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101600:	4b55      	ldr	r3, [pc, #340]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101604:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8101608:	687b      	ldr	r3, [r7, #4]
 810160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810160c:	4952      	ldr	r1, [pc, #328]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810160e:	4313      	orrs	r3, r2
 8101610:	650b      	str	r3, [r1, #80]	; 0x50
 8101612:	e001      	b.n	8101618 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101614:	7dfb      	ldrb	r3, [r7, #23]
 8101616:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101620:	2b00      	cmp	r3, #0
 8101622:	d049      	beq.n	81016b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8101624:	687b      	ldr	r3, [r7, #4]
 8101626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810162c:	d02e      	beq.n	810168c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 810162e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101632:	d828      	bhi.n	8101686 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101634:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101638:	d02a      	beq.n	8101690 <HAL_RCCEx_PeriphCLKConfig+0x480>
 810163a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810163e:	d822      	bhi.n	8101686 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101640:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101644:	d026      	beq.n	8101694 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8101646:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810164a:	d81c      	bhi.n	8101686 <HAL_RCCEx_PeriphCLKConfig+0x476>
 810164c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101650:	d010      	beq.n	8101674 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8101652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101656:	d816      	bhi.n	8101686 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101658:	2b00      	cmp	r3, #0
 810165a:	d01d      	beq.n	8101698 <HAL_RCCEx_PeriphCLKConfig+0x488>
 810165c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101660:	d111      	bne.n	8101686 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101662:	687b      	ldr	r3, [r7, #4]
 8101664:	3304      	adds	r3, #4
 8101666:	2101      	movs	r1, #1
 8101668:	4618      	mov	r0, r3
 810166a:	f000 fd17 	bl	810209c <RCCEx_PLL2_Config>
 810166e:	4603      	mov	r3, r0
 8101670:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101672:	e012      	b.n	810169a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101674:	687b      	ldr	r3, [r7, #4]
 8101676:	3324      	adds	r3, #36	; 0x24
 8101678:	2101      	movs	r1, #1
 810167a:	4618      	mov	r0, r3
 810167c:	f000 fdc0 	bl	8102200 <RCCEx_PLL3_Config>
 8101680:	4603      	mov	r3, r0
 8101682:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101684:	e009      	b.n	810169a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101686:	2301      	movs	r3, #1
 8101688:	75fb      	strb	r3, [r7, #23]
      break;
 810168a:	e006      	b.n	810169a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810168c:	bf00      	nop
 810168e:	e004      	b.n	810169a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101690:	bf00      	nop
 8101692:	e002      	b.n	810169a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101694:	bf00      	nop
 8101696:	e000      	b.n	810169a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101698:	bf00      	nop
    }

    if(ret == HAL_OK)
 810169a:	7dfb      	ldrb	r3, [r7, #23]
 810169c:	2b00      	cmp	r3, #0
 810169e:	d109      	bne.n	81016b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81016a0:	4b2d      	ldr	r3, [pc, #180]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81016a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81016a4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81016ac:	492a      	ldr	r1, [pc, #168]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81016ae:	4313      	orrs	r3, r2
 81016b0:	650b      	str	r3, [r1, #80]	; 0x50
 81016b2:	e001      	b.n	81016b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81016b4:	7dfb      	ldrb	r3, [r7, #23]
 81016b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81016b8:	687b      	ldr	r3, [r7, #4]
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81016c0:	2b00      	cmp	r3, #0
 81016c2:	d04d      	beq.n	8101760 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81016c4:	687b      	ldr	r3, [r7, #4]
 81016c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81016ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81016ce:	d02e      	beq.n	810172e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81016d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81016d4:	d828      	bhi.n	8101728 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81016d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81016da:	d02a      	beq.n	8101732 <HAL_RCCEx_PeriphCLKConfig+0x522>
 81016dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81016e0:	d822      	bhi.n	8101728 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81016e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81016e6:	d026      	beq.n	8101736 <HAL_RCCEx_PeriphCLKConfig+0x526>
 81016e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81016ec:	d81c      	bhi.n	8101728 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81016ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81016f2:	d010      	beq.n	8101716 <HAL_RCCEx_PeriphCLKConfig+0x506>
 81016f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81016f8:	d816      	bhi.n	8101728 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81016fa:	2b00      	cmp	r3, #0
 81016fc:	d01d      	beq.n	810173a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 81016fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101702:	d111      	bne.n	8101728 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101704:	687b      	ldr	r3, [r7, #4]
 8101706:	3304      	adds	r3, #4
 8101708:	2101      	movs	r1, #1
 810170a:	4618      	mov	r0, r3
 810170c:	f000 fcc6 	bl	810209c <RCCEx_PLL2_Config>
 8101710:	4603      	mov	r3, r0
 8101712:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101714:	e012      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101716:	687b      	ldr	r3, [r7, #4]
 8101718:	3324      	adds	r3, #36	; 0x24
 810171a:	2101      	movs	r1, #1
 810171c:	4618      	mov	r0, r3
 810171e:	f000 fd6f 	bl	8102200 <RCCEx_PLL3_Config>
 8101722:	4603      	mov	r3, r0
 8101724:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101726:	e009      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8101728:	2301      	movs	r3, #1
 810172a:	75fb      	strb	r3, [r7, #23]
      break;
 810172c:	e006      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810172e:	bf00      	nop
 8101730:	e004      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101732:	bf00      	nop
 8101734:	e002      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101736:	bf00      	nop
 8101738:	e000      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810173a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810173c:	7dfb      	ldrb	r3, [r7, #23]
 810173e:	2b00      	cmp	r3, #0
 8101740:	d10c      	bne.n	810175c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101742:	4b05      	ldr	r3, [pc, #20]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101746:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810174a:	687b      	ldr	r3, [r7, #4]
 810174c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101750:	4901      	ldr	r1, [pc, #4]	; (8101758 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101752:	4313      	orrs	r3, r2
 8101754:	658b      	str	r3, [r1, #88]	; 0x58
 8101756:	e003      	b.n	8101760 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8101758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810175c:	7dfb      	ldrb	r3, [r7, #23]
 810175e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101760:	687b      	ldr	r3, [r7, #4]
 8101762:	681b      	ldr	r3, [r3, #0]
 8101764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101768:	2b00      	cmp	r3, #0
 810176a:	d02f      	beq.n	81017cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101774:	d00e      	beq.n	8101794 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8101776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810177a:	d814      	bhi.n	81017a6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 810177c:	2b00      	cmp	r3, #0
 810177e:	d015      	beq.n	81017ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8101780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101784:	d10f      	bne.n	81017a6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101786:	4bb0      	ldr	r3, [pc, #704]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810178a:	4aaf      	ldr	r2, [pc, #700]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101792:	e00c      	b.n	81017ae <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	3304      	adds	r3, #4
 8101798:	2101      	movs	r1, #1
 810179a:	4618      	mov	r0, r3
 810179c:	f000 fc7e 	bl	810209c <RCCEx_PLL2_Config>
 81017a0:	4603      	mov	r3, r0
 81017a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81017a4:	e003      	b.n	81017ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81017a6:	2301      	movs	r3, #1
 81017a8:	75fb      	strb	r3, [r7, #23]
      break;
 81017aa:	e000      	b.n	81017ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 81017ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 81017ae:	7dfb      	ldrb	r3, [r7, #23]
 81017b0:	2b00      	cmp	r3, #0
 81017b2:	d109      	bne.n	81017c8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81017b4:	4ba4      	ldr	r3, [pc, #656]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81017b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81017b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81017bc:	687b      	ldr	r3, [r7, #4]
 81017be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81017c0:	49a1      	ldr	r1, [pc, #644]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81017c2:	4313      	orrs	r3, r2
 81017c4:	650b      	str	r3, [r1, #80]	; 0x50
 81017c6:	e001      	b.n	81017cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81017c8:	7dfb      	ldrb	r3, [r7, #23]
 81017ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81017cc:	687b      	ldr	r3, [r7, #4]
 81017ce:	681b      	ldr	r3, [r3, #0]
 81017d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81017d4:	2b00      	cmp	r3, #0
 81017d6:	d032      	beq.n	810183e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81017d8:	687b      	ldr	r3, [r7, #4]
 81017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81017dc:	2b03      	cmp	r3, #3
 81017de:	d81b      	bhi.n	8101818 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81017e0:	a201      	add	r2, pc, #4	; (adr r2, 81017e8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81017e6:	bf00      	nop
 81017e8:	0810181f 	.word	0x0810181f
 81017ec:	081017f9 	.word	0x081017f9
 81017f0:	08101807 	.word	0x08101807
 81017f4:	0810181f 	.word	0x0810181f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81017f8:	4b93      	ldr	r3, [pc, #588]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017fc:	4a92      	ldr	r2, [pc, #584]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81017fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101802:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101804:	e00c      	b.n	8101820 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101806:	687b      	ldr	r3, [r7, #4]
 8101808:	3304      	adds	r3, #4
 810180a:	2102      	movs	r1, #2
 810180c:	4618      	mov	r0, r3
 810180e:	f000 fc45 	bl	810209c <RCCEx_PLL2_Config>
 8101812:	4603      	mov	r3, r0
 8101814:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101816:	e003      	b.n	8101820 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101818:	2301      	movs	r3, #1
 810181a:	75fb      	strb	r3, [r7, #23]
      break;
 810181c:	e000      	b.n	8101820 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810181e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101820:	7dfb      	ldrb	r3, [r7, #23]
 8101822:	2b00      	cmp	r3, #0
 8101824:	d109      	bne.n	810183a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101826:	4b88      	ldr	r3, [pc, #544]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810182a:	f023 0203 	bic.w	r2, r3, #3
 810182e:	687b      	ldr	r3, [r7, #4]
 8101830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101832:	4985      	ldr	r1, [pc, #532]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101834:	4313      	orrs	r3, r2
 8101836:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101838:	e001      	b.n	810183e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810183a:	7dfb      	ldrb	r3, [r7, #23]
 810183c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810183e:	687b      	ldr	r3, [r7, #4]
 8101840:	681b      	ldr	r3, [r3, #0]
 8101842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101846:	2b00      	cmp	r3, #0
 8101848:	f000 8088 	beq.w	810195c <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810184c:	4b7f      	ldr	r3, [pc, #508]	; (8101a4c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810184e:	681b      	ldr	r3, [r3, #0]
 8101850:	4a7e      	ldr	r2, [pc, #504]	; (8101a4c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101858:	f7fe ffc6 	bl	81007e8 <HAL_GetTick>
 810185c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810185e:	e009      	b.n	8101874 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101860:	f7fe ffc2 	bl	81007e8 <HAL_GetTick>
 8101864:	4602      	mov	r2, r0
 8101866:	693b      	ldr	r3, [r7, #16]
 8101868:	1ad3      	subs	r3, r2, r3
 810186a:	2b64      	cmp	r3, #100	; 0x64
 810186c:	d902      	bls.n	8101874 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810186e:	2303      	movs	r3, #3
 8101870:	75fb      	strb	r3, [r7, #23]
        break;
 8101872:	e005      	b.n	8101880 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101874:	4b75      	ldr	r3, [pc, #468]	; (8101a4c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101876:	681b      	ldr	r3, [r3, #0]
 8101878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810187c:	2b00      	cmp	r3, #0
 810187e:	d0ef      	beq.n	8101860 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8101880:	7dfb      	ldrb	r3, [r7, #23]
 8101882:	2b00      	cmp	r3, #0
 8101884:	d168      	bne.n	8101958 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101886:	4b70      	ldr	r3, [pc, #448]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101888:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810188a:	687b      	ldr	r3, [r7, #4]
 810188c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101890:	4053      	eors	r3, r2
 8101892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101896:	2b00      	cmp	r3, #0
 8101898:	d013      	beq.n	81018c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810189a:	4b6b      	ldr	r3, [pc, #428]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810189e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81018a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81018a4:	4b68      	ldr	r3, [pc, #416]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81018a8:	4a67      	ldr	r2, [pc, #412]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81018aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81018ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81018b0:	4b65      	ldr	r3, [pc, #404]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81018b4:	4a64      	ldr	r2, [pc, #400]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81018b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81018ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81018bc:	4a62      	ldr	r2, [pc, #392]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81018be:	68fb      	ldr	r3, [r7, #12]
 81018c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81018c2:	687b      	ldr	r3, [r7, #4]
 81018c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81018c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81018cc:	d115      	bne.n	81018fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81018ce:	f7fe ff8b 	bl	81007e8 <HAL_GetTick>
 81018d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81018d4:	e00b      	b.n	81018ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81018d6:	f7fe ff87 	bl	81007e8 <HAL_GetTick>
 81018da:	4602      	mov	r2, r0
 81018dc:	693b      	ldr	r3, [r7, #16]
 81018de:	1ad3      	subs	r3, r2, r3
 81018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 81018e4:	4293      	cmp	r3, r2
 81018e6:	d902      	bls.n	81018ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81018e8:	2303      	movs	r3, #3
 81018ea:	75fb      	strb	r3, [r7, #23]
            break;
 81018ec:	e005      	b.n	81018fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81018ee:	4b56      	ldr	r3, [pc, #344]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81018f2:	f003 0302 	and.w	r3, r3, #2
 81018f6:	2b00      	cmp	r3, #0
 81018f8:	d0ed      	beq.n	81018d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81018fa:	7dfb      	ldrb	r3, [r7, #23]
 81018fc:	2b00      	cmp	r3, #0
 81018fe:	d128      	bne.n	8101952 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101900:	687b      	ldr	r3, [r7, #4]
 8101902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810190a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810190e:	d10f      	bne.n	8101930 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8101910:	4b4d      	ldr	r3, [pc, #308]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101912:	691b      	ldr	r3, [r3, #16]
 8101914:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8101918:	687b      	ldr	r3, [r7, #4]
 810191a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810191e:	091b      	lsrs	r3, r3, #4
 8101920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8101924:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8101928:	4947      	ldr	r1, [pc, #284]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810192a:	4313      	orrs	r3, r2
 810192c:	610b      	str	r3, [r1, #16]
 810192e:	e005      	b.n	810193c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8101930:	4b45      	ldr	r3, [pc, #276]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101932:	691b      	ldr	r3, [r3, #16]
 8101934:	4a44      	ldr	r2, [pc, #272]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101936:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810193a:	6113      	str	r3, [r2, #16]
 810193c:	4b42      	ldr	r3, [pc, #264]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810193e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101940:	687b      	ldr	r3, [r7, #4]
 8101942:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810194a:	493f      	ldr	r1, [pc, #252]	; (8101a48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810194c:	4313      	orrs	r3, r2
 810194e:	670b      	str	r3, [r1, #112]	; 0x70
 8101950:	e004      	b.n	810195c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101952:	7dfb      	ldrb	r3, [r7, #23]
 8101954:	75bb      	strb	r3, [r7, #22]
 8101956:	e001      	b.n	810195c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101958:	7dfb      	ldrb	r3, [r7, #23]
 810195a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	f003 0301 	and.w	r3, r3, #1
 8101964:	2b00      	cmp	r3, #0
 8101966:	f000 8083 	beq.w	8101a70 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810196e:	2b28      	cmp	r3, #40	; 0x28
 8101970:	d866      	bhi.n	8101a40 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8101972:	a201      	add	r2, pc, #4	; (adr r2, 8101978 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8101974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101978:	08101a51 	.word	0x08101a51
 810197c:	08101a41 	.word	0x08101a41
 8101980:	08101a41 	.word	0x08101a41
 8101984:	08101a41 	.word	0x08101a41
 8101988:	08101a41 	.word	0x08101a41
 810198c:	08101a41 	.word	0x08101a41
 8101990:	08101a41 	.word	0x08101a41
 8101994:	08101a41 	.word	0x08101a41
 8101998:	08101a1d 	.word	0x08101a1d
 810199c:	08101a41 	.word	0x08101a41
 81019a0:	08101a41 	.word	0x08101a41
 81019a4:	08101a41 	.word	0x08101a41
 81019a8:	08101a41 	.word	0x08101a41
 81019ac:	08101a41 	.word	0x08101a41
 81019b0:	08101a41 	.word	0x08101a41
 81019b4:	08101a41 	.word	0x08101a41
 81019b8:	08101a2f 	.word	0x08101a2f
 81019bc:	08101a41 	.word	0x08101a41
 81019c0:	08101a41 	.word	0x08101a41
 81019c4:	08101a41 	.word	0x08101a41
 81019c8:	08101a41 	.word	0x08101a41
 81019cc:	08101a41 	.word	0x08101a41
 81019d0:	08101a41 	.word	0x08101a41
 81019d4:	08101a41 	.word	0x08101a41
 81019d8:	08101a51 	.word	0x08101a51
 81019dc:	08101a41 	.word	0x08101a41
 81019e0:	08101a41 	.word	0x08101a41
 81019e4:	08101a41 	.word	0x08101a41
 81019e8:	08101a41 	.word	0x08101a41
 81019ec:	08101a41 	.word	0x08101a41
 81019f0:	08101a41 	.word	0x08101a41
 81019f4:	08101a41 	.word	0x08101a41
 81019f8:	08101a51 	.word	0x08101a51
 81019fc:	08101a41 	.word	0x08101a41
 8101a00:	08101a41 	.word	0x08101a41
 8101a04:	08101a41 	.word	0x08101a41
 8101a08:	08101a41 	.word	0x08101a41
 8101a0c:	08101a41 	.word	0x08101a41
 8101a10:	08101a41 	.word	0x08101a41
 8101a14:	08101a41 	.word	0x08101a41
 8101a18:	08101a51 	.word	0x08101a51
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101a1c:	687b      	ldr	r3, [r7, #4]
 8101a1e:	3304      	adds	r3, #4
 8101a20:	2101      	movs	r1, #1
 8101a22:	4618      	mov	r0, r3
 8101a24:	f000 fb3a 	bl	810209c <RCCEx_PLL2_Config>
 8101a28:	4603      	mov	r3, r0
 8101a2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101a2c:	e011      	b.n	8101a52 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	3324      	adds	r3, #36	; 0x24
 8101a32:	2101      	movs	r1, #1
 8101a34:	4618      	mov	r0, r3
 8101a36:	f000 fbe3 	bl	8102200 <RCCEx_PLL3_Config>
 8101a3a:	4603      	mov	r3, r0
 8101a3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101a3e:	e008      	b.n	8101a52 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101a40:	2301      	movs	r3, #1
 8101a42:	75fb      	strb	r3, [r7, #23]
      break;
 8101a44:	e005      	b.n	8101a52 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8101a46:	bf00      	nop
 8101a48:	58024400 	.word	0x58024400
 8101a4c:	58024800 	.word	0x58024800
      break;
 8101a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101a52:	7dfb      	ldrb	r3, [r7, #23]
 8101a54:	2b00      	cmp	r3, #0
 8101a56:	d109      	bne.n	8101a6c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8101a58:	4b96      	ldr	r3, [pc, #600]	; (8101cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101a5c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101a64:	4993      	ldr	r1, [pc, #588]	; (8101cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101a66:	4313      	orrs	r3, r2
 8101a68:	654b      	str	r3, [r1, #84]	; 0x54
 8101a6a:	e001      	b.n	8101a70 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a6c:	7dfb      	ldrb	r3, [r7, #23]
 8101a6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8101a70:	687b      	ldr	r3, [r7, #4]
 8101a72:	681b      	ldr	r3, [r3, #0]
 8101a74:	f003 0302 	and.w	r3, r3, #2
 8101a78:	2b00      	cmp	r3, #0
 8101a7a:	d038      	beq.n	8101aee <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101a80:	2b05      	cmp	r3, #5
 8101a82:	d821      	bhi.n	8101ac8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8101a84:	a201      	add	r2, pc, #4	; (adr r2, 8101a8c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8101a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101a8a:	bf00      	nop
 8101a8c:	08101acf 	.word	0x08101acf
 8101a90:	08101aa5 	.word	0x08101aa5
 8101a94:	08101ab7 	.word	0x08101ab7
 8101a98:	08101acf 	.word	0x08101acf
 8101a9c:	08101acf 	.word	0x08101acf
 8101aa0:	08101acf 	.word	0x08101acf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	3304      	adds	r3, #4
 8101aa8:	2101      	movs	r1, #1
 8101aaa:	4618      	mov	r0, r3
 8101aac:	f000 faf6 	bl	810209c <RCCEx_PLL2_Config>
 8101ab0:	4603      	mov	r3, r0
 8101ab2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101ab4:	e00c      	b.n	8101ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101ab6:	687b      	ldr	r3, [r7, #4]
 8101ab8:	3324      	adds	r3, #36	; 0x24
 8101aba:	2101      	movs	r1, #1
 8101abc:	4618      	mov	r0, r3
 8101abe:	f000 fb9f 	bl	8102200 <RCCEx_PLL3_Config>
 8101ac2:	4603      	mov	r3, r0
 8101ac4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101ac6:	e003      	b.n	8101ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101ac8:	2301      	movs	r3, #1
 8101aca:	75fb      	strb	r3, [r7, #23]
      break;
 8101acc:	e000      	b.n	8101ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8101ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ad0:	7dfb      	ldrb	r3, [r7, #23]
 8101ad2:	2b00      	cmp	r3, #0
 8101ad4:	d109      	bne.n	8101aea <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8101ad6:	4b77      	ldr	r3, [pc, #476]	; (8101cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101ada:	f023 0207 	bic.w	r2, r3, #7
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101ae2:	4974      	ldr	r1, [pc, #464]	; (8101cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101ae4:	4313      	orrs	r3, r2
 8101ae6:	654b      	str	r3, [r1, #84]	; 0x54
 8101ae8:	e001      	b.n	8101aee <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101aea:	7dfb      	ldrb	r3, [r7, #23]
 8101aec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8101aee:	687b      	ldr	r3, [r7, #4]
 8101af0:	681b      	ldr	r3, [r3, #0]
 8101af2:	f003 0304 	and.w	r3, r3, #4
 8101af6:	2b00      	cmp	r3, #0
 8101af8:	d03a      	beq.n	8101b70 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8101afa:	687b      	ldr	r3, [r7, #4]
 8101afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101b00:	2b05      	cmp	r3, #5
 8101b02:	d821      	bhi.n	8101b48 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8101b04:	a201      	add	r2, pc, #4	; (adr r2, 8101b0c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8101b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101b0a:	bf00      	nop
 8101b0c:	08101b4f 	.word	0x08101b4f
 8101b10:	08101b25 	.word	0x08101b25
 8101b14:	08101b37 	.word	0x08101b37
 8101b18:	08101b4f 	.word	0x08101b4f
 8101b1c:	08101b4f 	.word	0x08101b4f
 8101b20:	08101b4f 	.word	0x08101b4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	3304      	adds	r3, #4
 8101b28:	2101      	movs	r1, #1
 8101b2a:	4618      	mov	r0, r3
 8101b2c:	f000 fab6 	bl	810209c <RCCEx_PLL2_Config>
 8101b30:	4603      	mov	r3, r0
 8101b32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101b34:	e00c      	b.n	8101b50 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	3324      	adds	r3, #36	; 0x24
 8101b3a:	2101      	movs	r1, #1
 8101b3c:	4618      	mov	r0, r3
 8101b3e:	f000 fb5f 	bl	8102200 <RCCEx_PLL3_Config>
 8101b42:	4603      	mov	r3, r0
 8101b44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101b46:	e003      	b.n	8101b50 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101b48:	2301      	movs	r3, #1
 8101b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8101b4c:	e000      	b.n	8101b50 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8101b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101b50:	7dfb      	ldrb	r3, [r7, #23]
 8101b52:	2b00      	cmp	r3, #0
 8101b54:	d10a      	bne.n	8101b6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8101b56:	4b57      	ldr	r3, [pc, #348]	; (8101cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101b5a:	f023 0207 	bic.w	r2, r3, #7
 8101b5e:	687b      	ldr	r3, [r7, #4]
 8101b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101b64:	4953      	ldr	r1, [pc, #332]	; (8101cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101b66:	4313      	orrs	r3, r2
 8101b68:	658b      	str	r3, [r1, #88]	; 0x58
 8101b6a:	e001      	b.n	8101b70 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b6c:	7dfb      	ldrb	r3, [r7, #23]
 8101b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	681b      	ldr	r3, [r3, #0]
 8101b74:	f003 0320 	and.w	r3, r3, #32
 8101b78:	2b00      	cmp	r3, #0
 8101b7a:	d04b      	beq.n	8101c14 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8101b7c:	687b      	ldr	r3, [r7, #4]
 8101b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8101b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101b86:	d02e      	beq.n	8101be6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8101b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101b8c:	d828      	bhi.n	8101be0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b92:	d02a      	beq.n	8101bea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8101b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b98:	d822      	bhi.n	8101be0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101b9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101b9e:	d026      	beq.n	8101bee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8101ba0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101ba4:	d81c      	bhi.n	8101be0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101baa:	d010      	beq.n	8101bce <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8101bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101bb0:	d816      	bhi.n	8101be0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101bb2:	2b00      	cmp	r3, #0
 8101bb4:	d01d      	beq.n	8101bf2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8101bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101bba:	d111      	bne.n	8101be0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	3304      	adds	r3, #4
 8101bc0:	2100      	movs	r1, #0
 8101bc2:	4618      	mov	r0, r3
 8101bc4:	f000 fa6a 	bl	810209c <RCCEx_PLL2_Config>
 8101bc8:	4603      	mov	r3, r0
 8101bca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8101bcc:	e012      	b.n	8101bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101bce:	687b      	ldr	r3, [r7, #4]
 8101bd0:	3324      	adds	r3, #36	; 0x24
 8101bd2:	2102      	movs	r1, #2
 8101bd4:	4618      	mov	r0, r3
 8101bd6:	f000 fb13 	bl	8102200 <RCCEx_PLL3_Config>
 8101bda:	4603      	mov	r3, r0
 8101bdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8101bde:	e009      	b.n	8101bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101be0:	2301      	movs	r3, #1
 8101be2:	75fb      	strb	r3, [r7, #23]
      break;
 8101be4:	e006      	b.n	8101bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101be6:	bf00      	nop
 8101be8:	e004      	b.n	8101bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101bea:	bf00      	nop
 8101bec:	e002      	b.n	8101bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101bee:	bf00      	nop
 8101bf0:	e000      	b.n	8101bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101bf4:	7dfb      	ldrb	r3, [r7, #23]
 8101bf6:	2b00      	cmp	r3, #0
 8101bf8:	d10a      	bne.n	8101c10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8101bfa:	4b2e      	ldr	r3, [pc, #184]	; (8101cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101bfe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8101c08:	492a      	ldr	r1, [pc, #168]	; (8101cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101c0a:	4313      	orrs	r3, r2
 8101c0c:	654b      	str	r3, [r1, #84]	; 0x54
 8101c0e:	e001      	b.n	8101c14 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c10:	7dfb      	ldrb	r3, [r7, #23]
 8101c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	681b      	ldr	r3, [r3, #0]
 8101c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101c1c:	2b00      	cmp	r3, #0
 8101c1e:	d04d      	beq.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8101c26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8101c2a:	d02e      	beq.n	8101c8a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8101c2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8101c30:	d828      	bhi.n	8101c84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101c36:	d02a      	beq.n	8101c8e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8101c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101c3c:	d822      	bhi.n	8101c84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101c3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8101c42:	d026      	beq.n	8101c92 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8101c44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8101c48:	d81c      	bhi.n	8101c84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8101c4e:	d010      	beq.n	8101c72 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8101c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8101c54:	d816      	bhi.n	8101c84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101c56:	2b00      	cmp	r3, #0
 8101c58:	d01d      	beq.n	8101c96 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8101c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8101c5e:	d111      	bne.n	8101c84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101c60:	687b      	ldr	r3, [r7, #4]
 8101c62:	3304      	adds	r3, #4
 8101c64:	2100      	movs	r1, #0
 8101c66:	4618      	mov	r0, r3
 8101c68:	f000 fa18 	bl	810209c <RCCEx_PLL2_Config>
 8101c6c:	4603      	mov	r3, r0
 8101c6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8101c70:	e012      	b.n	8101c98 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101c72:	687b      	ldr	r3, [r7, #4]
 8101c74:	3324      	adds	r3, #36	; 0x24
 8101c76:	2102      	movs	r1, #2
 8101c78:	4618      	mov	r0, r3
 8101c7a:	f000 fac1 	bl	8102200 <RCCEx_PLL3_Config>
 8101c7e:	4603      	mov	r3, r0
 8101c80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8101c82:	e009      	b.n	8101c98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101c84:	2301      	movs	r3, #1
 8101c86:	75fb      	strb	r3, [r7, #23]
      break;
 8101c88:	e006      	b.n	8101c98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101c8a:	bf00      	nop
 8101c8c:	e004      	b.n	8101c98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101c8e:	bf00      	nop
 8101c90:	e002      	b.n	8101c98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101c92:	bf00      	nop
 8101c94:	e000      	b.n	8101c98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c98:	7dfb      	ldrb	r3, [r7, #23]
 8101c9a:	2b00      	cmp	r3, #0
 8101c9c:	d10c      	bne.n	8101cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8101c9e:	4b05      	ldr	r3, [pc, #20]	; (8101cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101ca2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8101cac:	4901      	ldr	r1, [pc, #4]	; (8101cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101cae:	4313      	orrs	r3, r2
 8101cb0:	658b      	str	r3, [r1, #88]	; 0x58
 8101cb2:	e003      	b.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8101cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101cb8:	7dfb      	ldrb	r3, [r7, #23]
 8101cba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	681b      	ldr	r3, [r3, #0]
 8101cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101cc4:	2b00      	cmp	r3, #0
 8101cc6:	d04b      	beq.n	8101d60 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8101cc8:	687b      	ldr	r3, [r7, #4]
 8101cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101cce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8101cd2:	d02e      	beq.n	8101d32 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8101cd4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8101cd8:	d828      	bhi.n	8101d2c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8101cde:	d02a      	beq.n	8101d36 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8101ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8101ce4:	d822      	bhi.n	8101d2c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101ce6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8101cea:	d026      	beq.n	8101d3a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8101cec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8101cf0:	d81c      	bhi.n	8101d2c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101cf6:	d010      	beq.n	8101d1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8101cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101cfc:	d816      	bhi.n	8101d2c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101cfe:	2b00      	cmp	r3, #0
 8101d00:	d01d      	beq.n	8101d3e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8101d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101d06:	d111      	bne.n	8101d2c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	3304      	adds	r3, #4
 8101d0c:	2100      	movs	r1, #0
 8101d0e:	4618      	mov	r0, r3
 8101d10:	f000 f9c4 	bl	810209c <RCCEx_PLL2_Config>
 8101d14:	4603      	mov	r3, r0
 8101d16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8101d18:	e012      	b.n	8101d40 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101d1a:	687b      	ldr	r3, [r7, #4]
 8101d1c:	3324      	adds	r3, #36	; 0x24
 8101d1e:	2102      	movs	r1, #2
 8101d20:	4618      	mov	r0, r3
 8101d22:	f000 fa6d 	bl	8102200 <RCCEx_PLL3_Config>
 8101d26:	4603      	mov	r3, r0
 8101d28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8101d2a:	e009      	b.n	8101d40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101d2c:	2301      	movs	r3, #1
 8101d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8101d30:	e006      	b.n	8101d40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101d32:	bf00      	nop
 8101d34:	e004      	b.n	8101d40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101d36:	bf00      	nop
 8101d38:	e002      	b.n	8101d40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101d3a:	bf00      	nop
 8101d3c:	e000      	b.n	8101d40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101d40:	7dfb      	ldrb	r3, [r7, #23]
 8101d42:	2b00      	cmp	r3, #0
 8101d44:	d10a      	bne.n	8101d5c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8101d46:	4b9d      	ldr	r3, [pc, #628]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101d54:	4999      	ldr	r1, [pc, #612]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101d56:	4313      	orrs	r3, r2
 8101d58:	658b      	str	r3, [r1, #88]	; 0x58
 8101d5a:	e001      	b.n	8101d60 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d5c:	7dfb      	ldrb	r3, [r7, #23]
 8101d5e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	681b      	ldr	r3, [r3, #0]
 8101d64:	f003 0308 	and.w	r3, r3, #8
 8101d68:	2b00      	cmp	r3, #0
 8101d6a:	d01a      	beq.n	8101da2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8101d6c:	687b      	ldr	r3, [r7, #4]
 8101d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101d76:	d10a      	bne.n	8101d8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	3324      	adds	r3, #36	; 0x24
 8101d7c:	2102      	movs	r1, #2
 8101d7e:	4618      	mov	r0, r3
 8101d80:	f000 fa3e 	bl	8102200 <RCCEx_PLL3_Config>
 8101d84:	4603      	mov	r3, r0
 8101d86:	2b00      	cmp	r3, #0
 8101d88:	d001      	beq.n	8101d8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8101d8a:	2301      	movs	r3, #1
 8101d8c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8101d8e:	4b8b      	ldr	r3, [pc, #556]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8101d96:	687b      	ldr	r3, [r7, #4]
 8101d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101d9c:	4987      	ldr	r1, [pc, #540]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101d9e:	4313      	orrs	r3, r2
 8101da0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8101da2:	687b      	ldr	r3, [r7, #4]
 8101da4:	681b      	ldr	r3, [r3, #0]
 8101da6:	f003 0310 	and.w	r3, r3, #16
 8101daa:	2b00      	cmp	r3, #0
 8101dac:	d01a      	beq.n	8101de4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101db8:	d10a      	bne.n	8101dd0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8101dba:	687b      	ldr	r3, [r7, #4]
 8101dbc:	3324      	adds	r3, #36	; 0x24
 8101dbe:	2102      	movs	r1, #2
 8101dc0:	4618      	mov	r0, r3
 8101dc2:	f000 fa1d 	bl	8102200 <RCCEx_PLL3_Config>
 8101dc6:	4603      	mov	r3, r0
 8101dc8:	2b00      	cmp	r3, #0
 8101dca:	d001      	beq.n	8101dd0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8101dcc:	2301      	movs	r3, #1
 8101dce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8101dd0:	4b7a      	ldr	r3, [pc, #488]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101dde:	4977      	ldr	r1, [pc, #476]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101de0:	4313      	orrs	r3, r2
 8101de2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8101de4:	687b      	ldr	r3, [r7, #4]
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8101dec:	2b00      	cmp	r3, #0
 8101dee:	d034      	beq.n	8101e5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8101df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101dfa:	d01d      	beq.n	8101e38 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8101dfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101e00:	d817      	bhi.n	8101e32 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8101e02:	2b00      	cmp	r3, #0
 8101e04:	d003      	beq.n	8101e0e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8101e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101e0a:	d009      	beq.n	8101e20 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8101e0c:	e011      	b.n	8101e32 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	3304      	adds	r3, #4
 8101e12:	2100      	movs	r1, #0
 8101e14:	4618      	mov	r0, r3
 8101e16:	f000 f941 	bl	810209c <RCCEx_PLL2_Config>
 8101e1a:	4603      	mov	r3, r0
 8101e1c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8101e1e:	e00c      	b.n	8101e3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	3324      	adds	r3, #36	; 0x24
 8101e24:	2102      	movs	r1, #2
 8101e26:	4618      	mov	r0, r3
 8101e28:	f000 f9ea 	bl	8102200 <RCCEx_PLL3_Config>
 8101e2c:	4603      	mov	r3, r0
 8101e2e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8101e30:	e003      	b.n	8101e3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101e32:	2301      	movs	r3, #1
 8101e34:	75fb      	strb	r3, [r7, #23]
      break;
 8101e36:	e000      	b.n	8101e3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8101e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101e3a:	7dfb      	ldrb	r3, [r7, #23]
 8101e3c:	2b00      	cmp	r3, #0
 8101e3e:	d10a      	bne.n	8101e56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8101e40:	4b5e      	ldr	r3, [pc, #376]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101e44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8101e4e:	495b      	ldr	r1, [pc, #364]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101e50:	4313      	orrs	r3, r2
 8101e52:	658b      	str	r3, [r1, #88]	; 0x58
 8101e54:	e001      	b.n	8101e5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e56:	7dfb      	ldrb	r3, [r7, #23]
 8101e58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	681b      	ldr	r3, [r3, #0]
 8101e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101e62:	2b00      	cmp	r3, #0
 8101e64:	d033      	beq.n	8101ece <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8101e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101e70:	d01c      	beq.n	8101eac <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8101e72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101e76:	d816      	bhi.n	8101ea6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8101e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101e7c:	d003      	beq.n	8101e86 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8101e7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101e82:	d007      	beq.n	8101e94 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8101e84:	e00f      	b.n	8101ea6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e86:	4b4d      	ldr	r3, [pc, #308]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101e8a:	4a4c      	ldr	r2, [pc, #304]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101e90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8101e92:	e00c      	b.n	8101eae <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	3324      	adds	r3, #36	; 0x24
 8101e98:	2101      	movs	r1, #1
 8101e9a:	4618      	mov	r0, r3
 8101e9c:	f000 f9b0 	bl	8102200 <RCCEx_PLL3_Config>
 8101ea0:	4603      	mov	r3, r0
 8101ea2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8101ea4:	e003      	b.n	8101eae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101ea6:	2301      	movs	r3, #1
 8101ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8101eaa:	e000      	b.n	8101eae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8101eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101eae:	7dfb      	ldrb	r3, [r7, #23]
 8101eb0:	2b00      	cmp	r3, #0
 8101eb2:	d10a      	bne.n	8101eca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8101eb4:	4b41      	ldr	r3, [pc, #260]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8101ec2:	493e      	ldr	r1, [pc, #248]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101ec4:	4313      	orrs	r3, r2
 8101ec6:	654b      	str	r3, [r1, #84]	; 0x54
 8101ec8:	e001      	b.n	8101ece <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101eca:	7dfb      	ldrb	r3, [r7, #23]
 8101ecc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101ed6:	2b00      	cmp	r3, #0
 8101ed8:	d029      	beq.n	8101f2e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8101eda:	687b      	ldr	r3, [r7, #4]
 8101edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101ede:	2b00      	cmp	r3, #0
 8101ee0:	d003      	beq.n	8101eea <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8101ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101ee6:	d007      	beq.n	8101ef8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8101ee8:	e00f      	b.n	8101f0a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101eea:	4b34      	ldr	r3, [pc, #208]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101eee:	4a33      	ldr	r2, [pc, #204]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8101ef6:	e00b      	b.n	8101f10 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101ef8:	687b      	ldr	r3, [r7, #4]
 8101efa:	3304      	adds	r3, #4
 8101efc:	2102      	movs	r1, #2
 8101efe:	4618      	mov	r0, r3
 8101f00:	f000 f8cc 	bl	810209c <RCCEx_PLL2_Config>
 8101f04:	4603      	mov	r3, r0
 8101f06:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8101f08:	e002      	b.n	8101f10 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8101f0a:	2301      	movs	r3, #1
 8101f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8101f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f10:	7dfb      	ldrb	r3, [r7, #23]
 8101f12:	2b00      	cmp	r3, #0
 8101f14:	d109      	bne.n	8101f2a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8101f16:	4b29      	ldr	r3, [pc, #164]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101f1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101f22:	4926      	ldr	r1, [pc, #152]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101f24:	4313      	orrs	r3, r2
 8101f26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101f28:	e001      	b.n	8101f2e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f2a:	7dfb      	ldrb	r3, [r7, #23]
 8101f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8101f2e:	687b      	ldr	r3, [r7, #4]
 8101f30:	681b      	ldr	r3, [r3, #0]
 8101f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8101f36:	2b00      	cmp	r3, #0
 8101f38:	d00a      	beq.n	8101f50 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	3324      	adds	r3, #36	; 0x24
 8101f3e:	2102      	movs	r1, #2
 8101f40:	4618      	mov	r0, r3
 8101f42:	f000 f95d 	bl	8102200 <RCCEx_PLL3_Config>
 8101f46:	4603      	mov	r3, r0
 8101f48:	2b00      	cmp	r3, #0
 8101f4a:	d001      	beq.n	8101f50 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8101f4c:	2301      	movs	r3, #1
 8101f4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8101f50:	687b      	ldr	r3, [r7, #4]
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101f58:	2b00      	cmp	r3, #0
 8101f5a:	d033      	beq.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101f64:	d017      	beq.n	8101f96 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8101f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101f6a:	d811      	bhi.n	8101f90 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8101f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8101f70:	d013      	beq.n	8101f9a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8101f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8101f76:	d80b      	bhi.n	8101f90 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8101f78:	2b00      	cmp	r3, #0
 8101f7a:	d010      	beq.n	8101f9e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8101f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101f80:	d106      	bne.n	8101f90 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101f82:	4b0e      	ldr	r3, [pc, #56]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101f86:	4a0d      	ldr	r2, [pc, #52]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8101f8e:	e007      	b.n	8101fa0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101f90:	2301      	movs	r3, #1
 8101f92:	75fb      	strb	r3, [r7, #23]
      break;
 8101f94:	e004      	b.n	8101fa0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8101f96:	bf00      	nop
 8101f98:	e002      	b.n	8101fa0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8101f9a:	bf00      	nop
 8101f9c:	e000      	b.n	8101fa0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8101f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101fa0:	7dfb      	ldrb	r3, [r7, #23]
 8101fa2:	2b00      	cmp	r3, #0
 8101fa4:	d10c      	bne.n	8101fc0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8101fa6:	4b05      	ldr	r3, [pc, #20]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101faa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101fb2:	4902      	ldr	r1, [pc, #8]	; (8101fbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101fb4:	4313      	orrs	r3, r2
 8101fb6:	654b      	str	r3, [r1, #84]	; 0x54
 8101fb8:	e004      	b.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8101fba:	bf00      	nop
 8101fbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fc0:	7dfb      	ldrb	r3, [r7, #23]
 8101fc2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	681b      	ldr	r3, [r3, #0]
 8101fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101fcc:	2b00      	cmp	r3, #0
 8101fce:	d008      	beq.n	8101fe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8101fd0:	4b31      	ldr	r3, [pc, #196]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8101fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101fd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101fdc:	492e      	ldr	r1, [pc, #184]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8101fde:	4313      	orrs	r3, r2
 8101fe0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	681b      	ldr	r3, [r3, #0]
 8101fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101fea:	2b00      	cmp	r3, #0
 8101fec:	d009      	beq.n	8102002 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8101fee:	4b2a      	ldr	r3, [pc, #168]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8101ff0:	691b      	ldr	r3, [r3, #16]
 8101ff2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8101ffc:	4926      	ldr	r1, [pc, #152]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8101ffe:	4313      	orrs	r3, r2
 8102000:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	681b      	ldr	r3, [r3, #0]
 8102006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810200a:	2b00      	cmp	r3, #0
 810200c:	d008      	beq.n	8102020 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810200e:	4b22      	ldr	r3, [pc, #136]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102012:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810201a:	491f      	ldr	r1, [pc, #124]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810201c:	4313      	orrs	r3, r2
 810201e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102020:	687b      	ldr	r3, [r7, #4]
 8102022:	681b      	ldr	r3, [r3, #0]
 8102024:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102028:	2b00      	cmp	r3, #0
 810202a:	d00d      	beq.n	8102048 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810202c:	4b1a      	ldr	r3, [pc, #104]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810202e:	691b      	ldr	r3, [r3, #16]
 8102030:	4a19      	ldr	r2, [pc, #100]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102032:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102036:	6113      	str	r3, [r2, #16]
 8102038:	4b17      	ldr	r3, [pc, #92]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810203a:	691a      	ldr	r2, [r3, #16]
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102042:	4915      	ldr	r1, [pc, #84]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102044:	4313      	orrs	r3, r2
 8102046:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102048:	687b      	ldr	r3, [r7, #4]
 810204a:	681b      	ldr	r3, [r3, #0]
 810204c:	2b00      	cmp	r3, #0
 810204e:	da08      	bge.n	8102062 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102050:	4b11      	ldr	r3, [pc, #68]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102054:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810205c:	490e      	ldr	r1, [pc, #56]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810205e:	4313      	orrs	r3, r2
 8102060:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810206a:	2b00      	cmp	r3, #0
 810206c:	d009      	beq.n	8102082 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810206e:	4b0a      	ldr	r3, [pc, #40]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102072:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810207c:	4906      	ldr	r1, [pc, #24]	; (8102098 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810207e:	4313      	orrs	r3, r2
 8102080:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8102082:	7dbb      	ldrb	r3, [r7, #22]
 8102084:	2b00      	cmp	r3, #0
 8102086:	d101      	bne.n	810208c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8102088:	2300      	movs	r3, #0
 810208a:	e000      	b.n	810208e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 810208c:	2301      	movs	r3, #1
}
 810208e:	4618      	mov	r0, r3
 8102090:	3718      	adds	r7, #24
 8102092:	46bd      	mov	sp, r7
 8102094:	bd80      	pop	{r7, pc}
 8102096:	bf00      	nop
 8102098:	58024400 	.word	0x58024400

0810209c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810209c:	b580      	push	{r7, lr}
 810209e:	b084      	sub	sp, #16
 81020a0:	af00      	add	r7, sp, #0
 81020a2:	6078      	str	r0, [r7, #4]
 81020a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81020a6:	2300      	movs	r3, #0
 81020a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81020aa:	4b54      	ldr	r3, [pc, #336]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81020ae:	f003 0303 	and.w	r3, r3, #3
 81020b2:	2b03      	cmp	r3, #3
 81020b4:	d101      	bne.n	81020ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81020b6:	2301      	movs	r3, #1
 81020b8:	e09b      	b.n	81021f2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81020ba:	4b50      	ldr	r3, [pc, #320]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	4a4f      	ldr	r2, [pc, #316]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81020c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81020c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81020c6:	f7fe fb8f 	bl	81007e8 <HAL_GetTick>
 81020ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81020cc:	e008      	b.n	81020e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81020ce:	f7fe fb8b 	bl	81007e8 <HAL_GetTick>
 81020d2:	4602      	mov	r2, r0
 81020d4:	68bb      	ldr	r3, [r7, #8]
 81020d6:	1ad3      	subs	r3, r2, r3
 81020d8:	2b02      	cmp	r3, #2
 81020da:	d901      	bls.n	81020e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81020dc:	2303      	movs	r3, #3
 81020de:	e088      	b.n	81021f2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81020e0:	4b46      	ldr	r3, [pc, #280]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81020e2:	681b      	ldr	r3, [r3, #0]
 81020e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81020e8:	2b00      	cmp	r3, #0
 81020ea:	d1f0      	bne.n	81020ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81020ec:	4b43      	ldr	r3, [pc, #268]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81020f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81020f4:	687b      	ldr	r3, [r7, #4]
 81020f6:	681b      	ldr	r3, [r3, #0]
 81020f8:	031b      	lsls	r3, r3, #12
 81020fa:	4940      	ldr	r1, [pc, #256]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81020fc:	4313      	orrs	r3, r2
 81020fe:	628b      	str	r3, [r1, #40]	; 0x28
 8102100:	687b      	ldr	r3, [r7, #4]
 8102102:	685b      	ldr	r3, [r3, #4]
 8102104:	3b01      	subs	r3, #1
 8102106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	689b      	ldr	r3, [r3, #8]
 810210e:	3b01      	subs	r3, #1
 8102110:	025b      	lsls	r3, r3, #9
 8102112:	b29b      	uxth	r3, r3
 8102114:	431a      	orrs	r2, r3
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	68db      	ldr	r3, [r3, #12]
 810211a:	3b01      	subs	r3, #1
 810211c:	041b      	lsls	r3, r3, #16
 810211e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102122:	431a      	orrs	r2, r3
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	691b      	ldr	r3, [r3, #16]
 8102128:	3b01      	subs	r3, #1
 810212a:	061b      	lsls	r3, r3, #24
 810212c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102130:	4932      	ldr	r1, [pc, #200]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 8102132:	4313      	orrs	r3, r2
 8102134:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102136:	4b31      	ldr	r3, [pc, #196]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 8102138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810213a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	695b      	ldr	r3, [r3, #20]
 8102142:	492e      	ldr	r1, [pc, #184]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 8102144:	4313      	orrs	r3, r2
 8102146:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102148:	4b2c      	ldr	r3, [pc, #176]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 810214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810214c:	f023 0220 	bic.w	r2, r3, #32
 8102150:	687b      	ldr	r3, [r7, #4]
 8102152:	699b      	ldr	r3, [r3, #24]
 8102154:	4929      	ldr	r1, [pc, #164]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 8102156:	4313      	orrs	r3, r2
 8102158:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810215a:	4b28      	ldr	r3, [pc, #160]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 810215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810215e:	4a27      	ldr	r2, [pc, #156]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 8102160:	f023 0310 	bic.w	r3, r3, #16
 8102164:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102166:	4b25      	ldr	r3, [pc, #148]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 8102168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810216a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810216e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102172:	687a      	ldr	r2, [r7, #4]
 8102174:	69d2      	ldr	r2, [r2, #28]
 8102176:	00d2      	lsls	r2, r2, #3
 8102178:	4920      	ldr	r1, [pc, #128]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 810217a:	4313      	orrs	r3, r2
 810217c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810217e:	4b1f      	ldr	r3, [pc, #124]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 8102180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102182:	4a1e      	ldr	r2, [pc, #120]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 8102184:	f043 0310 	orr.w	r3, r3, #16
 8102188:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810218a:	683b      	ldr	r3, [r7, #0]
 810218c:	2b00      	cmp	r3, #0
 810218e:	d106      	bne.n	810219e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102190:	4b1a      	ldr	r3, [pc, #104]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 8102192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102194:	4a19      	ldr	r2, [pc, #100]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 8102196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810219a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810219c:	e00f      	b.n	81021be <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810219e:	683b      	ldr	r3, [r7, #0]
 81021a0:	2b01      	cmp	r3, #1
 81021a2:	d106      	bne.n	81021b2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81021a4:	4b15      	ldr	r3, [pc, #84]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81021a8:	4a14      	ldr	r2, [pc, #80]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81021aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81021ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 81021b0:	e005      	b.n	81021be <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81021b2:	4b12      	ldr	r3, [pc, #72]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81021b6:	4a11      	ldr	r2, [pc, #68]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81021b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81021bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81021be:	4b0f      	ldr	r3, [pc, #60]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81021c0:	681b      	ldr	r3, [r3, #0]
 81021c2:	4a0e      	ldr	r2, [pc, #56]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81021c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81021c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81021ca:	f7fe fb0d 	bl	81007e8 <HAL_GetTick>
 81021ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81021d0:	e008      	b.n	81021e4 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81021d2:	f7fe fb09 	bl	81007e8 <HAL_GetTick>
 81021d6:	4602      	mov	r2, r0
 81021d8:	68bb      	ldr	r3, [r7, #8]
 81021da:	1ad3      	subs	r3, r2, r3
 81021dc:	2b02      	cmp	r3, #2
 81021de:	d901      	bls.n	81021e4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81021e0:	2303      	movs	r3, #3
 81021e2:	e006      	b.n	81021f2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81021e4:	4b05      	ldr	r3, [pc, #20]	; (81021fc <RCCEx_PLL2_Config+0x160>)
 81021e6:	681b      	ldr	r3, [r3, #0]
 81021e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81021ec:	2b00      	cmp	r3, #0
 81021ee:	d0f0      	beq.n	81021d2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 81021f2:	4618      	mov	r0, r3
 81021f4:	3710      	adds	r7, #16
 81021f6:	46bd      	mov	sp, r7
 81021f8:	bd80      	pop	{r7, pc}
 81021fa:	bf00      	nop
 81021fc:	58024400 	.word	0x58024400

08102200 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102200:	b580      	push	{r7, lr}
 8102202:	b084      	sub	sp, #16
 8102204:	af00      	add	r7, sp, #0
 8102206:	6078      	str	r0, [r7, #4]
 8102208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810220a:	2300      	movs	r3, #0
 810220c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810220e:	4b54      	ldr	r3, [pc, #336]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 8102210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102212:	f003 0303 	and.w	r3, r3, #3
 8102216:	2b03      	cmp	r3, #3
 8102218:	d101      	bne.n	810221e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810221a:	2301      	movs	r3, #1
 810221c:	e09b      	b.n	8102356 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810221e:	4b50      	ldr	r3, [pc, #320]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 8102220:	681b      	ldr	r3, [r3, #0]
 8102222:	4a4f      	ldr	r2, [pc, #316]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 8102224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810222a:	f7fe fadd 	bl	81007e8 <HAL_GetTick>
 810222e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102230:	e008      	b.n	8102244 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102232:	f7fe fad9 	bl	81007e8 <HAL_GetTick>
 8102236:	4602      	mov	r2, r0
 8102238:	68bb      	ldr	r3, [r7, #8]
 810223a:	1ad3      	subs	r3, r2, r3
 810223c:	2b02      	cmp	r3, #2
 810223e:	d901      	bls.n	8102244 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102240:	2303      	movs	r3, #3
 8102242:	e088      	b.n	8102356 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102244:	4b46      	ldr	r3, [pc, #280]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810224c:	2b00      	cmp	r3, #0
 810224e:	d1f0      	bne.n	8102232 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102250:	4b43      	ldr	r3, [pc, #268]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 8102252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102254:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	681b      	ldr	r3, [r3, #0]
 810225c:	051b      	lsls	r3, r3, #20
 810225e:	4940      	ldr	r1, [pc, #256]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 8102260:	4313      	orrs	r3, r2
 8102262:	628b      	str	r3, [r1, #40]	; 0x28
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	685b      	ldr	r3, [r3, #4]
 8102268:	3b01      	subs	r3, #1
 810226a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	689b      	ldr	r3, [r3, #8]
 8102272:	3b01      	subs	r3, #1
 8102274:	025b      	lsls	r3, r3, #9
 8102276:	b29b      	uxth	r3, r3
 8102278:	431a      	orrs	r2, r3
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	68db      	ldr	r3, [r3, #12]
 810227e:	3b01      	subs	r3, #1
 8102280:	041b      	lsls	r3, r3, #16
 8102282:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102286:	431a      	orrs	r2, r3
 8102288:	687b      	ldr	r3, [r7, #4]
 810228a:	691b      	ldr	r3, [r3, #16]
 810228c:	3b01      	subs	r3, #1
 810228e:	061b      	lsls	r3, r3, #24
 8102290:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102294:	4932      	ldr	r1, [pc, #200]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 8102296:	4313      	orrs	r3, r2
 8102298:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810229a:	4b31      	ldr	r3, [pc, #196]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 810229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810229e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81022a2:	687b      	ldr	r3, [r7, #4]
 81022a4:	695b      	ldr	r3, [r3, #20]
 81022a6:	492e      	ldr	r1, [pc, #184]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022a8:	4313      	orrs	r3, r2
 81022aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81022ac:	4b2c      	ldr	r3, [pc, #176]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	699b      	ldr	r3, [r3, #24]
 81022b8:	4929      	ldr	r1, [pc, #164]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022ba:	4313      	orrs	r3, r2
 81022bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81022be:	4b28      	ldr	r3, [pc, #160]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022c2:	4a27      	ldr	r2, [pc, #156]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81022c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81022ca:	4b25      	ldr	r3, [pc, #148]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81022ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81022d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81022d6:	687a      	ldr	r2, [r7, #4]
 81022d8:	69d2      	ldr	r2, [r2, #28]
 81022da:	00d2      	lsls	r2, r2, #3
 81022dc:	4920      	ldr	r1, [pc, #128]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022de:	4313      	orrs	r3, r2
 81022e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81022e2:	4b1f      	ldr	r3, [pc, #124]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022e6:	4a1e      	ldr	r2, [pc, #120]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81022ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81022ee:	683b      	ldr	r3, [r7, #0]
 81022f0:	2b00      	cmp	r3, #0
 81022f2:	d106      	bne.n	8102302 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81022f4:	4b1a      	ldr	r3, [pc, #104]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022f8:	4a19      	ldr	r2, [pc, #100]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 81022fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81022fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102300:	e00f      	b.n	8102322 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102302:	683b      	ldr	r3, [r7, #0]
 8102304:	2b01      	cmp	r3, #1
 8102306:	d106      	bne.n	8102316 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102308:	4b15      	ldr	r3, [pc, #84]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 810230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810230c:	4a14      	ldr	r2, [pc, #80]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 810230e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102314:	e005      	b.n	8102322 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8102316:	4b12      	ldr	r3, [pc, #72]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 8102318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810231a:	4a11      	ldr	r2, [pc, #68]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 810231c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102320:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8102322:	4b0f      	ldr	r3, [pc, #60]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	4a0e      	ldr	r2, [pc, #56]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 8102328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810232c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810232e:	f7fe fa5b 	bl	81007e8 <HAL_GetTick>
 8102332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102334:	e008      	b.n	8102348 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102336:	f7fe fa57 	bl	81007e8 <HAL_GetTick>
 810233a:	4602      	mov	r2, r0
 810233c:	68bb      	ldr	r3, [r7, #8]
 810233e:	1ad3      	subs	r3, r2, r3
 8102340:	2b02      	cmp	r3, #2
 8102342:	d901      	bls.n	8102348 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102344:	2303      	movs	r3, #3
 8102346:	e006      	b.n	8102356 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102348:	4b05      	ldr	r3, [pc, #20]	; (8102360 <RCCEx_PLL3_Config+0x160>)
 810234a:	681b      	ldr	r3, [r3, #0]
 810234c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102350:	2b00      	cmp	r3, #0
 8102352:	d0f0      	beq.n	8102336 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8102354:	7bfb      	ldrb	r3, [r7, #15]
}
 8102356:	4618      	mov	r0, r3
 8102358:	3710      	adds	r7, #16
 810235a:	46bd      	mov	sp, r7
 810235c:	bd80      	pop	{r7, pc}
 810235e:	bf00      	nop
 8102360:	58024400 	.word	0x58024400

08102364 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8102364:	b580      	push	{r7, lr}
 8102366:	b084      	sub	sp, #16
 8102368:	af00      	add	r7, sp, #0
 810236a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	2b00      	cmp	r3, #0
 8102370:	d101      	bne.n	8102376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8102372:	2301      	movs	r3, #1
 8102374:	e0f1      	b.n	810255a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102376:	687b      	ldr	r3, [r7, #4]
 8102378:	2200      	movs	r2, #0
 810237a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	681b      	ldr	r3, [r3, #0]
 8102380:	4a78      	ldr	r2, [pc, #480]	; (8102564 <HAL_SPI_Init+0x200>)
 8102382:	4293      	cmp	r3, r2
 8102384:	d00f      	beq.n	81023a6 <HAL_SPI_Init+0x42>
 8102386:	687b      	ldr	r3, [r7, #4]
 8102388:	681b      	ldr	r3, [r3, #0]
 810238a:	4a77      	ldr	r2, [pc, #476]	; (8102568 <HAL_SPI_Init+0x204>)
 810238c:	4293      	cmp	r3, r2
 810238e:	d00a      	beq.n	81023a6 <HAL_SPI_Init+0x42>
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	681b      	ldr	r3, [r3, #0]
 8102394:	4a75      	ldr	r2, [pc, #468]	; (810256c <HAL_SPI_Init+0x208>)
 8102396:	4293      	cmp	r3, r2
 8102398:	d005      	beq.n	81023a6 <HAL_SPI_Init+0x42>
 810239a:	687b      	ldr	r3, [r7, #4]
 810239c:	68db      	ldr	r3, [r3, #12]
 810239e:	2b0f      	cmp	r3, #15
 81023a0:	d901      	bls.n	81023a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81023a2:	2301      	movs	r3, #1
 81023a4:	e0d9      	b.n	810255a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81023a6:	6878      	ldr	r0, [r7, #4]
 81023a8:	f000 f8e2 	bl	8102570 <SPI_GetPacketSize>
 81023ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	681b      	ldr	r3, [r3, #0]
 81023b2:	4a6c      	ldr	r2, [pc, #432]	; (8102564 <HAL_SPI_Init+0x200>)
 81023b4:	4293      	cmp	r3, r2
 81023b6:	d00c      	beq.n	81023d2 <HAL_SPI_Init+0x6e>
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	681b      	ldr	r3, [r3, #0]
 81023bc:	4a6a      	ldr	r2, [pc, #424]	; (8102568 <HAL_SPI_Init+0x204>)
 81023be:	4293      	cmp	r3, r2
 81023c0:	d007      	beq.n	81023d2 <HAL_SPI_Init+0x6e>
 81023c2:	687b      	ldr	r3, [r7, #4]
 81023c4:	681b      	ldr	r3, [r3, #0]
 81023c6:	4a69      	ldr	r2, [pc, #420]	; (810256c <HAL_SPI_Init+0x208>)
 81023c8:	4293      	cmp	r3, r2
 81023ca:	d002      	beq.n	81023d2 <HAL_SPI_Init+0x6e>
 81023cc:	68fb      	ldr	r3, [r7, #12]
 81023ce:	2b08      	cmp	r3, #8
 81023d0:	d811      	bhi.n	81023f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81023d6:	4a63      	ldr	r2, [pc, #396]	; (8102564 <HAL_SPI_Init+0x200>)
 81023d8:	4293      	cmp	r3, r2
 81023da:	d009      	beq.n	81023f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	681b      	ldr	r3, [r3, #0]
 81023e0:	4a61      	ldr	r2, [pc, #388]	; (8102568 <HAL_SPI_Init+0x204>)
 81023e2:	4293      	cmp	r3, r2
 81023e4:	d004      	beq.n	81023f0 <HAL_SPI_Init+0x8c>
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	681b      	ldr	r3, [r3, #0]
 81023ea:	4a60      	ldr	r2, [pc, #384]	; (810256c <HAL_SPI_Init+0x208>)
 81023ec:	4293      	cmp	r3, r2
 81023ee:	d104      	bne.n	81023fa <HAL_SPI_Init+0x96>
 81023f0:	68fb      	ldr	r3, [r7, #12]
 81023f2:	2b10      	cmp	r3, #16
 81023f4:	d901      	bls.n	81023fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81023f6:	2301      	movs	r3, #1
 81023f8:	e0af      	b.n	810255a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81023fa:	687b      	ldr	r3, [r7, #4]
 81023fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8102400:	b2db      	uxtb	r3, r3
 8102402:	2b00      	cmp	r3, #0
 8102404:	d106      	bne.n	8102414 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	2200      	movs	r2, #0
 810240a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810240e:	6878      	ldr	r0, [r7, #4]
 8102410:	f7fe f864 	bl	81004dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8102414:	687b      	ldr	r3, [r7, #4]
 8102416:	2202      	movs	r2, #2
 8102418:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	681a      	ldr	r2, [r3, #0]
 8102422:	687b      	ldr	r3, [r7, #4]
 8102424:	681b      	ldr	r3, [r3, #0]
 8102426:	f022 0201 	bic.w	r2, r2, #1
 810242a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	681b      	ldr	r3, [r3, #0]
 8102430:	689b      	ldr	r3, [r3, #8]
 8102432:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8102436:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	699b      	ldr	r3, [r3, #24]
 810243c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102440:	d119      	bne.n	8102476 <HAL_SPI_Init+0x112>
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	685b      	ldr	r3, [r3, #4]
 8102446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810244a:	d103      	bne.n	8102454 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8102450:	2b00      	cmp	r3, #0
 8102452:	d008      	beq.n	8102466 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8102458:	2b00      	cmp	r3, #0
 810245a:	d10c      	bne.n	8102476 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8102460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102464:	d107      	bne.n	8102476 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	681a      	ldr	r2, [r3, #0]
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8102474:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	69da      	ldr	r2, [r3, #28]
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810247e:	431a      	orrs	r2, r3
 8102480:	68bb      	ldr	r3, [r7, #8]
 8102482:	431a      	orrs	r2, r3
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102488:	ea42 0103 	orr.w	r1, r2, r3
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	68da      	ldr	r2, [r3, #12]
 8102490:	687b      	ldr	r3, [r7, #4]
 8102492:	681b      	ldr	r3, [r3, #0]
 8102494:	430a      	orrs	r2, r1
 8102496:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810249c:	687b      	ldr	r3, [r7, #4]
 810249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024a0:	431a      	orrs	r2, r3
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81024a6:	431a      	orrs	r2, r3
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	699b      	ldr	r3, [r3, #24]
 81024ac:	431a      	orrs	r2, r3
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	691b      	ldr	r3, [r3, #16]
 81024b2:	431a      	orrs	r2, r3
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	695b      	ldr	r3, [r3, #20]
 81024b8:	431a      	orrs	r2, r3
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	6a1b      	ldr	r3, [r3, #32]
 81024be:	431a      	orrs	r2, r3
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	685b      	ldr	r3, [r3, #4]
 81024c4:	431a      	orrs	r2, r3
 81024c6:	687b      	ldr	r3, [r7, #4]
 81024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81024ca:	431a      	orrs	r2, r3
 81024cc:	687b      	ldr	r3, [r7, #4]
 81024ce:	689b      	ldr	r3, [r3, #8]
 81024d0:	431a      	orrs	r2, r3
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81024d6:	ea42 0103 	orr.w	r1, r2, r3
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	681b      	ldr	r3, [r3, #0]
 81024e2:	430a      	orrs	r2, r1
 81024e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	685b      	ldr	r3, [r3, #4]
 81024ea:	2b00      	cmp	r3, #0
 81024ec:	d113      	bne.n	8102516 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	689b      	ldr	r3, [r3, #8]
 81024f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8102500:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	681b      	ldr	r3, [r3, #0]
 8102506:	689b      	ldr	r3, [r3, #8]
 8102508:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8102514:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	681b      	ldr	r3, [r3, #0]
 8102520:	f022 0201 	bic.w	r2, r2, #1
 8102524:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	685b      	ldr	r3, [r3, #4]
 810252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810252e:	2b00      	cmp	r3, #0
 8102530:	d00a      	beq.n	8102548 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	681b      	ldr	r3, [r3, #0]
 8102536:	68db      	ldr	r3, [r3, #12]
 8102538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810253c:	687b      	ldr	r3, [r7, #4]
 810253e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	430a      	orrs	r2, r1
 8102546:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	2200      	movs	r2, #0
 810254c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	2201      	movs	r2, #1
 8102554:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8102558:	2300      	movs	r3, #0
}
 810255a:	4618      	mov	r0, r3
 810255c:	3710      	adds	r7, #16
 810255e:	46bd      	mov	sp, r7
 8102560:	bd80      	pop	{r7, pc}
 8102562:	bf00      	nop
 8102564:	40013000 	.word	0x40013000
 8102568:	40003800 	.word	0x40003800
 810256c:	40003c00 	.word	0x40003c00

08102570 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8102570:	b480      	push	{r7}
 8102572:	b085      	sub	sp, #20
 8102574:	af00      	add	r7, sp, #0
 8102576:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810257c:	095b      	lsrs	r3, r3, #5
 810257e:	3301      	adds	r3, #1
 8102580:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	68db      	ldr	r3, [r3, #12]
 8102586:	3301      	adds	r3, #1
 8102588:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810258a:	68bb      	ldr	r3, [r7, #8]
 810258c:	3307      	adds	r3, #7
 810258e:	08db      	lsrs	r3, r3, #3
 8102590:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8102592:	68bb      	ldr	r3, [r7, #8]
 8102594:	68fa      	ldr	r2, [r7, #12]
 8102596:	fb02 f303 	mul.w	r3, r2, r3
}
 810259a:	4618      	mov	r0, r3
 810259c:	3714      	adds	r7, #20
 810259e:	46bd      	mov	sp, r7
 81025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025a4:	4770      	bx	lr
	...

081025a8 <__libc_init_array>:
 81025a8:	b570      	push	{r4, r5, r6, lr}
 81025aa:	4d0d      	ldr	r5, [pc, #52]	; (81025e0 <__libc_init_array+0x38>)
 81025ac:	4c0d      	ldr	r4, [pc, #52]	; (81025e4 <__libc_init_array+0x3c>)
 81025ae:	1b64      	subs	r4, r4, r5
 81025b0:	10a4      	asrs	r4, r4, #2
 81025b2:	2600      	movs	r6, #0
 81025b4:	42a6      	cmp	r6, r4
 81025b6:	d109      	bne.n	81025cc <__libc_init_array+0x24>
 81025b8:	4d0b      	ldr	r5, [pc, #44]	; (81025e8 <__libc_init_array+0x40>)
 81025ba:	4c0c      	ldr	r4, [pc, #48]	; (81025ec <__libc_init_array+0x44>)
 81025bc:	f000 f820 	bl	8102600 <_init>
 81025c0:	1b64      	subs	r4, r4, r5
 81025c2:	10a4      	asrs	r4, r4, #2
 81025c4:	2600      	movs	r6, #0
 81025c6:	42a6      	cmp	r6, r4
 81025c8:	d105      	bne.n	81025d6 <__libc_init_array+0x2e>
 81025ca:	bd70      	pop	{r4, r5, r6, pc}
 81025cc:	f855 3b04 	ldr.w	r3, [r5], #4
 81025d0:	4798      	blx	r3
 81025d2:	3601      	adds	r6, #1
 81025d4:	e7ee      	b.n	81025b4 <__libc_init_array+0xc>
 81025d6:	f855 3b04 	ldr.w	r3, [r5], #4
 81025da:	4798      	blx	r3
 81025dc:	3601      	adds	r6, #1
 81025de:	e7f2      	b.n	81025c6 <__libc_init_array+0x1e>
 81025e0:	08102628 	.word	0x08102628
 81025e4:	08102628 	.word	0x08102628
 81025e8:	08102628 	.word	0x08102628
 81025ec:	0810262c 	.word	0x0810262c

081025f0 <memset>:
 81025f0:	4402      	add	r2, r0
 81025f2:	4603      	mov	r3, r0
 81025f4:	4293      	cmp	r3, r2
 81025f6:	d100      	bne.n	81025fa <memset+0xa>
 81025f8:	4770      	bx	lr
 81025fa:	f803 1b01 	strb.w	r1, [r3], #1
 81025fe:	e7f9      	b.n	81025f4 <memset+0x4>

08102600 <_init>:
 8102600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102602:	bf00      	nop
 8102604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102606:	bc08      	pop	{r3}
 8102608:	469e      	mov	lr, r3
 810260a:	4770      	bx	lr

0810260c <_fini>:
 810260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810260e:	bf00      	nop
 8102610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102612:	bc08      	pop	{r3}
 8102614:	469e      	mov	lr, r3
 8102616:	4770      	bx	lr
