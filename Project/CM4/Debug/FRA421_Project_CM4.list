
FRA421_Project_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026d0  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08102968  08102968  00012968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08102978  08102978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810297c  0810297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08102980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  10000010  08102990  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100000ec  08102990  000200ec  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d480  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b50  00000000  00000000  0002d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000970  00000000  00000000  0002f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000008a8  00000000  00000000  0002f980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a56b  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b3b5  00000000  00000000  0006a793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001810d7  00000000  00000000  00075b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f6c1f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002548  00000000  00000000  001f6c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08102950 	.word	0x08102950

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08102950 	.word	0x08102950

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8100308:	b580      	push	{r7, lr}
 810030a:	b084      	sub	sp, #16
 810030c:	af00      	add	r7, sp, #0
 810030e:	4603      	mov	r3, r0
 8100310:	460a      	mov	r2, r1
 8100312:	71fb      	strb	r3, [r7, #7]
 8100314:	4613      	mov	r3, r2
 8100316:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8100318:	79fb      	ldrb	r3, [r7, #7]
 810031a:	005b      	lsls	r3, r3, #1
 810031c:	b2db      	uxtb	r3, r3
 810031e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8100322:	b2db      	uxtb	r3, r3
 8100324:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8100326:	2200      	movs	r2, #0
 8100328:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810032c:	480d      	ldr	r0, [pc, #52]	; (8100364 <Write_MFRC522+0x5c>)
 810032e:	f001 f907 	bl	8101540 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&MFRC522_PORT, &addr_bits, 1, 500);
 8100332:	f107 010f 	add.w	r1, r7, #15
 8100336:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 810033a:	2201      	movs	r2, #1
 810033c:	480a      	ldr	r0, [pc, #40]	; (8100368 <Write_MFRC522+0x60>)
 810033e:	f001 fc4d 	bl	8101bdc <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&MFRC522_PORT, &val, 1, 500);
 8100342:	1db9      	adds	r1, r7, #6
 8100344:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100348:	2201      	movs	r2, #1
 810034a:	4807      	ldr	r0, [pc, #28]	; (8100368 <Write_MFRC522+0x60>)
 810034c:	f001 fc46 	bl	8101bdc <HAL_SPI_Transmit>

  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
//  volatile uint32_t ticks;
//  for(ticks=0; ticks < 1000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8100350:	2201      	movs	r2, #1
 8100352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100356:	4803      	ldr	r0, [pc, #12]	; (8100364 <Write_MFRC522+0x5c>)
 8100358:	f001 f8f2 	bl	8101540 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 810035c:	bf00      	nop
 810035e:	3710      	adds	r7, #16
 8100360:	46bd      	mov	sp, r7
 8100362:	bd80      	pop	{r7, pc}
 8100364:	58020c00 	.word	0x58020c00
 8100368:	1000002c 	.word	0x1000002c

0810036c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 810036c:	b580      	push	{r7, lr}
 810036e:	b084      	sub	sp, #16
 8100370:	af00      	add	r7, sp, #0
 8100372:	4603      	mov	r3, r0
 8100374:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8100376:	79fb      	ldrb	r3, [r7, #7]
 8100378:	005b      	lsls	r3, r3, #1
 810037a:	b25b      	sxtb	r3, r3
 810037c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8100380:	b25b      	sxtb	r3, r3
 8100382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8100386:	b25b      	sxtb	r3, r3
 8100388:	b2db      	uxtb	r3, r3
 810038a:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 810038c:	2200      	movs	r2, #0
 810038e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100392:	480f      	ldr	r0, [pc, #60]	; (81003d0 <Read_MFRC522+0x64>)
 8100394:	f001 f8d4 	bl	8101540 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
  HAL_SPI_Transmit(&MFRC522_PORT, &addr_bits, 1, 500);
 8100398:	f107 010e 	add.w	r1, r7, #14
 810039c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81003a0:	2201      	movs	r2, #1
 81003a2:	480c      	ldr	r0, [pc, #48]	; (81003d4 <Read_MFRC522+0x68>)
 81003a4:	f001 fc1a 	bl	8101bdc <HAL_SPI_Transmit>

  HAL_SPI_Receive(&MFRC522_PORT, &rx_bits, 1, 500);
 81003a8:	f107 010f 	add.w	r1, r7, #15
 81003ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81003b0:	2201      	movs	r2, #1
 81003b2:	4808      	ldr	r0, [pc, #32]	; (81003d4 <Read_MFRC522+0x68>)
 81003b4:	f001 fe00 	bl	8101fb8 <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
//   volatile uint32_t ticks;
//   for(ticks=0; ticks < 1000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 81003b8:	2201      	movs	r2, #1
 81003ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81003be:	4804      	ldr	r0, [pc, #16]	; (81003d0 <Read_MFRC522+0x64>)
 81003c0:	f001 f8be 	bl	8101540 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 81003c4:	7bfb      	ldrb	r3, [r7, #15]
}
 81003c6:	4618      	mov	r0, r3
 81003c8:	3710      	adds	r7, #16
 81003ca:	46bd      	mov	sp, r7
 81003cc:	bd80      	pop	{r7, pc}
 81003ce:	bf00      	nop
 81003d0:	58020c00 	.word	0x58020c00
 81003d4:	1000002c 	.word	0x1000002c

081003d8 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 81003d8:	b580      	push	{r7, lr}
 81003da:	b084      	sub	sp, #16
 81003dc:	af00      	add	r7, sp, #0
 81003de:	4603      	mov	r3, r0
 81003e0:	460a      	mov	r2, r1
 81003e2:	71fb      	strb	r3, [r7, #7]
 81003e4:	4613      	mov	r3, r2
 81003e6:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 81003e8:	79fb      	ldrb	r3, [r7, #7]
 81003ea:	4618      	mov	r0, r3
 81003ec:	f7ff ffbe 	bl	810036c <Read_MFRC522>
 81003f0:	4603      	mov	r3, r0
 81003f2:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 81003f4:	7bfa      	ldrb	r2, [r7, #15]
 81003f6:	79bb      	ldrb	r3, [r7, #6]
 81003f8:	4313      	orrs	r3, r2
 81003fa:	b2da      	uxtb	r2, r3
 81003fc:	79fb      	ldrb	r3, [r7, #7]
 81003fe:	4611      	mov	r1, r2
 8100400:	4618      	mov	r0, r3
 8100402:	f7ff ff81 	bl	8100308 <Write_MFRC522>
}
 8100406:	bf00      	nop
 8100408:	3710      	adds	r7, #16
 810040a:	46bd      	mov	sp, r7
 810040c:	bd80      	pop	{r7, pc}

0810040e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 810040e:	b580      	push	{r7, lr}
 8100410:	b084      	sub	sp, #16
 8100412:	af00      	add	r7, sp, #0
 8100414:	4603      	mov	r3, r0
 8100416:	460a      	mov	r2, r1
 8100418:	71fb      	strb	r3, [r7, #7]
 810041a:	4613      	mov	r3, r2
 810041c:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 810041e:	79fb      	ldrb	r3, [r7, #7]
 8100420:	4618      	mov	r0, r3
 8100422:	f7ff ffa3 	bl	810036c <Read_MFRC522>
 8100426:	4603      	mov	r3, r0
 8100428:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 810042a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 810042e:	43db      	mvns	r3, r3
 8100430:	b25a      	sxtb	r2, r3
 8100432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100436:	4013      	ands	r3, r2
 8100438:	b25b      	sxtb	r3, r3
 810043a:	b2da      	uxtb	r2, r3
 810043c:	79fb      	ldrb	r3, [r7, #7]
 810043e:	4611      	mov	r1, r2
 8100440:	4618      	mov	r0, r3
 8100442:	f7ff ff61 	bl	8100308 <Write_MFRC522>
}
 8100446:	bf00      	nop
 8100448:	3710      	adds	r7, #16
 810044a:	46bd      	mov	sp, r7
 810044c:	bd80      	pop	{r7, pc}

0810044e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 810044e:	b580      	push	{r7, lr}
 8100450:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8100452:	2103      	movs	r1, #3
 8100454:	2014      	movs	r0, #20
 8100456:	f7ff ffbf 	bl	81003d8 <SetBitMask>
}
 810045a:	bf00      	nop
 810045c:	bd80      	pop	{r7, pc}

0810045e <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 810045e:	b580      	push	{r7, lr}
 8100460:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8100462:	210f      	movs	r1, #15
 8100464:	2001      	movs	r0, #1
 8100466:	f7ff ff4f 	bl	8100308 <Write_MFRC522>
}
 810046a:	bf00      	nop
 810046c:	bd80      	pop	{r7, pc}
	...

08100470 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8100470:	b580      	push	{r7, lr}
 8100472:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_RESET);
 8100474:	2200      	movs	r2, #0
 8100476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810047a:	4826      	ldr	r0, [pc, #152]	; (8100514 <MFRC522_Init+0xa4>)
 810047c:	f001 f860 	bl	8101540 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 8100480:	f7ff ffed 	bl	810045e <MFRC522_Reset>
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
 8100484:	2201      	movs	r2, #1
 8100486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810048a:	4822      	ldr	r0, [pc, #136]	; (8100514 <MFRC522_Init+0xa4>)
 810048c:	f001 f858 	bl	8101540 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_RESET);
 8100490:	2200      	movs	r2, #0
 8100492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8100496:	481f      	ldr	r0, [pc, #124]	; (8100514 <MFRC522_Init+0xa4>)
 8100498:	f001 f852 	bl	8101540 <HAL_GPIO_WritePin>
  Write_MFRC522(CommIEnReg, 0x7F);
 810049c:	217f      	movs	r1, #127	; 0x7f
 810049e:	2002      	movs	r0, #2
 81004a0:	f7ff ff32 	bl	8100308 <Write_MFRC522>
//  Write_MFRC522(DivlEnReg, 0x14);
  Write_MFRC522(DivlEnReg, 0x00);
 81004a4:	2100      	movs	r1, #0
 81004a6:	2003      	movs	r0, #3
 81004a8:	f7ff ff2e 	bl	8100308 <Write_MFRC522>
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
 81004ac:	2201      	movs	r2, #1
 81004ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81004b2:	4818      	ldr	r0, [pc, #96]	; (8100514 <MFRC522_Init+0xa4>)
 81004b4:	f001 f844 	bl	8101540 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_RESET);
 81004b8:	2200      	movs	r2, #0
 81004ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81004be:	4815      	ldr	r0, [pc, #84]	; (8100514 <MFRC522_Init+0xa4>)
 81004c0:	f001 f83e 	bl	8101540 <HAL_GPIO_WritePin>
  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 81004c4:	2180      	movs	r1, #128	; 0x80
 81004c6:	202a      	movs	r0, #42	; 0x2a
 81004c8:	f7ff ff1e 	bl	8100308 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 81004cc:	21a9      	movs	r1, #169	; 0xa9
 81004ce:	202b      	movs	r0, #43	; 0x2b
 81004d0:	f7ff ff1a 	bl	8100308 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 81004d4:	2103      	movs	r1, #3
 81004d6:	202d      	movs	r0, #45	; 0x2d
 81004d8:	f7ff ff16 	bl	8100308 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 81004dc:	21e8      	movs	r1, #232	; 0xe8
 81004de:	202c      	movs	r0, #44	; 0x2c
 81004e0:	f7ff ff12 	bl	8100308 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 81004e4:	2140      	movs	r1, #64	; 0x40
 81004e6:	2015      	movs	r0, #21
 81004e8:	f7ff ff0e 	bl	8100308 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 81004ec:	213d      	movs	r1, #61	; 0x3d
 81004ee:	2011      	movs	r0, #17
 81004f0:	f7ff ff0a 	bl	8100308 <Write_MFRC522>
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
 81004f4:	2201      	movs	r2, #1
 81004f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81004fa:	4806      	ldr	r0, [pc, #24]	; (8100514 <MFRC522_Init+0xa4>)
 81004fc:	f001 f820 	bl	8101540 <HAL_GPIO_WritePin>
//   Write_MFRC522(CommIEnReg, 0xFF);
//   Write_MFRC522(DivlEnReg, 0xFF);


  // turn antenna on
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_RESET);
 8100500:	2200      	movs	r2, #0
 8100502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8100506:	4803      	ldr	r0, [pc, #12]	; (8100514 <MFRC522_Init+0xa4>)
 8100508:	f001 f81a 	bl	8101540 <HAL_GPIO_WritePin>
  AntennaOn();
 810050c:	f7ff ff9f 	bl	810044e <AntennaOn>
//  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
}
 8100510:	bf00      	nop
 8100512:	bd80      	pop	{r7, pc}
 8100514:	58021800 	.word	0x58021800

08100518 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8100518:	b580      	push	{r7, lr}
 810051a:	b086      	sub	sp, #24
 810051c:	af02      	add	r7, sp, #8
 810051e:	4603      	mov	r3, r0
 8100520:	6039      	str	r1, [r7, #0]
 8100522:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8100524:	2107      	movs	r1, #7
 8100526:	200d      	movs	r0, #13
 8100528:	f7ff feee 	bl	8100308 <Write_MFRC522>

  TagType[0] = reqMode;
 810052c:	683b      	ldr	r3, [r7, #0]
 810052e:	79fa      	ldrb	r2, [r7, #7]
 8100530:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8100532:	f107 0308 	add.w	r3, r7, #8
 8100536:	9300      	str	r3, [sp, #0]
 8100538:	683b      	ldr	r3, [r7, #0]
 810053a:	2201      	movs	r2, #1
 810053c:	6839      	ldr	r1, [r7, #0]
 810053e:	200c      	movs	r0, #12
 8100540:	f000 f80f 	bl	8100562 <MFRC522_ToCard>
 8100544:	4603      	mov	r3, r0
 8100546:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8100548:	7bfb      	ldrb	r3, [r7, #15]
 810054a:	2b00      	cmp	r3, #0
 810054c:	d102      	bne.n	8100554 <MFRC522_Request+0x3c>
 810054e:	68bb      	ldr	r3, [r7, #8]
 8100550:	2b10      	cmp	r3, #16
 8100552:	d001      	beq.n	8100558 <MFRC522_Request+0x40>
    status = MI_ERR;
 8100554:	2302      	movs	r3, #2
 8100556:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8100558:	7bfb      	ldrb	r3, [r7, #15]
}
 810055a:	4618      	mov	r0, r3
 810055c:	3710      	adds	r7, #16
 810055e:	46bd      	mov	sp, r7
 8100560:	bd80      	pop	{r7, pc}

08100562 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8100562:	b590      	push	{r4, r7, lr}
 8100564:	b089      	sub	sp, #36	; 0x24
 8100566:	af00      	add	r7, sp, #0
 8100568:	60b9      	str	r1, [r7, #8]
 810056a:	607b      	str	r3, [r7, #4]
 810056c:	4603      	mov	r3, r0
 810056e:	73fb      	strb	r3, [r7, #15]
 8100570:	4613      	mov	r3, r2
 8100572:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 8100574:	2302      	movs	r3, #2
 8100576:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8100578:	2300      	movs	r3, #0
 810057a:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 810057c:	2300      	movs	r3, #0
 810057e:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 8100580:	7bfb      	ldrb	r3, [r7, #15]
 8100582:	2b0c      	cmp	r3, #12
 8100584:	d006      	beq.n	8100594 <MFRC522_ToCard+0x32>
 8100586:	2b0e      	cmp	r3, #14
 8100588:	d109      	bne.n	810059e <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 810058a:	2312      	movs	r3, #18
 810058c:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 810058e:	2310      	movs	r3, #16
 8100590:	777b      	strb	r3, [r7, #29]
        break;
 8100592:	e005      	b.n	81005a0 <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8100594:	2377      	movs	r3, #119	; 0x77
 8100596:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8100598:	2330      	movs	r3, #48	; 0x30
 810059a:	777b      	strb	r3, [r7, #29]
        break;
 810059c:	e000      	b.n	81005a0 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 810059e:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 81005a0:	7fbb      	ldrb	r3, [r7, #30]
 81005a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81005a6:	b2db      	uxtb	r3, r3
 81005a8:	4619      	mov	r1, r3
 81005aa:	2002      	movs	r0, #2
 81005ac:	f7ff feac 	bl	8100308 <Write_MFRC522>
//  Write_MFRC522(CommIEnReg, 0x7F); //Edit Some

  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 81005b0:	2180      	movs	r1, #128	; 0x80
 81005b2:	2004      	movs	r0, #4
 81005b4:	f7ff ff2b 	bl	810040e <ClearBitMask>

  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 81005b8:	2180      	movs	r1, #128	; 0x80
 81005ba:	200a      	movs	r0, #10
 81005bc:	f7ff ff0c 	bl	81003d8 <SetBitMask>


  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 81005c0:	2100      	movs	r1, #0
 81005c2:	2001      	movs	r0, #1
 81005c4:	f7ff fea0 	bl	8100308 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 81005c8:	2300      	movs	r3, #0
 81005ca:	61bb      	str	r3, [r7, #24]
 81005cc:	e00a      	b.n	81005e4 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 81005ce:	68ba      	ldr	r2, [r7, #8]
 81005d0:	69bb      	ldr	r3, [r7, #24]
 81005d2:	4413      	add	r3, r2
 81005d4:	781b      	ldrb	r3, [r3, #0]
 81005d6:	4619      	mov	r1, r3
 81005d8:	2009      	movs	r0, #9
 81005da:	f7ff fe95 	bl	8100308 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 81005de:	69bb      	ldr	r3, [r7, #24]
 81005e0:	3301      	adds	r3, #1
 81005e2:	61bb      	str	r3, [r7, #24]
 81005e4:	7bbb      	ldrb	r3, [r7, #14]
 81005e6:	69ba      	ldr	r2, [r7, #24]
 81005e8:	429a      	cmp	r2, r3
 81005ea:	d3f0      	bcc.n	81005ce <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 81005ec:	7bfb      	ldrb	r3, [r7, #15]
 81005ee:	4619      	mov	r1, r3
 81005f0:	2001      	movs	r0, #1
 81005f2:	f7ff fe89 	bl	8100308 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 81005f6:	7bfb      	ldrb	r3, [r7, #15]
 81005f8:	2b0c      	cmp	r3, #12
 81005fa:	d103      	bne.n	8100604 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 81005fc:	2180      	movs	r1, #128	; 0x80
 81005fe:	200d      	movs	r0, #13
 8100600:	f7ff feea 	bl	81003d8 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8100604:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8100608:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 810060a:	2004      	movs	r0, #4
 810060c:	f7ff feae 	bl	810036c <Read_MFRC522>
 8100610:	4603      	mov	r3, r0
 8100612:	773b      	strb	r3, [r7, #28]
    i--;
 8100614:	69bb      	ldr	r3, [r7, #24]
 8100616:	3b01      	subs	r3, #1
 8100618:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 810061a:	69bb      	ldr	r3, [r7, #24]
 810061c:	2b00      	cmp	r3, #0
 810061e:	d00a      	beq.n	8100636 <MFRC522_ToCard+0xd4>
 8100620:	7f3b      	ldrb	r3, [r7, #28]
 8100622:	f003 0301 	and.w	r3, r3, #1
 8100626:	2b00      	cmp	r3, #0
 8100628:	d105      	bne.n	8100636 <MFRC522_ToCard+0xd4>
 810062a:	7f3a      	ldrb	r2, [r7, #28]
 810062c:	7f7b      	ldrb	r3, [r7, #29]
 810062e:	4013      	ands	r3, r2
 8100630:	b2db      	uxtb	r3, r3
 8100632:	2b00      	cmp	r3, #0
 8100634:	d0e9      	beq.n	810060a <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8100636:	2180      	movs	r1, #128	; 0x80
 8100638:	200d      	movs	r0, #13
 810063a:	f7ff fee8 	bl	810040e <ClearBitMask>

  if (i != 0)
 810063e:	69bb      	ldr	r3, [r7, #24]
 8100640:	2b00      	cmp	r3, #0
 8100642:	d052      	beq.n	81006ea <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8100644:	2006      	movs	r0, #6
 8100646:	f7ff fe91 	bl	810036c <Read_MFRC522>
 810064a:	4603      	mov	r3, r0
 810064c:	f003 031b 	and.w	r3, r3, #27
 8100650:	2b00      	cmp	r3, #0
 8100652:	d148      	bne.n	81006e6 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 8100654:	2300      	movs	r3, #0
 8100656:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8100658:	7f3a      	ldrb	r2, [r7, #28]
 810065a:	7fbb      	ldrb	r3, [r7, #30]
 810065c:	4013      	ands	r3, r2
 810065e:	b2db      	uxtb	r3, r3
 8100660:	f003 0301 	and.w	r3, r3, #1
 8100664:	2b00      	cmp	r3, #0
 8100666:	d001      	beq.n	810066c <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8100668:	2301      	movs	r3, #1
 810066a:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 810066c:	7bfb      	ldrb	r3, [r7, #15]
 810066e:	2b0c      	cmp	r3, #12
 8100670:	d13b      	bne.n	81006ea <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8100672:	200a      	movs	r0, #10
 8100674:	f7ff fe7a 	bl	810036c <Read_MFRC522>
 8100678:	4603      	mov	r3, r0
 810067a:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 810067c:	200c      	movs	r0, #12
 810067e:	f7ff fe75 	bl	810036c <Read_MFRC522>
 8100682:	4603      	mov	r3, r0
 8100684:	f003 0307 	and.w	r3, r3, #7
 8100688:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 810068a:	7dfb      	ldrb	r3, [r7, #23]
 810068c:	2b00      	cmp	r3, #0
 810068e:	d008      	beq.n	81006a2 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8100690:	7f3b      	ldrb	r3, [r7, #28]
 8100692:	3b01      	subs	r3, #1
 8100694:	00da      	lsls	r2, r3, #3
 8100696:	7dfb      	ldrb	r3, [r7, #23]
 8100698:	4413      	add	r3, r2
 810069a:	461a      	mov	r2, r3
 810069c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810069e:	601a      	str	r2, [r3, #0]
 81006a0:	e004      	b.n	81006ac <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 81006a2:	7f3b      	ldrb	r3, [r7, #28]
 81006a4:	00db      	lsls	r3, r3, #3
 81006a6:	461a      	mov	r2, r3
 81006a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81006aa:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 81006ac:	7f3b      	ldrb	r3, [r7, #28]
 81006ae:	2b00      	cmp	r3, #0
 81006b0:	d101      	bne.n	81006b6 <MFRC522_ToCard+0x154>
        {
          n = 1;
 81006b2:	2301      	movs	r3, #1
 81006b4:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 81006b6:	7f3b      	ldrb	r3, [r7, #28]
 81006b8:	2b10      	cmp	r3, #16
 81006ba:	d901      	bls.n	81006c0 <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 81006bc:	2310      	movs	r3, #16
 81006be:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 81006c0:	2300      	movs	r3, #0
 81006c2:	61bb      	str	r3, [r7, #24]
 81006c4:	e00a      	b.n	81006dc <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 81006c6:	687a      	ldr	r2, [r7, #4]
 81006c8:	69bb      	ldr	r3, [r7, #24]
 81006ca:	18d4      	adds	r4, r2, r3
 81006cc:	2009      	movs	r0, #9
 81006ce:	f7ff fe4d 	bl	810036c <Read_MFRC522>
 81006d2:	4603      	mov	r3, r0
 81006d4:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 81006d6:	69bb      	ldr	r3, [r7, #24]
 81006d8:	3301      	adds	r3, #1
 81006da:	61bb      	str	r3, [r7, #24]
 81006dc:	7f3b      	ldrb	r3, [r7, #28]
 81006de:	69ba      	ldr	r2, [r7, #24]
 81006e0:	429a      	cmp	r2, r3
 81006e2:	d3f0      	bcc.n	81006c6 <MFRC522_ToCard+0x164>
 81006e4:	e001      	b.n	81006ea <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 81006e6:	2302      	movs	r3, #2
 81006e8:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 81006ea:	7ffb      	ldrb	r3, [r7, #31]
}
 81006ec:	4618      	mov	r0, r3
 81006ee:	3724      	adds	r7, #36	; 0x24
 81006f0:	46bd      	mov	sp, r7
 81006f2:	bd90      	pop	{r4, r7, pc}

081006f4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 81006f4:	b580      	push	{r7, lr}
 81006f6:	b086      	sub	sp, #24
 81006f8:	af02      	add	r7, sp, #8
 81006fa:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 81006fc:	2300      	movs	r3, #0
 81006fe:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8100700:	2100      	movs	r1, #0
 8100702:	200d      	movs	r0, #13
 8100704:	f7ff fe00 	bl	8100308 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8100708:	687b      	ldr	r3, [r7, #4]
 810070a:	2293      	movs	r2, #147	; 0x93
 810070c:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 810070e:	687b      	ldr	r3, [r7, #4]
 8100710:	3301      	adds	r3, #1
 8100712:	2220      	movs	r2, #32
 8100714:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8100716:	f107 0308 	add.w	r3, r7, #8
 810071a:	9300      	str	r3, [sp, #0]
 810071c:	687b      	ldr	r3, [r7, #4]
 810071e:	2202      	movs	r2, #2
 8100720:	6879      	ldr	r1, [r7, #4]
 8100722:	200c      	movs	r0, #12
 8100724:	f7ff ff1d 	bl	8100562 <MFRC522_ToCard>
 8100728:	4603      	mov	r3, r0
 810072a:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 810072c:	7bfb      	ldrb	r3, [r7, #15]
 810072e:	2b00      	cmp	r3, #0
 8100730:	d118      	bne.n	8100764 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8100732:	2300      	movs	r3, #0
 8100734:	73bb      	strb	r3, [r7, #14]
 8100736:	e009      	b.n	810074c <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 8100738:	7bbb      	ldrb	r3, [r7, #14]
 810073a:	687a      	ldr	r2, [r7, #4]
 810073c:	4413      	add	r3, r2
 810073e:	781a      	ldrb	r2, [r3, #0]
 8100740:	7b7b      	ldrb	r3, [r7, #13]
 8100742:	4053      	eors	r3, r2
 8100744:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 8100746:	7bbb      	ldrb	r3, [r7, #14]
 8100748:	3301      	adds	r3, #1
 810074a:	73bb      	strb	r3, [r7, #14]
 810074c:	7bbb      	ldrb	r3, [r7, #14]
 810074e:	2b03      	cmp	r3, #3
 8100750:	d9f2      	bls.n	8100738 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8100752:	7bbb      	ldrb	r3, [r7, #14]
 8100754:	687a      	ldr	r2, [r7, #4]
 8100756:	4413      	add	r3, r2
 8100758:	781b      	ldrb	r3, [r3, #0]
 810075a:	7b7a      	ldrb	r2, [r7, #13]
 810075c:	429a      	cmp	r2, r3
 810075e:	d001      	beq.n	8100764 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 8100760:	2302      	movs	r3, #2
 8100762:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8100764:	7bfb      	ldrb	r3, [r7, #15]
}
 8100766:	4618      	mov	r0, r3
 8100768:	3710      	adds	r7, #16
 810076a:	46bd      	mov	sp, r7
 810076c:	bd80      	pop	{r7, pc}
	...

08100770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100770:	b580      	push	{r7, lr}
 8100772:	b082      	sub	sp, #8
 8100774:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100776:	4b90      	ldr	r3, [pc, #576]	; (81009b8 <main+0x248>)
 8100778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810077c:	4a8e      	ldr	r2, [pc, #568]	; (81009b8 <main+0x248>)
 810077e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100786:	4b8c      	ldr	r3, [pc, #560]	; (81009b8 <main+0x248>)
 8100788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810078c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100790:	603b      	str	r3, [r7, #0]
 8100792:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100794:	2001      	movs	r0, #1
 8100796:	f000 ff07 	bl	81015a8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810079a:	f000 ff91 	bl	81016c0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810079e:	2201      	movs	r2, #1
 81007a0:	2102      	movs	r1, #2
 81007a2:	2000      	movs	r0, #0
 81007a4:	f000 ff12 	bl	81015cc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81007a8:	4b84      	ldr	r3, [pc, #528]	; (81009bc <main+0x24c>)
 81007aa:	681b      	ldr	r3, [r3, #0]
 81007ac:	091b      	lsrs	r3, r3, #4
 81007ae:	f003 030f 	and.w	r3, r3, #15
 81007b2:	2b07      	cmp	r3, #7
 81007b4:	d108      	bne.n	81007c8 <main+0x58>
 81007b6:	4b82      	ldr	r3, [pc, #520]	; (81009c0 <main+0x250>)
 81007b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81007bc:	4a80      	ldr	r2, [pc, #512]	; (81009c0 <main+0x250>)
 81007be:	f043 0301 	orr.w	r3, r3, #1
 81007c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81007c6:	e007      	b.n	81007d8 <main+0x68>
 81007c8:	4b7d      	ldr	r3, [pc, #500]	; (81009c0 <main+0x250>)
 81007ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81007ce:	4a7c      	ldr	r2, [pc, #496]	; (81009c0 <main+0x250>)
 81007d0:	f043 0301 	orr.w	r3, r3, #1
 81007d4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81007d8:	f000 fb1a 	bl	8100e10 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81007dc:	f000 f968 	bl	8100ab0 <MX_GPIO_Init>
  MX_SPI1_Init();
 81007e0:	f000 f910 	bl	8100a04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Reset RC522
   HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 81007e4:	2201      	movs	r2, #1
 81007e6:	2120      	movs	r1, #32
 81007e8:	4876      	ldr	r0, [pc, #472]	; (81009c4 <main+0x254>)
 81007ea:	f000 fea9 	bl	8101540 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
 81007ee:	2201      	movs	r2, #1
 81007f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81007f4:	4874      	ldr	r0, [pc, #464]	; (81009c8 <main+0x258>)
 81007f6:	f000 fea3 	bl	8101540 <HAL_GPIO_WritePin>
   HAL_Delay(100);
 81007fa:	2064      	movs	r0, #100	; 0x64
 81007fc:	f000 fbbc 	bl	8100f78 <HAL_Delay>
   MFRC522_Init();
 8100800:	f7ff fe36 	bl	8100470 <MFRC522_Init>

   HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
 8100804:	2201      	movs	r2, #1
 8100806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810080a:	486f      	ldr	r0, [pc, #444]	; (81009c8 <main+0x258>)
 810080c:	f000 fe98 	bl	8101540 <HAL_GPIO_WritePin>
   status = Read_MFRC522(VersionReg);
 8100810:	2037      	movs	r0, #55	; 0x37
 8100812:	f7ff fdab 	bl	810036c <Read_MFRC522>
 8100816:	4603      	mov	r3, r0
 8100818:	461a      	mov	r2, r3
 810081a:	4b6c      	ldr	r3, [pc, #432]	; (81009cc <main+0x25c>)
 810081c:	701a      	strb	r2, [r3, #0]

   testFlag = 1;
 810081e:	4b6c      	ldr	r3, [pc, #432]	; (81009d0 <main+0x260>)
 8100820:	2201      	movs	r2, #1
 8100822:	701a      	strb	r2, [r3, #0]
   testStatus= 99;
 8100824:	4b6b      	ldr	r3, [pc, #428]	; (81009d4 <main+0x264>)
 8100826:	2263      	movs	r2, #99	; 0x63
 8100828:	701a      	strb	r2, [r3, #0]
   testCount=0;
 810082a:	4b6b      	ldr	r3, [pc, #428]	; (81009d8 <main+0x268>)
 810082c:	2200      	movs	r2, #0
 810082e:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      if(HAL_GetTick() - timemsM4_LED > 1000)
 8100830:	f000 fb96 	bl	8100f60 <HAL_GetTick>
 8100834:	4602      	mov	r2, r0
 8100836:	4b69      	ldr	r3, [pc, #420]	; (81009dc <main+0x26c>)
 8100838:	681b      	ldr	r3, [r3, #0]
 810083a:	1ad3      	subs	r3, r2, r3
 810083c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8100840:	d908      	bls.n	8100854 <main+0xe4>
      {
    	  timemsM4_LED = HAL_GetTick();
 8100842:	f000 fb8d 	bl	8100f60 <HAL_GetTick>
 8100846:	4603      	mov	r3, r0
 8100848:	4a64      	ldr	r2, [pc, #400]	; (81009dc <main+0x26c>)
 810084a:	6013      	str	r3, [r2, #0]
          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 810084c:	2102      	movs	r1, #2
 810084e:	4864      	ldr	r0, [pc, #400]	; (81009e0 <main+0x270>)
 8100850:	f000 fe8f 	bl	8101572 <HAL_GPIO_TogglePin>
      }

   	  //////
      if(HAL_GetTick() - timemsM4 > 100)
 8100854:	f000 fb84 	bl	8100f60 <HAL_GetTick>
 8100858:	4602      	mov	r2, r0
 810085a:	4b62      	ldr	r3, [pc, #392]	; (81009e4 <main+0x274>)
 810085c:	681b      	ldr	r3, [r3, #0]
 810085e:	1ad3      	subs	r3, r2, r3
 8100860:	2b64      	cmp	r3, #100	; 0x64
 8100862:	d9e5      	bls.n	8100830 <main+0xc0>
      {
    	  timemsM4 = HAL_GetTick();
 8100864:	f000 fb7c 	bl	8100f60 <HAL_GetTick>
 8100868:	4603      	mov	r3, r0
 810086a:	4a5e      	ldr	r2, [pc, #376]	; (81009e4 <main+0x274>)
 810086c:	6013      	str	r3, [r2, #0]
      	 testvar = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 810086e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8100872:	485d      	ldr	r0, [pc, #372]	; (81009e8 <main+0x278>)
 8100874:	f000 fe4c 	bl	8101510 <HAL_GPIO_ReadPin>
 8100878:	4603      	mov	r3, r0
 810087a:	461a      	mov	r2, r3
 810087c:	4b5b      	ldr	r3, [pc, #364]	; (81009ec <main+0x27c>)
 810087e:	701a      	strb	r2, [r3, #0]
      	 if(testvar == GPIO_PIN_SET && testFlag == 1)
 8100880:	4b5a      	ldr	r3, [pc, #360]	; (81009ec <main+0x27c>)
 8100882:	781b      	ldrb	r3, [r3, #0]
 8100884:	2b01      	cmp	r3, #1
 8100886:	d16f      	bne.n	8100968 <main+0x1f8>
 8100888:	4b51      	ldr	r3, [pc, #324]	; (81009d0 <main+0x260>)
 810088a:	781b      	ldrb	r3, [r3, #0]
 810088c:	2b01      	cmp	r3, #1
 810088e:	d16b      	bne.n	8100968 <main+0x1f8>
      	 {
      		testCount+=1;
 8100890:	4b51      	ldr	r3, [pc, #324]	; (81009d8 <main+0x268>)
 8100892:	681b      	ldr	r3, [r3, #0]
 8100894:	3301      	adds	r3, #1
 8100896:	4a50      	ldr	r2, [pc, #320]	; (81009d8 <main+0x268>)
 8100898:	6013      	str	r3, [r2, #0]
      		testStatus= 1;
 810089a:	4b4e      	ldr	r3, [pc, #312]	; (81009d4 <main+0x264>)
 810089c:	2201      	movs	r2, #1
 810089e:	701a      	strb	r2, [r3, #0]
      		testFlag = 0;
 81008a0:	4b4b      	ldr	r3, [pc, #300]	; (81009d0 <main+0x260>)
 81008a2:	2200      	movs	r2, #0
 81008a4:	701a      	strb	r2, [r3, #0]
      		 HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81008a6:	2200      	movs	r2, #0
 81008a8:	2101      	movs	r1, #1
 81008aa:	4846      	ldr	r0, [pc, #280]	; (81009c4 <main+0x254>)
 81008ac:	f000 fe48 	bl	8101540 <HAL_GPIO_WritePin>
       	  if(hspi1.State == HAL_SPI_STATE_READY)
 81008b0:	4b4f      	ldr	r3, [pc, #316]	; (81009f0 <main+0x280>)
 81008b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81008b6:	b2db      	uxtb	r3, r3
 81008b8:	2b01      	cmp	r3, #1
 81008ba:	d17a      	bne.n	81009b2 <main+0x242>
       	  {

       		  tsest+=1;
 81008bc:	4b4d      	ldr	r3, [pc, #308]	; (81009f4 <main+0x284>)
 81008be:	edd3 7a00 	vldr	s15, [r3]
 81008c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81008c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 81008ca:	4b4a      	ldr	r3, [pc, #296]	; (81009f4 <main+0x284>)
 81008cc:	edc3 7a00 	vstr	s15, [r3]
   //    		  test_bits = (((testDataM7<<1) & 0x7E));
   //    		  HAL_SPI_Transmit(&MFRC522_PORT, &test_bits, 1, 500);
   //    		  testDataM7 = 0x0F;
   //    		  HAL_SPI_Transmit(&MFRC522_PORT, &testDataM7, 1, 500);
   //    		  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
       		  for (int i = 0; i < 16; i++)
 81008d0:	2300      	movs	r3, #0
 81008d2:	607b      	str	r3, [r7, #4]
 81008d4:	e007      	b.n	81008e6 <main+0x176>
       		  {
       			  cardstr[i] = 0;
 81008d6:	4a48      	ldr	r2, [pc, #288]	; (81009f8 <main+0x288>)
 81008d8:	687b      	ldr	r3, [r7, #4]
 81008da:	4413      	add	r3, r2
 81008dc:	2200      	movs	r2, #0
 81008de:	701a      	strb	r2, [r3, #0]
       		  for (int i = 0; i < 16; i++)
 81008e0:	687b      	ldr	r3, [r7, #4]
 81008e2:	3301      	adds	r3, #1
 81008e4:	607b      	str	r3, [r7, #4]
 81008e6:	687b      	ldr	r3, [r7, #4]
 81008e8:	2b0f      	cmp	r3, #15
 81008ea:	ddf4      	ble.n	81008d6 <main+0x166>
       		  }
       		  status = 99;
 81008ec:	4b37      	ldr	r3, [pc, #220]	; (81009cc <main+0x25c>)
 81008ee:	2263      	movs	r2, #99	; 0x63
 81008f0:	701a      	strb	r2, [r3, #0]
       		  // Find cards
       		  status = MFRC522_Request(PICC_REQIDL, cardstr);
 81008f2:	4941      	ldr	r1, [pc, #260]	; (81009f8 <main+0x288>)
 81008f4:	2026      	movs	r0, #38	; 0x26
 81008f6:	f7ff fe0f 	bl	8100518 <MFRC522_Request>
 81008fa:	4603      	mov	r3, r0
 81008fc:	461a      	mov	r2, r3
 81008fe:	4b33      	ldr	r3, [pc, #204]	; (81009cc <main+0x25c>)
 8100900:	701a      	strb	r2, [r3, #0]
       		  if(status == MI_OK)
 8100902:	4b32      	ldr	r3, [pc, #200]	; (81009cc <main+0x25c>)
 8100904:	781b      	ldrb	r3, [r3, #0]
 8100906:	2b00      	cmp	r3, #0
 8100908:	d153      	bne.n	81009b2 <main+0x242>
       		  {
       			  result = 0;
 810090a:	4b3c      	ldr	r3, [pc, #240]	; (81009fc <main+0x28c>)
 810090c:	2200      	movs	r2, #0
 810090e:	801a      	strh	r2, [r3, #0]
       			  result++;
 8100910:	4b3a      	ldr	r3, [pc, #232]	; (81009fc <main+0x28c>)
 8100912:	881b      	ldrh	r3, [r3, #0]
 8100914:	3301      	adds	r3, #1
 8100916:	b29a      	uxth	r2, r3
 8100918:	4b38      	ldr	r3, [pc, #224]	; (81009fc <main+0x28c>)
 810091a:	801a      	strh	r2, [r3, #0]
       			  status = MFRC522_Anticoll(cardstr);
 810091c:	4836      	ldr	r0, [pc, #216]	; (81009f8 <main+0x288>)
 810091e:	f7ff fee9 	bl	81006f4 <MFRC522_Anticoll>
 8100922:	4603      	mov	r3, r0
 8100924:	461a      	mov	r2, r3
 8100926:	4b29      	ldr	r3, [pc, #164]	; (81009cc <main+0x25c>)
 8100928:	701a      	strb	r2, [r3, #0]
       			  if(status == MI_OK)
 810092a:	4b28      	ldr	r3, [pc, #160]	; (81009cc <main+0x25c>)
 810092c:	781b      	ldrb	r3, [r3, #0]
 810092e:	2b00      	cmp	r3, #0
 8100930:	d13f      	bne.n	81009b2 <main+0x242>
       			  {
       				  result++;
 8100932:	4b32      	ldr	r3, [pc, #200]	; (81009fc <main+0x28c>)
 8100934:	881b      	ldrh	r3, [r3, #0]
 8100936:	3301      	adds	r3, #1
 8100938:	b29a      	uxth	r2, r3
 810093a:	4b30      	ldr	r3, [pc, #192]	; (81009fc <main+0x28c>)
 810093c:	801a      	strh	r2, [r3, #0]
       				  UID[0] = cardstr[0];
 810093e:	4b2e      	ldr	r3, [pc, #184]	; (81009f8 <main+0x288>)
 8100940:	781a      	ldrb	r2, [r3, #0]
 8100942:	4b2f      	ldr	r3, [pc, #188]	; (8100a00 <main+0x290>)
 8100944:	701a      	strb	r2, [r3, #0]
       				  UID[1] = cardstr[1];
 8100946:	4b2c      	ldr	r3, [pc, #176]	; (81009f8 <main+0x288>)
 8100948:	785a      	ldrb	r2, [r3, #1]
 810094a:	4b2d      	ldr	r3, [pc, #180]	; (8100a00 <main+0x290>)
 810094c:	705a      	strb	r2, [r3, #1]
       				  UID[2] = cardstr[2];
 810094e:	4b2a      	ldr	r3, [pc, #168]	; (81009f8 <main+0x288>)
 8100950:	789a      	ldrb	r2, [r3, #2]
 8100952:	4b2b      	ldr	r3, [pc, #172]	; (8100a00 <main+0x290>)
 8100954:	709a      	strb	r2, [r3, #2]
       				  UID[3] = cardstr[3];
 8100956:	4b28      	ldr	r3, [pc, #160]	; (81009f8 <main+0x288>)
 8100958:	78da      	ldrb	r2, [r3, #3]
 810095a:	4b29      	ldr	r3, [pc, #164]	; (8100a00 <main+0x290>)
 810095c:	70da      	strb	r2, [r3, #3]
       				  UID[4] = cardstr[4];
 810095e:	4b26      	ldr	r3, [pc, #152]	; (81009f8 <main+0x288>)
 8100960:	791a      	ldrb	r2, [r3, #4]
 8100962:	4b27      	ldr	r3, [pc, #156]	; (8100a00 <main+0x290>)
 8100964:	711a      	strb	r2, [r3, #4]
       	  if(hspi1.State == HAL_SPI_STATE_READY)
 8100966:	e024      	b.n	81009b2 <main+0x242>
       			  }
       		  }
       	  }
      	 }
      	 else if (testvar == GPIO_PIN_RESET && testFlag == 0)
 8100968:	4b20      	ldr	r3, [pc, #128]	; (81009ec <main+0x27c>)
 810096a:	781b      	ldrb	r3, [r3, #0]
 810096c:	2b00      	cmp	r3, #0
 810096e:	d10f      	bne.n	8100990 <main+0x220>
 8100970:	4b17      	ldr	r3, [pc, #92]	; (81009d0 <main+0x260>)
 8100972:	781b      	ldrb	r3, [r3, #0]
 8100974:	2b00      	cmp	r3, #0
 8100976:	d10b      	bne.n	8100990 <main+0x220>
      	 {
      		testStatus=2;
 8100978:	4b16      	ldr	r3, [pc, #88]	; (81009d4 <main+0x264>)
 810097a:	2202      	movs	r2, #2
 810097c:	701a      	strb	r2, [r3, #0]
      		testFlag = 1;
 810097e:	4b14      	ldr	r3, [pc, #80]	; (81009d0 <main+0x260>)
 8100980:	2201      	movs	r2, #1
 8100982:	701a      	strb	r2, [r3, #0]
      		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8100984:	2201      	movs	r2, #1
 8100986:	2101      	movs	r1, #1
 8100988:	480e      	ldr	r0, [pc, #56]	; (81009c4 <main+0x254>)
 810098a:	f000 fdd9 	bl	8101540 <HAL_GPIO_WritePin>
 810098e:	e011      	b.n	81009b4 <main+0x244>
      	 }
      	 else if (testvar == GPIO_PIN_SET && testFlag == 0)
 8100990:	4b16      	ldr	r3, [pc, #88]	; (81009ec <main+0x27c>)
 8100992:	781b      	ldrb	r3, [r3, #0]
 8100994:	2b01      	cmp	r3, #1
 8100996:	f47f af4b 	bne.w	8100830 <main+0xc0>
 810099a:	4b0d      	ldr	r3, [pc, #52]	; (81009d0 <main+0x260>)
 810099c:	781b      	ldrb	r3, [r3, #0]
 810099e:	2b00      	cmp	r3, #0
 81009a0:	f47f af46 	bne.w	8100830 <main+0xc0>
      	 {
      		testStatus= 3;
 81009a4:	4b0b      	ldr	r3, [pc, #44]	; (81009d4 <main+0x264>)
 81009a6:	2203      	movs	r2, #3
 81009a8:	701a      	strb	r2, [r3, #0]
      		testFlag = 0;
 81009aa:	4b09      	ldr	r3, [pc, #36]	; (81009d0 <main+0x260>)
 81009ac:	2200      	movs	r2, #0
 81009ae:	701a      	strb	r2, [r3, #0]
 81009b0:	e73e      	b.n	8100830 <main+0xc0>
       	  if(hspi1.State == HAL_SPI_STATE_READY)
 81009b2:	bf00      	nop
      if(HAL_GetTick() - timemsM4_LED > 1000)
 81009b4:	e73c      	b.n	8100830 <main+0xc0>
 81009b6:	bf00      	nop
 81009b8:	58024400 	.word	0x58024400
 81009bc:	e000ed00 	.word	0xe000ed00
 81009c0:	58026400 	.word	0x58026400
 81009c4:	58020400 	.word	0x58020400
 81009c8:	58021800 	.word	0x58021800
 81009cc:	100000c8 	.word	0x100000c8
 81009d0:	100000b5 	.word	0x100000b5
 81009d4:	100000b6 	.word	0x100000b6
 81009d8:	100000b8 	.word	0x100000b8
 81009dc:	100000c0 	.word	0x100000c0
 81009e0:	58021000 	.word	0x58021000
 81009e4:	100000bc 	.word	0x100000bc
 81009e8:	58020800 	.word	0x58020800
 81009ec:	100000b4 	.word	0x100000b4
 81009f0:	1000002c 	.word	0x1000002c
 81009f4:	100000c4 	.word	0x100000c4
 81009f8:	100000cc 	.word	0x100000cc
 81009fc:	100000de 	.word	0x100000de
 8100a00:	100000e0 	.word	0x100000e0

08100a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8100a04:	b580      	push	{r7, lr}
 8100a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8100a08:	4b27      	ldr	r3, [pc, #156]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a0a:	4a28      	ldr	r2, [pc, #160]	; (8100aac <MX_SPI1_Init+0xa8>)
 8100a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8100a0e:	4b26      	ldr	r3, [pc, #152]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a10:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8100a16:	4b24      	ldr	r3, [pc, #144]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a18:	2200      	movs	r2, #0
 8100a1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8100a1c:	4b22      	ldr	r3, [pc, #136]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a1e:	2207      	movs	r2, #7
 8100a20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100a22:	4b21      	ldr	r3, [pc, #132]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a24:	2200      	movs	r2, #0
 8100a26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100a28:	4b1f      	ldr	r3, [pc, #124]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a2a:	2200      	movs	r2, #0
 8100a2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8100a2e:	4b1e      	ldr	r3, [pc, #120]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8100a34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8100a36:	4b1c      	ldr	r3, [pc, #112]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a38:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8100a3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100a3e:	4b1a      	ldr	r3, [pc, #104]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a40:	2200      	movs	r2, #0
 8100a42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8100a44:	4b18      	ldr	r3, [pc, #96]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a46:	2200      	movs	r2, #0
 8100a48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100a4a:	4b17      	ldr	r3, [pc, #92]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a4c:	2200      	movs	r2, #0
 8100a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8100a50:	4b15      	ldr	r3, [pc, #84]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a52:	2200      	movs	r2, #0
 8100a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100a56:	4b14      	ldr	r3, [pc, #80]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100a5c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100a5e:	4b12      	ldr	r3, [pc, #72]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a60:	2200      	movs	r2, #0
 8100a62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100a64:	4b10      	ldr	r3, [pc, #64]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a66:	2200      	movs	r2, #0
 8100a68:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100a6a:	4b0f      	ldr	r3, [pc, #60]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a6c:	2200      	movs	r2, #0
 8100a6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100a70:	4b0d      	ldr	r3, [pc, #52]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a72:	2200      	movs	r2, #0
 8100a74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100a76:	4b0c      	ldr	r3, [pc, #48]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a78:	2200      	movs	r2, #0
 8100a7a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100a7c:	4b0a      	ldr	r3, [pc, #40]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a7e:	2200      	movs	r2, #0
 8100a80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100a82:	4b09      	ldr	r3, [pc, #36]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a84:	2200      	movs	r2, #0
 8100a86:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100a88:	4b07      	ldr	r3, [pc, #28]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a8a:	2200      	movs	r2, #0
 8100a8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100a8e:	4b06      	ldr	r3, [pc, #24]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a90:	2200      	movs	r2, #0
 8100a92:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8100a94:	4804      	ldr	r0, [pc, #16]	; (8100aa8 <MX_SPI1_Init+0xa4>)
 8100a96:	f000 ff9b 	bl	81019d0 <HAL_SPI_Init>
 8100a9a:	4603      	mov	r3, r0
 8100a9c:	2b00      	cmp	r3, #0
 8100a9e:	d001      	beq.n	8100aa4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8100aa0:	f000 f8d8 	bl	8100c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8100aa4:	bf00      	nop
 8100aa6:	bd80      	pop	{r7, pc}
 8100aa8:	1000002c 	.word	0x1000002c
 8100aac:	40013000 	.word	0x40013000

08100ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100ab0:	b580      	push	{r7, lr}
 8100ab2:	b08c      	sub	sp, #48	; 0x30
 8100ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ab6:	f107 031c 	add.w	r3, r7, #28
 8100aba:	2200      	movs	r2, #0
 8100abc:	601a      	str	r2, [r3, #0]
 8100abe:	605a      	str	r2, [r3, #4]
 8100ac0:	609a      	str	r2, [r3, #8]
 8100ac2:	60da      	str	r2, [r3, #12]
 8100ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100ac6:	4b5d      	ldr	r3, [pc, #372]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100acc:	4a5b      	ldr	r2, [pc, #364]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100ace:	f043 0304 	orr.w	r3, r3, #4
 8100ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ad6:	4b59      	ldr	r3, [pc, #356]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100adc:	f003 0304 	and.w	r3, r3, #4
 8100ae0:	61bb      	str	r3, [r7, #24]
 8100ae2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100ae4:	4b55      	ldr	r3, [pc, #340]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100aea:	4a54      	ldr	r2, [pc, #336]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100aec:	f043 0301 	orr.w	r3, r3, #1
 8100af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100af4:	4b51      	ldr	r3, [pc, #324]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100afa:	f003 0301 	and.w	r3, r3, #1
 8100afe:	617b      	str	r3, [r7, #20]
 8100b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100b02:	4b4e      	ldr	r3, [pc, #312]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b08:	4a4c      	ldr	r2, [pc, #304]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b0a:	f043 0302 	orr.w	r3, r3, #2
 8100b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b12:	4b4a      	ldr	r3, [pc, #296]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b18:	f003 0302 	and.w	r3, r3, #2
 8100b1c:	613b      	str	r3, [r7, #16]
 8100b1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100b20:	4b46      	ldr	r3, [pc, #280]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b26:	4a45      	ldr	r2, [pc, #276]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b28:	f043 0308 	orr.w	r3, r3, #8
 8100b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b30:	4b42      	ldr	r3, [pc, #264]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b36:	f003 0308 	and.w	r3, r3, #8
 8100b3a:	60fb      	str	r3, [r7, #12]
 8100b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100b3e:	4b3f      	ldr	r3, [pc, #252]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b44:	4a3d      	ldr	r2, [pc, #244]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b4e:	4b3b      	ldr	r3, [pc, #236]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100b58:	60bb      	str	r3, [r7, #8]
 8100b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100b5c:	4b37      	ldr	r3, [pc, #220]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b62:	4a36      	ldr	r2, [pc, #216]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b64:	f043 0310 	orr.w	r3, r3, #16
 8100b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b6c:	4b33      	ldr	r3, [pc, #204]	; (8100c3c <MX_GPIO_Init+0x18c>)
 8100b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b72:	f003 0310 	and.w	r3, r3, #16
 8100b76:	607b      	str	r3, [r7, #4]
 8100b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|RC522_Rst_Pin, GPIO_PIN_RESET);
 8100b7a:	2200      	movs	r2, #0
 8100b7c:	2121      	movs	r1, #33	; 0x21
 8100b7e:	4830      	ldr	r0, [pc, #192]	; (8100c40 <MX_GPIO_Init+0x190>)
 8100b80:	f000 fcde 	bl	8101540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8100b84:	2200      	movs	r2, #0
 8100b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100b8a:	482e      	ldr	r0, [pc, #184]	; (8100c44 <MX_GPIO_Init+0x194>)
 8100b8c:	f000 fcd8 	bl	8101540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_RESET);
 8100b90:	2200      	movs	r2, #0
 8100b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8100b96:	482c      	ldr	r0, [pc, #176]	; (8100c48 <MX_GPIO_Init+0x198>)
 8100b98:	f000 fcd2 	bl	8101540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100b9c:	2200      	movs	r2, #0
 8100b9e:	2102      	movs	r1, #2
 8100ba0:	482a      	ldr	r0, [pc, #168]	; (8100c4c <MX_GPIO_Init+0x19c>)
 8100ba2:	f000 fccd 	bl	8101540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8100ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100bac:	2300      	movs	r3, #0
 8100bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bb0:	2300      	movs	r3, #0
 8100bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8100bb4:	f107 031c 	add.w	r3, r7, #28
 8100bb8:	4619      	mov	r1, r3
 8100bba:	4825      	ldr	r0, [pc, #148]	; (8100c50 <MX_GPIO_Init+0x1a0>)
 8100bbc:	f000 faf8 	bl	81011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin RC522_Rst_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|RC522_Rst_Pin;
 8100bc0:	2321      	movs	r3, #33	; 0x21
 8100bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100bc4:	2301      	movs	r3, #1
 8100bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bc8:	2300      	movs	r3, #0
 8100bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100bcc:	2300      	movs	r3, #0
 8100bce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100bd0:	f107 031c 	add.w	r3, r7, #28
 8100bd4:	4619      	mov	r1, r3
 8100bd6:	481a      	ldr	r0, [pc, #104]	; (8100c40 <MX_GPIO_Init+0x190>)
 8100bd8:	f000 faea 	bl	81011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC522_CS_Pin */
  GPIO_InitStruct.Pin = RC522_CS_Pin;
 8100bdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8100be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100be2:	2301      	movs	r3, #1
 8100be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100be6:	2300      	movs	r3, #0
 8100be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100bea:	2300      	movs	r3, #0
 8100bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RC522_CS_GPIO_Port, &GPIO_InitStruct);
 8100bee:	f107 031c 	add.w	r3, r7, #28
 8100bf2:	4619      	mov	r1, r3
 8100bf4:	4813      	ldr	r0, [pc, #76]	; (8100c44 <MX_GPIO_Init+0x194>)
 8100bf6:	f000 fadb 	bl	81011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Test_Sig_Pin */
  GPIO_InitStruct.Pin = Test_Sig_Pin;
 8100bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c00:	2301      	movs	r3, #1
 8100c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c04:	2300      	movs	r3, #0
 8100c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c08:	2300      	movs	r3, #0
 8100c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Test_Sig_GPIO_Port, &GPIO_InitStruct);
 8100c0c:	f107 031c 	add.w	r3, r7, #28
 8100c10:	4619      	mov	r1, r3
 8100c12:	480d      	ldr	r0, [pc, #52]	; (8100c48 <MX_GPIO_Init+0x198>)
 8100c14:	f000 facc 	bl	81011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8100c18:	2302      	movs	r3, #2
 8100c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c1c:	2301      	movs	r3, #1
 8100c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c20:	2300      	movs	r3, #0
 8100c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c24:	2300      	movs	r3, #0
 8100c26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100c28:	f107 031c 	add.w	r3, r7, #28
 8100c2c:	4619      	mov	r1, r3
 8100c2e:	4807      	ldr	r0, [pc, #28]	; (8100c4c <MX_GPIO_Init+0x19c>)
 8100c30:	f000 fabe 	bl	81011b0 <HAL_GPIO_Init>

}
 8100c34:	bf00      	nop
 8100c36:	3730      	adds	r7, #48	; 0x30
 8100c38:	46bd      	mov	sp, r7
 8100c3a:	bd80      	pop	{r7, pc}
 8100c3c:	58024400 	.word	0x58024400
 8100c40:	58020400 	.word	0x58020400
 8100c44:	58020c00 	.word	0x58020c00
 8100c48:	58021800 	.word	0x58021800
 8100c4c:	58021000 	.word	0x58021000
 8100c50:	58020800 	.word	0x58020800

08100c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100c54:	b480      	push	{r7}
 8100c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100c58:	b672      	cpsid	i
}
 8100c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100c5c:	e7fe      	b.n	8100c5c <Error_Handler+0x8>
	...

08100c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100c60:	b480      	push	{r7}
 8100c62:	b083      	sub	sp, #12
 8100c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100c66:	4b0a      	ldr	r3, [pc, #40]	; (8100c90 <HAL_MspInit+0x30>)
 8100c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100c6c:	4a08      	ldr	r2, [pc, #32]	; (8100c90 <HAL_MspInit+0x30>)
 8100c6e:	f043 0302 	orr.w	r3, r3, #2
 8100c72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100c76:	4b06      	ldr	r3, [pc, #24]	; (8100c90 <HAL_MspInit+0x30>)
 8100c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100c7c:	f003 0302 	and.w	r3, r3, #2
 8100c80:	607b      	str	r3, [r7, #4]
 8100c82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100c84:	bf00      	nop
 8100c86:	370c      	adds	r7, #12
 8100c88:	46bd      	mov	sp, r7
 8100c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c8e:	4770      	bx	lr
 8100c90:	58024400 	.word	0x58024400

08100c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8100c94:	b580      	push	{r7, lr}
 8100c96:	b08a      	sub	sp, #40	; 0x28
 8100c98:	af00      	add	r7, sp, #0
 8100c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100c9c:	f107 0314 	add.w	r3, r7, #20
 8100ca0:	2200      	movs	r2, #0
 8100ca2:	601a      	str	r2, [r3, #0]
 8100ca4:	605a      	str	r2, [r3, #4]
 8100ca6:	609a      	str	r2, [r3, #8]
 8100ca8:	60da      	str	r2, [r3, #12]
 8100caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8100cac:	687b      	ldr	r3, [r7, #4]
 8100cae:	681b      	ldr	r3, [r3, #0]
 8100cb0:	4a29      	ldr	r2, [pc, #164]	; (8100d58 <HAL_SPI_MspInit+0xc4>)
 8100cb2:	4293      	cmp	r3, r2
 8100cb4:	d14c      	bne.n	8100d50 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8100cb6:	4b29      	ldr	r3, [pc, #164]	; (8100d5c <HAL_SPI_MspInit+0xc8>)
 8100cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100cbc:	4a27      	ldr	r2, [pc, #156]	; (8100d5c <HAL_SPI_MspInit+0xc8>)
 8100cbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8100cc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100cc6:	4b25      	ldr	r3, [pc, #148]	; (8100d5c <HAL_SPI_MspInit+0xc8>)
 8100cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8100cd0:	613b      	str	r3, [r7, #16]
 8100cd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100cd4:	4b21      	ldr	r3, [pc, #132]	; (8100d5c <HAL_SPI_MspInit+0xc8>)
 8100cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cda:	4a20      	ldr	r2, [pc, #128]	; (8100d5c <HAL_SPI_MspInit+0xc8>)
 8100cdc:	f043 0301 	orr.w	r3, r3, #1
 8100ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ce4:	4b1d      	ldr	r3, [pc, #116]	; (8100d5c <HAL_SPI_MspInit+0xc8>)
 8100ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cea:	f003 0301 	and.w	r3, r3, #1
 8100cee:	60fb      	str	r3, [r7, #12]
 8100cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100cf2:	4b1a      	ldr	r3, [pc, #104]	; (8100d5c <HAL_SPI_MspInit+0xc8>)
 8100cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cf8:	4a18      	ldr	r2, [pc, #96]	; (8100d5c <HAL_SPI_MspInit+0xc8>)
 8100cfa:	f043 0308 	orr.w	r3, r3, #8
 8100cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d02:	4b16      	ldr	r3, [pc, #88]	; (8100d5c <HAL_SPI_MspInit+0xc8>)
 8100d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d08:	f003 0308 	and.w	r3, r3, #8
 8100d0c:	60bb      	str	r3, [r7, #8]
 8100d0e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8100d10:	2370      	movs	r3, #112	; 0x70
 8100d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d14:	2302      	movs	r3, #2
 8100d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d18:	2300      	movs	r3, #0
 8100d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d1c:	2300      	movs	r3, #0
 8100d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8100d20:	2305      	movs	r3, #5
 8100d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100d24:	f107 0314 	add.w	r3, r7, #20
 8100d28:	4619      	mov	r1, r3
 8100d2a:	480d      	ldr	r0, [pc, #52]	; (8100d60 <HAL_SPI_MspInit+0xcc>)
 8100d2c:	f000 fa40 	bl	81011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8100d30:	2380      	movs	r3, #128	; 0x80
 8100d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d34:	2302      	movs	r3, #2
 8100d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d38:	2300      	movs	r3, #0
 8100d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d3c:	2300      	movs	r3, #0
 8100d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8100d40:	2305      	movs	r3, #5
 8100d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100d44:	f107 0314 	add.w	r3, r7, #20
 8100d48:	4619      	mov	r1, r3
 8100d4a:	4806      	ldr	r0, [pc, #24]	; (8100d64 <HAL_SPI_MspInit+0xd0>)
 8100d4c:	f000 fa30 	bl	81011b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8100d50:	bf00      	nop
 8100d52:	3728      	adds	r7, #40	; 0x28
 8100d54:	46bd      	mov	sp, r7
 8100d56:	bd80      	pop	{r7, pc}
 8100d58:	40013000 	.word	0x40013000
 8100d5c:	58024400 	.word	0x58024400
 8100d60:	58020000 	.word	0x58020000
 8100d64:	58020c00 	.word	0x58020c00

08100d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100d68:	b480      	push	{r7}
 8100d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100d6c:	e7fe      	b.n	8100d6c <NMI_Handler+0x4>

08100d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100d6e:	b480      	push	{r7}
 8100d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100d72:	e7fe      	b.n	8100d72 <HardFault_Handler+0x4>

08100d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100d74:	b480      	push	{r7}
 8100d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100d78:	e7fe      	b.n	8100d78 <MemManage_Handler+0x4>

08100d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100d7a:	b480      	push	{r7}
 8100d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100d7e:	e7fe      	b.n	8100d7e <BusFault_Handler+0x4>

08100d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100d80:	b480      	push	{r7}
 8100d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100d84:	e7fe      	b.n	8100d84 <UsageFault_Handler+0x4>

08100d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100d86:	b480      	push	{r7}
 8100d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100d8a:	bf00      	nop
 8100d8c:	46bd      	mov	sp, r7
 8100d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d92:	4770      	bx	lr

08100d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100d94:	b480      	push	{r7}
 8100d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100d98:	bf00      	nop
 8100d9a:	46bd      	mov	sp, r7
 8100d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100da0:	4770      	bx	lr

08100da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100da2:	b480      	push	{r7}
 8100da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100da6:	bf00      	nop
 8100da8:	46bd      	mov	sp, r7
 8100daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dae:	4770      	bx	lr

08100db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100db0:	b580      	push	{r7, lr}
 8100db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100db4:	f000 f8c0 	bl	8100f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100db8:	bf00      	nop
 8100dba:	bd80      	pop	{r7, pc}

08100dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100df4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100dc0:	f7ff fa8a 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100dc4:	480c      	ldr	r0, [pc, #48]	; (8100df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100dc6:	490d      	ldr	r1, [pc, #52]	; (8100dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100dc8:	4a0d      	ldr	r2, [pc, #52]	; (8100e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100dcc:	e002      	b.n	8100dd4 <LoopCopyDataInit>

08100dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100dd2:	3304      	adds	r3, #4

08100dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100dd8:	d3f9      	bcc.n	8100dce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100dda:	4a0a      	ldr	r2, [pc, #40]	; (8100e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100ddc:	4c0a      	ldr	r4, [pc, #40]	; (8100e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100de0:	e001      	b.n	8100de6 <LoopFillZerobss>

08100de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100de4:	3204      	adds	r2, #4

08100de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100de8:	d3fb      	bcc.n	8100de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100dea:	f001 fd8d 	bl	8102908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100dee:	f7ff fcbf 	bl	8100770 <main>
  bx  lr
 8100df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100df4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100df8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100dfc:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100e00:	08102980 	.word	0x08102980
  ldr r2, =_sbss
 8100e04:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100e08:	100000ec 	.word	0x100000ec

08100e0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100e0c:	e7fe      	b.n	8100e0c <ADC3_IRQHandler>
	...

08100e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100e10:	b580      	push	{r7, lr}
 8100e12:	b082      	sub	sp, #8
 8100e14:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100e16:	4b28      	ldr	r3, [pc, #160]	; (8100eb8 <HAL_Init+0xa8>)
 8100e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e1c:	4a26      	ldr	r2, [pc, #152]	; (8100eb8 <HAL_Init+0xa8>)
 8100e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100e22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100e26:	4b24      	ldr	r3, [pc, #144]	; (8100eb8 <HAL_Init+0xa8>)
 8100e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100e30:	603b      	str	r3, [r7, #0]
 8100e32:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100e34:	4b21      	ldr	r3, [pc, #132]	; (8100ebc <HAL_Init+0xac>)
 8100e36:	681b      	ldr	r3, [r3, #0]
 8100e38:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100e3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100e40:	4a1e      	ldr	r2, [pc, #120]	; (8100ebc <HAL_Init+0xac>)
 8100e42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100e46:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100e48:	4b1c      	ldr	r3, [pc, #112]	; (8100ebc <HAL_Init+0xac>)
 8100e4a:	681b      	ldr	r3, [r3, #0]
 8100e4c:	4a1b      	ldr	r2, [pc, #108]	; (8100ebc <HAL_Init+0xac>)
 8100e4e:	f043 0301 	orr.w	r3, r3, #1
 8100e52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100e54:	2003      	movs	r0, #3
 8100e56:	f000 f965 	bl	8101124 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100e5a:	f000 fc3f 	bl	81016dc <HAL_RCC_GetSysClockFreq>
 8100e5e:	4602      	mov	r2, r0
 8100e60:	4b15      	ldr	r3, [pc, #84]	; (8100eb8 <HAL_Init+0xa8>)
 8100e62:	699b      	ldr	r3, [r3, #24]
 8100e64:	0a1b      	lsrs	r3, r3, #8
 8100e66:	f003 030f 	and.w	r3, r3, #15
 8100e6a:	4915      	ldr	r1, [pc, #84]	; (8100ec0 <HAL_Init+0xb0>)
 8100e6c:	5ccb      	ldrb	r3, [r1, r3]
 8100e6e:	f003 031f 	and.w	r3, r3, #31
 8100e72:	fa22 f303 	lsr.w	r3, r2, r3
 8100e76:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100e78:	4b0f      	ldr	r3, [pc, #60]	; (8100eb8 <HAL_Init+0xa8>)
 8100e7a:	699b      	ldr	r3, [r3, #24]
 8100e7c:	f003 030f 	and.w	r3, r3, #15
 8100e80:	4a0f      	ldr	r2, [pc, #60]	; (8100ec0 <HAL_Init+0xb0>)
 8100e82:	5cd3      	ldrb	r3, [r2, r3]
 8100e84:	f003 031f 	and.w	r3, r3, #31
 8100e88:	687a      	ldr	r2, [r7, #4]
 8100e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8100e8e:	4a0d      	ldr	r2, [pc, #52]	; (8100ec4 <HAL_Init+0xb4>)
 8100e90:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100e92:	4b0c      	ldr	r3, [pc, #48]	; (8100ec4 <HAL_Init+0xb4>)
 8100e94:	681b      	ldr	r3, [r3, #0]
 8100e96:	4a0c      	ldr	r2, [pc, #48]	; (8100ec8 <HAL_Init+0xb8>)
 8100e98:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100e9a:	2000      	movs	r0, #0
 8100e9c:	f000 f816 	bl	8100ecc <HAL_InitTick>
 8100ea0:	4603      	mov	r3, r0
 8100ea2:	2b00      	cmp	r3, #0
 8100ea4:	d001      	beq.n	8100eaa <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100ea6:	2301      	movs	r3, #1
 8100ea8:	e002      	b.n	8100eb0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100eaa:	f7ff fed9 	bl	8100c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100eae:	2300      	movs	r3, #0
}
 8100eb0:	4618      	mov	r0, r3
 8100eb2:	3708      	adds	r7, #8
 8100eb4:	46bd      	mov	sp, r7
 8100eb6:	bd80      	pop	{r7, pc}
 8100eb8:	58024400 	.word	0x58024400
 8100ebc:	40024400 	.word	0x40024400
 8100ec0:	08102968 	.word	0x08102968
 8100ec4:	10000004 	.word	0x10000004
 8100ec8:	10000000 	.word	0x10000000

08100ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100ecc:	b580      	push	{r7, lr}
 8100ece:	b082      	sub	sp, #8
 8100ed0:	af00      	add	r7, sp, #0
 8100ed2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100ed4:	4b15      	ldr	r3, [pc, #84]	; (8100f2c <HAL_InitTick+0x60>)
 8100ed6:	781b      	ldrb	r3, [r3, #0]
 8100ed8:	2b00      	cmp	r3, #0
 8100eda:	d101      	bne.n	8100ee0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100edc:	2301      	movs	r3, #1
 8100ede:	e021      	b.n	8100f24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100ee0:	4b13      	ldr	r3, [pc, #76]	; (8100f30 <HAL_InitTick+0x64>)
 8100ee2:	681a      	ldr	r2, [r3, #0]
 8100ee4:	4b11      	ldr	r3, [pc, #68]	; (8100f2c <HAL_InitTick+0x60>)
 8100ee6:	781b      	ldrb	r3, [r3, #0]
 8100ee8:	4619      	mov	r1, r3
 8100eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8100ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8100ef6:	4618      	mov	r0, r3
 8100ef8:	f000 f939 	bl	810116e <HAL_SYSTICK_Config>
 8100efc:	4603      	mov	r3, r0
 8100efe:	2b00      	cmp	r3, #0
 8100f00:	d001      	beq.n	8100f06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100f02:	2301      	movs	r3, #1
 8100f04:	e00e      	b.n	8100f24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100f06:	687b      	ldr	r3, [r7, #4]
 8100f08:	2b0f      	cmp	r3, #15
 8100f0a:	d80a      	bhi.n	8100f22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100f0c:	2200      	movs	r2, #0
 8100f0e:	6879      	ldr	r1, [r7, #4]
 8100f10:	f04f 30ff 	mov.w	r0, #4294967295
 8100f14:	f000 f911 	bl	810113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100f18:	4a06      	ldr	r2, [pc, #24]	; (8100f34 <HAL_InitTick+0x68>)
 8100f1a:	687b      	ldr	r3, [r7, #4]
 8100f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100f1e:	2300      	movs	r3, #0
 8100f20:	e000      	b.n	8100f24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100f22:	2301      	movs	r3, #1
}
 8100f24:	4618      	mov	r0, r3
 8100f26:	3708      	adds	r7, #8
 8100f28:	46bd      	mov	sp, r7
 8100f2a:	bd80      	pop	{r7, pc}
 8100f2c:	1000000c 	.word	0x1000000c
 8100f30:	10000000 	.word	0x10000000
 8100f34:	10000008 	.word	0x10000008

08100f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100f38:	b480      	push	{r7}
 8100f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100f3c:	4b06      	ldr	r3, [pc, #24]	; (8100f58 <HAL_IncTick+0x20>)
 8100f3e:	781b      	ldrb	r3, [r3, #0]
 8100f40:	461a      	mov	r2, r3
 8100f42:	4b06      	ldr	r3, [pc, #24]	; (8100f5c <HAL_IncTick+0x24>)
 8100f44:	681b      	ldr	r3, [r3, #0]
 8100f46:	4413      	add	r3, r2
 8100f48:	4a04      	ldr	r2, [pc, #16]	; (8100f5c <HAL_IncTick+0x24>)
 8100f4a:	6013      	str	r3, [r2, #0]
}
 8100f4c:	bf00      	nop
 8100f4e:	46bd      	mov	sp, r7
 8100f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f54:	4770      	bx	lr
 8100f56:	bf00      	nop
 8100f58:	1000000c 	.word	0x1000000c
 8100f5c:	100000e8 	.word	0x100000e8

08100f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100f60:	b480      	push	{r7}
 8100f62:	af00      	add	r7, sp, #0
  return uwTick;
 8100f64:	4b03      	ldr	r3, [pc, #12]	; (8100f74 <HAL_GetTick+0x14>)
 8100f66:	681b      	ldr	r3, [r3, #0]
}
 8100f68:	4618      	mov	r0, r3
 8100f6a:	46bd      	mov	sp, r7
 8100f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f70:	4770      	bx	lr
 8100f72:	bf00      	nop
 8100f74:	100000e8 	.word	0x100000e8

08100f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100f78:	b580      	push	{r7, lr}
 8100f7a:	b084      	sub	sp, #16
 8100f7c:	af00      	add	r7, sp, #0
 8100f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100f80:	f7ff ffee 	bl	8100f60 <HAL_GetTick>
 8100f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100f86:	687b      	ldr	r3, [r7, #4]
 8100f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100f8a:	68fb      	ldr	r3, [r7, #12]
 8100f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100f90:	d005      	beq.n	8100f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100f92:	4b0a      	ldr	r3, [pc, #40]	; (8100fbc <HAL_Delay+0x44>)
 8100f94:	781b      	ldrb	r3, [r3, #0]
 8100f96:	461a      	mov	r2, r3
 8100f98:	68fb      	ldr	r3, [r7, #12]
 8100f9a:	4413      	add	r3, r2
 8100f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100f9e:	bf00      	nop
 8100fa0:	f7ff ffde 	bl	8100f60 <HAL_GetTick>
 8100fa4:	4602      	mov	r2, r0
 8100fa6:	68bb      	ldr	r3, [r7, #8]
 8100fa8:	1ad3      	subs	r3, r2, r3
 8100faa:	68fa      	ldr	r2, [r7, #12]
 8100fac:	429a      	cmp	r2, r3
 8100fae:	d8f7      	bhi.n	8100fa0 <HAL_Delay+0x28>
  {
  }
}
 8100fb0:	bf00      	nop
 8100fb2:	bf00      	nop
 8100fb4:	3710      	adds	r7, #16
 8100fb6:	46bd      	mov	sp, r7
 8100fb8:	bd80      	pop	{r7, pc}
 8100fba:	bf00      	nop
 8100fbc:	1000000c 	.word	0x1000000c

08100fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100fc0:	b480      	push	{r7}
 8100fc2:	b085      	sub	sp, #20
 8100fc4:	af00      	add	r7, sp, #0
 8100fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100fc8:	687b      	ldr	r3, [r7, #4]
 8100fca:	f003 0307 	and.w	r3, r3, #7
 8100fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100fd0:	4b0c      	ldr	r3, [pc, #48]	; (8101004 <__NVIC_SetPriorityGrouping+0x44>)
 8100fd2:	68db      	ldr	r3, [r3, #12]
 8100fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100fd6:	68ba      	ldr	r2, [r7, #8]
 8100fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100fdc:	4013      	ands	r3, r2
 8100fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100fe0:	68fb      	ldr	r3, [r7, #12]
 8100fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100fe4:	68bb      	ldr	r3, [r7, #8]
 8100fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100ff2:	4a04      	ldr	r2, [pc, #16]	; (8101004 <__NVIC_SetPriorityGrouping+0x44>)
 8100ff4:	68bb      	ldr	r3, [r7, #8]
 8100ff6:	60d3      	str	r3, [r2, #12]
}
 8100ff8:	bf00      	nop
 8100ffa:	3714      	adds	r7, #20
 8100ffc:	46bd      	mov	sp, r7
 8100ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101002:	4770      	bx	lr
 8101004:	e000ed00 	.word	0xe000ed00

08101008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101008:	b480      	push	{r7}
 810100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810100c:	4b04      	ldr	r3, [pc, #16]	; (8101020 <__NVIC_GetPriorityGrouping+0x18>)
 810100e:	68db      	ldr	r3, [r3, #12]
 8101010:	0a1b      	lsrs	r3, r3, #8
 8101012:	f003 0307 	and.w	r3, r3, #7
}
 8101016:	4618      	mov	r0, r3
 8101018:	46bd      	mov	sp, r7
 810101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810101e:	4770      	bx	lr
 8101020:	e000ed00 	.word	0xe000ed00

08101024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101024:	b480      	push	{r7}
 8101026:	b083      	sub	sp, #12
 8101028:	af00      	add	r7, sp, #0
 810102a:	4603      	mov	r3, r0
 810102c:	6039      	str	r1, [r7, #0]
 810102e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101034:	2b00      	cmp	r3, #0
 8101036:	db0a      	blt.n	810104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101038:	683b      	ldr	r3, [r7, #0]
 810103a:	b2da      	uxtb	r2, r3
 810103c:	490c      	ldr	r1, [pc, #48]	; (8101070 <__NVIC_SetPriority+0x4c>)
 810103e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101042:	0112      	lsls	r2, r2, #4
 8101044:	b2d2      	uxtb	r2, r2
 8101046:	440b      	add	r3, r1
 8101048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810104c:	e00a      	b.n	8101064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810104e:	683b      	ldr	r3, [r7, #0]
 8101050:	b2da      	uxtb	r2, r3
 8101052:	4908      	ldr	r1, [pc, #32]	; (8101074 <__NVIC_SetPriority+0x50>)
 8101054:	88fb      	ldrh	r3, [r7, #6]
 8101056:	f003 030f 	and.w	r3, r3, #15
 810105a:	3b04      	subs	r3, #4
 810105c:	0112      	lsls	r2, r2, #4
 810105e:	b2d2      	uxtb	r2, r2
 8101060:	440b      	add	r3, r1
 8101062:	761a      	strb	r2, [r3, #24]
}
 8101064:	bf00      	nop
 8101066:	370c      	adds	r7, #12
 8101068:	46bd      	mov	sp, r7
 810106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810106e:	4770      	bx	lr
 8101070:	e000e100 	.word	0xe000e100
 8101074:	e000ed00 	.word	0xe000ed00

08101078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101078:	b480      	push	{r7}
 810107a:	b089      	sub	sp, #36	; 0x24
 810107c:	af00      	add	r7, sp, #0
 810107e:	60f8      	str	r0, [r7, #12]
 8101080:	60b9      	str	r1, [r7, #8]
 8101082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101084:	68fb      	ldr	r3, [r7, #12]
 8101086:	f003 0307 	and.w	r3, r3, #7
 810108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810108c:	69fb      	ldr	r3, [r7, #28]
 810108e:	f1c3 0307 	rsb	r3, r3, #7
 8101092:	2b04      	cmp	r3, #4
 8101094:	bf28      	it	cs
 8101096:	2304      	movcs	r3, #4
 8101098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810109a:	69fb      	ldr	r3, [r7, #28]
 810109c:	3304      	adds	r3, #4
 810109e:	2b06      	cmp	r3, #6
 81010a0:	d902      	bls.n	81010a8 <NVIC_EncodePriority+0x30>
 81010a2:	69fb      	ldr	r3, [r7, #28]
 81010a4:	3b03      	subs	r3, #3
 81010a6:	e000      	b.n	81010aa <NVIC_EncodePriority+0x32>
 81010a8:	2300      	movs	r3, #0
 81010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81010ac:	f04f 32ff 	mov.w	r2, #4294967295
 81010b0:	69bb      	ldr	r3, [r7, #24]
 81010b2:	fa02 f303 	lsl.w	r3, r2, r3
 81010b6:	43da      	mvns	r2, r3
 81010b8:	68bb      	ldr	r3, [r7, #8]
 81010ba:	401a      	ands	r2, r3
 81010bc:	697b      	ldr	r3, [r7, #20]
 81010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81010c0:	f04f 31ff 	mov.w	r1, #4294967295
 81010c4:	697b      	ldr	r3, [r7, #20]
 81010c6:	fa01 f303 	lsl.w	r3, r1, r3
 81010ca:	43d9      	mvns	r1, r3
 81010cc:	687b      	ldr	r3, [r7, #4]
 81010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81010d0:	4313      	orrs	r3, r2
         );
}
 81010d2:	4618      	mov	r0, r3
 81010d4:	3724      	adds	r7, #36	; 0x24
 81010d6:	46bd      	mov	sp, r7
 81010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010dc:	4770      	bx	lr
	...

081010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81010e0:	b580      	push	{r7, lr}
 81010e2:	b082      	sub	sp, #8
 81010e4:	af00      	add	r7, sp, #0
 81010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81010e8:	687b      	ldr	r3, [r7, #4]
 81010ea:	3b01      	subs	r3, #1
 81010ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81010f0:	d301      	bcc.n	81010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81010f2:	2301      	movs	r3, #1
 81010f4:	e00f      	b.n	8101116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81010f6:	4a0a      	ldr	r2, [pc, #40]	; (8101120 <SysTick_Config+0x40>)
 81010f8:	687b      	ldr	r3, [r7, #4]
 81010fa:	3b01      	subs	r3, #1
 81010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81010fe:	210f      	movs	r1, #15
 8101100:	f04f 30ff 	mov.w	r0, #4294967295
 8101104:	f7ff ff8e 	bl	8101024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101108:	4b05      	ldr	r3, [pc, #20]	; (8101120 <SysTick_Config+0x40>)
 810110a:	2200      	movs	r2, #0
 810110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810110e:	4b04      	ldr	r3, [pc, #16]	; (8101120 <SysTick_Config+0x40>)
 8101110:	2207      	movs	r2, #7
 8101112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101114:	2300      	movs	r3, #0
}
 8101116:	4618      	mov	r0, r3
 8101118:	3708      	adds	r7, #8
 810111a:	46bd      	mov	sp, r7
 810111c:	bd80      	pop	{r7, pc}
 810111e:	bf00      	nop
 8101120:	e000e010 	.word	0xe000e010

08101124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101124:	b580      	push	{r7, lr}
 8101126:	b082      	sub	sp, #8
 8101128:	af00      	add	r7, sp, #0
 810112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810112c:	6878      	ldr	r0, [r7, #4]
 810112e:	f7ff ff47 	bl	8100fc0 <__NVIC_SetPriorityGrouping>
}
 8101132:	bf00      	nop
 8101134:	3708      	adds	r7, #8
 8101136:	46bd      	mov	sp, r7
 8101138:	bd80      	pop	{r7, pc}

0810113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810113a:	b580      	push	{r7, lr}
 810113c:	b086      	sub	sp, #24
 810113e:	af00      	add	r7, sp, #0
 8101140:	4603      	mov	r3, r0
 8101142:	60b9      	str	r1, [r7, #8]
 8101144:	607a      	str	r2, [r7, #4]
 8101146:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101148:	f7ff ff5e 	bl	8101008 <__NVIC_GetPriorityGrouping>
 810114c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810114e:	687a      	ldr	r2, [r7, #4]
 8101150:	68b9      	ldr	r1, [r7, #8]
 8101152:	6978      	ldr	r0, [r7, #20]
 8101154:	f7ff ff90 	bl	8101078 <NVIC_EncodePriority>
 8101158:	4602      	mov	r2, r0
 810115a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810115e:	4611      	mov	r1, r2
 8101160:	4618      	mov	r0, r3
 8101162:	f7ff ff5f 	bl	8101024 <__NVIC_SetPriority>
}
 8101166:	bf00      	nop
 8101168:	3718      	adds	r7, #24
 810116a:	46bd      	mov	sp, r7
 810116c:	bd80      	pop	{r7, pc}

0810116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810116e:	b580      	push	{r7, lr}
 8101170:	b082      	sub	sp, #8
 8101172:	af00      	add	r7, sp, #0
 8101174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101176:	6878      	ldr	r0, [r7, #4]
 8101178:	f7ff ffb2 	bl	81010e0 <SysTick_Config>
 810117c:	4603      	mov	r3, r0
}
 810117e:	4618      	mov	r0, r3
 8101180:	3708      	adds	r7, #8
 8101182:	46bd      	mov	sp, r7
 8101184:	bd80      	pop	{r7, pc}
	...

08101188 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101188:	b480      	push	{r7}
 810118a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810118c:	4b07      	ldr	r3, [pc, #28]	; (81011ac <HAL_GetCurrentCPUID+0x24>)
 810118e:	681b      	ldr	r3, [r3, #0]
 8101190:	091b      	lsrs	r3, r3, #4
 8101192:	f003 030f 	and.w	r3, r3, #15
 8101196:	2b07      	cmp	r3, #7
 8101198:	d101      	bne.n	810119e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810119a:	2303      	movs	r3, #3
 810119c:	e000      	b.n	81011a0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810119e:	2301      	movs	r3, #1
  }
}
 81011a0:	4618      	mov	r0, r3
 81011a2:	46bd      	mov	sp, r7
 81011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011a8:	4770      	bx	lr
 81011aa:	bf00      	nop
 81011ac:	e000ed00 	.word	0xe000ed00

081011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81011b0:	b480      	push	{r7}
 81011b2:	b089      	sub	sp, #36	; 0x24
 81011b4:	af00      	add	r7, sp, #0
 81011b6:	6078      	str	r0, [r7, #4]
 81011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81011ba:	2300      	movs	r3, #0
 81011bc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81011be:	4b89      	ldr	r3, [pc, #548]	; (81013e4 <HAL_GPIO_Init+0x234>)
 81011c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81011c2:	e194      	b.n	81014ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81011c4:	683b      	ldr	r3, [r7, #0]
 81011c6:	681a      	ldr	r2, [r3, #0]
 81011c8:	2101      	movs	r1, #1
 81011ca:	69fb      	ldr	r3, [r7, #28]
 81011cc:	fa01 f303 	lsl.w	r3, r1, r3
 81011d0:	4013      	ands	r3, r2
 81011d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81011d4:	693b      	ldr	r3, [r7, #16]
 81011d6:	2b00      	cmp	r3, #0
 81011d8:	f000 8186 	beq.w	81014e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81011dc:	683b      	ldr	r3, [r7, #0]
 81011de:	685b      	ldr	r3, [r3, #4]
 81011e0:	f003 0303 	and.w	r3, r3, #3
 81011e4:	2b01      	cmp	r3, #1
 81011e6:	d005      	beq.n	81011f4 <HAL_GPIO_Init+0x44>
 81011e8:	683b      	ldr	r3, [r7, #0]
 81011ea:	685b      	ldr	r3, [r3, #4]
 81011ec:	f003 0303 	and.w	r3, r3, #3
 81011f0:	2b02      	cmp	r3, #2
 81011f2:	d130      	bne.n	8101256 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81011f4:	687b      	ldr	r3, [r7, #4]
 81011f6:	689b      	ldr	r3, [r3, #8]
 81011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81011fa:	69fb      	ldr	r3, [r7, #28]
 81011fc:	005b      	lsls	r3, r3, #1
 81011fe:	2203      	movs	r2, #3
 8101200:	fa02 f303 	lsl.w	r3, r2, r3
 8101204:	43db      	mvns	r3, r3
 8101206:	69ba      	ldr	r2, [r7, #24]
 8101208:	4013      	ands	r3, r2
 810120a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810120c:	683b      	ldr	r3, [r7, #0]
 810120e:	68da      	ldr	r2, [r3, #12]
 8101210:	69fb      	ldr	r3, [r7, #28]
 8101212:	005b      	lsls	r3, r3, #1
 8101214:	fa02 f303 	lsl.w	r3, r2, r3
 8101218:	69ba      	ldr	r2, [r7, #24]
 810121a:	4313      	orrs	r3, r2
 810121c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810121e:	687b      	ldr	r3, [r7, #4]
 8101220:	69ba      	ldr	r2, [r7, #24]
 8101222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101224:	687b      	ldr	r3, [r7, #4]
 8101226:	685b      	ldr	r3, [r3, #4]
 8101228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810122a:	2201      	movs	r2, #1
 810122c:	69fb      	ldr	r3, [r7, #28]
 810122e:	fa02 f303 	lsl.w	r3, r2, r3
 8101232:	43db      	mvns	r3, r3
 8101234:	69ba      	ldr	r2, [r7, #24]
 8101236:	4013      	ands	r3, r2
 8101238:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810123a:	683b      	ldr	r3, [r7, #0]
 810123c:	685b      	ldr	r3, [r3, #4]
 810123e:	091b      	lsrs	r3, r3, #4
 8101240:	f003 0201 	and.w	r2, r3, #1
 8101244:	69fb      	ldr	r3, [r7, #28]
 8101246:	fa02 f303 	lsl.w	r3, r2, r3
 810124a:	69ba      	ldr	r2, [r7, #24]
 810124c:	4313      	orrs	r3, r2
 810124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101250:	687b      	ldr	r3, [r7, #4]
 8101252:	69ba      	ldr	r2, [r7, #24]
 8101254:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101256:	683b      	ldr	r3, [r7, #0]
 8101258:	685b      	ldr	r3, [r3, #4]
 810125a:	f003 0303 	and.w	r3, r3, #3
 810125e:	2b03      	cmp	r3, #3
 8101260:	d017      	beq.n	8101292 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101262:	687b      	ldr	r3, [r7, #4]
 8101264:	68db      	ldr	r3, [r3, #12]
 8101266:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101268:	69fb      	ldr	r3, [r7, #28]
 810126a:	005b      	lsls	r3, r3, #1
 810126c:	2203      	movs	r2, #3
 810126e:	fa02 f303 	lsl.w	r3, r2, r3
 8101272:	43db      	mvns	r3, r3
 8101274:	69ba      	ldr	r2, [r7, #24]
 8101276:	4013      	ands	r3, r2
 8101278:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810127a:	683b      	ldr	r3, [r7, #0]
 810127c:	689a      	ldr	r2, [r3, #8]
 810127e:	69fb      	ldr	r3, [r7, #28]
 8101280:	005b      	lsls	r3, r3, #1
 8101282:	fa02 f303 	lsl.w	r3, r2, r3
 8101286:	69ba      	ldr	r2, [r7, #24]
 8101288:	4313      	orrs	r3, r2
 810128a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810128c:	687b      	ldr	r3, [r7, #4]
 810128e:	69ba      	ldr	r2, [r7, #24]
 8101290:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101292:	683b      	ldr	r3, [r7, #0]
 8101294:	685b      	ldr	r3, [r3, #4]
 8101296:	f003 0303 	and.w	r3, r3, #3
 810129a:	2b02      	cmp	r3, #2
 810129c:	d123      	bne.n	81012e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810129e:	69fb      	ldr	r3, [r7, #28]
 81012a0:	08da      	lsrs	r2, r3, #3
 81012a2:	687b      	ldr	r3, [r7, #4]
 81012a4:	3208      	adds	r2, #8
 81012a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81012ac:	69fb      	ldr	r3, [r7, #28]
 81012ae:	f003 0307 	and.w	r3, r3, #7
 81012b2:	009b      	lsls	r3, r3, #2
 81012b4:	220f      	movs	r2, #15
 81012b6:	fa02 f303 	lsl.w	r3, r2, r3
 81012ba:	43db      	mvns	r3, r3
 81012bc:	69ba      	ldr	r2, [r7, #24]
 81012be:	4013      	ands	r3, r2
 81012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81012c2:	683b      	ldr	r3, [r7, #0]
 81012c4:	691a      	ldr	r2, [r3, #16]
 81012c6:	69fb      	ldr	r3, [r7, #28]
 81012c8:	f003 0307 	and.w	r3, r3, #7
 81012cc:	009b      	lsls	r3, r3, #2
 81012ce:	fa02 f303 	lsl.w	r3, r2, r3
 81012d2:	69ba      	ldr	r2, [r7, #24]
 81012d4:	4313      	orrs	r3, r2
 81012d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81012d8:	69fb      	ldr	r3, [r7, #28]
 81012da:	08da      	lsrs	r2, r3, #3
 81012dc:	687b      	ldr	r3, [r7, #4]
 81012de:	3208      	adds	r2, #8
 81012e0:	69b9      	ldr	r1, [r7, #24]
 81012e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81012e6:	687b      	ldr	r3, [r7, #4]
 81012e8:	681b      	ldr	r3, [r3, #0]
 81012ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81012ec:	69fb      	ldr	r3, [r7, #28]
 81012ee:	005b      	lsls	r3, r3, #1
 81012f0:	2203      	movs	r2, #3
 81012f2:	fa02 f303 	lsl.w	r3, r2, r3
 81012f6:	43db      	mvns	r3, r3
 81012f8:	69ba      	ldr	r2, [r7, #24]
 81012fa:	4013      	ands	r3, r2
 81012fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81012fe:	683b      	ldr	r3, [r7, #0]
 8101300:	685b      	ldr	r3, [r3, #4]
 8101302:	f003 0203 	and.w	r2, r3, #3
 8101306:	69fb      	ldr	r3, [r7, #28]
 8101308:	005b      	lsls	r3, r3, #1
 810130a:	fa02 f303 	lsl.w	r3, r2, r3
 810130e:	69ba      	ldr	r2, [r7, #24]
 8101310:	4313      	orrs	r3, r2
 8101312:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101314:	687b      	ldr	r3, [r7, #4]
 8101316:	69ba      	ldr	r2, [r7, #24]
 8101318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810131a:	683b      	ldr	r3, [r7, #0]
 810131c:	685b      	ldr	r3, [r3, #4]
 810131e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101322:	2b00      	cmp	r3, #0
 8101324:	f000 80e0 	beq.w	81014e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101328:	4b2f      	ldr	r3, [pc, #188]	; (81013e8 <HAL_GPIO_Init+0x238>)
 810132a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810132e:	4a2e      	ldr	r2, [pc, #184]	; (81013e8 <HAL_GPIO_Init+0x238>)
 8101330:	f043 0302 	orr.w	r3, r3, #2
 8101334:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101338:	4b2b      	ldr	r3, [pc, #172]	; (81013e8 <HAL_GPIO_Init+0x238>)
 810133a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810133e:	f003 0302 	and.w	r3, r3, #2
 8101342:	60fb      	str	r3, [r7, #12]
 8101344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101346:	4a29      	ldr	r2, [pc, #164]	; (81013ec <HAL_GPIO_Init+0x23c>)
 8101348:	69fb      	ldr	r3, [r7, #28]
 810134a:	089b      	lsrs	r3, r3, #2
 810134c:	3302      	adds	r3, #2
 810134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101354:	69fb      	ldr	r3, [r7, #28]
 8101356:	f003 0303 	and.w	r3, r3, #3
 810135a:	009b      	lsls	r3, r3, #2
 810135c:	220f      	movs	r2, #15
 810135e:	fa02 f303 	lsl.w	r3, r2, r3
 8101362:	43db      	mvns	r3, r3
 8101364:	69ba      	ldr	r2, [r7, #24]
 8101366:	4013      	ands	r3, r2
 8101368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810136a:	687b      	ldr	r3, [r7, #4]
 810136c:	4a20      	ldr	r2, [pc, #128]	; (81013f0 <HAL_GPIO_Init+0x240>)
 810136e:	4293      	cmp	r3, r2
 8101370:	d052      	beq.n	8101418 <HAL_GPIO_Init+0x268>
 8101372:	687b      	ldr	r3, [r7, #4]
 8101374:	4a1f      	ldr	r2, [pc, #124]	; (81013f4 <HAL_GPIO_Init+0x244>)
 8101376:	4293      	cmp	r3, r2
 8101378:	d031      	beq.n	81013de <HAL_GPIO_Init+0x22e>
 810137a:	687b      	ldr	r3, [r7, #4]
 810137c:	4a1e      	ldr	r2, [pc, #120]	; (81013f8 <HAL_GPIO_Init+0x248>)
 810137e:	4293      	cmp	r3, r2
 8101380:	d02b      	beq.n	81013da <HAL_GPIO_Init+0x22a>
 8101382:	687b      	ldr	r3, [r7, #4]
 8101384:	4a1d      	ldr	r2, [pc, #116]	; (81013fc <HAL_GPIO_Init+0x24c>)
 8101386:	4293      	cmp	r3, r2
 8101388:	d025      	beq.n	81013d6 <HAL_GPIO_Init+0x226>
 810138a:	687b      	ldr	r3, [r7, #4]
 810138c:	4a1c      	ldr	r2, [pc, #112]	; (8101400 <HAL_GPIO_Init+0x250>)
 810138e:	4293      	cmp	r3, r2
 8101390:	d01f      	beq.n	81013d2 <HAL_GPIO_Init+0x222>
 8101392:	687b      	ldr	r3, [r7, #4]
 8101394:	4a1b      	ldr	r2, [pc, #108]	; (8101404 <HAL_GPIO_Init+0x254>)
 8101396:	4293      	cmp	r3, r2
 8101398:	d019      	beq.n	81013ce <HAL_GPIO_Init+0x21e>
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	4a1a      	ldr	r2, [pc, #104]	; (8101408 <HAL_GPIO_Init+0x258>)
 810139e:	4293      	cmp	r3, r2
 81013a0:	d013      	beq.n	81013ca <HAL_GPIO_Init+0x21a>
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	4a19      	ldr	r2, [pc, #100]	; (810140c <HAL_GPIO_Init+0x25c>)
 81013a6:	4293      	cmp	r3, r2
 81013a8:	d00d      	beq.n	81013c6 <HAL_GPIO_Init+0x216>
 81013aa:	687b      	ldr	r3, [r7, #4]
 81013ac:	4a18      	ldr	r2, [pc, #96]	; (8101410 <HAL_GPIO_Init+0x260>)
 81013ae:	4293      	cmp	r3, r2
 81013b0:	d007      	beq.n	81013c2 <HAL_GPIO_Init+0x212>
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	4a17      	ldr	r2, [pc, #92]	; (8101414 <HAL_GPIO_Init+0x264>)
 81013b6:	4293      	cmp	r3, r2
 81013b8:	d101      	bne.n	81013be <HAL_GPIO_Init+0x20e>
 81013ba:	2309      	movs	r3, #9
 81013bc:	e02d      	b.n	810141a <HAL_GPIO_Init+0x26a>
 81013be:	230a      	movs	r3, #10
 81013c0:	e02b      	b.n	810141a <HAL_GPIO_Init+0x26a>
 81013c2:	2308      	movs	r3, #8
 81013c4:	e029      	b.n	810141a <HAL_GPIO_Init+0x26a>
 81013c6:	2307      	movs	r3, #7
 81013c8:	e027      	b.n	810141a <HAL_GPIO_Init+0x26a>
 81013ca:	2306      	movs	r3, #6
 81013cc:	e025      	b.n	810141a <HAL_GPIO_Init+0x26a>
 81013ce:	2305      	movs	r3, #5
 81013d0:	e023      	b.n	810141a <HAL_GPIO_Init+0x26a>
 81013d2:	2304      	movs	r3, #4
 81013d4:	e021      	b.n	810141a <HAL_GPIO_Init+0x26a>
 81013d6:	2303      	movs	r3, #3
 81013d8:	e01f      	b.n	810141a <HAL_GPIO_Init+0x26a>
 81013da:	2302      	movs	r3, #2
 81013dc:	e01d      	b.n	810141a <HAL_GPIO_Init+0x26a>
 81013de:	2301      	movs	r3, #1
 81013e0:	e01b      	b.n	810141a <HAL_GPIO_Init+0x26a>
 81013e2:	bf00      	nop
 81013e4:	580000c0 	.word	0x580000c0
 81013e8:	58024400 	.word	0x58024400
 81013ec:	58000400 	.word	0x58000400
 81013f0:	58020000 	.word	0x58020000
 81013f4:	58020400 	.word	0x58020400
 81013f8:	58020800 	.word	0x58020800
 81013fc:	58020c00 	.word	0x58020c00
 8101400:	58021000 	.word	0x58021000
 8101404:	58021400 	.word	0x58021400
 8101408:	58021800 	.word	0x58021800
 810140c:	58021c00 	.word	0x58021c00
 8101410:	58022000 	.word	0x58022000
 8101414:	58022400 	.word	0x58022400
 8101418:	2300      	movs	r3, #0
 810141a:	69fa      	ldr	r2, [r7, #28]
 810141c:	f002 0203 	and.w	r2, r2, #3
 8101420:	0092      	lsls	r2, r2, #2
 8101422:	4093      	lsls	r3, r2
 8101424:	69ba      	ldr	r2, [r7, #24]
 8101426:	4313      	orrs	r3, r2
 8101428:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810142a:	4938      	ldr	r1, [pc, #224]	; (810150c <HAL_GPIO_Init+0x35c>)
 810142c:	69fb      	ldr	r3, [r7, #28]
 810142e:	089b      	lsrs	r3, r3, #2
 8101430:	3302      	adds	r3, #2
 8101432:	69ba      	ldr	r2, [r7, #24]
 8101434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810143c:	681b      	ldr	r3, [r3, #0]
 810143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101440:	693b      	ldr	r3, [r7, #16]
 8101442:	43db      	mvns	r3, r3
 8101444:	69ba      	ldr	r2, [r7, #24]
 8101446:	4013      	ands	r3, r2
 8101448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810144a:	683b      	ldr	r3, [r7, #0]
 810144c:	685b      	ldr	r3, [r3, #4]
 810144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101452:	2b00      	cmp	r3, #0
 8101454:	d003      	beq.n	810145e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101456:	69ba      	ldr	r2, [r7, #24]
 8101458:	693b      	ldr	r3, [r7, #16]
 810145a:	4313      	orrs	r3, r2
 810145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810145e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101462:	69bb      	ldr	r3, [r7, #24]
 8101464:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810146a:	685b      	ldr	r3, [r3, #4]
 810146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810146e:	693b      	ldr	r3, [r7, #16]
 8101470:	43db      	mvns	r3, r3
 8101472:	69ba      	ldr	r2, [r7, #24]
 8101474:	4013      	ands	r3, r2
 8101476:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101478:	683b      	ldr	r3, [r7, #0]
 810147a:	685b      	ldr	r3, [r3, #4]
 810147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101480:	2b00      	cmp	r3, #0
 8101482:	d003      	beq.n	810148c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101484:	69ba      	ldr	r2, [r7, #24]
 8101486:	693b      	ldr	r3, [r7, #16]
 8101488:	4313      	orrs	r3, r2
 810148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810148c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101490:	69bb      	ldr	r3, [r7, #24]
 8101492:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101494:	697b      	ldr	r3, [r7, #20]
 8101496:	685b      	ldr	r3, [r3, #4]
 8101498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810149a:	693b      	ldr	r3, [r7, #16]
 810149c:	43db      	mvns	r3, r3
 810149e:	69ba      	ldr	r2, [r7, #24]
 81014a0:	4013      	ands	r3, r2
 81014a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81014a4:	683b      	ldr	r3, [r7, #0]
 81014a6:	685b      	ldr	r3, [r3, #4]
 81014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81014ac:	2b00      	cmp	r3, #0
 81014ae:	d003      	beq.n	81014b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81014b0:	69ba      	ldr	r2, [r7, #24]
 81014b2:	693b      	ldr	r3, [r7, #16]
 81014b4:	4313      	orrs	r3, r2
 81014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81014b8:	697b      	ldr	r3, [r7, #20]
 81014ba:	69ba      	ldr	r2, [r7, #24]
 81014bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81014be:	697b      	ldr	r3, [r7, #20]
 81014c0:	681b      	ldr	r3, [r3, #0]
 81014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81014c4:	693b      	ldr	r3, [r7, #16]
 81014c6:	43db      	mvns	r3, r3
 81014c8:	69ba      	ldr	r2, [r7, #24]
 81014ca:	4013      	ands	r3, r2
 81014cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81014ce:	683b      	ldr	r3, [r7, #0]
 81014d0:	685b      	ldr	r3, [r3, #4]
 81014d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81014d6:	2b00      	cmp	r3, #0
 81014d8:	d003      	beq.n	81014e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81014da:	69ba      	ldr	r2, [r7, #24]
 81014dc:	693b      	ldr	r3, [r7, #16]
 81014de:	4313      	orrs	r3, r2
 81014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81014e2:	697b      	ldr	r3, [r7, #20]
 81014e4:	69ba      	ldr	r2, [r7, #24]
 81014e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81014e8:	69fb      	ldr	r3, [r7, #28]
 81014ea:	3301      	adds	r3, #1
 81014ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81014ee:	683b      	ldr	r3, [r7, #0]
 81014f0:	681a      	ldr	r2, [r3, #0]
 81014f2:	69fb      	ldr	r3, [r7, #28]
 81014f4:	fa22 f303 	lsr.w	r3, r2, r3
 81014f8:	2b00      	cmp	r3, #0
 81014fa:	f47f ae63 	bne.w	81011c4 <HAL_GPIO_Init+0x14>
  }
}
 81014fe:	bf00      	nop
 8101500:	bf00      	nop
 8101502:	3724      	adds	r7, #36	; 0x24
 8101504:	46bd      	mov	sp, r7
 8101506:	f85d 7b04 	ldr.w	r7, [sp], #4
 810150a:	4770      	bx	lr
 810150c:	58000400 	.word	0x58000400

08101510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101510:	b480      	push	{r7}
 8101512:	b085      	sub	sp, #20
 8101514:	af00      	add	r7, sp, #0
 8101516:	6078      	str	r0, [r7, #4]
 8101518:	460b      	mov	r3, r1
 810151a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 810151c:	687b      	ldr	r3, [r7, #4]
 810151e:	691a      	ldr	r2, [r3, #16]
 8101520:	887b      	ldrh	r3, [r7, #2]
 8101522:	4013      	ands	r3, r2
 8101524:	2b00      	cmp	r3, #0
 8101526:	d002      	beq.n	810152e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8101528:	2301      	movs	r3, #1
 810152a:	73fb      	strb	r3, [r7, #15]
 810152c:	e001      	b.n	8101532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 810152e:	2300      	movs	r3, #0
 8101530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8101532:	7bfb      	ldrb	r3, [r7, #15]
}
 8101534:	4618      	mov	r0, r3
 8101536:	3714      	adds	r7, #20
 8101538:	46bd      	mov	sp, r7
 810153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810153e:	4770      	bx	lr

08101540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101540:	b480      	push	{r7}
 8101542:	b083      	sub	sp, #12
 8101544:	af00      	add	r7, sp, #0
 8101546:	6078      	str	r0, [r7, #4]
 8101548:	460b      	mov	r3, r1
 810154a:	807b      	strh	r3, [r7, #2]
 810154c:	4613      	mov	r3, r2
 810154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101550:	787b      	ldrb	r3, [r7, #1]
 8101552:	2b00      	cmp	r3, #0
 8101554:	d003      	beq.n	810155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101556:	887a      	ldrh	r2, [r7, #2]
 8101558:	687b      	ldr	r3, [r7, #4]
 810155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810155c:	e003      	b.n	8101566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810155e:	887b      	ldrh	r3, [r7, #2]
 8101560:	041a      	lsls	r2, r3, #16
 8101562:	687b      	ldr	r3, [r7, #4]
 8101564:	619a      	str	r2, [r3, #24]
}
 8101566:	bf00      	nop
 8101568:	370c      	adds	r7, #12
 810156a:	46bd      	mov	sp, r7
 810156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101570:	4770      	bx	lr

08101572 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101572:	b480      	push	{r7}
 8101574:	b085      	sub	sp, #20
 8101576:	af00      	add	r7, sp, #0
 8101578:	6078      	str	r0, [r7, #4]
 810157a:	460b      	mov	r3, r1
 810157c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810157e:	687b      	ldr	r3, [r7, #4]
 8101580:	695b      	ldr	r3, [r3, #20]
 8101582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101584:	887a      	ldrh	r2, [r7, #2]
 8101586:	68fb      	ldr	r3, [r7, #12]
 8101588:	4013      	ands	r3, r2
 810158a:	041a      	lsls	r2, r3, #16
 810158c:	68fb      	ldr	r3, [r7, #12]
 810158e:	43d9      	mvns	r1, r3
 8101590:	887b      	ldrh	r3, [r7, #2]
 8101592:	400b      	ands	r3, r1
 8101594:	431a      	orrs	r2, r3
 8101596:	687b      	ldr	r3, [r7, #4]
 8101598:	619a      	str	r2, [r3, #24]
}
 810159a:	bf00      	nop
 810159c:	3714      	adds	r7, #20
 810159e:	46bd      	mov	sp, r7
 81015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015a4:	4770      	bx	lr
	...

081015a8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81015a8:	b480      	push	{r7}
 81015aa:	b083      	sub	sp, #12
 81015ac:	af00      	add	r7, sp, #0
 81015ae:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81015b0:	4b05      	ldr	r3, [pc, #20]	; (81015c8 <HAL_HSEM_ActivateNotification+0x20>)
 81015b2:	681a      	ldr	r2, [r3, #0]
 81015b4:	4904      	ldr	r1, [pc, #16]	; (81015c8 <HAL_HSEM_ActivateNotification+0x20>)
 81015b6:	687b      	ldr	r3, [r7, #4]
 81015b8:	4313      	orrs	r3, r2
 81015ba:	600b      	str	r3, [r1, #0]
#endif
}
 81015bc:	bf00      	nop
 81015be:	370c      	adds	r7, #12
 81015c0:	46bd      	mov	sp, r7
 81015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015c6:	4770      	bx	lr
 81015c8:	58026510 	.word	0x58026510

081015cc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81015cc:	b580      	push	{r7, lr}
 81015ce:	b084      	sub	sp, #16
 81015d0:	af00      	add	r7, sp, #0
 81015d2:	60f8      	str	r0, [r7, #12]
 81015d4:	460b      	mov	r3, r1
 81015d6:	607a      	str	r2, [r7, #4]
 81015d8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81015da:	4b37      	ldr	r3, [pc, #220]	; (81016b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81015dc:	681b      	ldr	r3, [r3, #0]
 81015de:	f023 0201 	bic.w	r2, r3, #1
 81015e2:	4935      	ldr	r1, [pc, #212]	; (81016b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81015e4:	68fb      	ldr	r3, [r7, #12]
 81015e6:	4313      	orrs	r3, r2
 81015e8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81015ea:	687b      	ldr	r3, [r7, #4]
 81015ec:	2b00      	cmp	r3, #0
 81015ee:	d123      	bne.n	8101638 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81015f0:	f7ff fdca 	bl	8101188 <HAL_GetCurrentCPUID>
 81015f4:	4603      	mov	r3, r0
 81015f6:	2b03      	cmp	r3, #3
 81015f8:	d158      	bne.n	81016ac <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81015fa:	4b2f      	ldr	r3, [pc, #188]	; (81016b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81015fc:	691b      	ldr	r3, [r3, #16]
 81015fe:	4a2e      	ldr	r2, [pc, #184]	; (81016b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101600:	f023 0301 	bic.w	r3, r3, #1
 8101604:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101606:	4b2d      	ldr	r3, [pc, #180]	; (81016bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101608:	691b      	ldr	r3, [r3, #16]
 810160a:	4a2c      	ldr	r2, [pc, #176]	; (81016bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810160c:	f043 0304 	orr.w	r3, r3, #4
 8101610:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101612:	f3bf 8f4f 	dsb	sy
}
 8101616:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101618:	f3bf 8f6f 	isb	sy
}
 810161c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810161e:	7afb      	ldrb	r3, [r7, #11]
 8101620:	2b01      	cmp	r3, #1
 8101622:	d101      	bne.n	8101628 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101624:	bf30      	wfi
 8101626:	e000      	b.n	810162a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101628:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810162a:	4b24      	ldr	r3, [pc, #144]	; (81016bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810162c:	691b      	ldr	r3, [r3, #16]
 810162e:	4a23      	ldr	r2, [pc, #140]	; (81016bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101630:	f023 0304 	bic.w	r3, r3, #4
 8101634:	6113      	str	r3, [r2, #16]
 8101636:	e03c      	b.n	81016b2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101638:	687b      	ldr	r3, [r7, #4]
 810163a:	2b01      	cmp	r3, #1
 810163c:	d123      	bne.n	8101686 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810163e:	f7ff fda3 	bl	8101188 <HAL_GetCurrentCPUID>
 8101642:	4603      	mov	r3, r0
 8101644:	2b01      	cmp	r3, #1
 8101646:	d133      	bne.n	81016b0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101648:	4b1b      	ldr	r3, [pc, #108]	; (81016b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810164a:	695b      	ldr	r3, [r3, #20]
 810164c:	4a1a      	ldr	r2, [pc, #104]	; (81016b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810164e:	f023 0302 	bic.w	r3, r3, #2
 8101652:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101654:	4b19      	ldr	r3, [pc, #100]	; (81016bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101656:	691b      	ldr	r3, [r3, #16]
 8101658:	4a18      	ldr	r2, [pc, #96]	; (81016bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810165a:	f043 0304 	orr.w	r3, r3, #4
 810165e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101660:	f3bf 8f4f 	dsb	sy
}
 8101664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101666:	f3bf 8f6f 	isb	sy
}
 810166a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810166c:	7afb      	ldrb	r3, [r7, #11]
 810166e:	2b01      	cmp	r3, #1
 8101670:	d101      	bne.n	8101676 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101672:	bf30      	wfi
 8101674:	e000      	b.n	8101678 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101676:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101678:	4b10      	ldr	r3, [pc, #64]	; (81016bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810167a:	691b      	ldr	r3, [r3, #16]
 810167c:	4a0f      	ldr	r2, [pc, #60]	; (81016bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810167e:	f023 0304 	bic.w	r3, r3, #4
 8101682:	6113      	str	r3, [r2, #16]
 8101684:	e015      	b.n	81016b2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101686:	f7ff fd7f 	bl	8101188 <HAL_GetCurrentCPUID>
 810168a:	4603      	mov	r3, r0
 810168c:	2b03      	cmp	r3, #3
 810168e:	d106      	bne.n	810169e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101690:	4b09      	ldr	r3, [pc, #36]	; (81016b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101692:	691b      	ldr	r3, [r3, #16]
 8101694:	4a08      	ldr	r2, [pc, #32]	; (81016b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101696:	f023 0304 	bic.w	r3, r3, #4
 810169a:	6113      	str	r3, [r2, #16]
 810169c:	e009      	b.n	81016b2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810169e:	4b06      	ldr	r3, [pc, #24]	; (81016b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016a0:	695b      	ldr	r3, [r3, #20]
 81016a2:	4a05      	ldr	r2, [pc, #20]	; (81016b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016a4:	f023 0304 	bic.w	r3, r3, #4
 81016a8:	6153      	str	r3, [r2, #20]
 81016aa:	e002      	b.n	81016b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016ac:	bf00      	nop
 81016ae:	e000      	b.n	81016b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016b0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81016b2:	3710      	adds	r7, #16
 81016b4:	46bd      	mov	sp, r7
 81016b6:	bd80      	pop	{r7, pc}
 81016b8:	58024800 	.word	0x58024800
 81016bc:	e000ed00 	.word	0xe000ed00

081016c0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81016c0:	b580      	push	{r7, lr}
 81016c2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81016c4:	f7ff fd60 	bl	8101188 <HAL_GetCurrentCPUID>
 81016c8:	4603      	mov	r3, r0
 81016ca:	2b03      	cmp	r3, #3
 81016cc:	d101      	bne.n	81016d2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81016ce:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81016d0:	e001      	b.n	81016d6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81016d2:	bf40      	sev
    __WFE ();
 81016d4:	bf20      	wfe
}
 81016d6:	bf00      	nop
 81016d8:	bd80      	pop	{r7, pc}
	...

081016dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81016dc:	b480      	push	{r7}
 81016de:	b089      	sub	sp, #36	; 0x24
 81016e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81016e2:	4bb3      	ldr	r3, [pc, #716]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016e4:	691b      	ldr	r3, [r3, #16]
 81016e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81016ea:	2b18      	cmp	r3, #24
 81016ec:	f200 8155 	bhi.w	810199a <HAL_RCC_GetSysClockFreq+0x2be>
 81016f0:	a201      	add	r2, pc, #4	; (adr r2, 81016f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81016f6:	bf00      	nop
 81016f8:	0810175d 	.word	0x0810175d
 81016fc:	0810199b 	.word	0x0810199b
 8101700:	0810199b 	.word	0x0810199b
 8101704:	0810199b 	.word	0x0810199b
 8101708:	0810199b 	.word	0x0810199b
 810170c:	0810199b 	.word	0x0810199b
 8101710:	0810199b 	.word	0x0810199b
 8101714:	0810199b 	.word	0x0810199b
 8101718:	08101783 	.word	0x08101783
 810171c:	0810199b 	.word	0x0810199b
 8101720:	0810199b 	.word	0x0810199b
 8101724:	0810199b 	.word	0x0810199b
 8101728:	0810199b 	.word	0x0810199b
 810172c:	0810199b 	.word	0x0810199b
 8101730:	0810199b 	.word	0x0810199b
 8101734:	0810199b 	.word	0x0810199b
 8101738:	08101789 	.word	0x08101789
 810173c:	0810199b 	.word	0x0810199b
 8101740:	0810199b 	.word	0x0810199b
 8101744:	0810199b 	.word	0x0810199b
 8101748:	0810199b 	.word	0x0810199b
 810174c:	0810199b 	.word	0x0810199b
 8101750:	0810199b 	.word	0x0810199b
 8101754:	0810199b 	.word	0x0810199b
 8101758:	0810178f 	.word	0x0810178f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810175c:	4b94      	ldr	r3, [pc, #592]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810175e:	681b      	ldr	r3, [r3, #0]
 8101760:	f003 0320 	and.w	r3, r3, #32
 8101764:	2b00      	cmp	r3, #0
 8101766:	d009      	beq.n	810177c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101768:	4b91      	ldr	r3, [pc, #580]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810176a:	681b      	ldr	r3, [r3, #0]
 810176c:	08db      	lsrs	r3, r3, #3
 810176e:	f003 0303 	and.w	r3, r3, #3
 8101772:	4a90      	ldr	r2, [pc, #576]	; (81019b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101774:	fa22 f303 	lsr.w	r3, r2, r3
 8101778:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810177a:	e111      	b.n	81019a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810177c:	4b8d      	ldr	r3, [pc, #564]	; (81019b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810177e:	61bb      	str	r3, [r7, #24]
    break;
 8101780:	e10e      	b.n	81019a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101782:	4b8d      	ldr	r3, [pc, #564]	; (81019b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101784:	61bb      	str	r3, [r7, #24]
    break;
 8101786:	e10b      	b.n	81019a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101788:	4b8c      	ldr	r3, [pc, #560]	; (81019bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 810178a:	61bb      	str	r3, [r7, #24]
    break;
 810178c:	e108      	b.n	81019a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810178e:	4b88      	ldr	r3, [pc, #544]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101792:	f003 0303 	and.w	r3, r3, #3
 8101796:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101798:	4b85      	ldr	r3, [pc, #532]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810179c:	091b      	lsrs	r3, r3, #4
 810179e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81017a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81017a4:	4b82      	ldr	r3, [pc, #520]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017a8:	f003 0301 	and.w	r3, r3, #1
 81017ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81017ae:	4b80      	ldr	r3, [pc, #512]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81017b2:	08db      	lsrs	r3, r3, #3
 81017b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81017b8:	68fa      	ldr	r2, [r7, #12]
 81017ba:	fb02 f303 	mul.w	r3, r2, r3
 81017be:	ee07 3a90 	vmov	s15, r3
 81017c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81017c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81017ca:	693b      	ldr	r3, [r7, #16]
 81017cc:	2b00      	cmp	r3, #0
 81017ce:	f000 80e1 	beq.w	8101994 <HAL_RCC_GetSysClockFreq+0x2b8>
 81017d2:	697b      	ldr	r3, [r7, #20]
 81017d4:	2b02      	cmp	r3, #2
 81017d6:	f000 8083 	beq.w	81018e0 <HAL_RCC_GetSysClockFreq+0x204>
 81017da:	697b      	ldr	r3, [r7, #20]
 81017dc:	2b02      	cmp	r3, #2
 81017de:	f200 80a1 	bhi.w	8101924 <HAL_RCC_GetSysClockFreq+0x248>
 81017e2:	697b      	ldr	r3, [r7, #20]
 81017e4:	2b00      	cmp	r3, #0
 81017e6:	d003      	beq.n	81017f0 <HAL_RCC_GetSysClockFreq+0x114>
 81017e8:	697b      	ldr	r3, [r7, #20]
 81017ea:	2b01      	cmp	r3, #1
 81017ec:	d056      	beq.n	810189c <HAL_RCC_GetSysClockFreq+0x1c0>
 81017ee:	e099      	b.n	8101924 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81017f0:	4b6f      	ldr	r3, [pc, #444]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017f2:	681b      	ldr	r3, [r3, #0]
 81017f4:	f003 0320 	and.w	r3, r3, #32
 81017f8:	2b00      	cmp	r3, #0
 81017fa:	d02d      	beq.n	8101858 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81017fc:	4b6c      	ldr	r3, [pc, #432]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017fe:	681b      	ldr	r3, [r3, #0]
 8101800:	08db      	lsrs	r3, r3, #3
 8101802:	f003 0303 	and.w	r3, r3, #3
 8101806:	4a6b      	ldr	r2, [pc, #428]	; (81019b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101808:	fa22 f303 	lsr.w	r3, r2, r3
 810180c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810180e:	687b      	ldr	r3, [r7, #4]
 8101810:	ee07 3a90 	vmov	s15, r3
 8101814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101818:	693b      	ldr	r3, [r7, #16]
 810181a:	ee07 3a90 	vmov	s15, r3
 810181e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101826:	4b62      	ldr	r3, [pc, #392]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810182a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810182e:	ee07 3a90 	vmov	s15, r3
 8101832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101836:	ed97 6a02 	vldr	s12, [r7, #8]
 810183a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81019c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810183e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810184a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810184e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101852:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101856:	e087      	b.n	8101968 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101858:	693b      	ldr	r3, [r7, #16]
 810185a:	ee07 3a90 	vmov	s15, r3
 810185e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101862:	eddf 6a58 	vldr	s13, [pc, #352]	; 81019c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810186a:	4b51      	ldr	r3, [pc, #324]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810186e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101872:	ee07 3a90 	vmov	s15, r3
 8101876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810187a:	ed97 6a02 	vldr	s12, [r7, #8]
 810187e:	eddf 5a50 	vldr	s11, [pc, #320]	; 81019c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810188a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810188e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810189a:	e065      	b.n	8101968 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810189c:	693b      	ldr	r3, [r7, #16]
 810189e:	ee07 3a90 	vmov	s15, r3
 81018a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 81019c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81018aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018ae:	4b40      	ldr	r3, [pc, #256]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81018b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018b6:	ee07 3a90 	vmov	s15, r3
 81018ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018be:	ed97 6a02 	vldr	s12, [r7, #8]
 81018c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81019c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81018c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81018ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81018ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81018d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81018d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81018da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81018de:	e043      	b.n	8101968 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81018e0:	693b      	ldr	r3, [r7, #16]
 81018e2:	ee07 3a90 	vmov	s15, r3
 81018e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 81019cc <HAL_RCC_GetSysClockFreq+0x2f0>
 81018ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018f2:	4b2f      	ldr	r3, [pc, #188]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81018f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018fa:	ee07 3a90 	vmov	s15, r3
 81018fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101902:	ed97 6a02 	vldr	s12, [r7, #8]
 8101906:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81019c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810190a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810190e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810191a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810191e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101922:	e021      	b.n	8101968 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101924:	693b      	ldr	r3, [r7, #16]
 8101926:	ee07 3a90 	vmov	s15, r3
 810192a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810192e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81019c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101936:	4b1e      	ldr	r3, [pc, #120]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810193a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810193e:	ee07 3a90 	vmov	s15, r3
 8101942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101946:	ed97 6a02 	vldr	s12, [r7, #8]
 810194a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81019c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810194e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810195a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810195e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101966:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101968:	4b11      	ldr	r3, [pc, #68]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810196c:	0a5b      	lsrs	r3, r3, #9
 810196e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101972:	3301      	adds	r3, #1
 8101974:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101976:	683b      	ldr	r3, [r7, #0]
 8101978:	ee07 3a90 	vmov	s15, r3
 810197c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101980:	edd7 6a07 	vldr	s13, [r7, #28]
 8101984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810198c:	ee17 3a90 	vmov	r3, s15
 8101990:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101992:	e005      	b.n	81019a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101994:	2300      	movs	r3, #0
 8101996:	61bb      	str	r3, [r7, #24]
    break;
 8101998:	e002      	b.n	81019a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810199a:	4b07      	ldr	r3, [pc, #28]	; (81019b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810199c:	61bb      	str	r3, [r7, #24]
    break;
 810199e:	bf00      	nop
  }

  return sysclockfreq;
 81019a0:	69bb      	ldr	r3, [r7, #24]
}
 81019a2:	4618      	mov	r0, r3
 81019a4:	3724      	adds	r7, #36	; 0x24
 81019a6:	46bd      	mov	sp, r7
 81019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ac:	4770      	bx	lr
 81019ae:	bf00      	nop
 81019b0:	58024400 	.word	0x58024400
 81019b4:	03d09000 	.word	0x03d09000
 81019b8:	003d0900 	.word	0x003d0900
 81019bc:	007a1200 	.word	0x007a1200
 81019c0:	46000000 	.word	0x46000000
 81019c4:	4c742400 	.word	0x4c742400
 81019c8:	4a742400 	.word	0x4a742400
 81019cc:	4af42400 	.word	0x4af42400

081019d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 81019d0:	b580      	push	{r7, lr}
 81019d2:	b084      	sub	sp, #16
 81019d4:	af00      	add	r7, sp, #0
 81019d6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81019d8:	687b      	ldr	r3, [r7, #4]
 81019da:	2b00      	cmp	r3, #0
 81019dc:	d101      	bne.n	81019e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 81019de:	2301      	movs	r3, #1
 81019e0:	e0f1      	b.n	8101bc6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81019e2:	687b      	ldr	r3, [r7, #4]
 81019e4:	2200      	movs	r2, #0
 81019e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	681b      	ldr	r3, [r3, #0]
 81019ec:	4a78      	ldr	r2, [pc, #480]	; (8101bd0 <HAL_SPI_Init+0x200>)
 81019ee:	4293      	cmp	r3, r2
 81019f0:	d00f      	beq.n	8101a12 <HAL_SPI_Init+0x42>
 81019f2:	687b      	ldr	r3, [r7, #4]
 81019f4:	681b      	ldr	r3, [r3, #0]
 81019f6:	4a77      	ldr	r2, [pc, #476]	; (8101bd4 <HAL_SPI_Init+0x204>)
 81019f8:	4293      	cmp	r3, r2
 81019fa:	d00a      	beq.n	8101a12 <HAL_SPI_Init+0x42>
 81019fc:	687b      	ldr	r3, [r7, #4]
 81019fe:	681b      	ldr	r3, [r3, #0]
 8101a00:	4a75      	ldr	r2, [pc, #468]	; (8101bd8 <HAL_SPI_Init+0x208>)
 8101a02:	4293      	cmp	r3, r2
 8101a04:	d005      	beq.n	8101a12 <HAL_SPI_Init+0x42>
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	68db      	ldr	r3, [r3, #12]
 8101a0a:	2b0f      	cmp	r3, #15
 8101a0c:	d901      	bls.n	8101a12 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8101a0e:	2301      	movs	r3, #1
 8101a10:	e0d9      	b.n	8101bc6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8101a12:	6878      	ldr	r0, [r7, #4]
 8101a14:	f000 ff5d 	bl	81028d2 <SPI_GetPacketSize>
 8101a18:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8101a1a:	687b      	ldr	r3, [r7, #4]
 8101a1c:	681b      	ldr	r3, [r3, #0]
 8101a1e:	4a6c      	ldr	r2, [pc, #432]	; (8101bd0 <HAL_SPI_Init+0x200>)
 8101a20:	4293      	cmp	r3, r2
 8101a22:	d00c      	beq.n	8101a3e <HAL_SPI_Init+0x6e>
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	681b      	ldr	r3, [r3, #0]
 8101a28:	4a6a      	ldr	r2, [pc, #424]	; (8101bd4 <HAL_SPI_Init+0x204>)
 8101a2a:	4293      	cmp	r3, r2
 8101a2c:	d007      	beq.n	8101a3e <HAL_SPI_Init+0x6e>
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	681b      	ldr	r3, [r3, #0]
 8101a32:	4a69      	ldr	r2, [pc, #420]	; (8101bd8 <HAL_SPI_Init+0x208>)
 8101a34:	4293      	cmp	r3, r2
 8101a36:	d002      	beq.n	8101a3e <HAL_SPI_Init+0x6e>
 8101a38:	68fb      	ldr	r3, [r7, #12]
 8101a3a:	2b08      	cmp	r3, #8
 8101a3c:	d811      	bhi.n	8101a62 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8101a42:	4a63      	ldr	r2, [pc, #396]	; (8101bd0 <HAL_SPI_Init+0x200>)
 8101a44:	4293      	cmp	r3, r2
 8101a46:	d009      	beq.n	8101a5c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8101a48:	687b      	ldr	r3, [r7, #4]
 8101a4a:	681b      	ldr	r3, [r3, #0]
 8101a4c:	4a61      	ldr	r2, [pc, #388]	; (8101bd4 <HAL_SPI_Init+0x204>)
 8101a4e:	4293      	cmp	r3, r2
 8101a50:	d004      	beq.n	8101a5c <HAL_SPI_Init+0x8c>
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	4a60      	ldr	r2, [pc, #384]	; (8101bd8 <HAL_SPI_Init+0x208>)
 8101a58:	4293      	cmp	r3, r2
 8101a5a:	d104      	bne.n	8101a66 <HAL_SPI_Init+0x96>
 8101a5c:	68fb      	ldr	r3, [r7, #12]
 8101a5e:	2b10      	cmp	r3, #16
 8101a60:	d901      	bls.n	8101a66 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8101a62:	2301      	movs	r3, #1
 8101a64:	e0af      	b.n	8101bc6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8101a6c:	b2db      	uxtb	r3, r3
 8101a6e:	2b00      	cmp	r3, #0
 8101a70:	d106      	bne.n	8101a80 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	2200      	movs	r2, #0
 8101a76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8101a7a:	6878      	ldr	r0, [r7, #4]
 8101a7c:	f7ff f90a 	bl	8100c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	2202      	movs	r2, #2
 8101a84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8101a88:	687b      	ldr	r3, [r7, #4]
 8101a8a:	681b      	ldr	r3, [r3, #0]
 8101a8c:	681a      	ldr	r2, [r3, #0]
 8101a8e:	687b      	ldr	r3, [r7, #4]
 8101a90:	681b      	ldr	r3, [r3, #0]
 8101a92:	f022 0201 	bic.w	r2, r2, #1
 8101a96:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	689b      	ldr	r3, [r3, #8]
 8101a9e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8101aa2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	699b      	ldr	r3, [r3, #24]
 8101aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101aac:	d119      	bne.n	8101ae2 <HAL_SPI_Init+0x112>
 8101aae:	687b      	ldr	r3, [r7, #4]
 8101ab0:	685b      	ldr	r3, [r3, #4]
 8101ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101ab6:	d103      	bne.n	8101ac0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8101ab8:	687b      	ldr	r3, [r7, #4]
 8101aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8101abc:	2b00      	cmp	r3, #0
 8101abe:	d008      	beq.n	8101ad2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8101ac4:	2b00      	cmp	r3, #0
 8101ac6:	d10c      	bne.n	8101ae2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8101ac8:	687b      	ldr	r3, [r7, #4]
 8101aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8101acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101ad0:	d107      	bne.n	8101ae2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8101ad2:	687b      	ldr	r3, [r7, #4]
 8101ad4:	681b      	ldr	r3, [r3, #0]
 8101ad6:	681a      	ldr	r2, [r3, #0]
 8101ad8:	687b      	ldr	r3, [r7, #4]
 8101ada:	681b      	ldr	r3, [r3, #0]
 8101adc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8101ae0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8101ae2:	687b      	ldr	r3, [r7, #4]
 8101ae4:	69da      	ldr	r2, [r3, #28]
 8101ae6:	687b      	ldr	r3, [r7, #4]
 8101ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101aea:	431a      	orrs	r2, r3
 8101aec:	68bb      	ldr	r3, [r7, #8]
 8101aee:	431a      	orrs	r2, r3
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101af4:	ea42 0103 	orr.w	r1, r2, r3
 8101af8:	687b      	ldr	r3, [r7, #4]
 8101afa:	68da      	ldr	r2, [r3, #12]
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	681b      	ldr	r3, [r3, #0]
 8101b00:	430a      	orrs	r2, r1
 8101b02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8101b04:	687b      	ldr	r3, [r7, #4]
 8101b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8101b08:	687b      	ldr	r3, [r7, #4]
 8101b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101b0c:	431a      	orrs	r2, r3
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101b12:	431a      	orrs	r2, r3
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	699b      	ldr	r3, [r3, #24]
 8101b18:	431a      	orrs	r2, r3
 8101b1a:	687b      	ldr	r3, [r7, #4]
 8101b1c:	691b      	ldr	r3, [r3, #16]
 8101b1e:	431a      	orrs	r2, r3
 8101b20:	687b      	ldr	r3, [r7, #4]
 8101b22:	695b      	ldr	r3, [r3, #20]
 8101b24:	431a      	orrs	r2, r3
 8101b26:	687b      	ldr	r3, [r7, #4]
 8101b28:	6a1b      	ldr	r3, [r3, #32]
 8101b2a:	431a      	orrs	r2, r3
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	685b      	ldr	r3, [r3, #4]
 8101b30:	431a      	orrs	r2, r3
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101b36:	431a      	orrs	r2, r3
 8101b38:	687b      	ldr	r3, [r7, #4]
 8101b3a:	689b      	ldr	r3, [r3, #8]
 8101b3c:	431a      	orrs	r2, r3
 8101b3e:	687b      	ldr	r3, [r7, #4]
 8101b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101b42:	ea42 0103 	orr.w	r1, r2, r3
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8101b4a:	687b      	ldr	r3, [r7, #4]
 8101b4c:	681b      	ldr	r3, [r3, #0]
 8101b4e:	430a      	orrs	r2, r1
 8101b50:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8101b52:	687b      	ldr	r3, [r7, #4]
 8101b54:	685b      	ldr	r3, [r3, #4]
 8101b56:	2b00      	cmp	r3, #0
 8101b58:	d113      	bne.n	8101b82 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8101b5a:	687b      	ldr	r3, [r7, #4]
 8101b5c:	681b      	ldr	r3, [r3, #0]
 8101b5e:	689b      	ldr	r3, [r3, #8]
 8101b60:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	681b      	ldr	r3, [r3, #0]
 8101b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8101b6c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8101b6e:	687b      	ldr	r3, [r7, #4]
 8101b70:	681b      	ldr	r3, [r3, #0]
 8101b72:	689b      	ldr	r3, [r3, #8]
 8101b74:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	681b      	ldr	r3, [r3, #0]
 8101b7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8101b80:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	681b      	ldr	r3, [r3, #0]
 8101b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	681b      	ldr	r3, [r3, #0]
 8101b8c:	f022 0201 	bic.w	r2, r2, #1
 8101b90:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8101b92:	687b      	ldr	r3, [r7, #4]
 8101b94:	685b      	ldr	r3, [r3, #4]
 8101b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101b9a:	2b00      	cmp	r3, #0
 8101b9c:	d00a      	beq.n	8101bb4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8101b9e:	687b      	ldr	r3, [r7, #4]
 8101ba0:	681b      	ldr	r3, [r3, #0]
 8101ba2:	68db      	ldr	r3, [r3, #12]
 8101ba4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8101bac:	687b      	ldr	r3, [r7, #4]
 8101bae:	681b      	ldr	r3, [r3, #0]
 8101bb0:	430a      	orrs	r2, r1
 8101bb2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	2200      	movs	r2, #0
 8101bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	2201      	movs	r2, #1
 8101bc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8101bc4:	2300      	movs	r3, #0
}
 8101bc6:	4618      	mov	r0, r3
 8101bc8:	3710      	adds	r7, #16
 8101bca:	46bd      	mov	sp, r7
 8101bcc:	bd80      	pop	{r7, pc}
 8101bce:	bf00      	nop
 8101bd0:	40013000 	.word	0x40013000
 8101bd4:	40003800 	.word	0x40003800
 8101bd8:	40003c00 	.word	0x40003c00

08101bdc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8101bdc:	b580      	push	{r7, lr}
 8101bde:	b08a      	sub	sp, #40	; 0x28
 8101be0:	af02      	add	r7, sp, #8
 8101be2:	60f8      	str	r0, [r7, #12]
 8101be4:	60b9      	str	r1, [r7, #8]
 8101be6:	603b      	str	r3, [r7, #0]
 8101be8:	4613      	mov	r3, r2
 8101bea:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8101bec:	68fb      	ldr	r3, [r7, #12]
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	3320      	adds	r3, #32
 8101bf2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8101bf4:	2300      	movs	r3, #0
 8101bf6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8101bf8:	68fb      	ldr	r3, [r7, #12]
 8101bfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8101bfe:	2b01      	cmp	r3, #1
 8101c00:	d101      	bne.n	8101c06 <HAL_SPI_Transmit+0x2a>
 8101c02:	2302      	movs	r3, #2
 8101c04:	e1d4      	b.n	8101fb0 <HAL_SPI_Transmit+0x3d4>
 8101c06:	68fb      	ldr	r3, [r7, #12]
 8101c08:	2201      	movs	r2, #1
 8101c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8101c0e:	f7ff f9a7 	bl	8100f60 <HAL_GetTick>
 8101c12:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8101c14:	68fb      	ldr	r3, [r7, #12]
 8101c16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8101c1a:	b2db      	uxtb	r3, r3
 8101c1c:	2b01      	cmp	r3, #1
 8101c1e:	d007      	beq.n	8101c30 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8101c20:	2302      	movs	r3, #2
 8101c22:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8101c24:	68fb      	ldr	r3, [r7, #12]
 8101c26:	2200      	movs	r2, #0
 8101c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8101c2c:	7efb      	ldrb	r3, [r7, #27]
 8101c2e:	e1bf      	b.n	8101fb0 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8101c30:	68bb      	ldr	r3, [r7, #8]
 8101c32:	2b00      	cmp	r3, #0
 8101c34:	d002      	beq.n	8101c3c <HAL_SPI_Transmit+0x60>
 8101c36:	88fb      	ldrh	r3, [r7, #6]
 8101c38:	2b00      	cmp	r3, #0
 8101c3a:	d107      	bne.n	8101c4c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8101c3c:	2301      	movs	r3, #1
 8101c3e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8101c40:	68fb      	ldr	r3, [r7, #12]
 8101c42:	2200      	movs	r2, #0
 8101c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8101c48:	7efb      	ldrb	r3, [r7, #27]
 8101c4a:	e1b1      	b.n	8101fb0 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8101c4c:	68fb      	ldr	r3, [r7, #12]
 8101c4e:	2203      	movs	r2, #3
 8101c50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8101c54:	68fb      	ldr	r3, [r7, #12]
 8101c56:	2200      	movs	r2, #0
 8101c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8101c5c:	68fb      	ldr	r3, [r7, #12]
 8101c5e:	68ba      	ldr	r2, [r7, #8]
 8101c60:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8101c62:	68fb      	ldr	r3, [r7, #12]
 8101c64:	88fa      	ldrh	r2, [r7, #6]
 8101c66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8101c6a:	68fb      	ldr	r3, [r7, #12]
 8101c6c:	88fa      	ldrh	r2, [r7, #6]
 8101c6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8101c72:	68fb      	ldr	r3, [r7, #12]
 8101c74:	2200      	movs	r2, #0
 8101c76:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8101c78:	68fb      	ldr	r3, [r7, #12]
 8101c7a:	2200      	movs	r2, #0
 8101c7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8101c80:	68fb      	ldr	r3, [r7, #12]
 8101c82:	2200      	movs	r2, #0
 8101c84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8101c88:	68fb      	ldr	r3, [r7, #12]
 8101c8a:	2200      	movs	r2, #0
 8101c8c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8101c8e:	68fb      	ldr	r3, [r7, #12]
 8101c90:	2200      	movs	r2, #0
 8101c92:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8101c94:	68fb      	ldr	r3, [r7, #12]
 8101c96:	689b      	ldr	r3, [r3, #8]
 8101c98:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8101c9c:	d107      	bne.n	8101cae <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8101c9e:	68fb      	ldr	r3, [r7, #12]
 8101ca0:	681b      	ldr	r3, [r3, #0]
 8101ca2:	681a      	ldr	r2, [r3, #0]
 8101ca4:	68fb      	ldr	r3, [r7, #12]
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8101cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8101cae:	68fb      	ldr	r3, [r7, #12]
 8101cb0:	681b      	ldr	r3, [r3, #0]
 8101cb2:	685b      	ldr	r3, [r3, #4]
 8101cb4:	0c1b      	lsrs	r3, r3, #16
 8101cb6:	041b      	lsls	r3, r3, #16
 8101cb8:	88f9      	ldrh	r1, [r7, #6]
 8101cba:	68fa      	ldr	r2, [r7, #12]
 8101cbc:	6812      	ldr	r2, [r2, #0]
 8101cbe:	430b      	orrs	r3, r1
 8101cc0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8101cc2:	68fb      	ldr	r3, [r7, #12]
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	681a      	ldr	r2, [r3, #0]
 8101cc8:	68fb      	ldr	r3, [r7, #12]
 8101cca:	681b      	ldr	r3, [r3, #0]
 8101ccc:	f042 0201 	orr.w	r2, r2, #1
 8101cd0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8101cd2:	68fb      	ldr	r3, [r7, #12]
 8101cd4:	685b      	ldr	r3, [r3, #4]
 8101cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101cda:	d107      	bne.n	8101cec <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8101cdc:	68fb      	ldr	r3, [r7, #12]
 8101cde:	681b      	ldr	r3, [r3, #0]
 8101ce0:	681a      	ldr	r2, [r3, #0]
 8101ce2:	68fb      	ldr	r3, [r7, #12]
 8101ce4:	681b      	ldr	r3, [r3, #0]
 8101ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8101cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8101cec:	68fb      	ldr	r3, [r7, #12]
 8101cee:	68db      	ldr	r3, [r3, #12]
 8101cf0:	2b0f      	cmp	r3, #15
 8101cf2:	d947      	bls.n	8101d84 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8101cf4:	e03f      	b.n	8101d76 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8101cf6:	68fb      	ldr	r3, [r7, #12]
 8101cf8:	681b      	ldr	r3, [r3, #0]
 8101cfa:	695b      	ldr	r3, [r3, #20]
 8101cfc:	f003 0302 	and.w	r3, r3, #2
 8101d00:	2b02      	cmp	r3, #2
 8101d02:	d114      	bne.n	8101d2e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8101d04:	68fb      	ldr	r3, [r7, #12]
 8101d06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8101d08:	68fb      	ldr	r3, [r7, #12]
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	6812      	ldr	r2, [r2, #0]
 8101d0e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8101d10:	68fb      	ldr	r3, [r7, #12]
 8101d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101d14:	1d1a      	adds	r2, r3, #4
 8101d16:	68fb      	ldr	r3, [r7, #12]
 8101d18:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8101d1a:	68fb      	ldr	r3, [r7, #12]
 8101d1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101d20:	b29b      	uxth	r3, r3
 8101d22:	3b01      	subs	r3, #1
 8101d24:	b29a      	uxth	r2, r3
 8101d26:	68fb      	ldr	r3, [r7, #12]
 8101d28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8101d2c:	e023      	b.n	8101d76 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8101d2e:	f7ff f917 	bl	8100f60 <HAL_GetTick>
 8101d32:	4602      	mov	r2, r0
 8101d34:	697b      	ldr	r3, [r7, #20]
 8101d36:	1ad3      	subs	r3, r2, r3
 8101d38:	683a      	ldr	r2, [r7, #0]
 8101d3a:	429a      	cmp	r2, r3
 8101d3c:	d803      	bhi.n	8101d46 <HAL_SPI_Transmit+0x16a>
 8101d3e:	683b      	ldr	r3, [r7, #0]
 8101d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101d44:	d102      	bne.n	8101d4c <HAL_SPI_Transmit+0x170>
 8101d46:	683b      	ldr	r3, [r7, #0]
 8101d48:	2b00      	cmp	r3, #0
 8101d4a:	d114      	bne.n	8101d76 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8101d4c:	68f8      	ldr	r0, [r7, #12]
 8101d4e:	f000 fcf2 	bl	8102736 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8101d52:	68fb      	ldr	r3, [r7, #12]
 8101d54:	2200      	movs	r2, #0
 8101d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8101d5a:	68fb      	ldr	r3, [r7, #12]
 8101d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8101d60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101d64:	68fb      	ldr	r3, [r7, #12]
 8101d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8101d6a:	68fb      	ldr	r3, [r7, #12]
 8101d6c:	2201      	movs	r2, #1
 8101d6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8101d72:	2303      	movs	r3, #3
 8101d74:	e11c      	b.n	8101fb0 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8101d76:	68fb      	ldr	r3, [r7, #12]
 8101d78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101d7c:	b29b      	uxth	r3, r3
 8101d7e:	2b00      	cmp	r3, #0
 8101d80:	d1b9      	bne.n	8101cf6 <HAL_SPI_Transmit+0x11a>
 8101d82:	e0ef      	b.n	8101f64 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8101d84:	68fb      	ldr	r3, [r7, #12]
 8101d86:	68db      	ldr	r3, [r3, #12]
 8101d88:	2b07      	cmp	r3, #7
 8101d8a:	f240 80e4 	bls.w	8101f56 <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8101d8e:	e05d      	b.n	8101e4c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8101d90:	68fb      	ldr	r3, [r7, #12]
 8101d92:	681b      	ldr	r3, [r3, #0]
 8101d94:	695b      	ldr	r3, [r3, #20]
 8101d96:	f003 0302 	and.w	r3, r3, #2
 8101d9a:	2b02      	cmp	r3, #2
 8101d9c:	d132      	bne.n	8101e04 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8101d9e:	68fb      	ldr	r3, [r7, #12]
 8101da0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101da4:	b29b      	uxth	r3, r3
 8101da6:	2b01      	cmp	r3, #1
 8101da8:	d918      	bls.n	8101ddc <HAL_SPI_Transmit+0x200>
 8101daa:	68fb      	ldr	r3, [r7, #12]
 8101dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101dae:	2b00      	cmp	r3, #0
 8101db0:	d014      	beq.n	8101ddc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8101db2:	68fb      	ldr	r3, [r7, #12]
 8101db4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8101db6:	68fb      	ldr	r3, [r7, #12]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	6812      	ldr	r2, [r2, #0]
 8101dbc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8101dbe:	68fb      	ldr	r3, [r7, #12]
 8101dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101dc2:	1d1a      	adds	r2, r3, #4
 8101dc4:	68fb      	ldr	r3, [r7, #12]
 8101dc6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8101dc8:	68fb      	ldr	r3, [r7, #12]
 8101dca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101dce:	b29b      	uxth	r3, r3
 8101dd0:	3b02      	subs	r3, #2
 8101dd2:	b29a      	uxth	r2, r3
 8101dd4:	68fb      	ldr	r3, [r7, #12]
 8101dd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8101dda:	e037      	b.n	8101e4c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8101ddc:	68fb      	ldr	r3, [r7, #12]
 8101dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101de0:	881a      	ldrh	r2, [r3, #0]
 8101de2:	69fb      	ldr	r3, [r7, #28]
 8101de4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8101de6:	68fb      	ldr	r3, [r7, #12]
 8101de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101dea:	1c9a      	adds	r2, r3, #2
 8101dec:	68fb      	ldr	r3, [r7, #12]
 8101dee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8101df0:	68fb      	ldr	r3, [r7, #12]
 8101df2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101df6:	b29b      	uxth	r3, r3
 8101df8:	3b01      	subs	r3, #1
 8101dfa:	b29a      	uxth	r2, r3
 8101dfc:	68fb      	ldr	r3, [r7, #12]
 8101dfe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8101e02:	e023      	b.n	8101e4c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8101e04:	f7ff f8ac 	bl	8100f60 <HAL_GetTick>
 8101e08:	4602      	mov	r2, r0
 8101e0a:	697b      	ldr	r3, [r7, #20]
 8101e0c:	1ad3      	subs	r3, r2, r3
 8101e0e:	683a      	ldr	r2, [r7, #0]
 8101e10:	429a      	cmp	r2, r3
 8101e12:	d803      	bhi.n	8101e1c <HAL_SPI_Transmit+0x240>
 8101e14:	683b      	ldr	r3, [r7, #0]
 8101e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101e1a:	d102      	bne.n	8101e22 <HAL_SPI_Transmit+0x246>
 8101e1c:	683b      	ldr	r3, [r7, #0]
 8101e1e:	2b00      	cmp	r3, #0
 8101e20:	d114      	bne.n	8101e4c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8101e22:	68f8      	ldr	r0, [r7, #12]
 8101e24:	f000 fc87 	bl	8102736 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8101e28:	68fb      	ldr	r3, [r7, #12]
 8101e2a:	2200      	movs	r2, #0
 8101e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8101e30:	68fb      	ldr	r3, [r7, #12]
 8101e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8101e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101e3a:	68fb      	ldr	r3, [r7, #12]
 8101e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8101e40:	68fb      	ldr	r3, [r7, #12]
 8101e42:	2201      	movs	r2, #1
 8101e44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8101e48:	2303      	movs	r3, #3
 8101e4a:	e0b1      	b.n	8101fb0 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8101e4c:	68fb      	ldr	r3, [r7, #12]
 8101e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101e52:	b29b      	uxth	r3, r3
 8101e54:	2b00      	cmp	r3, #0
 8101e56:	d19b      	bne.n	8101d90 <HAL_SPI_Transmit+0x1b4>
 8101e58:	e084      	b.n	8101f64 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8101e5a:	68fb      	ldr	r3, [r7, #12]
 8101e5c:	681b      	ldr	r3, [r3, #0]
 8101e5e:	695b      	ldr	r3, [r3, #20]
 8101e60:	f003 0302 	and.w	r3, r3, #2
 8101e64:	2b02      	cmp	r3, #2
 8101e66:	d152      	bne.n	8101f0e <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8101e68:	68fb      	ldr	r3, [r7, #12]
 8101e6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101e6e:	b29b      	uxth	r3, r3
 8101e70:	2b03      	cmp	r3, #3
 8101e72:	d918      	bls.n	8101ea6 <HAL_SPI_Transmit+0x2ca>
 8101e74:	68fb      	ldr	r3, [r7, #12]
 8101e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101e78:	2b40      	cmp	r3, #64	; 0x40
 8101e7a:	d914      	bls.n	8101ea6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8101e7c:	68fb      	ldr	r3, [r7, #12]
 8101e7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8101e80:	68fb      	ldr	r3, [r7, #12]
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	6812      	ldr	r2, [r2, #0]
 8101e86:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8101e88:	68fb      	ldr	r3, [r7, #12]
 8101e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101e8c:	1d1a      	adds	r2, r3, #4
 8101e8e:	68fb      	ldr	r3, [r7, #12]
 8101e90:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8101e92:	68fb      	ldr	r3, [r7, #12]
 8101e94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101e98:	b29b      	uxth	r3, r3
 8101e9a:	3b04      	subs	r3, #4
 8101e9c:	b29a      	uxth	r2, r3
 8101e9e:	68fb      	ldr	r3, [r7, #12]
 8101ea0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8101ea4:	e057      	b.n	8101f56 <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8101ea6:	68fb      	ldr	r3, [r7, #12]
 8101ea8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101eac:	b29b      	uxth	r3, r3
 8101eae:	2b01      	cmp	r3, #1
 8101eb0:	d917      	bls.n	8101ee2 <HAL_SPI_Transmit+0x306>
 8101eb2:	68fb      	ldr	r3, [r7, #12]
 8101eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101eb6:	2b00      	cmp	r3, #0
 8101eb8:	d013      	beq.n	8101ee2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8101eba:	68fb      	ldr	r3, [r7, #12]
 8101ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101ebe:	881a      	ldrh	r2, [r3, #0]
 8101ec0:	69fb      	ldr	r3, [r7, #28]
 8101ec2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8101ec4:	68fb      	ldr	r3, [r7, #12]
 8101ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101ec8:	1c9a      	adds	r2, r3, #2
 8101eca:	68fb      	ldr	r3, [r7, #12]
 8101ecc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8101ece:	68fb      	ldr	r3, [r7, #12]
 8101ed0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101ed4:	b29b      	uxth	r3, r3
 8101ed6:	3b02      	subs	r3, #2
 8101ed8:	b29a      	uxth	r2, r3
 8101eda:	68fb      	ldr	r3, [r7, #12]
 8101edc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8101ee0:	e039      	b.n	8101f56 <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8101ee2:	68fb      	ldr	r3, [r7, #12]
 8101ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8101ee6:	68fb      	ldr	r3, [r7, #12]
 8101ee8:	681b      	ldr	r3, [r3, #0]
 8101eea:	3320      	adds	r3, #32
 8101eec:	7812      	ldrb	r2, [r2, #0]
 8101eee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8101ef0:	68fb      	ldr	r3, [r7, #12]
 8101ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101ef4:	1c5a      	adds	r2, r3, #1
 8101ef6:	68fb      	ldr	r3, [r7, #12]
 8101ef8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8101efa:	68fb      	ldr	r3, [r7, #12]
 8101efc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101f00:	b29b      	uxth	r3, r3
 8101f02:	3b01      	subs	r3, #1
 8101f04:	b29a      	uxth	r2, r3
 8101f06:	68fb      	ldr	r3, [r7, #12]
 8101f08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8101f0c:	e023      	b.n	8101f56 <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8101f0e:	f7ff f827 	bl	8100f60 <HAL_GetTick>
 8101f12:	4602      	mov	r2, r0
 8101f14:	697b      	ldr	r3, [r7, #20]
 8101f16:	1ad3      	subs	r3, r2, r3
 8101f18:	683a      	ldr	r2, [r7, #0]
 8101f1a:	429a      	cmp	r2, r3
 8101f1c:	d803      	bhi.n	8101f26 <HAL_SPI_Transmit+0x34a>
 8101f1e:	683b      	ldr	r3, [r7, #0]
 8101f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101f24:	d102      	bne.n	8101f2c <HAL_SPI_Transmit+0x350>
 8101f26:	683b      	ldr	r3, [r7, #0]
 8101f28:	2b00      	cmp	r3, #0
 8101f2a:	d114      	bne.n	8101f56 <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8101f2c:	68f8      	ldr	r0, [r7, #12]
 8101f2e:	f000 fc02 	bl	8102736 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8101f32:	68fb      	ldr	r3, [r7, #12]
 8101f34:	2200      	movs	r2, #0
 8101f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8101f3a:	68fb      	ldr	r3, [r7, #12]
 8101f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8101f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101f44:	68fb      	ldr	r3, [r7, #12]
 8101f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8101f4a:	68fb      	ldr	r3, [r7, #12]
 8101f4c:	2201      	movs	r2, #1
 8101f4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8101f52:	2303      	movs	r3, #3
 8101f54:	e02c      	b.n	8101fb0 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8101f56:	68fb      	ldr	r3, [r7, #12]
 8101f58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8101f5c:	b29b      	uxth	r3, r3
 8101f5e:	2b00      	cmp	r3, #0
 8101f60:	f47f af7b 	bne.w	8101e5a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8101f64:	683b      	ldr	r3, [r7, #0]
 8101f66:	9300      	str	r3, [sp, #0]
 8101f68:	697b      	ldr	r3, [r7, #20]
 8101f6a:	2200      	movs	r2, #0
 8101f6c:	2108      	movs	r1, #8
 8101f6e:	68f8      	ldr	r0, [r7, #12]
 8101f70:	f000 fc81 	bl	8102876 <SPI_WaitOnFlagUntilTimeout>
 8101f74:	4603      	mov	r3, r0
 8101f76:	2b00      	cmp	r3, #0
 8101f78:	d007      	beq.n	8101f8a <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8101f7a:	68fb      	ldr	r3, [r7, #12]
 8101f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8101f80:	f043 0220 	orr.w	r2, r3, #32
 8101f84:	68fb      	ldr	r3, [r7, #12]
 8101f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8101f8a:	68f8      	ldr	r0, [r7, #12]
 8101f8c:	f000 fbd3 	bl	8102736 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8101f90:	68fb      	ldr	r3, [r7, #12]
 8101f92:	2200      	movs	r2, #0
 8101f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8101f98:	68fb      	ldr	r3, [r7, #12]
 8101f9a:	2201      	movs	r2, #1
 8101f9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8101fa0:	68fb      	ldr	r3, [r7, #12]
 8101fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8101fa6:	2b00      	cmp	r3, #0
 8101fa8:	d001      	beq.n	8101fae <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8101faa:	2301      	movs	r3, #1
 8101fac:	e000      	b.n	8101fb0 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8101fae:	7efb      	ldrb	r3, [r7, #27]
}
 8101fb0:	4618      	mov	r0, r3
 8101fb2:	3720      	adds	r7, #32
 8101fb4:	46bd      	mov	sp, r7
 8101fb6:	bd80      	pop	{r7, pc}

08101fb8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8101fb8:	b580      	push	{r7, lr}
 8101fba:	b08a      	sub	sp, #40	; 0x28
 8101fbc:	af02      	add	r7, sp, #8
 8101fbe:	60f8      	str	r0, [r7, #12]
 8101fc0:	60b9      	str	r1, [r7, #8]
 8101fc2:	603b      	str	r3, [r7, #0]
 8101fc4:	4613      	mov	r3, r2
 8101fc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8101fc8:	2300      	movs	r3, #0
 8101fca:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8101fcc:	68fb      	ldr	r3, [r7, #12]
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	3330      	adds	r3, #48	; 0x30
 8101fd2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8101fd4:	68fb      	ldr	r3, [r7, #12]
 8101fd6:	685b      	ldr	r3, [r3, #4]
 8101fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101fdc:	d112      	bne.n	8102004 <HAL_SPI_Receive+0x4c>
 8101fde:	68fb      	ldr	r3, [r7, #12]
 8101fe0:	689b      	ldr	r3, [r3, #8]
 8101fe2:	2b00      	cmp	r3, #0
 8101fe4:	d10e      	bne.n	8102004 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8101fe6:	68fb      	ldr	r3, [r7, #12]
 8101fe8:	2204      	movs	r2, #4
 8101fea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8101fee:	88fa      	ldrh	r2, [r7, #6]
 8101ff0:	683b      	ldr	r3, [r7, #0]
 8101ff2:	9300      	str	r3, [sp, #0]
 8101ff4:	4613      	mov	r3, r2
 8101ff6:	68ba      	ldr	r2, [r7, #8]
 8101ff8:	68b9      	ldr	r1, [r7, #8]
 8101ffa:	68f8      	ldr	r0, [r7, #12]
 8101ffc:	f000 f976 	bl	81022ec <HAL_SPI_TransmitReceive>
 8102000:	4603      	mov	r3, r0
 8102002:	e16f      	b.n	81022e4 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8102004:	68fb      	ldr	r3, [r7, #12]
 8102006:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810200a:	2b01      	cmp	r3, #1
 810200c:	d101      	bne.n	8102012 <HAL_SPI_Receive+0x5a>
 810200e:	2302      	movs	r3, #2
 8102010:	e168      	b.n	81022e4 <HAL_SPI_Receive+0x32c>
 8102012:	68fb      	ldr	r3, [r7, #12]
 8102014:	2201      	movs	r2, #1
 8102016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810201a:	f7fe ffa1 	bl	8100f60 <HAL_GetTick>
 810201e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8102020:	68fb      	ldr	r3, [r7, #12]
 8102022:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8102026:	b2db      	uxtb	r3, r3
 8102028:	2b01      	cmp	r3, #1
 810202a:	d007      	beq.n	810203c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 810202c:	2302      	movs	r3, #2
 810202e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8102030:	68fb      	ldr	r3, [r7, #12]
 8102032:	2200      	movs	r2, #0
 8102034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8102038:	7ffb      	ldrb	r3, [r7, #31]
 810203a:	e153      	b.n	81022e4 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 810203c:	68bb      	ldr	r3, [r7, #8]
 810203e:	2b00      	cmp	r3, #0
 8102040:	d002      	beq.n	8102048 <HAL_SPI_Receive+0x90>
 8102042:	88fb      	ldrh	r3, [r7, #6]
 8102044:	2b00      	cmp	r3, #0
 8102046:	d107      	bne.n	8102058 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8102048:	2301      	movs	r3, #1
 810204a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 810204c:	68fb      	ldr	r3, [r7, #12]
 810204e:	2200      	movs	r2, #0
 8102050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8102054:	7ffb      	ldrb	r3, [r7, #31]
 8102056:	e145      	b.n	81022e4 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8102058:	68fb      	ldr	r3, [r7, #12]
 810205a:	2204      	movs	r2, #4
 810205c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8102060:	68fb      	ldr	r3, [r7, #12]
 8102062:	2200      	movs	r2, #0
 8102064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8102068:	68fb      	ldr	r3, [r7, #12]
 810206a:	68ba      	ldr	r2, [r7, #8]
 810206c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 810206e:	68fb      	ldr	r3, [r7, #12]
 8102070:	88fa      	ldrh	r2, [r7, #6]
 8102072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8102076:	68fb      	ldr	r3, [r7, #12]
 8102078:	88fa      	ldrh	r2, [r7, #6]
 810207a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 810207e:	68fb      	ldr	r3, [r7, #12]
 8102080:	2200      	movs	r2, #0
 8102082:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8102084:	68fb      	ldr	r3, [r7, #12]
 8102086:	2200      	movs	r2, #0
 8102088:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 810208c:	68fb      	ldr	r3, [r7, #12]
 810208e:	2200      	movs	r2, #0
 8102090:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8102094:	68fb      	ldr	r3, [r7, #12]
 8102096:	2200      	movs	r2, #0
 8102098:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810209a:	68fb      	ldr	r3, [r7, #12]
 810209c:	2200      	movs	r2, #0
 810209e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 81020a0:	68fb      	ldr	r3, [r7, #12]
 81020a2:	689b      	ldr	r3, [r3, #8]
 81020a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 81020a8:	d107      	bne.n	81020ba <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 81020aa:	68fb      	ldr	r3, [r7, #12]
 81020ac:	681b      	ldr	r3, [r3, #0]
 81020ae:	681a      	ldr	r2, [r3, #0]
 81020b0:	68fb      	ldr	r3, [r7, #12]
 81020b2:	681b      	ldr	r3, [r3, #0]
 81020b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 81020b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81020ba:	68fb      	ldr	r3, [r7, #12]
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	685b      	ldr	r3, [r3, #4]
 81020c0:	0c1b      	lsrs	r3, r3, #16
 81020c2:	041b      	lsls	r3, r3, #16
 81020c4:	88f9      	ldrh	r1, [r7, #6]
 81020c6:	68fa      	ldr	r2, [r7, #12]
 81020c8:	6812      	ldr	r2, [r2, #0]
 81020ca:	430b      	orrs	r3, r1
 81020cc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 81020ce:	68fb      	ldr	r3, [r7, #12]
 81020d0:	681b      	ldr	r3, [r3, #0]
 81020d2:	681a      	ldr	r2, [r3, #0]
 81020d4:	68fb      	ldr	r3, [r7, #12]
 81020d6:	681b      	ldr	r3, [r3, #0]
 81020d8:	f042 0201 	orr.w	r2, r2, #1
 81020dc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81020de:	68fb      	ldr	r3, [r7, #12]
 81020e0:	685b      	ldr	r3, [r3, #4]
 81020e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81020e6:	d107      	bne.n	81020f8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81020e8:	68fb      	ldr	r3, [r7, #12]
 81020ea:	681b      	ldr	r3, [r3, #0]
 81020ec:	681a      	ldr	r2, [r3, #0]
 81020ee:	68fb      	ldr	r3, [r7, #12]
 81020f0:	681b      	ldr	r3, [r3, #0]
 81020f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81020f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81020f8:	68fb      	ldr	r3, [r7, #12]
 81020fa:	68db      	ldr	r3, [r3, #12]
 81020fc:	2b0f      	cmp	r3, #15
 81020fe:	d948      	bls.n	8102192 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8102100:	e040      	b.n	8102184 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8102102:	68fb      	ldr	r3, [r7, #12]
 8102104:	681b      	ldr	r3, [r3, #0]
 8102106:	695a      	ldr	r2, [r3, #20]
 8102108:	f248 0308 	movw	r3, #32776	; 0x8008
 810210c:	4013      	ands	r3, r2
 810210e:	2b00      	cmp	r3, #0
 8102110:	d014      	beq.n	810213c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8102112:	68fb      	ldr	r3, [r7, #12]
 8102114:	681a      	ldr	r2, [r3, #0]
 8102116:	68fb      	ldr	r3, [r7, #12]
 8102118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810211a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810211c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810211e:	68fb      	ldr	r3, [r7, #12]
 8102120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102122:	1d1a      	adds	r2, r3, #4
 8102124:	68fb      	ldr	r3, [r7, #12]
 8102126:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8102128:	68fb      	ldr	r3, [r7, #12]
 810212a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810212e:	b29b      	uxth	r3, r3
 8102130:	3b01      	subs	r3, #1
 8102132:	b29a      	uxth	r2, r3
 8102134:	68fb      	ldr	r3, [r7, #12]
 8102136:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810213a:	e023      	b.n	8102184 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810213c:	f7fe ff10 	bl	8100f60 <HAL_GetTick>
 8102140:	4602      	mov	r2, r0
 8102142:	697b      	ldr	r3, [r7, #20]
 8102144:	1ad3      	subs	r3, r2, r3
 8102146:	683a      	ldr	r2, [r7, #0]
 8102148:	429a      	cmp	r2, r3
 810214a:	d803      	bhi.n	8102154 <HAL_SPI_Receive+0x19c>
 810214c:	683b      	ldr	r3, [r7, #0]
 810214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102152:	d102      	bne.n	810215a <HAL_SPI_Receive+0x1a2>
 8102154:	683b      	ldr	r3, [r7, #0]
 8102156:	2b00      	cmp	r3, #0
 8102158:	d114      	bne.n	8102184 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810215a:	68f8      	ldr	r0, [r7, #12]
 810215c:	f000 faeb 	bl	8102736 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8102160:	68fb      	ldr	r3, [r7, #12]
 8102162:	2200      	movs	r2, #0
 8102164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102168:	68fb      	ldr	r3, [r7, #12]
 810216a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810216e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102172:	68fb      	ldr	r3, [r7, #12]
 8102174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8102178:	68fb      	ldr	r3, [r7, #12]
 810217a:	2201      	movs	r2, #1
 810217c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8102180:	2303      	movs	r3, #3
 8102182:	e0af      	b.n	81022e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8102184:	68fb      	ldr	r3, [r7, #12]
 8102186:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810218a:	b29b      	uxth	r3, r3
 810218c:	2b00      	cmp	r3, #0
 810218e:	d1b8      	bne.n	8102102 <HAL_SPI_Receive+0x14a>
 8102190:	e095      	b.n	81022be <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8102192:	68fb      	ldr	r3, [r7, #12]
 8102194:	68db      	ldr	r3, [r3, #12]
 8102196:	2b07      	cmp	r3, #7
 8102198:	f240 808b 	bls.w	81022b2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 810219c:	e03f      	b.n	810221e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810219e:	68fb      	ldr	r3, [r7, #12]
 81021a0:	681b      	ldr	r3, [r3, #0]
 81021a2:	695b      	ldr	r3, [r3, #20]
 81021a4:	f003 0301 	and.w	r3, r3, #1
 81021a8:	2b01      	cmp	r3, #1
 81021aa:	d114      	bne.n	81021d6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81021ac:	68fb      	ldr	r3, [r7, #12]
 81021ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81021b0:	69ba      	ldr	r2, [r7, #24]
 81021b2:	8812      	ldrh	r2, [r2, #0]
 81021b4:	b292      	uxth	r2, r2
 81021b6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 81021b8:	68fb      	ldr	r3, [r7, #12]
 81021ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81021bc:	1c9a      	adds	r2, r3, #2
 81021be:	68fb      	ldr	r3, [r7, #12]
 81021c0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 81021c2:	68fb      	ldr	r3, [r7, #12]
 81021c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81021c8:	b29b      	uxth	r3, r3
 81021ca:	3b01      	subs	r3, #1
 81021cc:	b29a      	uxth	r2, r3
 81021ce:	68fb      	ldr	r3, [r7, #12]
 81021d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81021d4:	e023      	b.n	810221e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81021d6:	f7fe fec3 	bl	8100f60 <HAL_GetTick>
 81021da:	4602      	mov	r2, r0
 81021dc:	697b      	ldr	r3, [r7, #20]
 81021de:	1ad3      	subs	r3, r2, r3
 81021e0:	683a      	ldr	r2, [r7, #0]
 81021e2:	429a      	cmp	r2, r3
 81021e4:	d803      	bhi.n	81021ee <HAL_SPI_Receive+0x236>
 81021e6:	683b      	ldr	r3, [r7, #0]
 81021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81021ec:	d102      	bne.n	81021f4 <HAL_SPI_Receive+0x23c>
 81021ee:	683b      	ldr	r3, [r7, #0]
 81021f0:	2b00      	cmp	r3, #0
 81021f2:	d114      	bne.n	810221e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81021f4:	68f8      	ldr	r0, [r7, #12]
 81021f6:	f000 fa9e 	bl	8102736 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81021fa:	68fb      	ldr	r3, [r7, #12]
 81021fc:	2200      	movs	r2, #0
 81021fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102202:	68fb      	ldr	r3, [r7, #12]
 8102204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102208:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810220c:	68fb      	ldr	r3, [r7, #12]
 810220e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8102212:	68fb      	ldr	r3, [r7, #12]
 8102214:	2201      	movs	r2, #1
 8102216:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810221a:	2303      	movs	r3, #3
 810221c:	e062      	b.n	81022e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 810221e:	68fb      	ldr	r3, [r7, #12]
 8102220:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8102224:	b29b      	uxth	r3, r3
 8102226:	2b00      	cmp	r3, #0
 8102228:	d1b9      	bne.n	810219e <HAL_SPI_Receive+0x1e6>
 810222a:	e048      	b.n	81022be <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810222c:	68fb      	ldr	r3, [r7, #12]
 810222e:	681b      	ldr	r3, [r3, #0]
 8102230:	695b      	ldr	r3, [r3, #20]
 8102232:	f003 0301 	and.w	r3, r3, #1
 8102236:	2b01      	cmp	r3, #1
 8102238:	d117      	bne.n	810226a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810223a:	68fb      	ldr	r3, [r7, #12]
 810223c:	681b      	ldr	r3, [r3, #0]
 810223e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8102242:	68fb      	ldr	r3, [r7, #12]
 8102244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102246:	7812      	ldrb	r2, [r2, #0]
 8102248:	b2d2      	uxtb	r2, r2
 810224a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 810224c:	68fb      	ldr	r3, [r7, #12]
 810224e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102250:	1c5a      	adds	r2, r3, #1
 8102252:	68fb      	ldr	r3, [r7, #12]
 8102254:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8102256:	68fb      	ldr	r3, [r7, #12]
 8102258:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810225c:	b29b      	uxth	r3, r3
 810225e:	3b01      	subs	r3, #1
 8102260:	b29a      	uxth	r2, r3
 8102262:	68fb      	ldr	r3, [r7, #12]
 8102264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8102268:	e023      	b.n	81022b2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810226a:	f7fe fe79 	bl	8100f60 <HAL_GetTick>
 810226e:	4602      	mov	r2, r0
 8102270:	697b      	ldr	r3, [r7, #20]
 8102272:	1ad3      	subs	r3, r2, r3
 8102274:	683a      	ldr	r2, [r7, #0]
 8102276:	429a      	cmp	r2, r3
 8102278:	d803      	bhi.n	8102282 <HAL_SPI_Receive+0x2ca>
 810227a:	683b      	ldr	r3, [r7, #0]
 810227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102280:	d102      	bne.n	8102288 <HAL_SPI_Receive+0x2d0>
 8102282:	683b      	ldr	r3, [r7, #0]
 8102284:	2b00      	cmp	r3, #0
 8102286:	d114      	bne.n	81022b2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8102288:	68f8      	ldr	r0, [r7, #12]
 810228a:	f000 fa54 	bl	8102736 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810228e:	68fb      	ldr	r3, [r7, #12]
 8102290:	2200      	movs	r2, #0
 8102292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102296:	68fb      	ldr	r3, [r7, #12]
 8102298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810229c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81022a0:	68fb      	ldr	r3, [r7, #12]
 81022a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81022a6:	68fb      	ldr	r3, [r7, #12]
 81022a8:	2201      	movs	r2, #1
 81022aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81022ae:	2303      	movs	r3, #3
 81022b0:	e018      	b.n	81022e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 81022b2:	68fb      	ldr	r3, [r7, #12]
 81022b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81022b8:	b29b      	uxth	r3, r3
 81022ba:	2b00      	cmp	r3, #0
 81022bc:	d1b6      	bne.n	810222c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81022be:	68f8      	ldr	r0, [r7, #12]
 81022c0:	f000 fa39 	bl	8102736 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81022c4:	68fb      	ldr	r3, [r7, #12]
 81022c6:	2200      	movs	r2, #0
 81022c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 81022cc:	68fb      	ldr	r3, [r7, #12]
 81022ce:	2201      	movs	r2, #1
 81022d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81022d4:	68fb      	ldr	r3, [r7, #12]
 81022d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81022da:	2b00      	cmp	r3, #0
 81022dc:	d001      	beq.n	81022e2 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 81022de:	2301      	movs	r3, #1
 81022e0:	e000      	b.n	81022e4 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 81022e2:	7ffb      	ldrb	r3, [r7, #31]
}
 81022e4:	4618      	mov	r0, r3
 81022e6:	3720      	adds	r7, #32
 81022e8:	46bd      	mov	sp, r7
 81022ea:	bd80      	pop	{r7, pc}

081022ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 81022ec:	b580      	push	{r7, lr}
 81022ee:	b08e      	sub	sp, #56	; 0x38
 81022f0:	af02      	add	r7, sp, #8
 81022f2:	60f8      	str	r0, [r7, #12]
 81022f4:	60b9      	str	r1, [r7, #8]
 81022f6:	607a      	str	r2, [r7, #4]
 81022f8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 81022fa:	2300      	movs	r3, #0
 81022fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8102300:	68fb      	ldr	r3, [r7, #12]
 8102302:	681b      	ldr	r3, [r3, #0]
 8102304:	3320      	adds	r3, #32
 8102306:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8102308:	68fb      	ldr	r3, [r7, #12]
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	3330      	adds	r3, #48	; 0x30
 810230e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8102310:	68fb      	ldr	r3, [r7, #12]
 8102312:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8102316:	2b01      	cmp	r3, #1
 8102318:	d101      	bne.n	810231e <HAL_SPI_TransmitReceive+0x32>
 810231a:	2302      	movs	r3, #2
 810231c:	e207      	b.n	810272e <HAL_SPI_TransmitReceive+0x442>
 810231e:	68fb      	ldr	r3, [r7, #12]
 8102320:	2201      	movs	r2, #1
 8102322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8102326:	f7fe fe1b 	bl	8100f60 <HAL_GetTick>
 810232a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 810232c:	887b      	ldrh	r3, [r7, #2]
 810232e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8102330:	887b      	ldrh	r3, [r7, #2]
 8102332:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8102334:	68fb      	ldr	r3, [r7, #12]
 8102336:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810233a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 810233c:	68fb      	ldr	r3, [r7, #12]
 810233e:	685b      	ldr	r3, [r3, #4]
 8102340:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8102342:	7efb      	ldrb	r3, [r7, #27]
 8102344:	2b01      	cmp	r3, #1
 8102346:	d014      	beq.n	8102372 <HAL_SPI_TransmitReceive+0x86>
 8102348:	697b      	ldr	r3, [r7, #20]
 810234a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810234e:	d106      	bne.n	810235e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8102350:	68fb      	ldr	r3, [r7, #12]
 8102352:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8102354:	2b00      	cmp	r3, #0
 8102356:	d102      	bne.n	810235e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8102358:	7efb      	ldrb	r3, [r7, #27]
 810235a:	2b04      	cmp	r3, #4
 810235c:	d009      	beq.n	8102372 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 810235e:	2302      	movs	r3, #2
 8102360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8102364:	68fb      	ldr	r3, [r7, #12]
 8102366:	2200      	movs	r2, #0
 8102368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810236c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8102370:	e1dd      	b.n	810272e <HAL_SPI_TransmitReceive+0x442>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8102372:	68bb      	ldr	r3, [r7, #8]
 8102374:	2b00      	cmp	r3, #0
 8102376:	d005      	beq.n	8102384 <HAL_SPI_TransmitReceive+0x98>
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	2b00      	cmp	r3, #0
 810237c:	d002      	beq.n	8102384 <HAL_SPI_TransmitReceive+0x98>
 810237e:	887b      	ldrh	r3, [r7, #2]
 8102380:	2b00      	cmp	r3, #0
 8102382:	d109      	bne.n	8102398 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8102384:	2301      	movs	r3, #1
 8102386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810238a:	68fb      	ldr	r3, [r7, #12]
 810238c:	2200      	movs	r2, #0
 810238e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8102392:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8102396:	e1ca      	b.n	810272e <HAL_SPI_TransmitReceive+0x442>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8102398:	68fb      	ldr	r3, [r7, #12]
 810239a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810239e:	b2db      	uxtb	r3, r3
 81023a0:	2b04      	cmp	r3, #4
 81023a2:	d003      	beq.n	81023ac <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 81023a4:	68fb      	ldr	r3, [r7, #12]
 81023a6:	2205      	movs	r2, #5
 81023a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81023ac:	68fb      	ldr	r3, [r7, #12]
 81023ae:	2200      	movs	r2, #0
 81023b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 81023b4:	68fb      	ldr	r3, [r7, #12]
 81023b6:	687a      	ldr	r2, [r7, #4]
 81023b8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 81023ba:	68fb      	ldr	r3, [r7, #12]
 81023bc:	887a      	ldrh	r2, [r7, #2]
 81023be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 81023c2:	68fb      	ldr	r3, [r7, #12]
 81023c4:	887a      	ldrh	r2, [r7, #2]
 81023c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 81023ca:	68fb      	ldr	r3, [r7, #12]
 81023cc:	68ba      	ldr	r2, [r7, #8]
 81023ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 81023d0:	68fb      	ldr	r3, [r7, #12]
 81023d2:	887a      	ldrh	r2, [r7, #2]
 81023d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 81023d8:	68fb      	ldr	r3, [r7, #12]
 81023da:	887a      	ldrh	r2, [r7, #2]
 81023dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 81023e0:	68fb      	ldr	r3, [r7, #12]
 81023e2:	2200      	movs	r2, #0
 81023e4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 81023e6:	68fb      	ldr	r3, [r7, #12]
 81023e8:	2200      	movs	r2, #0
 81023ea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81023ec:	68fb      	ldr	r3, [r7, #12]
 81023ee:	681b      	ldr	r3, [r3, #0]
 81023f0:	685b      	ldr	r3, [r3, #4]
 81023f2:	0c1b      	lsrs	r3, r3, #16
 81023f4:	041b      	lsls	r3, r3, #16
 81023f6:	8879      	ldrh	r1, [r7, #2]
 81023f8:	68fa      	ldr	r2, [r7, #12]
 81023fa:	6812      	ldr	r2, [r2, #0]
 81023fc:	430b      	orrs	r3, r1
 81023fe:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8102400:	68fb      	ldr	r3, [r7, #12]
 8102402:	681b      	ldr	r3, [r3, #0]
 8102404:	681a      	ldr	r2, [r3, #0]
 8102406:	68fb      	ldr	r3, [r7, #12]
 8102408:	681b      	ldr	r3, [r3, #0]
 810240a:	f042 0201 	orr.w	r2, r2, #1
 810240e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8102410:	68fb      	ldr	r3, [r7, #12]
 8102412:	685b      	ldr	r3, [r3, #4]
 8102414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102418:	d107      	bne.n	810242a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810241a:	68fb      	ldr	r3, [r7, #12]
 810241c:	681b      	ldr	r3, [r3, #0]
 810241e:	681a      	ldr	r2, [r3, #0]
 8102420:	68fb      	ldr	r3, [r7, #12]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102428:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810242a:	68fb      	ldr	r3, [r7, #12]
 810242c:	68db      	ldr	r3, [r3, #12]
 810242e:	2b0f      	cmp	r3, #15
 8102430:	d970      	bls.n	8102514 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102432:	e068      	b.n	8102506 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8102434:	68fb      	ldr	r3, [r7, #12]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	695b      	ldr	r3, [r3, #20]
 810243a:	f003 0302 	and.w	r3, r3, #2
 810243e:	2b02      	cmp	r3, #2
 8102440:	d11a      	bne.n	8102478 <HAL_SPI_TransmitReceive+0x18c>
 8102442:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8102444:	2b00      	cmp	r3, #0
 8102446:	d017      	beq.n	8102478 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8102448:	68fb      	ldr	r3, [r7, #12]
 810244a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810244c:	68fb      	ldr	r3, [r7, #12]
 810244e:	681b      	ldr	r3, [r3, #0]
 8102450:	6812      	ldr	r2, [r2, #0]
 8102452:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8102454:	68fb      	ldr	r3, [r7, #12]
 8102456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102458:	1d1a      	adds	r2, r3, #4
 810245a:	68fb      	ldr	r3, [r7, #12]
 810245c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 810245e:	68fb      	ldr	r3, [r7, #12]
 8102460:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8102464:	b29b      	uxth	r3, r3
 8102466:	3b01      	subs	r3, #1
 8102468:	b29a      	uxth	r2, r3
 810246a:	68fb      	ldr	r3, [r7, #12]
 810246c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8102470:	68fb      	ldr	r3, [r7, #12]
 8102472:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8102476:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8102478:	68fb      	ldr	r3, [r7, #12]
 810247a:	681b      	ldr	r3, [r3, #0]
 810247c:	695a      	ldr	r2, [r3, #20]
 810247e:	f248 0308 	movw	r3, #32776	; 0x8008
 8102482:	4013      	ands	r3, r2
 8102484:	2b00      	cmp	r3, #0
 8102486:	d01a      	beq.n	81024be <HAL_SPI_TransmitReceive+0x1d2>
 8102488:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810248a:	2b00      	cmp	r3, #0
 810248c:	d017      	beq.n	81024be <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810248e:	68fb      	ldr	r3, [r7, #12]
 8102490:	681a      	ldr	r2, [r3, #0]
 8102492:	68fb      	ldr	r3, [r7, #12]
 8102494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102496:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8102498:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810249a:	68fb      	ldr	r3, [r7, #12]
 810249c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810249e:	1d1a      	adds	r2, r3, #4
 81024a0:	68fb      	ldr	r3, [r7, #12]
 81024a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 81024a4:	68fb      	ldr	r3, [r7, #12]
 81024a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81024aa:	b29b      	uxth	r3, r3
 81024ac:	3b01      	subs	r3, #1
 81024ae:	b29a      	uxth	r2, r3
 81024b0:	68fb      	ldr	r3, [r7, #12]
 81024b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 81024b6:	68fb      	ldr	r3, [r7, #12]
 81024b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81024bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81024be:	f7fe fd4f 	bl	8100f60 <HAL_GetTick>
 81024c2:	4602      	mov	r2, r0
 81024c4:	69fb      	ldr	r3, [r7, #28]
 81024c6:	1ad3      	subs	r3, r2, r3
 81024c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81024ca:	429a      	cmp	r2, r3
 81024cc:	d803      	bhi.n	81024d6 <HAL_SPI_TransmitReceive+0x1ea>
 81024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81024d4:	d102      	bne.n	81024dc <HAL_SPI_TransmitReceive+0x1f0>
 81024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81024d8:	2b00      	cmp	r3, #0
 81024da:	d114      	bne.n	8102506 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81024dc:	68f8      	ldr	r0, [r7, #12]
 81024de:	f000 f92a 	bl	8102736 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81024e2:	68fb      	ldr	r3, [r7, #12]
 81024e4:	2200      	movs	r2, #0
 81024e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81024ea:	68fb      	ldr	r3, [r7, #12]
 81024ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81024f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81024f4:	68fb      	ldr	r3, [r7, #12]
 81024f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81024fa:	68fb      	ldr	r3, [r7, #12]
 81024fc:	2201      	movs	r2, #1
 81024fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8102502:	2303      	movs	r3, #3
 8102504:	e113      	b.n	810272e <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102506:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8102508:	2b00      	cmp	r3, #0
 810250a:	d193      	bne.n	8102434 <HAL_SPI_TransmitReceive+0x148>
 810250c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810250e:	2b00      	cmp	r3, #0
 8102510:	d190      	bne.n	8102434 <HAL_SPI_TransmitReceive+0x148>
 8102512:	e0e5      	b.n	81026e0 <HAL_SPI_TransmitReceive+0x3f4>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8102514:	68fb      	ldr	r3, [r7, #12]
 8102516:	68db      	ldr	r3, [r3, #12]
 8102518:	2b07      	cmp	r3, #7
 810251a:	f240 80db 	bls.w	81026d4 <HAL_SPI_TransmitReceive+0x3e8>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810251e:	e066      	b.n	81025ee <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8102520:	68fb      	ldr	r3, [r7, #12]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	695b      	ldr	r3, [r3, #20]
 8102526:	f003 0302 	and.w	r3, r3, #2
 810252a:	2b02      	cmp	r3, #2
 810252c:	d119      	bne.n	8102562 <HAL_SPI_TransmitReceive+0x276>
 810252e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8102530:	2b00      	cmp	r3, #0
 8102532:	d016      	beq.n	8102562 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8102534:	68fb      	ldr	r3, [r7, #12]
 8102536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102538:	881a      	ldrh	r2, [r3, #0]
 810253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810253c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 810253e:	68fb      	ldr	r3, [r7, #12]
 8102540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102542:	1c9a      	adds	r2, r3, #2
 8102544:	68fb      	ldr	r3, [r7, #12]
 8102546:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8102548:	68fb      	ldr	r3, [r7, #12]
 810254a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810254e:	b29b      	uxth	r3, r3
 8102550:	3b01      	subs	r3, #1
 8102552:	b29a      	uxth	r2, r3
 8102554:	68fb      	ldr	r3, [r7, #12]
 8102556:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810255a:	68fb      	ldr	r3, [r7, #12]
 810255c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8102560:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8102562:	68fb      	ldr	r3, [r7, #12]
 8102564:	681b      	ldr	r3, [r3, #0]
 8102566:	695b      	ldr	r3, [r3, #20]
 8102568:	f003 0301 	and.w	r3, r3, #1
 810256c:	2b01      	cmp	r3, #1
 810256e:	d11a      	bne.n	81025a6 <HAL_SPI_TransmitReceive+0x2ba>
 8102570:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8102572:	2b00      	cmp	r3, #0
 8102574:	d017      	beq.n	81025a6 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102576:	68fb      	ldr	r3, [r7, #12]
 8102578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810257a:	6a3a      	ldr	r2, [r7, #32]
 810257c:	8812      	ldrh	r2, [r2, #0]
 810257e:	b292      	uxth	r2, r2
 8102580:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8102582:	68fb      	ldr	r3, [r7, #12]
 8102584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102586:	1c9a      	adds	r2, r3, #2
 8102588:	68fb      	ldr	r3, [r7, #12]
 810258a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810258c:	68fb      	ldr	r3, [r7, #12]
 810258e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8102592:	b29b      	uxth	r3, r3
 8102594:	3b01      	subs	r3, #1
 8102596:	b29a      	uxth	r2, r3
 8102598:	68fb      	ldr	r3, [r7, #12]
 810259a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 810259e:	68fb      	ldr	r3, [r7, #12]
 81025a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81025a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81025a6:	f7fe fcdb 	bl	8100f60 <HAL_GetTick>
 81025aa:	4602      	mov	r2, r0
 81025ac:	69fb      	ldr	r3, [r7, #28]
 81025ae:	1ad3      	subs	r3, r2, r3
 81025b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81025b2:	429a      	cmp	r2, r3
 81025b4:	d803      	bhi.n	81025be <HAL_SPI_TransmitReceive+0x2d2>
 81025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81025bc:	d102      	bne.n	81025c4 <HAL_SPI_TransmitReceive+0x2d8>
 81025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81025c0:	2b00      	cmp	r3, #0
 81025c2:	d114      	bne.n	81025ee <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81025c4:	68f8      	ldr	r0, [r7, #12]
 81025c6:	f000 f8b6 	bl	8102736 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81025ca:	68fb      	ldr	r3, [r7, #12]
 81025cc:	2200      	movs	r2, #0
 81025ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81025d2:	68fb      	ldr	r3, [r7, #12]
 81025d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81025d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81025dc:	68fb      	ldr	r3, [r7, #12]
 81025de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81025e2:	68fb      	ldr	r3, [r7, #12]
 81025e4:	2201      	movs	r2, #1
 81025e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81025ea:	2303      	movs	r3, #3
 81025ec:	e09f      	b.n	810272e <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81025ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81025f0:	2b00      	cmp	r3, #0
 81025f2:	d195      	bne.n	8102520 <HAL_SPI_TransmitReceive+0x234>
 81025f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81025f6:	2b00      	cmp	r3, #0
 81025f8:	d192      	bne.n	8102520 <HAL_SPI_TransmitReceive+0x234>
 81025fa:	e071      	b.n	81026e0 <HAL_SPI_TransmitReceive+0x3f4>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81025fc:	68fb      	ldr	r3, [r7, #12]
 81025fe:	681b      	ldr	r3, [r3, #0]
 8102600:	695b      	ldr	r3, [r3, #20]
 8102602:	f003 0302 	and.w	r3, r3, #2
 8102606:	2b02      	cmp	r3, #2
 8102608:	d11b      	bne.n	8102642 <HAL_SPI_TransmitReceive+0x356>
 810260a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810260c:	2b00      	cmp	r3, #0
 810260e:	d018      	beq.n	8102642 <HAL_SPI_TransmitReceive+0x356>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8102610:	68fb      	ldr	r3, [r7, #12]
 8102612:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8102614:	68fb      	ldr	r3, [r7, #12]
 8102616:	681b      	ldr	r3, [r3, #0]
 8102618:	3320      	adds	r3, #32
 810261a:	7812      	ldrb	r2, [r2, #0]
 810261c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 810261e:	68fb      	ldr	r3, [r7, #12]
 8102620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102622:	1c5a      	adds	r2, r3, #1
 8102624:	68fb      	ldr	r3, [r7, #12]
 8102626:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8102628:	68fb      	ldr	r3, [r7, #12]
 810262a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810262e:	b29b      	uxth	r3, r3
 8102630:	3b01      	subs	r3, #1
 8102632:	b29a      	uxth	r2, r3
 8102634:	68fb      	ldr	r3, [r7, #12]
 8102636:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810263a:	68fb      	ldr	r3, [r7, #12]
 810263c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8102640:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8102642:	68fb      	ldr	r3, [r7, #12]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	695b      	ldr	r3, [r3, #20]
 8102648:	f003 0301 	and.w	r3, r3, #1
 810264c:	2b01      	cmp	r3, #1
 810264e:	d11d      	bne.n	810268c <HAL_SPI_TransmitReceive+0x3a0>
 8102650:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8102652:	2b00      	cmp	r3, #0
 8102654:	d01a      	beq.n	810268c <HAL_SPI_TransmitReceive+0x3a0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102656:	68fb      	ldr	r3, [r7, #12]
 8102658:	681b      	ldr	r3, [r3, #0]
 810265a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810265e:	68fb      	ldr	r3, [r7, #12]
 8102660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102662:	7812      	ldrb	r2, [r2, #0]
 8102664:	b2d2      	uxtb	r2, r2
 8102666:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102668:	68fb      	ldr	r3, [r7, #12]
 810266a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810266c:	1c5a      	adds	r2, r3, #1
 810266e:	68fb      	ldr	r3, [r7, #12]
 8102670:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8102672:	68fb      	ldr	r3, [r7, #12]
 8102674:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8102678:	b29b      	uxth	r3, r3
 810267a:	3b01      	subs	r3, #1
 810267c:	b29a      	uxth	r2, r3
 810267e:	68fb      	ldr	r3, [r7, #12]
 8102680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8102684:	68fb      	ldr	r3, [r7, #12]
 8102686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810268a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810268c:	f7fe fc68 	bl	8100f60 <HAL_GetTick>
 8102690:	4602      	mov	r2, r0
 8102692:	69fb      	ldr	r3, [r7, #28]
 8102694:	1ad3      	subs	r3, r2, r3
 8102696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8102698:	429a      	cmp	r2, r3
 810269a:	d803      	bhi.n	81026a4 <HAL_SPI_TransmitReceive+0x3b8>
 810269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810269e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81026a2:	d102      	bne.n	81026aa <HAL_SPI_TransmitReceive+0x3be>
 81026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81026a6:	2b00      	cmp	r3, #0
 81026a8:	d114      	bne.n	81026d4 <HAL_SPI_TransmitReceive+0x3e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81026aa:	68f8      	ldr	r0, [r7, #12]
 81026ac:	f000 f843 	bl	8102736 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81026b0:	68fb      	ldr	r3, [r7, #12]
 81026b2:	2200      	movs	r2, #0
 81026b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81026b8:	68fb      	ldr	r3, [r7, #12]
 81026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81026be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81026c2:	68fb      	ldr	r3, [r7, #12]
 81026c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81026c8:	68fb      	ldr	r3, [r7, #12]
 81026ca:	2201      	movs	r2, #1
 81026cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81026d0:	2303      	movs	r3, #3
 81026d2:	e02c      	b.n	810272e <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81026d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81026d6:	2b00      	cmp	r3, #0
 81026d8:	d190      	bne.n	81025fc <HAL_SPI_TransmitReceive+0x310>
 81026da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81026dc:	2b00      	cmp	r3, #0
 81026de:	d18d      	bne.n	81025fc <HAL_SPI_TransmitReceive+0x310>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81026e2:	9300      	str	r3, [sp, #0]
 81026e4:	69fb      	ldr	r3, [r7, #28]
 81026e6:	2200      	movs	r2, #0
 81026e8:	2108      	movs	r1, #8
 81026ea:	68f8      	ldr	r0, [r7, #12]
 81026ec:	f000 f8c3 	bl	8102876 <SPI_WaitOnFlagUntilTimeout>
 81026f0:	4603      	mov	r3, r0
 81026f2:	2b00      	cmp	r3, #0
 81026f4:	d007      	beq.n	8102706 <HAL_SPI_TransmitReceive+0x41a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81026f6:	68fb      	ldr	r3, [r7, #12]
 81026f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81026fc:	f043 0220 	orr.w	r2, r3, #32
 8102700:	68fb      	ldr	r3, [r7, #12]
 8102702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8102706:	68f8      	ldr	r0, [r7, #12]
 8102708:	f000 f815 	bl	8102736 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 810270c:	68fb      	ldr	r3, [r7, #12]
 810270e:	2200      	movs	r2, #0
 8102710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8102714:	68fb      	ldr	r3, [r7, #12]
 8102716:	2201      	movs	r2, #1
 8102718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810271c:	68fb      	ldr	r3, [r7, #12]
 810271e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102722:	2b00      	cmp	r3, #0
 8102724:	d001      	beq.n	810272a <HAL_SPI_TransmitReceive+0x43e>
  {
    return HAL_ERROR;
 8102726:	2301      	movs	r3, #1
 8102728:	e001      	b.n	810272e <HAL_SPI_TransmitReceive+0x442>
  }
  return errorcode;
 810272a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 810272e:	4618      	mov	r0, r3
 8102730:	3730      	adds	r7, #48	; 0x30
 8102732:	46bd      	mov	sp, r7
 8102734:	bd80      	pop	{r7, pc}

08102736 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8102736:	b480      	push	{r7}
 8102738:	b085      	sub	sp, #20
 810273a:	af00      	add	r7, sp, #0
 810273c:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	695b      	ldr	r3, [r3, #20]
 8102744:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	681b      	ldr	r3, [r3, #0]
 810274a:	699a      	ldr	r2, [r3, #24]
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	f042 0208 	orr.w	r2, r2, #8
 8102754:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	681b      	ldr	r3, [r3, #0]
 810275a:	699a      	ldr	r2, [r3, #24]
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	681b      	ldr	r3, [r3, #0]
 8102760:	f042 0210 	orr.w	r2, r2, #16
 8102764:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	681b      	ldr	r3, [r3, #0]
 810276a:	681a      	ldr	r2, [r3, #0]
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	681b      	ldr	r3, [r3, #0]
 8102770:	f022 0201 	bic.w	r2, r2, #1
 8102774:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8102776:	687b      	ldr	r3, [r7, #4]
 8102778:	681b      	ldr	r3, [r3, #0]
 810277a:	691b      	ldr	r3, [r3, #16]
 810277c:	687a      	ldr	r2, [r7, #4]
 810277e:	6812      	ldr	r2, [r2, #0]
 8102780:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8102784:	f023 0303 	bic.w	r3, r3, #3
 8102788:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810278a:	687b      	ldr	r3, [r7, #4]
 810278c:	681b      	ldr	r3, [r3, #0]
 810278e:	689a      	ldr	r2, [r3, #8]
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8102798:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81027a0:	b2db      	uxtb	r3, r3
 81027a2:	2b04      	cmp	r3, #4
 81027a4:	d014      	beq.n	81027d0 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 81027a6:	68fb      	ldr	r3, [r7, #12]
 81027a8:	f003 0320 	and.w	r3, r3, #32
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	d00f      	beq.n	81027d0 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81027b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	681b      	ldr	r3, [r3, #0]
 81027c4:	699a      	ldr	r2, [r3, #24]
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	f042 0220 	orr.w	r2, r2, #32
 81027ce:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81027d6:	b2db      	uxtb	r3, r3
 81027d8:	2b03      	cmp	r3, #3
 81027da:	d014      	beq.n	8102806 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81027dc:	68fb      	ldr	r3, [r7, #12]
 81027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81027e2:	2b00      	cmp	r3, #0
 81027e4:	d00f      	beq.n	8102806 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81027ec:	f043 0204 	orr.w	r2, r3, #4
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81027f6:	687b      	ldr	r3, [r7, #4]
 81027f8:	681b      	ldr	r3, [r3, #0]
 81027fa:	699a      	ldr	r2, [r3, #24]
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8102804:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8102806:	68fb      	ldr	r3, [r7, #12]
 8102808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810280c:	2b00      	cmp	r3, #0
 810280e:	d00f      	beq.n	8102830 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102816:	f043 0201 	orr.w	r2, r3, #1
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8102820:	687b      	ldr	r3, [r7, #4]
 8102822:	681b      	ldr	r3, [r3, #0]
 8102824:	699a      	ldr	r2, [r3, #24]
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810282e:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8102830:	68fb      	ldr	r3, [r7, #12]
 8102832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102836:	2b00      	cmp	r3, #0
 8102838:	d00f      	beq.n	810285a <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102840:	f043 0208 	orr.w	r2, r3, #8
 8102844:	687b      	ldr	r3, [r7, #4]
 8102846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	681b      	ldr	r3, [r3, #0]
 810284e:	699a      	ldr	r2, [r3, #24]
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	681b      	ldr	r3, [r3, #0]
 8102854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102858:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	2200      	movs	r2, #0
 810285e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	2200      	movs	r2, #0
 8102866:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810286a:	bf00      	nop
 810286c:	3714      	adds	r7, #20
 810286e:	46bd      	mov	sp, r7
 8102870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102874:	4770      	bx	lr

08102876 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8102876:	b580      	push	{r7, lr}
 8102878:	b084      	sub	sp, #16
 810287a:	af00      	add	r7, sp, #0
 810287c:	60f8      	str	r0, [r7, #12]
 810287e:	60b9      	str	r1, [r7, #8]
 8102880:	603b      	str	r3, [r7, #0]
 8102882:	4613      	mov	r3, r2
 8102884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8102886:	e010      	b.n	81028aa <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102888:	f7fe fb6a 	bl	8100f60 <HAL_GetTick>
 810288c:	4602      	mov	r2, r0
 810288e:	683b      	ldr	r3, [r7, #0]
 8102890:	1ad3      	subs	r3, r2, r3
 8102892:	69ba      	ldr	r2, [r7, #24]
 8102894:	429a      	cmp	r2, r3
 8102896:	d803      	bhi.n	81028a0 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8102898:	69bb      	ldr	r3, [r7, #24]
 810289a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810289e:	d102      	bne.n	81028a6 <SPI_WaitOnFlagUntilTimeout+0x30>
 81028a0:	69bb      	ldr	r3, [r7, #24]
 81028a2:	2b00      	cmp	r3, #0
 81028a4:	d101      	bne.n	81028aa <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 81028a6:	2303      	movs	r3, #3
 81028a8:	e00f      	b.n	81028ca <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81028aa:	68fb      	ldr	r3, [r7, #12]
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	695a      	ldr	r2, [r3, #20]
 81028b0:	68bb      	ldr	r3, [r7, #8]
 81028b2:	4013      	ands	r3, r2
 81028b4:	68ba      	ldr	r2, [r7, #8]
 81028b6:	429a      	cmp	r2, r3
 81028b8:	bf0c      	ite	eq
 81028ba:	2301      	moveq	r3, #1
 81028bc:	2300      	movne	r3, #0
 81028be:	b2db      	uxtb	r3, r3
 81028c0:	461a      	mov	r2, r3
 81028c2:	79fb      	ldrb	r3, [r7, #7]
 81028c4:	429a      	cmp	r2, r3
 81028c6:	d0df      	beq.n	8102888 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81028c8:	2300      	movs	r3, #0
}
 81028ca:	4618      	mov	r0, r3
 81028cc:	3710      	adds	r7, #16
 81028ce:	46bd      	mov	sp, r7
 81028d0:	bd80      	pop	{r7, pc}

081028d2 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 81028d2:	b480      	push	{r7}
 81028d4:	b085      	sub	sp, #20
 81028d6:	af00      	add	r7, sp, #0
 81028d8:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81028de:	095b      	lsrs	r3, r3, #5
 81028e0:	3301      	adds	r3, #1
 81028e2:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	68db      	ldr	r3, [r3, #12]
 81028e8:	3301      	adds	r3, #1
 81028ea:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81028ec:	68bb      	ldr	r3, [r7, #8]
 81028ee:	3307      	adds	r3, #7
 81028f0:	08db      	lsrs	r3, r3, #3
 81028f2:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81028f4:	68bb      	ldr	r3, [r7, #8]
 81028f6:	68fa      	ldr	r2, [r7, #12]
 81028f8:	fb02 f303 	mul.w	r3, r2, r3
}
 81028fc:	4618      	mov	r0, r3
 81028fe:	3714      	adds	r7, #20
 8102900:	46bd      	mov	sp, r7
 8102902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102906:	4770      	bx	lr

08102908 <__libc_init_array>:
 8102908:	b570      	push	{r4, r5, r6, lr}
 810290a:	4d0d      	ldr	r5, [pc, #52]	; (8102940 <__libc_init_array+0x38>)
 810290c:	4c0d      	ldr	r4, [pc, #52]	; (8102944 <__libc_init_array+0x3c>)
 810290e:	1b64      	subs	r4, r4, r5
 8102910:	10a4      	asrs	r4, r4, #2
 8102912:	2600      	movs	r6, #0
 8102914:	42a6      	cmp	r6, r4
 8102916:	d109      	bne.n	810292c <__libc_init_array+0x24>
 8102918:	4d0b      	ldr	r5, [pc, #44]	; (8102948 <__libc_init_array+0x40>)
 810291a:	4c0c      	ldr	r4, [pc, #48]	; (810294c <__libc_init_array+0x44>)
 810291c:	f000 f818 	bl	8102950 <_init>
 8102920:	1b64      	subs	r4, r4, r5
 8102922:	10a4      	asrs	r4, r4, #2
 8102924:	2600      	movs	r6, #0
 8102926:	42a6      	cmp	r6, r4
 8102928:	d105      	bne.n	8102936 <__libc_init_array+0x2e>
 810292a:	bd70      	pop	{r4, r5, r6, pc}
 810292c:	f855 3b04 	ldr.w	r3, [r5], #4
 8102930:	4798      	blx	r3
 8102932:	3601      	adds	r6, #1
 8102934:	e7ee      	b.n	8102914 <__libc_init_array+0xc>
 8102936:	f855 3b04 	ldr.w	r3, [r5], #4
 810293a:	4798      	blx	r3
 810293c:	3601      	adds	r6, #1
 810293e:	e7f2      	b.n	8102926 <__libc_init_array+0x1e>
 8102940:	08102978 	.word	0x08102978
 8102944:	08102978 	.word	0x08102978
 8102948:	08102978 	.word	0x08102978
 810294c:	0810297c 	.word	0x0810297c

08102950 <_init>:
 8102950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102952:	bf00      	nop
 8102954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102956:	bc08      	pop	{r3}
 8102958:	469e      	mov	lr, r3
 810295a:	4770      	bx	lr

0810295c <_fini>:
 810295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810295e:	bf00      	nop
 8102960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102962:	bc08      	pop	{r3}
 8102964:	469e      	mov	lr, r3
 8102966:	4770      	bx	lr
