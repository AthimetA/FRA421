
FRA421_Project_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08106370  08106370  00016370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081064d0  081064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081064d4  081064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  10000000  081064d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000468  10000074  0810654c  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100004dc  0810654c  000204dc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f2dc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002200  00000000  00000000  0002f380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ad8  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009d0  00000000  00000000  00032058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003acb6  00000000  00000000  00032a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000eebe  00000000  00000000  0006d6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017cd45  00000000  00000000  0007c59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f92e1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000345c  00000000  00000000  001f9334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000074 	.word	0x10000074
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08106358 	.word	0x08106358

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000078 	.word	0x10000078
 81002dc:	08106358 	.word	0x08106358

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100380:	b480      	push	{r7}
 8100382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100384:	4b09      	ldr	r3, [pc, #36]	; (81003ac <SystemInit+0x2c>)
 8100386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810038a:	4a08      	ldr	r2, [pc, #32]	; (81003ac <SystemInit+0x2c>)
 810038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100394:	4b05      	ldr	r3, [pc, #20]	; (81003ac <SystemInit+0x2c>)
 8100396:	691b      	ldr	r3, [r3, #16]
 8100398:	4a04      	ldr	r2, [pc, #16]	; (81003ac <SystemInit+0x2c>)
 810039a:	f043 0310 	orr.w	r3, r3, #16
 810039e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81003a0:	bf00      	nop
 81003a2:	46bd      	mov	sp, r7
 81003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003a8:	4770      	bx	lr
 81003aa:	bf00      	nop
 81003ac:	e000ed00 	.word	0xe000ed00

081003b0 <MC14515_Latch>:


#include "MC14515.h"

void MC14515_Latch(MC14515Handle *mc14515,uint16_t selected_output)
{
 81003b0:	b580      	push	{r7, lr}
 81003b2:	b082      	sub	sp, #8
 81003b4:	af00      	add	r7, sp, #0
 81003b6:	6078      	str	r0, [r7, #4]
 81003b8:	460b      	mov	r3, r1
 81003ba:	807b      	strh	r3, [r7, #2]

	switch (selected_output)
 81003bc:	887b      	ldrh	r3, [r7, #2]
 81003be:	2b0f      	cmp	r3, #15
 81003c0:	f200 8234 	bhi.w	810082c <MC14515_Latch+0x47c>
 81003c4:	a201      	add	r2, pc, #4	; (adr r2, 81003cc <MC14515_Latch+0x1c>)
 81003c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81003ca:	bf00      	nop
 81003cc:	0810040d 	.word	0x0810040d
 81003d0:	0810044f 	.word	0x0810044f
 81003d4:	08100491 	.word	0x08100491
 81003d8:	081004d3 	.word	0x081004d3
 81003dc:	08100515 	.word	0x08100515
 81003e0:	08100557 	.word	0x08100557
 81003e4:	08100599 	.word	0x08100599
 81003e8:	081005db 	.word	0x081005db
 81003ec:	0810061d 	.word	0x0810061d
 81003f0:	0810065f 	.word	0x0810065f
 81003f4:	081006a1 	.word	0x081006a1
 81003f8:	081006e3 	.word	0x081006e3
 81003fc:	08100725 	.word	0x08100725
 8100400:	08100767 	.word	0x08100767
 8100404:	081007a9 	.word	0x081007a9
 8100408:	081007eb 	.word	0x081007eb
	{
		case 0:
			// Set Data 0000
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 810040c:	687b      	ldr	r3, [r7, #4]
 810040e:	6898      	ldr	r0, [r3, #8]
 8100410:	687b      	ldr	r3, [r7, #4]
 8100412:	8b9b      	ldrh	r3, [r3, #28]
 8100414:	2200      	movs	r2, #0
 8100416:	4619      	mov	r1, r3
 8100418:	f003 fcda 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 810041c:	687b      	ldr	r3, [r7, #4]
 810041e:	68d8      	ldr	r0, [r3, #12]
 8100420:	687b      	ldr	r3, [r7, #4]
 8100422:	8bdb      	ldrh	r3, [r3, #30]
 8100424:	2200      	movs	r2, #0
 8100426:	4619      	mov	r1, r3
 8100428:	f003 fcd2 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810042c:	687b      	ldr	r3, [r7, #4]
 810042e:	6918      	ldr	r0, [r3, #16]
 8100430:	687b      	ldr	r3, [r7, #4]
 8100432:	8c1b      	ldrh	r3, [r3, #32]
 8100434:	2200      	movs	r2, #0
 8100436:	4619      	mov	r1, r3
 8100438:	f003 fcca 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 810043c:	687b      	ldr	r3, [r7, #4]
 810043e:	6958      	ldr	r0, [r3, #20]
 8100440:	687b      	ldr	r3, [r7, #4]
 8100442:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100444:	2200      	movs	r2, #0
 8100446:	4619      	mov	r1, r3
 8100448:	f003 fcc2 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 810044c:	e1ee      	b.n	810082c <MC14515_Latch+0x47c>
		case 1:
			// Set Data 0001
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 810044e:	687b      	ldr	r3, [r7, #4]
 8100450:	6898      	ldr	r0, [r3, #8]
 8100452:	687b      	ldr	r3, [r7, #4]
 8100454:	8b9b      	ldrh	r3, [r3, #28]
 8100456:	2201      	movs	r2, #1
 8100458:	4619      	mov	r1, r3
 810045a:	f003 fcb9 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 810045e:	687b      	ldr	r3, [r7, #4]
 8100460:	68d8      	ldr	r0, [r3, #12]
 8100462:	687b      	ldr	r3, [r7, #4]
 8100464:	8bdb      	ldrh	r3, [r3, #30]
 8100466:	2200      	movs	r2, #0
 8100468:	4619      	mov	r1, r3
 810046a:	f003 fcb1 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810046e:	687b      	ldr	r3, [r7, #4]
 8100470:	6918      	ldr	r0, [r3, #16]
 8100472:	687b      	ldr	r3, [r7, #4]
 8100474:	8c1b      	ldrh	r3, [r3, #32]
 8100476:	2200      	movs	r2, #0
 8100478:	4619      	mov	r1, r3
 810047a:	f003 fca9 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 810047e:	687b      	ldr	r3, [r7, #4]
 8100480:	6958      	ldr	r0, [r3, #20]
 8100482:	687b      	ldr	r3, [r7, #4]
 8100484:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100486:	2200      	movs	r2, #0
 8100488:	4619      	mov	r1, r3
 810048a:	f003 fca1 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 810048e:	e1cd      	b.n	810082c <MC14515_Latch+0x47c>
		case 2:
			// Set Data 0010
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 8100490:	687b      	ldr	r3, [r7, #4]
 8100492:	6898      	ldr	r0, [r3, #8]
 8100494:	687b      	ldr	r3, [r7, #4]
 8100496:	8b9b      	ldrh	r3, [r3, #28]
 8100498:	2200      	movs	r2, #0
 810049a:	4619      	mov	r1, r3
 810049c:	f003 fc98 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81004a0:	687b      	ldr	r3, [r7, #4]
 81004a2:	68d8      	ldr	r0, [r3, #12]
 81004a4:	687b      	ldr	r3, [r7, #4]
 81004a6:	8bdb      	ldrh	r3, [r3, #30]
 81004a8:	2201      	movs	r2, #1
 81004aa:	4619      	mov	r1, r3
 81004ac:	f003 fc90 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 81004b0:	687b      	ldr	r3, [r7, #4]
 81004b2:	6918      	ldr	r0, [r3, #16]
 81004b4:	687b      	ldr	r3, [r7, #4]
 81004b6:	8c1b      	ldrh	r3, [r3, #32]
 81004b8:	2200      	movs	r2, #0
 81004ba:	4619      	mov	r1, r3
 81004bc:	f003 fc88 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 81004c0:	687b      	ldr	r3, [r7, #4]
 81004c2:	6958      	ldr	r0, [r3, #20]
 81004c4:	687b      	ldr	r3, [r7, #4]
 81004c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81004c8:	2200      	movs	r2, #0
 81004ca:	4619      	mov	r1, r3
 81004cc:	f003 fc80 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 81004d0:	e1ac      	b.n	810082c <MC14515_Latch+0x47c>
		case 3:
			// Set Data 0011
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 81004d2:	687b      	ldr	r3, [r7, #4]
 81004d4:	6898      	ldr	r0, [r3, #8]
 81004d6:	687b      	ldr	r3, [r7, #4]
 81004d8:	8b9b      	ldrh	r3, [r3, #28]
 81004da:	2201      	movs	r2, #1
 81004dc:	4619      	mov	r1, r3
 81004de:	f003 fc77 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81004e2:	687b      	ldr	r3, [r7, #4]
 81004e4:	68d8      	ldr	r0, [r3, #12]
 81004e6:	687b      	ldr	r3, [r7, #4]
 81004e8:	8bdb      	ldrh	r3, [r3, #30]
 81004ea:	2201      	movs	r2, #1
 81004ec:	4619      	mov	r1, r3
 81004ee:	f003 fc6f 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 81004f2:	687b      	ldr	r3, [r7, #4]
 81004f4:	6918      	ldr	r0, [r3, #16]
 81004f6:	687b      	ldr	r3, [r7, #4]
 81004f8:	8c1b      	ldrh	r3, [r3, #32]
 81004fa:	2200      	movs	r2, #0
 81004fc:	4619      	mov	r1, r3
 81004fe:	f003 fc67 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 8100502:	687b      	ldr	r3, [r7, #4]
 8100504:	6958      	ldr	r0, [r3, #20]
 8100506:	687b      	ldr	r3, [r7, #4]
 8100508:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810050a:	2200      	movs	r2, #0
 810050c:	4619      	mov	r1, r3
 810050e:	f003 fc5f 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 8100512:	e18b      	b.n	810082c <MC14515_Latch+0x47c>
		case 4:
			// Set Data 0100
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 8100514:	687b      	ldr	r3, [r7, #4]
 8100516:	6898      	ldr	r0, [r3, #8]
 8100518:	687b      	ldr	r3, [r7, #4]
 810051a:	8b9b      	ldrh	r3, [r3, #28]
 810051c:	2200      	movs	r2, #0
 810051e:	4619      	mov	r1, r3
 8100520:	f003 fc56 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 8100524:	687b      	ldr	r3, [r7, #4]
 8100526:	68d8      	ldr	r0, [r3, #12]
 8100528:	687b      	ldr	r3, [r7, #4]
 810052a:	8bdb      	ldrh	r3, [r3, #30]
 810052c:	2200      	movs	r2, #0
 810052e:	4619      	mov	r1, r3
 8100530:	f003 fc4e 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100534:	687b      	ldr	r3, [r7, #4]
 8100536:	6918      	ldr	r0, [r3, #16]
 8100538:	687b      	ldr	r3, [r7, #4]
 810053a:	8c1b      	ldrh	r3, [r3, #32]
 810053c:	2201      	movs	r2, #1
 810053e:	4619      	mov	r1, r3
 8100540:	f003 fc46 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 8100544:	687b      	ldr	r3, [r7, #4]
 8100546:	6958      	ldr	r0, [r3, #20]
 8100548:	687b      	ldr	r3, [r7, #4]
 810054a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810054c:	2200      	movs	r2, #0
 810054e:	4619      	mov	r1, r3
 8100550:	f003 fc3e 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 8100554:	e16a      	b.n	810082c <MC14515_Latch+0x47c>
		case 5:
			// Set Data 0101
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 8100556:	687b      	ldr	r3, [r7, #4]
 8100558:	6898      	ldr	r0, [r3, #8]
 810055a:	687b      	ldr	r3, [r7, #4]
 810055c:	8b9b      	ldrh	r3, [r3, #28]
 810055e:	2201      	movs	r2, #1
 8100560:	4619      	mov	r1, r3
 8100562:	f003 fc35 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 8100566:	687b      	ldr	r3, [r7, #4]
 8100568:	68d8      	ldr	r0, [r3, #12]
 810056a:	687b      	ldr	r3, [r7, #4]
 810056c:	8bdb      	ldrh	r3, [r3, #30]
 810056e:	2200      	movs	r2, #0
 8100570:	4619      	mov	r1, r3
 8100572:	f003 fc2d 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100576:	687b      	ldr	r3, [r7, #4]
 8100578:	6918      	ldr	r0, [r3, #16]
 810057a:	687b      	ldr	r3, [r7, #4]
 810057c:	8c1b      	ldrh	r3, [r3, #32]
 810057e:	2201      	movs	r2, #1
 8100580:	4619      	mov	r1, r3
 8100582:	f003 fc25 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 8100586:	687b      	ldr	r3, [r7, #4]
 8100588:	6958      	ldr	r0, [r3, #20]
 810058a:	687b      	ldr	r3, [r7, #4]
 810058c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810058e:	2200      	movs	r2, #0
 8100590:	4619      	mov	r1, r3
 8100592:	f003 fc1d 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 8100596:	e149      	b.n	810082c <MC14515_Latch+0x47c>
		case 6:
			// Set Data 0110
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 8100598:	687b      	ldr	r3, [r7, #4]
 810059a:	6898      	ldr	r0, [r3, #8]
 810059c:	687b      	ldr	r3, [r7, #4]
 810059e:	8b9b      	ldrh	r3, [r3, #28]
 81005a0:	2200      	movs	r2, #0
 81005a2:	4619      	mov	r1, r3
 81005a4:	f003 fc14 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81005a8:	687b      	ldr	r3, [r7, #4]
 81005aa:	68d8      	ldr	r0, [r3, #12]
 81005ac:	687b      	ldr	r3, [r7, #4]
 81005ae:	8bdb      	ldrh	r3, [r3, #30]
 81005b0:	2201      	movs	r2, #1
 81005b2:	4619      	mov	r1, r3
 81005b4:	f003 fc0c 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 81005b8:	687b      	ldr	r3, [r7, #4]
 81005ba:	6918      	ldr	r0, [r3, #16]
 81005bc:	687b      	ldr	r3, [r7, #4]
 81005be:	8c1b      	ldrh	r3, [r3, #32]
 81005c0:	2201      	movs	r2, #1
 81005c2:	4619      	mov	r1, r3
 81005c4:	f003 fc04 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 81005c8:	687b      	ldr	r3, [r7, #4]
 81005ca:	6958      	ldr	r0, [r3, #20]
 81005cc:	687b      	ldr	r3, [r7, #4]
 81005ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81005d0:	2200      	movs	r2, #0
 81005d2:	4619      	mov	r1, r3
 81005d4:	f003 fbfc 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 81005d8:	e128      	b.n	810082c <MC14515_Latch+0x47c>
		case 7:
			// Set Data 0111
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 81005da:	687b      	ldr	r3, [r7, #4]
 81005dc:	6898      	ldr	r0, [r3, #8]
 81005de:	687b      	ldr	r3, [r7, #4]
 81005e0:	8b9b      	ldrh	r3, [r3, #28]
 81005e2:	2201      	movs	r2, #1
 81005e4:	4619      	mov	r1, r3
 81005e6:	f003 fbf3 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81005ea:	687b      	ldr	r3, [r7, #4]
 81005ec:	68d8      	ldr	r0, [r3, #12]
 81005ee:	687b      	ldr	r3, [r7, #4]
 81005f0:	8bdb      	ldrh	r3, [r3, #30]
 81005f2:	2201      	movs	r2, #1
 81005f4:	4619      	mov	r1, r3
 81005f6:	f003 fbeb 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 81005fa:	687b      	ldr	r3, [r7, #4]
 81005fc:	6918      	ldr	r0, [r3, #16]
 81005fe:	687b      	ldr	r3, [r7, #4]
 8100600:	8c1b      	ldrh	r3, [r3, #32]
 8100602:	2201      	movs	r2, #1
 8100604:	4619      	mov	r1, r3
 8100606:	f003 fbe3 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 810060a:	687b      	ldr	r3, [r7, #4]
 810060c:	6958      	ldr	r0, [r3, #20]
 810060e:	687b      	ldr	r3, [r7, #4]
 8100610:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100612:	2200      	movs	r2, #0
 8100614:	4619      	mov	r1, r3
 8100616:	f003 fbdb 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 810061a:	e107      	b.n	810082c <MC14515_Latch+0x47c>
		case 8:
			// Set Data 1000
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 810061c:	687b      	ldr	r3, [r7, #4]
 810061e:	6898      	ldr	r0, [r3, #8]
 8100620:	687b      	ldr	r3, [r7, #4]
 8100622:	8b9b      	ldrh	r3, [r3, #28]
 8100624:	2200      	movs	r2, #0
 8100626:	4619      	mov	r1, r3
 8100628:	f003 fbd2 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 810062c:	687b      	ldr	r3, [r7, #4]
 810062e:	68d8      	ldr	r0, [r3, #12]
 8100630:	687b      	ldr	r3, [r7, #4]
 8100632:	8bdb      	ldrh	r3, [r3, #30]
 8100634:	2200      	movs	r2, #0
 8100636:	4619      	mov	r1, r3
 8100638:	f003 fbca 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810063c:	687b      	ldr	r3, [r7, #4]
 810063e:	6918      	ldr	r0, [r3, #16]
 8100640:	687b      	ldr	r3, [r7, #4]
 8100642:	8c1b      	ldrh	r3, [r3, #32]
 8100644:	2200      	movs	r2, #0
 8100646:	4619      	mov	r1, r3
 8100648:	f003 fbc2 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 810064c:	687b      	ldr	r3, [r7, #4]
 810064e:	6958      	ldr	r0, [r3, #20]
 8100650:	687b      	ldr	r3, [r7, #4]
 8100652:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100654:	2201      	movs	r2, #1
 8100656:	4619      	mov	r1, r3
 8100658:	f003 fbba 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 810065c:	e0e6      	b.n	810082c <MC14515_Latch+0x47c>
		case 9:
			// Set Data 1001
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 810065e:	687b      	ldr	r3, [r7, #4]
 8100660:	6898      	ldr	r0, [r3, #8]
 8100662:	687b      	ldr	r3, [r7, #4]
 8100664:	8b9b      	ldrh	r3, [r3, #28]
 8100666:	2201      	movs	r2, #1
 8100668:	4619      	mov	r1, r3
 810066a:	f003 fbb1 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 810066e:	687b      	ldr	r3, [r7, #4]
 8100670:	68d8      	ldr	r0, [r3, #12]
 8100672:	687b      	ldr	r3, [r7, #4]
 8100674:	8bdb      	ldrh	r3, [r3, #30]
 8100676:	2200      	movs	r2, #0
 8100678:	4619      	mov	r1, r3
 810067a:	f003 fba9 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810067e:	687b      	ldr	r3, [r7, #4]
 8100680:	6918      	ldr	r0, [r3, #16]
 8100682:	687b      	ldr	r3, [r7, #4]
 8100684:	8c1b      	ldrh	r3, [r3, #32]
 8100686:	2200      	movs	r2, #0
 8100688:	4619      	mov	r1, r3
 810068a:	f003 fba1 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 810068e:	687b      	ldr	r3, [r7, #4]
 8100690:	6958      	ldr	r0, [r3, #20]
 8100692:	687b      	ldr	r3, [r7, #4]
 8100694:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100696:	2201      	movs	r2, #1
 8100698:	4619      	mov	r1, r3
 810069a:	f003 fb99 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 810069e:	e0c5      	b.n	810082c <MC14515_Latch+0x47c>
		case 10:
			// Set Data 1010
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 81006a0:	687b      	ldr	r3, [r7, #4]
 81006a2:	6898      	ldr	r0, [r3, #8]
 81006a4:	687b      	ldr	r3, [r7, #4]
 81006a6:	8b9b      	ldrh	r3, [r3, #28]
 81006a8:	2200      	movs	r2, #0
 81006aa:	4619      	mov	r1, r3
 81006ac:	f003 fb90 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81006b0:	687b      	ldr	r3, [r7, #4]
 81006b2:	68d8      	ldr	r0, [r3, #12]
 81006b4:	687b      	ldr	r3, [r7, #4]
 81006b6:	8bdb      	ldrh	r3, [r3, #30]
 81006b8:	2201      	movs	r2, #1
 81006ba:	4619      	mov	r1, r3
 81006bc:	f003 fb88 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 81006c0:	687b      	ldr	r3, [r7, #4]
 81006c2:	6918      	ldr	r0, [r3, #16]
 81006c4:	687b      	ldr	r3, [r7, #4]
 81006c6:	8c1b      	ldrh	r3, [r3, #32]
 81006c8:	2200      	movs	r2, #0
 81006ca:	4619      	mov	r1, r3
 81006cc:	f003 fb80 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 81006d0:	687b      	ldr	r3, [r7, #4]
 81006d2:	6958      	ldr	r0, [r3, #20]
 81006d4:	687b      	ldr	r3, [r7, #4]
 81006d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81006d8:	2201      	movs	r2, #1
 81006da:	4619      	mov	r1, r3
 81006dc:	f003 fb78 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 81006e0:	e0a4      	b.n	810082c <MC14515_Latch+0x47c>
		case 11:
			// Set Data 1011
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 81006e2:	687b      	ldr	r3, [r7, #4]
 81006e4:	6898      	ldr	r0, [r3, #8]
 81006e6:	687b      	ldr	r3, [r7, #4]
 81006e8:	8b9b      	ldrh	r3, [r3, #28]
 81006ea:	2201      	movs	r2, #1
 81006ec:	4619      	mov	r1, r3
 81006ee:	f003 fb6f 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81006f2:	687b      	ldr	r3, [r7, #4]
 81006f4:	68d8      	ldr	r0, [r3, #12]
 81006f6:	687b      	ldr	r3, [r7, #4]
 81006f8:	8bdb      	ldrh	r3, [r3, #30]
 81006fa:	2201      	movs	r2, #1
 81006fc:	4619      	mov	r1, r3
 81006fe:	f003 fb67 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 8100702:	687b      	ldr	r3, [r7, #4]
 8100704:	6918      	ldr	r0, [r3, #16]
 8100706:	687b      	ldr	r3, [r7, #4]
 8100708:	8c1b      	ldrh	r3, [r3, #32]
 810070a:	2200      	movs	r2, #0
 810070c:	4619      	mov	r1, r3
 810070e:	f003 fb5f 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 8100712:	687b      	ldr	r3, [r7, #4]
 8100714:	6958      	ldr	r0, [r3, #20]
 8100716:	687b      	ldr	r3, [r7, #4]
 8100718:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810071a:	2201      	movs	r2, #1
 810071c:	4619      	mov	r1, r3
 810071e:	f003 fb57 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 8100722:	e083      	b.n	810082c <MC14515_Latch+0x47c>
		case 12:
			// Set Data 1100
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 8100724:	687b      	ldr	r3, [r7, #4]
 8100726:	6898      	ldr	r0, [r3, #8]
 8100728:	687b      	ldr	r3, [r7, #4]
 810072a:	8b9b      	ldrh	r3, [r3, #28]
 810072c:	2200      	movs	r2, #0
 810072e:	4619      	mov	r1, r3
 8100730:	f003 fb4e 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 8100734:	687b      	ldr	r3, [r7, #4]
 8100736:	68d8      	ldr	r0, [r3, #12]
 8100738:	687b      	ldr	r3, [r7, #4]
 810073a:	8bdb      	ldrh	r3, [r3, #30]
 810073c:	2200      	movs	r2, #0
 810073e:	4619      	mov	r1, r3
 8100740:	f003 fb46 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100744:	687b      	ldr	r3, [r7, #4]
 8100746:	6918      	ldr	r0, [r3, #16]
 8100748:	687b      	ldr	r3, [r7, #4]
 810074a:	8c1b      	ldrh	r3, [r3, #32]
 810074c:	2201      	movs	r2, #1
 810074e:	4619      	mov	r1, r3
 8100750:	f003 fb3e 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 8100754:	687b      	ldr	r3, [r7, #4]
 8100756:	6958      	ldr	r0, [r3, #20]
 8100758:	687b      	ldr	r3, [r7, #4]
 810075a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810075c:	2201      	movs	r2, #1
 810075e:	4619      	mov	r1, r3
 8100760:	f003 fb36 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 8100764:	e062      	b.n	810082c <MC14515_Latch+0x47c>
		case 13:
			// Set Data 1101
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 8100766:	687b      	ldr	r3, [r7, #4]
 8100768:	6898      	ldr	r0, [r3, #8]
 810076a:	687b      	ldr	r3, [r7, #4]
 810076c:	8b9b      	ldrh	r3, [r3, #28]
 810076e:	2201      	movs	r2, #1
 8100770:	4619      	mov	r1, r3
 8100772:	f003 fb2d 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 8100776:	687b      	ldr	r3, [r7, #4]
 8100778:	68d8      	ldr	r0, [r3, #12]
 810077a:	687b      	ldr	r3, [r7, #4]
 810077c:	8bdb      	ldrh	r3, [r3, #30]
 810077e:	2200      	movs	r2, #0
 8100780:	4619      	mov	r1, r3
 8100782:	f003 fb25 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100786:	687b      	ldr	r3, [r7, #4]
 8100788:	6918      	ldr	r0, [r3, #16]
 810078a:	687b      	ldr	r3, [r7, #4]
 810078c:	8c1b      	ldrh	r3, [r3, #32]
 810078e:	2201      	movs	r2, #1
 8100790:	4619      	mov	r1, r3
 8100792:	f003 fb1d 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 8100796:	687b      	ldr	r3, [r7, #4]
 8100798:	6958      	ldr	r0, [r3, #20]
 810079a:	687b      	ldr	r3, [r7, #4]
 810079c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810079e:	2201      	movs	r2, #1
 81007a0:	4619      	mov	r1, r3
 81007a2:	f003 fb15 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 81007a6:	e041      	b.n	810082c <MC14515_Latch+0x47c>
		case 14:
			// Set Data 1110
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 81007a8:	687b      	ldr	r3, [r7, #4]
 81007aa:	6898      	ldr	r0, [r3, #8]
 81007ac:	687b      	ldr	r3, [r7, #4]
 81007ae:	8b9b      	ldrh	r3, [r3, #28]
 81007b0:	2201      	movs	r2, #1
 81007b2:	4619      	mov	r1, r3
 81007b4:	f003 fb0c 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81007b8:	687b      	ldr	r3, [r7, #4]
 81007ba:	68d8      	ldr	r0, [r3, #12]
 81007bc:	687b      	ldr	r3, [r7, #4]
 81007be:	8bdb      	ldrh	r3, [r3, #30]
 81007c0:	2201      	movs	r2, #1
 81007c2:	4619      	mov	r1, r3
 81007c4:	f003 fb04 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 81007c8:	687b      	ldr	r3, [r7, #4]
 81007ca:	6918      	ldr	r0, [r3, #16]
 81007cc:	687b      	ldr	r3, [r7, #4]
 81007ce:	8c1b      	ldrh	r3, [r3, #32]
 81007d0:	2201      	movs	r2, #1
 81007d2:	4619      	mov	r1, r3
 81007d4:	f003 fafc 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 81007d8:	687b      	ldr	r3, [r7, #4]
 81007da:	6958      	ldr	r0, [r3, #20]
 81007dc:	687b      	ldr	r3, [r7, #4]
 81007de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81007e0:	2201      	movs	r2, #1
 81007e2:	4619      	mov	r1, r3
 81007e4:	f003 faf4 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 81007e8:	e020      	b.n	810082c <MC14515_Latch+0x47c>
		case 15:
			// Set Data 1111
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 81007ea:	687b      	ldr	r3, [r7, #4]
 81007ec:	6898      	ldr	r0, [r3, #8]
 81007ee:	687b      	ldr	r3, [r7, #4]
 81007f0:	8b9b      	ldrh	r3, [r3, #28]
 81007f2:	2201      	movs	r2, #1
 81007f4:	4619      	mov	r1, r3
 81007f6:	f003 faeb 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81007fa:	687b      	ldr	r3, [r7, #4]
 81007fc:	68d8      	ldr	r0, [r3, #12]
 81007fe:	687b      	ldr	r3, [r7, #4]
 8100800:	8bdb      	ldrh	r3, [r3, #30]
 8100802:	2201      	movs	r2, #1
 8100804:	4619      	mov	r1, r3
 8100806:	f003 fae3 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 810080a:	687b      	ldr	r3, [r7, #4]
 810080c:	6918      	ldr	r0, [r3, #16]
 810080e:	687b      	ldr	r3, [r7, #4]
 8100810:	8c1b      	ldrh	r3, [r3, #32]
 8100812:	2201      	movs	r2, #1
 8100814:	4619      	mov	r1, r3
 8100816:	f003 fadb 	bl	8103dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 810081a:	687b      	ldr	r3, [r7, #4]
 810081c:	6958      	ldr	r0, [r3, #20]
 810081e:	687b      	ldr	r3, [r7, #4]
 8100820:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100822:	2201      	movs	r2, #1
 8100824:	4619      	mov	r1, r3
 8100826:	f003 fad3 	bl	8103dd0 <HAL_GPIO_WritePin>
			break;
 810082a:	bf00      	nop
	}

	// Set ST to High ready to store data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_SET);
 810082c:	687b      	ldr	r3, [r7, #4]
 810082e:	6818      	ldr	r0, [r3, #0]
 8100830:	687b      	ldr	r3, [r7, #4]
 8100832:	8b1b      	ldrh	r3, [r3, #24]
 8100834:	2201      	movs	r2, #1
 8100836:	4619      	mov	r1, r3
 8100838:	f003 faca 	bl	8103dd0 <HAL_GPIO_WritePin>

	// Set INH to Low
	HAL_GPIO_WritePin(mc14515->INHPort, mc14515->INHPin, GPIO_PIN_RESET);
 810083c:	687b      	ldr	r3, [r7, #4]
 810083e:	6858      	ldr	r0, [r3, #4]
 8100840:	687b      	ldr	r3, [r7, #4]
 8100842:	8b5b      	ldrh	r3, [r3, #26]
 8100844:	2200      	movs	r2, #0
 8100846:	4619      	mov	r1, r3
 8100848:	f003 fac2 	bl	8103dd0 <HAL_GPIO_WritePin>

	// Latch Data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_RESET);
 810084c:	687b      	ldr	r3, [r7, #4]
 810084e:	6818      	ldr	r0, [r3, #0]
 8100850:	687b      	ldr	r3, [r7, #4]
 8100852:	8b1b      	ldrh	r3, [r3, #24]
 8100854:	2200      	movs	r2, #0
 8100856:	4619      	mov	r1, r3
 8100858:	f003 faba 	bl	8103dd0 <HAL_GPIO_WritePin>

}
 810085c:	bf00      	nop
 810085e:	3708      	adds	r7, #8
 8100860:	46bd      	mov	sp, r7
 8100862:	bd80      	pop	{r7, pc}

08100864 <MC14515_Set_Output_All_High>:

void MC14515_Set_Output_All_High(MC14515Handle *mc14515)
{
 8100864:	b580      	push	{r7, lr}
 8100866:	b082      	sub	sp, #8
 8100868:	af00      	add	r7, sp, #0
 810086a:	6078      	str	r0, [r7, #4]
	// Set INH to High
	HAL_GPIO_WritePin(mc14515->INHPort, mc14515->INHPin, GPIO_PIN_SET);
 810086c:	687b      	ldr	r3, [r7, #4]
 810086e:	6858      	ldr	r0, [r3, #4]
 8100870:	687b      	ldr	r3, [r7, #4]
 8100872:	8b5b      	ldrh	r3, [r3, #26]
 8100874:	2201      	movs	r2, #1
 8100876:	4619      	mov	r1, r3
 8100878:	f003 faaa 	bl	8103dd0 <HAL_GPIO_WritePin>

	// Set ST to High ready to store data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_SET);
 810087c:	687b      	ldr	r3, [r7, #4]
 810087e:	6818      	ldr	r0, [r3, #0]
 8100880:	687b      	ldr	r3, [r7, #4]
 8100882:	8b1b      	ldrh	r3, [r3, #24]
 8100884:	2201      	movs	r2, #1
 8100886:	4619      	mov	r1, r3
 8100888:	f003 faa2 	bl	8103dd0 <HAL_GPIO_WritePin>

	// Latch Data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_RESET);
 810088c:	687b      	ldr	r3, [r7, #4]
 810088e:	6818      	ldr	r0, [r3, #0]
 8100890:	687b      	ldr	r3, [r7, #4]
 8100892:	8b1b      	ldrh	r3, [r3, #24]
 8100894:	2200      	movs	r2, #0
 8100896:	4619      	mov	r1, r3
 8100898:	f003 fa9a 	bl	8103dd0 <HAL_GPIO_WritePin>
}
 810089c:	bf00      	nop
 810089e:	3708      	adds	r7, #8
 81008a0:	46bd      	mov	sp, r7
 81008a2:	bd80      	pop	{r7, pc}

081008a4 <MFRC522_Write_Data>:
 * Function Name: MFRC522_Write_Data
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void MFRC522_Write_Data(uint8_t addr, uint8_t val, uint16_t nss_num) {
 81008a4:	b580      	push	{r7, lr}
 81008a6:	b084      	sub	sp, #16
 81008a8:	af00      	add	r7, sp, #0
 81008aa:	4603      	mov	r3, r0
 81008ac:	71fb      	strb	r3, [r7, #7]
 81008ae:	460b      	mov	r3, r1
 81008b0:	71bb      	strb	r3, [r7, #6]
 81008b2:	4613      	mov	r3, r2
 81008b4:	80bb      	strh	r3, [r7, #4]

	uint8_t addr_bits = (((addr<<1) & 0x7E));
 81008b6:	79fb      	ldrb	r3, [r7, #7]
 81008b8:	005b      	lsls	r3, r3, #1
 81008ba:	b2db      	uxtb	r3, r3
 81008bc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 81008c0:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuff[2] = {addr_bits,val};
 81008c2:	7bfb      	ldrb	r3, [r7, #15]
 81008c4:	733b      	strb	r3, [r7, #12]
 81008c6:	79bb      	ldrb	r3, [r7, #6]
 81008c8:	737b      	strb	r3, [r7, #13]
#endif

#ifdef MC14515USE

	// Slave select Low
	MC14515_Latch(&MC14515HANDLER,nss_num);
 81008ca:	88bb      	ldrh	r3, [r7, #4]
 81008cc:	4619      	mov	r1, r3
 81008ce:	4809      	ldr	r0, [pc, #36]	; (81008f4 <MFRC522_Write_Data+0x50>)
 81008d0:	f7ff fd6e 	bl	81003b0 <MC14515_Latch>

#endif

	// Transmit Data
	HAL_SPI_Transmit(&MFRC522_PORT, TxBuff, 2, 500);
 81008d4:	f107 010c 	add.w	r1, r7, #12
 81008d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81008dc:	2202      	movs	r2, #2
 81008de:	4806      	ldr	r0, [pc, #24]	; (81008f8 <MFRC522_Write_Data+0x54>)
 81008e0:	f003 fdc4 	bl	810446c <HAL_SPI_Transmit>
#endif

#ifdef MC14515USE

	// Slave select High
	MC14515_Set_Output_All_High(&MC14515HANDLER);
 81008e4:	4803      	ldr	r0, [pc, #12]	; (81008f4 <MFRC522_Write_Data+0x50>)
 81008e6:	f7ff ffbd 	bl	8100864 <MC14515_Set_Output_All_High>

#endif

}
 81008ea:	bf00      	nop
 81008ec:	3710      	adds	r7, #16
 81008ee:	46bd      	mov	sp, r7
 81008f0:	bd80      	pop	{r7, pc}
 81008f2:	bf00      	nop
 81008f4:	10000208 	.word	0x10000208
 81008f8:	10000090 	.word	0x10000090

081008fc <MFRC522_Read_Data>:
 * Function Name: MFRC522_Read_Data
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
uint8_t MFRC522_Read_Data(uint8_t addr, uint16_t nss_num) {
 81008fc:	b580      	push	{r7, lr}
 81008fe:	b088      	sub	sp, #32
 8100900:	af02      	add	r7, sp, #8
 8100902:	4603      	mov	r3, r0
 8100904:	460a      	mov	r2, r1
 8100906:	71fb      	strb	r3, [r7, #7]
 8100908:	4613      	mov	r3, r2
 810090a:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef hal_status;

	uint8_t addr_bits = (((addr<<1) & 0x7E) | 0x80);
 810090c:	79fb      	ldrb	r3, [r7, #7]
 810090e:	005b      	lsls	r3, r3, #1
 8100910:	b25b      	sxtb	r3, r3
 8100912:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8100916:	b25b      	sxtb	r3, r3
 8100918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 810091c:	b25b      	sxtb	r3, r3
 810091e:	75bb      	strb	r3, [r7, #22]

	uint8_t Txbuff[2] = {addr_bits,0};
 8100920:	7dbb      	ldrb	r3, [r7, #22]
 8100922:	743b      	strb	r3, [r7, #16]
 8100924:	2300      	movs	r3, #0
 8100926:	747b      	strb	r3, [r7, #17]
#endif

#ifdef MC14515USE

	// Slave select Low
	MC14515_Latch(&MC14515HANDLER,nss_num);
 8100928:	88bb      	ldrh	r3, [r7, #4]
 810092a:	4619      	mov	r1, r3
 810092c:	480e      	ldr	r0, [pc, #56]	; (8100968 <MFRC522_Read_Data+0x6c>)
 810092e:	f7ff fd3f 	bl	81003b0 <MC14515_Latch>

#endif

	hal_status = HAL_SPI_TransmitReceive(&MFRC522_PORT, Txbuff, Rxbuff, 2, 500);
 8100932:	f107 020c 	add.w	r2, r7, #12
 8100936:	f107 0110 	add.w	r1, r7, #16
 810093a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 810093e:	9300      	str	r3, [sp, #0]
 8100940:	2302      	movs	r3, #2
 8100942:	480a      	ldr	r0, [pc, #40]	; (810096c <MFRC522_Read_Data+0x70>)
 8100944:	f003 ff80 	bl	8104848 <HAL_SPI_TransmitReceive>
 8100948:	4603      	mov	r3, r0
 810094a:	757b      	strb	r3, [r7, #21]

	if (hal_status == HAL_OK)
 810094c:	7d7b      	ldrb	r3, [r7, #21]
 810094e:	2b00      	cmp	r3, #0
 8100950:	d101      	bne.n	8100956 <MFRC522_Read_Data+0x5a>
	{
		rx_bits = Rxbuff[1];    // response is in the second byte
 8100952:	7b7b      	ldrb	r3, [r7, #13]
 8100954:	75fb      	strb	r3, [r7, #23]
#endif

#ifdef MC14515USE

	// Slave select High
	MC14515_Set_Output_All_High(&MC14515HANDLER);
 8100956:	4804      	ldr	r0, [pc, #16]	; (8100968 <MFRC522_Read_Data+0x6c>)
 8100958:	f7ff ff84 	bl	8100864 <MC14515_Set_Output_All_High>

#endif

	return (uint8_t) rx_bits; // return the rx bits, casting to an 8 bit int
 810095c:	7dfb      	ldrb	r3, [r7, #23]
}
 810095e:	4618      	mov	r0, r3
 8100960:	3718      	adds	r7, #24
 8100962:	46bd      	mov	sp, r7
 8100964:	bd80      	pop	{r7, pc}
 8100966:	bf00      	nop
 8100968:	10000208 	.word	0x10000208
 810096c:	10000090 	.word	0x10000090

08100970 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uint8_t reg, uint8_t mask, uint16_t nss_num)
{
 8100970:	b580      	push	{r7, lr}
 8100972:	b084      	sub	sp, #16
 8100974:	af00      	add	r7, sp, #0
 8100976:	4603      	mov	r3, r0
 8100978:	71fb      	strb	r3, [r7, #7]
 810097a:	460b      	mov	r3, r1
 810097c:	71bb      	strb	r3, [r7, #6]
 810097e:	4613      	mov	r3, r2
 8100980:	80bb      	strh	r3, [r7, #4]
	uint8_t tmp;
	tmp = MFRC522_Read_Data(reg, nss_num);
 8100982:	88ba      	ldrh	r2, [r7, #4]
 8100984:	79fb      	ldrb	r3, [r7, #7]
 8100986:	4611      	mov	r1, r2
 8100988:	4618      	mov	r0, r3
 810098a:	f7ff ffb7 	bl	81008fc <MFRC522_Read_Data>
 810098e:	4603      	mov	r3, r0
 8100990:	73fb      	strb	r3, [r7, #15]
	MFRC522_Write_Data(reg, tmp | mask, nss_num);  // set bit mask
 8100992:	7bfa      	ldrb	r2, [r7, #15]
 8100994:	79bb      	ldrb	r3, [r7, #6]
 8100996:	4313      	orrs	r3, r2
 8100998:	b2d9      	uxtb	r1, r3
 810099a:	88ba      	ldrh	r2, [r7, #4]
 810099c:	79fb      	ldrb	r3, [r7, #7]
 810099e:	4618      	mov	r0, r3
 81009a0:	f7ff ff80 	bl	81008a4 <MFRC522_Write_Data>
}
 81009a4:	bf00      	nop
 81009a6:	3710      	adds	r7, #16
 81009a8:	46bd      	mov	sp, r7
 81009aa:	bd80      	pop	{r7, pc}

081009ac <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
 */
void ClearBitMask(uint8_t reg, uint8_t mask, uint16_t nss_num)
{
 81009ac:	b580      	push	{r7, lr}
 81009ae:	b084      	sub	sp, #16
 81009b0:	af00      	add	r7, sp, #0
 81009b2:	4603      	mov	r3, r0
 81009b4:	71fb      	strb	r3, [r7, #7]
 81009b6:	460b      	mov	r3, r1
 81009b8:	71bb      	strb	r3, [r7, #6]
 81009ba:	4613      	mov	r3, r2
 81009bc:	80bb      	strh	r3, [r7, #4]
	uint8_t tmp;
	tmp = MFRC522_Read_Data(reg, nss_num);
 81009be:	88ba      	ldrh	r2, [r7, #4]
 81009c0:	79fb      	ldrb	r3, [r7, #7]
 81009c2:	4611      	mov	r1, r2
 81009c4:	4618      	mov	r0, r3
 81009c6:	f7ff ff99 	bl	81008fc <MFRC522_Read_Data>
 81009ca:	4603      	mov	r3, r0
 81009cc:	73fb      	strb	r3, [r7, #15]
	MFRC522_Write_Data(reg, tmp & (~mask), nss_num);  // clear bit mask
 81009ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 81009d2:	43db      	mvns	r3, r3
 81009d4:	b25a      	sxtb	r2, r3
 81009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81009da:	4013      	ands	r3, r2
 81009dc:	b25b      	sxtb	r3, r3
 81009de:	b2d9      	uxtb	r1, r3
 81009e0:	88ba      	ldrh	r2, [r7, #4]
 81009e2:	79fb      	ldrb	r3, [r7, #7]
 81009e4:	4618      	mov	r0, r3
 81009e6:	f7ff ff5d 	bl	81008a4 <MFRC522_Write_Data>
}
 81009ea:	bf00      	nop
 81009ec:	3710      	adds	r7, #16
 81009ee:	46bd      	mov	sp, r7
 81009f0:	bd80      	pop	{r7, pc}

081009f2 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(uint16_t nss_num)
{
 81009f2:	b580      	push	{r7, lr}
 81009f4:	b082      	sub	sp, #8
 81009f6:	af00      	add	r7, sp, #0
 81009f8:	4603      	mov	r3, r0
 81009fa:	80fb      	strh	r3, [r7, #6]
	SetBitMask(TxControlReg, 0x03,nss_num);
 81009fc:	88fb      	ldrh	r3, [r7, #6]
 81009fe:	461a      	mov	r2, r3
 8100a00:	2103      	movs	r1, #3
 8100a02:	2014      	movs	r0, #20
 8100a04:	f7ff ffb4 	bl	8100970 <SetBitMask>
}
 8100a08:	bf00      	nop
 8100a0a:	3708      	adds	r7, #8
 8100a0c:	46bd      	mov	sp, r7
 8100a0e:	bd80      	pop	{r7, pc}

08100a10 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(uint16_t nss_num)
{
 8100a10:	b580      	push	{r7, lr}
 8100a12:	b082      	sub	sp, #8
 8100a14:	af00      	add	r7, sp, #0
 8100a16:	4603      	mov	r3, r0
 8100a18:	80fb      	strh	r3, [r7, #6]
	MFRC522_Write_Data(CommandReg, PCD_RESETPHASE, nss_num);
 8100a1a:	88fb      	ldrh	r3, [r7, #6]
 8100a1c:	461a      	mov	r2, r3
 8100a1e:	210f      	movs	r1, #15
 8100a20:	2001      	movs	r0, #1
 8100a22:	f7ff ff3f 	bl	81008a4 <MFRC522_Write_Data>
}
 8100a26:	bf00      	nop
 8100a28:	3708      	adds	r7, #8
 8100a2a:	46bd      	mov	sp, r7
 8100a2c:	bd80      	pop	{r7, pc}

08100a2e <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Init(uint16_t nss_num)
{
 8100a2e:	b580      	push	{r7, lr}
 8100a30:	b082      	sub	sp, #8
 8100a32:	af00      	add	r7, sp, #0
 8100a34:	4603      	mov	r3, r0
 8100a36:	80fb      	strh	r3, [r7, #6]
	MFRC522_Reset(nss_num);
 8100a38:	88fb      	ldrh	r3, [r7, #6]
 8100a3a:	4618      	mov	r0, r3
 8100a3c:	f7ff ffe8 	bl	8100a10 <MFRC522_Reset>

	// Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	MFRC522_Write_Data(TModeReg, 0x80, nss_num); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8100a40:	88fb      	ldrh	r3, [r7, #6]
 8100a42:	461a      	mov	r2, r3
 8100a44:	2180      	movs	r1, #128	; 0x80
 8100a46:	202a      	movs	r0, #42	; 0x2a
 8100a48:	f7ff ff2c 	bl	81008a4 <MFRC522_Write_Data>
	MFRC522_Write_Data(TPrescalerReg, 0xA9, nss_num); //0x34); // TModeReg[3..0] + TPrescalerReg
 8100a4c:	88fb      	ldrh	r3, [r7, #6]
 8100a4e:	461a      	mov	r2, r3
 8100a50:	21a9      	movs	r1, #169	; 0xa9
 8100a52:	202b      	movs	r0, #43	; 0x2b
 8100a54:	f7ff ff26 	bl	81008a4 <MFRC522_Write_Data>
	MFRC522_Write_Data(TReloadRegL, 0x03, nss_num); //30);
 8100a58:	88fb      	ldrh	r3, [r7, #6]
 8100a5a:	461a      	mov	r2, r3
 8100a5c:	2103      	movs	r1, #3
 8100a5e:	202d      	movs	r0, #45	; 0x2d
 8100a60:	f7ff ff20 	bl	81008a4 <MFRC522_Write_Data>
	MFRC522_Write_Data(TReloadRegH, 0xE8, nss_num); //0);
 8100a64:	88fb      	ldrh	r3, [r7, #6]
 8100a66:	461a      	mov	r2, r3
 8100a68:	21e8      	movs	r1, #232	; 0xe8
 8100a6a:	202c      	movs	r0, #44	; 0x2c
 8100a6c:	f7ff ff1a 	bl	81008a4 <MFRC522_Write_Data>
	MFRC522_Write_Data(TxAutoReg, 0x40, nss_num);     // force 100% ASK modulation
 8100a70:	88fb      	ldrh	r3, [r7, #6]
 8100a72:	461a      	mov	r2, r3
 8100a74:	2140      	movs	r1, #64	; 0x40
 8100a76:	2015      	movs	r0, #21
 8100a78:	f7ff ff14 	bl	81008a4 <MFRC522_Write_Data>
	MFRC522_Write_Data(ModeReg, 0x3D, nss_num);       // CRC Initial value 0x6363
 8100a7c:	88fb      	ldrh	r3, [r7, #6]
 8100a7e:	461a      	mov	r2, r3
 8100a80:	213d      	movs	r1, #61	; 0x3d
 8100a82:	2011      	movs	r0, #17
 8100a84:	f7ff ff0e 	bl	81008a4 <MFRC522_Write_Data>
	////  MFRC522_Write_Data(DivlEnReg, 0x14);
	//  MFRC522_Write_Data(DivlEnReg, 0x00, nss_num);
	//  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);

	// turn antenna on
	AntennaOn(nss_num);
 8100a88:	88fb      	ldrh	r3, [r7, #6]
 8100a8a:	4618      	mov	r0, r3
 8100a8c:	f7ff ffb1 	bl	81009f2 <AntennaOn>
	//  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
}
 8100a90:	bf00      	nop
 8100a92:	3708      	adds	r7, #8
 8100a94:	46bd      	mov	sp, r7
 8100a96:	bd80      	pop	{r7, pc}

08100a98 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType, uint16_t nss_num)
{
 8100a98:	b580      	push	{r7, lr}
 8100a9a:	b086      	sub	sp, #24
 8100a9c:	af02      	add	r7, sp, #8
 8100a9e:	4603      	mov	r3, r0
 8100aa0:	6039      	str	r1, [r7, #0]
 8100aa2:	71fb      	strb	r3, [r7, #7]
 8100aa4:	4613      	mov	r3, r2
 8100aa6:	80bb      	strh	r3, [r7, #4]
	uint8_t status;
	uint backBits; // The received data bits

	MFRC522_Write_Data(BitFramingReg, 0x07, nss_num);   // TxLastBists = BitFramingReg[2..0]
 8100aa8:	88bb      	ldrh	r3, [r7, #4]
 8100aaa:	461a      	mov	r2, r3
 8100aac:	2107      	movs	r1, #7
 8100aae:	200d      	movs	r0, #13
 8100ab0:	f7ff fef8 	bl	81008a4 <MFRC522_Write_Data>

	TagType[0] = reqMode;
 8100ab4:	683b      	ldr	r3, [r7, #0]
 8100ab6:	79fa      	ldrb	r2, [r7, #7]
 8100ab8:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits, nss_num);
 8100aba:	88bb      	ldrh	r3, [r7, #4]
 8100abc:	9301      	str	r3, [sp, #4]
 8100abe:	f107 0308 	add.w	r3, r7, #8
 8100ac2:	9300      	str	r3, [sp, #0]
 8100ac4:	683b      	ldr	r3, [r7, #0]
 8100ac6:	2201      	movs	r2, #1
 8100ac8:	6839      	ldr	r1, [r7, #0]
 8100aca:	200c      	movs	r0, #12
 8100acc:	f000 f80f 	bl	8100aee <MFRC522_ToCard>
 8100ad0:	4603      	mov	r3, r0
 8100ad2:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8100ad4:	7bfb      	ldrb	r3, [r7, #15]
 8100ad6:	2b00      	cmp	r3, #0
 8100ad8:	d102      	bne.n	8100ae0 <MFRC522_Request+0x48>
 8100ada:	68bb      	ldr	r3, [r7, #8]
 8100adc:	2b10      	cmp	r3, #16
 8100ade:	d001      	beq.n	8100ae4 <MFRC522_Request+0x4c>
		status = MI_ERR;
 8100ae0:	2302      	movs	r3, #2
 8100ae2:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8100ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8100ae6:	4618      	mov	r0, r3
 8100ae8:	3710      	adds	r7, #16
 8100aea:	46bd      	mov	sp, r7
 8100aec:	bd80      	pop	{r7, pc}

08100aee <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen, uint16_t nss_num)
{
 8100aee:	b590      	push	{r4, r7, lr}
 8100af0:	b089      	sub	sp, #36	; 0x24
 8100af2:	af00      	add	r7, sp, #0
 8100af4:	60b9      	str	r1, [r7, #8]
 8100af6:	607b      	str	r3, [r7, #4]
 8100af8:	4603      	mov	r3, r0
 8100afa:	73fb      	strb	r3, [r7, #15]
 8100afc:	4613      	mov	r3, r2
 8100afe:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8100b00:	2302      	movs	r3, #2
 8100b02:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn = 0x00;
 8100b04:	2300      	movs	r3, #0
 8100b06:	77bb      	strb	r3, [r7, #30]
	uint8_t waitIRq = 0x00;
 8100b08:	2300      	movs	r3, #0
 8100b0a:	777b      	strb	r3, [r7, #29]
	uint8_t lastBits;
	uint8_t n;
	uint i;

	switch (command)
 8100b0c:	7bfb      	ldrb	r3, [r7, #15]
 8100b0e:	2b0c      	cmp	r3, #12
 8100b10:	d006      	beq.n	8100b20 <MFRC522_ToCard+0x32>
 8100b12:	2b0e      	cmp	r3, #14
 8100b14:	d109      	bne.n	8100b2a <MFRC522_ToCard+0x3c>
	{
	case PCD_AUTHENT:     // Certification cards close
	{
		irqEn = 0x12;
 8100b16:	2312      	movs	r3, #18
 8100b18:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 8100b1a:	2310      	movs	r3, #16
 8100b1c:	777b      	strb	r3, [r7, #29]
		break;
 8100b1e:	e005      	b.n	8100b2c <MFRC522_ToCard+0x3e>
	}
	case PCD_TRANSCEIVE:  // Transmit FIFO data
	{
		irqEn = 0x77;
 8100b20:	2377      	movs	r3, #119	; 0x77
 8100b22:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 8100b24:	2330      	movs	r3, #48	; 0x30
 8100b26:	777b      	strb	r3, [r7, #29]
		break;
 8100b28:	e000      	b.n	8100b2c <MFRC522_ToCard+0x3e>
	}
	default:
		break;
 8100b2a:	bf00      	nop
	}

	MFRC522_Write_Data(CommIEnReg, irqEn|0x80, nss_num);  // Interrupt request
 8100b2c:	7fbb      	ldrb	r3, [r7, #30]
 8100b2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8100b32:	b2db      	uxtb	r3, r3
 8100b34:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8100b36:	4619      	mov	r1, r3
 8100b38:	2002      	movs	r0, #2
 8100b3a:	f7ff feb3 	bl	81008a4 <MFRC522_Write_Data>
	//  MFRC522_Write_Data(CommIEnReg, 0x7F); //Edit Some

	ClearBitMask(CommIrqReg, 0x80, nss_num);         // Clear all interrupt request bit
 8100b3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100b40:	461a      	mov	r2, r3
 8100b42:	2180      	movs	r1, #128	; 0x80
 8100b44:	2004      	movs	r0, #4
 8100b46:	f7ff ff31 	bl	81009ac <ClearBitMask>

	SetBitMask(FIFOLevelReg, 0x80, nss_num);         // FlushBuffer=1, FIFO Initialization
 8100b4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100b4c:	461a      	mov	r2, r3
 8100b4e:	2180      	movs	r1, #128	; 0x80
 8100b50:	200a      	movs	r0, #10
 8100b52:	f7ff ff0d 	bl	8100970 <SetBitMask>


	MFRC522_Write_Data(CommandReg, PCD_IDLE, nss_num);    // NO action; Cancel the current command
 8100b56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100b58:	461a      	mov	r2, r3
 8100b5a:	2100      	movs	r1, #0
 8100b5c:	2001      	movs	r0, #1
 8100b5e:	f7ff fea1 	bl	81008a4 <MFRC522_Write_Data>

	// Writing data to the FIFO
	for (i=0; i<sendLen; i++)
 8100b62:	2300      	movs	r3, #0
 8100b64:	61bb      	str	r3, [r7, #24]
 8100b66:	e00b      	b.n	8100b80 <MFRC522_ToCard+0x92>
	{
		MFRC522_Write_Data(FIFODataReg, sendData[i], nss_num);
 8100b68:	68ba      	ldr	r2, [r7, #8]
 8100b6a:	69bb      	ldr	r3, [r7, #24]
 8100b6c:	4413      	add	r3, r2
 8100b6e:	781b      	ldrb	r3, [r3, #0]
 8100b70:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8100b72:	4619      	mov	r1, r3
 8100b74:	2009      	movs	r0, #9
 8100b76:	f7ff fe95 	bl	81008a4 <MFRC522_Write_Data>
	for (i=0; i<sendLen; i++)
 8100b7a:	69bb      	ldr	r3, [r7, #24]
 8100b7c:	3301      	adds	r3, #1
 8100b7e:	61bb      	str	r3, [r7, #24]
 8100b80:	7bbb      	ldrb	r3, [r7, #14]
 8100b82:	69ba      	ldr	r2, [r7, #24]
 8100b84:	429a      	cmp	r2, r3
 8100b86:	d3ef      	bcc.n	8100b68 <MFRC522_ToCard+0x7a>
	}

	// Execute the command
	MFRC522_Write_Data(CommandReg, command, nss_num);
 8100b88:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8100b8a:	7bfb      	ldrb	r3, [r7, #15]
 8100b8c:	4619      	mov	r1, r3
 8100b8e:	2001      	movs	r0, #1
 8100b90:	f7ff fe88 	bl	81008a4 <MFRC522_Write_Data>
	if (command == PCD_TRANSCEIVE)
 8100b94:	7bfb      	ldrb	r3, [r7, #15]
 8100b96:	2b0c      	cmp	r3, #12
 8100b98:	d105      	bne.n	8100ba6 <MFRC522_ToCard+0xb8>
	{
		SetBitMask(BitFramingReg, 0x80, nss_num);      // StartSend=1,transmission of data starts
 8100b9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100b9c:	461a      	mov	r2, r3
 8100b9e:	2180      	movs	r1, #128	; 0x80
 8100ba0:	200d      	movs	r0, #13
 8100ba2:	f7ff fee5 	bl	8100970 <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8100ba6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8100baa:	61bb      	str	r3, [r7, #24]
	do
	{
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_Read_Data(CommIrqReg, nss_num);
 8100bac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100bae:	4619      	mov	r1, r3
 8100bb0:	2004      	movs	r0, #4
 8100bb2:	f7ff fea3 	bl	81008fc <MFRC522_Read_Data>
 8100bb6:	4603      	mov	r3, r0
 8100bb8:	773b      	strb	r3, [r7, #28]
		i--;
 8100bba:	69bb      	ldr	r3, [r7, #24]
 8100bbc:	3b01      	subs	r3, #1
 8100bbe:	61bb      	str	r3, [r7, #24]
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8100bc0:	69bb      	ldr	r3, [r7, #24]
 8100bc2:	2b00      	cmp	r3, #0
 8100bc4:	d00a      	beq.n	8100bdc <MFRC522_ToCard+0xee>
 8100bc6:	7f3b      	ldrb	r3, [r7, #28]
 8100bc8:	f003 0301 	and.w	r3, r3, #1
 8100bcc:	2b00      	cmp	r3, #0
 8100bce:	d105      	bne.n	8100bdc <MFRC522_ToCard+0xee>
 8100bd0:	7f3a      	ldrb	r2, [r7, #28]
 8100bd2:	7f7b      	ldrb	r3, [r7, #29]
 8100bd4:	4013      	ands	r3, r2
 8100bd6:	b2db      	uxtb	r3, r3
 8100bd8:	2b00      	cmp	r3, #0
 8100bda:	d0e7      	beq.n	8100bac <MFRC522_ToCard+0xbe>

	ClearBitMask(BitFramingReg, 0x80, nss_num);      // StartSend=0
 8100bdc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100bde:	461a      	mov	r2, r3
 8100be0:	2180      	movs	r1, #128	; 0x80
 8100be2:	200d      	movs	r0, #13
 8100be4:	f7ff fee2 	bl	81009ac <ClearBitMask>

	if (i != 0)
 8100be8:	69bb      	ldr	r3, [r7, #24]
 8100bea:	2b00      	cmp	r3, #0
 8100bec:	d05a      	beq.n	8100ca4 <MFRC522_ToCard+0x1b6>
	{
		if(!(MFRC522_Read_Data(ErrorReg, nss_num) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8100bee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100bf0:	4619      	mov	r1, r3
 8100bf2:	2006      	movs	r0, #6
 8100bf4:	f7ff fe82 	bl	81008fc <MFRC522_Read_Data>
 8100bf8:	4603      	mov	r3, r0
 8100bfa:	f003 031b 	and.w	r3, r3, #27
 8100bfe:	2b00      	cmp	r3, #0
 8100c00:	d14e      	bne.n	8100ca0 <MFRC522_ToCard+0x1b2>
		{
			status = MI_OK;
 8100c02:	2300      	movs	r3, #0
 8100c04:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01)
 8100c06:	7f3a      	ldrb	r2, [r7, #28]
 8100c08:	7fbb      	ldrb	r3, [r7, #30]
 8100c0a:	4013      	ands	r3, r2
 8100c0c:	b2db      	uxtb	r3, r3
 8100c0e:	f003 0301 	and.w	r3, r3, #1
 8100c12:	2b00      	cmp	r3, #0
 8100c14:	d001      	beq.n	8100c1a <MFRC522_ToCard+0x12c>
			{
				status = MI_NOTAGERR;             // ??
 8100c16:	2301      	movs	r3, #1
 8100c18:	77fb      	strb	r3, [r7, #31]
			}

			if (command == PCD_TRANSCEIVE)
 8100c1a:	7bfb      	ldrb	r3, [r7, #15]
 8100c1c:	2b0c      	cmp	r3, #12
 8100c1e:	d141      	bne.n	8100ca4 <MFRC522_ToCard+0x1b6>
			{
				n = MFRC522_Read_Data(FIFOLevelReg, nss_num);
 8100c20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100c22:	4619      	mov	r1, r3
 8100c24:	200a      	movs	r0, #10
 8100c26:	f7ff fe69 	bl	81008fc <MFRC522_Read_Data>
 8100c2a:	4603      	mov	r3, r0
 8100c2c:	773b      	strb	r3, [r7, #28]
				lastBits = MFRC522_Read_Data(ControlReg, nss_num) & 0x07;
 8100c2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100c30:	4619      	mov	r1, r3
 8100c32:	200c      	movs	r0, #12
 8100c34:	f7ff fe62 	bl	81008fc <MFRC522_Read_Data>
 8100c38:	4603      	mov	r3, r0
 8100c3a:	f003 0307 	and.w	r3, r3, #7
 8100c3e:	75fb      	strb	r3, [r7, #23]
				if (lastBits)
 8100c40:	7dfb      	ldrb	r3, [r7, #23]
 8100c42:	2b00      	cmp	r3, #0
 8100c44:	d008      	beq.n	8100c58 <MFRC522_ToCard+0x16a>
				{
					*backLen = (n-1)*8 + lastBits;
 8100c46:	7f3b      	ldrb	r3, [r7, #28]
 8100c48:	3b01      	subs	r3, #1
 8100c4a:	00da      	lsls	r2, r3, #3
 8100c4c:	7dfb      	ldrb	r3, [r7, #23]
 8100c4e:	4413      	add	r3, r2
 8100c50:	461a      	mov	r2, r3
 8100c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100c54:	601a      	str	r2, [r3, #0]
 8100c56:	e004      	b.n	8100c62 <MFRC522_ToCard+0x174>
				}
				else
				{
					*backLen = n*8;
 8100c58:	7f3b      	ldrb	r3, [r7, #28]
 8100c5a:	00db      	lsls	r3, r3, #3
 8100c5c:	461a      	mov	r2, r3
 8100c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100c60:	601a      	str	r2, [r3, #0]
				}

				if (n == 0)
 8100c62:	7f3b      	ldrb	r3, [r7, #28]
 8100c64:	2b00      	cmp	r3, #0
 8100c66:	d101      	bne.n	8100c6c <MFRC522_ToCard+0x17e>
				{
					n = 1;
 8100c68:	2301      	movs	r3, #1
 8100c6a:	773b      	strb	r3, [r7, #28]
				}
				if (n > MAX_LEN)
 8100c6c:	7f3b      	ldrb	r3, [r7, #28]
 8100c6e:	2b10      	cmp	r3, #16
 8100c70:	d901      	bls.n	8100c76 <MFRC522_ToCard+0x188>
				{
					n = MAX_LEN;
 8100c72:	2310      	movs	r3, #16
 8100c74:	773b      	strb	r3, [r7, #28]
				}

				// Reading the received data in FIFO
				for (i=0; i<n; i++)
 8100c76:	2300      	movs	r3, #0
 8100c78:	61bb      	str	r3, [r7, #24]
 8100c7a:	e00c      	b.n	8100c96 <MFRC522_ToCard+0x1a8>
				{
					backData[i] = MFRC522_Read_Data(FIFODataReg, nss_num);
 8100c7c:	687a      	ldr	r2, [r7, #4]
 8100c7e:	69bb      	ldr	r3, [r7, #24]
 8100c80:	18d4      	adds	r4, r2, r3
 8100c82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100c84:	4619      	mov	r1, r3
 8100c86:	2009      	movs	r0, #9
 8100c88:	f7ff fe38 	bl	81008fc <MFRC522_Read_Data>
 8100c8c:	4603      	mov	r3, r0
 8100c8e:	7023      	strb	r3, [r4, #0]
				for (i=0; i<n; i++)
 8100c90:	69bb      	ldr	r3, [r7, #24]
 8100c92:	3301      	adds	r3, #1
 8100c94:	61bb      	str	r3, [r7, #24]
 8100c96:	7f3b      	ldrb	r3, [r7, #28]
 8100c98:	69ba      	ldr	r2, [r7, #24]
 8100c9a:	429a      	cmp	r2, r3
 8100c9c:	d3ee      	bcc.n	8100c7c <MFRC522_ToCard+0x18e>
 8100c9e:	e001      	b.n	8100ca4 <MFRC522_ToCard+0x1b6>
				}
			}
		}
		else {
			//printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			status = MI_ERR;
 8100ca0:	2302      	movs	r3, #2
 8100ca2:	77fb      	strb	r3, [r7, #31]
	}
	else {
		//printf("~~~ request timed out\r\n");
	}

	return status;
 8100ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8100ca6:	4618      	mov	r0, r3
 8100ca8:	3724      	adds	r7, #36	; 0x24
 8100caa:	46bd      	mov	sp, r7
 8100cac:	bd90      	pop	{r4, r7, pc}

08100cae <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum, uint16_t nss_num)
{
 8100cae:	b580      	push	{r7, lr}
 8100cb0:	b086      	sub	sp, #24
 8100cb2:	af02      	add	r7, sp, #8
 8100cb4:	6078      	str	r0, [r7, #4]
 8100cb6:	460b      	mov	r3, r1
 8100cb8:	807b      	strh	r3, [r7, #2]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
 8100cba:	2300      	movs	r3, #0
 8100cbc:	737b      	strb	r3, [r7, #13]
	uint unLen;


	//ClearBitMask(Status2Reg, 0x08);		//TempSensclear
	//ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	MFRC522_Write_Data(BitFramingReg, 0x00, nss_num);		//TxLastBists = BitFramingReg[2..0]
 8100cbe:	887b      	ldrh	r3, [r7, #2]
 8100cc0:	461a      	mov	r2, r3
 8100cc2:	2100      	movs	r1, #0
 8100cc4:	200d      	movs	r0, #13
 8100cc6:	f7ff fded 	bl	81008a4 <MFRC522_Write_Data>

	serNum[0] = PICC_ANTICOLL;
 8100cca:	687b      	ldr	r3, [r7, #4]
 8100ccc:	2293      	movs	r2, #147	; 0x93
 8100cce:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8100cd0:	687b      	ldr	r3, [r7, #4]
 8100cd2:	3301      	adds	r3, #1
 8100cd4:	2220      	movs	r2, #32
 8100cd6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen, nss_num);
 8100cd8:	887b      	ldrh	r3, [r7, #2]
 8100cda:	9301      	str	r3, [sp, #4]
 8100cdc:	f107 0308 	add.w	r3, r7, #8
 8100ce0:	9300      	str	r3, [sp, #0]
 8100ce2:	687b      	ldr	r3, [r7, #4]
 8100ce4:	2202      	movs	r2, #2
 8100ce6:	6879      	ldr	r1, [r7, #4]
 8100ce8:	200c      	movs	r0, #12
 8100cea:	f7ff ff00 	bl	8100aee <MFRC522_ToCard>
 8100cee:	4603      	mov	r3, r0
 8100cf0:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK)
 8100cf2:	7bfb      	ldrb	r3, [r7, #15]
 8100cf4:	2b00      	cmp	r3, #0
 8100cf6:	d118      	bne.n	8100d2a <MFRC522_Anticoll+0x7c>
	{
		//Check card serial number
		for (i=0; i<4; i++)
 8100cf8:	2300      	movs	r3, #0
 8100cfa:	73bb      	strb	r3, [r7, #14]
 8100cfc:	e009      	b.n	8100d12 <MFRC522_Anticoll+0x64>
		{
			serNumCheck ^= serNum[i];
 8100cfe:	7bbb      	ldrb	r3, [r7, #14]
 8100d00:	687a      	ldr	r2, [r7, #4]
 8100d02:	4413      	add	r3, r2
 8100d04:	781a      	ldrb	r2, [r3, #0]
 8100d06:	7b7b      	ldrb	r3, [r7, #13]
 8100d08:	4053      	eors	r3, r2
 8100d0a:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8100d0c:	7bbb      	ldrb	r3, [r7, #14]
 8100d0e:	3301      	adds	r3, #1
 8100d10:	73bb      	strb	r3, [r7, #14]
 8100d12:	7bbb      	ldrb	r3, [r7, #14]
 8100d14:	2b03      	cmp	r3, #3
 8100d16:	d9f2      	bls.n	8100cfe <MFRC522_Anticoll+0x50>
		}
		if (serNumCheck != serNum[i])
 8100d18:	7bbb      	ldrb	r3, [r7, #14]
 8100d1a:	687a      	ldr	r2, [r7, #4]
 8100d1c:	4413      	add	r3, r2
 8100d1e:	781b      	ldrb	r3, [r3, #0]
 8100d20:	7b7a      	ldrb	r2, [r7, #13]
 8100d22:	429a      	cmp	r2, r3
 8100d24:	d001      	beq.n	8100d2a <MFRC522_Anticoll+0x7c>
		{
			status = MI_ERR;
 8100d26:	2302      	movs	r3, #2
 8100d28:	73fb      	strb	r3, [r7, #15]
		}
	}

	//SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

	return status;
 8100d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8100d2c:	4618      	mov	r0, r3
 8100d2e:	3710      	adds	r7, #16
 8100d30:	46bd      	mov	sp, r7
 8100d32:	bd80      	pop	{r7, pc}

08100d34 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8100d34:	b590      	push	{r4, r7, lr}
 8100d36:	b087      	sub	sp, #28
 8100d38:	af00      	add	r7, sp, #0

	/* USER CODE END 1 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8100d3a:	4b71      	ldr	r3, [pc, #452]	; (8100f00 <main+0x1cc>)
 8100d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d40:	4a6f      	ldr	r2, [pc, #444]	; (8100f00 <main+0x1cc>)
 8100d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d4a:	4b6d      	ldr	r3, [pc, #436]	; (8100f00 <main+0x1cc>)
 8100d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100d54:	607b      	str	r3, [r7, #4]
 8100d56:	687b      	ldr	r3, [r7, #4]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100d58:	2001      	movs	r0, #1
 8100d5a:	f003 f86d 	bl	8103e38 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8100d5e:	f003 f8f7 	bl	8103f50 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100d62:	2201      	movs	r2, #1
 8100d64:	2102      	movs	r1, #2
 8100d66:	2000      	movs	r0, #0
 8100d68:	f003 f878 	bl	8103e5c <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100d6c:	4b65      	ldr	r3, [pc, #404]	; (8100f04 <main+0x1d0>)
 8100d6e:	681b      	ldr	r3, [r3, #0]
 8100d70:	091b      	lsrs	r3, r3, #4
 8100d72:	f003 030f 	and.w	r3, r3, #15
 8100d76:	2b07      	cmp	r3, #7
 8100d78:	d108      	bne.n	8100d8c <main+0x58>
 8100d7a:	4b63      	ldr	r3, [pc, #396]	; (8100f08 <main+0x1d4>)
 8100d7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100d80:	4a61      	ldr	r2, [pc, #388]	; (8100f08 <main+0x1d4>)
 8100d82:	f043 0301 	orr.w	r3, r3, #1
 8100d86:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100d8a:	e007      	b.n	8100d9c <main+0x68>
 8100d8c:	4b5e      	ldr	r3, [pc, #376]	; (8100f08 <main+0x1d4>)
 8100d8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100d92:	4a5d      	ldr	r2, [pc, #372]	; (8100f08 <main+0x1d4>)
 8100d94:	f043 0301 	orr.w	r3, r3, #1
 8100d98:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8100d9c:	f000 fd66 	bl	810186c <HAL_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8100da0:	f000 fa8c 	bl	81012bc <MX_GPIO_Init>
	MX_DMA_Init();
 8100da4:	f000 fa62 	bl	810126c <MX_DMA_Init>
	MX_SPI1_Init();
 8100da8:	f000 fa0a 	bl	81011c0 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	// MC14515 Handle Init
	MC14515.STPort = GPIOC;
 8100dac:	4b57      	ldr	r3, [pc, #348]	; (8100f0c <main+0x1d8>)
 8100dae:	4a58      	ldr	r2, [pc, #352]	; (8100f10 <main+0x1dc>)
 8100db0:	601a      	str	r2, [r3, #0]
	MC14515.STPin = GPIO_PIN_6;
 8100db2:	4b56      	ldr	r3, [pc, #344]	; (8100f0c <main+0x1d8>)
 8100db4:	2240      	movs	r2, #64	; 0x40
 8100db6:	831a      	strh	r2, [r3, #24]
	MC14515.INHPort = GPIOB;
 8100db8:	4b54      	ldr	r3, [pc, #336]	; (8100f0c <main+0x1d8>)
 8100dba:	4a56      	ldr	r2, [pc, #344]	; (8100f14 <main+0x1e0>)
 8100dbc:	605a      	str	r2, [r3, #4]
	MC14515.INHPin = GPIO_PIN_8;
 8100dbe:	4b53      	ldr	r3, [pc, #332]	; (8100f0c <main+0x1d8>)
 8100dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100dc4:	835a      	strh	r2, [r3, #26]
	MC14515.D1Port = GPIOB;
 8100dc6:	4b51      	ldr	r3, [pc, #324]	; (8100f0c <main+0x1d8>)
 8100dc8:	4a52      	ldr	r2, [pc, #328]	; (8100f14 <main+0x1e0>)
 8100dca:	609a      	str	r2, [r3, #8]
	MC14515.D1Pin = GPIO_PIN_15;
 8100dcc:	4b4f      	ldr	r3, [pc, #316]	; (8100f0c <main+0x1d8>)
 8100dce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100dd2:	839a      	strh	r2, [r3, #28]
	MC14515.D2Port = GPIOB;
 8100dd4:	4b4d      	ldr	r3, [pc, #308]	; (8100f0c <main+0x1d8>)
 8100dd6:	4a4f      	ldr	r2, [pc, #316]	; (8100f14 <main+0x1e0>)
 8100dd8:	60da      	str	r2, [r3, #12]
	MC14515.D2Pin = GPIO_PIN_12;
 8100dda:	4b4c      	ldr	r3, [pc, #304]	; (8100f0c <main+0x1d8>)
 8100ddc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8100de0:	83da      	strh	r2, [r3, #30]
	MC14515.D3Port = GPIOB;
 8100de2:	4b4a      	ldr	r3, [pc, #296]	; (8100f0c <main+0x1d8>)
 8100de4:	4a4b      	ldr	r2, [pc, #300]	; (8100f14 <main+0x1e0>)
 8100de6:	611a      	str	r2, [r3, #16]
	MC14515.D3Pin = GPIO_PIN_9;
 8100de8:	4b48      	ldr	r3, [pc, #288]	; (8100f0c <main+0x1d8>)
 8100dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8100dee:	841a      	strh	r2, [r3, #32]
	MC14515.D4Port = GPIOC;
 8100df0:	4b46      	ldr	r3, [pc, #280]	; (8100f0c <main+0x1d8>)
 8100df2:	4a47      	ldr	r2, [pc, #284]	; (8100f10 <main+0x1dc>)
 8100df4:	615a      	str	r2, [r3, #20]
	MC14515.D4Pin = GPIO_PIN_7;
 8100df6:	4b45      	ldr	r3, [pc, #276]	; (8100f0c <main+0x1d8>)
 8100df8:	2280      	movs	r2, #128	; 0x80
 8100dfa:	845a      	strh	r2, [r3, #34]	; 0x22

	// Reset MC14515
	MC14515_Set_Output_All_High(&MC14515);
 8100dfc:	4843      	ldr	r0, [pc, #268]	; (8100f0c <main+0x1d8>)
 8100dfe:	f7ff fd31 	bl	8100864 <MC14515_Set_Output_All_High>

	// Reset MFRC522
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8100e02:	2201      	movs	r2, #1
 8100e04:	2120      	movs	r1, #32
 8100e06:	4843      	ldr	r0, [pc, #268]	; (8100f14 <main+0x1e0>)
 8100e08:	f002 ffe2 	bl	8103dd0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8100e0c:	200a      	movs	r0, #10
 8100e0e:	f000 fde1 	bl	81019d4 <HAL_Delay>

	// Init MFRC522
	for (int i = 0; i < MFRC522_SLAVE_MAX; ++i)
 8100e12:	2300      	movs	r3, #0
 8100e14:	617b      	str	r3, [r7, #20]
 8100e16:	e007      	b.n	8100e28 <main+0xf4>
	{
		MFRC522_Init(i);
 8100e18:	697b      	ldr	r3, [r7, #20]
 8100e1a:	b29b      	uxth	r3, r3
 8100e1c:	4618      	mov	r0, r3
 8100e1e:	f7ff fe06 	bl	8100a2e <MFRC522_Init>
	for (int i = 0; i < MFRC522_SLAVE_MAX; ++i)
 8100e22:	697b      	ldr	r3, [r7, #20]
 8100e24:	3301      	adds	r3, #1
 8100e26:	617b      	str	r3, [r7, #20]
 8100e28:	697b      	ldr	r3, [r7, #20]
 8100e2a:	2b0b      	cmp	r3, #11
 8100e2c:	ddf4      	ble.n	8100e18 <main+0xe4>
	}

	// RFID Handle Init
	ptrRFIDMain = &RFIDMain;
 8100e2e:	4b3a      	ldr	r3, [pc, #232]	; (8100f18 <main+0x1e4>)
 8100e30:	4a3a      	ldr	r2, [pc, #232]	; (8100f1c <main+0x1e8>)
 8100e32:	601a      	str	r2, [r3, #0]
	status = MFRC522_Read_Data(VersionReg,slave_num);
 8100e34:	4b3a      	ldr	r3, [pc, #232]	; (8100f20 <main+0x1ec>)
 8100e36:	881b      	ldrh	r3, [r3, #0]
 8100e38:	4619      	mov	r1, r3
 8100e3a:	2037      	movs	r0, #55	; 0x37
 8100e3c:	f7ff fd5e 	bl	81008fc <MFRC522_Read_Data>
 8100e40:	4603      	mov	r3, r0
 8100e42:	461a      	mov	r2, r3
 8100e44:	4b37      	ldr	r3, [pc, #220]	; (8100f24 <main+0x1f0>)
 8100e46:	701a      	strb	r2, [r3, #0]
	ptrRFIDMain->status = status;
 8100e48:	4b33      	ldr	r3, [pc, #204]	; (8100f18 <main+0x1e4>)
 8100e4a:	681b      	ldr	r3, [r3, #0]
 8100e4c:	4a35      	ldr	r2, [pc, #212]	; (8100f24 <main+0x1f0>)
 8100e4e:	7812      	ldrb	r2, [r2, #0]
 8100e50:	709a      	strb	r2, [r3, #2]
	for (uint8_t  i = 0; i < RFID_NUM_MAX; ++i)
 8100e52:	2300      	movs	r3, #0
 8100e54:	74fb      	strb	r3, [r7, #19]
 8100e56:	e016      	b.n	8100e86 <main+0x152>
	{
		ptrRFID = &RFIDMain.RFID[i];
 8100e58:	7cfa      	ldrb	r2, [r7, #19]
 8100e5a:	4613      	mov	r3, r2
 8100e5c:	005b      	lsls	r3, r3, #1
 8100e5e:	4413      	add	r3, r2
 8100e60:	011b      	lsls	r3, r3, #4
 8100e62:	3328      	adds	r3, #40	; 0x28
 8100e64:	4a2d      	ldr	r2, [pc, #180]	; (8100f1c <main+0x1e8>)
 8100e66:	4413      	add	r3, r2
 8100e68:	4a2f      	ldr	r2, [pc, #188]	; (8100f28 <main+0x1f4>)
 8100e6a:	6013      	str	r3, [r2, #0]
		ptrRFID->slaveAddr = i;
 8100e6c:	4b2e      	ldr	r3, [pc, #184]	; (8100f28 <main+0x1f4>)
 8100e6e:	681b      	ldr	r3, [r3, #0]
 8100e70:	7cfa      	ldrb	r2, [r7, #19]
 8100e72:	b292      	uxth	r2, r2
 8100e74:	801a      	strh	r2, [r3, #0]
		ptrRFID->status = status;
 8100e76:	4b2c      	ldr	r3, [pc, #176]	; (8100f28 <main+0x1f4>)
 8100e78:	681b      	ldr	r3, [r3, #0]
 8100e7a:	4a2a      	ldr	r2, [pc, #168]	; (8100f24 <main+0x1f0>)
 8100e7c:	7812      	ldrb	r2, [r2, #0]
 8100e7e:	709a      	strb	r2, [r3, #2]
	for (uint8_t  i = 0; i < RFID_NUM_MAX; ++i)
 8100e80:	7cfb      	ldrb	r3, [r7, #19]
 8100e82:	3301      	adds	r3, #1
 8100e84:	74fb      	strb	r3, [r7, #19]
 8100e86:	7cfb      	ldrb	r3, [r7, #19]
 8100e88:	2b0b      	cmp	r3, #11
 8100e8a:	d9e5      	bls.n	8100e58 <main+0x124>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(HAL_GetTick() - timemsM4 > 200)
 8100e8c:	f000 fd96 	bl	81019bc <HAL_GetTick>
 8100e90:	4602      	mov	r2, r0
 8100e92:	4b26      	ldr	r3, [pc, #152]	; (8100f2c <main+0x1f8>)
 8100e94:	681b      	ldr	r3, [r3, #0]
 8100e96:	1ad3      	subs	r3, r2, r3
 8100e98:	2bc8      	cmp	r3, #200	; 0xc8
 8100e9a:	f240 8166 	bls.w	810116a <main+0x436>
		{
			timemsM4 = HAL_GetTick();
 8100e9e:	f000 fd8d 	bl	81019bc <HAL_GetTick>
 8100ea2:	4603      	mov	r3, r0
 8100ea4:	4a21      	ldr	r2, [pc, #132]	; (8100f2c <main+0x1f8>)
 8100ea6:	6013      	str	r3, [r2, #0]
			// Update Slave number and Update RFID PTR
			slave_num = (slave_num + 1) % MFRC522_SLAVE_MAX ;
 8100ea8:	4b1d      	ldr	r3, [pc, #116]	; (8100f20 <main+0x1ec>)
 8100eaa:	881b      	ldrh	r3, [r3, #0]
 8100eac:	1c5a      	adds	r2, r3, #1
 8100eae:	4b20      	ldr	r3, [pc, #128]	; (8100f30 <main+0x1fc>)
 8100eb0:	fb83 1302 	smull	r1, r3, r3, r2
 8100eb4:	1059      	asrs	r1, r3, #1
 8100eb6:	17d3      	asrs	r3, r2, #31
 8100eb8:	1ac9      	subs	r1, r1, r3
 8100eba:	460b      	mov	r3, r1
 8100ebc:	005b      	lsls	r3, r3, #1
 8100ebe:	440b      	add	r3, r1
 8100ec0:	009b      	lsls	r3, r3, #2
 8100ec2:	1ad1      	subs	r1, r2, r3
 8100ec4:	b28a      	uxth	r2, r1
 8100ec6:	4b16      	ldr	r3, [pc, #88]	; (8100f20 <main+0x1ec>)
 8100ec8:	801a      	strh	r2, [r3, #0]
			ptrRFIDMain->slaveNum = slave_num;
 8100eca:	4b13      	ldr	r3, [pc, #76]	; (8100f18 <main+0x1e4>)
 8100ecc:	681b      	ldr	r3, [r3, #0]
 8100ece:	4a14      	ldr	r2, [pc, #80]	; (8100f20 <main+0x1ec>)
 8100ed0:	8812      	ldrh	r2, [r2, #0]
 8100ed2:	801a      	strh	r2, [r3, #0]
			ptrRFID = &RFIDMain.RFID[RFIDMain.slaveNum];
 8100ed4:	4b11      	ldr	r3, [pc, #68]	; (8100f1c <main+0x1e8>)
 8100ed6:	881b      	ldrh	r3, [r3, #0]
 8100ed8:	461a      	mov	r2, r3
 8100eda:	4613      	mov	r3, r2
 8100edc:	005b      	lsls	r3, r3, #1
 8100ede:	4413      	add	r3, r2
 8100ee0:	011b      	lsls	r3, r3, #4
 8100ee2:	3328      	adds	r3, #40	; 0x28
 8100ee4:	4a0d      	ldr	r2, [pc, #52]	; (8100f1c <main+0x1e8>)
 8100ee6:	4413      	add	r3, r2
 8100ee8:	4a0f      	ldr	r2, [pc, #60]	; (8100f28 <main+0x1f4>)
 8100eea:	6013      	str	r3, [r2, #0]
			if(hspi1.State == HAL_SPI_STATE_READY)
 8100eec:	4b11      	ldr	r3, [pc, #68]	; (8100f34 <main+0x200>)
 8100eee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8100ef2:	b2db      	uxtb	r3, r3
 8100ef4:	2b01      	cmp	r3, #1
 8100ef6:	f040 8138 	bne.w	810116a <main+0x436>
			{
				for (int i = 0; i < 16; i++)
 8100efa:	2300      	movs	r3, #0
 8100efc:	60fb      	str	r3, [r7, #12]
 8100efe:	e02e      	b.n	8100f5e <main+0x22a>
 8100f00:	58024400 	.word	0x58024400
 8100f04:	e000ed00 	.word	0xe000ed00
 8100f08:	58026400 	.word	0x58026400
 8100f0c:	10000208 	.word	0x10000208
 8100f10:	58020800 	.word	0x58020800
 8100f14:	58020400 	.word	0x58020400
 8100f18:	10000494 	.word	0x10000494
 8100f1c:	1000022c 	.word	0x1000022c
 8100f20:	100004ac 	.word	0x100004ac
 8100f24:	100004ae 	.word	0x100004ae
 8100f28:	10000498 	.word	0x10000498
 8100f2c:	100004a4 	.word	0x100004a4
 8100f30:	2aaaaaab 	.word	0x2aaaaaab
 8100f34:	10000090 	.word	0x10000090
				{
					// Clear cardstr
					cardstr[i] = 0;
 8100f38:	4a96      	ldr	r2, [pc, #600]	; (8101194 <main+0x460>)
 8100f3a:	68fb      	ldr	r3, [r7, #12]
 8100f3c:	4413      	add	r3, r2
 8100f3e:	2200      	movs	r2, #0
 8100f40:	701a      	strb	r2, [r3, #0]
					ptrRFIDMain->cardStr[i] = cardstr[i];
 8100f42:	4b95      	ldr	r3, [pc, #596]	; (8101198 <main+0x464>)
 8100f44:	681a      	ldr	r2, [r3, #0]
 8100f46:	4993      	ldr	r1, [pc, #588]	; (8101194 <main+0x460>)
 8100f48:	68fb      	ldr	r3, [r7, #12]
 8100f4a:	440b      	add	r3, r1
 8100f4c:	7819      	ldrb	r1, [r3, #0]
 8100f4e:	68fb      	ldr	r3, [r7, #12]
 8100f50:	4413      	add	r3, r2
 8100f52:	3303      	adds	r3, #3
 8100f54:	460a      	mov	r2, r1
 8100f56:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 16; i++)
 8100f58:	68fb      	ldr	r3, [r7, #12]
 8100f5a:	3301      	adds	r3, #1
 8100f5c:	60fb      	str	r3, [r7, #12]
 8100f5e:	68fb      	ldr	r3, [r7, #12]
 8100f60:	2b0f      	cmp	r3, #15
 8100f62:	dde9      	ble.n	8100f38 <main+0x204>
				}
				status = 99;
 8100f64:	4b8d      	ldr	r3, [pc, #564]	; (810119c <main+0x468>)
 8100f66:	2263      	movs	r2, #99	; 0x63
 8100f68:	701a      	strb	r2, [r3, #0]
				ptrRFIDMain->status = status;
 8100f6a:	4b8b      	ldr	r3, [pc, #556]	; (8101198 <main+0x464>)
 8100f6c:	681b      	ldr	r3, [r3, #0]
 8100f6e:	4a8b      	ldr	r2, [pc, #556]	; (810119c <main+0x468>)
 8100f70:	7812      	ldrb	r2, [r2, #0]
 8100f72:	709a      	strb	r2, [r3, #2]
				ptrRFID->status =status;
 8100f74:	4b8a      	ldr	r3, [pc, #552]	; (81011a0 <main+0x46c>)
 8100f76:	681b      	ldr	r3, [r3, #0]
 8100f78:	4a88      	ldr	r2, [pc, #544]	; (810119c <main+0x468>)
 8100f7a:	7812      	ldrb	r2, [r2, #0]
 8100f7c:	709a      	strb	r2, [r3, #2]
				// Find cards
				status = MFRC522_Request(PICC_REQIDL, cardstr,slave_num);
 8100f7e:	4b89      	ldr	r3, [pc, #548]	; (81011a4 <main+0x470>)
 8100f80:	881b      	ldrh	r3, [r3, #0]
 8100f82:	461a      	mov	r2, r3
 8100f84:	4983      	ldr	r1, [pc, #524]	; (8101194 <main+0x460>)
 8100f86:	2026      	movs	r0, #38	; 0x26
 8100f88:	f7ff fd86 	bl	8100a98 <MFRC522_Request>
 8100f8c:	4603      	mov	r3, r0
 8100f8e:	461a      	mov	r2, r3
 8100f90:	4b82      	ldr	r3, [pc, #520]	; (810119c <main+0x468>)
 8100f92:	701a      	strb	r2, [r3, #0]
				ptrRFIDMain->status = status;
 8100f94:	4b80      	ldr	r3, [pc, #512]	; (8101198 <main+0x464>)
 8100f96:	681b      	ldr	r3, [r3, #0]
 8100f98:	4a80      	ldr	r2, [pc, #512]	; (810119c <main+0x468>)
 8100f9a:	7812      	ldrb	r2, [r2, #0]
 8100f9c:	709a      	strb	r2, [r3, #2]
				ptrRFID->status =status;
 8100f9e:	4b80      	ldr	r3, [pc, #512]	; (81011a0 <main+0x46c>)
 8100fa0:	681b      	ldr	r3, [r3, #0]
 8100fa2:	4a7e      	ldr	r2, [pc, #504]	; (810119c <main+0x468>)
 8100fa4:	7812      	ldrb	r2, [r2, #0]
 8100fa6:	709a      	strb	r2, [r3, #2]
				if(status == MI_OK)
 8100fa8:	4b7c      	ldr	r3, [pc, #496]	; (810119c <main+0x468>)
 8100faa:	781b      	ldrb	r3, [r3, #0]
 8100fac:	2b00      	cmp	r3, #0
 8100fae:	f040 80dc 	bne.w	810116a <main+0x436>
				{
					status = MFRC522_Anticoll(cardstr,slave_num);
 8100fb2:	4b7c      	ldr	r3, [pc, #496]	; (81011a4 <main+0x470>)
 8100fb4:	881b      	ldrh	r3, [r3, #0]
 8100fb6:	4619      	mov	r1, r3
 8100fb8:	4876      	ldr	r0, [pc, #472]	; (8101194 <main+0x460>)
 8100fba:	f7ff fe78 	bl	8100cae <MFRC522_Anticoll>
 8100fbe:	4603      	mov	r3, r0
 8100fc0:	461a      	mov	r2, r3
 8100fc2:	4b76      	ldr	r3, [pc, #472]	; (810119c <main+0x468>)
 8100fc4:	701a      	strb	r2, [r3, #0]
					ptrRFIDMain->status = status;
 8100fc6:	4b74      	ldr	r3, [pc, #464]	; (8101198 <main+0x464>)
 8100fc8:	681b      	ldr	r3, [r3, #0]
 8100fca:	4a74      	ldr	r2, [pc, #464]	; (810119c <main+0x468>)
 8100fcc:	7812      	ldrb	r2, [r2, #0]
 8100fce:	709a      	strb	r2, [r3, #2]
					ptrRFID->status =status;
 8100fd0:	4b73      	ldr	r3, [pc, #460]	; (81011a0 <main+0x46c>)
 8100fd2:	681b      	ldr	r3, [r3, #0]
 8100fd4:	4a71      	ldr	r2, [pc, #452]	; (810119c <main+0x468>)
 8100fd6:	7812      	ldrb	r2, [r2, #0]
 8100fd8:	709a      	strb	r2, [r3, #2]
					if(status == MI_OK)
 8100fda:	4b70      	ldr	r3, [pc, #448]	; (810119c <main+0x468>)
 8100fdc:	781b      	ldrb	r3, [r3, #0]
 8100fde:	2b00      	cmp	r3, #0
 8100fe0:	f040 80c3 	bne.w	810116a <main+0x436>
					{
						// Update Card PTR
						ptrCard =  &RFIDMain.RFID[RFIDMain.slaveNum].detectedCard;
 8100fe4:	4b70      	ldr	r3, [pc, #448]	; (81011a8 <main+0x474>)
 8100fe6:	881b      	ldrh	r3, [r3, #0]
 8100fe8:	461a      	mov	r2, r3
 8100fea:	4613      	mov	r3, r2
 8100fec:	005b      	lsls	r3, r3, #1
 8100fee:	4413      	add	r3, r2
 8100ff0:	011b      	lsls	r3, r3, #4
 8100ff2:	3328      	adds	r3, #40	; 0x28
 8100ff4:	4a6c      	ldr	r2, [pc, #432]	; (81011a8 <main+0x474>)
 8100ff6:	4413      	add	r3, r2
 8100ff8:	3304      	adds	r3, #4
 8100ffa:	4a6c      	ldr	r2, [pc, #432]	; (81011ac <main+0x478>)
 8100ffc:	6013      	str	r3, [r2, #0]
						// Update detected Card
						ptrCard->Cardbit.bit0 = cardstr[0];
 8100ffe:	4b6b      	ldr	r3, [pc, #428]	; (81011ac <main+0x478>)
 8101000:	681b      	ldr	r3, [r3, #0]
 8101002:	4a64      	ldr	r2, [pc, #400]	; (8101194 <main+0x460>)
 8101004:	7812      	ldrb	r2, [r2, #0]
 8101006:	701a      	strb	r2, [r3, #0]
						ptrCard->Cardbit.bit1 = cardstr[1];
 8101008:	4b68      	ldr	r3, [pc, #416]	; (81011ac <main+0x478>)
 810100a:	681b      	ldr	r3, [r3, #0]
 810100c:	4a61      	ldr	r2, [pc, #388]	; (8101194 <main+0x460>)
 810100e:	7852      	ldrb	r2, [r2, #1]
 8101010:	705a      	strb	r2, [r3, #1]
						ptrCard->Cardbit.bit2 = cardstr[2];
 8101012:	4b66      	ldr	r3, [pc, #408]	; (81011ac <main+0x478>)
 8101014:	681b      	ldr	r3, [r3, #0]
 8101016:	4a5f      	ldr	r2, [pc, #380]	; (8101194 <main+0x460>)
 8101018:	7892      	ldrb	r2, [r2, #2]
 810101a:	709a      	strb	r2, [r3, #2]
						ptrCard->Cardbit.bit3 = cardstr[3];
 810101c:	4b63      	ldr	r3, [pc, #396]	; (81011ac <main+0x478>)
 810101e:	681b      	ldr	r3, [r3, #0]
 8101020:	4a5c      	ldr	r2, [pc, #368]	; (8101194 <main+0x460>)
 8101022:	78d2      	ldrb	r2, [r2, #3]
 8101024:	70da      	strb	r2, [r3, #3]
						// Update Card Memory
						for (int i = CARD_BUFF_LEN; i >= 1 ; i--)
 8101026:	2304      	movs	r3, #4
 8101028:	60bb      	str	r3, [r7, #8]
 810102a:	e058      	b.n	81010de <main+0x3aa>
						{
							//							*(ptrYugiohCardMEM + i) = *(ptrYugiohCardMEM + i + 1);
							ptrYugiohCardMEM = &RFIDMain.RFID[RFIDMain.slaveNum].bufferCard[i];
 810102c:	4b5e      	ldr	r3, [pc, #376]	; (81011a8 <main+0x474>)
 810102e:	881b      	ldrh	r3, [r3, #0]
 8101030:	461a      	mov	r2, r3
 8101032:	4613      	mov	r3, r2
 8101034:	005b      	lsls	r3, r3, #1
 8101036:	4413      	add	r3, r2
 8101038:	005b      	lsls	r3, r3, #1
 810103a:	68ba      	ldr	r2, [r7, #8]
 810103c:	4413      	add	r3, r2
 810103e:	3307      	adds	r3, #7
 8101040:	00db      	lsls	r3, r3, #3
 8101042:	4a59      	ldr	r2, [pc, #356]	; (81011a8 <main+0x474>)
 8101044:	4413      	add	r3, r2
 8101046:	4a5a      	ldr	r2, [pc, #360]	; (81011b0 <main+0x47c>)
 8101048:	6013      	str	r3, [r2, #0]
							ptrYugiohCardMEM->cardData = RFIDMain.RFID[RFIDMain.slaveNum].bufferCard[i-1].cardData;
 810104a:	4b57      	ldr	r3, [pc, #348]	; (81011a8 <main+0x474>)
 810104c:	881b      	ldrh	r3, [r3, #0]
 810104e:	461c      	mov	r4, r3
 8101050:	68bb      	ldr	r3, [r7, #8]
 8101052:	1e59      	subs	r1, r3, #1
 8101054:	4b56      	ldr	r3, [pc, #344]	; (81011b0 <main+0x47c>)
 8101056:	681a      	ldr	r2, [r3, #0]
 8101058:	4853      	ldr	r0, [pc, #332]	; (81011a8 <main+0x474>)
 810105a:	4623      	mov	r3, r4
 810105c:	005b      	lsls	r3, r3, #1
 810105e:	4423      	add	r3, r4
 8101060:	005b      	lsls	r3, r3, #1
 8101062:	440b      	add	r3, r1
 8101064:	3307      	adds	r3, #7
 8101066:	00db      	lsls	r3, r3, #3
 8101068:	4403      	add	r3, r0
 810106a:	685b      	ldr	r3, [r3, #4]
 810106c:	6053      	str	r3, [r2, #4]
							ptrYugiohCardMEM->cardSignature = RFIDMain.RFID[RFIDMain.slaveNum].bufferCard[i-1].cardSignature;
 810106e:	4b4e      	ldr	r3, [pc, #312]	; (81011a8 <main+0x474>)
 8101070:	881b      	ldrh	r3, [r3, #0]
 8101072:	461c      	mov	r4, r3
 8101074:	68bb      	ldr	r3, [r7, #8]
 8101076:	1e59      	subs	r1, r3, #1
 8101078:	4b4d      	ldr	r3, [pc, #308]	; (81011b0 <main+0x47c>)
 810107a:	681a      	ldr	r2, [r3, #0]
 810107c:	484a      	ldr	r0, [pc, #296]	; (81011a8 <main+0x474>)
 810107e:	4623      	mov	r3, r4
 8101080:	005b      	lsls	r3, r3, #1
 8101082:	4423      	add	r3, r4
 8101084:	005b      	lsls	r3, r3, #1
 8101086:	440b      	add	r3, r1
 8101088:	3307      	adds	r3, #7
 810108a:	f810 3033 	ldrb.w	r3, [r0, r3, lsl #3]
 810108e:	7013      	strb	r3, [r2, #0]
							ptrYugiohCardMEM->cardState = RFIDMain.RFID[RFIDMain.slaveNum].bufferCard[i-1].cardState;
 8101090:	4b45      	ldr	r3, [pc, #276]	; (81011a8 <main+0x474>)
 8101092:	881b      	ldrh	r3, [r3, #0]
 8101094:	461c      	mov	r4, r3
 8101096:	68bb      	ldr	r3, [r7, #8]
 8101098:	1e59      	subs	r1, r3, #1
 810109a:	4b45      	ldr	r3, [pc, #276]	; (81011b0 <main+0x47c>)
 810109c:	681a      	ldr	r2, [r3, #0]
 810109e:	4842      	ldr	r0, [pc, #264]	; (81011a8 <main+0x474>)
 81010a0:	4623      	mov	r3, r4
 81010a2:	005b      	lsls	r3, r3, #1
 81010a4:	4423      	add	r3, r4
 81010a6:	005b      	lsls	r3, r3, #1
 81010a8:	440b      	add	r3, r1
 81010aa:	3307      	adds	r3, #7
 81010ac:	00db      	lsls	r3, r3, #3
 81010ae:	4403      	add	r3, r0
 81010b0:	789b      	ldrb	r3, [r3, #2]
 81010b2:	7093      	strb	r3, [r2, #2]
							ptrYugiohCardMEM->cardType = RFIDMain.RFID[RFIDMain.slaveNum].bufferCard[i-1].cardType;
 81010b4:	4b3c      	ldr	r3, [pc, #240]	; (81011a8 <main+0x474>)
 81010b6:	881b      	ldrh	r3, [r3, #0]
 81010b8:	461c      	mov	r4, r3
 81010ba:	68bb      	ldr	r3, [r7, #8]
 81010bc:	1e59      	subs	r1, r3, #1
 81010be:	4b3c      	ldr	r3, [pc, #240]	; (81011b0 <main+0x47c>)
 81010c0:	681a      	ldr	r2, [r3, #0]
 81010c2:	4839      	ldr	r0, [pc, #228]	; (81011a8 <main+0x474>)
 81010c4:	4623      	mov	r3, r4
 81010c6:	005b      	lsls	r3, r3, #1
 81010c8:	4423      	add	r3, r4
 81010ca:	005b      	lsls	r3, r3, #1
 81010cc:	440b      	add	r3, r1
 81010ce:	3307      	adds	r3, #7
 81010d0:	00db      	lsls	r3, r3, #3
 81010d2:	4403      	add	r3, r0
 81010d4:	785b      	ldrb	r3, [r3, #1]
 81010d6:	7053      	strb	r3, [r2, #1]
						for (int i = CARD_BUFF_LEN; i >= 1 ; i--)
 81010d8:	68bb      	ldr	r3, [r7, #8]
 81010da:	3b01      	subs	r3, #1
 81010dc:	60bb      	str	r3, [r7, #8]
 81010de:	68bb      	ldr	r3, [r7, #8]
 81010e0:	2b00      	cmp	r3, #0
 81010e2:	dca3      	bgt.n	810102c <main+0x2f8>
						}
//						YUGIOH_card_register(ptrYugiohCardMEM, ptrCard);
						ptrYugiohCardMEM = RFIDMain.RFID[RFIDMain.slaveNum].bufferCard;
 81010e4:	4b30      	ldr	r3, [pc, #192]	; (81011a8 <main+0x474>)
 81010e6:	881b      	ldrh	r3, [r3, #0]
 81010e8:	461a      	mov	r2, r3
 81010ea:	4613      	mov	r3, r2
 81010ec:	005b      	lsls	r3, r3, #1
 81010ee:	4413      	add	r3, r2
 81010f0:	011b      	lsls	r3, r3, #4
 81010f2:	3338      	adds	r3, #56	; 0x38
 81010f4:	4a2c      	ldr	r2, [pc, #176]	; (81011a8 <main+0x474>)
 81010f6:	4413      	add	r3, r2
 81010f8:	4a2d      	ldr	r2, [pc, #180]	; (81011b0 <main+0x47c>)
 81010fa:	6013      	str	r3, [r2, #0]
						ptrYugiohCardMEM->cardData = RFIDMain.RFID[RFIDMain.slaveNum].detectedCard.data;
 81010fc:	4b2a      	ldr	r3, [pc, #168]	; (81011a8 <main+0x474>)
 81010fe:	881b      	ldrh	r3, [r3, #0]
 8101100:	4618      	mov	r0, r3
 8101102:	4b2b      	ldr	r3, [pc, #172]	; (81011b0 <main+0x47c>)
 8101104:	681a      	ldr	r2, [r3, #0]
 8101106:	4928      	ldr	r1, [pc, #160]	; (81011a8 <main+0x474>)
 8101108:	4603      	mov	r3, r0
 810110a:	005b      	lsls	r3, r3, #1
 810110c:	4403      	add	r3, r0
 810110e:	011b      	lsls	r3, r3, #4
 8101110:	440b      	add	r3, r1
 8101112:	332c      	adds	r3, #44	; 0x2c
 8101114:	681b      	ldr	r3, [r3, #0]
 8101116:	6053      	str	r3, [r2, #4]
						ptrYugiohCardMEM->cardSignature = rand() % 256;
 8101118:	f004 f8e6 	bl	81052e8 <rand>
 810111c:	4603      	mov	r3, r0
 810111e:	425a      	negs	r2, r3
 8101120:	b2db      	uxtb	r3, r3
 8101122:	b2d2      	uxtb	r2, r2
 8101124:	bf58      	it	pl
 8101126:	4253      	negpl	r3, r2
 8101128:	4a21      	ldr	r2, [pc, #132]	; (81011b0 <main+0x47c>)
 810112a:	6812      	ldr	r2, [r2, #0]
 810112c:	b2db      	uxtb	r3, r3
 810112e:	7013      	strb	r3, [r2, #0]
						ptrYugiohCardMEM->cardState = rand() % 3;
 8101130:	f004 f8da 	bl	81052e8 <rand>
 8101134:	4602      	mov	r2, r0
 8101136:	4b1f      	ldr	r3, [pc, #124]	; (81011b4 <main+0x480>)
 8101138:	fb83 3102 	smull	r3, r1, r3, r2
 810113c:	17d3      	asrs	r3, r2, #31
 810113e:	1ac9      	subs	r1, r1, r3
 8101140:	460b      	mov	r3, r1
 8101142:	005b      	lsls	r3, r3, #1
 8101144:	440b      	add	r3, r1
 8101146:	1ad1      	subs	r1, r2, r3
 8101148:	4b19      	ldr	r3, [pc, #100]	; (81011b0 <main+0x47c>)
 810114a:	681b      	ldr	r3, [r3, #0]
 810114c:	b2ca      	uxtb	r2, r1
 810114e:	709a      	strb	r2, [r3, #2]
						ptrYugiohCardMEM->cardType = rand() % 2;
 8101150:	f004 f8ca 	bl	81052e8 <rand>
 8101154:	4603      	mov	r3, r0
 8101156:	2b00      	cmp	r3, #0
 8101158:	f003 0301 	and.w	r3, r3, #1
 810115c:	bfb8      	it	lt
 810115e:	425b      	neglt	r3, r3
 8101160:	461a      	mov	r2, r3
 8101162:	4b13      	ldr	r3, [pc, #76]	; (81011b0 <main+0x47c>)
 8101164:	681b      	ldr	r3, [r3, #0]
 8101166:	b2d2      	uxtb	r2, r2
 8101168:	705a      	strb	r2, [r3, #1]
			}
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(HAL_GetTick() - timemsM4_LED > 1000)
 810116a:	f000 fc27 	bl	81019bc <HAL_GetTick>
 810116e:	4602      	mov	r2, r0
 8101170:	4b11      	ldr	r3, [pc, #68]	; (81011b8 <main+0x484>)
 8101172:	681b      	ldr	r3, [r3, #0]
 8101174:	1ad3      	subs	r3, r2, r3
 8101176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 810117a:	f67f ae87 	bls.w	8100e8c <main+0x158>
		{
			timemsM4_LED = HAL_GetTick();
 810117e:	f000 fc1d 	bl	81019bc <HAL_GetTick>
 8101182:	4603      	mov	r3, r0
 8101184:	4a0c      	ldr	r2, [pc, #48]	; (81011b8 <main+0x484>)
 8101186:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8101188:	2102      	movs	r1, #2
 810118a:	480c      	ldr	r0, [pc, #48]	; (81011bc <main+0x488>)
 810118c:	f002 fe39 	bl	8103e02 <HAL_GPIO_TogglePin>
		if(HAL_GetTick() - timemsM4 > 200)
 8101190:	e67c      	b.n	8100e8c <main+0x158>
 8101192:	bf00      	nop
 8101194:	100004b0 	.word	0x100004b0
 8101198:	10000494 	.word	0x10000494
 810119c:	100004ae 	.word	0x100004ae
 81011a0:	10000498 	.word	0x10000498
 81011a4:	100004ac 	.word	0x100004ac
 81011a8:	1000022c 	.word	0x1000022c
 81011ac:	1000049c 	.word	0x1000049c
 81011b0:	100004a0 	.word	0x100004a0
 81011b4:	55555556 	.word	0x55555556
 81011b8:	100004a8 	.word	0x100004a8
 81011bc:	58021000 	.word	0x58021000

081011c0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 81011c0:	b580      	push	{r7, lr}
 81011c2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 81011c4:	4b27      	ldr	r3, [pc, #156]	; (8101264 <MX_SPI1_Init+0xa4>)
 81011c6:	4a28      	ldr	r2, [pc, #160]	; (8101268 <MX_SPI1_Init+0xa8>)
 81011c8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 81011ca:	4b26      	ldr	r3, [pc, #152]	; (8101264 <MX_SPI1_Init+0xa4>)
 81011cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81011d0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81011d2:	4b24      	ldr	r3, [pc, #144]	; (8101264 <MX_SPI1_Init+0xa4>)
 81011d4:	2200      	movs	r2, #0
 81011d6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 81011d8:	4b22      	ldr	r3, [pc, #136]	; (8101264 <MX_SPI1_Init+0xa4>)
 81011da:	2207      	movs	r2, #7
 81011dc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81011de:	4b21      	ldr	r3, [pc, #132]	; (8101264 <MX_SPI1_Init+0xa4>)
 81011e0:	2200      	movs	r2, #0
 81011e2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 81011e4:	4b1f      	ldr	r3, [pc, #124]	; (8101264 <MX_SPI1_Init+0xa4>)
 81011e6:	2200      	movs	r2, #0
 81011e8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 81011ea:	4b1e      	ldr	r3, [pc, #120]	; (8101264 <MX_SPI1_Init+0xa4>)
 81011ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 81011f0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 81011f2:	4b1c      	ldr	r3, [pc, #112]	; (8101264 <MX_SPI1_Init+0xa4>)
 81011f4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 81011f8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81011fa:	4b1a      	ldr	r3, [pc, #104]	; (8101264 <MX_SPI1_Init+0xa4>)
 81011fc:	2200      	movs	r2, #0
 81011fe:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101200:	4b18      	ldr	r3, [pc, #96]	; (8101264 <MX_SPI1_Init+0xa4>)
 8101202:	2200      	movs	r2, #0
 8101204:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101206:	4b17      	ldr	r3, [pc, #92]	; (8101264 <MX_SPI1_Init+0xa4>)
 8101208:	2200      	movs	r2, #0
 810120a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 810120c:	4b15      	ldr	r3, [pc, #84]	; (8101264 <MX_SPI1_Init+0xa4>)
 810120e:	2200      	movs	r2, #0
 8101210:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101212:	4b14      	ldr	r3, [pc, #80]	; (8101264 <MX_SPI1_Init+0xa4>)
 8101214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101218:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810121a:	4b12      	ldr	r3, [pc, #72]	; (8101264 <MX_SPI1_Init+0xa4>)
 810121c:	2200      	movs	r2, #0
 810121e:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101220:	4b10      	ldr	r3, [pc, #64]	; (8101264 <MX_SPI1_Init+0xa4>)
 8101222:	2200      	movs	r2, #0
 8101224:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101226:	4b0f      	ldr	r3, [pc, #60]	; (8101264 <MX_SPI1_Init+0xa4>)
 8101228:	2200      	movs	r2, #0
 810122a:	641a      	str	r2, [r3, #64]	; 0x40
	hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810122c:	4b0d      	ldr	r3, [pc, #52]	; (8101264 <MX_SPI1_Init+0xa4>)
 810122e:	2200      	movs	r2, #0
 8101230:	645a      	str	r2, [r3, #68]	; 0x44
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101232:	4b0c      	ldr	r3, [pc, #48]	; (8101264 <MX_SPI1_Init+0xa4>)
 8101234:	2200      	movs	r2, #0
 8101236:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101238:	4b0a      	ldr	r3, [pc, #40]	; (8101264 <MX_SPI1_Init+0xa4>)
 810123a:	2200      	movs	r2, #0
 810123c:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810123e:	4b09      	ldr	r3, [pc, #36]	; (8101264 <MX_SPI1_Init+0xa4>)
 8101240:	2200      	movs	r2, #0
 8101242:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101244:	4b07      	ldr	r3, [pc, #28]	; (8101264 <MX_SPI1_Init+0xa4>)
 8101246:	2200      	movs	r2, #0
 8101248:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810124a:	4b06      	ldr	r3, [pc, #24]	; (8101264 <MX_SPI1_Init+0xa4>)
 810124c:	2200      	movs	r2, #0
 810124e:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101250:	4804      	ldr	r0, [pc, #16]	; (8101264 <MX_SPI1_Init+0xa4>)
 8101252:	f003 f805 	bl	8104260 <HAL_SPI_Init>
 8101256:	4603      	mov	r3, r0
 8101258:	2b00      	cmp	r3, #0
 810125a:	d001      	beq.n	8101260 <MX_SPI1_Init+0xa0>
	{
		Error_Handler();
 810125c:	f000 f8d8 	bl	8101410 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8101260:	bf00      	nop
 8101262:	bd80      	pop	{r7, pc}
 8101264:	10000090 	.word	0x10000090
 8101268:	40013000 	.word	0x40013000

0810126c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 810126c:	b580      	push	{r7, lr}
 810126e:	b082      	sub	sp, #8
 8101270:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8101272:	4b11      	ldr	r3, [pc, #68]	; (81012b8 <MX_DMA_Init+0x4c>)
 8101274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101278:	4a0f      	ldr	r2, [pc, #60]	; (81012b8 <MX_DMA_Init+0x4c>)
 810127a:	f043 0301 	orr.w	r3, r3, #1
 810127e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101282:	4b0d      	ldr	r3, [pc, #52]	; (81012b8 <MX_DMA_Init+0x4c>)
 8101284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101288:	f003 0301 	and.w	r3, r3, #1
 810128c:	607b      	str	r3, [r7, #4]
 810128e:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101290:	2200      	movs	r2, #0
 8101292:	2100      	movs	r1, #0
 8101294:	200b      	movs	r0, #11
 8101296:	f000 fc9c 	bl	8101bd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810129a:	200b      	movs	r0, #11
 810129c:	f000 fcb3 	bl	8101c06 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 81012a0:	2200      	movs	r2, #0
 81012a2:	2100      	movs	r1, #0
 81012a4:	200e      	movs	r0, #14
 81012a6:	f000 fc94 	bl	8101bd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 81012aa:	200e      	movs	r0, #14
 81012ac:	f000 fcab 	bl	8101c06 <HAL_NVIC_EnableIRQ>

}
 81012b0:	bf00      	nop
 81012b2:	3708      	adds	r7, #8
 81012b4:	46bd      	mov	sp, r7
 81012b6:	bd80      	pop	{r7, pc}
 81012b8:	58024400 	.word	0x58024400

081012bc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 81012bc:	b580      	push	{r7, lr}
 81012be:	b08a      	sub	sp, #40	; 0x28
 81012c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012c2:	f107 0314 	add.w	r3, r7, #20
 81012c6:	2200      	movs	r2, #0
 81012c8:	601a      	str	r2, [r3, #0]
 81012ca:	605a      	str	r2, [r3, #4]
 81012cc:	609a      	str	r2, [r3, #8]
 81012ce:	60da      	str	r2, [r3, #12]
 81012d0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 81012d2:	4b4b      	ldr	r3, [pc, #300]	; (8101400 <MX_GPIO_Init+0x144>)
 81012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d8:	4a49      	ldr	r2, [pc, #292]	; (8101400 <MX_GPIO_Init+0x144>)
 81012da:	f043 0304 	orr.w	r3, r3, #4
 81012de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012e2:	4b47      	ldr	r3, [pc, #284]	; (8101400 <MX_GPIO_Init+0x144>)
 81012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e8:	f003 0304 	and.w	r3, r3, #4
 81012ec:	613b      	str	r3, [r7, #16]
 81012ee:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 81012f0:	4b43      	ldr	r3, [pc, #268]	; (8101400 <MX_GPIO_Init+0x144>)
 81012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012f6:	4a42      	ldr	r2, [pc, #264]	; (8101400 <MX_GPIO_Init+0x144>)
 81012f8:	f043 0301 	orr.w	r3, r3, #1
 81012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101300:	4b3f      	ldr	r3, [pc, #252]	; (8101400 <MX_GPIO_Init+0x144>)
 8101302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101306:	f003 0301 	and.w	r3, r3, #1
 810130a:	60fb      	str	r3, [r7, #12]
 810130c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 810130e:	4b3c      	ldr	r3, [pc, #240]	; (8101400 <MX_GPIO_Init+0x144>)
 8101310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101314:	4a3a      	ldr	r2, [pc, #232]	; (8101400 <MX_GPIO_Init+0x144>)
 8101316:	f043 0302 	orr.w	r3, r3, #2
 810131a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810131e:	4b38      	ldr	r3, [pc, #224]	; (8101400 <MX_GPIO_Init+0x144>)
 8101320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101324:	f003 0302 	and.w	r3, r3, #2
 8101328:	60bb      	str	r3, [r7, #8]
 810132a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 810132c:	4b34      	ldr	r3, [pc, #208]	; (8101400 <MX_GPIO_Init+0x144>)
 810132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101332:	4a33      	ldr	r2, [pc, #204]	; (8101400 <MX_GPIO_Init+0x144>)
 8101334:	f043 0308 	orr.w	r3, r3, #8
 8101338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810133c:	4b30      	ldr	r3, [pc, #192]	; (8101400 <MX_GPIO_Init+0x144>)
 810133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101342:	f003 0308 	and.w	r3, r3, #8
 8101346:	607b      	str	r3, [r7, #4]
 8101348:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 810134a:	4b2d      	ldr	r3, [pc, #180]	; (8101400 <MX_GPIO_Init+0x144>)
 810134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101350:	4a2b      	ldr	r2, [pc, #172]	; (8101400 <MX_GPIO_Init+0x144>)
 8101352:	f043 0310 	orr.w	r3, r3, #16
 8101356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810135a:	4b29      	ldr	r3, [pc, #164]	; (8101400 <MX_GPIO_Init+0x144>)
 810135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101360:	f003 0310 	and.w	r3, r3, #16
 8101364:	603b      	str	r3, [r7, #0]
 8101366:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|MC14515_D2_Pin|MC14515_D1_Pin|RC522_Rst_Pin
 8101368:	2200      	movs	r2, #0
 810136a:	f249 3121 	movw	r1, #37665	; 0x9321
 810136e:	4825      	ldr	r0, [pc, #148]	; (8101404 <MX_GPIO_Init+0x148>)
 8101370:	f002 fd2e 	bl	8103dd0 <HAL_GPIO_WritePin>
			|MC14515_INH_Pin|MC14515_D3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, MC14515_ST_Pin|MC14515_D4_Pin, GPIO_PIN_RESET);
 8101374:	2200      	movs	r2, #0
 8101376:	21c0      	movs	r1, #192	; 0xc0
 8101378:	4823      	ldr	r0, [pc, #140]	; (8101408 <MX_GPIO_Init+0x14c>)
 810137a:	f002 fd29 	bl	8103dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 810137e:	2200      	movs	r2, #0
 8101380:	2102      	movs	r1, #2
 8101382:	4822      	ldr	r0, [pc, #136]	; (810140c <MX_GPIO_Init+0x150>)
 8101384:	f002 fd24 	bl	8103dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8101388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810138c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810138e:	2300      	movs	r3, #0
 8101390:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101392:	2300      	movs	r3, #0
 8101394:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8101396:	f107 0314 	add.w	r3, r7, #20
 810139a:	4619      	mov	r1, r3
 810139c:	481a      	ldr	r0, [pc, #104]	; (8101408 <MX_GPIO_Init+0x14c>)
 810139e:	f002 fb67 	bl	8103a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin MC14515_D2_Pin MC14515_D1_Pin RC522_Rst_Pin
                           MC14515_INH_Pin MC14515_D3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|MC14515_D2_Pin|MC14515_D1_Pin|RC522_Rst_Pin
 81013a2:	f249 3321 	movw	r3, #37665	; 0x9321
 81013a6:	617b      	str	r3, [r7, #20]
			|MC14515_INH_Pin|MC14515_D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81013a8:	2301      	movs	r3, #1
 81013aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013ac:	2300      	movs	r3, #0
 81013ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013b0:	2300      	movs	r3, #0
 81013b2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81013b4:	f107 0314 	add.w	r3, r7, #20
 81013b8:	4619      	mov	r1, r3
 81013ba:	4812      	ldr	r0, [pc, #72]	; (8101404 <MX_GPIO_Init+0x148>)
 81013bc:	f002 fb58 	bl	8103a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : MC14515_ST_Pin MC14515_D4_Pin */
	GPIO_InitStruct.Pin = MC14515_ST_Pin|MC14515_D4_Pin;
 81013c0:	23c0      	movs	r3, #192	; 0xc0
 81013c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81013c4:	2301      	movs	r3, #1
 81013c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013c8:	2300      	movs	r3, #0
 81013ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013cc:	2300      	movs	r3, #0
 81013ce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81013d0:	f107 0314 	add.w	r3, r7, #20
 81013d4:	4619      	mov	r1, r3
 81013d6:	480c      	ldr	r0, [pc, #48]	; (8101408 <MX_GPIO_Init+0x14c>)
 81013d8:	f002 fb4a 	bl	8103a70 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 81013dc:	2302      	movs	r3, #2
 81013de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81013e0:	2301      	movs	r3, #1
 81013e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013e4:	2300      	movs	r3, #0
 81013e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013e8:	2300      	movs	r3, #0
 81013ea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 81013ec:	f107 0314 	add.w	r3, r7, #20
 81013f0:	4619      	mov	r1, r3
 81013f2:	4806      	ldr	r0, [pc, #24]	; (810140c <MX_GPIO_Init+0x150>)
 81013f4:	f002 fb3c 	bl	8103a70 <HAL_GPIO_Init>

}
 81013f8:	bf00      	nop
 81013fa:	3728      	adds	r7, #40	; 0x28
 81013fc:	46bd      	mov	sp, r7
 81013fe:	bd80      	pop	{r7, pc}
 8101400:	58024400 	.word	0x58024400
 8101404:	58020400 	.word	0x58020400
 8101408:	58020800 	.word	0x58020800
 810140c:	58021000 	.word	0x58021000

08101410 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8101410:	b480      	push	{r7}
 8101412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101414:	b672      	cpsid	i
}
 8101416:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8101418:	e7fe      	b.n	8101418 <Error_Handler+0x8>
	...

0810141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810141c:	b480      	push	{r7}
 810141e:	b083      	sub	sp, #12
 8101420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101422:	4b0a      	ldr	r3, [pc, #40]	; (810144c <HAL_MspInit+0x30>)
 8101424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101428:	4a08      	ldr	r2, [pc, #32]	; (810144c <HAL_MspInit+0x30>)
 810142a:	f043 0302 	orr.w	r3, r3, #2
 810142e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101432:	4b06      	ldr	r3, [pc, #24]	; (810144c <HAL_MspInit+0x30>)
 8101434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101438:	f003 0302 	and.w	r3, r3, #2
 810143c:	607b      	str	r3, [r7, #4]
 810143e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101440:	bf00      	nop
 8101442:	370c      	adds	r7, #12
 8101444:	46bd      	mov	sp, r7
 8101446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810144a:	4770      	bx	lr
 810144c:	58024400 	.word	0x58024400

08101450 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101450:	b580      	push	{r7, lr}
 8101452:	b08a      	sub	sp, #40	; 0x28
 8101454:	af00      	add	r7, sp, #0
 8101456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101458:	f107 0314 	add.w	r3, r7, #20
 810145c:	2200      	movs	r2, #0
 810145e:	601a      	str	r2, [r3, #0]
 8101460:	605a      	str	r2, [r3, #4]
 8101462:	609a      	str	r2, [r3, #8]
 8101464:	60da      	str	r2, [r3, #12]
 8101466:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8101468:	687b      	ldr	r3, [r7, #4]
 810146a:	681b      	ldr	r3, [r3, #0]
 810146c:	4a5b      	ldr	r2, [pc, #364]	; (81015dc <HAL_SPI_MspInit+0x18c>)
 810146e:	4293      	cmp	r3, r2
 8101470:	f040 80af 	bne.w	81015d2 <HAL_SPI_MspInit+0x182>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101474:	4b5a      	ldr	r3, [pc, #360]	; (81015e0 <HAL_SPI_MspInit+0x190>)
 8101476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810147a:	4a59      	ldr	r2, [pc, #356]	; (81015e0 <HAL_SPI_MspInit+0x190>)
 810147c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101480:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101484:	4b56      	ldr	r3, [pc, #344]	; (81015e0 <HAL_SPI_MspInit+0x190>)
 8101486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810148a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810148e:	613b      	str	r3, [r7, #16]
 8101490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101492:	4b53      	ldr	r3, [pc, #332]	; (81015e0 <HAL_SPI_MspInit+0x190>)
 8101494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101498:	4a51      	ldr	r2, [pc, #324]	; (81015e0 <HAL_SPI_MspInit+0x190>)
 810149a:	f043 0301 	orr.w	r3, r3, #1
 810149e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014a2:	4b4f      	ldr	r3, [pc, #316]	; (81015e0 <HAL_SPI_MspInit+0x190>)
 81014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014a8:	f003 0301 	and.w	r3, r3, #1
 81014ac:	60fb      	str	r3, [r7, #12]
 81014ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81014b0:	4b4b      	ldr	r3, [pc, #300]	; (81015e0 <HAL_SPI_MspInit+0x190>)
 81014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014b6:	4a4a      	ldr	r2, [pc, #296]	; (81015e0 <HAL_SPI_MspInit+0x190>)
 81014b8:	f043 0308 	orr.w	r3, r3, #8
 81014bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014c0:	4b47      	ldr	r3, [pc, #284]	; (81015e0 <HAL_SPI_MspInit+0x190>)
 81014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014c6:	f003 0308 	and.w	r3, r3, #8
 81014ca:	60bb      	str	r3, [r7, #8]
 81014cc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 81014ce:	2370      	movs	r3, #112	; 0x70
 81014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014d2:	2302      	movs	r3, #2
 81014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014d6:	2300      	movs	r3, #0
 81014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014da:	2300      	movs	r3, #0
 81014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81014de:	2305      	movs	r3, #5
 81014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81014e2:	f107 0314 	add.w	r3, r7, #20
 81014e6:	4619      	mov	r1, r3
 81014e8:	483e      	ldr	r0, [pc, #248]	; (81015e4 <HAL_SPI_MspInit+0x194>)
 81014ea:	f002 fac1 	bl	8103a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81014ee:	2380      	movs	r3, #128	; 0x80
 81014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014f2:	2302      	movs	r3, #2
 81014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014f6:	2300      	movs	r3, #0
 81014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014fa:	2300      	movs	r3, #0
 81014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81014fe:	2305      	movs	r3, #5
 8101500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101502:	f107 0314 	add.w	r3, r7, #20
 8101506:	4619      	mov	r1, r3
 8101508:	4837      	ldr	r0, [pc, #220]	; (81015e8 <HAL_SPI_MspInit+0x198>)
 810150a:	f002 fab1 	bl	8103a70 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 810150e:	4b37      	ldr	r3, [pc, #220]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 8101510:	4a37      	ldr	r2, [pc, #220]	; (81015f0 <HAL_SPI_MspInit+0x1a0>)
 8101512:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101514:	4b35      	ldr	r3, [pc, #212]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 8101516:	2225      	movs	r2, #37	; 0x25
 8101518:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810151a:	4b34      	ldr	r3, [pc, #208]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 810151c:	2200      	movs	r2, #0
 810151e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101520:	4b32      	ldr	r3, [pc, #200]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 8101522:	2200      	movs	r2, #0
 8101524:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101526:	4b31      	ldr	r3, [pc, #196]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 8101528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810152c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810152e:	4b2f      	ldr	r3, [pc, #188]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 8101530:	2200      	movs	r2, #0
 8101532:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101534:	4b2d      	ldr	r3, [pc, #180]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 8101536:	2200      	movs	r2, #0
 8101538:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 810153a:	4b2c      	ldr	r3, [pc, #176]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 810153c:	2200      	movs	r2, #0
 810153e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8101540:	4b2a      	ldr	r3, [pc, #168]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 8101542:	2200      	movs	r2, #0
 8101544:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101546:	4b29      	ldr	r3, [pc, #164]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 8101548:	2200      	movs	r2, #0
 810154a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 810154c:	4827      	ldr	r0, [pc, #156]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 810154e:	f000 fb89 	bl	8101c64 <HAL_DMA_Init>
 8101552:	4603      	mov	r3, r0
 8101554:	2b00      	cmp	r3, #0
 8101556:	d001      	beq.n	810155c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8101558:	f7ff ff5a 	bl	8101410 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 810155c:	687b      	ldr	r3, [r7, #4]
 810155e:	4a23      	ldr	r2, [pc, #140]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 8101560:	67da      	str	r2, [r3, #124]	; 0x7c
 8101562:	4a22      	ldr	r2, [pc, #136]	; (81015ec <HAL_SPI_MspInit+0x19c>)
 8101564:	687b      	ldr	r3, [r7, #4]
 8101566:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 8101568:	4b22      	ldr	r3, [pc, #136]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 810156a:	4a23      	ldr	r2, [pc, #140]	; (81015f8 <HAL_SPI_MspInit+0x1a8>)
 810156c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 810156e:	4b21      	ldr	r3, [pc, #132]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 8101570:	2226      	movs	r2, #38	; 0x26
 8101572:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101574:	4b1f      	ldr	r3, [pc, #124]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 8101576:	2240      	movs	r2, #64	; 0x40
 8101578:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810157a:	4b1e      	ldr	r3, [pc, #120]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 810157c:	2200      	movs	r2, #0
 810157e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101580:	4b1c      	ldr	r3, [pc, #112]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 8101582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101586:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101588:	4b1a      	ldr	r3, [pc, #104]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 810158a:	2200      	movs	r2, #0
 810158c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810158e:	4b19      	ldr	r3, [pc, #100]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 8101590:	2200      	movs	r2, #0
 8101592:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8101594:	4b17      	ldr	r3, [pc, #92]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 8101596:	2200      	movs	r2, #0
 8101598:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 810159a:	4b16      	ldr	r3, [pc, #88]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 810159c:	2200      	movs	r2, #0
 810159e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81015a0:	4b14      	ldr	r3, [pc, #80]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 81015a2:	2200      	movs	r2, #0
 81015a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 81015a6:	4813      	ldr	r0, [pc, #76]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 81015a8:	f000 fb5c 	bl	8101c64 <HAL_DMA_Init>
 81015ac:	4603      	mov	r3, r0
 81015ae:	2b00      	cmp	r3, #0
 81015b0:	d001      	beq.n	81015b6 <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 81015b2:	f7ff ff2d 	bl	8101410 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 81015b6:	687b      	ldr	r3, [r7, #4]
 81015b8:	4a0e      	ldr	r2, [pc, #56]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 81015ba:	679a      	str	r2, [r3, #120]	; 0x78
 81015bc:	4a0d      	ldr	r2, [pc, #52]	; (81015f4 <HAL_SPI_MspInit+0x1a4>)
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 81015c2:	2200      	movs	r2, #0
 81015c4:	2100      	movs	r1, #0
 81015c6:	2023      	movs	r0, #35	; 0x23
 81015c8:	f000 fb03 	bl	8101bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 81015cc:	2023      	movs	r0, #35	; 0x23
 81015ce:	f000 fb1a 	bl	8101c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 81015d2:	bf00      	nop
 81015d4:	3728      	adds	r7, #40	; 0x28
 81015d6:	46bd      	mov	sp, r7
 81015d8:	bd80      	pop	{r7, pc}
 81015da:	bf00      	nop
 81015dc:	40013000 	.word	0x40013000
 81015e0:	58024400 	.word	0x58024400
 81015e4:	58020000 	.word	0x58020000
 81015e8:	58020c00 	.word	0x58020c00
 81015ec:	10000118 	.word	0x10000118
 81015f0:	40020010 	.word	0x40020010
 81015f4:	10000190 	.word	0x10000190
 81015f8:	40020058 	.word	0x40020058

081015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81015fc:	b480      	push	{r7}
 81015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101600:	e7fe      	b.n	8101600 <NMI_Handler+0x4>

08101602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101602:	b480      	push	{r7}
 8101604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101606:	e7fe      	b.n	8101606 <HardFault_Handler+0x4>

08101608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101608:	b480      	push	{r7}
 810160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810160c:	e7fe      	b.n	810160c <MemManage_Handler+0x4>

0810160e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810160e:	b480      	push	{r7}
 8101610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101612:	e7fe      	b.n	8101612 <BusFault_Handler+0x4>

08101614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101614:	b480      	push	{r7}
 8101616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101618:	e7fe      	b.n	8101618 <UsageFault_Handler+0x4>

0810161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810161a:	b480      	push	{r7}
 810161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810161e:	bf00      	nop
 8101620:	46bd      	mov	sp, r7
 8101622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101626:	4770      	bx	lr

08101628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101628:	b480      	push	{r7}
 810162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810162c:	bf00      	nop
 810162e:	46bd      	mov	sp, r7
 8101630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101634:	4770      	bx	lr

08101636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101636:	b480      	push	{r7}
 8101638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810163a:	bf00      	nop
 810163c:	46bd      	mov	sp, r7
 810163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101642:	4770      	bx	lr

08101644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101644:	b580      	push	{r7, lr}
 8101646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101648:	f000 f9a4 	bl	8101994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810164c:	bf00      	nop
 810164e:	bd80      	pop	{r7, pc}

08101650 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101650:	b580      	push	{r7, lr}
 8101652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101654:	4802      	ldr	r0, [pc, #8]	; (8101660 <DMA1_Stream0_IRQHandler+0x10>)
 8101656:	f001 f8a5 	bl	81027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 810165a:	bf00      	nop
 810165c:	bd80      	pop	{r7, pc}
 810165e:	bf00      	nop
 8101660:	10000118 	.word	0x10000118

08101664 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8101664:	b580      	push	{r7, lr}
 8101666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8101668:	4802      	ldr	r0, [pc, #8]	; (8101674 <DMA1_Stream3_IRQHandler+0x10>)
 810166a:	f001 f89b 	bl	81027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 810166e:	bf00      	nop
 8101670:	bd80      	pop	{r7, pc}
 8101672:	bf00      	nop
 8101674:	10000190 	.word	0x10000190

08101678 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101678:	b580      	push	{r7, lr}
 810167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 810167c:	4802      	ldr	r0, [pc, #8]	; (8101688 <SPI1_IRQHandler+0x10>)
 810167e:	f003 fb09 	bl	8104c94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101682:	bf00      	nop
 8101684:	bd80      	pop	{r7, pc}
 8101686:	bf00      	nop
 8101688:	10000090 	.word	0x10000090

0810168c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 810168c:	b480      	push	{r7}
 810168e:	af00      	add	r7, sp, #0
	return 1;
 8101690:	2301      	movs	r3, #1
}
 8101692:	4618      	mov	r0, r3
 8101694:	46bd      	mov	sp, r7
 8101696:	f85d 7b04 	ldr.w	r7, [sp], #4
 810169a:	4770      	bx	lr

0810169c <_kill>:

int _kill(int pid, int sig)
{
 810169c:	b580      	push	{r7, lr}
 810169e:	b082      	sub	sp, #8
 81016a0:	af00      	add	r7, sp, #0
 81016a2:	6078      	str	r0, [r7, #4]
 81016a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81016a6:	f003 fded 	bl	8105284 <__errno>
 81016aa:	4603      	mov	r3, r0
 81016ac:	2216      	movs	r2, #22
 81016ae:	601a      	str	r2, [r3, #0]
	return -1;
 81016b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81016b4:	4618      	mov	r0, r3
 81016b6:	3708      	adds	r7, #8
 81016b8:	46bd      	mov	sp, r7
 81016ba:	bd80      	pop	{r7, pc}

081016bc <_exit>:

void _exit (int status)
{
 81016bc:	b580      	push	{r7, lr}
 81016be:	b082      	sub	sp, #8
 81016c0:	af00      	add	r7, sp, #0
 81016c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81016c4:	f04f 31ff 	mov.w	r1, #4294967295
 81016c8:	6878      	ldr	r0, [r7, #4]
 81016ca:	f7ff ffe7 	bl	810169c <_kill>
	while (1) {}		/* Make sure we hang here */
 81016ce:	e7fe      	b.n	81016ce <_exit+0x12>

081016d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81016d0:	b580      	push	{r7, lr}
 81016d2:	b086      	sub	sp, #24
 81016d4:	af00      	add	r7, sp, #0
 81016d6:	60f8      	str	r0, [r7, #12]
 81016d8:	60b9      	str	r1, [r7, #8]
 81016da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81016dc:	2300      	movs	r3, #0
 81016de:	617b      	str	r3, [r7, #20]
 81016e0:	e00a      	b.n	81016f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 81016e2:	f3af 8000 	nop.w
 81016e6:	4601      	mov	r1, r0
 81016e8:	68bb      	ldr	r3, [r7, #8]
 81016ea:	1c5a      	adds	r2, r3, #1
 81016ec:	60ba      	str	r2, [r7, #8]
 81016ee:	b2ca      	uxtb	r2, r1
 81016f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81016f2:	697b      	ldr	r3, [r7, #20]
 81016f4:	3301      	adds	r3, #1
 81016f6:	617b      	str	r3, [r7, #20]
 81016f8:	697a      	ldr	r2, [r7, #20]
 81016fa:	687b      	ldr	r3, [r7, #4]
 81016fc:	429a      	cmp	r2, r3
 81016fe:	dbf0      	blt.n	81016e2 <_read+0x12>
	}

return len;
 8101700:	687b      	ldr	r3, [r7, #4]
}
 8101702:	4618      	mov	r0, r3
 8101704:	3718      	adds	r7, #24
 8101706:	46bd      	mov	sp, r7
 8101708:	bd80      	pop	{r7, pc}

0810170a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810170a:	b580      	push	{r7, lr}
 810170c:	b086      	sub	sp, #24
 810170e:	af00      	add	r7, sp, #0
 8101710:	60f8      	str	r0, [r7, #12]
 8101712:	60b9      	str	r1, [r7, #8]
 8101714:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101716:	2300      	movs	r3, #0
 8101718:	617b      	str	r3, [r7, #20]
 810171a:	e009      	b.n	8101730 <_write+0x26>
	{
		__io_putchar(*ptr++);
 810171c:	68bb      	ldr	r3, [r7, #8]
 810171e:	1c5a      	adds	r2, r3, #1
 8101720:	60ba      	str	r2, [r7, #8]
 8101722:	781b      	ldrb	r3, [r3, #0]
 8101724:	4618      	mov	r0, r3
 8101726:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810172a:	697b      	ldr	r3, [r7, #20]
 810172c:	3301      	adds	r3, #1
 810172e:	617b      	str	r3, [r7, #20]
 8101730:	697a      	ldr	r2, [r7, #20]
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	429a      	cmp	r2, r3
 8101736:	dbf1      	blt.n	810171c <_write+0x12>
	}
	return len;
 8101738:	687b      	ldr	r3, [r7, #4]
}
 810173a:	4618      	mov	r0, r3
 810173c:	3718      	adds	r7, #24
 810173e:	46bd      	mov	sp, r7
 8101740:	bd80      	pop	{r7, pc}

08101742 <_close>:

int _close(int file)
{
 8101742:	b480      	push	{r7}
 8101744:	b083      	sub	sp, #12
 8101746:	af00      	add	r7, sp, #0
 8101748:	6078      	str	r0, [r7, #4]
	return -1;
 810174a:	f04f 33ff 	mov.w	r3, #4294967295
}
 810174e:	4618      	mov	r0, r3
 8101750:	370c      	adds	r7, #12
 8101752:	46bd      	mov	sp, r7
 8101754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101758:	4770      	bx	lr

0810175a <_fstat>:


int _fstat(int file, struct stat *st)
{
 810175a:	b480      	push	{r7}
 810175c:	b083      	sub	sp, #12
 810175e:	af00      	add	r7, sp, #0
 8101760:	6078      	str	r0, [r7, #4]
 8101762:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101764:	683b      	ldr	r3, [r7, #0]
 8101766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810176a:	605a      	str	r2, [r3, #4]
	return 0;
 810176c:	2300      	movs	r3, #0
}
 810176e:	4618      	mov	r0, r3
 8101770:	370c      	adds	r7, #12
 8101772:	46bd      	mov	sp, r7
 8101774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101778:	4770      	bx	lr

0810177a <_isatty>:

int _isatty(int file)
{
 810177a:	b480      	push	{r7}
 810177c:	b083      	sub	sp, #12
 810177e:	af00      	add	r7, sp, #0
 8101780:	6078      	str	r0, [r7, #4]
	return 1;
 8101782:	2301      	movs	r3, #1
}
 8101784:	4618      	mov	r0, r3
 8101786:	370c      	adds	r7, #12
 8101788:	46bd      	mov	sp, r7
 810178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178e:	4770      	bx	lr

08101790 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101790:	b480      	push	{r7}
 8101792:	b085      	sub	sp, #20
 8101794:	af00      	add	r7, sp, #0
 8101796:	60f8      	str	r0, [r7, #12]
 8101798:	60b9      	str	r1, [r7, #8]
 810179a:	607a      	str	r2, [r7, #4]
	return 0;
 810179c:	2300      	movs	r3, #0
}
 810179e:	4618      	mov	r0, r3
 81017a0:	3714      	adds	r7, #20
 81017a2:	46bd      	mov	sp, r7
 81017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a8:	4770      	bx	lr
	...

081017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81017ac:	b580      	push	{r7, lr}
 81017ae:	b086      	sub	sp, #24
 81017b0:	af00      	add	r7, sp, #0
 81017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81017b4:	4a14      	ldr	r2, [pc, #80]	; (8101808 <_sbrk+0x5c>)
 81017b6:	4b15      	ldr	r3, [pc, #84]	; (810180c <_sbrk+0x60>)
 81017b8:	1ad3      	subs	r3, r2, r3
 81017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81017bc:	697b      	ldr	r3, [r7, #20]
 81017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81017c0:	4b13      	ldr	r3, [pc, #76]	; (8101810 <_sbrk+0x64>)
 81017c2:	681b      	ldr	r3, [r3, #0]
 81017c4:	2b00      	cmp	r3, #0
 81017c6:	d102      	bne.n	81017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81017c8:	4b11      	ldr	r3, [pc, #68]	; (8101810 <_sbrk+0x64>)
 81017ca:	4a12      	ldr	r2, [pc, #72]	; (8101814 <_sbrk+0x68>)
 81017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81017ce:	4b10      	ldr	r3, [pc, #64]	; (8101810 <_sbrk+0x64>)
 81017d0:	681a      	ldr	r2, [r3, #0]
 81017d2:	687b      	ldr	r3, [r7, #4]
 81017d4:	4413      	add	r3, r2
 81017d6:	693a      	ldr	r2, [r7, #16]
 81017d8:	429a      	cmp	r2, r3
 81017da:	d207      	bcs.n	81017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 81017dc:	f003 fd52 	bl	8105284 <__errno>
 81017e0:	4603      	mov	r3, r0
 81017e2:	220c      	movs	r2, #12
 81017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81017e6:	f04f 33ff 	mov.w	r3, #4294967295
 81017ea:	e009      	b.n	8101800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81017ec:	4b08      	ldr	r3, [pc, #32]	; (8101810 <_sbrk+0x64>)
 81017ee:	681b      	ldr	r3, [r3, #0]
 81017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81017f2:	4b07      	ldr	r3, [pc, #28]	; (8101810 <_sbrk+0x64>)
 81017f4:	681a      	ldr	r2, [r3, #0]
 81017f6:	687b      	ldr	r3, [r7, #4]
 81017f8:	4413      	add	r3, r2
 81017fa:	4a05      	ldr	r2, [pc, #20]	; (8101810 <_sbrk+0x64>)
 81017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81017fe:	68fb      	ldr	r3, [r7, #12]
}
 8101800:	4618      	mov	r0, r3
 8101802:	3718      	adds	r7, #24
 8101804:	46bd      	mov	sp, r7
 8101806:	bd80      	pop	{r7, pc}
 8101808:	10048000 	.word	0x10048000
 810180c:	00000400 	.word	0x00000400
 8101810:	100004c4 	.word	0x100004c4
 8101814:	100004e0 	.word	0x100004e0

08101818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101850 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810181c:	f7fe fdb0 	bl	8100380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101820:	480c      	ldr	r0, [pc, #48]	; (8101854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101822:	490d      	ldr	r1, [pc, #52]	; (8101858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101824:	4a0d      	ldr	r2, [pc, #52]	; (810185c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101828:	e002      	b.n	8101830 <LoopCopyDataInit>

0810182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810182e:	3304      	adds	r3, #4

08101830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101834:	d3f9      	bcc.n	810182a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101836:	4a0a      	ldr	r2, [pc, #40]	; (8101860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101838:	4c0a      	ldr	r4, [pc, #40]	; (8101864 <LoopFillZerobss+0x22>)
  movs r3, #0
 810183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810183c:	e001      	b.n	8101842 <LoopFillZerobss>

0810183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101840:	3204      	adds	r2, #4

08101842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101844:	d3fb      	bcc.n	810183e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101846:	f003 fd23 	bl	8105290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810184a:	f7ff fa73 	bl	8100d34 <main>
  bx  lr
 810184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101850:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101854:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101858:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 810185c:	081064d8 	.word	0x081064d8
  ldr r2, =_sbss
 8101860:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 8101864:	100004dc 	.word	0x100004dc

08101868 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101868:	e7fe      	b.n	8101868 <ADC3_IRQHandler>
	...

0810186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810186c:	b580      	push	{r7, lr}
 810186e:	b082      	sub	sp, #8
 8101870:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101872:	4b28      	ldr	r3, [pc, #160]	; (8101914 <HAL_Init+0xa8>)
 8101874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101878:	4a26      	ldr	r2, [pc, #152]	; (8101914 <HAL_Init+0xa8>)
 810187a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810187e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101882:	4b24      	ldr	r3, [pc, #144]	; (8101914 <HAL_Init+0xa8>)
 8101884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810188c:	603b      	str	r3, [r7, #0]
 810188e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101890:	4b21      	ldr	r3, [pc, #132]	; (8101918 <HAL_Init+0xac>)
 8101892:	681b      	ldr	r3, [r3, #0]
 8101894:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101898:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810189c:	4a1e      	ldr	r2, [pc, #120]	; (8101918 <HAL_Init+0xac>)
 810189e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81018a2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81018a4:	4b1c      	ldr	r3, [pc, #112]	; (8101918 <HAL_Init+0xac>)
 81018a6:	681b      	ldr	r3, [r3, #0]
 81018a8:	4a1b      	ldr	r2, [pc, #108]	; (8101918 <HAL_Init+0xac>)
 81018aa:	f043 0301 	orr.w	r3, r3, #1
 81018ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81018b0:	2003      	movs	r0, #3
 81018b2:	f000 f983 	bl	8101bbc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81018b6:	f002 fb59 	bl	8103f6c <HAL_RCC_GetSysClockFreq>
 81018ba:	4602      	mov	r2, r0
 81018bc:	4b15      	ldr	r3, [pc, #84]	; (8101914 <HAL_Init+0xa8>)
 81018be:	699b      	ldr	r3, [r3, #24]
 81018c0:	0a1b      	lsrs	r3, r3, #8
 81018c2:	f003 030f 	and.w	r3, r3, #15
 81018c6:	4915      	ldr	r1, [pc, #84]	; (810191c <HAL_Init+0xb0>)
 81018c8:	5ccb      	ldrb	r3, [r1, r3]
 81018ca:	f003 031f 	and.w	r3, r3, #31
 81018ce:	fa22 f303 	lsr.w	r3, r2, r3
 81018d2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81018d4:	4b0f      	ldr	r3, [pc, #60]	; (8101914 <HAL_Init+0xa8>)
 81018d6:	699b      	ldr	r3, [r3, #24]
 81018d8:	f003 030f 	and.w	r3, r3, #15
 81018dc:	4a0f      	ldr	r2, [pc, #60]	; (810191c <HAL_Init+0xb0>)
 81018de:	5cd3      	ldrb	r3, [r2, r3]
 81018e0:	f003 031f 	and.w	r3, r3, #31
 81018e4:	687a      	ldr	r2, [r7, #4]
 81018e6:	fa22 f303 	lsr.w	r3, r2, r3
 81018ea:	4a0d      	ldr	r2, [pc, #52]	; (8101920 <HAL_Init+0xb4>)
 81018ec:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81018ee:	4b0c      	ldr	r3, [pc, #48]	; (8101920 <HAL_Init+0xb4>)
 81018f0:	681b      	ldr	r3, [r3, #0]
 81018f2:	4a0c      	ldr	r2, [pc, #48]	; (8101924 <HAL_Init+0xb8>)
 81018f4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81018f6:	2000      	movs	r0, #0
 81018f8:	f000 f816 	bl	8101928 <HAL_InitTick>
 81018fc:	4603      	mov	r3, r0
 81018fe:	2b00      	cmp	r3, #0
 8101900:	d001      	beq.n	8101906 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101902:	2301      	movs	r3, #1
 8101904:	e002      	b.n	810190c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101906:	f7ff fd89 	bl	810141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810190a:	2300      	movs	r3, #0
}
 810190c:	4618      	mov	r0, r3
 810190e:	3708      	adds	r7, #8
 8101910:	46bd      	mov	sp, r7
 8101912:	bd80      	pop	{r7, pc}
 8101914:	58024400 	.word	0x58024400
 8101918:	40024400 	.word	0x40024400
 810191c:	08106370 	.word	0x08106370
 8101920:	10000004 	.word	0x10000004
 8101924:	10000000 	.word	0x10000000

08101928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101928:	b580      	push	{r7, lr}
 810192a:	b082      	sub	sp, #8
 810192c:	af00      	add	r7, sp, #0
 810192e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101930:	4b15      	ldr	r3, [pc, #84]	; (8101988 <HAL_InitTick+0x60>)
 8101932:	781b      	ldrb	r3, [r3, #0]
 8101934:	2b00      	cmp	r3, #0
 8101936:	d101      	bne.n	810193c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101938:	2301      	movs	r3, #1
 810193a:	e021      	b.n	8101980 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810193c:	4b13      	ldr	r3, [pc, #76]	; (810198c <HAL_InitTick+0x64>)
 810193e:	681a      	ldr	r2, [r3, #0]
 8101940:	4b11      	ldr	r3, [pc, #68]	; (8101988 <HAL_InitTick+0x60>)
 8101942:	781b      	ldrb	r3, [r3, #0]
 8101944:	4619      	mov	r1, r3
 8101946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810194a:	fbb3 f3f1 	udiv	r3, r3, r1
 810194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101952:	4618      	mov	r0, r3
 8101954:	f000 f965 	bl	8101c22 <HAL_SYSTICK_Config>
 8101958:	4603      	mov	r3, r0
 810195a:	2b00      	cmp	r3, #0
 810195c:	d001      	beq.n	8101962 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810195e:	2301      	movs	r3, #1
 8101960:	e00e      	b.n	8101980 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101962:	687b      	ldr	r3, [r7, #4]
 8101964:	2b0f      	cmp	r3, #15
 8101966:	d80a      	bhi.n	810197e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101968:	2200      	movs	r2, #0
 810196a:	6879      	ldr	r1, [r7, #4]
 810196c:	f04f 30ff 	mov.w	r0, #4294967295
 8101970:	f000 f92f 	bl	8101bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101974:	4a06      	ldr	r2, [pc, #24]	; (8101990 <HAL_InitTick+0x68>)
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810197a:	2300      	movs	r3, #0
 810197c:	e000      	b.n	8101980 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810197e:	2301      	movs	r3, #1
}
 8101980:	4618      	mov	r0, r3
 8101982:	3708      	adds	r7, #8
 8101984:	46bd      	mov	sp, r7
 8101986:	bd80      	pop	{r7, pc}
 8101988:	1000000c 	.word	0x1000000c
 810198c:	10000000 	.word	0x10000000
 8101990:	10000008 	.word	0x10000008

08101994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101994:	b480      	push	{r7}
 8101996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101998:	4b06      	ldr	r3, [pc, #24]	; (81019b4 <HAL_IncTick+0x20>)
 810199a:	781b      	ldrb	r3, [r3, #0]
 810199c:	461a      	mov	r2, r3
 810199e:	4b06      	ldr	r3, [pc, #24]	; (81019b8 <HAL_IncTick+0x24>)
 81019a0:	681b      	ldr	r3, [r3, #0]
 81019a2:	4413      	add	r3, r2
 81019a4:	4a04      	ldr	r2, [pc, #16]	; (81019b8 <HAL_IncTick+0x24>)
 81019a6:	6013      	str	r3, [r2, #0]
}
 81019a8:	bf00      	nop
 81019aa:	46bd      	mov	sp, r7
 81019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019b0:	4770      	bx	lr
 81019b2:	bf00      	nop
 81019b4:	1000000c 	.word	0x1000000c
 81019b8:	100004c8 	.word	0x100004c8

081019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81019bc:	b480      	push	{r7}
 81019be:	af00      	add	r7, sp, #0
  return uwTick;
 81019c0:	4b03      	ldr	r3, [pc, #12]	; (81019d0 <HAL_GetTick+0x14>)
 81019c2:	681b      	ldr	r3, [r3, #0]
}
 81019c4:	4618      	mov	r0, r3
 81019c6:	46bd      	mov	sp, r7
 81019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019cc:	4770      	bx	lr
 81019ce:	bf00      	nop
 81019d0:	100004c8 	.word	0x100004c8

081019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81019d4:	b580      	push	{r7, lr}
 81019d6:	b084      	sub	sp, #16
 81019d8:	af00      	add	r7, sp, #0
 81019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81019dc:	f7ff ffee 	bl	81019bc <HAL_GetTick>
 81019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81019e2:	687b      	ldr	r3, [r7, #4]
 81019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81019e6:	68fb      	ldr	r3, [r7, #12]
 81019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81019ec:	d005      	beq.n	81019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81019ee:	4b0a      	ldr	r3, [pc, #40]	; (8101a18 <HAL_Delay+0x44>)
 81019f0:	781b      	ldrb	r3, [r3, #0]
 81019f2:	461a      	mov	r2, r3
 81019f4:	68fb      	ldr	r3, [r7, #12]
 81019f6:	4413      	add	r3, r2
 81019f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81019fa:	bf00      	nop
 81019fc:	f7ff ffde 	bl	81019bc <HAL_GetTick>
 8101a00:	4602      	mov	r2, r0
 8101a02:	68bb      	ldr	r3, [r7, #8]
 8101a04:	1ad3      	subs	r3, r2, r3
 8101a06:	68fa      	ldr	r2, [r7, #12]
 8101a08:	429a      	cmp	r2, r3
 8101a0a:	d8f7      	bhi.n	81019fc <HAL_Delay+0x28>
  {
  }
}
 8101a0c:	bf00      	nop
 8101a0e:	bf00      	nop
 8101a10:	3710      	adds	r7, #16
 8101a12:	46bd      	mov	sp, r7
 8101a14:	bd80      	pop	{r7, pc}
 8101a16:	bf00      	nop
 8101a18:	1000000c 	.word	0x1000000c

08101a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101a1c:	b480      	push	{r7}
 8101a1e:	b085      	sub	sp, #20
 8101a20:	af00      	add	r7, sp, #0
 8101a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	f003 0307 	and.w	r3, r3, #7
 8101a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101a2c:	4b0c      	ldr	r3, [pc, #48]	; (8101a60 <__NVIC_SetPriorityGrouping+0x44>)
 8101a2e:	68db      	ldr	r3, [r3, #12]
 8101a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101a32:	68ba      	ldr	r2, [r7, #8]
 8101a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101a38:	4013      	ands	r3, r2
 8101a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101a3c:	68fb      	ldr	r3, [r7, #12]
 8101a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101a40:	68bb      	ldr	r3, [r7, #8]
 8101a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101a4e:	4a04      	ldr	r2, [pc, #16]	; (8101a60 <__NVIC_SetPriorityGrouping+0x44>)
 8101a50:	68bb      	ldr	r3, [r7, #8]
 8101a52:	60d3      	str	r3, [r2, #12]
}
 8101a54:	bf00      	nop
 8101a56:	3714      	adds	r7, #20
 8101a58:	46bd      	mov	sp, r7
 8101a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a5e:	4770      	bx	lr
 8101a60:	e000ed00 	.word	0xe000ed00

08101a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101a64:	b480      	push	{r7}
 8101a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101a68:	4b04      	ldr	r3, [pc, #16]	; (8101a7c <__NVIC_GetPriorityGrouping+0x18>)
 8101a6a:	68db      	ldr	r3, [r3, #12]
 8101a6c:	0a1b      	lsrs	r3, r3, #8
 8101a6e:	f003 0307 	and.w	r3, r3, #7
}
 8101a72:	4618      	mov	r0, r3
 8101a74:	46bd      	mov	sp, r7
 8101a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a7a:	4770      	bx	lr
 8101a7c:	e000ed00 	.word	0xe000ed00

08101a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101a80:	b480      	push	{r7}
 8101a82:	b083      	sub	sp, #12
 8101a84:	af00      	add	r7, sp, #0
 8101a86:	4603      	mov	r3, r0
 8101a88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a8e:	2b00      	cmp	r3, #0
 8101a90:	db0b      	blt.n	8101aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101a92:	88fb      	ldrh	r3, [r7, #6]
 8101a94:	f003 021f 	and.w	r2, r3, #31
 8101a98:	4907      	ldr	r1, [pc, #28]	; (8101ab8 <__NVIC_EnableIRQ+0x38>)
 8101a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a9e:	095b      	lsrs	r3, r3, #5
 8101aa0:	2001      	movs	r0, #1
 8101aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8101aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101aaa:	bf00      	nop
 8101aac:	370c      	adds	r7, #12
 8101aae:	46bd      	mov	sp, r7
 8101ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ab4:	4770      	bx	lr
 8101ab6:	bf00      	nop
 8101ab8:	e000e100 	.word	0xe000e100

08101abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101abc:	b480      	push	{r7}
 8101abe:	b083      	sub	sp, #12
 8101ac0:	af00      	add	r7, sp, #0
 8101ac2:	4603      	mov	r3, r0
 8101ac4:	6039      	str	r1, [r7, #0]
 8101ac6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101acc:	2b00      	cmp	r3, #0
 8101ace:	db0a      	blt.n	8101ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101ad0:	683b      	ldr	r3, [r7, #0]
 8101ad2:	b2da      	uxtb	r2, r3
 8101ad4:	490c      	ldr	r1, [pc, #48]	; (8101b08 <__NVIC_SetPriority+0x4c>)
 8101ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ada:	0112      	lsls	r2, r2, #4
 8101adc:	b2d2      	uxtb	r2, r2
 8101ade:	440b      	add	r3, r1
 8101ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101ae4:	e00a      	b.n	8101afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101ae6:	683b      	ldr	r3, [r7, #0]
 8101ae8:	b2da      	uxtb	r2, r3
 8101aea:	4908      	ldr	r1, [pc, #32]	; (8101b0c <__NVIC_SetPriority+0x50>)
 8101aec:	88fb      	ldrh	r3, [r7, #6]
 8101aee:	f003 030f 	and.w	r3, r3, #15
 8101af2:	3b04      	subs	r3, #4
 8101af4:	0112      	lsls	r2, r2, #4
 8101af6:	b2d2      	uxtb	r2, r2
 8101af8:	440b      	add	r3, r1
 8101afa:	761a      	strb	r2, [r3, #24]
}
 8101afc:	bf00      	nop
 8101afe:	370c      	adds	r7, #12
 8101b00:	46bd      	mov	sp, r7
 8101b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b06:	4770      	bx	lr
 8101b08:	e000e100 	.word	0xe000e100
 8101b0c:	e000ed00 	.word	0xe000ed00

08101b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101b10:	b480      	push	{r7}
 8101b12:	b089      	sub	sp, #36	; 0x24
 8101b14:	af00      	add	r7, sp, #0
 8101b16:	60f8      	str	r0, [r7, #12]
 8101b18:	60b9      	str	r1, [r7, #8]
 8101b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101b1c:	68fb      	ldr	r3, [r7, #12]
 8101b1e:	f003 0307 	and.w	r3, r3, #7
 8101b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101b24:	69fb      	ldr	r3, [r7, #28]
 8101b26:	f1c3 0307 	rsb	r3, r3, #7
 8101b2a:	2b04      	cmp	r3, #4
 8101b2c:	bf28      	it	cs
 8101b2e:	2304      	movcs	r3, #4
 8101b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101b32:	69fb      	ldr	r3, [r7, #28]
 8101b34:	3304      	adds	r3, #4
 8101b36:	2b06      	cmp	r3, #6
 8101b38:	d902      	bls.n	8101b40 <NVIC_EncodePriority+0x30>
 8101b3a:	69fb      	ldr	r3, [r7, #28]
 8101b3c:	3b03      	subs	r3, #3
 8101b3e:	e000      	b.n	8101b42 <NVIC_EncodePriority+0x32>
 8101b40:	2300      	movs	r3, #0
 8101b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101b44:	f04f 32ff 	mov.w	r2, #4294967295
 8101b48:	69bb      	ldr	r3, [r7, #24]
 8101b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8101b4e:	43da      	mvns	r2, r3
 8101b50:	68bb      	ldr	r3, [r7, #8]
 8101b52:	401a      	ands	r2, r3
 8101b54:	697b      	ldr	r3, [r7, #20]
 8101b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101b58:	f04f 31ff 	mov.w	r1, #4294967295
 8101b5c:	697b      	ldr	r3, [r7, #20]
 8101b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8101b62:	43d9      	mvns	r1, r3
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101b68:	4313      	orrs	r3, r2
         );
}
 8101b6a:	4618      	mov	r0, r3
 8101b6c:	3724      	adds	r7, #36	; 0x24
 8101b6e:	46bd      	mov	sp, r7
 8101b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b74:	4770      	bx	lr
	...

08101b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101b78:	b580      	push	{r7, lr}
 8101b7a:	b082      	sub	sp, #8
 8101b7c:	af00      	add	r7, sp, #0
 8101b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	3b01      	subs	r3, #1
 8101b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101b88:	d301      	bcc.n	8101b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101b8a:	2301      	movs	r3, #1
 8101b8c:	e00f      	b.n	8101bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101b8e:	4a0a      	ldr	r2, [pc, #40]	; (8101bb8 <SysTick_Config+0x40>)
 8101b90:	687b      	ldr	r3, [r7, #4]
 8101b92:	3b01      	subs	r3, #1
 8101b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101b96:	210f      	movs	r1, #15
 8101b98:	f04f 30ff 	mov.w	r0, #4294967295
 8101b9c:	f7ff ff8e 	bl	8101abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101ba0:	4b05      	ldr	r3, [pc, #20]	; (8101bb8 <SysTick_Config+0x40>)
 8101ba2:	2200      	movs	r2, #0
 8101ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101ba6:	4b04      	ldr	r3, [pc, #16]	; (8101bb8 <SysTick_Config+0x40>)
 8101ba8:	2207      	movs	r2, #7
 8101baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101bac:	2300      	movs	r3, #0
}
 8101bae:	4618      	mov	r0, r3
 8101bb0:	3708      	adds	r7, #8
 8101bb2:	46bd      	mov	sp, r7
 8101bb4:	bd80      	pop	{r7, pc}
 8101bb6:	bf00      	nop
 8101bb8:	e000e010 	.word	0xe000e010

08101bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101bbc:	b580      	push	{r7, lr}
 8101bbe:	b082      	sub	sp, #8
 8101bc0:	af00      	add	r7, sp, #0
 8101bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101bc4:	6878      	ldr	r0, [r7, #4]
 8101bc6:	f7ff ff29 	bl	8101a1c <__NVIC_SetPriorityGrouping>
}
 8101bca:	bf00      	nop
 8101bcc:	3708      	adds	r7, #8
 8101bce:	46bd      	mov	sp, r7
 8101bd0:	bd80      	pop	{r7, pc}

08101bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101bd2:	b580      	push	{r7, lr}
 8101bd4:	b086      	sub	sp, #24
 8101bd6:	af00      	add	r7, sp, #0
 8101bd8:	4603      	mov	r3, r0
 8101bda:	60b9      	str	r1, [r7, #8]
 8101bdc:	607a      	str	r2, [r7, #4]
 8101bde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101be0:	f7ff ff40 	bl	8101a64 <__NVIC_GetPriorityGrouping>
 8101be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101be6:	687a      	ldr	r2, [r7, #4]
 8101be8:	68b9      	ldr	r1, [r7, #8]
 8101bea:	6978      	ldr	r0, [r7, #20]
 8101bec:	f7ff ff90 	bl	8101b10 <NVIC_EncodePriority>
 8101bf0:	4602      	mov	r2, r0
 8101bf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101bf6:	4611      	mov	r1, r2
 8101bf8:	4618      	mov	r0, r3
 8101bfa:	f7ff ff5f 	bl	8101abc <__NVIC_SetPriority>
}
 8101bfe:	bf00      	nop
 8101c00:	3718      	adds	r7, #24
 8101c02:	46bd      	mov	sp, r7
 8101c04:	bd80      	pop	{r7, pc}

08101c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101c06:	b580      	push	{r7, lr}
 8101c08:	b082      	sub	sp, #8
 8101c0a:	af00      	add	r7, sp, #0
 8101c0c:	4603      	mov	r3, r0
 8101c0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101c14:	4618      	mov	r0, r3
 8101c16:	f7ff ff33 	bl	8101a80 <__NVIC_EnableIRQ>
}
 8101c1a:	bf00      	nop
 8101c1c:	3708      	adds	r7, #8
 8101c1e:	46bd      	mov	sp, r7
 8101c20:	bd80      	pop	{r7, pc}

08101c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101c22:	b580      	push	{r7, lr}
 8101c24:	b082      	sub	sp, #8
 8101c26:	af00      	add	r7, sp, #0
 8101c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101c2a:	6878      	ldr	r0, [r7, #4]
 8101c2c:	f7ff ffa4 	bl	8101b78 <SysTick_Config>
 8101c30:	4603      	mov	r3, r0
}
 8101c32:	4618      	mov	r0, r3
 8101c34:	3708      	adds	r7, #8
 8101c36:	46bd      	mov	sp, r7
 8101c38:	bd80      	pop	{r7, pc}
	...

08101c3c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101c3c:	b480      	push	{r7}
 8101c3e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101c40:	4b07      	ldr	r3, [pc, #28]	; (8101c60 <HAL_GetCurrentCPUID+0x24>)
 8101c42:	681b      	ldr	r3, [r3, #0]
 8101c44:	091b      	lsrs	r3, r3, #4
 8101c46:	f003 030f 	and.w	r3, r3, #15
 8101c4a:	2b07      	cmp	r3, #7
 8101c4c:	d101      	bne.n	8101c52 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101c4e:	2303      	movs	r3, #3
 8101c50:	e000      	b.n	8101c54 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101c52:	2301      	movs	r3, #1
  }
}
 8101c54:	4618      	mov	r0, r3
 8101c56:	46bd      	mov	sp, r7
 8101c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c5c:	4770      	bx	lr
 8101c5e:	bf00      	nop
 8101c60:	e000ed00 	.word	0xe000ed00

08101c64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8101c64:	b580      	push	{r7, lr}
 8101c66:	b086      	sub	sp, #24
 8101c68:	af00      	add	r7, sp, #0
 8101c6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8101c6c:	f7ff fea6 	bl	81019bc <HAL_GetTick>
 8101c70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101c72:	687b      	ldr	r3, [r7, #4]
 8101c74:	2b00      	cmp	r3, #0
 8101c76:	d101      	bne.n	8101c7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8101c78:	2301      	movs	r3, #1
 8101c7a:	e314      	b.n	81022a6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	681b      	ldr	r3, [r3, #0]
 8101c80:	4a66      	ldr	r2, [pc, #408]	; (8101e1c <HAL_DMA_Init+0x1b8>)
 8101c82:	4293      	cmp	r3, r2
 8101c84:	d04a      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	681b      	ldr	r3, [r3, #0]
 8101c8a:	4a65      	ldr	r2, [pc, #404]	; (8101e20 <HAL_DMA_Init+0x1bc>)
 8101c8c:	4293      	cmp	r3, r2
 8101c8e:	d045      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101c90:	687b      	ldr	r3, [r7, #4]
 8101c92:	681b      	ldr	r3, [r3, #0]
 8101c94:	4a63      	ldr	r2, [pc, #396]	; (8101e24 <HAL_DMA_Init+0x1c0>)
 8101c96:	4293      	cmp	r3, r2
 8101c98:	d040      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101c9a:	687b      	ldr	r3, [r7, #4]
 8101c9c:	681b      	ldr	r3, [r3, #0]
 8101c9e:	4a62      	ldr	r2, [pc, #392]	; (8101e28 <HAL_DMA_Init+0x1c4>)
 8101ca0:	4293      	cmp	r3, r2
 8101ca2:	d03b      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101ca4:	687b      	ldr	r3, [r7, #4]
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	4a60      	ldr	r2, [pc, #384]	; (8101e2c <HAL_DMA_Init+0x1c8>)
 8101caa:	4293      	cmp	r3, r2
 8101cac:	d036      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101cae:	687b      	ldr	r3, [r7, #4]
 8101cb0:	681b      	ldr	r3, [r3, #0]
 8101cb2:	4a5f      	ldr	r2, [pc, #380]	; (8101e30 <HAL_DMA_Init+0x1cc>)
 8101cb4:	4293      	cmp	r3, r2
 8101cb6:	d031      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101cb8:	687b      	ldr	r3, [r7, #4]
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	4a5d      	ldr	r2, [pc, #372]	; (8101e34 <HAL_DMA_Init+0x1d0>)
 8101cbe:	4293      	cmp	r3, r2
 8101cc0:	d02c      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101cc2:	687b      	ldr	r3, [r7, #4]
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	4a5c      	ldr	r2, [pc, #368]	; (8101e38 <HAL_DMA_Init+0x1d4>)
 8101cc8:	4293      	cmp	r3, r2
 8101cca:	d027      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	681b      	ldr	r3, [r3, #0]
 8101cd0:	4a5a      	ldr	r2, [pc, #360]	; (8101e3c <HAL_DMA_Init+0x1d8>)
 8101cd2:	4293      	cmp	r3, r2
 8101cd4:	d022      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101cd6:	687b      	ldr	r3, [r7, #4]
 8101cd8:	681b      	ldr	r3, [r3, #0]
 8101cda:	4a59      	ldr	r2, [pc, #356]	; (8101e40 <HAL_DMA_Init+0x1dc>)
 8101cdc:	4293      	cmp	r3, r2
 8101cde:	d01d      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101ce0:	687b      	ldr	r3, [r7, #4]
 8101ce2:	681b      	ldr	r3, [r3, #0]
 8101ce4:	4a57      	ldr	r2, [pc, #348]	; (8101e44 <HAL_DMA_Init+0x1e0>)
 8101ce6:	4293      	cmp	r3, r2
 8101ce8:	d018      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101cea:	687b      	ldr	r3, [r7, #4]
 8101cec:	681b      	ldr	r3, [r3, #0]
 8101cee:	4a56      	ldr	r2, [pc, #344]	; (8101e48 <HAL_DMA_Init+0x1e4>)
 8101cf0:	4293      	cmp	r3, r2
 8101cf2:	d013      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	681b      	ldr	r3, [r3, #0]
 8101cf8:	4a54      	ldr	r2, [pc, #336]	; (8101e4c <HAL_DMA_Init+0x1e8>)
 8101cfa:	4293      	cmp	r3, r2
 8101cfc:	d00e      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	4a53      	ldr	r2, [pc, #332]	; (8101e50 <HAL_DMA_Init+0x1ec>)
 8101d04:	4293      	cmp	r3, r2
 8101d06:	d009      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	4a51      	ldr	r2, [pc, #324]	; (8101e54 <HAL_DMA_Init+0x1f0>)
 8101d0e:	4293      	cmp	r3, r2
 8101d10:	d004      	beq.n	8101d1c <HAL_DMA_Init+0xb8>
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	4a50      	ldr	r2, [pc, #320]	; (8101e58 <HAL_DMA_Init+0x1f4>)
 8101d18:	4293      	cmp	r3, r2
 8101d1a:	d101      	bne.n	8101d20 <HAL_DMA_Init+0xbc>
 8101d1c:	2301      	movs	r3, #1
 8101d1e:	e000      	b.n	8101d22 <HAL_DMA_Init+0xbe>
 8101d20:	2300      	movs	r3, #0
 8101d22:	2b00      	cmp	r3, #0
 8101d24:	f000 813b 	beq.w	8101f9e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101d28:	687b      	ldr	r3, [r7, #4]
 8101d2a:	2202      	movs	r2, #2
 8101d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101d30:	687b      	ldr	r3, [r7, #4]
 8101d32:	2200      	movs	r2, #0
 8101d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8101d38:	687b      	ldr	r3, [r7, #4]
 8101d3a:	681b      	ldr	r3, [r3, #0]
 8101d3c:	4a37      	ldr	r2, [pc, #220]	; (8101e1c <HAL_DMA_Init+0x1b8>)
 8101d3e:	4293      	cmp	r3, r2
 8101d40:	d04a      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101d42:	687b      	ldr	r3, [r7, #4]
 8101d44:	681b      	ldr	r3, [r3, #0]
 8101d46:	4a36      	ldr	r2, [pc, #216]	; (8101e20 <HAL_DMA_Init+0x1bc>)
 8101d48:	4293      	cmp	r3, r2
 8101d4a:	d045      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101d4c:	687b      	ldr	r3, [r7, #4]
 8101d4e:	681b      	ldr	r3, [r3, #0]
 8101d50:	4a34      	ldr	r2, [pc, #208]	; (8101e24 <HAL_DMA_Init+0x1c0>)
 8101d52:	4293      	cmp	r3, r2
 8101d54:	d040      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	681b      	ldr	r3, [r3, #0]
 8101d5a:	4a33      	ldr	r2, [pc, #204]	; (8101e28 <HAL_DMA_Init+0x1c4>)
 8101d5c:	4293      	cmp	r3, r2
 8101d5e:	d03b      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	681b      	ldr	r3, [r3, #0]
 8101d64:	4a31      	ldr	r2, [pc, #196]	; (8101e2c <HAL_DMA_Init+0x1c8>)
 8101d66:	4293      	cmp	r3, r2
 8101d68:	d036      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101d6a:	687b      	ldr	r3, [r7, #4]
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	4a30      	ldr	r2, [pc, #192]	; (8101e30 <HAL_DMA_Init+0x1cc>)
 8101d70:	4293      	cmp	r3, r2
 8101d72:	d031      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101d74:	687b      	ldr	r3, [r7, #4]
 8101d76:	681b      	ldr	r3, [r3, #0]
 8101d78:	4a2e      	ldr	r2, [pc, #184]	; (8101e34 <HAL_DMA_Init+0x1d0>)
 8101d7a:	4293      	cmp	r3, r2
 8101d7c:	d02c      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101d7e:	687b      	ldr	r3, [r7, #4]
 8101d80:	681b      	ldr	r3, [r3, #0]
 8101d82:	4a2d      	ldr	r2, [pc, #180]	; (8101e38 <HAL_DMA_Init+0x1d4>)
 8101d84:	4293      	cmp	r3, r2
 8101d86:	d027      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101d88:	687b      	ldr	r3, [r7, #4]
 8101d8a:	681b      	ldr	r3, [r3, #0]
 8101d8c:	4a2b      	ldr	r2, [pc, #172]	; (8101e3c <HAL_DMA_Init+0x1d8>)
 8101d8e:	4293      	cmp	r3, r2
 8101d90:	d022      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	681b      	ldr	r3, [r3, #0]
 8101d96:	4a2a      	ldr	r2, [pc, #168]	; (8101e40 <HAL_DMA_Init+0x1dc>)
 8101d98:	4293      	cmp	r3, r2
 8101d9a:	d01d      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	681b      	ldr	r3, [r3, #0]
 8101da0:	4a28      	ldr	r2, [pc, #160]	; (8101e44 <HAL_DMA_Init+0x1e0>)
 8101da2:	4293      	cmp	r3, r2
 8101da4:	d018      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	681b      	ldr	r3, [r3, #0]
 8101daa:	4a27      	ldr	r2, [pc, #156]	; (8101e48 <HAL_DMA_Init+0x1e4>)
 8101dac:	4293      	cmp	r3, r2
 8101dae:	d013      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101db0:	687b      	ldr	r3, [r7, #4]
 8101db2:	681b      	ldr	r3, [r3, #0]
 8101db4:	4a25      	ldr	r2, [pc, #148]	; (8101e4c <HAL_DMA_Init+0x1e8>)
 8101db6:	4293      	cmp	r3, r2
 8101db8:	d00e      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101dba:	687b      	ldr	r3, [r7, #4]
 8101dbc:	681b      	ldr	r3, [r3, #0]
 8101dbe:	4a24      	ldr	r2, [pc, #144]	; (8101e50 <HAL_DMA_Init+0x1ec>)
 8101dc0:	4293      	cmp	r3, r2
 8101dc2:	d009      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101dc4:	687b      	ldr	r3, [r7, #4]
 8101dc6:	681b      	ldr	r3, [r3, #0]
 8101dc8:	4a22      	ldr	r2, [pc, #136]	; (8101e54 <HAL_DMA_Init+0x1f0>)
 8101dca:	4293      	cmp	r3, r2
 8101dcc:	d004      	beq.n	8101dd8 <HAL_DMA_Init+0x174>
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	681b      	ldr	r3, [r3, #0]
 8101dd2:	4a21      	ldr	r2, [pc, #132]	; (8101e58 <HAL_DMA_Init+0x1f4>)
 8101dd4:	4293      	cmp	r3, r2
 8101dd6:	d108      	bne.n	8101dea <HAL_DMA_Init+0x186>
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	681b      	ldr	r3, [r3, #0]
 8101ddc:	681a      	ldr	r2, [r3, #0]
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	681b      	ldr	r3, [r3, #0]
 8101de2:	f022 0201 	bic.w	r2, r2, #1
 8101de6:	601a      	str	r2, [r3, #0]
 8101de8:	e007      	b.n	8101dfa <HAL_DMA_Init+0x196>
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	681a      	ldr	r2, [r3, #0]
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	681b      	ldr	r3, [r3, #0]
 8101df4:	f022 0201 	bic.w	r2, r2, #1
 8101df8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101dfa:	e02f      	b.n	8101e5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101dfc:	f7ff fdde 	bl	81019bc <HAL_GetTick>
 8101e00:	4602      	mov	r2, r0
 8101e02:	693b      	ldr	r3, [r7, #16]
 8101e04:	1ad3      	subs	r3, r2, r3
 8101e06:	2b05      	cmp	r3, #5
 8101e08:	d928      	bls.n	8101e5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101e0a:	687b      	ldr	r3, [r7, #4]
 8101e0c:	2220      	movs	r2, #32
 8101e0e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8101e10:	687b      	ldr	r3, [r7, #4]
 8101e12:	2203      	movs	r2, #3
 8101e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8101e18:	2301      	movs	r3, #1
 8101e1a:	e244      	b.n	81022a6 <HAL_DMA_Init+0x642>
 8101e1c:	40020010 	.word	0x40020010
 8101e20:	40020028 	.word	0x40020028
 8101e24:	40020040 	.word	0x40020040
 8101e28:	40020058 	.word	0x40020058
 8101e2c:	40020070 	.word	0x40020070
 8101e30:	40020088 	.word	0x40020088
 8101e34:	400200a0 	.word	0x400200a0
 8101e38:	400200b8 	.word	0x400200b8
 8101e3c:	40020410 	.word	0x40020410
 8101e40:	40020428 	.word	0x40020428
 8101e44:	40020440 	.word	0x40020440
 8101e48:	40020458 	.word	0x40020458
 8101e4c:	40020470 	.word	0x40020470
 8101e50:	40020488 	.word	0x40020488
 8101e54:	400204a0 	.word	0x400204a0
 8101e58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	681b      	ldr	r3, [r3, #0]
 8101e62:	f003 0301 	and.w	r3, r3, #1
 8101e66:	2b00      	cmp	r3, #0
 8101e68:	d1c8      	bne.n	8101dfc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	681b      	ldr	r3, [r3, #0]
 8101e6e:	681b      	ldr	r3, [r3, #0]
 8101e70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8101e72:	697a      	ldr	r2, [r7, #20]
 8101e74:	4b84      	ldr	r3, [pc, #528]	; (8102088 <HAL_DMA_Init+0x424>)
 8101e76:	4013      	ands	r3, r2
 8101e78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101e7e:	687b      	ldr	r3, [r7, #4]
 8101e80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8101e82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	691b      	ldr	r3, [r3, #16]
 8101e88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101e8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101e90:	687b      	ldr	r3, [r7, #4]
 8101e92:	699b      	ldr	r3, [r3, #24]
 8101e94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101e96:	687b      	ldr	r3, [r7, #4]
 8101e98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101e9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	6a1b      	ldr	r3, [r3, #32]
 8101ea0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8101ea2:	697a      	ldr	r2, [r7, #20]
 8101ea4:	4313      	orrs	r3, r2
 8101ea6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101eac:	2b04      	cmp	r3, #4
 8101eae:	d107      	bne.n	8101ec0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101eb8:	4313      	orrs	r3, r2
 8101eba:	697a      	ldr	r2, [r7, #20]
 8101ebc:	4313      	orrs	r3, r2
 8101ebe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8101ec0:	4b72      	ldr	r3, [pc, #456]	; (810208c <HAL_DMA_Init+0x428>)
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	0c1b      	lsrs	r3, r3, #16
 8101ec6:	041b      	lsls	r3, r3, #16
 8101ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101ecc:	d328      	bcc.n	8101f20 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	685b      	ldr	r3, [r3, #4]
 8101ed2:	2b28      	cmp	r3, #40	; 0x28
 8101ed4:	d903      	bls.n	8101ede <HAL_DMA_Init+0x27a>
 8101ed6:	687b      	ldr	r3, [r7, #4]
 8101ed8:	685b      	ldr	r3, [r3, #4]
 8101eda:	2b2e      	cmp	r3, #46	; 0x2e
 8101edc:	d917      	bls.n	8101f0e <HAL_DMA_Init+0x2aa>
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	685b      	ldr	r3, [r3, #4]
 8101ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8101ee4:	d903      	bls.n	8101eee <HAL_DMA_Init+0x28a>
 8101ee6:	687b      	ldr	r3, [r7, #4]
 8101ee8:	685b      	ldr	r3, [r3, #4]
 8101eea:	2b42      	cmp	r3, #66	; 0x42
 8101eec:	d90f      	bls.n	8101f0e <HAL_DMA_Init+0x2aa>
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	685b      	ldr	r3, [r3, #4]
 8101ef2:	2b46      	cmp	r3, #70	; 0x46
 8101ef4:	d903      	bls.n	8101efe <HAL_DMA_Init+0x29a>
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	685b      	ldr	r3, [r3, #4]
 8101efa:	2b48      	cmp	r3, #72	; 0x48
 8101efc:	d907      	bls.n	8101f0e <HAL_DMA_Init+0x2aa>
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	685b      	ldr	r3, [r3, #4]
 8101f02:	2b4e      	cmp	r3, #78	; 0x4e
 8101f04:	d905      	bls.n	8101f12 <HAL_DMA_Init+0x2ae>
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	685b      	ldr	r3, [r3, #4]
 8101f0a:	2b52      	cmp	r3, #82	; 0x52
 8101f0c:	d801      	bhi.n	8101f12 <HAL_DMA_Init+0x2ae>
 8101f0e:	2301      	movs	r3, #1
 8101f10:	e000      	b.n	8101f14 <HAL_DMA_Init+0x2b0>
 8101f12:	2300      	movs	r3, #0
 8101f14:	2b00      	cmp	r3, #0
 8101f16:	d003      	beq.n	8101f20 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8101f18:	697b      	ldr	r3, [r7, #20]
 8101f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8101f1e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8101f20:	687b      	ldr	r3, [r7, #4]
 8101f22:	681b      	ldr	r3, [r3, #0]
 8101f24:	697a      	ldr	r2, [r7, #20]
 8101f26:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8101f28:	687b      	ldr	r3, [r7, #4]
 8101f2a:	681b      	ldr	r3, [r3, #0]
 8101f2c:	695b      	ldr	r3, [r3, #20]
 8101f2e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8101f30:	697b      	ldr	r3, [r7, #20]
 8101f32:	f023 0307 	bic.w	r3, r3, #7
 8101f36:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8101f38:	687b      	ldr	r3, [r7, #4]
 8101f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101f3c:	697a      	ldr	r2, [r7, #20]
 8101f3e:	4313      	orrs	r3, r2
 8101f40:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101f46:	2b04      	cmp	r3, #4
 8101f48:	d117      	bne.n	8101f7a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101f4e:	697a      	ldr	r2, [r7, #20]
 8101f50:	4313      	orrs	r3, r2
 8101f52:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101f58:	2b00      	cmp	r3, #0
 8101f5a:	d00e      	beq.n	8101f7a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8101f5c:	6878      	ldr	r0, [r7, #4]
 8101f5e:	f001 fbfd 	bl	810375c <DMA_CheckFifoParam>
 8101f62:	4603      	mov	r3, r0
 8101f64:	2b00      	cmp	r3, #0
 8101f66:	d008      	beq.n	8101f7a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	2240      	movs	r2, #64	; 0x40
 8101f6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	2201      	movs	r2, #1
 8101f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8101f76:	2301      	movs	r3, #1
 8101f78:	e195      	b.n	81022a6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8101f7a:	687b      	ldr	r3, [r7, #4]
 8101f7c:	681b      	ldr	r3, [r3, #0]
 8101f7e:	697a      	ldr	r2, [r7, #20]
 8101f80:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8101f82:	6878      	ldr	r0, [r7, #4]
 8101f84:	f001 fb38 	bl	81035f8 <DMA_CalcBaseAndBitshift>
 8101f88:	4603      	mov	r3, r0
 8101f8a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101f90:	f003 031f 	and.w	r3, r3, #31
 8101f94:	223f      	movs	r2, #63	; 0x3f
 8101f96:	409a      	lsls	r2, r3
 8101f98:	68bb      	ldr	r3, [r7, #8]
 8101f9a:	609a      	str	r2, [r3, #8]
 8101f9c:	e0cb      	b.n	8102136 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	681b      	ldr	r3, [r3, #0]
 8101fa2:	4a3b      	ldr	r2, [pc, #236]	; (8102090 <HAL_DMA_Init+0x42c>)
 8101fa4:	4293      	cmp	r3, r2
 8101fa6:	d022      	beq.n	8101fee <HAL_DMA_Init+0x38a>
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	4a39      	ldr	r2, [pc, #228]	; (8102094 <HAL_DMA_Init+0x430>)
 8101fae:	4293      	cmp	r3, r2
 8101fb0:	d01d      	beq.n	8101fee <HAL_DMA_Init+0x38a>
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	681b      	ldr	r3, [r3, #0]
 8101fb6:	4a38      	ldr	r2, [pc, #224]	; (8102098 <HAL_DMA_Init+0x434>)
 8101fb8:	4293      	cmp	r3, r2
 8101fba:	d018      	beq.n	8101fee <HAL_DMA_Init+0x38a>
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	681b      	ldr	r3, [r3, #0]
 8101fc0:	4a36      	ldr	r2, [pc, #216]	; (810209c <HAL_DMA_Init+0x438>)
 8101fc2:	4293      	cmp	r3, r2
 8101fc4:	d013      	beq.n	8101fee <HAL_DMA_Init+0x38a>
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	681b      	ldr	r3, [r3, #0]
 8101fca:	4a35      	ldr	r2, [pc, #212]	; (81020a0 <HAL_DMA_Init+0x43c>)
 8101fcc:	4293      	cmp	r3, r2
 8101fce:	d00e      	beq.n	8101fee <HAL_DMA_Init+0x38a>
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	681b      	ldr	r3, [r3, #0]
 8101fd4:	4a33      	ldr	r2, [pc, #204]	; (81020a4 <HAL_DMA_Init+0x440>)
 8101fd6:	4293      	cmp	r3, r2
 8101fd8:	d009      	beq.n	8101fee <HAL_DMA_Init+0x38a>
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	681b      	ldr	r3, [r3, #0]
 8101fde:	4a32      	ldr	r2, [pc, #200]	; (81020a8 <HAL_DMA_Init+0x444>)
 8101fe0:	4293      	cmp	r3, r2
 8101fe2:	d004      	beq.n	8101fee <HAL_DMA_Init+0x38a>
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	681b      	ldr	r3, [r3, #0]
 8101fe8:	4a30      	ldr	r2, [pc, #192]	; (81020ac <HAL_DMA_Init+0x448>)
 8101fea:	4293      	cmp	r3, r2
 8101fec:	d101      	bne.n	8101ff2 <HAL_DMA_Init+0x38e>
 8101fee:	2301      	movs	r3, #1
 8101ff0:	e000      	b.n	8101ff4 <HAL_DMA_Init+0x390>
 8101ff2:	2300      	movs	r3, #0
 8101ff4:	2b00      	cmp	r3, #0
 8101ff6:	f000 8095 	beq.w	8102124 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8101ffa:	687b      	ldr	r3, [r7, #4]
 8101ffc:	681b      	ldr	r3, [r3, #0]
 8101ffe:	4a24      	ldr	r2, [pc, #144]	; (8102090 <HAL_DMA_Init+0x42c>)
 8102000:	4293      	cmp	r3, r2
 8102002:	d021      	beq.n	8102048 <HAL_DMA_Init+0x3e4>
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	681b      	ldr	r3, [r3, #0]
 8102008:	4a22      	ldr	r2, [pc, #136]	; (8102094 <HAL_DMA_Init+0x430>)
 810200a:	4293      	cmp	r3, r2
 810200c:	d01c      	beq.n	8102048 <HAL_DMA_Init+0x3e4>
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	681b      	ldr	r3, [r3, #0]
 8102012:	4a21      	ldr	r2, [pc, #132]	; (8102098 <HAL_DMA_Init+0x434>)
 8102014:	4293      	cmp	r3, r2
 8102016:	d017      	beq.n	8102048 <HAL_DMA_Init+0x3e4>
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	681b      	ldr	r3, [r3, #0]
 810201c:	4a1f      	ldr	r2, [pc, #124]	; (810209c <HAL_DMA_Init+0x438>)
 810201e:	4293      	cmp	r3, r2
 8102020:	d012      	beq.n	8102048 <HAL_DMA_Init+0x3e4>
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	681b      	ldr	r3, [r3, #0]
 8102026:	4a1e      	ldr	r2, [pc, #120]	; (81020a0 <HAL_DMA_Init+0x43c>)
 8102028:	4293      	cmp	r3, r2
 810202a:	d00d      	beq.n	8102048 <HAL_DMA_Init+0x3e4>
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	681b      	ldr	r3, [r3, #0]
 8102030:	4a1c      	ldr	r2, [pc, #112]	; (81020a4 <HAL_DMA_Init+0x440>)
 8102032:	4293      	cmp	r3, r2
 8102034:	d008      	beq.n	8102048 <HAL_DMA_Init+0x3e4>
 8102036:	687b      	ldr	r3, [r7, #4]
 8102038:	681b      	ldr	r3, [r3, #0]
 810203a:	4a1b      	ldr	r2, [pc, #108]	; (81020a8 <HAL_DMA_Init+0x444>)
 810203c:	4293      	cmp	r3, r2
 810203e:	d003      	beq.n	8102048 <HAL_DMA_Init+0x3e4>
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	681b      	ldr	r3, [r3, #0]
 8102044:	4a19      	ldr	r2, [pc, #100]	; (81020ac <HAL_DMA_Init+0x448>)
 8102046:	4293      	cmp	r3, r2
 8102048:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810204a:	687b      	ldr	r3, [r7, #4]
 810204c:	2202      	movs	r2, #2
 810204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	2200      	movs	r2, #0
 8102056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	681b      	ldr	r3, [r3, #0]
 810205e:	681b      	ldr	r3, [r3, #0]
 8102060:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8102062:	697b      	ldr	r3, [r7, #20]
 8102064:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102068:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 810206c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	689b      	ldr	r3, [r3, #8]
 8102072:	2b40      	cmp	r3, #64	; 0x40
 8102074:	d01c      	beq.n	81020b0 <HAL_DMA_Init+0x44c>
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	689b      	ldr	r3, [r3, #8]
 810207a:	2b80      	cmp	r3, #128	; 0x80
 810207c:	d102      	bne.n	8102084 <HAL_DMA_Init+0x420>
 810207e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102082:	e016      	b.n	81020b2 <HAL_DMA_Init+0x44e>
 8102084:	2300      	movs	r3, #0
 8102086:	e014      	b.n	81020b2 <HAL_DMA_Init+0x44e>
 8102088:	fe10803f 	.word	0xfe10803f
 810208c:	5c001000 	.word	0x5c001000
 8102090:	58025408 	.word	0x58025408
 8102094:	5802541c 	.word	0x5802541c
 8102098:	58025430 	.word	0x58025430
 810209c:	58025444 	.word	0x58025444
 81020a0:	58025458 	.word	0x58025458
 81020a4:	5802546c 	.word	0x5802546c
 81020a8:	58025480 	.word	0x58025480
 81020ac:	58025494 	.word	0x58025494
 81020b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81020b2:	687a      	ldr	r2, [r7, #4]
 81020b4:	68d2      	ldr	r2, [r2, #12]
 81020b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81020b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81020ba:	687b      	ldr	r3, [r7, #4]
 81020bc:	691b      	ldr	r3, [r3, #16]
 81020be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81020c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81020c2:	687b      	ldr	r3, [r7, #4]
 81020c4:	695b      	ldr	r3, [r3, #20]
 81020c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81020c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	699b      	ldr	r3, [r3, #24]
 81020ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81020d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	69db      	ldr	r3, [r3, #28]
 81020d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81020d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	6a1b      	ldr	r3, [r3, #32]
 81020de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81020e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81020e2:	697a      	ldr	r2, [r7, #20]
 81020e4:	4313      	orrs	r3, r2
 81020e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	681b      	ldr	r3, [r3, #0]
 81020ec:	697a      	ldr	r2, [r7, #20]
 81020ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	681b      	ldr	r3, [r3, #0]
 81020f4:	461a      	mov	r2, r3
 81020f6:	4b6e      	ldr	r3, [pc, #440]	; (81022b0 <HAL_DMA_Init+0x64c>)
 81020f8:	4413      	add	r3, r2
 81020fa:	4a6e      	ldr	r2, [pc, #440]	; (81022b4 <HAL_DMA_Init+0x650>)
 81020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8102100:	091b      	lsrs	r3, r3, #4
 8102102:	009a      	lsls	r2, r3, #2
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102108:	6878      	ldr	r0, [r7, #4]
 810210a:	f001 fa75 	bl	81035f8 <DMA_CalcBaseAndBitshift>
 810210e:	4603      	mov	r3, r0
 8102110:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102116:	f003 031f 	and.w	r3, r3, #31
 810211a:	2201      	movs	r2, #1
 810211c:	409a      	lsls	r2, r3
 810211e:	68fb      	ldr	r3, [r7, #12]
 8102120:	605a      	str	r2, [r3, #4]
 8102122:	e008      	b.n	8102136 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	2240      	movs	r2, #64	; 0x40
 8102128:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	2203      	movs	r2, #3
 810212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8102132:	2301      	movs	r3, #1
 8102134:	e0b7      	b.n	81022a6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	681b      	ldr	r3, [r3, #0]
 810213a:	4a5f      	ldr	r2, [pc, #380]	; (81022b8 <HAL_DMA_Init+0x654>)
 810213c:	4293      	cmp	r3, r2
 810213e:	d072      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 8102140:	687b      	ldr	r3, [r7, #4]
 8102142:	681b      	ldr	r3, [r3, #0]
 8102144:	4a5d      	ldr	r2, [pc, #372]	; (81022bc <HAL_DMA_Init+0x658>)
 8102146:	4293      	cmp	r3, r2
 8102148:	d06d      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	681b      	ldr	r3, [r3, #0]
 810214e:	4a5c      	ldr	r2, [pc, #368]	; (81022c0 <HAL_DMA_Init+0x65c>)
 8102150:	4293      	cmp	r3, r2
 8102152:	d068      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 8102154:	687b      	ldr	r3, [r7, #4]
 8102156:	681b      	ldr	r3, [r3, #0]
 8102158:	4a5a      	ldr	r2, [pc, #360]	; (81022c4 <HAL_DMA_Init+0x660>)
 810215a:	4293      	cmp	r3, r2
 810215c:	d063      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	681b      	ldr	r3, [r3, #0]
 8102162:	4a59      	ldr	r2, [pc, #356]	; (81022c8 <HAL_DMA_Init+0x664>)
 8102164:	4293      	cmp	r3, r2
 8102166:	d05e      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	681b      	ldr	r3, [r3, #0]
 810216c:	4a57      	ldr	r2, [pc, #348]	; (81022cc <HAL_DMA_Init+0x668>)
 810216e:	4293      	cmp	r3, r2
 8102170:	d059      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	681b      	ldr	r3, [r3, #0]
 8102176:	4a56      	ldr	r2, [pc, #344]	; (81022d0 <HAL_DMA_Init+0x66c>)
 8102178:	4293      	cmp	r3, r2
 810217a:	d054      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	681b      	ldr	r3, [r3, #0]
 8102180:	4a54      	ldr	r2, [pc, #336]	; (81022d4 <HAL_DMA_Init+0x670>)
 8102182:	4293      	cmp	r3, r2
 8102184:	d04f      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	681b      	ldr	r3, [r3, #0]
 810218a:	4a53      	ldr	r2, [pc, #332]	; (81022d8 <HAL_DMA_Init+0x674>)
 810218c:	4293      	cmp	r3, r2
 810218e:	d04a      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	4a51      	ldr	r2, [pc, #324]	; (81022dc <HAL_DMA_Init+0x678>)
 8102196:	4293      	cmp	r3, r2
 8102198:	d045      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	681b      	ldr	r3, [r3, #0]
 810219e:	4a50      	ldr	r2, [pc, #320]	; (81022e0 <HAL_DMA_Init+0x67c>)
 81021a0:	4293      	cmp	r3, r2
 81021a2:	d040      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	4a4e      	ldr	r2, [pc, #312]	; (81022e4 <HAL_DMA_Init+0x680>)
 81021aa:	4293      	cmp	r3, r2
 81021ac:	d03b      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	681b      	ldr	r3, [r3, #0]
 81021b2:	4a4d      	ldr	r2, [pc, #308]	; (81022e8 <HAL_DMA_Init+0x684>)
 81021b4:	4293      	cmp	r3, r2
 81021b6:	d036      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 81021b8:	687b      	ldr	r3, [r7, #4]
 81021ba:	681b      	ldr	r3, [r3, #0]
 81021bc:	4a4b      	ldr	r2, [pc, #300]	; (81022ec <HAL_DMA_Init+0x688>)
 81021be:	4293      	cmp	r3, r2
 81021c0:	d031      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	4a4a      	ldr	r2, [pc, #296]	; (81022f0 <HAL_DMA_Init+0x68c>)
 81021c8:	4293      	cmp	r3, r2
 81021ca:	d02c      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	681b      	ldr	r3, [r3, #0]
 81021d0:	4a48      	ldr	r2, [pc, #288]	; (81022f4 <HAL_DMA_Init+0x690>)
 81021d2:	4293      	cmp	r3, r2
 81021d4:	d027      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	681b      	ldr	r3, [r3, #0]
 81021da:	4a47      	ldr	r2, [pc, #284]	; (81022f8 <HAL_DMA_Init+0x694>)
 81021dc:	4293      	cmp	r3, r2
 81021de:	d022      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	681b      	ldr	r3, [r3, #0]
 81021e4:	4a45      	ldr	r2, [pc, #276]	; (81022fc <HAL_DMA_Init+0x698>)
 81021e6:	4293      	cmp	r3, r2
 81021e8:	d01d      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	681b      	ldr	r3, [r3, #0]
 81021ee:	4a44      	ldr	r2, [pc, #272]	; (8102300 <HAL_DMA_Init+0x69c>)
 81021f0:	4293      	cmp	r3, r2
 81021f2:	d018      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	681b      	ldr	r3, [r3, #0]
 81021f8:	4a42      	ldr	r2, [pc, #264]	; (8102304 <HAL_DMA_Init+0x6a0>)
 81021fa:	4293      	cmp	r3, r2
 81021fc:	d013      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	4a41      	ldr	r2, [pc, #260]	; (8102308 <HAL_DMA_Init+0x6a4>)
 8102204:	4293      	cmp	r3, r2
 8102206:	d00e      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	681b      	ldr	r3, [r3, #0]
 810220c:	4a3f      	ldr	r2, [pc, #252]	; (810230c <HAL_DMA_Init+0x6a8>)
 810220e:	4293      	cmp	r3, r2
 8102210:	d009      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	681b      	ldr	r3, [r3, #0]
 8102216:	4a3e      	ldr	r2, [pc, #248]	; (8102310 <HAL_DMA_Init+0x6ac>)
 8102218:	4293      	cmp	r3, r2
 810221a:	d004      	beq.n	8102226 <HAL_DMA_Init+0x5c2>
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	681b      	ldr	r3, [r3, #0]
 8102220:	4a3c      	ldr	r2, [pc, #240]	; (8102314 <HAL_DMA_Init+0x6b0>)
 8102222:	4293      	cmp	r3, r2
 8102224:	d101      	bne.n	810222a <HAL_DMA_Init+0x5c6>
 8102226:	2301      	movs	r3, #1
 8102228:	e000      	b.n	810222c <HAL_DMA_Init+0x5c8>
 810222a:	2300      	movs	r3, #0
 810222c:	2b00      	cmp	r3, #0
 810222e:	d032      	beq.n	8102296 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102230:	6878      	ldr	r0, [r7, #4]
 8102232:	f001 fb0f 	bl	8103854 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	689b      	ldr	r3, [r3, #8]
 810223a:	2b80      	cmp	r3, #128	; 0x80
 810223c:	d102      	bne.n	8102244 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	2200      	movs	r2, #0
 8102242:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	685a      	ldr	r2, [r3, #4]
 8102248:	687b      	ldr	r3, [r7, #4]
 810224a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810224c:	b2d2      	uxtb	r2, r2
 810224e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102254:	687a      	ldr	r2, [r7, #4]
 8102256:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102258:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	685b      	ldr	r3, [r3, #4]
 810225e:	2b00      	cmp	r3, #0
 8102260:	d010      	beq.n	8102284 <HAL_DMA_Init+0x620>
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	685b      	ldr	r3, [r3, #4]
 8102266:	2b08      	cmp	r3, #8
 8102268:	d80c      	bhi.n	8102284 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810226a:	6878      	ldr	r0, [r7, #4]
 810226c:	f001 fb8c 	bl	8103988 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102274:	2200      	movs	r2, #0
 8102276:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810227c:	687a      	ldr	r2, [r7, #4]
 810227e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102280:	605a      	str	r2, [r3, #4]
 8102282:	e008      	b.n	8102296 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102284:	687b      	ldr	r3, [r7, #4]
 8102286:	2200      	movs	r2, #0
 8102288:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810228a:	687b      	ldr	r3, [r7, #4]
 810228c:	2200      	movs	r2, #0
 810228e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	2200      	movs	r2, #0
 8102294:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102296:	687b      	ldr	r3, [r7, #4]
 8102298:	2200      	movs	r2, #0
 810229a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	2201      	movs	r2, #1
 81022a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 81022a4:	2300      	movs	r3, #0
}
 81022a6:	4618      	mov	r0, r3
 81022a8:	3718      	adds	r7, #24
 81022aa:	46bd      	mov	sp, r7
 81022ac:	bd80      	pop	{r7, pc}
 81022ae:	bf00      	nop
 81022b0:	a7fdabf8 	.word	0xa7fdabf8
 81022b4:	cccccccd 	.word	0xcccccccd
 81022b8:	40020010 	.word	0x40020010
 81022bc:	40020028 	.word	0x40020028
 81022c0:	40020040 	.word	0x40020040
 81022c4:	40020058 	.word	0x40020058
 81022c8:	40020070 	.word	0x40020070
 81022cc:	40020088 	.word	0x40020088
 81022d0:	400200a0 	.word	0x400200a0
 81022d4:	400200b8 	.word	0x400200b8
 81022d8:	40020410 	.word	0x40020410
 81022dc:	40020428 	.word	0x40020428
 81022e0:	40020440 	.word	0x40020440
 81022e4:	40020458 	.word	0x40020458
 81022e8:	40020470 	.word	0x40020470
 81022ec:	40020488 	.word	0x40020488
 81022f0:	400204a0 	.word	0x400204a0
 81022f4:	400204b8 	.word	0x400204b8
 81022f8:	58025408 	.word	0x58025408
 81022fc:	5802541c 	.word	0x5802541c
 8102300:	58025430 	.word	0x58025430
 8102304:	58025444 	.word	0x58025444
 8102308:	58025458 	.word	0x58025458
 810230c:	5802546c 	.word	0x5802546c
 8102310:	58025480 	.word	0x58025480
 8102314:	58025494 	.word	0x58025494

08102318 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8102318:	b580      	push	{r7, lr}
 810231a:	b084      	sub	sp, #16
 810231c:	af00      	add	r7, sp, #0
 810231e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	2b00      	cmp	r3, #0
 8102324:	d101      	bne.n	810232a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8102326:	2301      	movs	r3, #1
 8102328:	e237      	b.n	810279a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 810232a:	687b      	ldr	r3, [r7, #4]
 810232c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102330:	b2db      	uxtb	r3, r3
 8102332:	2b02      	cmp	r3, #2
 8102334:	d004      	beq.n	8102340 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102336:	687b      	ldr	r3, [r7, #4]
 8102338:	2280      	movs	r2, #128	; 0x80
 810233a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 810233c:	2301      	movs	r3, #1
 810233e:	e22c      	b.n	810279a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	681b      	ldr	r3, [r3, #0]
 8102344:	4a5c      	ldr	r2, [pc, #368]	; (81024b8 <HAL_DMA_Abort_IT+0x1a0>)
 8102346:	4293      	cmp	r3, r2
 8102348:	d04a      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	4a5b      	ldr	r2, [pc, #364]	; (81024bc <HAL_DMA_Abort_IT+0x1a4>)
 8102350:	4293      	cmp	r3, r2
 8102352:	d045      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 8102354:	687b      	ldr	r3, [r7, #4]
 8102356:	681b      	ldr	r3, [r3, #0]
 8102358:	4a59      	ldr	r2, [pc, #356]	; (81024c0 <HAL_DMA_Abort_IT+0x1a8>)
 810235a:	4293      	cmp	r3, r2
 810235c:	d040      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	4a58      	ldr	r2, [pc, #352]	; (81024c4 <HAL_DMA_Abort_IT+0x1ac>)
 8102364:	4293      	cmp	r3, r2
 8102366:	d03b      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	681b      	ldr	r3, [r3, #0]
 810236c:	4a56      	ldr	r2, [pc, #344]	; (81024c8 <HAL_DMA_Abort_IT+0x1b0>)
 810236e:	4293      	cmp	r3, r2
 8102370:	d036      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	681b      	ldr	r3, [r3, #0]
 8102376:	4a55      	ldr	r2, [pc, #340]	; (81024cc <HAL_DMA_Abort_IT+0x1b4>)
 8102378:	4293      	cmp	r3, r2
 810237a:	d031      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	681b      	ldr	r3, [r3, #0]
 8102380:	4a53      	ldr	r2, [pc, #332]	; (81024d0 <HAL_DMA_Abort_IT+0x1b8>)
 8102382:	4293      	cmp	r3, r2
 8102384:	d02c      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 8102386:	687b      	ldr	r3, [r7, #4]
 8102388:	681b      	ldr	r3, [r3, #0]
 810238a:	4a52      	ldr	r2, [pc, #328]	; (81024d4 <HAL_DMA_Abort_IT+0x1bc>)
 810238c:	4293      	cmp	r3, r2
 810238e:	d027      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	681b      	ldr	r3, [r3, #0]
 8102394:	4a50      	ldr	r2, [pc, #320]	; (81024d8 <HAL_DMA_Abort_IT+0x1c0>)
 8102396:	4293      	cmp	r3, r2
 8102398:	d022      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 810239a:	687b      	ldr	r3, [r7, #4]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	4a4f      	ldr	r2, [pc, #316]	; (81024dc <HAL_DMA_Abort_IT+0x1c4>)
 81023a0:	4293      	cmp	r3, r2
 81023a2:	d01d      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 81023a4:	687b      	ldr	r3, [r7, #4]
 81023a6:	681b      	ldr	r3, [r3, #0]
 81023a8:	4a4d      	ldr	r2, [pc, #308]	; (81024e0 <HAL_DMA_Abort_IT+0x1c8>)
 81023aa:	4293      	cmp	r3, r2
 81023ac:	d018      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	681b      	ldr	r3, [r3, #0]
 81023b2:	4a4c      	ldr	r2, [pc, #304]	; (81024e4 <HAL_DMA_Abort_IT+0x1cc>)
 81023b4:	4293      	cmp	r3, r2
 81023b6:	d013      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	681b      	ldr	r3, [r3, #0]
 81023bc:	4a4a      	ldr	r2, [pc, #296]	; (81024e8 <HAL_DMA_Abort_IT+0x1d0>)
 81023be:	4293      	cmp	r3, r2
 81023c0:	d00e      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 81023c2:	687b      	ldr	r3, [r7, #4]
 81023c4:	681b      	ldr	r3, [r3, #0]
 81023c6:	4a49      	ldr	r2, [pc, #292]	; (81024ec <HAL_DMA_Abort_IT+0x1d4>)
 81023c8:	4293      	cmp	r3, r2
 81023ca:	d009      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 81023cc:	687b      	ldr	r3, [r7, #4]
 81023ce:	681b      	ldr	r3, [r3, #0]
 81023d0:	4a47      	ldr	r2, [pc, #284]	; (81024f0 <HAL_DMA_Abort_IT+0x1d8>)
 81023d2:	4293      	cmp	r3, r2
 81023d4:	d004      	beq.n	81023e0 <HAL_DMA_Abort_IT+0xc8>
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	681b      	ldr	r3, [r3, #0]
 81023da:	4a46      	ldr	r2, [pc, #280]	; (81024f4 <HAL_DMA_Abort_IT+0x1dc>)
 81023dc:	4293      	cmp	r3, r2
 81023de:	d101      	bne.n	81023e4 <HAL_DMA_Abort_IT+0xcc>
 81023e0:	2301      	movs	r3, #1
 81023e2:	e000      	b.n	81023e6 <HAL_DMA_Abort_IT+0xce>
 81023e4:	2300      	movs	r3, #0
 81023e6:	2b00      	cmp	r3, #0
 81023e8:	f000 8086 	beq.w	81024f8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	2204      	movs	r2, #4
 81023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	681b      	ldr	r3, [r3, #0]
 81023f8:	4a2f      	ldr	r2, [pc, #188]	; (81024b8 <HAL_DMA_Abort_IT+0x1a0>)
 81023fa:	4293      	cmp	r3, r2
 81023fc:	d04a      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	681b      	ldr	r3, [r3, #0]
 8102402:	4a2e      	ldr	r2, [pc, #184]	; (81024bc <HAL_DMA_Abort_IT+0x1a4>)
 8102404:	4293      	cmp	r3, r2
 8102406:	d045      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	681b      	ldr	r3, [r3, #0]
 810240c:	4a2c      	ldr	r2, [pc, #176]	; (81024c0 <HAL_DMA_Abort_IT+0x1a8>)
 810240e:	4293      	cmp	r3, r2
 8102410:	d040      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	4a2b      	ldr	r2, [pc, #172]	; (81024c4 <HAL_DMA_Abort_IT+0x1ac>)
 8102418:	4293      	cmp	r3, r2
 810241a:	d03b      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	4a29      	ldr	r2, [pc, #164]	; (81024c8 <HAL_DMA_Abort_IT+0x1b0>)
 8102422:	4293      	cmp	r3, r2
 8102424:	d036      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	4a28      	ldr	r2, [pc, #160]	; (81024cc <HAL_DMA_Abort_IT+0x1b4>)
 810242c:	4293      	cmp	r3, r2
 810242e:	d031      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	681b      	ldr	r3, [r3, #0]
 8102434:	4a26      	ldr	r2, [pc, #152]	; (81024d0 <HAL_DMA_Abort_IT+0x1b8>)
 8102436:	4293      	cmp	r3, r2
 8102438:	d02c      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	4a25      	ldr	r2, [pc, #148]	; (81024d4 <HAL_DMA_Abort_IT+0x1bc>)
 8102440:	4293      	cmp	r3, r2
 8102442:	d027      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	4a23      	ldr	r2, [pc, #140]	; (81024d8 <HAL_DMA_Abort_IT+0x1c0>)
 810244a:	4293      	cmp	r3, r2
 810244c:	d022      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	4a22      	ldr	r2, [pc, #136]	; (81024dc <HAL_DMA_Abort_IT+0x1c4>)
 8102454:	4293      	cmp	r3, r2
 8102456:	d01d      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	681b      	ldr	r3, [r3, #0]
 810245c:	4a20      	ldr	r2, [pc, #128]	; (81024e0 <HAL_DMA_Abort_IT+0x1c8>)
 810245e:	4293      	cmp	r3, r2
 8102460:	d018      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	4a1f      	ldr	r2, [pc, #124]	; (81024e4 <HAL_DMA_Abort_IT+0x1cc>)
 8102468:	4293      	cmp	r3, r2
 810246a:	d013      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	4a1d      	ldr	r2, [pc, #116]	; (81024e8 <HAL_DMA_Abort_IT+0x1d0>)
 8102472:	4293      	cmp	r3, r2
 8102474:	d00e      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	681b      	ldr	r3, [r3, #0]
 810247a:	4a1c      	ldr	r2, [pc, #112]	; (81024ec <HAL_DMA_Abort_IT+0x1d4>)
 810247c:	4293      	cmp	r3, r2
 810247e:	d009      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	681b      	ldr	r3, [r3, #0]
 8102484:	4a1a      	ldr	r2, [pc, #104]	; (81024f0 <HAL_DMA_Abort_IT+0x1d8>)
 8102486:	4293      	cmp	r3, r2
 8102488:	d004      	beq.n	8102494 <HAL_DMA_Abort_IT+0x17c>
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	4a19      	ldr	r2, [pc, #100]	; (81024f4 <HAL_DMA_Abort_IT+0x1dc>)
 8102490:	4293      	cmp	r3, r2
 8102492:	d108      	bne.n	81024a6 <HAL_DMA_Abort_IT+0x18e>
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	681b      	ldr	r3, [r3, #0]
 8102498:	681a      	ldr	r2, [r3, #0]
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	681b      	ldr	r3, [r3, #0]
 810249e:	f022 0201 	bic.w	r2, r2, #1
 81024a2:	601a      	str	r2, [r3, #0]
 81024a4:	e178      	b.n	8102798 <HAL_DMA_Abort_IT+0x480>
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	681b      	ldr	r3, [r3, #0]
 81024aa:	681a      	ldr	r2, [r3, #0]
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	681b      	ldr	r3, [r3, #0]
 81024b0:	f022 0201 	bic.w	r2, r2, #1
 81024b4:	601a      	str	r2, [r3, #0]
 81024b6:	e16f      	b.n	8102798 <HAL_DMA_Abort_IT+0x480>
 81024b8:	40020010 	.word	0x40020010
 81024bc:	40020028 	.word	0x40020028
 81024c0:	40020040 	.word	0x40020040
 81024c4:	40020058 	.word	0x40020058
 81024c8:	40020070 	.word	0x40020070
 81024cc:	40020088 	.word	0x40020088
 81024d0:	400200a0 	.word	0x400200a0
 81024d4:	400200b8 	.word	0x400200b8
 81024d8:	40020410 	.word	0x40020410
 81024dc:	40020428 	.word	0x40020428
 81024e0:	40020440 	.word	0x40020440
 81024e4:	40020458 	.word	0x40020458
 81024e8:	40020470 	.word	0x40020470
 81024ec:	40020488 	.word	0x40020488
 81024f0:	400204a0 	.word	0x400204a0
 81024f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	681a      	ldr	r2, [r3, #0]
 81024fe:	687b      	ldr	r3, [r7, #4]
 8102500:	681b      	ldr	r3, [r3, #0]
 8102502:	f022 020e 	bic.w	r2, r2, #14
 8102506:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	681b      	ldr	r3, [r3, #0]
 810250c:	4a6c      	ldr	r2, [pc, #432]	; (81026c0 <HAL_DMA_Abort_IT+0x3a8>)
 810250e:	4293      	cmp	r3, r2
 8102510:	d04a      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 8102512:	687b      	ldr	r3, [r7, #4]
 8102514:	681b      	ldr	r3, [r3, #0]
 8102516:	4a6b      	ldr	r2, [pc, #428]	; (81026c4 <HAL_DMA_Abort_IT+0x3ac>)
 8102518:	4293      	cmp	r3, r2
 810251a:	d045      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	681b      	ldr	r3, [r3, #0]
 8102520:	4a69      	ldr	r2, [pc, #420]	; (81026c8 <HAL_DMA_Abort_IT+0x3b0>)
 8102522:	4293      	cmp	r3, r2
 8102524:	d040      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	681b      	ldr	r3, [r3, #0]
 810252a:	4a68      	ldr	r2, [pc, #416]	; (81026cc <HAL_DMA_Abort_IT+0x3b4>)
 810252c:	4293      	cmp	r3, r2
 810252e:	d03b      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	681b      	ldr	r3, [r3, #0]
 8102534:	4a66      	ldr	r2, [pc, #408]	; (81026d0 <HAL_DMA_Abort_IT+0x3b8>)
 8102536:	4293      	cmp	r3, r2
 8102538:	d036      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	681b      	ldr	r3, [r3, #0]
 810253e:	4a65      	ldr	r2, [pc, #404]	; (81026d4 <HAL_DMA_Abort_IT+0x3bc>)
 8102540:	4293      	cmp	r3, r2
 8102542:	d031      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	681b      	ldr	r3, [r3, #0]
 8102548:	4a63      	ldr	r2, [pc, #396]	; (81026d8 <HAL_DMA_Abort_IT+0x3c0>)
 810254a:	4293      	cmp	r3, r2
 810254c:	d02c      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	681b      	ldr	r3, [r3, #0]
 8102552:	4a62      	ldr	r2, [pc, #392]	; (81026dc <HAL_DMA_Abort_IT+0x3c4>)
 8102554:	4293      	cmp	r3, r2
 8102556:	d027      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	681b      	ldr	r3, [r3, #0]
 810255c:	4a60      	ldr	r2, [pc, #384]	; (81026e0 <HAL_DMA_Abort_IT+0x3c8>)
 810255e:	4293      	cmp	r3, r2
 8102560:	d022      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 8102562:	687b      	ldr	r3, [r7, #4]
 8102564:	681b      	ldr	r3, [r3, #0]
 8102566:	4a5f      	ldr	r2, [pc, #380]	; (81026e4 <HAL_DMA_Abort_IT+0x3cc>)
 8102568:	4293      	cmp	r3, r2
 810256a:	d01d      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	681b      	ldr	r3, [r3, #0]
 8102570:	4a5d      	ldr	r2, [pc, #372]	; (81026e8 <HAL_DMA_Abort_IT+0x3d0>)
 8102572:	4293      	cmp	r3, r2
 8102574:	d018      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	4a5c      	ldr	r2, [pc, #368]	; (81026ec <HAL_DMA_Abort_IT+0x3d4>)
 810257c:	4293      	cmp	r3, r2
 810257e:	d013      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	681b      	ldr	r3, [r3, #0]
 8102584:	4a5a      	ldr	r2, [pc, #360]	; (81026f0 <HAL_DMA_Abort_IT+0x3d8>)
 8102586:	4293      	cmp	r3, r2
 8102588:	d00e      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	681b      	ldr	r3, [r3, #0]
 810258e:	4a59      	ldr	r2, [pc, #356]	; (81026f4 <HAL_DMA_Abort_IT+0x3dc>)
 8102590:	4293      	cmp	r3, r2
 8102592:	d009      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	681b      	ldr	r3, [r3, #0]
 8102598:	4a57      	ldr	r2, [pc, #348]	; (81026f8 <HAL_DMA_Abort_IT+0x3e0>)
 810259a:	4293      	cmp	r3, r2
 810259c:	d004      	beq.n	81025a8 <HAL_DMA_Abort_IT+0x290>
 810259e:	687b      	ldr	r3, [r7, #4]
 81025a0:	681b      	ldr	r3, [r3, #0]
 81025a2:	4a56      	ldr	r2, [pc, #344]	; (81026fc <HAL_DMA_Abort_IT+0x3e4>)
 81025a4:	4293      	cmp	r3, r2
 81025a6:	d108      	bne.n	81025ba <HAL_DMA_Abort_IT+0x2a2>
 81025a8:	687b      	ldr	r3, [r7, #4]
 81025aa:	681b      	ldr	r3, [r3, #0]
 81025ac:	681a      	ldr	r2, [r3, #0]
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	681b      	ldr	r3, [r3, #0]
 81025b2:	f022 0201 	bic.w	r2, r2, #1
 81025b6:	601a      	str	r2, [r3, #0]
 81025b8:	e007      	b.n	81025ca <HAL_DMA_Abort_IT+0x2b2>
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	681b      	ldr	r3, [r3, #0]
 81025be:	681a      	ldr	r2, [r3, #0]
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	f022 0201 	bic.w	r2, r2, #1
 81025c8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	681b      	ldr	r3, [r3, #0]
 81025ce:	4a3c      	ldr	r2, [pc, #240]	; (81026c0 <HAL_DMA_Abort_IT+0x3a8>)
 81025d0:	4293      	cmp	r3, r2
 81025d2:	d072      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 81025d4:	687b      	ldr	r3, [r7, #4]
 81025d6:	681b      	ldr	r3, [r3, #0]
 81025d8:	4a3a      	ldr	r2, [pc, #232]	; (81026c4 <HAL_DMA_Abort_IT+0x3ac>)
 81025da:	4293      	cmp	r3, r2
 81025dc:	d06d      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	681b      	ldr	r3, [r3, #0]
 81025e2:	4a39      	ldr	r2, [pc, #228]	; (81026c8 <HAL_DMA_Abort_IT+0x3b0>)
 81025e4:	4293      	cmp	r3, r2
 81025e6:	d068      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	4a37      	ldr	r2, [pc, #220]	; (81026cc <HAL_DMA_Abort_IT+0x3b4>)
 81025ee:	4293      	cmp	r3, r2
 81025f0:	d063      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	681b      	ldr	r3, [r3, #0]
 81025f6:	4a36      	ldr	r2, [pc, #216]	; (81026d0 <HAL_DMA_Abort_IT+0x3b8>)
 81025f8:	4293      	cmp	r3, r2
 81025fa:	d05e      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	681b      	ldr	r3, [r3, #0]
 8102600:	4a34      	ldr	r2, [pc, #208]	; (81026d4 <HAL_DMA_Abort_IT+0x3bc>)
 8102602:	4293      	cmp	r3, r2
 8102604:	d059      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 8102606:	687b      	ldr	r3, [r7, #4]
 8102608:	681b      	ldr	r3, [r3, #0]
 810260a:	4a33      	ldr	r2, [pc, #204]	; (81026d8 <HAL_DMA_Abort_IT+0x3c0>)
 810260c:	4293      	cmp	r3, r2
 810260e:	d054      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	681b      	ldr	r3, [r3, #0]
 8102614:	4a31      	ldr	r2, [pc, #196]	; (81026dc <HAL_DMA_Abort_IT+0x3c4>)
 8102616:	4293      	cmp	r3, r2
 8102618:	d04f      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	681b      	ldr	r3, [r3, #0]
 810261e:	4a30      	ldr	r2, [pc, #192]	; (81026e0 <HAL_DMA_Abort_IT+0x3c8>)
 8102620:	4293      	cmp	r3, r2
 8102622:	d04a      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 8102624:	687b      	ldr	r3, [r7, #4]
 8102626:	681b      	ldr	r3, [r3, #0]
 8102628:	4a2e      	ldr	r2, [pc, #184]	; (81026e4 <HAL_DMA_Abort_IT+0x3cc>)
 810262a:	4293      	cmp	r3, r2
 810262c:	d045      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	681b      	ldr	r3, [r3, #0]
 8102632:	4a2d      	ldr	r2, [pc, #180]	; (81026e8 <HAL_DMA_Abort_IT+0x3d0>)
 8102634:	4293      	cmp	r3, r2
 8102636:	d040      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 8102638:	687b      	ldr	r3, [r7, #4]
 810263a:	681b      	ldr	r3, [r3, #0]
 810263c:	4a2b      	ldr	r2, [pc, #172]	; (81026ec <HAL_DMA_Abort_IT+0x3d4>)
 810263e:	4293      	cmp	r3, r2
 8102640:	d03b      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	4a2a      	ldr	r2, [pc, #168]	; (81026f0 <HAL_DMA_Abort_IT+0x3d8>)
 8102648:	4293      	cmp	r3, r2
 810264a:	d036      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	681b      	ldr	r3, [r3, #0]
 8102650:	4a28      	ldr	r2, [pc, #160]	; (81026f4 <HAL_DMA_Abort_IT+0x3dc>)
 8102652:	4293      	cmp	r3, r2
 8102654:	d031      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	681b      	ldr	r3, [r3, #0]
 810265a:	4a27      	ldr	r2, [pc, #156]	; (81026f8 <HAL_DMA_Abort_IT+0x3e0>)
 810265c:	4293      	cmp	r3, r2
 810265e:	d02c      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	681b      	ldr	r3, [r3, #0]
 8102664:	4a25      	ldr	r2, [pc, #148]	; (81026fc <HAL_DMA_Abort_IT+0x3e4>)
 8102666:	4293      	cmp	r3, r2
 8102668:	d027      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	4a24      	ldr	r2, [pc, #144]	; (8102700 <HAL_DMA_Abort_IT+0x3e8>)
 8102670:	4293      	cmp	r3, r2
 8102672:	d022      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	4a22      	ldr	r2, [pc, #136]	; (8102704 <HAL_DMA_Abort_IT+0x3ec>)
 810267a:	4293      	cmp	r3, r2
 810267c:	d01d      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	4a21      	ldr	r2, [pc, #132]	; (8102708 <HAL_DMA_Abort_IT+0x3f0>)
 8102684:	4293      	cmp	r3, r2
 8102686:	d018      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	4a1f      	ldr	r2, [pc, #124]	; (810270c <HAL_DMA_Abort_IT+0x3f4>)
 810268e:	4293      	cmp	r3, r2
 8102690:	d013      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	4a1e      	ldr	r2, [pc, #120]	; (8102710 <HAL_DMA_Abort_IT+0x3f8>)
 8102698:	4293      	cmp	r3, r2
 810269a:	d00e      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	4a1c      	ldr	r2, [pc, #112]	; (8102714 <HAL_DMA_Abort_IT+0x3fc>)
 81026a2:	4293      	cmp	r3, r2
 81026a4:	d009      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	4a1b      	ldr	r2, [pc, #108]	; (8102718 <HAL_DMA_Abort_IT+0x400>)
 81026ac:	4293      	cmp	r3, r2
 81026ae:	d004      	beq.n	81026ba <HAL_DMA_Abort_IT+0x3a2>
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	4a19      	ldr	r2, [pc, #100]	; (810271c <HAL_DMA_Abort_IT+0x404>)
 81026b6:	4293      	cmp	r3, r2
 81026b8:	d132      	bne.n	8102720 <HAL_DMA_Abort_IT+0x408>
 81026ba:	2301      	movs	r3, #1
 81026bc:	e031      	b.n	8102722 <HAL_DMA_Abort_IT+0x40a>
 81026be:	bf00      	nop
 81026c0:	40020010 	.word	0x40020010
 81026c4:	40020028 	.word	0x40020028
 81026c8:	40020040 	.word	0x40020040
 81026cc:	40020058 	.word	0x40020058
 81026d0:	40020070 	.word	0x40020070
 81026d4:	40020088 	.word	0x40020088
 81026d8:	400200a0 	.word	0x400200a0
 81026dc:	400200b8 	.word	0x400200b8
 81026e0:	40020410 	.word	0x40020410
 81026e4:	40020428 	.word	0x40020428
 81026e8:	40020440 	.word	0x40020440
 81026ec:	40020458 	.word	0x40020458
 81026f0:	40020470 	.word	0x40020470
 81026f4:	40020488 	.word	0x40020488
 81026f8:	400204a0 	.word	0x400204a0
 81026fc:	400204b8 	.word	0x400204b8
 8102700:	58025408 	.word	0x58025408
 8102704:	5802541c 	.word	0x5802541c
 8102708:	58025430 	.word	0x58025430
 810270c:	58025444 	.word	0x58025444
 8102710:	58025458 	.word	0x58025458
 8102714:	5802546c 	.word	0x5802546c
 8102718:	58025480 	.word	0x58025480
 810271c:	58025494 	.word	0x58025494
 8102720:	2300      	movs	r3, #0
 8102722:	2b00      	cmp	r3, #0
 8102724:	d028      	beq.n	8102778 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102726:	687b      	ldr	r3, [r7, #4]
 8102728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810272a:	681a      	ldr	r2, [r3, #0]
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102734:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810273a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102740:	f003 031f 	and.w	r3, r3, #31
 8102744:	2201      	movs	r2, #1
 8102746:	409a      	lsls	r2, r3
 8102748:	68fb      	ldr	r3, [r7, #12]
 810274a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102750:	687a      	ldr	r2, [r7, #4]
 8102752:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102754:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810275a:	2b00      	cmp	r3, #0
 810275c:	d00c      	beq.n	8102778 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102762:	681a      	ldr	r2, [r3, #0]
 8102764:	687b      	ldr	r3, [r7, #4]
 8102766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810276c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102772:	687a      	ldr	r2, [r7, #4]
 8102774:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102776:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	2201      	movs	r2, #1
 810277c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	2200      	movs	r2, #0
 8102784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810278c:	2b00      	cmp	r3, #0
 810278e:	d003      	beq.n	8102798 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102794:	6878      	ldr	r0, [r7, #4]
 8102796:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8102798:	2300      	movs	r3, #0
}
 810279a:	4618      	mov	r0, r3
 810279c:	3710      	adds	r7, #16
 810279e:	46bd      	mov	sp, r7
 81027a0:	bd80      	pop	{r7, pc}
 81027a2:	bf00      	nop

081027a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81027a4:	b580      	push	{r7, lr}
 81027a6:	b08a      	sub	sp, #40	; 0x28
 81027a8:	af00      	add	r7, sp, #0
 81027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81027ac:	2300      	movs	r3, #0
 81027ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81027b0:	4b67      	ldr	r3, [pc, #412]	; (8102950 <HAL_DMA_IRQHandler+0x1ac>)
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	4a67      	ldr	r2, [pc, #412]	; (8102954 <HAL_DMA_IRQHandler+0x1b0>)
 81027b6:	fba2 2303 	umull	r2, r3, r2, r3
 81027ba:	0a9b      	lsrs	r3, r3, #10
 81027bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81027c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81027c4:	687b      	ldr	r3, [r7, #4]
 81027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81027c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 81027ca:	6a3b      	ldr	r3, [r7, #32]
 81027cc:	681b      	ldr	r3, [r3, #0]
 81027ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 81027d0:	69fb      	ldr	r3, [r7, #28]
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	681b      	ldr	r3, [r3, #0]
 81027da:	4a5f      	ldr	r2, [pc, #380]	; (8102958 <HAL_DMA_IRQHandler+0x1b4>)
 81027dc:	4293      	cmp	r3, r2
 81027de:	d04a      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	681b      	ldr	r3, [r3, #0]
 81027e4:	4a5d      	ldr	r2, [pc, #372]	; (810295c <HAL_DMA_IRQHandler+0x1b8>)
 81027e6:	4293      	cmp	r3, r2
 81027e8:	d045      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 81027ea:	687b      	ldr	r3, [r7, #4]
 81027ec:	681b      	ldr	r3, [r3, #0]
 81027ee:	4a5c      	ldr	r2, [pc, #368]	; (8102960 <HAL_DMA_IRQHandler+0x1bc>)
 81027f0:	4293      	cmp	r3, r2
 81027f2:	d040      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	4a5a      	ldr	r2, [pc, #360]	; (8102964 <HAL_DMA_IRQHandler+0x1c0>)
 81027fa:	4293      	cmp	r3, r2
 81027fc:	d03b      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	681b      	ldr	r3, [r3, #0]
 8102802:	4a59      	ldr	r2, [pc, #356]	; (8102968 <HAL_DMA_IRQHandler+0x1c4>)
 8102804:	4293      	cmp	r3, r2
 8102806:	d036      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	681b      	ldr	r3, [r3, #0]
 810280c:	4a57      	ldr	r2, [pc, #348]	; (810296c <HAL_DMA_IRQHandler+0x1c8>)
 810280e:	4293      	cmp	r3, r2
 8102810:	d031      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	681b      	ldr	r3, [r3, #0]
 8102816:	4a56      	ldr	r2, [pc, #344]	; (8102970 <HAL_DMA_IRQHandler+0x1cc>)
 8102818:	4293      	cmp	r3, r2
 810281a:	d02c      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	681b      	ldr	r3, [r3, #0]
 8102820:	4a54      	ldr	r2, [pc, #336]	; (8102974 <HAL_DMA_IRQHandler+0x1d0>)
 8102822:	4293      	cmp	r3, r2
 8102824:	d027      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	4a53      	ldr	r2, [pc, #332]	; (8102978 <HAL_DMA_IRQHandler+0x1d4>)
 810282c:	4293      	cmp	r3, r2
 810282e:	d022      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 8102830:	687b      	ldr	r3, [r7, #4]
 8102832:	681b      	ldr	r3, [r3, #0]
 8102834:	4a51      	ldr	r2, [pc, #324]	; (810297c <HAL_DMA_IRQHandler+0x1d8>)
 8102836:	4293      	cmp	r3, r2
 8102838:	d01d      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	681b      	ldr	r3, [r3, #0]
 810283e:	4a50      	ldr	r2, [pc, #320]	; (8102980 <HAL_DMA_IRQHandler+0x1dc>)
 8102840:	4293      	cmp	r3, r2
 8102842:	d018      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 8102844:	687b      	ldr	r3, [r7, #4]
 8102846:	681b      	ldr	r3, [r3, #0]
 8102848:	4a4e      	ldr	r2, [pc, #312]	; (8102984 <HAL_DMA_IRQHandler+0x1e0>)
 810284a:	4293      	cmp	r3, r2
 810284c:	d013      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	681b      	ldr	r3, [r3, #0]
 8102852:	4a4d      	ldr	r2, [pc, #308]	; (8102988 <HAL_DMA_IRQHandler+0x1e4>)
 8102854:	4293      	cmp	r3, r2
 8102856:	d00e      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 8102858:	687b      	ldr	r3, [r7, #4]
 810285a:	681b      	ldr	r3, [r3, #0]
 810285c:	4a4b      	ldr	r2, [pc, #300]	; (810298c <HAL_DMA_IRQHandler+0x1e8>)
 810285e:	4293      	cmp	r3, r2
 8102860:	d009      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	681b      	ldr	r3, [r3, #0]
 8102866:	4a4a      	ldr	r2, [pc, #296]	; (8102990 <HAL_DMA_IRQHandler+0x1ec>)
 8102868:	4293      	cmp	r3, r2
 810286a:	d004      	beq.n	8102876 <HAL_DMA_IRQHandler+0xd2>
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	681b      	ldr	r3, [r3, #0]
 8102870:	4a48      	ldr	r2, [pc, #288]	; (8102994 <HAL_DMA_IRQHandler+0x1f0>)
 8102872:	4293      	cmp	r3, r2
 8102874:	d101      	bne.n	810287a <HAL_DMA_IRQHandler+0xd6>
 8102876:	2301      	movs	r3, #1
 8102878:	e000      	b.n	810287c <HAL_DMA_IRQHandler+0xd8>
 810287a:	2300      	movs	r3, #0
 810287c:	2b00      	cmp	r3, #0
 810287e:	f000 842b 	beq.w	81030d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102886:	f003 031f 	and.w	r3, r3, #31
 810288a:	2208      	movs	r2, #8
 810288c:	409a      	lsls	r2, r3
 810288e:	69bb      	ldr	r3, [r7, #24]
 8102890:	4013      	ands	r3, r2
 8102892:	2b00      	cmp	r3, #0
 8102894:	f000 80a2 	beq.w	81029dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	681b      	ldr	r3, [r3, #0]
 810289c:	4a2e      	ldr	r2, [pc, #184]	; (8102958 <HAL_DMA_IRQHandler+0x1b4>)
 810289e:	4293      	cmp	r3, r2
 81028a0:	d04a      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 81028a2:	687b      	ldr	r3, [r7, #4]
 81028a4:	681b      	ldr	r3, [r3, #0]
 81028a6:	4a2d      	ldr	r2, [pc, #180]	; (810295c <HAL_DMA_IRQHandler+0x1b8>)
 81028a8:	4293      	cmp	r3, r2
 81028aa:	d045      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 81028ac:	687b      	ldr	r3, [r7, #4]
 81028ae:	681b      	ldr	r3, [r3, #0]
 81028b0:	4a2b      	ldr	r2, [pc, #172]	; (8102960 <HAL_DMA_IRQHandler+0x1bc>)
 81028b2:	4293      	cmp	r3, r2
 81028b4:	d040      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	681b      	ldr	r3, [r3, #0]
 81028ba:	4a2a      	ldr	r2, [pc, #168]	; (8102964 <HAL_DMA_IRQHandler+0x1c0>)
 81028bc:	4293      	cmp	r3, r2
 81028be:	d03b      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	4a28      	ldr	r2, [pc, #160]	; (8102968 <HAL_DMA_IRQHandler+0x1c4>)
 81028c6:	4293      	cmp	r3, r2
 81028c8:	d036      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	681b      	ldr	r3, [r3, #0]
 81028ce:	4a27      	ldr	r2, [pc, #156]	; (810296c <HAL_DMA_IRQHandler+0x1c8>)
 81028d0:	4293      	cmp	r3, r2
 81028d2:	d031      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 81028d4:	687b      	ldr	r3, [r7, #4]
 81028d6:	681b      	ldr	r3, [r3, #0]
 81028d8:	4a25      	ldr	r2, [pc, #148]	; (8102970 <HAL_DMA_IRQHandler+0x1cc>)
 81028da:	4293      	cmp	r3, r2
 81028dc:	d02c      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	4a24      	ldr	r2, [pc, #144]	; (8102974 <HAL_DMA_IRQHandler+0x1d0>)
 81028e4:	4293      	cmp	r3, r2
 81028e6:	d027      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 81028e8:	687b      	ldr	r3, [r7, #4]
 81028ea:	681b      	ldr	r3, [r3, #0]
 81028ec:	4a22      	ldr	r2, [pc, #136]	; (8102978 <HAL_DMA_IRQHandler+0x1d4>)
 81028ee:	4293      	cmp	r3, r2
 81028f0:	d022      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 81028f2:	687b      	ldr	r3, [r7, #4]
 81028f4:	681b      	ldr	r3, [r3, #0]
 81028f6:	4a21      	ldr	r2, [pc, #132]	; (810297c <HAL_DMA_IRQHandler+0x1d8>)
 81028f8:	4293      	cmp	r3, r2
 81028fa:	d01d      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 81028fc:	687b      	ldr	r3, [r7, #4]
 81028fe:	681b      	ldr	r3, [r3, #0]
 8102900:	4a1f      	ldr	r2, [pc, #124]	; (8102980 <HAL_DMA_IRQHandler+0x1dc>)
 8102902:	4293      	cmp	r3, r2
 8102904:	d018      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	681b      	ldr	r3, [r3, #0]
 810290a:	4a1e      	ldr	r2, [pc, #120]	; (8102984 <HAL_DMA_IRQHandler+0x1e0>)
 810290c:	4293      	cmp	r3, r2
 810290e:	d013      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 8102910:	687b      	ldr	r3, [r7, #4]
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	4a1c      	ldr	r2, [pc, #112]	; (8102988 <HAL_DMA_IRQHandler+0x1e4>)
 8102916:	4293      	cmp	r3, r2
 8102918:	d00e      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	4a1b      	ldr	r2, [pc, #108]	; (810298c <HAL_DMA_IRQHandler+0x1e8>)
 8102920:	4293      	cmp	r3, r2
 8102922:	d009      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	4a19      	ldr	r2, [pc, #100]	; (8102990 <HAL_DMA_IRQHandler+0x1ec>)
 810292a:	4293      	cmp	r3, r2
 810292c:	d004      	beq.n	8102938 <HAL_DMA_IRQHandler+0x194>
 810292e:	687b      	ldr	r3, [r7, #4]
 8102930:	681b      	ldr	r3, [r3, #0]
 8102932:	4a18      	ldr	r2, [pc, #96]	; (8102994 <HAL_DMA_IRQHandler+0x1f0>)
 8102934:	4293      	cmp	r3, r2
 8102936:	d12f      	bne.n	8102998 <HAL_DMA_IRQHandler+0x1f4>
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	f003 0304 	and.w	r3, r3, #4
 8102942:	2b00      	cmp	r3, #0
 8102944:	bf14      	ite	ne
 8102946:	2301      	movne	r3, #1
 8102948:	2300      	moveq	r3, #0
 810294a:	b2db      	uxtb	r3, r3
 810294c:	e02e      	b.n	81029ac <HAL_DMA_IRQHandler+0x208>
 810294e:	bf00      	nop
 8102950:	10000000 	.word	0x10000000
 8102954:	1b4e81b5 	.word	0x1b4e81b5
 8102958:	40020010 	.word	0x40020010
 810295c:	40020028 	.word	0x40020028
 8102960:	40020040 	.word	0x40020040
 8102964:	40020058 	.word	0x40020058
 8102968:	40020070 	.word	0x40020070
 810296c:	40020088 	.word	0x40020088
 8102970:	400200a0 	.word	0x400200a0
 8102974:	400200b8 	.word	0x400200b8
 8102978:	40020410 	.word	0x40020410
 810297c:	40020428 	.word	0x40020428
 8102980:	40020440 	.word	0x40020440
 8102984:	40020458 	.word	0x40020458
 8102988:	40020470 	.word	0x40020470
 810298c:	40020488 	.word	0x40020488
 8102990:	400204a0 	.word	0x400204a0
 8102994:	400204b8 	.word	0x400204b8
 8102998:	687b      	ldr	r3, [r7, #4]
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	f003 0308 	and.w	r3, r3, #8
 81029a2:	2b00      	cmp	r3, #0
 81029a4:	bf14      	ite	ne
 81029a6:	2301      	movne	r3, #1
 81029a8:	2300      	moveq	r3, #0
 81029aa:	b2db      	uxtb	r3, r3
 81029ac:	2b00      	cmp	r3, #0
 81029ae:	d015      	beq.n	81029dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81029b0:	687b      	ldr	r3, [r7, #4]
 81029b2:	681b      	ldr	r3, [r3, #0]
 81029b4:	681a      	ldr	r2, [r3, #0]
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	f022 0204 	bic.w	r2, r2, #4
 81029be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81029c4:	f003 031f 	and.w	r3, r3, #31
 81029c8:	2208      	movs	r2, #8
 81029ca:	409a      	lsls	r2, r3
 81029cc:	6a3b      	ldr	r3, [r7, #32]
 81029ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029d4:	f043 0201 	orr.w	r2, r3, #1
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81029e0:	f003 031f 	and.w	r3, r3, #31
 81029e4:	69ba      	ldr	r2, [r7, #24]
 81029e6:	fa22 f303 	lsr.w	r3, r2, r3
 81029ea:	f003 0301 	and.w	r3, r3, #1
 81029ee:	2b00      	cmp	r3, #0
 81029f0:	d06e      	beq.n	8102ad0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	681b      	ldr	r3, [r3, #0]
 81029f6:	4a69      	ldr	r2, [pc, #420]	; (8102b9c <HAL_DMA_IRQHandler+0x3f8>)
 81029f8:	4293      	cmp	r3, r2
 81029fa:	d04a      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	4a67      	ldr	r2, [pc, #412]	; (8102ba0 <HAL_DMA_IRQHandler+0x3fc>)
 8102a02:	4293      	cmp	r3, r2
 8102a04:	d045      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	4a66      	ldr	r2, [pc, #408]	; (8102ba4 <HAL_DMA_IRQHandler+0x400>)
 8102a0c:	4293      	cmp	r3, r2
 8102a0e:	d040      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	4a64      	ldr	r2, [pc, #400]	; (8102ba8 <HAL_DMA_IRQHandler+0x404>)
 8102a16:	4293      	cmp	r3, r2
 8102a18:	d03b      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	4a63      	ldr	r2, [pc, #396]	; (8102bac <HAL_DMA_IRQHandler+0x408>)
 8102a20:	4293      	cmp	r3, r2
 8102a22:	d036      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	4a61      	ldr	r2, [pc, #388]	; (8102bb0 <HAL_DMA_IRQHandler+0x40c>)
 8102a2a:	4293      	cmp	r3, r2
 8102a2c:	d031      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	4a60      	ldr	r2, [pc, #384]	; (8102bb4 <HAL_DMA_IRQHandler+0x410>)
 8102a34:	4293      	cmp	r3, r2
 8102a36:	d02c      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	4a5e      	ldr	r2, [pc, #376]	; (8102bb8 <HAL_DMA_IRQHandler+0x414>)
 8102a3e:	4293      	cmp	r3, r2
 8102a40:	d027      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	681b      	ldr	r3, [r3, #0]
 8102a46:	4a5d      	ldr	r2, [pc, #372]	; (8102bbc <HAL_DMA_IRQHandler+0x418>)
 8102a48:	4293      	cmp	r3, r2
 8102a4a:	d022      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	4a5b      	ldr	r2, [pc, #364]	; (8102bc0 <HAL_DMA_IRQHandler+0x41c>)
 8102a52:	4293      	cmp	r3, r2
 8102a54:	d01d      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	681b      	ldr	r3, [r3, #0]
 8102a5a:	4a5a      	ldr	r2, [pc, #360]	; (8102bc4 <HAL_DMA_IRQHandler+0x420>)
 8102a5c:	4293      	cmp	r3, r2
 8102a5e:	d018      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	681b      	ldr	r3, [r3, #0]
 8102a64:	4a58      	ldr	r2, [pc, #352]	; (8102bc8 <HAL_DMA_IRQHandler+0x424>)
 8102a66:	4293      	cmp	r3, r2
 8102a68:	d013      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	681b      	ldr	r3, [r3, #0]
 8102a6e:	4a57      	ldr	r2, [pc, #348]	; (8102bcc <HAL_DMA_IRQHandler+0x428>)
 8102a70:	4293      	cmp	r3, r2
 8102a72:	d00e      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	681b      	ldr	r3, [r3, #0]
 8102a78:	4a55      	ldr	r2, [pc, #340]	; (8102bd0 <HAL_DMA_IRQHandler+0x42c>)
 8102a7a:	4293      	cmp	r3, r2
 8102a7c:	d009      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	681b      	ldr	r3, [r3, #0]
 8102a82:	4a54      	ldr	r2, [pc, #336]	; (8102bd4 <HAL_DMA_IRQHandler+0x430>)
 8102a84:	4293      	cmp	r3, r2
 8102a86:	d004      	beq.n	8102a92 <HAL_DMA_IRQHandler+0x2ee>
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	4a52      	ldr	r2, [pc, #328]	; (8102bd8 <HAL_DMA_IRQHandler+0x434>)
 8102a8e:	4293      	cmp	r3, r2
 8102a90:	d10a      	bne.n	8102aa8 <HAL_DMA_IRQHandler+0x304>
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	695b      	ldr	r3, [r3, #20]
 8102a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102a9c:	2b00      	cmp	r3, #0
 8102a9e:	bf14      	ite	ne
 8102aa0:	2301      	movne	r3, #1
 8102aa2:	2300      	moveq	r3, #0
 8102aa4:	b2db      	uxtb	r3, r3
 8102aa6:	e003      	b.n	8102ab0 <HAL_DMA_IRQHandler+0x30c>
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	681b      	ldr	r3, [r3, #0]
 8102aac:	681b      	ldr	r3, [r3, #0]
 8102aae:	2300      	movs	r3, #0
 8102ab0:	2b00      	cmp	r3, #0
 8102ab2:	d00d      	beq.n	8102ad0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ab8:	f003 031f 	and.w	r3, r3, #31
 8102abc:	2201      	movs	r2, #1
 8102abe:	409a      	lsls	r2, r3
 8102ac0:	6a3b      	ldr	r3, [r7, #32]
 8102ac2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ac8:	f043 0202 	orr.w	r2, r3, #2
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ad4:	f003 031f 	and.w	r3, r3, #31
 8102ad8:	2204      	movs	r2, #4
 8102ada:	409a      	lsls	r2, r3
 8102adc:	69bb      	ldr	r3, [r7, #24]
 8102ade:	4013      	ands	r3, r2
 8102ae0:	2b00      	cmp	r3, #0
 8102ae2:	f000 808f 	beq.w	8102c04 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	681b      	ldr	r3, [r3, #0]
 8102aea:	4a2c      	ldr	r2, [pc, #176]	; (8102b9c <HAL_DMA_IRQHandler+0x3f8>)
 8102aec:	4293      	cmp	r3, r2
 8102aee:	d04a      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102af0:	687b      	ldr	r3, [r7, #4]
 8102af2:	681b      	ldr	r3, [r3, #0]
 8102af4:	4a2a      	ldr	r2, [pc, #168]	; (8102ba0 <HAL_DMA_IRQHandler+0x3fc>)
 8102af6:	4293      	cmp	r3, r2
 8102af8:	d045      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102afa:	687b      	ldr	r3, [r7, #4]
 8102afc:	681b      	ldr	r3, [r3, #0]
 8102afe:	4a29      	ldr	r2, [pc, #164]	; (8102ba4 <HAL_DMA_IRQHandler+0x400>)
 8102b00:	4293      	cmp	r3, r2
 8102b02:	d040      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	681b      	ldr	r3, [r3, #0]
 8102b08:	4a27      	ldr	r2, [pc, #156]	; (8102ba8 <HAL_DMA_IRQHandler+0x404>)
 8102b0a:	4293      	cmp	r3, r2
 8102b0c:	d03b      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	4a26      	ldr	r2, [pc, #152]	; (8102bac <HAL_DMA_IRQHandler+0x408>)
 8102b14:	4293      	cmp	r3, r2
 8102b16:	d036      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	681b      	ldr	r3, [r3, #0]
 8102b1c:	4a24      	ldr	r2, [pc, #144]	; (8102bb0 <HAL_DMA_IRQHandler+0x40c>)
 8102b1e:	4293      	cmp	r3, r2
 8102b20:	d031      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	4a23      	ldr	r2, [pc, #140]	; (8102bb4 <HAL_DMA_IRQHandler+0x410>)
 8102b28:	4293      	cmp	r3, r2
 8102b2a:	d02c      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b2c:	687b      	ldr	r3, [r7, #4]
 8102b2e:	681b      	ldr	r3, [r3, #0]
 8102b30:	4a21      	ldr	r2, [pc, #132]	; (8102bb8 <HAL_DMA_IRQHandler+0x414>)
 8102b32:	4293      	cmp	r3, r2
 8102b34:	d027      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b36:	687b      	ldr	r3, [r7, #4]
 8102b38:	681b      	ldr	r3, [r3, #0]
 8102b3a:	4a20      	ldr	r2, [pc, #128]	; (8102bbc <HAL_DMA_IRQHandler+0x418>)
 8102b3c:	4293      	cmp	r3, r2
 8102b3e:	d022      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	681b      	ldr	r3, [r3, #0]
 8102b44:	4a1e      	ldr	r2, [pc, #120]	; (8102bc0 <HAL_DMA_IRQHandler+0x41c>)
 8102b46:	4293      	cmp	r3, r2
 8102b48:	d01d      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b4a:	687b      	ldr	r3, [r7, #4]
 8102b4c:	681b      	ldr	r3, [r3, #0]
 8102b4e:	4a1d      	ldr	r2, [pc, #116]	; (8102bc4 <HAL_DMA_IRQHandler+0x420>)
 8102b50:	4293      	cmp	r3, r2
 8102b52:	d018      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	4a1b      	ldr	r2, [pc, #108]	; (8102bc8 <HAL_DMA_IRQHandler+0x424>)
 8102b5a:	4293      	cmp	r3, r2
 8102b5c:	d013      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b5e:	687b      	ldr	r3, [r7, #4]
 8102b60:	681b      	ldr	r3, [r3, #0]
 8102b62:	4a1a      	ldr	r2, [pc, #104]	; (8102bcc <HAL_DMA_IRQHandler+0x428>)
 8102b64:	4293      	cmp	r3, r2
 8102b66:	d00e      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b68:	687b      	ldr	r3, [r7, #4]
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	4a18      	ldr	r2, [pc, #96]	; (8102bd0 <HAL_DMA_IRQHandler+0x42c>)
 8102b6e:	4293      	cmp	r3, r2
 8102b70:	d009      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	4a17      	ldr	r2, [pc, #92]	; (8102bd4 <HAL_DMA_IRQHandler+0x430>)
 8102b78:	4293      	cmp	r3, r2
 8102b7a:	d004      	beq.n	8102b86 <HAL_DMA_IRQHandler+0x3e2>
 8102b7c:	687b      	ldr	r3, [r7, #4]
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	4a15      	ldr	r2, [pc, #84]	; (8102bd8 <HAL_DMA_IRQHandler+0x434>)
 8102b82:	4293      	cmp	r3, r2
 8102b84:	d12a      	bne.n	8102bdc <HAL_DMA_IRQHandler+0x438>
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	681b      	ldr	r3, [r3, #0]
 8102b8c:	f003 0302 	and.w	r3, r3, #2
 8102b90:	2b00      	cmp	r3, #0
 8102b92:	bf14      	ite	ne
 8102b94:	2301      	movne	r3, #1
 8102b96:	2300      	moveq	r3, #0
 8102b98:	b2db      	uxtb	r3, r3
 8102b9a:	e023      	b.n	8102be4 <HAL_DMA_IRQHandler+0x440>
 8102b9c:	40020010 	.word	0x40020010
 8102ba0:	40020028 	.word	0x40020028
 8102ba4:	40020040 	.word	0x40020040
 8102ba8:	40020058 	.word	0x40020058
 8102bac:	40020070 	.word	0x40020070
 8102bb0:	40020088 	.word	0x40020088
 8102bb4:	400200a0 	.word	0x400200a0
 8102bb8:	400200b8 	.word	0x400200b8
 8102bbc:	40020410 	.word	0x40020410
 8102bc0:	40020428 	.word	0x40020428
 8102bc4:	40020440 	.word	0x40020440
 8102bc8:	40020458 	.word	0x40020458
 8102bcc:	40020470 	.word	0x40020470
 8102bd0:	40020488 	.word	0x40020488
 8102bd4:	400204a0 	.word	0x400204a0
 8102bd8:	400204b8 	.word	0x400204b8
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	681b      	ldr	r3, [r3, #0]
 8102be2:	2300      	movs	r3, #0
 8102be4:	2b00      	cmp	r3, #0
 8102be6:	d00d      	beq.n	8102c04 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102be8:	687b      	ldr	r3, [r7, #4]
 8102bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102bec:	f003 031f 	and.w	r3, r3, #31
 8102bf0:	2204      	movs	r2, #4
 8102bf2:	409a      	lsls	r2, r3
 8102bf4:	6a3b      	ldr	r3, [r7, #32]
 8102bf6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8102bf8:	687b      	ldr	r3, [r7, #4]
 8102bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bfc:	f043 0204 	orr.w	r2, r3, #4
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102c04:	687b      	ldr	r3, [r7, #4]
 8102c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c08:	f003 031f 	and.w	r3, r3, #31
 8102c0c:	2210      	movs	r2, #16
 8102c0e:	409a      	lsls	r2, r3
 8102c10:	69bb      	ldr	r3, [r7, #24]
 8102c12:	4013      	ands	r3, r2
 8102c14:	2b00      	cmp	r3, #0
 8102c16:	f000 80a6 	beq.w	8102d66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	4a85      	ldr	r2, [pc, #532]	; (8102e34 <HAL_DMA_IRQHandler+0x690>)
 8102c20:	4293      	cmp	r3, r2
 8102c22:	d04a      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	4a83      	ldr	r2, [pc, #524]	; (8102e38 <HAL_DMA_IRQHandler+0x694>)
 8102c2a:	4293      	cmp	r3, r2
 8102c2c:	d045      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	681b      	ldr	r3, [r3, #0]
 8102c32:	4a82      	ldr	r2, [pc, #520]	; (8102e3c <HAL_DMA_IRQHandler+0x698>)
 8102c34:	4293      	cmp	r3, r2
 8102c36:	d040      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c38:	687b      	ldr	r3, [r7, #4]
 8102c3a:	681b      	ldr	r3, [r3, #0]
 8102c3c:	4a80      	ldr	r2, [pc, #512]	; (8102e40 <HAL_DMA_IRQHandler+0x69c>)
 8102c3e:	4293      	cmp	r3, r2
 8102c40:	d03b      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	4a7f      	ldr	r2, [pc, #508]	; (8102e44 <HAL_DMA_IRQHandler+0x6a0>)
 8102c48:	4293      	cmp	r3, r2
 8102c4a:	d036      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	681b      	ldr	r3, [r3, #0]
 8102c50:	4a7d      	ldr	r2, [pc, #500]	; (8102e48 <HAL_DMA_IRQHandler+0x6a4>)
 8102c52:	4293      	cmp	r3, r2
 8102c54:	d031      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	681b      	ldr	r3, [r3, #0]
 8102c5a:	4a7c      	ldr	r2, [pc, #496]	; (8102e4c <HAL_DMA_IRQHandler+0x6a8>)
 8102c5c:	4293      	cmp	r3, r2
 8102c5e:	d02c      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	4a7a      	ldr	r2, [pc, #488]	; (8102e50 <HAL_DMA_IRQHandler+0x6ac>)
 8102c66:	4293      	cmp	r3, r2
 8102c68:	d027      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c6a:	687b      	ldr	r3, [r7, #4]
 8102c6c:	681b      	ldr	r3, [r3, #0]
 8102c6e:	4a79      	ldr	r2, [pc, #484]	; (8102e54 <HAL_DMA_IRQHandler+0x6b0>)
 8102c70:	4293      	cmp	r3, r2
 8102c72:	d022      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	4a77      	ldr	r2, [pc, #476]	; (8102e58 <HAL_DMA_IRQHandler+0x6b4>)
 8102c7a:	4293      	cmp	r3, r2
 8102c7c:	d01d      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	681b      	ldr	r3, [r3, #0]
 8102c82:	4a76      	ldr	r2, [pc, #472]	; (8102e5c <HAL_DMA_IRQHandler+0x6b8>)
 8102c84:	4293      	cmp	r3, r2
 8102c86:	d018      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	681b      	ldr	r3, [r3, #0]
 8102c8c:	4a74      	ldr	r2, [pc, #464]	; (8102e60 <HAL_DMA_IRQHandler+0x6bc>)
 8102c8e:	4293      	cmp	r3, r2
 8102c90:	d013      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	4a73      	ldr	r2, [pc, #460]	; (8102e64 <HAL_DMA_IRQHandler+0x6c0>)
 8102c98:	4293      	cmp	r3, r2
 8102c9a:	d00e      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	4a71      	ldr	r2, [pc, #452]	; (8102e68 <HAL_DMA_IRQHandler+0x6c4>)
 8102ca2:	4293      	cmp	r3, r2
 8102ca4:	d009      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102ca6:	687b      	ldr	r3, [r7, #4]
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	4a70      	ldr	r2, [pc, #448]	; (8102e6c <HAL_DMA_IRQHandler+0x6c8>)
 8102cac:	4293      	cmp	r3, r2
 8102cae:	d004      	beq.n	8102cba <HAL_DMA_IRQHandler+0x516>
 8102cb0:	687b      	ldr	r3, [r7, #4]
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	4a6e      	ldr	r2, [pc, #440]	; (8102e70 <HAL_DMA_IRQHandler+0x6cc>)
 8102cb6:	4293      	cmp	r3, r2
 8102cb8:	d10a      	bne.n	8102cd0 <HAL_DMA_IRQHandler+0x52c>
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	f003 0308 	and.w	r3, r3, #8
 8102cc4:	2b00      	cmp	r3, #0
 8102cc6:	bf14      	ite	ne
 8102cc8:	2301      	movne	r3, #1
 8102cca:	2300      	moveq	r3, #0
 8102ccc:	b2db      	uxtb	r3, r3
 8102cce:	e009      	b.n	8102ce4 <HAL_DMA_IRQHandler+0x540>
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	681b      	ldr	r3, [r3, #0]
 8102cd6:	f003 0304 	and.w	r3, r3, #4
 8102cda:	2b00      	cmp	r3, #0
 8102cdc:	bf14      	ite	ne
 8102cde:	2301      	movne	r3, #1
 8102ce0:	2300      	moveq	r3, #0
 8102ce2:	b2db      	uxtb	r3, r3
 8102ce4:	2b00      	cmp	r3, #0
 8102ce6:	d03e      	beq.n	8102d66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102cec:	f003 031f 	and.w	r3, r3, #31
 8102cf0:	2210      	movs	r2, #16
 8102cf2:	409a      	lsls	r2, r3
 8102cf4:	6a3b      	ldr	r3, [r7, #32]
 8102cf6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	681b      	ldr	r3, [r3, #0]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102d02:	2b00      	cmp	r3, #0
 8102d04:	d018      	beq.n	8102d38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	681b      	ldr	r3, [r3, #0]
 8102d0a:	681b      	ldr	r3, [r3, #0]
 8102d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102d10:	2b00      	cmp	r3, #0
 8102d12:	d108      	bne.n	8102d26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d18:	2b00      	cmp	r3, #0
 8102d1a:	d024      	beq.n	8102d66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d20:	6878      	ldr	r0, [r7, #4]
 8102d22:	4798      	blx	r3
 8102d24:	e01f      	b.n	8102d66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102d2a:	2b00      	cmp	r3, #0
 8102d2c:	d01b      	beq.n	8102d66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102d32:	6878      	ldr	r0, [r7, #4]
 8102d34:	4798      	blx	r3
 8102d36:	e016      	b.n	8102d66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102d38:	687b      	ldr	r3, [r7, #4]
 8102d3a:	681b      	ldr	r3, [r3, #0]
 8102d3c:	681b      	ldr	r3, [r3, #0]
 8102d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d107      	bne.n	8102d56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	681a      	ldr	r2, [r3, #0]
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	681b      	ldr	r3, [r3, #0]
 8102d50:	f022 0208 	bic.w	r2, r2, #8
 8102d54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d5a:	2b00      	cmp	r3, #0
 8102d5c:	d003      	beq.n	8102d66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d62:	6878      	ldr	r0, [r7, #4]
 8102d64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102d6a:	f003 031f 	and.w	r3, r3, #31
 8102d6e:	2220      	movs	r2, #32
 8102d70:	409a      	lsls	r2, r3
 8102d72:	69bb      	ldr	r3, [r7, #24]
 8102d74:	4013      	ands	r3, r2
 8102d76:	2b00      	cmp	r3, #0
 8102d78:	f000 8110 	beq.w	8102f9c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	4a2c      	ldr	r2, [pc, #176]	; (8102e34 <HAL_DMA_IRQHandler+0x690>)
 8102d82:	4293      	cmp	r3, r2
 8102d84:	d04a      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102d86:	687b      	ldr	r3, [r7, #4]
 8102d88:	681b      	ldr	r3, [r3, #0]
 8102d8a:	4a2b      	ldr	r2, [pc, #172]	; (8102e38 <HAL_DMA_IRQHandler+0x694>)
 8102d8c:	4293      	cmp	r3, r2
 8102d8e:	d045      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	4a29      	ldr	r2, [pc, #164]	; (8102e3c <HAL_DMA_IRQHandler+0x698>)
 8102d96:	4293      	cmp	r3, r2
 8102d98:	d040      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	4a28      	ldr	r2, [pc, #160]	; (8102e40 <HAL_DMA_IRQHandler+0x69c>)
 8102da0:	4293      	cmp	r3, r2
 8102da2:	d03b      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102da4:	687b      	ldr	r3, [r7, #4]
 8102da6:	681b      	ldr	r3, [r3, #0]
 8102da8:	4a26      	ldr	r2, [pc, #152]	; (8102e44 <HAL_DMA_IRQHandler+0x6a0>)
 8102daa:	4293      	cmp	r3, r2
 8102dac:	d036      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	4a25      	ldr	r2, [pc, #148]	; (8102e48 <HAL_DMA_IRQHandler+0x6a4>)
 8102db4:	4293      	cmp	r3, r2
 8102db6:	d031      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102db8:	687b      	ldr	r3, [r7, #4]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	4a23      	ldr	r2, [pc, #140]	; (8102e4c <HAL_DMA_IRQHandler+0x6a8>)
 8102dbe:	4293      	cmp	r3, r2
 8102dc0:	d02c      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	4a22      	ldr	r2, [pc, #136]	; (8102e50 <HAL_DMA_IRQHandler+0x6ac>)
 8102dc8:	4293      	cmp	r3, r2
 8102dca:	d027      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102dcc:	687b      	ldr	r3, [r7, #4]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	4a20      	ldr	r2, [pc, #128]	; (8102e54 <HAL_DMA_IRQHandler+0x6b0>)
 8102dd2:	4293      	cmp	r3, r2
 8102dd4:	d022      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102dd6:	687b      	ldr	r3, [r7, #4]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	4a1f      	ldr	r2, [pc, #124]	; (8102e58 <HAL_DMA_IRQHandler+0x6b4>)
 8102ddc:	4293      	cmp	r3, r2
 8102dde:	d01d      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a1d      	ldr	r2, [pc, #116]	; (8102e5c <HAL_DMA_IRQHandler+0x6b8>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d018      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	4a1c      	ldr	r2, [pc, #112]	; (8102e60 <HAL_DMA_IRQHandler+0x6bc>)
 8102df0:	4293      	cmp	r3, r2
 8102df2:	d013      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102df4:	687b      	ldr	r3, [r7, #4]
 8102df6:	681b      	ldr	r3, [r3, #0]
 8102df8:	4a1a      	ldr	r2, [pc, #104]	; (8102e64 <HAL_DMA_IRQHandler+0x6c0>)
 8102dfa:	4293      	cmp	r3, r2
 8102dfc:	d00e      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102dfe:	687b      	ldr	r3, [r7, #4]
 8102e00:	681b      	ldr	r3, [r3, #0]
 8102e02:	4a19      	ldr	r2, [pc, #100]	; (8102e68 <HAL_DMA_IRQHandler+0x6c4>)
 8102e04:	4293      	cmp	r3, r2
 8102e06:	d009      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	4a17      	ldr	r2, [pc, #92]	; (8102e6c <HAL_DMA_IRQHandler+0x6c8>)
 8102e0e:	4293      	cmp	r3, r2
 8102e10:	d004      	beq.n	8102e1c <HAL_DMA_IRQHandler+0x678>
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	4a16      	ldr	r2, [pc, #88]	; (8102e70 <HAL_DMA_IRQHandler+0x6cc>)
 8102e18:	4293      	cmp	r3, r2
 8102e1a:	d12b      	bne.n	8102e74 <HAL_DMA_IRQHandler+0x6d0>
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	681b      	ldr	r3, [r3, #0]
 8102e22:	f003 0310 	and.w	r3, r3, #16
 8102e26:	2b00      	cmp	r3, #0
 8102e28:	bf14      	ite	ne
 8102e2a:	2301      	movne	r3, #1
 8102e2c:	2300      	moveq	r3, #0
 8102e2e:	b2db      	uxtb	r3, r3
 8102e30:	e02a      	b.n	8102e88 <HAL_DMA_IRQHandler+0x6e4>
 8102e32:	bf00      	nop
 8102e34:	40020010 	.word	0x40020010
 8102e38:	40020028 	.word	0x40020028
 8102e3c:	40020040 	.word	0x40020040
 8102e40:	40020058 	.word	0x40020058
 8102e44:	40020070 	.word	0x40020070
 8102e48:	40020088 	.word	0x40020088
 8102e4c:	400200a0 	.word	0x400200a0
 8102e50:	400200b8 	.word	0x400200b8
 8102e54:	40020410 	.word	0x40020410
 8102e58:	40020428 	.word	0x40020428
 8102e5c:	40020440 	.word	0x40020440
 8102e60:	40020458 	.word	0x40020458
 8102e64:	40020470 	.word	0x40020470
 8102e68:	40020488 	.word	0x40020488
 8102e6c:	400204a0 	.word	0x400204a0
 8102e70:	400204b8 	.word	0x400204b8
 8102e74:	687b      	ldr	r3, [r7, #4]
 8102e76:	681b      	ldr	r3, [r3, #0]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	f003 0302 	and.w	r3, r3, #2
 8102e7e:	2b00      	cmp	r3, #0
 8102e80:	bf14      	ite	ne
 8102e82:	2301      	movne	r3, #1
 8102e84:	2300      	moveq	r3, #0
 8102e86:	b2db      	uxtb	r3, r3
 8102e88:	2b00      	cmp	r3, #0
 8102e8a:	f000 8087 	beq.w	8102f9c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102e92:	f003 031f 	and.w	r3, r3, #31
 8102e96:	2220      	movs	r2, #32
 8102e98:	409a      	lsls	r2, r3
 8102e9a:	6a3b      	ldr	r3, [r7, #32]
 8102e9c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102ea4:	b2db      	uxtb	r3, r3
 8102ea6:	2b04      	cmp	r3, #4
 8102ea8:	d139      	bne.n	8102f1e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	681b      	ldr	r3, [r3, #0]
 8102eae:	681a      	ldr	r2, [r3, #0]
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	f022 0216 	bic.w	r2, r2, #22
 8102eb8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	681b      	ldr	r3, [r3, #0]
 8102ebe:	695a      	ldr	r2, [r3, #20]
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102ec8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ece:	2b00      	cmp	r3, #0
 8102ed0:	d103      	bne.n	8102eda <HAL_DMA_IRQHandler+0x736>
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102ed6:	2b00      	cmp	r3, #0
 8102ed8:	d007      	beq.n	8102eea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	681b      	ldr	r3, [r3, #0]
 8102ede:	681a      	ldr	r2, [r3, #0]
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	681b      	ldr	r3, [r3, #0]
 8102ee4:	f022 0208 	bic.w	r2, r2, #8
 8102ee8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102eee:	f003 031f 	and.w	r3, r3, #31
 8102ef2:	223f      	movs	r2, #63	; 0x3f
 8102ef4:	409a      	lsls	r2, r3
 8102ef6:	6a3b      	ldr	r3, [r7, #32]
 8102ef8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	2201      	movs	r2, #1
 8102efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	2200      	movs	r2, #0
 8102f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102f0e:	2b00      	cmp	r3, #0
 8102f10:	f000 834a 	beq.w	81035a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102f18:	6878      	ldr	r0, [r7, #4]
 8102f1a:	4798      	blx	r3
          }
          return;
 8102f1c:	e344      	b.n	81035a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	681b      	ldr	r3, [r3, #0]
 8102f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102f28:	2b00      	cmp	r3, #0
 8102f2a:	d018      	beq.n	8102f5e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102f36:	2b00      	cmp	r3, #0
 8102f38:	d108      	bne.n	8102f4c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102f3e:	2b00      	cmp	r3, #0
 8102f40:	d02c      	beq.n	8102f9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102f46:	6878      	ldr	r0, [r7, #4]
 8102f48:	4798      	blx	r3
 8102f4a:	e027      	b.n	8102f9c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	d023      	beq.n	8102f9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102f58:	6878      	ldr	r0, [r7, #4]
 8102f5a:	4798      	blx	r3
 8102f5c:	e01e      	b.n	8102f9c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	d10f      	bne.n	8102f8c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	681a      	ldr	r2, [r3, #0]
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	f022 0210 	bic.w	r2, r2, #16
 8102f7a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	2201      	movs	r2, #1
 8102f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	2200      	movs	r2, #0
 8102f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102f90:	2b00      	cmp	r3, #0
 8102f92:	d003      	beq.n	8102f9c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102f98:	6878      	ldr	r0, [r7, #4]
 8102f9a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fa0:	2b00      	cmp	r3, #0
 8102fa2:	f000 8306 	beq.w	81035b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102faa:	f003 0301 	and.w	r3, r3, #1
 8102fae:	2b00      	cmp	r3, #0
 8102fb0:	f000 8088 	beq.w	81030c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	2204      	movs	r2, #4
 8102fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	681b      	ldr	r3, [r3, #0]
 8102fc0:	4a7a      	ldr	r2, [pc, #488]	; (81031ac <HAL_DMA_IRQHandler+0xa08>)
 8102fc2:	4293      	cmp	r3, r2
 8102fc4:	d04a      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8102fc6:	687b      	ldr	r3, [r7, #4]
 8102fc8:	681b      	ldr	r3, [r3, #0]
 8102fca:	4a79      	ldr	r2, [pc, #484]	; (81031b0 <HAL_DMA_IRQHandler+0xa0c>)
 8102fcc:	4293      	cmp	r3, r2
 8102fce:	d045      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	4a77      	ldr	r2, [pc, #476]	; (81031b4 <HAL_DMA_IRQHandler+0xa10>)
 8102fd6:	4293      	cmp	r3, r2
 8102fd8:	d040      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	4a76      	ldr	r2, [pc, #472]	; (81031b8 <HAL_DMA_IRQHandler+0xa14>)
 8102fe0:	4293      	cmp	r3, r2
 8102fe2:	d03b      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	681b      	ldr	r3, [r3, #0]
 8102fe8:	4a74      	ldr	r2, [pc, #464]	; (81031bc <HAL_DMA_IRQHandler+0xa18>)
 8102fea:	4293      	cmp	r3, r2
 8102fec:	d036      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	4a73      	ldr	r2, [pc, #460]	; (81031c0 <HAL_DMA_IRQHandler+0xa1c>)
 8102ff4:	4293      	cmp	r3, r2
 8102ff6:	d031      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	4a71      	ldr	r2, [pc, #452]	; (81031c4 <HAL_DMA_IRQHandler+0xa20>)
 8102ffe:	4293      	cmp	r3, r2
 8103000:	d02c      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	4a70      	ldr	r2, [pc, #448]	; (81031c8 <HAL_DMA_IRQHandler+0xa24>)
 8103008:	4293      	cmp	r3, r2
 810300a:	d027      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	4a6e      	ldr	r2, [pc, #440]	; (81031cc <HAL_DMA_IRQHandler+0xa28>)
 8103012:	4293      	cmp	r3, r2
 8103014:	d022      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	4a6d      	ldr	r2, [pc, #436]	; (81031d0 <HAL_DMA_IRQHandler+0xa2c>)
 810301c:	4293      	cmp	r3, r2
 810301e:	d01d      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	4a6b      	ldr	r2, [pc, #428]	; (81031d4 <HAL_DMA_IRQHandler+0xa30>)
 8103026:	4293      	cmp	r3, r2
 8103028:	d018      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	681b      	ldr	r3, [r3, #0]
 810302e:	4a6a      	ldr	r2, [pc, #424]	; (81031d8 <HAL_DMA_IRQHandler+0xa34>)
 8103030:	4293      	cmp	r3, r2
 8103032:	d013      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	4a68      	ldr	r2, [pc, #416]	; (81031dc <HAL_DMA_IRQHandler+0xa38>)
 810303a:	4293      	cmp	r3, r2
 810303c:	d00e      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	4a67      	ldr	r2, [pc, #412]	; (81031e0 <HAL_DMA_IRQHandler+0xa3c>)
 8103044:	4293      	cmp	r3, r2
 8103046:	d009      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	4a65      	ldr	r2, [pc, #404]	; (81031e4 <HAL_DMA_IRQHandler+0xa40>)
 810304e:	4293      	cmp	r3, r2
 8103050:	d004      	beq.n	810305c <HAL_DMA_IRQHandler+0x8b8>
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	4a64      	ldr	r2, [pc, #400]	; (81031e8 <HAL_DMA_IRQHandler+0xa44>)
 8103058:	4293      	cmp	r3, r2
 810305a:	d108      	bne.n	810306e <HAL_DMA_IRQHandler+0x8ca>
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	681a      	ldr	r2, [r3, #0]
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	681b      	ldr	r3, [r3, #0]
 8103066:	f022 0201 	bic.w	r2, r2, #1
 810306a:	601a      	str	r2, [r3, #0]
 810306c:	e007      	b.n	810307e <HAL_DMA_IRQHandler+0x8da>
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	681a      	ldr	r2, [r3, #0]
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	681b      	ldr	r3, [r3, #0]
 8103078:	f022 0201 	bic.w	r2, r2, #1
 810307c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810307e:	68fb      	ldr	r3, [r7, #12]
 8103080:	3301      	adds	r3, #1
 8103082:	60fb      	str	r3, [r7, #12]
 8103084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103086:	429a      	cmp	r2, r3
 8103088:	d307      	bcc.n	810309a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	681b      	ldr	r3, [r3, #0]
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	f003 0301 	and.w	r3, r3, #1
 8103094:	2b00      	cmp	r3, #0
 8103096:	d1f2      	bne.n	810307e <HAL_DMA_IRQHandler+0x8da>
 8103098:	e000      	b.n	810309c <HAL_DMA_IRQHandler+0x8f8>
            break;
 810309a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810309c:	687b      	ldr	r3, [r7, #4]
 810309e:	681b      	ldr	r3, [r3, #0]
 81030a0:	681b      	ldr	r3, [r3, #0]
 81030a2:	f003 0301 	and.w	r3, r3, #1
 81030a6:	2b00      	cmp	r3, #0
 81030a8:	d004      	beq.n	81030b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	2203      	movs	r2, #3
 81030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81030b2:	e003      	b.n	81030bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81030b4:	687b      	ldr	r3, [r7, #4]
 81030b6:	2201      	movs	r2, #1
 81030b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	2200      	movs	r2, #0
 81030c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81030c8:	2b00      	cmp	r3, #0
 81030ca:	f000 8272 	beq.w	81035b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81030d2:	6878      	ldr	r0, [r7, #4]
 81030d4:	4798      	blx	r3
 81030d6:	e26c      	b.n	81035b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	681b      	ldr	r3, [r3, #0]
 81030dc:	4a43      	ldr	r2, [pc, #268]	; (81031ec <HAL_DMA_IRQHandler+0xa48>)
 81030de:	4293      	cmp	r3, r2
 81030e0:	d022      	beq.n	8103128 <HAL_DMA_IRQHandler+0x984>
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	681b      	ldr	r3, [r3, #0]
 81030e6:	4a42      	ldr	r2, [pc, #264]	; (81031f0 <HAL_DMA_IRQHandler+0xa4c>)
 81030e8:	4293      	cmp	r3, r2
 81030ea:	d01d      	beq.n	8103128 <HAL_DMA_IRQHandler+0x984>
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	4a40      	ldr	r2, [pc, #256]	; (81031f4 <HAL_DMA_IRQHandler+0xa50>)
 81030f2:	4293      	cmp	r3, r2
 81030f4:	d018      	beq.n	8103128 <HAL_DMA_IRQHandler+0x984>
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	681b      	ldr	r3, [r3, #0]
 81030fa:	4a3f      	ldr	r2, [pc, #252]	; (81031f8 <HAL_DMA_IRQHandler+0xa54>)
 81030fc:	4293      	cmp	r3, r2
 81030fe:	d013      	beq.n	8103128 <HAL_DMA_IRQHandler+0x984>
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	4a3d      	ldr	r2, [pc, #244]	; (81031fc <HAL_DMA_IRQHandler+0xa58>)
 8103106:	4293      	cmp	r3, r2
 8103108:	d00e      	beq.n	8103128 <HAL_DMA_IRQHandler+0x984>
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	4a3c      	ldr	r2, [pc, #240]	; (8103200 <HAL_DMA_IRQHandler+0xa5c>)
 8103110:	4293      	cmp	r3, r2
 8103112:	d009      	beq.n	8103128 <HAL_DMA_IRQHandler+0x984>
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	4a3a      	ldr	r2, [pc, #232]	; (8103204 <HAL_DMA_IRQHandler+0xa60>)
 810311a:	4293      	cmp	r3, r2
 810311c:	d004      	beq.n	8103128 <HAL_DMA_IRQHandler+0x984>
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	4a39      	ldr	r2, [pc, #228]	; (8103208 <HAL_DMA_IRQHandler+0xa64>)
 8103124:	4293      	cmp	r3, r2
 8103126:	d101      	bne.n	810312c <HAL_DMA_IRQHandler+0x988>
 8103128:	2301      	movs	r3, #1
 810312a:	e000      	b.n	810312e <HAL_DMA_IRQHandler+0x98a>
 810312c:	2300      	movs	r3, #0
 810312e:	2b00      	cmp	r3, #0
 8103130:	f000 823f 	beq.w	81035b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	681b      	ldr	r3, [r3, #0]
 810313a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103140:	f003 031f 	and.w	r3, r3, #31
 8103144:	2204      	movs	r2, #4
 8103146:	409a      	lsls	r2, r3
 8103148:	697b      	ldr	r3, [r7, #20]
 810314a:	4013      	ands	r3, r2
 810314c:	2b00      	cmp	r3, #0
 810314e:	f000 80cd 	beq.w	81032ec <HAL_DMA_IRQHandler+0xb48>
 8103152:	693b      	ldr	r3, [r7, #16]
 8103154:	f003 0304 	and.w	r3, r3, #4
 8103158:	2b00      	cmp	r3, #0
 810315a:	f000 80c7 	beq.w	81032ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103162:	f003 031f 	and.w	r3, r3, #31
 8103166:	2204      	movs	r2, #4
 8103168:	409a      	lsls	r2, r3
 810316a:	69fb      	ldr	r3, [r7, #28]
 810316c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810316e:	693b      	ldr	r3, [r7, #16]
 8103170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103174:	2b00      	cmp	r3, #0
 8103176:	d049      	beq.n	810320c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103178:	693b      	ldr	r3, [r7, #16]
 810317a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810317e:	2b00      	cmp	r3, #0
 8103180:	d109      	bne.n	8103196 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103182:	687b      	ldr	r3, [r7, #4]
 8103184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103186:	2b00      	cmp	r3, #0
 8103188:	f000 8210 	beq.w	81035ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103190:	6878      	ldr	r0, [r7, #4]
 8103192:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103194:	e20a      	b.n	81035ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810319a:	2b00      	cmp	r3, #0
 810319c:	f000 8206 	beq.w	81035ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81031a4:	6878      	ldr	r0, [r7, #4]
 81031a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81031a8:	e200      	b.n	81035ac <HAL_DMA_IRQHandler+0xe08>
 81031aa:	bf00      	nop
 81031ac:	40020010 	.word	0x40020010
 81031b0:	40020028 	.word	0x40020028
 81031b4:	40020040 	.word	0x40020040
 81031b8:	40020058 	.word	0x40020058
 81031bc:	40020070 	.word	0x40020070
 81031c0:	40020088 	.word	0x40020088
 81031c4:	400200a0 	.word	0x400200a0
 81031c8:	400200b8 	.word	0x400200b8
 81031cc:	40020410 	.word	0x40020410
 81031d0:	40020428 	.word	0x40020428
 81031d4:	40020440 	.word	0x40020440
 81031d8:	40020458 	.word	0x40020458
 81031dc:	40020470 	.word	0x40020470
 81031e0:	40020488 	.word	0x40020488
 81031e4:	400204a0 	.word	0x400204a0
 81031e8:	400204b8 	.word	0x400204b8
 81031ec:	58025408 	.word	0x58025408
 81031f0:	5802541c 	.word	0x5802541c
 81031f4:	58025430 	.word	0x58025430
 81031f8:	58025444 	.word	0x58025444
 81031fc:	58025458 	.word	0x58025458
 8103200:	5802546c 	.word	0x5802546c
 8103204:	58025480 	.word	0x58025480
 8103208:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810320c:	693b      	ldr	r3, [r7, #16]
 810320e:	f003 0320 	and.w	r3, r3, #32
 8103212:	2b00      	cmp	r3, #0
 8103214:	d160      	bne.n	81032d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	4a7f      	ldr	r2, [pc, #508]	; (8103418 <HAL_DMA_IRQHandler+0xc74>)
 810321c:	4293      	cmp	r3, r2
 810321e:	d04a      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	4a7d      	ldr	r2, [pc, #500]	; (810341c <HAL_DMA_IRQHandler+0xc78>)
 8103226:	4293      	cmp	r3, r2
 8103228:	d045      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	4a7c      	ldr	r2, [pc, #496]	; (8103420 <HAL_DMA_IRQHandler+0xc7c>)
 8103230:	4293      	cmp	r3, r2
 8103232:	d040      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	4a7a      	ldr	r2, [pc, #488]	; (8103424 <HAL_DMA_IRQHandler+0xc80>)
 810323a:	4293      	cmp	r3, r2
 810323c:	d03b      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	4a79      	ldr	r2, [pc, #484]	; (8103428 <HAL_DMA_IRQHandler+0xc84>)
 8103244:	4293      	cmp	r3, r2
 8103246:	d036      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	4a77      	ldr	r2, [pc, #476]	; (810342c <HAL_DMA_IRQHandler+0xc88>)
 810324e:	4293      	cmp	r3, r2
 8103250:	d031      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	4a76      	ldr	r2, [pc, #472]	; (8103430 <HAL_DMA_IRQHandler+0xc8c>)
 8103258:	4293      	cmp	r3, r2
 810325a:	d02c      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	4a74      	ldr	r2, [pc, #464]	; (8103434 <HAL_DMA_IRQHandler+0xc90>)
 8103262:	4293      	cmp	r3, r2
 8103264:	d027      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	681b      	ldr	r3, [r3, #0]
 810326a:	4a73      	ldr	r2, [pc, #460]	; (8103438 <HAL_DMA_IRQHandler+0xc94>)
 810326c:	4293      	cmp	r3, r2
 810326e:	d022      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	4a71      	ldr	r2, [pc, #452]	; (810343c <HAL_DMA_IRQHandler+0xc98>)
 8103276:	4293      	cmp	r3, r2
 8103278:	d01d      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	681b      	ldr	r3, [r3, #0]
 810327e:	4a70      	ldr	r2, [pc, #448]	; (8103440 <HAL_DMA_IRQHandler+0xc9c>)
 8103280:	4293      	cmp	r3, r2
 8103282:	d018      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	681b      	ldr	r3, [r3, #0]
 8103288:	4a6e      	ldr	r2, [pc, #440]	; (8103444 <HAL_DMA_IRQHandler+0xca0>)
 810328a:	4293      	cmp	r3, r2
 810328c:	d013      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	681b      	ldr	r3, [r3, #0]
 8103292:	4a6d      	ldr	r2, [pc, #436]	; (8103448 <HAL_DMA_IRQHandler+0xca4>)
 8103294:	4293      	cmp	r3, r2
 8103296:	d00e      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	4a6b      	ldr	r2, [pc, #428]	; (810344c <HAL_DMA_IRQHandler+0xca8>)
 810329e:	4293      	cmp	r3, r2
 81032a0:	d009      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	4a6a      	ldr	r2, [pc, #424]	; (8103450 <HAL_DMA_IRQHandler+0xcac>)
 81032a8:	4293      	cmp	r3, r2
 81032aa:	d004      	beq.n	81032b6 <HAL_DMA_IRQHandler+0xb12>
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	681b      	ldr	r3, [r3, #0]
 81032b0:	4a68      	ldr	r2, [pc, #416]	; (8103454 <HAL_DMA_IRQHandler+0xcb0>)
 81032b2:	4293      	cmp	r3, r2
 81032b4:	d108      	bne.n	81032c8 <HAL_DMA_IRQHandler+0xb24>
 81032b6:	687b      	ldr	r3, [r7, #4]
 81032b8:	681b      	ldr	r3, [r3, #0]
 81032ba:	681a      	ldr	r2, [r3, #0]
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	f022 0208 	bic.w	r2, r2, #8
 81032c4:	601a      	str	r2, [r3, #0]
 81032c6:	e007      	b.n	81032d8 <HAL_DMA_IRQHandler+0xb34>
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	681b      	ldr	r3, [r3, #0]
 81032cc:	681a      	ldr	r2, [r3, #0]
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	f022 0204 	bic.w	r2, r2, #4
 81032d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81032dc:	2b00      	cmp	r3, #0
 81032de:	f000 8165 	beq.w	81035ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 81032e2:	687b      	ldr	r3, [r7, #4]
 81032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81032e6:	6878      	ldr	r0, [r7, #4]
 81032e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81032ea:	e15f      	b.n	81035ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032f0:	f003 031f 	and.w	r3, r3, #31
 81032f4:	2202      	movs	r2, #2
 81032f6:	409a      	lsls	r2, r3
 81032f8:	697b      	ldr	r3, [r7, #20]
 81032fa:	4013      	ands	r3, r2
 81032fc:	2b00      	cmp	r3, #0
 81032fe:	f000 80c5 	beq.w	810348c <HAL_DMA_IRQHandler+0xce8>
 8103302:	693b      	ldr	r3, [r7, #16]
 8103304:	f003 0302 	and.w	r3, r3, #2
 8103308:	2b00      	cmp	r3, #0
 810330a:	f000 80bf 	beq.w	810348c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103312:	f003 031f 	and.w	r3, r3, #31
 8103316:	2202      	movs	r2, #2
 8103318:	409a      	lsls	r2, r3
 810331a:	69fb      	ldr	r3, [r7, #28]
 810331c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810331e:	693b      	ldr	r3, [r7, #16]
 8103320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103324:	2b00      	cmp	r3, #0
 8103326:	d018      	beq.n	810335a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103328:	693b      	ldr	r3, [r7, #16]
 810332a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810332e:	2b00      	cmp	r3, #0
 8103330:	d109      	bne.n	8103346 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103336:	2b00      	cmp	r3, #0
 8103338:	f000 813a 	beq.w	81035b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103340:	6878      	ldr	r0, [r7, #4]
 8103342:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103344:	e134      	b.n	81035b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810334a:	2b00      	cmp	r3, #0
 810334c:	f000 8130 	beq.w	81035b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103354:	6878      	ldr	r0, [r7, #4]
 8103356:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103358:	e12a      	b.n	81035b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810335a:	693b      	ldr	r3, [r7, #16]
 810335c:	f003 0320 	and.w	r3, r3, #32
 8103360:	2b00      	cmp	r3, #0
 8103362:	f040 8089 	bne.w	8103478 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103366:	687b      	ldr	r3, [r7, #4]
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	4a2b      	ldr	r2, [pc, #172]	; (8103418 <HAL_DMA_IRQHandler+0xc74>)
 810336c:	4293      	cmp	r3, r2
 810336e:	d04a      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	681b      	ldr	r3, [r3, #0]
 8103374:	4a29      	ldr	r2, [pc, #164]	; (810341c <HAL_DMA_IRQHandler+0xc78>)
 8103376:	4293      	cmp	r3, r2
 8103378:	d045      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	4a28      	ldr	r2, [pc, #160]	; (8103420 <HAL_DMA_IRQHandler+0xc7c>)
 8103380:	4293      	cmp	r3, r2
 8103382:	d040      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	4a26      	ldr	r2, [pc, #152]	; (8103424 <HAL_DMA_IRQHandler+0xc80>)
 810338a:	4293      	cmp	r3, r2
 810338c:	d03b      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	4a25      	ldr	r2, [pc, #148]	; (8103428 <HAL_DMA_IRQHandler+0xc84>)
 8103394:	4293      	cmp	r3, r2
 8103396:	d036      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	4a23      	ldr	r2, [pc, #140]	; (810342c <HAL_DMA_IRQHandler+0xc88>)
 810339e:	4293      	cmp	r3, r2
 81033a0:	d031      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	681b      	ldr	r3, [r3, #0]
 81033a6:	4a22      	ldr	r2, [pc, #136]	; (8103430 <HAL_DMA_IRQHandler+0xc8c>)
 81033a8:	4293      	cmp	r3, r2
 81033aa:	d02c      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	681b      	ldr	r3, [r3, #0]
 81033b0:	4a20      	ldr	r2, [pc, #128]	; (8103434 <HAL_DMA_IRQHandler+0xc90>)
 81033b2:	4293      	cmp	r3, r2
 81033b4:	d027      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	681b      	ldr	r3, [r3, #0]
 81033ba:	4a1f      	ldr	r2, [pc, #124]	; (8103438 <HAL_DMA_IRQHandler+0xc94>)
 81033bc:	4293      	cmp	r3, r2
 81033be:	d022      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	4a1d      	ldr	r2, [pc, #116]	; (810343c <HAL_DMA_IRQHandler+0xc98>)
 81033c6:	4293      	cmp	r3, r2
 81033c8:	d01d      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	4a1c      	ldr	r2, [pc, #112]	; (8103440 <HAL_DMA_IRQHandler+0xc9c>)
 81033d0:	4293      	cmp	r3, r2
 81033d2:	d018      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	4a1a      	ldr	r2, [pc, #104]	; (8103444 <HAL_DMA_IRQHandler+0xca0>)
 81033da:	4293      	cmp	r3, r2
 81033dc:	d013      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	4a19      	ldr	r2, [pc, #100]	; (8103448 <HAL_DMA_IRQHandler+0xca4>)
 81033e4:	4293      	cmp	r3, r2
 81033e6:	d00e      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	4a17      	ldr	r2, [pc, #92]	; (810344c <HAL_DMA_IRQHandler+0xca8>)
 81033ee:	4293      	cmp	r3, r2
 81033f0:	d009      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	4a16      	ldr	r2, [pc, #88]	; (8103450 <HAL_DMA_IRQHandler+0xcac>)
 81033f8:	4293      	cmp	r3, r2
 81033fa:	d004      	beq.n	8103406 <HAL_DMA_IRQHandler+0xc62>
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	4a14      	ldr	r2, [pc, #80]	; (8103454 <HAL_DMA_IRQHandler+0xcb0>)
 8103402:	4293      	cmp	r3, r2
 8103404:	d128      	bne.n	8103458 <HAL_DMA_IRQHandler+0xcb4>
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	681b      	ldr	r3, [r3, #0]
 810340a:	681a      	ldr	r2, [r3, #0]
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	f022 0214 	bic.w	r2, r2, #20
 8103414:	601a      	str	r2, [r3, #0]
 8103416:	e027      	b.n	8103468 <HAL_DMA_IRQHandler+0xcc4>
 8103418:	40020010 	.word	0x40020010
 810341c:	40020028 	.word	0x40020028
 8103420:	40020040 	.word	0x40020040
 8103424:	40020058 	.word	0x40020058
 8103428:	40020070 	.word	0x40020070
 810342c:	40020088 	.word	0x40020088
 8103430:	400200a0 	.word	0x400200a0
 8103434:	400200b8 	.word	0x400200b8
 8103438:	40020410 	.word	0x40020410
 810343c:	40020428 	.word	0x40020428
 8103440:	40020440 	.word	0x40020440
 8103444:	40020458 	.word	0x40020458
 8103448:	40020470 	.word	0x40020470
 810344c:	40020488 	.word	0x40020488
 8103450:	400204a0 	.word	0x400204a0
 8103454:	400204b8 	.word	0x400204b8
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	681a      	ldr	r2, [r3, #0]
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	681b      	ldr	r3, [r3, #0]
 8103462:	f022 020a 	bic.w	r2, r2, #10
 8103466:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	2201      	movs	r2, #1
 810346c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	2200      	movs	r2, #0
 8103474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810347c:	2b00      	cmp	r3, #0
 810347e:	f000 8097 	beq.w	81035b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103486:	6878      	ldr	r0, [r7, #4]
 8103488:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810348a:	e091      	b.n	81035b0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103490:	f003 031f 	and.w	r3, r3, #31
 8103494:	2208      	movs	r2, #8
 8103496:	409a      	lsls	r2, r3
 8103498:	697b      	ldr	r3, [r7, #20]
 810349a:	4013      	ands	r3, r2
 810349c:	2b00      	cmp	r3, #0
 810349e:	f000 8088 	beq.w	81035b2 <HAL_DMA_IRQHandler+0xe0e>
 81034a2:	693b      	ldr	r3, [r7, #16]
 81034a4:	f003 0308 	and.w	r3, r3, #8
 81034a8:	2b00      	cmp	r3, #0
 81034aa:	f000 8082 	beq.w	81035b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	4a41      	ldr	r2, [pc, #260]	; (81035b8 <HAL_DMA_IRQHandler+0xe14>)
 81034b4:	4293      	cmp	r3, r2
 81034b6:	d04a      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	681b      	ldr	r3, [r3, #0]
 81034bc:	4a3f      	ldr	r2, [pc, #252]	; (81035bc <HAL_DMA_IRQHandler+0xe18>)
 81034be:	4293      	cmp	r3, r2
 81034c0:	d045      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	681b      	ldr	r3, [r3, #0]
 81034c6:	4a3e      	ldr	r2, [pc, #248]	; (81035c0 <HAL_DMA_IRQHandler+0xe1c>)
 81034c8:	4293      	cmp	r3, r2
 81034ca:	d040      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	4a3c      	ldr	r2, [pc, #240]	; (81035c4 <HAL_DMA_IRQHandler+0xe20>)
 81034d2:	4293      	cmp	r3, r2
 81034d4:	d03b      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	4a3b      	ldr	r2, [pc, #236]	; (81035c8 <HAL_DMA_IRQHandler+0xe24>)
 81034dc:	4293      	cmp	r3, r2
 81034de:	d036      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	681b      	ldr	r3, [r3, #0]
 81034e4:	4a39      	ldr	r2, [pc, #228]	; (81035cc <HAL_DMA_IRQHandler+0xe28>)
 81034e6:	4293      	cmp	r3, r2
 81034e8:	d031      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	681b      	ldr	r3, [r3, #0]
 81034ee:	4a38      	ldr	r2, [pc, #224]	; (81035d0 <HAL_DMA_IRQHandler+0xe2c>)
 81034f0:	4293      	cmp	r3, r2
 81034f2:	d02c      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	4a36      	ldr	r2, [pc, #216]	; (81035d4 <HAL_DMA_IRQHandler+0xe30>)
 81034fa:	4293      	cmp	r3, r2
 81034fc:	d027      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	681b      	ldr	r3, [r3, #0]
 8103502:	4a35      	ldr	r2, [pc, #212]	; (81035d8 <HAL_DMA_IRQHandler+0xe34>)
 8103504:	4293      	cmp	r3, r2
 8103506:	d022      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	4a33      	ldr	r2, [pc, #204]	; (81035dc <HAL_DMA_IRQHandler+0xe38>)
 810350e:	4293      	cmp	r3, r2
 8103510:	d01d      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	681b      	ldr	r3, [r3, #0]
 8103516:	4a32      	ldr	r2, [pc, #200]	; (81035e0 <HAL_DMA_IRQHandler+0xe3c>)
 8103518:	4293      	cmp	r3, r2
 810351a:	d018      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	4a30      	ldr	r2, [pc, #192]	; (81035e4 <HAL_DMA_IRQHandler+0xe40>)
 8103522:	4293      	cmp	r3, r2
 8103524:	d013      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4a2f      	ldr	r2, [pc, #188]	; (81035e8 <HAL_DMA_IRQHandler+0xe44>)
 810352c:	4293      	cmp	r3, r2
 810352e:	d00e      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	4a2d      	ldr	r2, [pc, #180]	; (81035ec <HAL_DMA_IRQHandler+0xe48>)
 8103536:	4293      	cmp	r3, r2
 8103538:	d009      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 810353a:	687b      	ldr	r3, [r7, #4]
 810353c:	681b      	ldr	r3, [r3, #0]
 810353e:	4a2c      	ldr	r2, [pc, #176]	; (81035f0 <HAL_DMA_IRQHandler+0xe4c>)
 8103540:	4293      	cmp	r3, r2
 8103542:	d004      	beq.n	810354e <HAL_DMA_IRQHandler+0xdaa>
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	4a2a      	ldr	r2, [pc, #168]	; (81035f4 <HAL_DMA_IRQHandler+0xe50>)
 810354a:	4293      	cmp	r3, r2
 810354c:	d108      	bne.n	8103560 <HAL_DMA_IRQHandler+0xdbc>
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	681b      	ldr	r3, [r3, #0]
 8103552:	681a      	ldr	r2, [r3, #0]
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	681b      	ldr	r3, [r3, #0]
 8103558:	f022 021c 	bic.w	r2, r2, #28
 810355c:	601a      	str	r2, [r3, #0]
 810355e:	e007      	b.n	8103570 <HAL_DMA_IRQHandler+0xdcc>
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	681b      	ldr	r3, [r3, #0]
 8103564:	681a      	ldr	r2, [r3, #0]
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	681b      	ldr	r3, [r3, #0]
 810356a:	f022 020e 	bic.w	r2, r2, #14
 810356e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103574:	f003 031f 	and.w	r3, r3, #31
 8103578:	2201      	movs	r2, #1
 810357a:	409a      	lsls	r2, r3
 810357c:	69fb      	ldr	r3, [r7, #28]
 810357e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	2201      	movs	r2, #1
 8103584:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	2201      	movs	r2, #1
 810358a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	2200      	movs	r2, #0
 8103592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810359a:	2b00      	cmp	r3, #0
 810359c:	d009      	beq.n	81035b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810359e:	687b      	ldr	r3, [r7, #4]
 81035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81035a2:	6878      	ldr	r0, [r7, #4]
 81035a4:	4798      	blx	r3
 81035a6:	e004      	b.n	81035b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 81035a8:	bf00      	nop
 81035aa:	e002      	b.n	81035b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81035ac:	bf00      	nop
 81035ae:	e000      	b.n	81035b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81035b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81035b2:	3728      	adds	r7, #40	; 0x28
 81035b4:	46bd      	mov	sp, r7
 81035b6:	bd80      	pop	{r7, pc}
 81035b8:	40020010 	.word	0x40020010
 81035bc:	40020028 	.word	0x40020028
 81035c0:	40020040 	.word	0x40020040
 81035c4:	40020058 	.word	0x40020058
 81035c8:	40020070 	.word	0x40020070
 81035cc:	40020088 	.word	0x40020088
 81035d0:	400200a0 	.word	0x400200a0
 81035d4:	400200b8 	.word	0x400200b8
 81035d8:	40020410 	.word	0x40020410
 81035dc:	40020428 	.word	0x40020428
 81035e0:	40020440 	.word	0x40020440
 81035e4:	40020458 	.word	0x40020458
 81035e8:	40020470 	.word	0x40020470
 81035ec:	40020488 	.word	0x40020488
 81035f0:	400204a0 	.word	0x400204a0
 81035f4:	400204b8 	.word	0x400204b8

081035f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81035f8:	b480      	push	{r7}
 81035fa:	b085      	sub	sp, #20
 81035fc:	af00      	add	r7, sp, #0
 81035fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	4a43      	ldr	r2, [pc, #268]	; (8103714 <DMA_CalcBaseAndBitshift+0x11c>)
 8103606:	4293      	cmp	r3, r2
 8103608:	d04a      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	681b      	ldr	r3, [r3, #0]
 810360e:	4a42      	ldr	r2, [pc, #264]	; (8103718 <DMA_CalcBaseAndBitshift+0x120>)
 8103610:	4293      	cmp	r3, r2
 8103612:	d045      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	4a40      	ldr	r2, [pc, #256]	; (810371c <DMA_CalcBaseAndBitshift+0x124>)
 810361a:	4293      	cmp	r3, r2
 810361c:	d040      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 810361e:	687b      	ldr	r3, [r7, #4]
 8103620:	681b      	ldr	r3, [r3, #0]
 8103622:	4a3f      	ldr	r2, [pc, #252]	; (8103720 <DMA_CalcBaseAndBitshift+0x128>)
 8103624:	4293      	cmp	r3, r2
 8103626:	d03b      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	681b      	ldr	r3, [r3, #0]
 810362c:	4a3d      	ldr	r2, [pc, #244]	; (8103724 <DMA_CalcBaseAndBitshift+0x12c>)
 810362e:	4293      	cmp	r3, r2
 8103630:	d036      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103632:	687b      	ldr	r3, [r7, #4]
 8103634:	681b      	ldr	r3, [r3, #0]
 8103636:	4a3c      	ldr	r2, [pc, #240]	; (8103728 <DMA_CalcBaseAndBitshift+0x130>)
 8103638:	4293      	cmp	r3, r2
 810363a:	d031      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	681b      	ldr	r3, [r3, #0]
 8103640:	4a3a      	ldr	r2, [pc, #232]	; (810372c <DMA_CalcBaseAndBitshift+0x134>)
 8103642:	4293      	cmp	r3, r2
 8103644:	d02c      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	681b      	ldr	r3, [r3, #0]
 810364a:	4a39      	ldr	r2, [pc, #228]	; (8103730 <DMA_CalcBaseAndBitshift+0x138>)
 810364c:	4293      	cmp	r3, r2
 810364e:	d027      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103650:	687b      	ldr	r3, [r7, #4]
 8103652:	681b      	ldr	r3, [r3, #0]
 8103654:	4a37      	ldr	r2, [pc, #220]	; (8103734 <DMA_CalcBaseAndBitshift+0x13c>)
 8103656:	4293      	cmp	r3, r2
 8103658:	d022      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 810365a:	687b      	ldr	r3, [r7, #4]
 810365c:	681b      	ldr	r3, [r3, #0]
 810365e:	4a36      	ldr	r2, [pc, #216]	; (8103738 <DMA_CalcBaseAndBitshift+0x140>)
 8103660:	4293      	cmp	r3, r2
 8103662:	d01d      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	681b      	ldr	r3, [r3, #0]
 8103668:	4a34      	ldr	r2, [pc, #208]	; (810373c <DMA_CalcBaseAndBitshift+0x144>)
 810366a:	4293      	cmp	r3, r2
 810366c:	d018      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	681b      	ldr	r3, [r3, #0]
 8103672:	4a33      	ldr	r2, [pc, #204]	; (8103740 <DMA_CalcBaseAndBitshift+0x148>)
 8103674:	4293      	cmp	r3, r2
 8103676:	d013      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	681b      	ldr	r3, [r3, #0]
 810367c:	4a31      	ldr	r2, [pc, #196]	; (8103744 <DMA_CalcBaseAndBitshift+0x14c>)
 810367e:	4293      	cmp	r3, r2
 8103680:	d00e      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	681b      	ldr	r3, [r3, #0]
 8103686:	4a30      	ldr	r2, [pc, #192]	; (8103748 <DMA_CalcBaseAndBitshift+0x150>)
 8103688:	4293      	cmp	r3, r2
 810368a:	d009      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	681b      	ldr	r3, [r3, #0]
 8103690:	4a2e      	ldr	r2, [pc, #184]	; (810374c <DMA_CalcBaseAndBitshift+0x154>)
 8103692:	4293      	cmp	r3, r2
 8103694:	d004      	beq.n	81036a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	681b      	ldr	r3, [r3, #0]
 810369a:	4a2d      	ldr	r2, [pc, #180]	; (8103750 <DMA_CalcBaseAndBitshift+0x158>)
 810369c:	4293      	cmp	r3, r2
 810369e:	d101      	bne.n	81036a4 <DMA_CalcBaseAndBitshift+0xac>
 81036a0:	2301      	movs	r3, #1
 81036a2:	e000      	b.n	81036a6 <DMA_CalcBaseAndBitshift+0xae>
 81036a4:	2300      	movs	r3, #0
 81036a6:	2b00      	cmp	r3, #0
 81036a8:	d026      	beq.n	81036f8 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81036aa:	687b      	ldr	r3, [r7, #4]
 81036ac:	681b      	ldr	r3, [r3, #0]
 81036ae:	b2db      	uxtb	r3, r3
 81036b0:	3b10      	subs	r3, #16
 81036b2:	4a28      	ldr	r2, [pc, #160]	; (8103754 <DMA_CalcBaseAndBitshift+0x15c>)
 81036b4:	fba2 2303 	umull	r2, r3, r2, r3
 81036b8:	091b      	lsrs	r3, r3, #4
 81036ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81036bc:	68fb      	ldr	r3, [r7, #12]
 81036be:	f003 0307 	and.w	r3, r3, #7
 81036c2:	4a25      	ldr	r2, [pc, #148]	; (8103758 <DMA_CalcBaseAndBitshift+0x160>)
 81036c4:	5cd3      	ldrb	r3, [r2, r3]
 81036c6:	461a      	mov	r2, r3
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 81036cc:	68fb      	ldr	r3, [r7, #12]
 81036ce:	2b03      	cmp	r3, #3
 81036d0:	d909      	bls.n	81036e6 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81036d2:	687b      	ldr	r3, [r7, #4]
 81036d4:	681b      	ldr	r3, [r3, #0]
 81036d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81036da:	f023 0303 	bic.w	r3, r3, #3
 81036de:	1d1a      	adds	r2, r3, #4
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	659a      	str	r2, [r3, #88]	; 0x58
 81036e4:	e00e      	b.n	8103704 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	681b      	ldr	r3, [r3, #0]
 81036ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81036ee:	f023 0303 	bic.w	r3, r3, #3
 81036f2:	687a      	ldr	r2, [r7, #4]
 81036f4:	6593      	str	r3, [r2, #88]	; 0x58
 81036f6:	e005      	b.n	8103704 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8103700:	687b      	ldr	r3, [r7, #4]
 8103702:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8103708:	4618      	mov	r0, r3
 810370a:	3714      	adds	r7, #20
 810370c:	46bd      	mov	sp, r7
 810370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103712:	4770      	bx	lr
 8103714:	40020010 	.word	0x40020010
 8103718:	40020028 	.word	0x40020028
 810371c:	40020040 	.word	0x40020040
 8103720:	40020058 	.word	0x40020058
 8103724:	40020070 	.word	0x40020070
 8103728:	40020088 	.word	0x40020088
 810372c:	400200a0 	.word	0x400200a0
 8103730:	400200b8 	.word	0x400200b8
 8103734:	40020410 	.word	0x40020410
 8103738:	40020428 	.word	0x40020428
 810373c:	40020440 	.word	0x40020440
 8103740:	40020458 	.word	0x40020458
 8103744:	40020470 	.word	0x40020470
 8103748:	40020488 	.word	0x40020488
 810374c:	400204a0 	.word	0x400204a0
 8103750:	400204b8 	.word	0x400204b8
 8103754:	aaaaaaab 	.word	0xaaaaaaab
 8103758:	08106380 	.word	0x08106380

0810375c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 810375c:	b480      	push	{r7}
 810375e:	b085      	sub	sp, #20
 8103760:	af00      	add	r7, sp, #0
 8103762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103764:	2300      	movs	r3, #0
 8103766:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	699b      	ldr	r3, [r3, #24]
 810376c:	2b00      	cmp	r3, #0
 810376e:	d120      	bne.n	81037b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103774:	2b03      	cmp	r3, #3
 8103776:	d858      	bhi.n	810382a <DMA_CheckFifoParam+0xce>
 8103778:	a201      	add	r2, pc, #4	; (adr r2, 8103780 <DMA_CheckFifoParam+0x24>)
 810377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810377e:	bf00      	nop
 8103780:	08103791 	.word	0x08103791
 8103784:	081037a3 	.word	0x081037a3
 8103788:	08103791 	.word	0x08103791
 810378c:	0810382b 	.word	0x0810382b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103798:	2b00      	cmp	r3, #0
 810379a:	d048      	beq.n	810382e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810379c:	2301      	movs	r3, #1
 810379e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81037a0:	e045      	b.n	810382e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81037aa:	d142      	bne.n	8103832 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81037ac:	2301      	movs	r3, #1
 81037ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81037b0:	e03f      	b.n	8103832 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	699b      	ldr	r3, [r3, #24]
 81037b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81037ba:	d123      	bne.n	8103804 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81037c0:	2b03      	cmp	r3, #3
 81037c2:	d838      	bhi.n	8103836 <DMA_CheckFifoParam+0xda>
 81037c4:	a201      	add	r2, pc, #4	; (adr r2, 81037cc <DMA_CheckFifoParam+0x70>)
 81037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81037ca:	bf00      	nop
 81037cc:	081037dd 	.word	0x081037dd
 81037d0:	081037e3 	.word	0x081037e3
 81037d4:	081037dd 	.word	0x081037dd
 81037d8:	081037f5 	.word	0x081037f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81037dc:	2301      	movs	r3, #1
 81037de:	73fb      	strb	r3, [r7, #15]
        break;
 81037e0:	e030      	b.n	8103844 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81037ea:	2b00      	cmp	r3, #0
 81037ec:	d025      	beq.n	810383a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81037ee:	2301      	movs	r3, #1
 81037f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81037f2:	e022      	b.n	810383a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81037fc:	d11f      	bne.n	810383e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81037fe:	2301      	movs	r3, #1
 8103800:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103802:	e01c      	b.n	810383e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103808:	2b02      	cmp	r3, #2
 810380a:	d902      	bls.n	8103812 <DMA_CheckFifoParam+0xb6>
 810380c:	2b03      	cmp	r3, #3
 810380e:	d003      	beq.n	8103818 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8103810:	e018      	b.n	8103844 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8103812:	2301      	movs	r3, #1
 8103814:	73fb      	strb	r3, [r7, #15]
        break;
 8103816:	e015      	b.n	8103844 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810381c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103820:	2b00      	cmp	r3, #0
 8103822:	d00e      	beq.n	8103842 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8103824:	2301      	movs	r3, #1
 8103826:	73fb      	strb	r3, [r7, #15]
    break;
 8103828:	e00b      	b.n	8103842 <DMA_CheckFifoParam+0xe6>
        break;
 810382a:	bf00      	nop
 810382c:	e00a      	b.n	8103844 <DMA_CheckFifoParam+0xe8>
        break;
 810382e:	bf00      	nop
 8103830:	e008      	b.n	8103844 <DMA_CheckFifoParam+0xe8>
        break;
 8103832:	bf00      	nop
 8103834:	e006      	b.n	8103844 <DMA_CheckFifoParam+0xe8>
        break;
 8103836:	bf00      	nop
 8103838:	e004      	b.n	8103844 <DMA_CheckFifoParam+0xe8>
        break;
 810383a:	bf00      	nop
 810383c:	e002      	b.n	8103844 <DMA_CheckFifoParam+0xe8>
        break;
 810383e:	bf00      	nop
 8103840:	e000      	b.n	8103844 <DMA_CheckFifoParam+0xe8>
    break;
 8103842:	bf00      	nop
    }
  }

  return status;
 8103844:	7bfb      	ldrb	r3, [r7, #15]
}
 8103846:	4618      	mov	r0, r3
 8103848:	3714      	adds	r7, #20
 810384a:	46bd      	mov	sp, r7
 810384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103850:	4770      	bx	lr
 8103852:	bf00      	nop

08103854 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103854:	b480      	push	{r7}
 8103856:	b085      	sub	sp, #20
 8103858:	af00      	add	r7, sp, #0
 810385a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	681b      	ldr	r3, [r3, #0]
 8103860:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	681b      	ldr	r3, [r3, #0]
 8103866:	4a3a      	ldr	r2, [pc, #232]	; (8103950 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8103868:	4293      	cmp	r3, r2
 810386a:	d022      	beq.n	81038b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	4a38      	ldr	r2, [pc, #224]	; (8103954 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8103872:	4293      	cmp	r3, r2
 8103874:	d01d      	beq.n	81038b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	4a37      	ldr	r2, [pc, #220]	; (8103958 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810387c:	4293      	cmp	r3, r2
 810387e:	d018      	beq.n	81038b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	681b      	ldr	r3, [r3, #0]
 8103884:	4a35      	ldr	r2, [pc, #212]	; (810395c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8103886:	4293      	cmp	r3, r2
 8103888:	d013      	beq.n	81038b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	681b      	ldr	r3, [r3, #0]
 810388e:	4a34      	ldr	r2, [pc, #208]	; (8103960 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103890:	4293      	cmp	r3, r2
 8103892:	d00e      	beq.n	81038b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	4a32      	ldr	r2, [pc, #200]	; (8103964 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810389a:	4293      	cmp	r3, r2
 810389c:	d009      	beq.n	81038b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	4a31      	ldr	r2, [pc, #196]	; (8103968 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81038a4:	4293      	cmp	r3, r2
 81038a6:	d004      	beq.n	81038b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	4a2f      	ldr	r2, [pc, #188]	; (810396c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81038ae:	4293      	cmp	r3, r2
 81038b0:	d101      	bne.n	81038b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81038b2:	2301      	movs	r3, #1
 81038b4:	e000      	b.n	81038b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81038b6:	2300      	movs	r3, #0
 81038b8:	2b00      	cmp	r3, #0
 81038ba:	d01c      	beq.n	81038f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	b2db      	uxtb	r3, r3
 81038c2:	3b08      	subs	r3, #8
 81038c4:	4a2a      	ldr	r2, [pc, #168]	; (8103970 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81038c6:	fba2 2303 	umull	r2, r3, r2, r3
 81038ca:	091b      	lsrs	r3, r3, #4
 81038cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81038ce:	68fb      	ldr	r3, [r7, #12]
 81038d0:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81038d4:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81038d8:	009b      	lsls	r3, r3, #2
 81038da:	461a      	mov	r2, r3
 81038dc:	687b      	ldr	r3, [r7, #4]
 81038de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81038e0:	687b      	ldr	r3, [r7, #4]
 81038e2:	4a24      	ldr	r2, [pc, #144]	; (8103974 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81038e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81038e6:	68fb      	ldr	r3, [r7, #12]
 81038e8:	f003 031f 	and.w	r3, r3, #31
 81038ec:	2201      	movs	r2, #1
 81038ee:	409a      	lsls	r2, r3
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81038f4:	e026      	b.n	8103944 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81038f6:	687b      	ldr	r3, [r7, #4]
 81038f8:	681b      	ldr	r3, [r3, #0]
 81038fa:	b2db      	uxtb	r3, r3
 81038fc:	3b10      	subs	r3, #16
 81038fe:	4a1e      	ldr	r2, [pc, #120]	; (8103978 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8103900:	fba2 2303 	umull	r2, r3, r2, r3
 8103904:	091b      	lsrs	r3, r3, #4
 8103906:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103908:	68bb      	ldr	r3, [r7, #8]
 810390a:	4a1c      	ldr	r2, [pc, #112]	; (810397c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810390c:	4293      	cmp	r3, r2
 810390e:	d806      	bhi.n	810391e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8103910:	68bb      	ldr	r3, [r7, #8]
 8103912:	4a1b      	ldr	r2, [pc, #108]	; (8103980 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8103914:	4293      	cmp	r3, r2
 8103916:	d902      	bls.n	810391e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8103918:	68fb      	ldr	r3, [r7, #12]
 810391a:	3308      	adds	r3, #8
 810391c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810391e:	68fb      	ldr	r3, [r7, #12]
 8103920:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8103924:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8103928:	009b      	lsls	r3, r3, #2
 810392a:	461a      	mov	r2, r3
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	4a14      	ldr	r2, [pc, #80]	; (8103984 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8103934:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103936:	68fb      	ldr	r3, [r7, #12]
 8103938:	f003 031f 	and.w	r3, r3, #31
 810393c:	2201      	movs	r2, #1
 810393e:	409a      	lsls	r2, r3
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	669a      	str	r2, [r3, #104]	; 0x68
}
 8103944:	bf00      	nop
 8103946:	3714      	adds	r7, #20
 8103948:	46bd      	mov	sp, r7
 810394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810394e:	4770      	bx	lr
 8103950:	58025408 	.word	0x58025408
 8103954:	5802541c 	.word	0x5802541c
 8103958:	58025430 	.word	0x58025430
 810395c:	58025444 	.word	0x58025444
 8103960:	58025458 	.word	0x58025458
 8103964:	5802546c 	.word	0x5802546c
 8103968:	58025480 	.word	0x58025480
 810396c:	58025494 	.word	0x58025494
 8103970:	cccccccd 	.word	0xcccccccd
 8103974:	58025880 	.word	0x58025880
 8103978:	aaaaaaab 	.word	0xaaaaaaab
 810397c:	400204b8 	.word	0x400204b8
 8103980:	4002040f 	.word	0x4002040f
 8103984:	40020880 	.word	0x40020880

08103988 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103988:	b480      	push	{r7}
 810398a:	b085      	sub	sp, #20
 810398c:	af00      	add	r7, sp, #0
 810398e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	685b      	ldr	r3, [r3, #4]
 8103994:	b2db      	uxtb	r3, r3
 8103996:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103998:	68fb      	ldr	r3, [r7, #12]
 810399a:	2b00      	cmp	r3, #0
 810399c:	d04a      	beq.n	8103a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810399e:	68fb      	ldr	r3, [r7, #12]
 81039a0:	2b08      	cmp	r3, #8
 81039a2:	d847      	bhi.n	8103a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	681b      	ldr	r3, [r3, #0]
 81039a8:	4a25      	ldr	r2, [pc, #148]	; (8103a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81039aa:	4293      	cmp	r3, r2
 81039ac:	d022      	beq.n	81039f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	681b      	ldr	r3, [r3, #0]
 81039b2:	4a24      	ldr	r2, [pc, #144]	; (8103a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81039b4:	4293      	cmp	r3, r2
 81039b6:	d01d      	beq.n	81039f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81039b8:	687b      	ldr	r3, [r7, #4]
 81039ba:	681b      	ldr	r3, [r3, #0]
 81039bc:	4a22      	ldr	r2, [pc, #136]	; (8103a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 81039be:	4293      	cmp	r3, r2
 81039c0:	d018      	beq.n	81039f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	4a21      	ldr	r2, [pc, #132]	; (8103a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 81039c8:	4293      	cmp	r3, r2
 81039ca:	d013      	beq.n	81039f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	4a1f      	ldr	r2, [pc, #124]	; (8103a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 81039d2:	4293      	cmp	r3, r2
 81039d4:	d00e      	beq.n	81039f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	681b      	ldr	r3, [r3, #0]
 81039da:	4a1e      	ldr	r2, [pc, #120]	; (8103a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81039dc:	4293      	cmp	r3, r2
 81039de:	d009      	beq.n	81039f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	4a1c      	ldr	r2, [pc, #112]	; (8103a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81039e6:	4293      	cmp	r3, r2
 81039e8:	d004      	beq.n	81039f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	4a1b      	ldr	r2, [pc, #108]	; (8103a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81039f0:	4293      	cmp	r3, r2
 81039f2:	d101      	bne.n	81039f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81039f4:	2301      	movs	r3, #1
 81039f6:	e000      	b.n	81039fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81039f8:	2300      	movs	r3, #0
 81039fa:	2b00      	cmp	r3, #0
 81039fc:	d00a      	beq.n	8103a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81039fe:	68fa      	ldr	r2, [r7, #12]
 8103a00:	4b17      	ldr	r3, [pc, #92]	; (8103a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8103a02:	4413      	add	r3, r2
 8103a04:	009b      	lsls	r3, r3, #2
 8103a06:	461a      	mov	r2, r3
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	4a15      	ldr	r2, [pc, #84]	; (8103a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8103a10:	671a      	str	r2, [r3, #112]	; 0x70
 8103a12:	e009      	b.n	8103a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103a14:	68fa      	ldr	r2, [r7, #12]
 8103a16:	4b14      	ldr	r3, [pc, #80]	; (8103a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8103a18:	4413      	add	r3, r2
 8103a1a:	009b      	lsls	r3, r3, #2
 8103a1c:	461a      	mov	r2, r3
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8103a22:	687b      	ldr	r3, [r7, #4]
 8103a24:	4a11      	ldr	r2, [pc, #68]	; (8103a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8103a26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8103a28:	68fb      	ldr	r3, [r7, #12]
 8103a2a:	3b01      	subs	r3, #1
 8103a2c:	2201      	movs	r2, #1
 8103a2e:	409a      	lsls	r2, r3
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8103a34:	bf00      	nop
 8103a36:	3714      	adds	r7, #20
 8103a38:	46bd      	mov	sp, r7
 8103a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a3e:	4770      	bx	lr
 8103a40:	58025408 	.word	0x58025408
 8103a44:	5802541c 	.word	0x5802541c
 8103a48:	58025430 	.word	0x58025430
 8103a4c:	58025444 	.word	0x58025444
 8103a50:	58025458 	.word	0x58025458
 8103a54:	5802546c 	.word	0x5802546c
 8103a58:	58025480 	.word	0x58025480
 8103a5c:	58025494 	.word	0x58025494
 8103a60:	1600963f 	.word	0x1600963f
 8103a64:	58025940 	.word	0x58025940
 8103a68:	1000823f 	.word	0x1000823f
 8103a6c:	40020940 	.word	0x40020940

08103a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103a70:	b480      	push	{r7}
 8103a72:	b089      	sub	sp, #36	; 0x24
 8103a74:	af00      	add	r7, sp, #0
 8103a76:	6078      	str	r0, [r7, #4]
 8103a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103a7a:	2300      	movs	r3, #0
 8103a7c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103a7e:	4b89      	ldr	r3, [pc, #548]	; (8103ca4 <HAL_GPIO_Init+0x234>)
 8103a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103a82:	e194      	b.n	8103dae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103a84:	683b      	ldr	r3, [r7, #0]
 8103a86:	681a      	ldr	r2, [r3, #0]
 8103a88:	2101      	movs	r1, #1
 8103a8a:	69fb      	ldr	r3, [r7, #28]
 8103a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8103a90:	4013      	ands	r3, r2
 8103a92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103a94:	693b      	ldr	r3, [r7, #16]
 8103a96:	2b00      	cmp	r3, #0
 8103a98:	f000 8186 	beq.w	8103da8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103a9c:	683b      	ldr	r3, [r7, #0]
 8103a9e:	685b      	ldr	r3, [r3, #4]
 8103aa0:	f003 0303 	and.w	r3, r3, #3
 8103aa4:	2b01      	cmp	r3, #1
 8103aa6:	d005      	beq.n	8103ab4 <HAL_GPIO_Init+0x44>
 8103aa8:	683b      	ldr	r3, [r7, #0]
 8103aaa:	685b      	ldr	r3, [r3, #4]
 8103aac:	f003 0303 	and.w	r3, r3, #3
 8103ab0:	2b02      	cmp	r3, #2
 8103ab2:	d130      	bne.n	8103b16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	689b      	ldr	r3, [r3, #8]
 8103ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103aba:	69fb      	ldr	r3, [r7, #28]
 8103abc:	005b      	lsls	r3, r3, #1
 8103abe:	2203      	movs	r2, #3
 8103ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8103ac4:	43db      	mvns	r3, r3
 8103ac6:	69ba      	ldr	r2, [r7, #24]
 8103ac8:	4013      	ands	r3, r2
 8103aca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103acc:	683b      	ldr	r3, [r7, #0]
 8103ace:	68da      	ldr	r2, [r3, #12]
 8103ad0:	69fb      	ldr	r3, [r7, #28]
 8103ad2:	005b      	lsls	r3, r3, #1
 8103ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8103ad8:	69ba      	ldr	r2, [r7, #24]
 8103ada:	4313      	orrs	r3, r2
 8103adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	69ba      	ldr	r2, [r7, #24]
 8103ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	685b      	ldr	r3, [r3, #4]
 8103ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103aea:	2201      	movs	r2, #1
 8103aec:	69fb      	ldr	r3, [r7, #28]
 8103aee:	fa02 f303 	lsl.w	r3, r2, r3
 8103af2:	43db      	mvns	r3, r3
 8103af4:	69ba      	ldr	r2, [r7, #24]
 8103af6:	4013      	ands	r3, r2
 8103af8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8103afa:	683b      	ldr	r3, [r7, #0]
 8103afc:	685b      	ldr	r3, [r3, #4]
 8103afe:	091b      	lsrs	r3, r3, #4
 8103b00:	f003 0201 	and.w	r2, r3, #1
 8103b04:	69fb      	ldr	r3, [r7, #28]
 8103b06:	fa02 f303 	lsl.w	r3, r2, r3
 8103b0a:	69ba      	ldr	r2, [r7, #24]
 8103b0c:	4313      	orrs	r3, r2
 8103b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	69ba      	ldr	r2, [r7, #24]
 8103b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103b16:	683b      	ldr	r3, [r7, #0]
 8103b18:	685b      	ldr	r3, [r3, #4]
 8103b1a:	f003 0303 	and.w	r3, r3, #3
 8103b1e:	2b03      	cmp	r3, #3
 8103b20:	d017      	beq.n	8103b52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	68db      	ldr	r3, [r3, #12]
 8103b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103b28:	69fb      	ldr	r3, [r7, #28]
 8103b2a:	005b      	lsls	r3, r3, #1
 8103b2c:	2203      	movs	r2, #3
 8103b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8103b32:	43db      	mvns	r3, r3
 8103b34:	69ba      	ldr	r2, [r7, #24]
 8103b36:	4013      	ands	r3, r2
 8103b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103b3a:	683b      	ldr	r3, [r7, #0]
 8103b3c:	689a      	ldr	r2, [r3, #8]
 8103b3e:	69fb      	ldr	r3, [r7, #28]
 8103b40:	005b      	lsls	r3, r3, #1
 8103b42:	fa02 f303 	lsl.w	r3, r2, r3
 8103b46:	69ba      	ldr	r2, [r7, #24]
 8103b48:	4313      	orrs	r3, r2
 8103b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	69ba      	ldr	r2, [r7, #24]
 8103b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8103b52:	683b      	ldr	r3, [r7, #0]
 8103b54:	685b      	ldr	r3, [r3, #4]
 8103b56:	f003 0303 	and.w	r3, r3, #3
 8103b5a:	2b02      	cmp	r3, #2
 8103b5c:	d123      	bne.n	8103ba6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103b5e:	69fb      	ldr	r3, [r7, #28]
 8103b60:	08da      	lsrs	r2, r3, #3
 8103b62:	687b      	ldr	r3, [r7, #4]
 8103b64:	3208      	adds	r2, #8
 8103b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103b6c:	69fb      	ldr	r3, [r7, #28]
 8103b6e:	f003 0307 	and.w	r3, r3, #7
 8103b72:	009b      	lsls	r3, r3, #2
 8103b74:	220f      	movs	r2, #15
 8103b76:	fa02 f303 	lsl.w	r3, r2, r3
 8103b7a:	43db      	mvns	r3, r3
 8103b7c:	69ba      	ldr	r2, [r7, #24]
 8103b7e:	4013      	ands	r3, r2
 8103b80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103b82:	683b      	ldr	r3, [r7, #0]
 8103b84:	691a      	ldr	r2, [r3, #16]
 8103b86:	69fb      	ldr	r3, [r7, #28]
 8103b88:	f003 0307 	and.w	r3, r3, #7
 8103b8c:	009b      	lsls	r3, r3, #2
 8103b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8103b92:	69ba      	ldr	r2, [r7, #24]
 8103b94:	4313      	orrs	r3, r2
 8103b96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103b98:	69fb      	ldr	r3, [r7, #28]
 8103b9a:	08da      	lsrs	r2, r3, #3
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	3208      	adds	r2, #8
 8103ba0:	69b9      	ldr	r1, [r7, #24]
 8103ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103bac:	69fb      	ldr	r3, [r7, #28]
 8103bae:	005b      	lsls	r3, r3, #1
 8103bb0:	2203      	movs	r2, #3
 8103bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8103bb6:	43db      	mvns	r3, r3
 8103bb8:	69ba      	ldr	r2, [r7, #24]
 8103bba:	4013      	ands	r3, r2
 8103bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103bbe:	683b      	ldr	r3, [r7, #0]
 8103bc0:	685b      	ldr	r3, [r3, #4]
 8103bc2:	f003 0203 	and.w	r2, r3, #3
 8103bc6:	69fb      	ldr	r3, [r7, #28]
 8103bc8:	005b      	lsls	r3, r3, #1
 8103bca:	fa02 f303 	lsl.w	r3, r2, r3
 8103bce:	69ba      	ldr	r2, [r7, #24]
 8103bd0:	4313      	orrs	r3, r2
 8103bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	69ba      	ldr	r2, [r7, #24]
 8103bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8103bda:	683b      	ldr	r3, [r7, #0]
 8103bdc:	685b      	ldr	r3, [r3, #4]
 8103bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103be2:	2b00      	cmp	r3, #0
 8103be4:	f000 80e0 	beq.w	8103da8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103be8:	4b2f      	ldr	r3, [pc, #188]	; (8103ca8 <HAL_GPIO_Init+0x238>)
 8103bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103bee:	4a2e      	ldr	r2, [pc, #184]	; (8103ca8 <HAL_GPIO_Init+0x238>)
 8103bf0:	f043 0302 	orr.w	r3, r3, #2
 8103bf4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103bf8:	4b2b      	ldr	r3, [pc, #172]	; (8103ca8 <HAL_GPIO_Init+0x238>)
 8103bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103bfe:	f003 0302 	and.w	r3, r3, #2
 8103c02:	60fb      	str	r3, [r7, #12]
 8103c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103c06:	4a29      	ldr	r2, [pc, #164]	; (8103cac <HAL_GPIO_Init+0x23c>)
 8103c08:	69fb      	ldr	r3, [r7, #28]
 8103c0a:	089b      	lsrs	r3, r3, #2
 8103c0c:	3302      	adds	r3, #2
 8103c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103c14:	69fb      	ldr	r3, [r7, #28]
 8103c16:	f003 0303 	and.w	r3, r3, #3
 8103c1a:	009b      	lsls	r3, r3, #2
 8103c1c:	220f      	movs	r2, #15
 8103c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8103c22:	43db      	mvns	r3, r3
 8103c24:	69ba      	ldr	r2, [r7, #24]
 8103c26:	4013      	ands	r3, r2
 8103c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	4a20      	ldr	r2, [pc, #128]	; (8103cb0 <HAL_GPIO_Init+0x240>)
 8103c2e:	4293      	cmp	r3, r2
 8103c30:	d052      	beq.n	8103cd8 <HAL_GPIO_Init+0x268>
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	4a1f      	ldr	r2, [pc, #124]	; (8103cb4 <HAL_GPIO_Init+0x244>)
 8103c36:	4293      	cmp	r3, r2
 8103c38:	d031      	beq.n	8103c9e <HAL_GPIO_Init+0x22e>
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	4a1e      	ldr	r2, [pc, #120]	; (8103cb8 <HAL_GPIO_Init+0x248>)
 8103c3e:	4293      	cmp	r3, r2
 8103c40:	d02b      	beq.n	8103c9a <HAL_GPIO_Init+0x22a>
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	4a1d      	ldr	r2, [pc, #116]	; (8103cbc <HAL_GPIO_Init+0x24c>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d025      	beq.n	8103c96 <HAL_GPIO_Init+0x226>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	4a1c      	ldr	r2, [pc, #112]	; (8103cc0 <HAL_GPIO_Init+0x250>)
 8103c4e:	4293      	cmp	r3, r2
 8103c50:	d01f      	beq.n	8103c92 <HAL_GPIO_Init+0x222>
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	4a1b      	ldr	r2, [pc, #108]	; (8103cc4 <HAL_GPIO_Init+0x254>)
 8103c56:	4293      	cmp	r3, r2
 8103c58:	d019      	beq.n	8103c8e <HAL_GPIO_Init+0x21e>
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	4a1a      	ldr	r2, [pc, #104]	; (8103cc8 <HAL_GPIO_Init+0x258>)
 8103c5e:	4293      	cmp	r3, r2
 8103c60:	d013      	beq.n	8103c8a <HAL_GPIO_Init+0x21a>
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	4a19      	ldr	r2, [pc, #100]	; (8103ccc <HAL_GPIO_Init+0x25c>)
 8103c66:	4293      	cmp	r3, r2
 8103c68:	d00d      	beq.n	8103c86 <HAL_GPIO_Init+0x216>
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	4a18      	ldr	r2, [pc, #96]	; (8103cd0 <HAL_GPIO_Init+0x260>)
 8103c6e:	4293      	cmp	r3, r2
 8103c70:	d007      	beq.n	8103c82 <HAL_GPIO_Init+0x212>
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	4a17      	ldr	r2, [pc, #92]	; (8103cd4 <HAL_GPIO_Init+0x264>)
 8103c76:	4293      	cmp	r3, r2
 8103c78:	d101      	bne.n	8103c7e <HAL_GPIO_Init+0x20e>
 8103c7a:	2309      	movs	r3, #9
 8103c7c:	e02d      	b.n	8103cda <HAL_GPIO_Init+0x26a>
 8103c7e:	230a      	movs	r3, #10
 8103c80:	e02b      	b.n	8103cda <HAL_GPIO_Init+0x26a>
 8103c82:	2308      	movs	r3, #8
 8103c84:	e029      	b.n	8103cda <HAL_GPIO_Init+0x26a>
 8103c86:	2307      	movs	r3, #7
 8103c88:	e027      	b.n	8103cda <HAL_GPIO_Init+0x26a>
 8103c8a:	2306      	movs	r3, #6
 8103c8c:	e025      	b.n	8103cda <HAL_GPIO_Init+0x26a>
 8103c8e:	2305      	movs	r3, #5
 8103c90:	e023      	b.n	8103cda <HAL_GPIO_Init+0x26a>
 8103c92:	2304      	movs	r3, #4
 8103c94:	e021      	b.n	8103cda <HAL_GPIO_Init+0x26a>
 8103c96:	2303      	movs	r3, #3
 8103c98:	e01f      	b.n	8103cda <HAL_GPIO_Init+0x26a>
 8103c9a:	2302      	movs	r3, #2
 8103c9c:	e01d      	b.n	8103cda <HAL_GPIO_Init+0x26a>
 8103c9e:	2301      	movs	r3, #1
 8103ca0:	e01b      	b.n	8103cda <HAL_GPIO_Init+0x26a>
 8103ca2:	bf00      	nop
 8103ca4:	580000c0 	.word	0x580000c0
 8103ca8:	58024400 	.word	0x58024400
 8103cac:	58000400 	.word	0x58000400
 8103cb0:	58020000 	.word	0x58020000
 8103cb4:	58020400 	.word	0x58020400
 8103cb8:	58020800 	.word	0x58020800
 8103cbc:	58020c00 	.word	0x58020c00
 8103cc0:	58021000 	.word	0x58021000
 8103cc4:	58021400 	.word	0x58021400
 8103cc8:	58021800 	.word	0x58021800
 8103ccc:	58021c00 	.word	0x58021c00
 8103cd0:	58022000 	.word	0x58022000
 8103cd4:	58022400 	.word	0x58022400
 8103cd8:	2300      	movs	r3, #0
 8103cda:	69fa      	ldr	r2, [r7, #28]
 8103cdc:	f002 0203 	and.w	r2, r2, #3
 8103ce0:	0092      	lsls	r2, r2, #2
 8103ce2:	4093      	lsls	r3, r2
 8103ce4:	69ba      	ldr	r2, [r7, #24]
 8103ce6:	4313      	orrs	r3, r2
 8103ce8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103cea:	4938      	ldr	r1, [pc, #224]	; (8103dcc <HAL_GPIO_Init+0x35c>)
 8103cec:	69fb      	ldr	r3, [r7, #28]
 8103cee:	089b      	lsrs	r3, r3, #2
 8103cf0:	3302      	adds	r3, #2
 8103cf2:	69ba      	ldr	r2, [r7, #24]
 8103cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103d00:	693b      	ldr	r3, [r7, #16]
 8103d02:	43db      	mvns	r3, r3
 8103d04:	69ba      	ldr	r2, [r7, #24]
 8103d06:	4013      	ands	r3, r2
 8103d08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103d0a:	683b      	ldr	r3, [r7, #0]
 8103d0c:	685b      	ldr	r3, [r3, #4]
 8103d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103d12:	2b00      	cmp	r3, #0
 8103d14:	d003      	beq.n	8103d1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103d16:	69ba      	ldr	r2, [r7, #24]
 8103d18:	693b      	ldr	r3, [r7, #16]
 8103d1a:	4313      	orrs	r3, r2
 8103d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103d22:	69bb      	ldr	r3, [r7, #24]
 8103d24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103d2a:	685b      	ldr	r3, [r3, #4]
 8103d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103d2e:	693b      	ldr	r3, [r7, #16]
 8103d30:	43db      	mvns	r3, r3
 8103d32:	69ba      	ldr	r2, [r7, #24]
 8103d34:	4013      	ands	r3, r2
 8103d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103d38:	683b      	ldr	r3, [r7, #0]
 8103d3a:	685b      	ldr	r3, [r3, #4]
 8103d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103d40:	2b00      	cmp	r3, #0
 8103d42:	d003      	beq.n	8103d4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103d44:	69ba      	ldr	r2, [r7, #24]
 8103d46:	693b      	ldr	r3, [r7, #16]
 8103d48:	4313      	orrs	r3, r2
 8103d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103d50:	69bb      	ldr	r3, [r7, #24]
 8103d52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103d54:	697b      	ldr	r3, [r7, #20]
 8103d56:	685b      	ldr	r3, [r3, #4]
 8103d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103d5a:	693b      	ldr	r3, [r7, #16]
 8103d5c:	43db      	mvns	r3, r3
 8103d5e:	69ba      	ldr	r2, [r7, #24]
 8103d60:	4013      	ands	r3, r2
 8103d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103d64:	683b      	ldr	r3, [r7, #0]
 8103d66:	685b      	ldr	r3, [r3, #4]
 8103d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103d6c:	2b00      	cmp	r3, #0
 8103d6e:	d003      	beq.n	8103d78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103d70:	69ba      	ldr	r2, [r7, #24]
 8103d72:	693b      	ldr	r3, [r7, #16]
 8103d74:	4313      	orrs	r3, r2
 8103d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103d78:	697b      	ldr	r3, [r7, #20]
 8103d7a:	69ba      	ldr	r2, [r7, #24]
 8103d7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103d7e:	697b      	ldr	r3, [r7, #20]
 8103d80:	681b      	ldr	r3, [r3, #0]
 8103d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103d84:	693b      	ldr	r3, [r7, #16]
 8103d86:	43db      	mvns	r3, r3
 8103d88:	69ba      	ldr	r2, [r7, #24]
 8103d8a:	4013      	ands	r3, r2
 8103d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103d8e:	683b      	ldr	r3, [r7, #0]
 8103d90:	685b      	ldr	r3, [r3, #4]
 8103d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103d96:	2b00      	cmp	r3, #0
 8103d98:	d003      	beq.n	8103da2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103d9a:	69ba      	ldr	r2, [r7, #24]
 8103d9c:	693b      	ldr	r3, [r7, #16]
 8103d9e:	4313      	orrs	r3, r2
 8103da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103da2:	697b      	ldr	r3, [r7, #20]
 8103da4:	69ba      	ldr	r2, [r7, #24]
 8103da6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103da8:	69fb      	ldr	r3, [r7, #28]
 8103daa:	3301      	adds	r3, #1
 8103dac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103dae:	683b      	ldr	r3, [r7, #0]
 8103db0:	681a      	ldr	r2, [r3, #0]
 8103db2:	69fb      	ldr	r3, [r7, #28]
 8103db4:	fa22 f303 	lsr.w	r3, r2, r3
 8103db8:	2b00      	cmp	r3, #0
 8103dba:	f47f ae63 	bne.w	8103a84 <HAL_GPIO_Init+0x14>
  }
}
 8103dbe:	bf00      	nop
 8103dc0:	bf00      	nop
 8103dc2:	3724      	adds	r7, #36	; 0x24
 8103dc4:	46bd      	mov	sp, r7
 8103dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dca:	4770      	bx	lr
 8103dcc:	58000400 	.word	0x58000400

08103dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103dd0:	b480      	push	{r7}
 8103dd2:	b083      	sub	sp, #12
 8103dd4:	af00      	add	r7, sp, #0
 8103dd6:	6078      	str	r0, [r7, #4]
 8103dd8:	460b      	mov	r3, r1
 8103dda:	807b      	strh	r3, [r7, #2]
 8103ddc:	4613      	mov	r3, r2
 8103dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103de0:	787b      	ldrb	r3, [r7, #1]
 8103de2:	2b00      	cmp	r3, #0
 8103de4:	d003      	beq.n	8103dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103de6:	887a      	ldrh	r2, [r7, #2]
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103dec:	e003      	b.n	8103df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103dee:	887b      	ldrh	r3, [r7, #2]
 8103df0:	041a      	lsls	r2, r3, #16
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	619a      	str	r2, [r3, #24]
}
 8103df6:	bf00      	nop
 8103df8:	370c      	adds	r7, #12
 8103dfa:	46bd      	mov	sp, r7
 8103dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e00:	4770      	bx	lr

08103e02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103e02:	b480      	push	{r7}
 8103e04:	b085      	sub	sp, #20
 8103e06:	af00      	add	r7, sp, #0
 8103e08:	6078      	str	r0, [r7, #4]
 8103e0a:	460b      	mov	r3, r1
 8103e0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	695b      	ldr	r3, [r3, #20]
 8103e12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8103e14:	887a      	ldrh	r2, [r7, #2]
 8103e16:	68fb      	ldr	r3, [r7, #12]
 8103e18:	4013      	ands	r3, r2
 8103e1a:	041a      	lsls	r2, r3, #16
 8103e1c:	68fb      	ldr	r3, [r7, #12]
 8103e1e:	43d9      	mvns	r1, r3
 8103e20:	887b      	ldrh	r3, [r7, #2]
 8103e22:	400b      	ands	r3, r1
 8103e24:	431a      	orrs	r2, r3
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	619a      	str	r2, [r3, #24]
}
 8103e2a:	bf00      	nop
 8103e2c:	3714      	adds	r7, #20
 8103e2e:	46bd      	mov	sp, r7
 8103e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e34:	4770      	bx	lr
	...

08103e38 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103e38:	b480      	push	{r7}
 8103e3a:	b083      	sub	sp, #12
 8103e3c:	af00      	add	r7, sp, #0
 8103e3e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103e40:	4b05      	ldr	r3, [pc, #20]	; (8103e58 <HAL_HSEM_ActivateNotification+0x20>)
 8103e42:	681a      	ldr	r2, [r3, #0]
 8103e44:	4904      	ldr	r1, [pc, #16]	; (8103e58 <HAL_HSEM_ActivateNotification+0x20>)
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	4313      	orrs	r3, r2
 8103e4a:	600b      	str	r3, [r1, #0]
#endif
}
 8103e4c:	bf00      	nop
 8103e4e:	370c      	adds	r7, #12
 8103e50:	46bd      	mov	sp, r7
 8103e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e56:	4770      	bx	lr
 8103e58:	58026510 	.word	0x58026510

08103e5c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103e5c:	b580      	push	{r7, lr}
 8103e5e:	b084      	sub	sp, #16
 8103e60:	af00      	add	r7, sp, #0
 8103e62:	60f8      	str	r0, [r7, #12]
 8103e64:	460b      	mov	r3, r1
 8103e66:	607a      	str	r2, [r7, #4]
 8103e68:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103e6a:	4b37      	ldr	r3, [pc, #220]	; (8103f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	f023 0201 	bic.w	r2, r3, #1
 8103e72:	4935      	ldr	r1, [pc, #212]	; (8103f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e74:	68fb      	ldr	r3, [r7, #12]
 8103e76:	4313      	orrs	r3, r2
 8103e78:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	2b00      	cmp	r3, #0
 8103e7e:	d123      	bne.n	8103ec8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103e80:	f7fd fedc 	bl	8101c3c <HAL_GetCurrentCPUID>
 8103e84:	4603      	mov	r3, r0
 8103e86:	2b03      	cmp	r3, #3
 8103e88:	d158      	bne.n	8103f3c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103e8a:	4b2f      	ldr	r3, [pc, #188]	; (8103f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e8c:	691b      	ldr	r3, [r3, #16]
 8103e8e:	4a2e      	ldr	r2, [pc, #184]	; (8103f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e90:	f023 0301 	bic.w	r3, r3, #1
 8103e94:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103e96:	4b2d      	ldr	r3, [pc, #180]	; (8103f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e98:	691b      	ldr	r3, [r3, #16]
 8103e9a:	4a2c      	ldr	r2, [pc, #176]	; (8103f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e9c:	f043 0304 	orr.w	r3, r3, #4
 8103ea0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103ea2:	f3bf 8f4f 	dsb	sy
}
 8103ea6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103ea8:	f3bf 8f6f 	isb	sy
}
 8103eac:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103eae:	7afb      	ldrb	r3, [r7, #11]
 8103eb0:	2b01      	cmp	r3, #1
 8103eb2:	d101      	bne.n	8103eb8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103eb4:	bf30      	wfi
 8103eb6:	e000      	b.n	8103eba <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103eb8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103eba:	4b24      	ldr	r3, [pc, #144]	; (8103f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103ebc:	691b      	ldr	r3, [r3, #16]
 8103ebe:	4a23      	ldr	r2, [pc, #140]	; (8103f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103ec0:	f023 0304 	bic.w	r3, r3, #4
 8103ec4:	6113      	str	r3, [r2, #16]
 8103ec6:	e03c      	b.n	8103f42 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	2b01      	cmp	r3, #1
 8103ecc:	d123      	bne.n	8103f16 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103ece:	f7fd feb5 	bl	8101c3c <HAL_GetCurrentCPUID>
 8103ed2:	4603      	mov	r3, r0
 8103ed4:	2b01      	cmp	r3, #1
 8103ed6:	d133      	bne.n	8103f40 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103ed8:	4b1b      	ldr	r3, [pc, #108]	; (8103f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103eda:	695b      	ldr	r3, [r3, #20]
 8103edc:	4a1a      	ldr	r2, [pc, #104]	; (8103f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103ede:	f023 0302 	bic.w	r3, r3, #2
 8103ee2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103ee4:	4b19      	ldr	r3, [pc, #100]	; (8103f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103ee6:	691b      	ldr	r3, [r3, #16]
 8103ee8:	4a18      	ldr	r2, [pc, #96]	; (8103f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103eea:	f043 0304 	orr.w	r3, r3, #4
 8103eee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103ef0:	f3bf 8f4f 	dsb	sy
}
 8103ef4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103ef6:	f3bf 8f6f 	isb	sy
}
 8103efa:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103efc:	7afb      	ldrb	r3, [r7, #11]
 8103efe:	2b01      	cmp	r3, #1
 8103f00:	d101      	bne.n	8103f06 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103f02:	bf30      	wfi
 8103f04:	e000      	b.n	8103f08 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103f06:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103f08:	4b10      	ldr	r3, [pc, #64]	; (8103f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103f0a:	691b      	ldr	r3, [r3, #16]
 8103f0c:	4a0f      	ldr	r2, [pc, #60]	; (8103f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103f0e:	f023 0304 	bic.w	r3, r3, #4
 8103f12:	6113      	str	r3, [r2, #16]
 8103f14:	e015      	b.n	8103f42 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103f16:	f7fd fe91 	bl	8101c3c <HAL_GetCurrentCPUID>
 8103f1a:	4603      	mov	r3, r0
 8103f1c:	2b03      	cmp	r3, #3
 8103f1e:	d106      	bne.n	8103f2e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103f20:	4b09      	ldr	r3, [pc, #36]	; (8103f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f22:	691b      	ldr	r3, [r3, #16]
 8103f24:	4a08      	ldr	r2, [pc, #32]	; (8103f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f26:	f023 0304 	bic.w	r3, r3, #4
 8103f2a:	6113      	str	r3, [r2, #16]
 8103f2c:	e009      	b.n	8103f42 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103f2e:	4b06      	ldr	r3, [pc, #24]	; (8103f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f30:	695b      	ldr	r3, [r3, #20]
 8103f32:	4a05      	ldr	r2, [pc, #20]	; (8103f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f34:	f023 0304 	bic.w	r3, r3, #4
 8103f38:	6153      	str	r3, [r2, #20]
 8103f3a:	e002      	b.n	8103f42 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103f3c:	bf00      	nop
 8103f3e:	e000      	b.n	8103f42 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103f40:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103f42:	3710      	adds	r7, #16
 8103f44:	46bd      	mov	sp, r7
 8103f46:	bd80      	pop	{r7, pc}
 8103f48:	58024800 	.word	0x58024800
 8103f4c:	e000ed00 	.word	0xe000ed00

08103f50 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103f50:	b580      	push	{r7, lr}
 8103f52:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103f54:	f7fd fe72 	bl	8101c3c <HAL_GetCurrentCPUID>
 8103f58:	4603      	mov	r3, r0
 8103f5a:	2b03      	cmp	r3, #3
 8103f5c:	d101      	bne.n	8103f62 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103f5e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103f60:	e001      	b.n	8103f66 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103f62:	bf40      	sev
    __WFE ();
 8103f64:	bf20      	wfe
}
 8103f66:	bf00      	nop
 8103f68:	bd80      	pop	{r7, pc}
	...

08103f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103f6c:	b480      	push	{r7}
 8103f6e:	b089      	sub	sp, #36	; 0x24
 8103f70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103f72:	4bb3      	ldr	r3, [pc, #716]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103f74:	691b      	ldr	r3, [r3, #16]
 8103f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103f7a:	2b18      	cmp	r3, #24
 8103f7c:	f200 8155 	bhi.w	810422a <HAL_RCC_GetSysClockFreq+0x2be>
 8103f80:	a201      	add	r2, pc, #4	; (adr r2, 8103f88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f86:	bf00      	nop
 8103f88:	08103fed 	.word	0x08103fed
 8103f8c:	0810422b 	.word	0x0810422b
 8103f90:	0810422b 	.word	0x0810422b
 8103f94:	0810422b 	.word	0x0810422b
 8103f98:	0810422b 	.word	0x0810422b
 8103f9c:	0810422b 	.word	0x0810422b
 8103fa0:	0810422b 	.word	0x0810422b
 8103fa4:	0810422b 	.word	0x0810422b
 8103fa8:	08104013 	.word	0x08104013
 8103fac:	0810422b 	.word	0x0810422b
 8103fb0:	0810422b 	.word	0x0810422b
 8103fb4:	0810422b 	.word	0x0810422b
 8103fb8:	0810422b 	.word	0x0810422b
 8103fbc:	0810422b 	.word	0x0810422b
 8103fc0:	0810422b 	.word	0x0810422b
 8103fc4:	0810422b 	.word	0x0810422b
 8103fc8:	08104019 	.word	0x08104019
 8103fcc:	0810422b 	.word	0x0810422b
 8103fd0:	0810422b 	.word	0x0810422b
 8103fd4:	0810422b 	.word	0x0810422b
 8103fd8:	0810422b 	.word	0x0810422b
 8103fdc:	0810422b 	.word	0x0810422b
 8103fe0:	0810422b 	.word	0x0810422b
 8103fe4:	0810422b 	.word	0x0810422b
 8103fe8:	0810401f 	.word	0x0810401f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103fec:	4b94      	ldr	r3, [pc, #592]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	f003 0320 	and.w	r3, r3, #32
 8103ff4:	2b00      	cmp	r3, #0
 8103ff6:	d009      	beq.n	810400c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103ff8:	4b91      	ldr	r3, [pc, #580]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	08db      	lsrs	r3, r3, #3
 8103ffe:	f003 0303 	and.w	r3, r3, #3
 8104002:	4a90      	ldr	r2, [pc, #576]	; (8104244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104004:	fa22 f303 	lsr.w	r3, r2, r3
 8104008:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810400a:	e111      	b.n	8104230 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810400c:	4b8d      	ldr	r3, [pc, #564]	; (8104244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810400e:	61bb      	str	r3, [r7, #24]
    break;
 8104010:	e10e      	b.n	8104230 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8104012:	4b8d      	ldr	r3, [pc, #564]	; (8104248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104014:	61bb      	str	r3, [r7, #24]
    break;
 8104016:	e10b      	b.n	8104230 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8104018:	4b8c      	ldr	r3, [pc, #560]	; (810424c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810401a:	61bb      	str	r3, [r7, #24]
    break;
 810401c:	e108      	b.n	8104230 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810401e:	4b88      	ldr	r3, [pc, #544]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104022:	f003 0303 	and.w	r3, r3, #3
 8104026:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104028:	4b85      	ldr	r3, [pc, #532]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810402c:	091b      	lsrs	r3, r3, #4
 810402e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104032:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104034:	4b82      	ldr	r3, [pc, #520]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104038:	f003 0301 	and.w	r3, r3, #1
 810403c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810403e:	4b80      	ldr	r3, [pc, #512]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104042:	08db      	lsrs	r3, r3, #3
 8104044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104048:	68fa      	ldr	r2, [r7, #12]
 810404a:	fb02 f303 	mul.w	r3, r2, r3
 810404e:	ee07 3a90 	vmov	s15, r3
 8104052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104056:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810405a:	693b      	ldr	r3, [r7, #16]
 810405c:	2b00      	cmp	r3, #0
 810405e:	f000 80e1 	beq.w	8104224 <HAL_RCC_GetSysClockFreq+0x2b8>
 8104062:	697b      	ldr	r3, [r7, #20]
 8104064:	2b02      	cmp	r3, #2
 8104066:	f000 8083 	beq.w	8104170 <HAL_RCC_GetSysClockFreq+0x204>
 810406a:	697b      	ldr	r3, [r7, #20]
 810406c:	2b02      	cmp	r3, #2
 810406e:	f200 80a1 	bhi.w	81041b4 <HAL_RCC_GetSysClockFreq+0x248>
 8104072:	697b      	ldr	r3, [r7, #20]
 8104074:	2b00      	cmp	r3, #0
 8104076:	d003      	beq.n	8104080 <HAL_RCC_GetSysClockFreq+0x114>
 8104078:	697b      	ldr	r3, [r7, #20]
 810407a:	2b01      	cmp	r3, #1
 810407c:	d056      	beq.n	810412c <HAL_RCC_GetSysClockFreq+0x1c0>
 810407e:	e099      	b.n	81041b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104080:	4b6f      	ldr	r3, [pc, #444]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104082:	681b      	ldr	r3, [r3, #0]
 8104084:	f003 0320 	and.w	r3, r3, #32
 8104088:	2b00      	cmp	r3, #0
 810408a:	d02d      	beq.n	81040e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810408c:	4b6c      	ldr	r3, [pc, #432]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810408e:	681b      	ldr	r3, [r3, #0]
 8104090:	08db      	lsrs	r3, r3, #3
 8104092:	f003 0303 	and.w	r3, r3, #3
 8104096:	4a6b      	ldr	r2, [pc, #428]	; (8104244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104098:	fa22 f303 	lsr.w	r3, r2, r3
 810409c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	ee07 3a90 	vmov	s15, r3
 81040a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81040a8:	693b      	ldr	r3, [r7, #16]
 81040aa:	ee07 3a90 	vmov	s15, r3
 81040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81040b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81040b6:	4b62      	ldr	r3, [pc, #392]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81040ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81040be:	ee07 3a90 	vmov	s15, r3
 81040c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81040c6:	ed97 6a02 	vldr	s12, [r7, #8]
 81040ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104250 <HAL_RCC_GetSysClockFreq+0x2e4>
 81040ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81040d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81040d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81040da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81040de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81040e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81040e6:	e087      	b.n	81041f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81040e8:	693b      	ldr	r3, [r7, #16]
 81040ea:	ee07 3a90 	vmov	s15, r3
 81040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81040f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104254 <HAL_RCC_GetSysClockFreq+0x2e8>
 81040f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81040fa:	4b51      	ldr	r3, [pc, #324]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81040fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104102:	ee07 3a90 	vmov	s15, r3
 8104106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810410a:	ed97 6a02 	vldr	s12, [r7, #8]
 810410e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104250 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810411a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810411e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810412a:	e065      	b.n	81041f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810412c:	693b      	ldr	r3, [r7, #16]
 810412e:	ee07 3a90 	vmov	s15, r3
 8104132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104136:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104258 <HAL_RCC_GetSysClockFreq+0x2ec>
 810413a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810413e:	4b40      	ldr	r3, [pc, #256]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104146:	ee07 3a90 	vmov	s15, r3
 810414a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810414e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104152:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104250 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810415a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810415e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104166:	ee67 7a27 	vmul.f32	s15, s14, s15
 810416a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810416e:	e043      	b.n	81041f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104170:	693b      	ldr	r3, [r7, #16]
 8104172:	ee07 3a90 	vmov	s15, r3
 8104176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810417a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810425c <HAL_RCC_GetSysClockFreq+0x2f0>
 810417e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104182:	4b2f      	ldr	r3, [pc, #188]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810418a:	ee07 3a90 	vmov	s15, r3
 810418e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104192:	ed97 6a02 	vldr	s12, [r7, #8]
 8104196:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104250 <HAL_RCC_GetSysClockFreq+0x2e4>
 810419a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810419e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81041a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81041a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81041aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81041ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81041b2:	e021      	b.n	81041f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81041b4:	693b      	ldr	r3, [r7, #16]
 81041b6:	ee07 3a90 	vmov	s15, r3
 81041ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104258 <HAL_RCC_GetSysClockFreq+0x2ec>
 81041c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81041c6:	4b1e      	ldr	r3, [pc, #120]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81041ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81041ce:	ee07 3a90 	vmov	s15, r3
 81041d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81041da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104250 <HAL_RCC_GetSysClockFreq+0x2e4>
 81041de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81041e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81041e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81041ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81041ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81041f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81041f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81041f8:	4b11      	ldr	r3, [pc, #68]	; (8104240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81041fc:	0a5b      	lsrs	r3, r3, #9
 81041fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104202:	3301      	adds	r3, #1
 8104204:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104206:	683b      	ldr	r3, [r7, #0]
 8104208:	ee07 3a90 	vmov	s15, r3
 810420c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104210:	edd7 6a07 	vldr	s13, [r7, #28]
 8104214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810421c:	ee17 3a90 	vmov	r3, s15
 8104220:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8104222:	e005      	b.n	8104230 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8104224:	2300      	movs	r3, #0
 8104226:	61bb      	str	r3, [r7, #24]
    break;
 8104228:	e002      	b.n	8104230 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810422a:	4b07      	ldr	r3, [pc, #28]	; (8104248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810422c:	61bb      	str	r3, [r7, #24]
    break;
 810422e:	bf00      	nop
  }

  return sysclockfreq;
 8104230:	69bb      	ldr	r3, [r7, #24]
}
 8104232:	4618      	mov	r0, r3
 8104234:	3724      	adds	r7, #36	; 0x24
 8104236:	46bd      	mov	sp, r7
 8104238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810423c:	4770      	bx	lr
 810423e:	bf00      	nop
 8104240:	58024400 	.word	0x58024400
 8104244:	03d09000 	.word	0x03d09000
 8104248:	003d0900 	.word	0x003d0900
 810424c:	007a1200 	.word	0x007a1200
 8104250:	46000000 	.word	0x46000000
 8104254:	4c742400 	.word	0x4c742400
 8104258:	4a742400 	.word	0x4a742400
 810425c:	4af42400 	.word	0x4af42400

08104260 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104260:	b580      	push	{r7, lr}
 8104262:	b084      	sub	sp, #16
 8104264:	af00      	add	r7, sp, #0
 8104266:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	2b00      	cmp	r3, #0
 810426c:	d101      	bne.n	8104272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810426e:	2301      	movs	r3, #1
 8104270:	e0f1      	b.n	8104456 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104272:	687b      	ldr	r3, [r7, #4]
 8104274:	2200      	movs	r2, #0
 8104276:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104278:	687b      	ldr	r3, [r7, #4]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	4a78      	ldr	r2, [pc, #480]	; (8104460 <HAL_SPI_Init+0x200>)
 810427e:	4293      	cmp	r3, r2
 8104280:	d00f      	beq.n	81042a2 <HAL_SPI_Init+0x42>
 8104282:	687b      	ldr	r3, [r7, #4]
 8104284:	681b      	ldr	r3, [r3, #0]
 8104286:	4a77      	ldr	r2, [pc, #476]	; (8104464 <HAL_SPI_Init+0x204>)
 8104288:	4293      	cmp	r3, r2
 810428a:	d00a      	beq.n	81042a2 <HAL_SPI_Init+0x42>
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	4a75      	ldr	r2, [pc, #468]	; (8104468 <HAL_SPI_Init+0x208>)
 8104292:	4293      	cmp	r3, r2
 8104294:	d005      	beq.n	81042a2 <HAL_SPI_Init+0x42>
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	68db      	ldr	r3, [r3, #12]
 810429a:	2b0f      	cmp	r3, #15
 810429c:	d901      	bls.n	81042a2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810429e:	2301      	movs	r3, #1
 81042a0:	e0d9      	b.n	8104456 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81042a2:	6878      	ldr	r0, [r7, #4]
 81042a4:	f000 ffd2 	bl	810524c <SPI_GetPacketSize>
 81042a8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	681b      	ldr	r3, [r3, #0]
 81042ae:	4a6c      	ldr	r2, [pc, #432]	; (8104460 <HAL_SPI_Init+0x200>)
 81042b0:	4293      	cmp	r3, r2
 81042b2:	d00c      	beq.n	81042ce <HAL_SPI_Init+0x6e>
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	681b      	ldr	r3, [r3, #0]
 81042b8:	4a6a      	ldr	r2, [pc, #424]	; (8104464 <HAL_SPI_Init+0x204>)
 81042ba:	4293      	cmp	r3, r2
 81042bc:	d007      	beq.n	81042ce <HAL_SPI_Init+0x6e>
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	681b      	ldr	r3, [r3, #0]
 81042c2:	4a69      	ldr	r2, [pc, #420]	; (8104468 <HAL_SPI_Init+0x208>)
 81042c4:	4293      	cmp	r3, r2
 81042c6:	d002      	beq.n	81042ce <HAL_SPI_Init+0x6e>
 81042c8:	68fb      	ldr	r3, [r7, #12]
 81042ca:	2b08      	cmp	r3, #8
 81042cc:	d811      	bhi.n	81042f2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81042d2:	4a63      	ldr	r2, [pc, #396]	; (8104460 <HAL_SPI_Init+0x200>)
 81042d4:	4293      	cmp	r3, r2
 81042d6:	d009      	beq.n	81042ec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	4a61      	ldr	r2, [pc, #388]	; (8104464 <HAL_SPI_Init+0x204>)
 81042de:	4293      	cmp	r3, r2
 81042e0:	d004      	beq.n	81042ec <HAL_SPI_Init+0x8c>
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	681b      	ldr	r3, [r3, #0]
 81042e6:	4a60      	ldr	r2, [pc, #384]	; (8104468 <HAL_SPI_Init+0x208>)
 81042e8:	4293      	cmp	r3, r2
 81042ea:	d104      	bne.n	81042f6 <HAL_SPI_Init+0x96>
 81042ec:	68fb      	ldr	r3, [r7, #12]
 81042ee:	2b10      	cmp	r3, #16
 81042f0:	d901      	bls.n	81042f6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81042f2:	2301      	movs	r3, #1
 81042f4:	e0af      	b.n	8104456 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81042fc:	b2db      	uxtb	r3, r3
 81042fe:	2b00      	cmp	r3, #0
 8104300:	d106      	bne.n	8104310 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8104302:	687b      	ldr	r3, [r7, #4]
 8104304:	2200      	movs	r2, #0
 8104306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810430a:	6878      	ldr	r0, [r7, #4]
 810430c:	f7fd f8a0 	bl	8101450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	2202      	movs	r2, #2
 8104314:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	681a      	ldr	r2, [r3, #0]
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	f022 0201 	bic.w	r2, r2, #1
 8104326:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	689b      	ldr	r3, [r3, #8]
 810432e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8104332:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	699b      	ldr	r3, [r3, #24]
 8104338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810433c:	d119      	bne.n	8104372 <HAL_SPI_Init+0x112>
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	685b      	ldr	r3, [r3, #4]
 8104342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104346:	d103      	bne.n	8104350 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810434c:	2b00      	cmp	r3, #0
 810434e:	d008      	beq.n	8104362 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104354:	2b00      	cmp	r3, #0
 8104356:	d10c      	bne.n	8104372 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104358:	687b      	ldr	r3, [r7, #4]
 810435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810435c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104360:	d107      	bne.n	8104372 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	681b      	ldr	r3, [r3, #0]
 8104366:	681a      	ldr	r2, [r3, #0]
 8104368:	687b      	ldr	r3, [r7, #4]
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8104370:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	69da      	ldr	r2, [r3, #28]
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810437a:	431a      	orrs	r2, r3
 810437c:	68bb      	ldr	r3, [r7, #8]
 810437e:	431a      	orrs	r2, r3
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104384:	ea42 0103 	orr.w	r1, r2, r3
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	68da      	ldr	r2, [r3, #12]
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	681b      	ldr	r3, [r3, #0]
 8104390:	430a      	orrs	r2, r1
 8104392:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8104394:	687b      	ldr	r3, [r7, #4]
 8104396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810439c:	431a      	orrs	r2, r3
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81043a2:	431a      	orrs	r2, r3
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	699b      	ldr	r3, [r3, #24]
 81043a8:	431a      	orrs	r2, r3
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	691b      	ldr	r3, [r3, #16]
 81043ae:	431a      	orrs	r2, r3
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	695b      	ldr	r3, [r3, #20]
 81043b4:	431a      	orrs	r2, r3
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	6a1b      	ldr	r3, [r3, #32]
 81043ba:	431a      	orrs	r2, r3
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	685b      	ldr	r3, [r3, #4]
 81043c0:	431a      	orrs	r2, r3
 81043c2:	687b      	ldr	r3, [r7, #4]
 81043c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81043c6:	431a      	orrs	r2, r3
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	689b      	ldr	r3, [r3, #8]
 81043cc:	431a      	orrs	r2, r3
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81043d2:	ea42 0103 	orr.w	r1, r2, r3
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	681b      	ldr	r3, [r3, #0]
 81043de:	430a      	orrs	r2, r1
 81043e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	685b      	ldr	r3, [r3, #4]
 81043e6:	2b00      	cmp	r3, #0
 81043e8:	d113      	bne.n	8104412 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	689b      	ldr	r3, [r3, #8]
 81043f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81043fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	689b      	ldr	r3, [r3, #8]
 8104404:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8104408:	687b      	ldr	r3, [r7, #4]
 810440a:	681b      	ldr	r3, [r3, #0]
 810440c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8104410:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	681b      	ldr	r3, [r3, #0]
 810441c:	f022 0201 	bic.w	r2, r2, #1
 8104420:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	685b      	ldr	r3, [r3, #4]
 8104426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810442a:	2b00      	cmp	r3, #0
 810442c:	d00a      	beq.n	8104444 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	681b      	ldr	r3, [r3, #0]
 8104432:	68db      	ldr	r3, [r3, #12]
 8104434:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	681b      	ldr	r3, [r3, #0]
 8104440:	430a      	orrs	r2, r1
 8104442:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	2200      	movs	r2, #0
 8104448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	2201      	movs	r2, #1
 8104450:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8104454:	2300      	movs	r3, #0
}
 8104456:	4618      	mov	r0, r3
 8104458:	3710      	adds	r7, #16
 810445a:	46bd      	mov	sp, r7
 810445c:	bd80      	pop	{r7, pc}
 810445e:	bf00      	nop
 8104460:	40013000 	.word	0x40013000
 8104464:	40003800 	.word	0x40003800
 8104468:	40003c00 	.word	0x40003c00

0810446c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810446c:	b580      	push	{r7, lr}
 810446e:	b08a      	sub	sp, #40	; 0x28
 8104470:	af02      	add	r7, sp, #8
 8104472:	60f8      	str	r0, [r7, #12]
 8104474:	60b9      	str	r1, [r7, #8]
 8104476:	603b      	str	r3, [r7, #0]
 8104478:	4613      	mov	r3, r2
 810447a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810447c:	68fb      	ldr	r3, [r7, #12]
 810447e:	681b      	ldr	r3, [r3, #0]
 8104480:	3320      	adds	r3, #32
 8104482:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104484:	2300      	movs	r3, #0
 8104486:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104488:	68fb      	ldr	r3, [r7, #12]
 810448a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810448e:	2b01      	cmp	r3, #1
 8104490:	d101      	bne.n	8104496 <HAL_SPI_Transmit+0x2a>
 8104492:	2302      	movs	r3, #2
 8104494:	e1d4      	b.n	8104840 <HAL_SPI_Transmit+0x3d4>
 8104496:	68fb      	ldr	r3, [r7, #12]
 8104498:	2201      	movs	r2, #1
 810449a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810449e:	f7fd fa8d 	bl	81019bc <HAL_GetTick>
 81044a2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 81044a4:	68fb      	ldr	r3, [r7, #12]
 81044a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81044aa:	b2db      	uxtb	r3, r3
 81044ac:	2b01      	cmp	r3, #1
 81044ae:	d007      	beq.n	81044c0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 81044b0:	2302      	movs	r3, #2
 81044b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81044b4:	68fb      	ldr	r3, [r7, #12]
 81044b6:	2200      	movs	r2, #0
 81044b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81044bc:	7efb      	ldrb	r3, [r7, #27]
 81044be:	e1bf      	b.n	8104840 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 81044c0:	68bb      	ldr	r3, [r7, #8]
 81044c2:	2b00      	cmp	r3, #0
 81044c4:	d002      	beq.n	81044cc <HAL_SPI_Transmit+0x60>
 81044c6:	88fb      	ldrh	r3, [r7, #6]
 81044c8:	2b00      	cmp	r3, #0
 81044ca:	d107      	bne.n	81044dc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 81044cc:	2301      	movs	r3, #1
 81044ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81044d0:	68fb      	ldr	r3, [r7, #12]
 81044d2:	2200      	movs	r2, #0
 81044d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81044d8:	7efb      	ldrb	r3, [r7, #27]
 81044da:	e1b1      	b.n	8104840 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 81044dc:	68fb      	ldr	r3, [r7, #12]
 81044de:	2203      	movs	r2, #3
 81044e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81044e4:	68fb      	ldr	r3, [r7, #12]
 81044e6:	2200      	movs	r2, #0
 81044e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	68ba      	ldr	r2, [r7, #8]
 81044f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 81044f2:	68fb      	ldr	r3, [r7, #12]
 81044f4:	88fa      	ldrh	r2, [r7, #6]
 81044f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 81044fa:	68fb      	ldr	r3, [r7, #12]
 81044fc:	88fa      	ldrh	r2, [r7, #6]
 81044fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8104502:	68fb      	ldr	r3, [r7, #12]
 8104504:	2200      	movs	r2, #0
 8104506:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8104508:	68fb      	ldr	r3, [r7, #12]
 810450a:	2200      	movs	r2, #0
 810450c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8104510:	68fb      	ldr	r3, [r7, #12]
 8104512:	2200      	movs	r2, #0
 8104514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8104518:	68fb      	ldr	r3, [r7, #12]
 810451a:	2200      	movs	r2, #0
 810451c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 810451e:	68fb      	ldr	r3, [r7, #12]
 8104520:	2200      	movs	r2, #0
 8104522:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8104524:	68fb      	ldr	r3, [r7, #12]
 8104526:	689b      	ldr	r3, [r3, #8]
 8104528:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810452c:	d107      	bne.n	810453e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 810452e:	68fb      	ldr	r3, [r7, #12]
 8104530:	681b      	ldr	r3, [r3, #0]
 8104532:	681a      	ldr	r2, [r3, #0]
 8104534:	68fb      	ldr	r3, [r7, #12]
 8104536:	681b      	ldr	r3, [r3, #0]
 8104538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810453c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810453e:	68fb      	ldr	r3, [r7, #12]
 8104540:	681b      	ldr	r3, [r3, #0]
 8104542:	685b      	ldr	r3, [r3, #4]
 8104544:	0c1b      	lsrs	r3, r3, #16
 8104546:	041b      	lsls	r3, r3, #16
 8104548:	88f9      	ldrh	r1, [r7, #6]
 810454a:	68fa      	ldr	r2, [r7, #12]
 810454c:	6812      	ldr	r2, [r2, #0]
 810454e:	430b      	orrs	r3, r1
 8104550:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104552:	68fb      	ldr	r3, [r7, #12]
 8104554:	681b      	ldr	r3, [r3, #0]
 8104556:	681a      	ldr	r2, [r3, #0]
 8104558:	68fb      	ldr	r3, [r7, #12]
 810455a:	681b      	ldr	r3, [r3, #0]
 810455c:	f042 0201 	orr.w	r2, r2, #1
 8104560:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104562:	68fb      	ldr	r3, [r7, #12]
 8104564:	685b      	ldr	r3, [r3, #4]
 8104566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810456a:	d107      	bne.n	810457c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810456c:	68fb      	ldr	r3, [r7, #12]
 810456e:	681b      	ldr	r3, [r3, #0]
 8104570:	681a      	ldr	r2, [r3, #0]
 8104572:	68fb      	ldr	r3, [r7, #12]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810457a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810457c:	68fb      	ldr	r3, [r7, #12]
 810457e:	68db      	ldr	r3, [r3, #12]
 8104580:	2b0f      	cmp	r3, #15
 8104582:	d947      	bls.n	8104614 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8104584:	e03f      	b.n	8104606 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104586:	68fb      	ldr	r3, [r7, #12]
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	695b      	ldr	r3, [r3, #20]
 810458c:	f003 0302 	and.w	r3, r3, #2
 8104590:	2b02      	cmp	r3, #2
 8104592:	d114      	bne.n	81045be <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104594:	68fb      	ldr	r3, [r7, #12]
 8104596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104598:	68fb      	ldr	r3, [r7, #12]
 810459a:	681b      	ldr	r3, [r3, #0]
 810459c:	6812      	ldr	r2, [r2, #0]
 810459e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81045a0:	68fb      	ldr	r3, [r7, #12]
 81045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81045a4:	1d1a      	adds	r2, r3, #4
 81045a6:	68fb      	ldr	r3, [r7, #12]
 81045a8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81045b0:	b29b      	uxth	r3, r3
 81045b2:	3b01      	subs	r3, #1
 81045b4:	b29a      	uxth	r2, r3
 81045b6:	68fb      	ldr	r3, [r7, #12]
 81045b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81045bc:	e023      	b.n	8104606 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81045be:	f7fd f9fd 	bl	81019bc <HAL_GetTick>
 81045c2:	4602      	mov	r2, r0
 81045c4:	697b      	ldr	r3, [r7, #20]
 81045c6:	1ad3      	subs	r3, r2, r3
 81045c8:	683a      	ldr	r2, [r7, #0]
 81045ca:	429a      	cmp	r2, r3
 81045cc:	d803      	bhi.n	81045d6 <HAL_SPI_Transmit+0x16a>
 81045ce:	683b      	ldr	r3, [r7, #0]
 81045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81045d4:	d102      	bne.n	81045dc <HAL_SPI_Transmit+0x170>
 81045d6:	683b      	ldr	r3, [r7, #0]
 81045d8:	2b00      	cmp	r3, #0
 81045da:	d114      	bne.n	8104606 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81045dc:	68f8      	ldr	r0, [r7, #12]
 81045de:	f000 fd67 	bl	81050b0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	2200      	movs	r2, #0
 81045e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81045ea:	68fb      	ldr	r3, [r7, #12]
 81045ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81045f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81045f4:	68fb      	ldr	r3, [r7, #12]
 81045f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81045fa:	68fb      	ldr	r3, [r7, #12]
 81045fc:	2201      	movs	r2, #1
 81045fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104602:	2303      	movs	r3, #3
 8104604:	e11c      	b.n	8104840 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8104606:	68fb      	ldr	r3, [r7, #12]
 8104608:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810460c:	b29b      	uxth	r3, r3
 810460e:	2b00      	cmp	r3, #0
 8104610:	d1b9      	bne.n	8104586 <HAL_SPI_Transmit+0x11a>
 8104612:	e0ef      	b.n	81047f4 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104614:	68fb      	ldr	r3, [r7, #12]
 8104616:	68db      	ldr	r3, [r3, #12]
 8104618:	2b07      	cmp	r3, #7
 810461a:	f240 80e4 	bls.w	81047e6 <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810461e:	e05d      	b.n	81046dc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104620:	68fb      	ldr	r3, [r7, #12]
 8104622:	681b      	ldr	r3, [r3, #0]
 8104624:	695b      	ldr	r3, [r3, #20]
 8104626:	f003 0302 	and.w	r3, r3, #2
 810462a:	2b02      	cmp	r3, #2
 810462c:	d132      	bne.n	8104694 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810462e:	68fb      	ldr	r3, [r7, #12]
 8104630:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104634:	b29b      	uxth	r3, r3
 8104636:	2b01      	cmp	r3, #1
 8104638:	d918      	bls.n	810466c <HAL_SPI_Transmit+0x200>
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810463e:	2b00      	cmp	r3, #0
 8104640:	d014      	beq.n	810466c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104642:	68fb      	ldr	r3, [r7, #12]
 8104644:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104646:	68fb      	ldr	r3, [r7, #12]
 8104648:	681b      	ldr	r3, [r3, #0]
 810464a:	6812      	ldr	r2, [r2, #0]
 810464c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810464e:	68fb      	ldr	r3, [r7, #12]
 8104650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104652:	1d1a      	adds	r2, r3, #4
 8104654:	68fb      	ldr	r3, [r7, #12]
 8104656:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104658:	68fb      	ldr	r3, [r7, #12]
 810465a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810465e:	b29b      	uxth	r3, r3
 8104660:	3b02      	subs	r3, #2
 8104662:	b29a      	uxth	r2, r3
 8104664:	68fb      	ldr	r3, [r7, #12]
 8104666:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810466a:	e037      	b.n	81046dc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810466c:	68fb      	ldr	r3, [r7, #12]
 810466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104670:	881a      	ldrh	r2, [r3, #0]
 8104672:	69fb      	ldr	r3, [r7, #28]
 8104674:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104676:	68fb      	ldr	r3, [r7, #12]
 8104678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810467a:	1c9a      	adds	r2, r3, #2
 810467c:	68fb      	ldr	r3, [r7, #12]
 810467e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104680:	68fb      	ldr	r3, [r7, #12]
 8104682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104686:	b29b      	uxth	r3, r3
 8104688:	3b01      	subs	r3, #1
 810468a:	b29a      	uxth	r2, r3
 810468c:	68fb      	ldr	r3, [r7, #12]
 810468e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104692:	e023      	b.n	81046dc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104694:	f7fd f992 	bl	81019bc <HAL_GetTick>
 8104698:	4602      	mov	r2, r0
 810469a:	697b      	ldr	r3, [r7, #20]
 810469c:	1ad3      	subs	r3, r2, r3
 810469e:	683a      	ldr	r2, [r7, #0]
 81046a0:	429a      	cmp	r2, r3
 81046a2:	d803      	bhi.n	81046ac <HAL_SPI_Transmit+0x240>
 81046a4:	683b      	ldr	r3, [r7, #0]
 81046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81046aa:	d102      	bne.n	81046b2 <HAL_SPI_Transmit+0x246>
 81046ac:	683b      	ldr	r3, [r7, #0]
 81046ae:	2b00      	cmp	r3, #0
 81046b0:	d114      	bne.n	81046dc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81046b2:	68f8      	ldr	r0, [r7, #12]
 81046b4:	f000 fcfc 	bl	81050b0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81046b8:	68fb      	ldr	r3, [r7, #12]
 81046ba:	2200      	movs	r2, #0
 81046bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81046c0:	68fb      	ldr	r3, [r7, #12]
 81046c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81046c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81046ca:	68fb      	ldr	r3, [r7, #12]
 81046cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81046d0:	68fb      	ldr	r3, [r7, #12]
 81046d2:	2201      	movs	r2, #1
 81046d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81046d8:	2303      	movs	r3, #3
 81046da:	e0b1      	b.n	8104840 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81046dc:	68fb      	ldr	r3, [r7, #12]
 81046de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046e2:	b29b      	uxth	r3, r3
 81046e4:	2b00      	cmp	r3, #0
 81046e6:	d19b      	bne.n	8104620 <HAL_SPI_Transmit+0x1b4>
 81046e8:	e084      	b.n	81047f4 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81046ea:	68fb      	ldr	r3, [r7, #12]
 81046ec:	681b      	ldr	r3, [r3, #0]
 81046ee:	695b      	ldr	r3, [r3, #20]
 81046f0:	f003 0302 	and.w	r3, r3, #2
 81046f4:	2b02      	cmp	r3, #2
 81046f6:	d152      	bne.n	810479e <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81046f8:	68fb      	ldr	r3, [r7, #12]
 81046fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046fe:	b29b      	uxth	r3, r3
 8104700:	2b03      	cmp	r3, #3
 8104702:	d918      	bls.n	8104736 <HAL_SPI_Transmit+0x2ca>
 8104704:	68fb      	ldr	r3, [r7, #12]
 8104706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104708:	2b40      	cmp	r3, #64	; 0x40
 810470a:	d914      	bls.n	8104736 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810470c:	68fb      	ldr	r3, [r7, #12]
 810470e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104710:	68fb      	ldr	r3, [r7, #12]
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	6812      	ldr	r2, [r2, #0]
 8104716:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104718:	68fb      	ldr	r3, [r7, #12]
 810471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810471c:	1d1a      	adds	r2, r3, #4
 810471e:	68fb      	ldr	r3, [r7, #12]
 8104720:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8104722:	68fb      	ldr	r3, [r7, #12]
 8104724:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104728:	b29b      	uxth	r3, r3
 810472a:	3b04      	subs	r3, #4
 810472c:	b29a      	uxth	r2, r3
 810472e:	68fb      	ldr	r3, [r7, #12]
 8104730:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104734:	e057      	b.n	81047e6 <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104736:	68fb      	ldr	r3, [r7, #12]
 8104738:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810473c:	b29b      	uxth	r3, r3
 810473e:	2b01      	cmp	r3, #1
 8104740:	d917      	bls.n	8104772 <HAL_SPI_Transmit+0x306>
 8104742:	68fb      	ldr	r3, [r7, #12]
 8104744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104746:	2b00      	cmp	r3, #0
 8104748:	d013      	beq.n	8104772 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810474a:	68fb      	ldr	r3, [r7, #12]
 810474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810474e:	881a      	ldrh	r2, [r3, #0]
 8104750:	69fb      	ldr	r3, [r7, #28]
 8104752:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104758:	1c9a      	adds	r2, r3, #2
 810475a:	68fb      	ldr	r3, [r7, #12]
 810475c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810475e:	68fb      	ldr	r3, [r7, #12]
 8104760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104764:	b29b      	uxth	r3, r3
 8104766:	3b02      	subs	r3, #2
 8104768:	b29a      	uxth	r2, r3
 810476a:	68fb      	ldr	r3, [r7, #12]
 810476c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104770:	e039      	b.n	81047e6 <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8104772:	68fb      	ldr	r3, [r7, #12]
 8104774:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104776:	68fb      	ldr	r3, [r7, #12]
 8104778:	681b      	ldr	r3, [r3, #0]
 810477a:	3320      	adds	r3, #32
 810477c:	7812      	ldrb	r2, [r2, #0]
 810477e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104780:	68fb      	ldr	r3, [r7, #12]
 8104782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104784:	1c5a      	adds	r2, r3, #1
 8104786:	68fb      	ldr	r3, [r7, #12]
 8104788:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810478a:	68fb      	ldr	r3, [r7, #12]
 810478c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104790:	b29b      	uxth	r3, r3
 8104792:	3b01      	subs	r3, #1
 8104794:	b29a      	uxth	r2, r3
 8104796:	68fb      	ldr	r3, [r7, #12]
 8104798:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810479c:	e023      	b.n	81047e6 <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810479e:	f7fd f90d 	bl	81019bc <HAL_GetTick>
 81047a2:	4602      	mov	r2, r0
 81047a4:	697b      	ldr	r3, [r7, #20]
 81047a6:	1ad3      	subs	r3, r2, r3
 81047a8:	683a      	ldr	r2, [r7, #0]
 81047aa:	429a      	cmp	r2, r3
 81047ac:	d803      	bhi.n	81047b6 <HAL_SPI_Transmit+0x34a>
 81047ae:	683b      	ldr	r3, [r7, #0]
 81047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81047b4:	d102      	bne.n	81047bc <HAL_SPI_Transmit+0x350>
 81047b6:	683b      	ldr	r3, [r7, #0]
 81047b8:	2b00      	cmp	r3, #0
 81047ba:	d114      	bne.n	81047e6 <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81047bc:	68f8      	ldr	r0, [r7, #12]
 81047be:	f000 fc77 	bl	81050b0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81047c2:	68fb      	ldr	r3, [r7, #12]
 81047c4:	2200      	movs	r2, #0
 81047c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81047ca:	68fb      	ldr	r3, [r7, #12]
 81047cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81047d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81047d4:	68fb      	ldr	r3, [r7, #12]
 81047d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81047da:	68fb      	ldr	r3, [r7, #12]
 81047dc:	2201      	movs	r2, #1
 81047de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81047e2:	2303      	movs	r3, #3
 81047e4:	e02c      	b.n	8104840 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81047e6:	68fb      	ldr	r3, [r7, #12]
 81047e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81047ec:	b29b      	uxth	r3, r3
 81047ee:	2b00      	cmp	r3, #0
 81047f0:	f47f af7b 	bne.w	81046ea <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81047f4:	683b      	ldr	r3, [r7, #0]
 81047f6:	9300      	str	r3, [sp, #0]
 81047f8:	697b      	ldr	r3, [r7, #20]
 81047fa:	2200      	movs	r2, #0
 81047fc:	2108      	movs	r1, #8
 81047fe:	68f8      	ldr	r0, [r7, #12]
 8104800:	f000 fcf6 	bl	81051f0 <SPI_WaitOnFlagUntilTimeout>
 8104804:	4603      	mov	r3, r0
 8104806:	2b00      	cmp	r3, #0
 8104808:	d007      	beq.n	810481a <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810480a:	68fb      	ldr	r3, [r7, #12]
 810480c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104810:	f043 0220 	orr.w	r2, r3, #32
 8104814:	68fb      	ldr	r3, [r7, #12]
 8104816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810481a:	68f8      	ldr	r0, [r7, #12]
 810481c:	f000 fc48 	bl	81050b0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104820:	68fb      	ldr	r3, [r7, #12]
 8104822:	2200      	movs	r2, #0
 8104824:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104828:	68fb      	ldr	r3, [r7, #12]
 810482a:	2201      	movs	r2, #1
 810482c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104830:	68fb      	ldr	r3, [r7, #12]
 8104832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104836:	2b00      	cmp	r3, #0
 8104838:	d001      	beq.n	810483e <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 810483a:	2301      	movs	r3, #1
 810483c:	e000      	b.n	8104840 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 810483e:	7efb      	ldrb	r3, [r7, #27]
}
 8104840:	4618      	mov	r0, r3
 8104842:	3720      	adds	r7, #32
 8104844:	46bd      	mov	sp, r7
 8104846:	bd80      	pop	{r7, pc}

08104848 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8104848:	b580      	push	{r7, lr}
 810484a:	b08e      	sub	sp, #56	; 0x38
 810484c:	af02      	add	r7, sp, #8
 810484e:	60f8      	str	r0, [r7, #12]
 8104850:	60b9      	str	r1, [r7, #8]
 8104852:	607a      	str	r2, [r7, #4]
 8104854:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104856:	2300      	movs	r3, #0
 8104858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810485c:	68fb      	ldr	r3, [r7, #12]
 810485e:	681b      	ldr	r3, [r3, #0]
 8104860:	3320      	adds	r3, #32
 8104862:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104864:	68fb      	ldr	r3, [r7, #12]
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	3330      	adds	r3, #48	; 0x30
 810486a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 810486c:	68fb      	ldr	r3, [r7, #12]
 810486e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104872:	2b01      	cmp	r3, #1
 8104874:	d101      	bne.n	810487a <HAL_SPI_TransmitReceive+0x32>
 8104876:	2302      	movs	r3, #2
 8104878:	e207      	b.n	8104c8a <HAL_SPI_TransmitReceive+0x442>
 810487a:	68fb      	ldr	r3, [r7, #12]
 810487c:	2201      	movs	r2, #1
 810487e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104882:	f7fd f89b 	bl	81019bc <HAL_GetTick>
 8104886:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8104888:	887b      	ldrh	r3, [r7, #2]
 810488a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 810488c:	887b      	ldrh	r3, [r7, #2]
 810488e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8104890:	68fb      	ldr	r3, [r7, #12]
 8104892:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104896:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8104898:	68fb      	ldr	r3, [r7, #12]
 810489a:	685b      	ldr	r3, [r3, #4]
 810489c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 810489e:	7efb      	ldrb	r3, [r7, #27]
 81048a0:	2b01      	cmp	r3, #1
 81048a2:	d014      	beq.n	81048ce <HAL_SPI_TransmitReceive+0x86>
 81048a4:	697b      	ldr	r3, [r7, #20]
 81048a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81048aa:	d106      	bne.n	81048ba <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81048ac:	68fb      	ldr	r3, [r7, #12]
 81048ae:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 81048b0:	2b00      	cmp	r3, #0
 81048b2:	d102      	bne.n	81048ba <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81048b4:	7efb      	ldrb	r3, [r7, #27]
 81048b6:	2b04      	cmp	r3, #4
 81048b8:	d009      	beq.n	81048ce <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 81048ba:	2302      	movs	r3, #2
 81048bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 81048c0:	68fb      	ldr	r3, [r7, #12]
 81048c2:	2200      	movs	r2, #0
 81048c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81048c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81048cc:	e1dd      	b.n	8104c8a <HAL_SPI_TransmitReceive+0x442>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 81048ce:	68bb      	ldr	r3, [r7, #8]
 81048d0:	2b00      	cmp	r3, #0
 81048d2:	d005      	beq.n	81048e0 <HAL_SPI_TransmitReceive+0x98>
 81048d4:	687b      	ldr	r3, [r7, #4]
 81048d6:	2b00      	cmp	r3, #0
 81048d8:	d002      	beq.n	81048e0 <HAL_SPI_TransmitReceive+0x98>
 81048da:	887b      	ldrh	r3, [r7, #2]
 81048dc:	2b00      	cmp	r3, #0
 81048de:	d109      	bne.n	81048f4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 81048e0:	2301      	movs	r3, #1
 81048e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 81048e6:	68fb      	ldr	r3, [r7, #12]
 81048e8:	2200      	movs	r2, #0
 81048ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81048ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81048f2:	e1ca      	b.n	8104c8a <HAL_SPI_TransmitReceive+0x442>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81048f4:	68fb      	ldr	r3, [r7, #12]
 81048f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81048fa:	b2db      	uxtb	r3, r3
 81048fc:	2b04      	cmp	r3, #4
 81048fe:	d003      	beq.n	8104908 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8104900:	68fb      	ldr	r3, [r7, #12]
 8104902:	2205      	movs	r2, #5
 8104904:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104908:	68fb      	ldr	r3, [r7, #12]
 810490a:	2200      	movs	r2, #0
 810490c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8104910:	68fb      	ldr	r3, [r7, #12]
 8104912:	687a      	ldr	r2, [r7, #4]
 8104914:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8104916:	68fb      	ldr	r3, [r7, #12]
 8104918:	887a      	ldrh	r2, [r7, #2]
 810491a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 810491e:	68fb      	ldr	r3, [r7, #12]
 8104920:	887a      	ldrh	r2, [r7, #2]
 8104922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8104926:	68fb      	ldr	r3, [r7, #12]
 8104928:	68ba      	ldr	r2, [r7, #8]
 810492a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 810492c:	68fb      	ldr	r3, [r7, #12]
 810492e:	887a      	ldrh	r2, [r7, #2]
 8104930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8104934:	68fb      	ldr	r3, [r7, #12]
 8104936:	887a      	ldrh	r2, [r7, #2]
 8104938:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810493c:	68fb      	ldr	r3, [r7, #12]
 810493e:	2200      	movs	r2, #0
 8104940:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8104942:	68fb      	ldr	r3, [r7, #12]
 8104944:	2200      	movs	r2, #0
 8104946:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104948:	68fb      	ldr	r3, [r7, #12]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	685b      	ldr	r3, [r3, #4]
 810494e:	0c1b      	lsrs	r3, r3, #16
 8104950:	041b      	lsls	r3, r3, #16
 8104952:	8879      	ldrh	r1, [r7, #2]
 8104954:	68fa      	ldr	r2, [r7, #12]
 8104956:	6812      	ldr	r2, [r2, #0]
 8104958:	430b      	orrs	r3, r1
 810495a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 810495c:	68fb      	ldr	r3, [r7, #12]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	681a      	ldr	r2, [r3, #0]
 8104962:	68fb      	ldr	r3, [r7, #12]
 8104964:	681b      	ldr	r3, [r3, #0]
 8104966:	f042 0201 	orr.w	r2, r2, #1
 810496a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810496c:	68fb      	ldr	r3, [r7, #12]
 810496e:	685b      	ldr	r3, [r3, #4]
 8104970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104974:	d107      	bne.n	8104986 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104976:	68fb      	ldr	r3, [r7, #12]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	681a      	ldr	r2, [r3, #0]
 810497c:	68fb      	ldr	r3, [r7, #12]
 810497e:	681b      	ldr	r3, [r3, #0]
 8104980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104984:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104986:	68fb      	ldr	r3, [r7, #12]
 8104988:	68db      	ldr	r3, [r3, #12]
 810498a:	2b0f      	cmp	r3, #15
 810498c:	d970      	bls.n	8104a70 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810498e:	e068      	b.n	8104a62 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104990:	68fb      	ldr	r3, [r7, #12]
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	695b      	ldr	r3, [r3, #20]
 8104996:	f003 0302 	and.w	r3, r3, #2
 810499a:	2b02      	cmp	r3, #2
 810499c:	d11a      	bne.n	81049d4 <HAL_SPI_TransmitReceive+0x18c>
 810499e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81049a0:	2b00      	cmp	r3, #0
 81049a2:	d017      	beq.n	81049d4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81049a4:	68fb      	ldr	r3, [r7, #12]
 81049a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	681b      	ldr	r3, [r3, #0]
 81049ac:	6812      	ldr	r2, [r2, #0]
 81049ae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81049b0:	68fb      	ldr	r3, [r7, #12]
 81049b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81049b4:	1d1a      	adds	r2, r3, #4
 81049b6:	68fb      	ldr	r3, [r7, #12]
 81049b8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 81049ba:	68fb      	ldr	r3, [r7, #12]
 81049bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81049c0:	b29b      	uxth	r3, r3
 81049c2:	3b01      	subs	r3, #1
 81049c4:	b29a      	uxth	r2, r3
 81049c6:	68fb      	ldr	r3, [r7, #12]
 81049c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81049cc:	68fb      	ldr	r3, [r7, #12]
 81049ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81049d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 81049d4:	68fb      	ldr	r3, [r7, #12]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	695a      	ldr	r2, [r3, #20]
 81049da:	f248 0308 	movw	r3, #32776	; 0x8008
 81049de:	4013      	ands	r3, r2
 81049e0:	2b00      	cmp	r3, #0
 81049e2:	d01a      	beq.n	8104a1a <HAL_SPI_TransmitReceive+0x1d2>
 81049e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81049e6:	2b00      	cmp	r3, #0
 81049e8:	d017      	beq.n	8104a1a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81049ea:	68fb      	ldr	r3, [r7, #12]
 81049ec:	681a      	ldr	r2, [r3, #0]
 81049ee:	68fb      	ldr	r3, [r7, #12]
 81049f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81049f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81049f4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 81049f6:	68fb      	ldr	r3, [r7, #12]
 81049f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81049fa:	1d1a      	adds	r2, r3, #4
 81049fc:	68fb      	ldr	r3, [r7, #12]
 81049fe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8104a00:	68fb      	ldr	r3, [r7, #12]
 8104a02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104a06:	b29b      	uxth	r3, r3
 8104a08:	3b01      	subs	r3, #1
 8104a0a:	b29a      	uxth	r2, r3
 8104a0c:	68fb      	ldr	r3, [r7, #12]
 8104a0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104a12:	68fb      	ldr	r3, [r7, #12]
 8104a14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104a18:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104a1a:	f7fc ffcf 	bl	81019bc <HAL_GetTick>
 8104a1e:	4602      	mov	r2, r0
 8104a20:	69fb      	ldr	r3, [r7, #28]
 8104a22:	1ad3      	subs	r3, r2, r3
 8104a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104a26:	429a      	cmp	r2, r3
 8104a28:	d803      	bhi.n	8104a32 <HAL_SPI_TransmitReceive+0x1ea>
 8104a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104a30:	d102      	bne.n	8104a38 <HAL_SPI_TransmitReceive+0x1f0>
 8104a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104a34:	2b00      	cmp	r3, #0
 8104a36:	d114      	bne.n	8104a62 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104a38:	68f8      	ldr	r0, [r7, #12]
 8104a3a:	f000 fb39 	bl	81050b0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104a3e:	68fb      	ldr	r3, [r7, #12]
 8104a40:	2200      	movs	r2, #0
 8104a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104a46:	68fb      	ldr	r3, [r7, #12]
 8104a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104a4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104a50:	68fb      	ldr	r3, [r7, #12]
 8104a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	2201      	movs	r2, #1
 8104a5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104a5e:	2303      	movs	r3, #3
 8104a60:	e113      	b.n	8104c8a <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104a62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104a64:	2b00      	cmp	r3, #0
 8104a66:	d193      	bne.n	8104990 <HAL_SPI_TransmitReceive+0x148>
 8104a68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104a6a:	2b00      	cmp	r3, #0
 8104a6c:	d190      	bne.n	8104990 <HAL_SPI_TransmitReceive+0x148>
 8104a6e:	e0e5      	b.n	8104c3c <HAL_SPI_TransmitReceive+0x3f4>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104a70:	68fb      	ldr	r3, [r7, #12]
 8104a72:	68db      	ldr	r3, [r3, #12]
 8104a74:	2b07      	cmp	r3, #7
 8104a76:	f240 80db 	bls.w	8104c30 <HAL_SPI_TransmitReceive+0x3e8>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104a7a:	e066      	b.n	8104b4a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8104a7c:	68fb      	ldr	r3, [r7, #12]
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	695b      	ldr	r3, [r3, #20]
 8104a82:	f003 0302 	and.w	r3, r3, #2
 8104a86:	2b02      	cmp	r3, #2
 8104a88:	d119      	bne.n	8104abe <HAL_SPI_TransmitReceive+0x276>
 8104a8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104a8c:	2b00      	cmp	r3, #0
 8104a8e:	d016      	beq.n	8104abe <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104a90:	68fb      	ldr	r3, [r7, #12]
 8104a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a94:	881a      	ldrh	r2, [r3, #0]
 8104a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104a98:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8104a9a:	68fb      	ldr	r3, [r7, #12]
 8104a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a9e:	1c9a      	adds	r2, r3, #2
 8104aa0:	68fb      	ldr	r3, [r7, #12]
 8104aa2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8104aa4:	68fb      	ldr	r3, [r7, #12]
 8104aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104aaa:	b29b      	uxth	r3, r3
 8104aac:	3b01      	subs	r3, #1
 8104aae:	b29a      	uxth	r2, r3
 8104ab0:	68fb      	ldr	r3, [r7, #12]
 8104ab2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104ab6:	68fb      	ldr	r3, [r7, #12]
 8104ab8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104abc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8104abe:	68fb      	ldr	r3, [r7, #12]
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	695b      	ldr	r3, [r3, #20]
 8104ac4:	f003 0301 	and.w	r3, r3, #1
 8104ac8:	2b01      	cmp	r3, #1
 8104aca:	d11a      	bne.n	8104b02 <HAL_SPI_TransmitReceive+0x2ba>
 8104acc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104ace:	2b00      	cmp	r3, #0
 8104ad0:	d017      	beq.n	8104b02 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104ad2:	68fb      	ldr	r3, [r7, #12]
 8104ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104ad6:	6a3a      	ldr	r2, [r7, #32]
 8104ad8:	8812      	ldrh	r2, [r2, #0]
 8104ada:	b292      	uxth	r2, r2
 8104adc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8104ade:	68fb      	ldr	r3, [r7, #12]
 8104ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104ae2:	1c9a      	adds	r2, r3, #2
 8104ae4:	68fb      	ldr	r3, [r7, #12]
 8104ae6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104ae8:	68fb      	ldr	r3, [r7, #12]
 8104aea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104aee:	b29b      	uxth	r3, r3
 8104af0:	3b01      	subs	r3, #1
 8104af2:	b29a      	uxth	r2, r3
 8104af4:	68fb      	ldr	r3, [r7, #12]
 8104af6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104afa:	68fb      	ldr	r3, [r7, #12]
 8104afc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104b00:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104b02:	f7fc ff5b 	bl	81019bc <HAL_GetTick>
 8104b06:	4602      	mov	r2, r0
 8104b08:	69fb      	ldr	r3, [r7, #28]
 8104b0a:	1ad3      	subs	r3, r2, r3
 8104b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104b0e:	429a      	cmp	r2, r3
 8104b10:	d803      	bhi.n	8104b1a <HAL_SPI_TransmitReceive+0x2d2>
 8104b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104b18:	d102      	bne.n	8104b20 <HAL_SPI_TransmitReceive+0x2d8>
 8104b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b1c:	2b00      	cmp	r3, #0
 8104b1e:	d114      	bne.n	8104b4a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104b20:	68f8      	ldr	r0, [r7, #12]
 8104b22:	f000 fac5 	bl	81050b0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104b26:	68fb      	ldr	r3, [r7, #12]
 8104b28:	2200      	movs	r2, #0
 8104b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104b2e:	68fb      	ldr	r3, [r7, #12]
 8104b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104b34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104b38:	68fb      	ldr	r3, [r7, #12]
 8104b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104b3e:	68fb      	ldr	r3, [r7, #12]
 8104b40:	2201      	movs	r2, #1
 8104b42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104b46:	2303      	movs	r3, #3
 8104b48:	e09f      	b.n	8104c8a <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104b4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104b4c:	2b00      	cmp	r3, #0
 8104b4e:	d195      	bne.n	8104a7c <HAL_SPI_TransmitReceive+0x234>
 8104b50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104b52:	2b00      	cmp	r3, #0
 8104b54:	d192      	bne.n	8104a7c <HAL_SPI_TransmitReceive+0x234>
 8104b56:	e071      	b.n	8104c3c <HAL_SPI_TransmitReceive+0x3f4>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104b58:	68fb      	ldr	r3, [r7, #12]
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	695b      	ldr	r3, [r3, #20]
 8104b5e:	f003 0302 	and.w	r3, r3, #2
 8104b62:	2b02      	cmp	r3, #2
 8104b64:	d11b      	bne.n	8104b9e <HAL_SPI_TransmitReceive+0x356>
 8104b66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104b68:	2b00      	cmp	r3, #0
 8104b6a:	d018      	beq.n	8104b9e <HAL_SPI_TransmitReceive+0x356>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8104b6c:	68fb      	ldr	r3, [r7, #12]
 8104b6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104b70:	68fb      	ldr	r3, [r7, #12]
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	3320      	adds	r3, #32
 8104b76:	7812      	ldrb	r2, [r2, #0]
 8104b78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8104b7a:	68fb      	ldr	r3, [r7, #12]
 8104b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104b7e:	1c5a      	adds	r2, r3, #1
 8104b80:	68fb      	ldr	r3, [r7, #12]
 8104b82:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8104b84:	68fb      	ldr	r3, [r7, #12]
 8104b86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104b8a:	b29b      	uxth	r3, r3
 8104b8c:	3b01      	subs	r3, #1
 8104b8e:	b29a      	uxth	r2, r3
 8104b90:	68fb      	ldr	r3, [r7, #12]
 8104b92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104b96:	68fb      	ldr	r3, [r7, #12]
 8104b98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104b9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8104b9e:	68fb      	ldr	r3, [r7, #12]
 8104ba0:	681b      	ldr	r3, [r3, #0]
 8104ba2:	695b      	ldr	r3, [r3, #20]
 8104ba4:	f003 0301 	and.w	r3, r3, #1
 8104ba8:	2b01      	cmp	r3, #1
 8104baa:	d11d      	bne.n	8104be8 <HAL_SPI_TransmitReceive+0x3a0>
 8104bac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104bae:	2b00      	cmp	r3, #0
 8104bb0:	d01a      	beq.n	8104be8 <HAL_SPI_TransmitReceive+0x3a0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104bb2:	68fb      	ldr	r3, [r7, #12]
 8104bb4:	681b      	ldr	r3, [r3, #0]
 8104bb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104bba:	68fb      	ldr	r3, [r7, #12]
 8104bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104bbe:	7812      	ldrb	r2, [r2, #0]
 8104bc0:	b2d2      	uxtb	r2, r2
 8104bc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8104bc4:	68fb      	ldr	r3, [r7, #12]
 8104bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104bc8:	1c5a      	adds	r2, r3, #1
 8104bca:	68fb      	ldr	r3, [r7, #12]
 8104bcc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104bce:	68fb      	ldr	r3, [r7, #12]
 8104bd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104bd4:	b29b      	uxth	r3, r3
 8104bd6:	3b01      	subs	r3, #1
 8104bd8:	b29a      	uxth	r2, r3
 8104bda:	68fb      	ldr	r3, [r7, #12]
 8104bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104be0:	68fb      	ldr	r3, [r7, #12]
 8104be2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104be6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104be8:	f7fc fee8 	bl	81019bc <HAL_GetTick>
 8104bec:	4602      	mov	r2, r0
 8104bee:	69fb      	ldr	r3, [r7, #28]
 8104bf0:	1ad3      	subs	r3, r2, r3
 8104bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104bf4:	429a      	cmp	r2, r3
 8104bf6:	d803      	bhi.n	8104c00 <HAL_SPI_TransmitReceive+0x3b8>
 8104bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104bfe:	d102      	bne.n	8104c06 <HAL_SPI_TransmitReceive+0x3be>
 8104c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c02:	2b00      	cmp	r3, #0
 8104c04:	d114      	bne.n	8104c30 <HAL_SPI_TransmitReceive+0x3e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104c06:	68f8      	ldr	r0, [r7, #12]
 8104c08:	f000 fa52 	bl	81050b0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104c0c:	68fb      	ldr	r3, [r7, #12]
 8104c0e:	2200      	movs	r2, #0
 8104c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104c14:	68fb      	ldr	r3, [r7, #12]
 8104c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104c1e:	68fb      	ldr	r3, [r7, #12]
 8104c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104c24:	68fb      	ldr	r3, [r7, #12]
 8104c26:	2201      	movs	r2, #1
 8104c28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104c2c:	2303      	movs	r3, #3
 8104c2e:	e02c      	b.n	8104c8a <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104c30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104c32:	2b00      	cmp	r3, #0
 8104c34:	d190      	bne.n	8104b58 <HAL_SPI_TransmitReceive+0x310>
 8104c36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104c38:	2b00      	cmp	r3, #0
 8104c3a:	d18d      	bne.n	8104b58 <HAL_SPI_TransmitReceive+0x310>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8104c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c3e:	9300      	str	r3, [sp, #0]
 8104c40:	69fb      	ldr	r3, [r7, #28]
 8104c42:	2200      	movs	r2, #0
 8104c44:	2108      	movs	r1, #8
 8104c46:	68f8      	ldr	r0, [r7, #12]
 8104c48:	f000 fad2 	bl	81051f0 <SPI_WaitOnFlagUntilTimeout>
 8104c4c:	4603      	mov	r3, r0
 8104c4e:	2b00      	cmp	r3, #0
 8104c50:	d007      	beq.n	8104c62 <HAL_SPI_TransmitReceive+0x41a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8104c52:	68fb      	ldr	r3, [r7, #12]
 8104c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c58:	f043 0220 	orr.w	r2, r3, #32
 8104c5c:	68fb      	ldr	r3, [r7, #12]
 8104c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104c62:	68f8      	ldr	r0, [r7, #12]
 8104c64:	f000 fa24 	bl	81050b0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104c68:	68fb      	ldr	r3, [r7, #12]
 8104c6a:	2200      	movs	r2, #0
 8104c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104c70:	68fb      	ldr	r3, [r7, #12]
 8104c72:	2201      	movs	r2, #1
 8104c74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104c78:	68fb      	ldr	r3, [r7, #12]
 8104c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c7e:	2b00      	cmp	r3, #0
 8104c80:	d001      	beq.n	8104c86 <HAL_SPI_TransmitReceive+0x43e>
  {
    return HAL_ERROR;
 8104c82:	2301      	movs	r3, #1
 8104c84:	e001      	b.n	8104c8a <HAL_SPI_TransmitReceive+0x442>
  }
  return errorcode;
 8104c86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8104c8a:	4618      	mov	r0, r3
 8104c8c:	3730      	adds	r7, #48	; 0x30
 8104c8e:	46bd      	mov	sp, r7
 8104c90:	bd80      	pop	{r7, pc}
	...

08104c94 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8104c94:	b580      	push	{r7, lr}
 8104c96:	b08a      	sub	sp, #40	; 0x28
 8104c98:	af00      	add	r7, sp, #0
 8104c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	681b      	ldr	r3, [r3, #0]
 8104ca0:	691b      	ldr	r3, [r3, #16]
 8104ca2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	681b      	ldr	r3, [r3, #0]
 8104ca8:	695b      	ldr	r3, [r3, #20]
 8104caa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8104cac:	6a3a      	ldr	r2, [r7, #32]
 8104cae:	69fb      	ldr	r3, [r7, #28]
 8104cb0:	4013      	ands	r3, r2
 8104cb2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	689b      	ldr	r3, [r3, #8]
 8104cba:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8104cbc:	2300      	movs	r3, #0
 8104cbe:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8104cc0:	687b      	ldr	r3, [r7, #4]
 8104cc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104cc6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	681b      	ldr	r3, [r3, #0]
 8104ccc:	3330      	adds	r3, #48	; 0x30
 8104cce:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8104cd0:	69bb      	ldr	r3, [r7, #24]
 8104cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104cd6:	2b00      	cmp	r3, #0
 8104cd8:	d113      	bne.n	8104d02 <HAL_SPI_IRQHandler+0x6e>
 8104cda:	69bb      	ldr	r3, [r7, #24]
 8104cdc:	f003 0320 	and.w	r3, r3, #32
 8104ce0:	2b00      	cmp	r3, #0
 8104ce2:	d10e      	bne.n	8104d02 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8104ce4:	69bb      	ldr	r3, [r7, #24]
 8104ce6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8104cea:	2b00      	cmp	r3, #0
 8104cec:	d009      	beq.n	8104d02 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104cf2:	6878      	ldr	r0, [r7, #4]
 8104cf4:	4798      	blx	r3
    hspi->RxISR(hspi);
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104cfa:	6878      	ldr	r0, [r7, #4]
 8104cfc:	4798      	blx	r3
    handled = 1UL;
 8104cfe:	2301      	movs	r3, #1
 8104d00:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8104d02:	69bb      	ldr	r3, [r7, #24]
 8104d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104d08:	2b00      	cmp	r3, #0
 8104d0a:	d10f      	bne.n	8104d2c <HAL_SPI_IRQHandler+0x98>
 8104d0c:	69bb      	ldr	r3, [r7, #24]
 8104d0e:	f003 0301 	and.w	r3, r3, #1
 8104d12:	2b00      	cmp	r3, #0
 8104d14:	d00a      	beq.n	8104d2c <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8104d16:	69bb      	ldr	r3, [r7, #24]
 8104d18:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8104d1c:	2b00      	cmp	r3, #0
 8104d1e:	d105      	bne.n	8104d2c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104d24:	6878      	ldr	r0, [r7, #4]
 8104d26:	4798      	blx	r3
    handled = 1UL;
 8104d28:	2301      	movs	r3, #1
 8104d2a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8104d2c:	69bb      	ldr	r3, [r7, #24]
 8104d2e:	f003 0320 	and.w	r3, r3, #32
 8104d32:	2b00      	cmp	r3, #0
 8104d34:	d10f      	bne.n	8104d56 <HAL_SPI_IRQHandler+0xc2>
 8104d36:	69bb      	ldr	r3, [r7, #24]
 8104d38:	f003 0302 	and.w	r3, r3, #2
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	d00a      	beq.n	8104d56 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8104d40:	69bb      	ldr	r3, [r7, #24]
 8104d42:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8104d46:	2b00      	cmp	r3, #0
 8104d48:	d105      	bne.n	8104d56 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104d4e:	6878      	ldr	r0, [r7, #4]
 8104d50:	4798      	blx	r3
    handled = 1UL;
 8104d52:	2301      	movs	r3, #1
 8104d54:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8104d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104d58:	2b00      	cmp	r3, #0
 8104d5a:	f040 815c 	bne.w	8105016 <HAL_SPI_IRQHandler+0x382>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8104d5e:	69bb      	ldr	r3, [r7, #24]
 8104d60:	f003 0308 	and.w	r3, r3, #8
 8104d64:	2b00      	cmp	r3, #0
 8104d66:	f000 808b 	beq.w	8104e80 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8104d6a:	687b      	ldr	r3, [r7, #4]
 8104d6c:	681b      	ldr	r3, [r3, #0]
 8104d6e:	699a      	ldr	r2, [r3, #24]
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	f042 0208 	orr.w	r2, r2, #8
 8104d78:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	681b      	ldr	r3, [r3, #0]
 8104d7e:	699a      	ldr	r2, [r3, #24]
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	681b      	ldr	r3, [r3, #0]
 8104d84:	f042 0210 	orr.w	r2, r2, #16
 8104d88:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	681b      	ldr	r3, [r3, #0]
 8104d8e:	699a      	ldr	r2, [r3, #24]
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104d98:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	681b      	ldr	r3, [r3, #0]
 8104d9e:	691a      	ldr	r2, [r3, #16]
 8104da0:	687b      	ldr	r3, [r7, #4]
 8104da2:	681b      	ldr	r3, [r3, #0]
 8104da4:	f022 0208 	bic.w	r2, r2, #8
 8104da8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	681b      	ldr	r3, [r3, #0]
 8104dae:	689b      	ldr	r3, [r3, #8]
 8104db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8104db4:	2b00      	cmp	r3, #0
 8104db6:	d13d      	bne.n	8104e34 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8104db8:	e036      	b.n	8104e28 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	68db      	ldr	r3, [r3, #12]
 8104dbe:	2b0f      	cmp	r3, #15
 8104dc0:	d90b      	bls.n	8104dda <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104dc2:	687b      	ldr	r3, [r7, #4]
 8104dc4:	681a      	ldr	r2, [r3, #0]
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104dca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104dcc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104dce:	687b      	ldr	r3, [r7, #4]
 8104dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104dd2:	1d1a      	adds	r2, r3, #4
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	665a      	str	r2, [r3, #100]	; 0x64
 8104dd8:	e01d      	b.n	8104e16 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104dda:	687b      	ldr	r3, [r7, #4]
 8104ddc:	68db      	ldr	r3, [r3, #12]
 8104dde:	2b07      	cmp	r3, #7
 8104de0:	d90b      	bls.n	8104dfa <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104de2:	687b      	ldr	r3, [r7, #4]
 8104de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104de6:	68fa      	ldr	r2, [r7, #12]
 8104de8:	8812      	ldrh	r2, [r2, #0]
 8104dea:	b292      	uxth	r2, r2
 8104dec:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104df2:	1c9a      	adds	r2, r3, #2
 8104df4:	687b      	ldr	r3, [r7, #4]
 8104df6:	665a      	str	r2, [r3, #100]	; 0x64
 8104df8:	e00d      	b.n	8104e16 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104e02:	687b      	ldr	r3, [r7, #4]
 8104e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104e06:	7812      	ldrb	r2, [r2, #0]
 8104e08:	b2d2      	uxtb	r2, r2
 8104e0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104e0c:	687b      	ldr	r3, [r7, #4]
 8104e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104e10:	1c5a      	adds	r2, r3, #1
 8104e12:	687b      	ldr	r3, [r7, #4]
 8104e14:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8104e16:	687b      	ldr	r3, [r7, #4]
 8104e18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104e1c:	b29b      	uxth	r3, r3
 8104e1e:	3b01      	subs	r3, #1
 8104e20:	b29a      	uxth	r2, r3
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104e2e:	b29b      	uxth	r3, r3
 8104e30:	2b00      	cmp	r3, #0
 8104e32:	d1c2      	bne.n	8104dba <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8104e34:	6878      	ldr	r0, [r7, #4]
 8104e36:	f000 f93b 	bl	81050b0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	2201      	movs	r2, #1
 8104e3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	d003      	beq.n	8104e54 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8104e4c:	6878      	ldr	r0, [r7, #4]
 8104e4e:	f000 f90b 	bl	8105068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8104e52:	e0e5      	b.n	8105020 <HAL_SPI_IRQHandler+0x38c>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8104e54:	7cfb      	ldrb	r3, [r7, #19]
 8104e56:	2b05      	cmp	r3, #5
 8104e58:	d103      	bne.n	8104e62 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8104e5a:	6878      	ldr	r0, [r7, #4]
 8104e5c:	f000 f8fa 	bl	8105054 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8104e60:	e0db      	b.n	810501a <HAL_SPI_IRQHandler+0x386>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8104e62:	7cfb      	ldrb	r3, [r7, #19]
 8104e64:	2b04      	cmp	r3, #4
 8104e66:	d103      	bne.n	8104e70 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8104e68:	6878      	ldr	r0, [r7, #4]
 8104e6a:	f000 f8e9 	bl	8105040 <HAL_SPI_RxCpltCallback>
    return;
 8104e6e:	e0d4      	b.n	810501a <HAL_SPI_IRQHandler+0x386>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8104e70:	7cfb      	ldrb	r3, [r7, #19]
 8104e72:	2b03      	cmp	r3, #3
 8104e74:	f040 80d1 	bne.w	810501a <HAL_SPI_IRQHandler+0x386>
      HAL_SPI_TxCpltCallback(hspi);
 8104e78:	6878      	ldr	r0, [r7, #4]
 8104e7a:	f000 f8d7 	bl	810502c <HAL_SPI_TxCpltCallback>
    return;
 8104e7e:	e0cc      	b.n	810501a <HAL_SPI_IRQHandler+0x386>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8104e80:	69fb      	ldr	r3, [r7, #28]
 8104e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104e86:	2b00      	cmp	r3, #0
 8104e88:	d00d      	beq.n	8104ea6 <HAL_SPI_IRQHandler+0x212>
 8104e8a:	6a3b      	ldr	r3, [r7, #32]
 8104e8c:	f003 0308 	and.w	r3, r3, #8
 8104e90:	2b00      	cmp	r3, #0
 8104e92:	d008      	beq.n	8104ea6 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	681b      	ldr	r3, [r3, #0]
 8104e98:	699a      	ldr	r2, [r3, #24]
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104ea2:	619a      	str	r2, [r3, #24]

    return;
 8104ea4:	e0bc      	b.n	8105020 <HAL_SPI_IRQHandler+0x38c>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8104ea6:	69bb      	ldr	r3, [r7, #24]
 8104ea8:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8104eac:	2b00      	cmp	r3, #0
 8104eae:	f000 80b7 	beq.w	8105020 <HAL_SPI_IRQHandler+0x38c>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8104eb2:	69bb      	ldr	r3, [r7, #24]
 8104eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104eb8:	2b00      	cmp	r3, #0
 8104eba:	d00f      	beq.n	8104edc <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104ec2:	f043 0204 	orr.w	r2, r3, #4
 8104ec6:	687b      	ldr	r3, [r7, #4]
 8104ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	681b      	ldr	r3, [r3, #0]
 8104ed0:	699a      	ldr	r2, [r3, #24]
 8104ed2:	687b      	ldr	r3, [r7, #4]
 8104ed4:	681b      	ldr	r3, [r3, #0]
 8104ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8104eda:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8104edc:	69bb      	ldr	r3, [r7, #24]
 8104ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104ee2:	2b00      	cmp	r3, #0
 8104ee4:	d00f      	beq.n	8104f06 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104eec:	f043 0201 	orr.w	r2, r3, #1
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8104ef6:	687b      	ldr	r3, [r7, #4]
 8104ef8:	681b      	ldr	r3, [r3, #0]
 8104efa:	699a      	ldr	r2, [r3, #24]
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	681b      	ldr	r3, [r3, #0]
 8104f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104f04:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8104f06:	69bb      	ldr	r3, [r7, #24]
 8104f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104f0c:	2b00      	cmp	r3, #0
 8104f0e:	d00f      	beq.n	8104f30 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104f16:	f043 0208 	orr.w	r2, r3, #8
 8104f1a:	687b      	ldr	r3, [r7, #4]
 8104f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	699a      	ldr	r2, [r3, #24]
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	681b      	ldr	r3, [r3, #0]
 8104f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104f2e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8104f30:	69bb      	ldr	r3, [r7, #24]
 8104f32:	f003 0320 	and.w	r3, r3, #32
 8104f36:	2b00      	cmp	r3, #0
 8104f38:	d00f      	beq.n	8104f5a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104f40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104f44:	687b      	ldr	r3, [r7, #4]
 8104f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8104f4a:	687b      	ldr	r3, [r7, #4]
 8104f4c:	681b      	ldr	r3, [r3, #0]
 8104f4e:	699a      	ldr	r2, [r3, #24]
 8104f50:	687b      	ldr	r3, [r7, #4]
 8104f52:	681b      	ldr	r3, [r3, #0]
 8104f54:	f042 0220 	orr.w	r2, r2, #32
 8104f58:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104f60:	2b00      	cmp	r3, #0
 8104f62:	d05c      	beq.n	810501e <HAL_SPI_IRQHandler+0x38a>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	681b      	ldr	r3, [r3, #0]
 8104f68:	681a      	ldr	r2, [r3, #0]
 8104f6a:	687b      	ldr	r3, [r7, #4]
 8104f6c:	681b      	ldr	r3, [r3, #0]
 8104f6e:	f022 0201 	bic.w	r2, r2, #1
 8104f72:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	681b      	ldr	r3, [r3, #0]
 8104f78:	691b      	ldr	r3, [r3, #16]
 8104f7a:	687a      	ldr	r2, [r7, #4]
 8104f7c:	6812      	ldr	r2, [r2, #0]
 8104f7e:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8104f82:	f023 0303 	bic.w	r3, r3, #3
 8104f86:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8104f88:	697b      	ldr	r3, [r7, #20]
 8104f8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8104f8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8104f92:	d138      	bne.n	8105006 <HAL_SPI_IRQHandler+0x372>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	689a      	ldr	r2, [r3, #8]
 8104f9a:	687b      	ldr	r3, [r7, #4]
 8104f9c:	681b      	ldr	r3, [r3, #0]
 8104f9e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8104fa2:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104fa8:	2b00      	cmp	r3, #0
 8104faa:	d013      	beq.n	8104fd4 <HAL_SPI_IRQHandler+0x340>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8104fac:	687b      	ldr	r3, [r7, #4]
 8104fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104fb0:	4a1d      	ldr	r2, [pc, #116]	; (8105028 <HAL_SPI_IRQHandler+0x394>)
 8104fb2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104fb8:	4618      	mov	r0, r3
 8104fba:	f7fd f9ad 	bl	8102318 <HAL_DMA_Abort_IT>
 8104fbe:	4603      	mov	r3, r0
 8104fc0:	2b00      	cmp	r3, #0
 8104fc2:	d007      	beq.n	8104fd4 <HAL_SPI_IRQHandler+0x340>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8104fc4:	687b      	ldr	r3, [r7, #4]
 8104fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104fca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104fd8:	2b00      	cmp	r3, #0
 8104fda:	d020      	beq.n	810501e <HAL_SPI_IRQHandler+0x38a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104fe0:	4a11      	ldr	r2, [pc, #68]	; (8105028 <HAL_SPI_IRQHandler+0x394>)
 8104fe2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8104fe4:	687b      	ldr	r3, [r7, #4]
 8104fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104fe8:	4618      	mov	r0, r3
 8104fea:	f7fd f995 	bl	8102318 <HAL_DMA_Abort_IT>
 8104fee:	4603      	mov	r3, r0
 8104ff0:	2b00      	cmp	r3, #0
 8104ff2:	d014      	beq.n	810501e <HAL_SPI_IRQHandler+0x38a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104ffa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8104ffe:	687b      	ldr	r3, [r7, #4]
 8105000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8105004:	e00b      	b.n	810501e <HAL_SPI_IRQHandler+0x38a>
        hspi->State = HAL_SPI_STATE_READY;
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	2201      	movs	r2, #1
 810500a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810500e:	6878      	ldr	r0, [r7, #4]
 8105010:	f000 f82a 	bl	8105068 <HAL_SPI_ErrorCallback>
    return;
 8105014:	e003      	b.n	810501e <HAL_SPI_IRQHandler+0x38a>
    return;
 8105016:	bf00      	nop
 8105018:	e002      	b.n	8105020 <HAL_SPI_IRQHandler+0x38c>
    return;
 810501a:	bf00      	nop
 810501c:	e000      	b.n	8105020 <HAL_SPI_IRQHandler+0x38c>
    return;
 810501e:	bf00      	nop
  }
}
 8105020:	3728      	adds	r7, #40	; 0x28
 8105022:	46bd      	mov	sp, r7
 8105024:	bd80      	pop	{r7, pc}
 8105026:	bf00      	nop
 8105028:	0810507d 	.word	0x0810507d

0810502c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810502c:	b480      	push	{r7}
 810502e:	b083      	sub	sp, #12
 8105030:	af00      	add	r7, sp, #0
 8105032:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8105034:	bf00      	nop
 8105036:	370c      	adds	r7, #12
 8105038:	46bd      	mov	sp, r7
 810503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810503e:	4770      	bx	lr

08105040 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8105040:	b480      	push	{r7}
 8105042:	b083      	sub	sp, #12
 8105044:	af00      	add	r7, sp, #0
 8105046:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8105048:	bf00      	nop
 810504a:	370c      	adds	r7, #12
 810504c:	46bd      	mov	sp, r7
 810504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105052:	4770      	bx	lr

08105054 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8105054:	b480      	push	{r7}
 8105056:	b083      	sub	sp, #12
 8105058:	af00      	add	r7, sp, #0
 810505a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 810505c:	bf00      	nop
 810505e:	370c      	adds	r7, #12
 8105060:	46bd      	mov	sp, r7
 8105062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105066:	4770      	bx	lr

08105068 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8105068:	b480      	push	{r7}
 810506a:	b083      	sub	sp, #12
 810506c:	af00      	add	r7, sp, #0
 810506e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8105070:	bf00      	nop
 8105072:	370c      	adds	r7, #12
 8105074:	46bd      	mov	sp, r7
 8105076:	f85d 7b04 	ldr.w	r7, [sp], #4
 810507a:	4770      	bx	lr

0810507c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810507c:	b580      	push	{r7, lr}
 810507e:	b084      	sub	sp, #16
 8105080:	af00      	add	r7, sp, #0
 8105082:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8105084:	687b      	ldr	r3, [r7, #4]
 8105086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105088:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810508a:	68fb      	ldr	r3, [r7, #12]
 810508c:	2200      	movs	r2, #0
 810508e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8105092:	68fb      	ldr	r3, [r7, #12]
 8105094:	2200      	movs	r2, #0
 8105096:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810509a:	68fb      	ldr	r3, [r7, #12]
 810509c:	2201      	movs	r2, #1
 810509e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 81050a2:	68f8      	ldr	r0, [r7, #12]
 81050a4:	f7ff ffe0 	bl	8105068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 81050a8:	bf00      	nop
 81050aa:	3710      	adds	r7, #16
 81050ac:	46bd      	mov	sp, r7
 81050ae:	bd80      	pop	{r7, pc}

081050b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 81050b0:	b480      	push	{r7}
 81050b2:	b085      	sub	sp, #20
 81050b4:	af00      	add	r7, sp, #0
 81050b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81050b8:	687b      	ldr	r3, [r7, #4]
 81050ba:	681b      	ldr	r3, [r3, #0]
 81050bc:	695b      	ldr	r3, [r3, #20]
 81050be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81050c0:	687b      	ldr	r3, [r7, #4]
 81050c2:	681b      	ldr	r3, [r3, #0]
 81050c4:	699a      	ldr	r2, [r3, #24]
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	681b      	ldr	r3, [r3, #0]
 81050ca:	f042 0208 	orr.w	r2, r2, #8
 81050ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	681b      	ldr	r3, [r3, #0]
 81050d4:	699a      	ldr	r2, [r3, #24]
 81050d6:	687b      	ldr	r3, [r7, #4]
 81050d8:	681b      	ldr	r3, [r3, #0]
 81050da:	f042 0210 	orr.w	r2, r2, #16
 81050de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81050e0:	687b      	ldr	r3, [r7, #4]
 81050e2:	681b      	ldr	r3, [r3, #0]
 81050e4:	681a      	ldr	r2, [r3, #0]
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	681b      	ldr	r3, [r3, #0]
 81050ea:	f022 0201 	bic.w	r2, r2, #1
 81050ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 81050f0:	687b      	ldr	r3, [r7, #4]
 81050f2:	681b      	ldr	r3, [r3, #0]
 81050f4:	691b      	ldr	r3, [r3, #16]
 81050f6:	687a      	ldr	r2, [r7, #4]
 81050f8:	6812      	ldr	r2, [r2, #0]
 81050fa:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 81050fe:	f023 0303 	bic.w	r3, r3, #3
 8105102:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	681b      	ldr	r3, [r3, #0]
 8105108:	689a      	ldr	r2, [r3, #8]
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8105112:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810511a:	b2db      	uxtb	r3, r3
 810511c:	2b04      	cmp	r3, #4
 810511e:	d014      	beq.n	810514a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8105120:	68fb      	ldr	r3, [r7, #12]
 8105122:	f003 0320 	and.w	r3, r3, #32
 8105126:	2b00      	cmp	r3, #0
 8105128:	d00f      	beq.n	810514a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105130:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810513a:	687b      	ldr	r3, [r7, #4]
 810513c:	681b      	ldr	r3, [r3, #0]
 810513e:	699a      	ldr	r2, [r3, #24]
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	681b      	ldr	r3, [r3, #0]
 8105144:	f042 0220 	orr.w	r2, r2, #32
 8105148:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810514a:	687b      	ldr	r3, [r7, #4]
 810514c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105150:	b2db      	uxtb	r3, r3
 8105152:	2b03      	cmp	r3, #3
 8105154:	d014      	beq.n	8105180 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8105156:	68fb      	ldr	r3, [r7, #12]
 8105158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810515c:	2b00      	cmp	r3, #0
 810515e:	d00f      	beq.n	8105180 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105166:	f043 0204 	orr.w	r2, r3, #4
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	699a      	ldr	r2, [r3, #24]
 8105176:	687b      	ldr	r3, [r7, #4]
 8105178:	681b      	ldr	r3, [r3, #0]
 810517a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810517e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8105180:	68fb      	ldr	r3, [r7, #12]
 8105182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105186:	2b00      	cmp	r3, #0
 8105188:	d00f      	beq.n	81051aa <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810518a:	687b      	ldr	r3, [r7, #4]
 810518c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105190:	f043 0201 	orr.w	r2, r3, #1
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	699a      	ldr	r2, [r3, #24]
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81051a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 81051aa:	68fb      	ldr	r3, [r7, #12]
 81051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81051b0:	2b00      	cmp	r3, #0
 81051b2:	d00f      	beq.n	81051d4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81051ba:	f043 0208 	orr.w	r2, r3, #8
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81051c4:	687b      	ldr	r3, [r7, #4]
 81051c6:	681b      	ldr	r3, [r3, #0]
 81051c8:	699a      	ldr	r2, [r3, #24]
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	681b      	ldr	r3, [r3, #0]
 81051ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81051d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	2200      	movs	r2, #0
 81051d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	2200      	movs	r2, #0
 81051e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 81051e4:	bf00      	nop
 81051e6:	3714      	adds	r7, #20
 81051e8:	46bd      	mov	sp, r7
 81051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051ee:	4770      	bx	lr

081051f0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 81051f0:	b580      	push	{r7, lr}
 81051f2:	b084      	sub	sp, #16
 81051f4:	af00      	add	r7, sp, #0
 81051f6:	60f8      	str	r0, [r7, #12]
 81051f8:	60b9      	str	r1, [r7, #8]
 81051fa:	603b      	str	r3, [r7, #0]
 81051fc:	4613      	mov	r3, r2
 81051fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8105200:	e010      	b.n	8105224 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105202:	f7fc fbdb 	bl	81019bc <HAL_GetTick>
 8105206:	4602      	mov	r2, r0
 8105208:	683b      	ldr	r3, [r7, #0]
 810520a:	1ad3      	subs	r3, r2, r3
 810520c:	69ba      	ldr	r2, [r7, #24]
 810520e:	429a      	cmp	r2, r3
 8105210:	d803      	bhi.n	810521a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8105212:	69bb      	ldr	r3, [r7, #24]
 8105214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105218:	d102      	bne.n	8105220 <SPI_WaitOnFlagUntilTimeout+0x30>
 810521a:	69bb      	ldr	r3, [r7, #24]
 810521c:	2b00      	cmp	r3, #0
 810521e:	d101      	bne.n	8105224 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8105220:	2303      	movs	r3, #3
 8105222:	e00f      	b.n	8105244 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8105224:	68fb      	ldr	r3, [r7, #12]
 8105226:	681b      	ldr	r3, [r3, #0]
 8105228:	695a      	ldr	r2, [r3, #20]
 810522a:	68bb      	ldr	r3, [r7, #8]
 810522c:	4013      	ands	r3, r2
 810522e:	68ba      	ldr	r2, [r7, #8]
 8105230:	429a      	cmp	r2, r3
 8105232:	bf0c      	ite	eq
 8105234:	2301      	moveq	r3, #1
 8105236:	2300      	movne	r3, #0
 8105238:	b2db      	uxtb	r3, r3
 810523a:	461a      	mov	r2, r3
 810523c:	79fb      	ldrb	r3, [r7, #7]
 810523e:	429a      	cmp	r2, r3
 8105240:	d0df      	beq.n	8105202 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8105242:	2300      	movs	r3, #0
}
 8105244:	4618      	mov	r0, r3
 8105246:	3710      	adds	r7, #16
 8105248:	46bd      	mov	sp, r7
 810524a:	bd80      	pop	{r7, pc}

0810524c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810524c:	b480      	push	{r7}
 810524e:	b085      	sub	sp, #20
 8105250:	af00      	add	r7, sp, #0
 8105252:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105258:	095b      	lsrs	r3, r3, #5
 810525a:	3301      	adds	r3, #1
 810525c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	68db      	ldr	r3, [r3, #12]
 8105262:	3301      	adds	r3, #1
 8105264:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8105266:	68bb      	ldr	r3, [r7, #8]
 8105268:	3307      	adds	r3, #7
 810526a:	08db      	lsrs	r3, r3, #3
 810526c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810526e:	68bb      	ldr	r3, [r7, #8]
 8105270:	68fa      	ldr	r2, [r7, #12]
 8105272:	fb02 f303 	mul.w	r3, r2, r3
}
 8105276:	4618      	mov	r0, r3
 8105278:	3714      	adds	r7, #20
 810527a:	46bd      	mov	sp, r7
 810527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105280:	4770      	bx	lr
	...

08105284 <__errno>:
 8105284:	4b01      	ldr	r3, [pc, #4]	; (810528c <__errno+0x8>)
 8105286:	6818      	ldr	r0, [r3, #0]
 8105288:	4770      	bx	lr
 810528a:	bf00      	nop
 810528c:	10000010 	.word	0x10000010

08105290 <__libc_init_array>:
 8105290:	b570      	push	{r4, r5, r6, lr}
 8105292:	4d0d      	ldr	r5, [pc, #52]	; (81052c8 <__libc_init_array+0x38>)
 8105294:	4c0d      	ldr	r4, [pc, #52]	; (81052cc <__libc_init_array+0x3c>)
 8105296:	1b64      	subs	r4, r4, r5
 8105298:	10a4      	asrs	r4, r4, #2
 810529a:	2600      	movs	r6, #0
 810529c:	42a6      	cmp	r6, r4
 810529e:	d109      	bne.n	81052b4 <__libc_init_array+0x24>
 81052a0:	4d0b      	ldr	r5, [pc, #44]	; (81052d0 <__libc_init_array+0x40>)
 81052a2:	4c0c      	ldr	r4, [pc, #48]	; (81052d4 <__libc_init_array+0x44>)
 81052a4:	f001 f858 	bl	8106358 <_init>
 81052a8:	1b64      	subs	r4, r4, r5
 81052aa:	10a4      	asrs	r4, r4, #2
 81052ac:	2600      	movs	r6, #0
 81052ae:	42a6      	cmp	r6, r4
 81052b0:	d105      	bne.n	81052be <__libc_init_array+0x2e>
 81052b2:	bd70      	pop	{r4, r5, r6, pc}
 81052b4:	f855 3b04 	ldr.w	r3, [r5], #4
 81052b8:	4798      	blx	r3
 81052ba:	3601      	adds	r6, #1
 81052bc:	e7ee      	b.n	810529c <__libc_init_array+0xc>
 81052be:	f855 3b04 	ldr.w	r3, [r5], #4
 81052c2:	4798      	blx	r3
 81052c4:	3601      	adds	r6, #1
 81052c6:	e7f2      	b.n	81052ae <__libc_init_array+0x1e>
 81052c8:	081064d0 	.word	0x081064d0
 81052cc:	081064d0 	.word	0x081064d0
 81052d0:	081064d0 	.word	0x081064d0
 81052d4:	081064d4 	.word	0x081064d4

081052d8 <memset>:
 81052d8:	4402      	add	r2, r0
 81052da:	4603      	mov	r3, r0
 81052dc:	4293      	cmp	r3, r2
 81052de:	d100      	bne.n	81052e2 <memset+0xa>
 81052e0:	4770      	bx	lr
 81052e2:	f803 1b01 	strb.w	r1, [r3], #1
 81052e6:	e7f9      	b.n	81052dc <memset+0x4>

081052e8 <rand>:
 81052e8:	4b16      	ldr	r3, [pc, #88]	; (8105344 <rand+0x5c>)
 81052ea:	b510      	push	{r4, lr}
 81052ec:	681c      	ldr	r4, [r3, #0]
 81052ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 81052f0:	b9b3      	cbnz	r3, 8105320 <rand+0x38>
 81052f2:	2018      	movs	r0, #24
 81052f4:	f000 f866 	bl	81053c4 <malloc>
 81052f8:	63a0      	str	r0, [r4, #56]	; 0x38
 81052fa:	b928      	cbnz	r0, 8105308 <rand+0x20>
 81052fc:	4602      	mov	r2, r0
 81052fe:	4b12      	ldr	r3, [pc, #72]	; (8105348 <rand+0x60>)
 8105300:	4812      	ldr	r0, [pc, #72]	; (810534c <rand+0x64>)
 8105302:	214e      	movs	r1, #78	; 0x4e
 8105304:	f000 f82e 	bl	8105364 <__assert_func>
 8105308:	4a11      	ldr	r2, [pc, #68]	; (8105350 <rand+0x68>)
 810530a:	4b12      	ldr	r3, [pc, #72]	; (8105354 <rand+0x6c>)
 810530c:	e9c0 2300 	strd	r2, r3, [r0]
 8105310:	4b11      	ldr	r3, [pc, #68]	; (8105358 <rand+0x70>)
 8105312:	6083      	str	r3, [r0, #8]
 8105314:	230b      	movs	r3, #11
 8105316:	8183      	strh	r3, [r0, #12]
 8105318:	2201      	movs	r2, #1
 810531a:	2300      	movs	r3, #0
 810531c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8105320:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8105322:	4a0e      	ldr	r2, [pc, #56]	; (810535c <rand+0x74>)
 8105324:	6920      	ldr	r0, [r4, #16]
 8105326:	6963      	ldr	r3, [r4, #20]
 8105328:	490d      	ldr	r1, [pc, #52]	; (8105360 <rand+0x78>)
 810532a:	4342      	muls	r2, r0
 810532c:	fb01 2203 	mla	r2, r1, r3, r2
 8105330:	fba0 0101 	umull	r0, r1, r0, r1
 8105334:	1c43      	adds	r3, r0, #1
 8105336:	eb42 0001 	adc.w	r0, r2, r1
 810533a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 810533e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8105342:	bd10      	pop	{r4, pc}
 8105344:	10000010 	.word	0x10000010
 8105348:	0810638c 	.word	0x0810638c
 810534c:	081063a3 	.word	0x081063a3
 8105350:	abcd330e 	.word	0xabcd330e
 8105354:	e66d1234 	.word	0xe66d1234
 8105358:	0005deec 	.word	0x0005deec
 810535c:	5851f42d 	.word	0x5851f42d
 8105360:	4c957f2d 	.word	0x4c957f2d

08105364 <__assert_func>:
 8105364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8105366:	4614      	mov	r4, r2
 8105368:	461a      	mov	r2, r3
 810536a:	4b09      	ldr	r3, [pc, #36]	; (8105390 <__assert_func+0x2c>)
 810536c:	681b      	ldr	r3, [r3, #0]
 810536e:	4605      	mov	r5, r0
 8105370:	68d8      	ldr	r0, [r3, #12]
 8105372:	b14c      	cbz	r4, 8105388 <__assert_func+0x24>
 8105374:	4b07      	ldr	r3, [pc, #28]	; (8105394 <__assert_func+0x30>)
 8105376:	9100      	str	r1, [sp, #0]
 8105378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810537c:	4906      	ldr	r1, [pc, #24]	; (8105398 <__assert_func+0x34>)
 810537e:	462b      	mov	r3, r5
 8105380:	f000 f80e 	bl	81053a0 <fiprintf>
 8105384:	f000 fcc4 	bl	8105d10 <abort>
 8105388:	4b04      	ldr	r3, [pc, #16]	; (810539c <__assert_func+0x38>)
 810538a:	461c      	mov	r4, r3
 810538c:	e7f3      	b.n	8105376 <__assert_func+0x12>
 810538e:	bf00      	nop
 8105390:	10000010 	.word	0x10000010
 8105394:	081063fe 	.word	0x081063fe
 8105398:	0810640b 	.word	0x0810640b
 810539c:	08106439 	.word	0x08106439

081053a0 <fiprintf>:
 81053a0:	b40e      	push	{r1, r2, r3}
 81053a2:	b503      	push	{r0, r1, lr}
 81053a4:	4601      	mov	r1, r0
 81053a6:	ab03      	add	r3, sp, #12
 81053a8:	4805      	ldr	r0, [pc, #20]	; (81053c0 <fiprintf+0x20>)
 81053aa:	f853 2b04 	ldr.w	r2, [r3], #4
 81053ae:	6800      	ldr	r0, [r0, #0]
 81053b0:	9301      	str	r3, [sp, #4]
 81053b2:	f000 f919 	bl	81055e8 <_vfiprintf_r>
 81053b6:	b002      	add	sp, #8
 81053b8:	f85d eb04 	ldr.w	lr, [sp], #4
 81053bc:	b003      	add	sp, #12
 81053be:	4770      	bx	lr
 81053c0:	10000010 	.word	0x10000010

081053c4 <malloc>:
 81053c4:	4b02      	ldr	r3, [pc, #8]	; (81053d0 <malloc+0xc>)
 81053c6:	4601      	mov	r1, r0
 81053c8:	6818      	ldr	r0, [r3, #0]
 81053ca:	f000 b86f 	b.w	81054ac <_malloc_r>
 81053ce:	bf00      	nop
 81053d0:	10000010 	.word	0x10000010

081053d4 <_free_r>:
 81053d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81053d6:	2900      	cmp	r1, #0
 81053d8:	d044      	beq.n	8105464 <_free_r+0x90>
 81053da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81053de:	9001      	str	r0, [sp, #4]
 81053e0:	2b00      	cmp	r3, #0
 81053e2:	f1a1 0404 	sub.w	r4, r1, #4
 81053e6:	bfb8      	it	lt
 81053e8:	18e4      	addlt	r4, r4, r3
 81053ea:	f000 feb9 	bl	8106160 <__malloc_lock>
 81053ee:	4a1e      	ldr	r2, [pc, #120]	; (8105468 <_free_r+0x94>)
 81053f0:	9801      	ldr	r0, [sp, #4]
 81053f2:	6813      	ldr	r3, [r2, #0]
 81053f4:	b933      	cbnz	r3, 8105404 <_free_r+0x30>
 81053f6:	6063      	str	r3, [r4, #4]
 81053f8:	6014      	str	r4, [r2, #0]
 81053fa:	b003      	add	sp, #12
 81053fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8105400:	f000 beb4 	b.w	810616c <__malloc_unlock>
 8105404:	42a3      	cmp	r3, r4
 8105406:	d908      	bls.n	810541a <_free_r+0x46>
 8105408:	6825      	ldr	r5, [r4, #0]
 810540a:	1961      	adds	r1, r4, r5
 810540c:	428b      	cmp	r3, r1
 810540e:	bf01      	itttt	eq
 8105410:	6819      	ldreq	r1, [r3, #0]
 8105412:	685b      	ldreq	r3, [r3, #4]
 8105414:	1949      	addeq	r1, r1, r5
 8105416:	6021      	streq	r1, [r4, #0]
 8105418:	e7ed      	b.n	81053f6 <_free_r+0x22>
 810541a:	461a      	mov	r2, r3
 810541c:	685b      	ldr	r3, [r3, #4]
 810541e:	b10b      	cbz	r3, 8105424 <_free_r+0x50>
 8105420:	42a3      	cmp	r3, r4
 8105422:	d9fa      	bls.n	810541a <_free_r+0x46>
 8105424:	6811      	ldr	r1, [r2, #0]
 8105426:	1855      	adds	r5, r2, r1
 8105428:	42a5      	cmp	r5, r4
 810542a:	d10b      	bne.n	8105444 <_free_r+0x70>
 810542c:	6824      	ldr	r4, [r4, #0]
 810542e:	4421      	add	r1, r4
 8105430:	1854      	adds	r4, r2, r1
 8105432:	42a3      	cmp	r3, r4
 8105434:	6011      	str	r1, [r2, #0]
 8105436:	d1e0      	bne.n	81053fa <_free_r+0x26>
 8105438:	681c      	ldr	r4, [r3, #0]
 810543a:	685b      	ldr	r3, [r3, #4]
 810543c:	6053      	str	r3, [r2, #4]
 810543e:	4421      	add	r1, r4
 8105440:	6011      	str	r1, [r2, #0]
 8105442:	e7da      	b.n	81053fa <_free_r+0x26>
 8105444:	d902      	bls.n	810544c <_free_r+0x78>
 8105446:	230c      	movs	r3, #12
 8105448:	6003      	str	r3, [r0, #0]
 810544a:	e7d6      	b.n	81053fa <_free_r+0x26>
 810544c:	6825      	ldr	r5, [r4, #0]
 810544e:	1961      	adds	r1, r4, r5
 8105450:	428b      	cmp	r3, r1
 8105452:	bf04      	itt	eq
 8105454:	6819      	ldreq	r1, [r3, #0]
 8105456:	685b      	ldreq	r3, [r3, #4]
 8105458:	6063      	str	r3, [r4, #4]
 810545a:	bf04      	itt	eq
 810545c:	1949      	addeq	r1, r1, r5
 810545e:	6021      	streq	r1, [r4, #0]
 8105460:	6054      	str	r4, [r2, #4]
 8105462:	e7ca      	b.n	81053fa <_free_r+0x26>
 8105464:	b003      	add	sp, #12
 8105466:	bd30      	pop	{r4, r5, pc}
 8105468:	100004cc 	.word	0x100004cc

0810546c <sbrk_aligned>:
 810546c:	b570      	push	{r4, r5, r6, lr}
 810546e:	4e0e      	ldr	r6, [pc, #56]	; (81054a8 <sbrk_aligned+0x3c>)
 8105470:	460c      	mov	r4, r1
 8105472:	6831      	ldr	r1, [r6, #0]
 8105474:	4605      	mov	r5, r0
 8105476:	b911      	cbnz	r1, 810547e <sbrk_aligned+0x12>
 8105478:	f000 fb7a 	bl	8105b70 <_sbrk_r>
 810547c:	6030      	str	r0, [r6, #0]
 810547e:	4621      	mov	r1, r4
 8105480:	4628      	mov	r0, r5
 8105482:	f000 fb75 	bl	8105b70 <_sbrk_r>
 8105486:	1c43      	adds	r3, r0, #1
 8105488:	d00a      	beq.n	81054a0 <sbrk_aligned+0x34>
 810548a:	1cc4      	adds	r4, r0, #3
 810548c:	f024 0403 	bic.w	r4, r4, #3
 8105490:	42a0      	cmp	r0, r4
 8105492:	d007      	beq.n	81054a4 <sbrk_aligned+0x38>
 8105494:	1a21      	subs	r1, r4, r0
 8105496:	4628      	mov	r0, r5
 8105498:	f000 fb6a 	bl	8105b70 <_sbrk_r>
 810549c:	3001      	adds	r0, #1
 810549e:	d101      	bne.n	81054a4 <sbrk_aligned+0x38>
 81054a0:	f04f 34ff 	mov.w	r4, #4294967295
 81054a4:	4620      	mov	r0, r4
 81054a6:	bd70      	pop	{r4, r5, r6, pc}
 81054a8:	100004d0 	.word	0x100004d0

081054ac <_malloc_r>:
 81054ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81054b0:	1ccd      	adds	r5, r1, #3
 81054b2:	f025 0503 	bic.w	r5, r5, #3
 81054b6:	3508      	adds	r5, #8
 81054b8:	2d0c      	cmp	r5, #12
 81054ba:	bf38      	it	cc
 81054bc:	250c      	movcc	r5, #12
 81054be:	2d00      	cmp	r5, #0
 81054c0:	4607      	mov	r7, r0
 81054c2:	db01      	blt.n	81054c8 <_malloc_r+0x1c>
 81054c4:	42a9      	cmp	r1, r5
 81054c6:	d905      	bls.n	81054d4 <_malloc_r+0x28>
 81054c8:	230c      	movs	r3, #12
 81054ca:	603b      	str	r3, [r7, #0]
 81054cc:	2600      	movs	r6, #0
 81054ce:	4630      	mov	r0, r6
 81054d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81054d4:	4e2e      	ldr	r6, [pc, #184]	; (8105590 <_malloc_r+0xe4>)
 81054d6:	f000 fe43 	bl	8106160 <__malloc_lock>
 81054da:	6833      	ldr	r3, [r6, #0]
 81054dc:	461c      	mov	r4, r3
 81054de:	bb34      	cbnz	r4, 810552e <_malloc_r+0x82>
 81054e0:	4629      	mov	r1, r5
 81054e2:	4638      	mov	r0, r7
 81054e4:	f7ff ffc2 	bl	810546c <sbrk_aligned>
 81054e8:	1c43      	adds	r3, r0, #1
 81054ea:	4604      	mov	r4, r0
 81054ec:	d14d      	bne.n	810558a <_malloc_r+0xde>
 81054ee:	6834      	ldr	r4, [r6, #0]
 81054f0:	4626      	mov	r6, r4
 81054f2:	2e00      	cmp	r6, #0
 81054f4:	d140      	bne.n	8105578 <_malloc_r+0xcc>
 81054f6:	6823      	ldr	r3, [r4, #0]
 81054f8:	4631      	mov	r1, r6
 81054fa:	4638      	mov	r0, r7
 81054fc:	eb04 0803 	add.w	r8, r4, r3
 8105500:	f000 fb36 	bl	8105b70 <_sbrk_r>
 8105504:	4580      	cmp	r8, r0
 8105506:	d13a      	bne.n	810557e <_malloc_r+0xd2>
 8105508:	6821      	ldr	r1, [r4, #0]
 810550a:	3503      	adds	r5, #3
 810550c:	1a6d      	subs	r5, r5, r1
 810550e:	f025 0503 	bic.w	r5, r5, #3
 8105512:	3508      	adds	r5, #8
 8105514:	2d0c      	cmp	r5, #12
 8105516:	bf38      	it	cc
 8105518:	250c      	movcc	r5, #12
 810551a:	4629      	mov	r1, r5
 810551c:	4638      	mov	r0, r7
 810551e:	f7ff ffa5 	bl	810546c <sbrk_aligned>
 8105522:	3001      	adds	r0, #1
 8105524:	d02b      	beq.n	810557e <_malloc_r+0xd2>
 8105526:	6823      	ldr	r3, [r4, #0]
 8105528:	442b      	add	r3, r5
 810552a:	6023      	str	r3, [r4, #0]
 810552c:	e00e      	b.n	810554c <_malloc_r+0xa0>
 810552e:	6822      	ldr	r2, [r4, #0]
 8105530:	1b52      	subs	r2, r2, r5
 8105532:	d41e      	bmi.n	8105572 <_malloc_r+0xc6>
 8105534:	2a0b      	cmp	r2, #11
 8105536:	d916      	bls.n	8105566 <_malloc_r+0xba>
 8105538:	1961      	adds	r1, r4, r5
 810553a:	42a3      	cmp	r3, r4
 810553c:	6025      	str	r5, [r4, #0]
 810553e:	bf18      	it	ne
 8105540:	6059      	strne	r1, [r3, #4]
 8105542:	6863      	ldr	r3, [r4, #4]
 8105544:	bf08      	it	eq
 8105546:	6031      	streq	r1, [r6, #0]
 8105548:	5162      	str	r2, [r4, r5]
 810554a:	604b      	str	r3, [r1, #4]
 810554c:	4638      	mov	r0, r7
 810554e:	f104 060b 	add.w	r6, r4, #11
 8105552:	f000 fe0b 	bl	810616c <__malloc_unlock>
 8105556:	f026 0607 	bic.w	r6, r6, #7
 810555a:	1d23      	adds	r3, r4, #4
 810555c:	1af2      	subs	r2, r6, r3
 810555e:	d0b6      	beq.n	81054ce <_malloc_r+0x22>
 8105560:	1b9b      	subs	r3, r3, r6
 8105562:	50a3      	str	r3, [r4, r2]
 8105564:	e7b3      	b.n	81054ce <_malloc_r+0x22>
 8105566:	6862      	ldr	r2, [r4, #4]
 8105568:	42a3      	cmp	r3, r4
 810556a:	bf0c      	ite	eq
 810556c:	6032      	streq	r2, [r6, #0]
 810556e:	605a      	strne	r2, [r3, #4]
 8105570:	e7ec      	b.n	810554c <_malloc_r+0xa0>
 8105572:	4623      	mov	r3, r4
 8105574:	6864      	ldr	r4, [r4, #4]
 8105576:	e7b2      	b.n	81054de <_malloc_r+0x32>
 8105578:	4634      	mov	r4, r6
 810557a:	6876      	ldr	r6, [r6, #4]
 810557c:	e7b9      	b.n	81054f2 <_malloc_r+0x46>
 810557e:	230c      	movs	r3, #12
 8105580:	603b      	str	r3, [r7, #0]
 8105582:	4638      	mov	r0, r7
 8105584:	f000 fdf2 	bl	810616c <__malloc_unlock>
 8105588:	e7a1      	b.n	81054ce <_malloc_r+0x22>
 810558a:	6025      	str	r5, [r4, #0]
 810558c:	e7de      	b.n	810554c <_malloc_r+0xa0>
 810558e:	bf00      	nop
 8105590:	100004cc 	.word	0x100004cc

08105594 <__sfputc_r>:
 8105594:	6893      	ldr	r3, [r2, #8]
 8105596:	3b01      	subs	r3, #1
 8105598:	2b00      	cmp	r3, #0
 810559a:	b410      	push	{r4}
 810559c:	6093      	str	r3, [r2, #8]
 810559e:	da08      	bge.n	81055b2 <__sfputc_r+0x1e>
 81055a0:	6994      	ldr	r4, [r2, #24]
 81055a2:	42a3      	cmp	r3, r4
 81055a4:	db01      	blt.n	81055aa <__sfputc_r+0x16>
 81055a6:	290a      	cmp	r1, #10
 81055a8:	d103      	bne.n	81055b2 <__sfputc_r+0x1e>
 81055aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 81055ae:	f000 baef 	b.w	8105b90 <__swbuf_r>
 81055b2:	6813      	ldr	r3, [r2, #0]
 81055b4:	1c58      	adds	r0, r3, #1
 81055b6:	6010      	str	r0, [r2, #0]
 81055b8:	7019      	strb	r1, [r3, #0]
 81055ba:	4608      	mov	r0, r1
 81055bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 81055c0:	4770      	bx	lr

081055c2 <__sfputs_r>:
 81055c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81055c4:	4606      	mov	r6, r0
 81055c6:	460f      	mov	r7, r1
 81055c8:	4614      	mov	r4, r2
 81055ca:	18d5      	adds	r5, r2, r3
 81055cc:	42ac      	cmp	r4, r5
 81055ce:	d101      	bne.n	81055d4 <__sfputs_r+0x12>
 81055d0:	2000      	movs	r0, #0
 81055d2:	e007      	b.n	81055e4 <__sfputs_r+0x22>
 81055d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81055d8:	463a      	mov	r2, r7
 81055da:	4630      	mov	r0, r6
 81055dc:	f7ff ffda 	bl	8105594 <__sfputc_r>
 81055e0:	1c43      	adds	r3, r0, #1
 81055e2:	d1f3      	bne.n	81055cc <__sfputs_r+0xa>
 81055e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081055e8 <_vfiprintf_r>:
 81055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81055ec:	460d      	mov	r5, r1
 81055ee:	b09d      	sub	sp, #116	; 0x74
 81055f0:	4614      	mov	r4, r2
 81055f2:	4698      	mov	r8, r3
 81055f4:	4606      	mov	r6, r0
 81055f6:	b118      	cbz	r0, 8105600 <_vfiprintf_r+0x18>
 81055f8:	6983      	ldr	r3, [r0, #24]
 81055fa:	b90b      	cbnz	r3, 8105600 <_vfiprintf_r+0x18>
 81055fc:	f000 fcaa 	bl	8105f54 <__sinit>
 8105600:	4b89      	ldr	r3, [pc, #548]	; (8105828 <_vfiprintf_r+0x240>)
 8105602:	429d      	cmp	r5, r3
 8105604:	d11b      	bne.n	810563e <_vfiprintf_r+0x56>
 8105606:	6875      	ldr	r5, [r6, #4]
 8105608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810560a:	07d9      	lsls	r1, r3, #31
 810560c:	d405      	bmi.n	810561a <_vfiprintf_r+0x32>
 810560e:	89ab      	ldrh	r3, [r5, #12]
 8105610:	059a      	lsls	r2, r3, #22
 8105612:	d402      	bmi.n	810561a <_vfiprintf_r+0x32>
 8105614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8105616:	f000 fd3b 	bl	8106090 <__retarget_lock_acquire_recursive>
 810561a:	89ab      	ldrh	r3, [r5, #12]
 810561c:	071b      	lsls	r3, r3, #28
 810561e:	d501      	bpl.n	8105624 <_vfiprintf_r+0x3c>
 8105620:	692b      	ldr	r3, [r5, #16]
 8105622:	b9eb      	cbnz	r3, 8105660 <_vfiprintf_r+0x78>
 8105624:	4629      	mov	r1, r5
 8105626:	4630      	mov	r0, r6
 8105628:	f000 fb04 	bl	8105c34 <__swsetup_r>
 810562c:	b1c0      	cbz	r0, 8105660 <_vfiprintf_r+0x78>
 810562e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8105630:	07dc      	lsls	r4, r3, #31
 8105632:	d50e      	bpl.n	8105652 <_vfiprintf_r+0x6a>
 8105634:	f04f 30ff 	mov.w	r0, #4294967295
 8105638:	b01d      	add	sp, #116	; 0x74
 810563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810563e:	4b7b      	ldr	r3, [pc, #492]	; (810582c <_vfiprintf_r+0x244>)
 8105640:	429d      	cmp	r5, r3
 8105642:	d101      	bne.n	8105648 <_vfiprintf_r+0x60>
 8105644:	68b5      	ldr	r5, [r6, #8]
 8105646:	e7df      	b.n	8105608 <_vfiprintf_r+0x20>
 8105648:	4b79      	ldr	r3, [pc, #484]	; (8105830 <_vfiprintf_r+0x248>)
 810564a:	429d      	cmp	r5, r3
 810564c:	bf08      	it	eq
 810564e:	68f5      	ldreq	r5, [r6, #12]
 8105650:	e7da      	b.n	8105608 <_vfiprintf_r+0x20>
 8105652:	89ab      	ldrh	r3, [r5, #12]
 8105654:	0598      	lsls	r0, r3, #22
 8105656:	d4ed      	bmi.n	8105634 <_vfiprintf_r+0x4c>
 8105658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810565a:	f000 fd1a 	bl	8106092 <__retarget_lock_release_recursive>
 810565e:	e7e9      	b.n	8105634 <_vfiprintf_r+0x4c>
 8105660:	2300      	movs	r3, #0
 8105662:	9309      	str	r3, [sp, #36]	; 0x24
 8105664:	2320      	movs	r3, #32
 8105666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810566a:	f8cd 800c 	str.w	r8, [sp, #12]
 810566e:	2330      	movs	r3, #48	; 0x30
 8105670:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8105834 <_vfiprintf_r+0x24c>
 8105674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8105678:	f04f 0901 	mov.w	r9, #1
 810567c:	4623      	mov	r3, r4
 810567e:	469a      	mov	sl, r3
 8105680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8105684:	b10a      	cbz	r2, 810568a <_vfiprintf_r+0xa2>
 8105686:	2a25      	cmp	r2, #37	; 0x25
 8105688:	d1f9      	bne.n	810567e <_vfiprintf_r+0x96>
 810568a:	ebba 0b04 	subs.w	fp, sl, r4
 810568e:	d00b      	beq.n	81056a8 <_vfiprintf_r+0xc0>
 8105690:	465b      	mov	r3, fp
 8105692:	4622      	mov	r2, r4
 8105694:	4629      	mov	r1, r5
 8105696:	4630      	mov	r0, r6
 8105698:	f7ff ff93 	bl	81055c2 <__sfputs_r>
 810569c:	3001      	adds	r0, #1
 810569e:	f000 80aa 	beq.w	81057f6 <_vfiprintf_r+0x20e>
 81056a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81056a4:	445a      	add	r2, fp
 81056a6:	9209      	str	r2, [sp, #36]	; 0x24
 81056a8:	f89a 3000 	ldrb.w	r3, [sl]
 81056ac:	2b00      	cmp	r3, #0
 81056ae:	f000 80a2 	beq.w	81057f6 <_vfiprintf_r+0x20e>
 81056b2:	2300      	movs	r3, #0
 81056b4:	f04f 32ff 	mov.w	r2, #4294967295
 81056b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81056bc:	f10a 0a01 	add.w	sl, sl, #1
 81056c0:	9304      	str	r3, [sp, #16]
 81056c2:	9307      	str	r3, [sp, #28]
 81056c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81056c8:	931a      	str	r3, [sp, #104]	; 0x68
 81056ca:	4654      	mov	r4, sl
 81056cc:	2205      	movs	r2, #5
 81056ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 81056d2:	4858      	ldr	r0, [pc, #352]	; (8105834 <_vfiprintf_r+0x24c>)
 81056d4:	f7fa fe04 	bl	81002e0 <memchr>
 81056d8:	9a04      	ldr	r2, [sp, #16]
 81056da:	b9d8      	cbnz	r0, 8105714 <_vfiprintf_r+0x12c>
 81056dc:	06d1      	lsls	r1, r2, #27
 81056de:	bf44      	itt	mi
 81056e0:	2320      	movmi	r3, #32
 81056e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81056e6:	0713      	lsls	r3, r2, #28
 81056e8:	bf44      	itt	mi
 81056ea:	232b      	movmi	r3, #43	; 0x2b
 81056ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81056f0:	f89a 3000 	ldrb.w	r3, [sl]
 81056f4:	2b2a      	cmp	r3, #42	; 0x2a
 81056f6:	d015      	beq.n	8105724 <_vfiprintf_r+0x13c>
 81056f8:	9a07      	ldr	r2, [sp, #28]
 81056fa:	4654      	mov	r4, sl
 81056fc:	2000      	movs	r0, #0
 81056fe:	f04f 0c0a 	mov.w	ip, #10
 8105702:	4621      	mov	r1, r4
 8105704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8105708:	3b30      	subs	r3, #48	; 0x30
 810570a:	2b09      	cmp	r3, #9
 810570c:	d94e      	bls.n	81057ac <_vfiprintf_r+0x1c4>
 810570e:	b1b0      	cbz	r0, 810573e <_vfiprintf_r+0x156>
 8105710:	9207      	str	r2, [sp, #28]
 8105712:	e014      	b.n	810573e <_vfiprintf_r+0x156>
 8105714:	eba0 0308 	sub.w	r3, r0, r8
 8105718:	fa09 f303 	lsl.w	r3, r9, r3
 810571c:	4313      	orrs	r3, r2
 810571e:	9304      	str	r3, [sp, #16]
 8105720:	46a2      	mov	sl, r4
 8105722:	e7d2      	b.n	81056ca <_vfiprintf_r+0xe2>
 8105724:	9b03      	ldr	r3, [sp, #12]
 8105726:	1d19      	adds	r1, r3, #4
 8105728:	681b      	ldr	r3, [r3, #0]
 810572a:	9103      	str	r1, [sp, #12]
 810572c:	2b00      	cmp	r3, #0
 810572e:	bfbb      	ittet	lt
 8105730:	425b      	neglt	r3, r3
 8105732:	f042 0202 	orrlt.w	r2, r2, #2
 8105736:	9307      	strge	r3, [sp, #28]
 8105738:	9307      	strlt	r3, [sp, #28]
 810573a:	bfb8      	it	lt
 810573c:	9204      	strlt	r2, [sp, #16]
 810573e:	7823      	ldrb	r3, [r4, #0]
 8105740:	2b2e      	cmp	r3, #46	; 0x2e
 8105742:	d10c      	bne.n	810575e <_vfiprintf_r+0x176>
 8105744:	7863      	ldrb	r3, [r4, #1]
 8105746:	2b2a      	cmp	r3, #42	; 0x2a
 8105748:	d135      	bne.n	81057b6 <_vfiprintf_r+0x1ce>
 810574a:	9b03      	ldr	r3, [sp, #12]
 810574c:	1d1a      	adds	r2, r3, #4
 810574e:	681b      	ldr	r3, [r3, #0]
 8105750:	9203      	str	r2, [sp, #12]
 8105752:	2b00      	cmp	r3, #0
 8105754:	bfb8      	it	lt
 8105756:	f04f 33ff 	movlt.w	r3, #4294967295
 810575a:	3402      	adds	r4, #2
 810575c:	9305      	str	r3, [sp, #20]
 810575e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8105844 <_vfiprintf_r+0x25c>
 8105762:	7821      	ldrb	r1, [r4, #0]
 8105764:	2203      	movs	r2, #3
 8105766:	4650      	mov	r0, sl
 8105768:	f7fa fdba 	bl	81002e0 <memchr>
 810576c:	b140      	cbz	r0, 8105780 <_vfiprintf_r+0x198>
 810576e:	2340      	movs	r3, #64	; 0x40
 8105770:	eba0 000a 	sub.w	r0, r0, sl
 8105774:	fa03 f000 	lsl.w	r0, r3, r0
 8105778:	9b04      	ldr	r3, [sp, #16]
 810577a:	4303      	orrs	r3, r0
 810577c:	3401      	adds	r4, #1
 810577e:	9304      	str	r3, [sp, #16]
 8105780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8105784:	482c      	ldr	r0, [pc, #176]	; (8105838 <_vfiprintf_r+0x250>)
 8105786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810578a:	2206      	movs	r2, #6
 810578c:	f7fa fda8 	bl	81002e0 <memchr>
 8105790:	2800      	cmp	r0, #0
 8105792:	d03f      	beq.n	8105814 <_vfiprintf_r+0x22c>
 8105794:	4b29      	ldr	r3, [pc, #164]	; (810583c <_vfiprintf_r+0x254>)
 8105796:	bb1b      	cbnz	r3, 81057e0 <_vfiprintf_r+0x1f8>
 8105798:	9b03      	ldr	r3, [sp, #12]
 810579a:	3307      	adds	r3, #7
 810579c:	f023 0307 	bic.w	r3, r3, #7
 81057a0:	3308      	adds	r3, #8
 81057a2:	9303      	str	r3, [sp, #12]
 81057a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81057a6:	443b      	add	r3, r7
 81057a8:	9309      	str	r3, [sp, #36]	; 0x24
 81057aa:	e767      	b.n	810567c <_vfiprintf_r+0x94>
 81057ac:	fb0c 3202 	mla	r2, ip, r2, r3
 81057b0:	460c      	mov	r4, r1
 81057b2:	2001      	movs	r0, #1
 81057b4:	e7a5      	b.n	8105702 <_vfiprintf_r+0x11a>
 81057b6:	2300      	movs	r3, #0
 81057b8:	3401      	adds	r4, #1
 81057ba:	9305      	str	r3, [sp, #20]
 81057bc:	4619      	mov	r1, r3
 81057be:	f04f 0c0a 	mov.w	ip, #10
 81057c2:	4620      	mov	r0, r4
 81057c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 81057c8:	3a30      	subs	r2, #48	; 0x30
 81057ca:	2a09      	cmp	r2, #9
 81057cc:	d903      	bls.n	81057d6 <_vfiprintf_r+0x1ee>
 81057ce:	2b00      	cmp	r3, #0
 81057d0:	d0c5      	beq.n	810575e <_vfiprintf_r+0x176>
 81057d2:	9105      	str	r1, [sp, #20]
 81057d4:	e7c3      	b.n	810575e <_vfiprintf_r+0x176>
 81057d6:	fb0c 2101 	mla	r1, ip, r1, r2
 81057da:	4604      	mov	r4, r0
 81057dc:	2301      	movs	r3, #1
 81057de:	e7f0      	b.n	81057c2 <_vfiprintf_r+0x1da>
 81057e0:	ab03      	add	r3, sp, #12
 81057e2:	9300      	str	r3, [sp, #0]
 81057e4:	462a      	mov	r2, r5
 81057e6:	4b16      	ldr	r3, [pc, #88]	; (8105840 <_vfiprintf_r+0x258>)
 81057e8:	a904      	add	r1, sp, #16
 81057ea:	4630      	mov	r0, r6
 81057ec:	f3af 8000 	nop.w
 81057f0:	4607      	mov	r7, r0
 81057f2:	1c78      	adds	r0, r7, #1
 81057f4:	d1d6      	bne.n	81057a4 <_vfiprintf_r+0x1bc>
 81057f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81057f8:	07d9      	lsls	r1, r3, #31
 81057fa:	d405      	bmi.n	8105808 <_vfiprintf_r+0x220>
 81057fc:	89ab      	ldrh	r3, [r5, #12]
 81057fe:	059a      	lsls	r2, r3, #22
 8105800:	d402      	bmi.n	8105808 <_vfiprintf_r+0x220>
 8105802:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8105804:	f000 fc45 	bl	8106092 <__retarget_lock_release_recursive>
 8105808:	89ab      	ldrh	r3, [r5, #12]
 810580a:	065b      	lsls	r3, r3, #25
 810580c:	f53f af12 	bmi.w	8105634 <_vfiprintf_r+0x4c>
 8105810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8105812:	e711      	b.n	8105638 <_vfiprintf_r+0x50>
 8105814:	ab03      	add	r3, sp, #12
 8105816:	9300      	str	r3, [sp, #0]
 8105818:	462a      	mov	r2, r5
 810581a:	4b09      	ldr	r3, [pc, #36]	; (8105840 <_vfiprintf_r+0x258>)
 810581c:	a904      	add	r1, sp, #16
 810581e:	4630      	mov	r0, r6
 8105820:	f000 f880 	bl	8105924 <_printf_i>
 8105824:	e7e4      	b.n	81057f0 <_vfiprintf_r+0x208>
 8105826:	bf00      	nop
 8105828:	08106490 	.word	0x08106490
 810582c:	081064b0 	.word	0x081064b0
 8105830:	08106470 	.word	0x08106470
 8105834:	0810643a 	.word	0x0810643a
 8105838:	08106444 	.word	0x08106444
 810583c:	00000000 	.word	0x00000000
 8105840:	081055c3 	.word	0x081055c3
 8105844:	08106440 	.word	0x08106440

08105848 <_printf_common>:
 8105848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810584c:	4616      	mov	r6, r2
 810584e:	4699      	mov	r9, r3
 8105850:	688a      	ldr	r2, [r1, #8]
 8105852:	690b      	ldr	r3, [r1, #16]
 8105854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8105858:	4293      	cmp	r3, r2
 810585a:	bfb8      	it	lt
 810585c:	4613      	movlt	r3, r2
 810585e:	6033      	str	r3, [r6, #0]
 8105860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8105864:	4607      	mov	r7, r0
 8105866:	460c      	mov	r4, r1
 8105868:	b10a      	cbz	r2, 810586e <_printf_common+0x26>
 810586a:	3301      	adds	r3, #1
 810586c:	6033      	str	r3, [r6, #0]
 810586e:	6823      	ldr	r3, [r4, #0]
 8105870:	0699      	lsls	r1, r3, #26
 8105872:	bf42      	ittt	mi
 8105874:	6833      	ldrmi	r3, [r6, #0]
 8105876:	3302      	addmi	r3, #2
 8105878:	6033      	strmi	r3, [r6, #0]
 810587a:	6825      	ldr	r5, [r4, #0]
 810587c:	f015 0506 	ands.w	r5, r5, #6
 8105880:	d106      	bne.n	8105890 <_printf_common+0x48>
 8105882:	f104 0a19 	add.w	sl, r4, #25
 8105886:	68e3      	ldr	r3, [r4, #12]
 8105888:	6832      	ldr	r2, [r6, #0]
 810588a:	1a9b      	subs	r3, r3, r2
 810588c:	42ab      	cmp	r3, r5
 810588e:	dc26      	bgt.n	81058de <_printf_common+0x96>
 8105890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8105894:	1e13      	subs	r3, r2, #0
 8105896:	6822      	ldr	r2, [r4, #0]
 8105898:	bf18      	it	ne
 810589a:	2301      	movne	r3, #1
 810589c:	0692      	lsls	r2, r2, #26
 810589e:	d42b      	bmi.n	81058f8 <_printf_common+0xb0>
 81058a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81058a4:	4649      	mov	r1, r9
 81058a6:	4638      	mov	r0, r7
 81058a8:	47c0      	blx	r8
 81058aa:	3001      	adds	r0, #1
 81058ac:	d01e      	beq.n	81058ec <_printf_common+0xa4>
 81058ae:	6823      	ldr	r3, [r4, #0]
 81058b0:	68e5      	ldr	r5, [r4, #12]
 81058b2:	6832      	ldr	r2, [r6, #0]
 81058b4:	f003 0306 	and.w	r3, r3, #6
 81058b8:	2b04      	cmp	r3, #4
 81058ba:	bf08      	it	eq
 81058bc:	1aad      	subeq	r5, r5, r2
 81058be:	68a3      	ldr	r3, [r4, #8]
 81058c0:	6922      	ldr	r2, [r4, #16]
 81058c2:	bf0c      	ite	eq
 81058c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81058c8:	2500      	movne	r5, #0
 81058ca:	4293      	cmp	r3, r2
 81058cc:	bfc4      	itt	gt
 81058ce:	1a9b      	subgt	r3, r3, r2
 81058d0:	18ed      	addgt	r5, r5, r3
 81058d2:	2600      	movs	r6, #0
 81058d4:	341a      	adds	r4, #26
 81058d6:	42b5      	cmp	r5, r6
 81058d8:	d11a      	bne.n	8105910 <_printf_common+0xc8>
 81058da:	2000      	movs	r0, #0
 81058dc:	e008      	b.n	81058f0 <_printf_common+0xa8>
 81058de:	2301      	movs	r3, #1
 81058e0:	4652      	mov	r2, sl
 81058e2:	4649      	mov	r1, r9
 81058e4:	4638      	mov	r0, r7
 81058e6:	47c0      	blx	r8
 81058e8:	3001      	adds	r0, #1
 81058ea:	d103      	bne.n	81058f4 <_printf_common+0xac>
 81058ec:	f04f 30ff 	mov.w	r0, #4294967295
 81058f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81058f4:	3501      	adds	r5, #1
 81058f6:	e7c6      	b.n	8105886 <_printf_common+0x3e>
 81058f8:	18e1      	adds	r1, r4, r3
 81058fa:	1c5a      	adds	r2, r3, #1
 81058fc:	2030      	movs	r0, #48	; 0x30
 81058fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8105902:	4422      	add	r2, r4
 8105904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8105908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810590c:	3302      	adds	r3, #2
 810590e:	e7c7      	b.n	81058a0 <_printf_common+0x58>
 8105910:	2301      	movs	r3, #1
 8105912:	4622      	mov	r2, r4
 8105914:	4649      	mov	r1, r9
 8105916:	4638      	mov	r0, r7
 8105918:	47c0      	blx	r8
 810591a:	3001      	adds	r0, #1
 810591c:	d0e6      	beq.n	81058ec <_printf_common+0xa4>
 810591e:	3601      	adds	r6, #1
 8105920:	e7d9      	b.n	81058d6 <_printf_common+0x8e>
	...

08105924 <_printf_i>:
 8105924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8105928:	7e0f      	ldrb	r7, [r1, #24]
 810592a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810592c:	2f78      	cmp	r7, #120	; 0x78
 810592e:	4691      	mov	r9, r2
 8105930:	4680      	mov	r8, r0
 8105932:	460c      	mov	r4, r1
 8105934:	469a      	mov	sl, r3
 8105936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810593a:	d807      	bhi.n	810594c <_printf_i+0x28>
 810593c:	2f62      	cmp	r7, #98	; 0x62
 810593e:	d80a      	bhi.n	8105956 <_printf_i+0x32>
 8105940:	2f00      	cmp	r7, #0
 8105942:	f000 80d8 	beq.w	8105af6 <_printf_i+0x1d2>
 8105946:	2f58      	cmp	r7, #88	; 0x58
 8105948:	f000 80a3 	beq.w	8105a92 <_printf_i+0x16e>
 810594c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8105950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8105954:	e03a      	b.n	81059cc <_printf_i+0xa8>
 8105956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810595a:	2b15      	cmp	r3, #21
 810595c:	d8f6      	bhi.n	810594c <_printf_i+0x28>
 810595e:	a101      	add	r1, pc, #4	; (adr r1, 8105964 <_printf_i+0x40>)
 8105960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8105964:	081059bd 	.word	0x081059bd
 8105968:	081059d1 	.word	0x081059d1
 810596c:	0810594d 	.word	0x0810594d
 8105970:	0810594d 	.word	0x0810594d
 8105974:	0810594d 	.word	0x0810594d
 8105978:	0810594d 	.word	0x0810594d
 810597c:	081059d1 	.word	0x081059d1
 8105980:	0810594d 	.word	0x0810594d
 8105984:	0810594d 	.word	0x0810594d
 8105988:	0810594d 	.word	0x0810594d
 810598c:	0810594d 	.word	0x0810594d
 8105990:	08105add 	.word	0x08105add
 8105994:	08105a01 	.word	0x08105a01
 8105998:	08105abf 	.word	0x08105abf
 810599c:	0810594d 	.word	0x0810594d
 81059a0:	0810594d 	.word	0x0810594d
 81059a4:	08105aff 	.word	0x08105aff
 81059a8:	0810594d 	.word	0x0810594d
 81059ac:	08105a01 	.word	0x08105a01
 81059b0:	0810594d 	.word	0x0810594d
 81059b4:	0810594d 	.word	0x0810594d
 81059b8:	08105ac7 	.word	0x08105ac7
 81059bc:	682b      	ldr	r3, [r5, #0]
 81059be:	1d1a      	adds	r2, r3, #4
 81059c0:	681b      	ldr	r3, [r3, #0]
 81059c2:	602a      	str	r2, [r5, #0]
 81059c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81059c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81059cc:	2301      	movs	r3, #1
 81059ce:	e0a3      	b.n	8105b18 <_printf_i+0x1f4>
 81059d0:	6820      	ldr	r0, [r4, #0]
 81059d2:	6829      	ldr	r1, [r5, #0]
 81059d4:	0606      	lsls	r6, r0, #24
 81059d6:	f101 0304 	add.w	r3, r1, #4
 81059da:	d50a      	bpl.n	81059f2 <_printf_i+0xce>
 81059dc:	680e      	ldr	r6, [r1, #0]
 81059de:	602b      	str	r3, [r5, #0]
 81059e0:	2e00      	cmp	r6, #0
 81059e2:	da03      	bge.n	81059ec <_printf_i+0xc8>
 81059e4:	232d      	movs	r3, #45	; 0x2d
 81059e6:	4276      	negs	r6, r6
 81059e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81059ec:	485e      	ldr	r0, [pc, #376]	; (8105b68 <_printf_i+0x244>)
 81059ee:	230a      	movs	r3, #10
 81059f0:	e019      	b.n	8105a26 <_printf_i+0x102>
 81059f2:	680e      	ldr	r6, [r1, #0]
 81059f4:	602b      	str	r3, [r5, #0]
 81059f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 81059fa:	bf18      	it	ne
 81059fc:	b236      	sxthne	r6, r6
 81059fe:	e7ef      	b.n	81059e0 <_printf_i+0xbc>
 8105a00:	682b      	ldr	r3, [r5, #0]
 8105a02:	6820      	ldr	r0, [r4, #0]
 8105a04:	1d19      	adds	r1, r3, #4
 8105a06:	6029      	str	r1, [r5, #0]
 8105a08:	0601      	lsls	r1, r0, #24
 8105a0a:	d501      	bpl.n	8105a10 <_printf_i+0xec>
 8105a0c:	681e      	ldr	r6, [r3, #0]
 8105a0e:	e002      	b.n	8105a16 <_printf_i+0xf2>
 8105a10:	0646      	lsls	r6, r0, #25
 8105a12:	d5fb      	bpl.n	8105a0c <_printf_i+0xe8>
 8105a14:	881e      	ldrh	r6, [r3, #0]
 8105a16:	4854      	ldr	r0, [pc, #336]	; (8105b68 <_printf_i+0x244>)
 8105a18:	2f6f      	cmp	r7, #111	; 0x6f
 8105a1a:	bf0c      	ite	eq
 8105a1c:	2308      	moveq	r3, #8
 8105a1e:	230a      	movne	r3, #10
 8105a20:	2100      	movs	r1, #0
 8105a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8105a26:	6865      	ldr	r5, [r4, #4]
 8105a28:	60a5      	str	r5, [r4, #8]
 8105a2a:	2d00      	cmp	r5, #0
 8105a2c:	bfa2      	ittt	ge
 8105a2e:	6821      	ldrge	r1, [r4, #0]
 8105a30:	f021 0104 	bicge.w	r1, r1, #4
 8105a34:	6021      	strge	r1, [r4, #0]
 8105a36:	b90e      	cbnz	r6, 8105a3c <_printf_i+0x118>
 8105a38:	2d00      	cmp	r5, #0
 8105a3a:	d04d      	beq.n	8105ad8 <_printf_i+0x1b4>
 8105a3c:	4615      	mov	r5, r2
 8105a3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8105a42:	fb03 6711 	mls	r7, r3, r1, r6
 8105a46:	5dc7      	ldrb	r7, [r0, r7]
 8105a48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8105a4c:	4637      	mov	r7, r6
 8105a4e:	42bb      	cmp	r3, r7
 8105a50:	460e      	mov	r6, r1
 8105a52:	d9f4      	bls.n	8105a3e <_printf_i+0x11a>
 8105a54:	2b08      	cmp	r3, #8
 8105a56:	d10b      	bne.n	8105a70 <_printf_i+0x14c>
 8105a58:	6823      	ldr	r3, [r4, #0]
 8105a5a:	07de      	lsls	r6, r3, #31
 8105a5c:	d508      	bpl.n	8105a70 <_printf_i+0x14c>
 8105a5e:	6923      	ldr	r3, [r4, #16]
 8105a60:	6861      	ldr	r1, [r4, #4]
 8105a62:	4299      	cmp	r1, r3
 8105a64:	bfde      	ittt	le
 8105a66:	2330      	movle	r3, #48	; 0x30
 8105a68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8105a6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8105a70:	1b52      	subs	r2, r2, r5
 8105a72:	6122      	str	r2, [r4, #16]
 8105a74:	f8cd a000 	str.w	sl, [sp]
 8105a78:	464b      	mov	r3, r9
 8105a7a:	aa03      	add	r2, sp, #12
 8105a7c:	4621      	mov	r1, r4
 8105a7e:	4640      	mov	r0, r8
 8105a80:	f7ff fee2 	bl	8105848 <_printf_common>
 8105a84:	3001      	adds	r0, #1
 8105a86:	d14c      	bne.n	8105b22 <_printf_i+0x1fe>
 8105a88:	f04f 30ff 	mov.w	r0, #4294967295
 8105a8c:	b004      	add	sp, #16
 8105a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8105a92:	4835      	ldr	r0, [pc, #212]	; (8105b68 <_printf_i+0x244>)
 8105a94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8105a98:	6829      	ldr	r1, [r5, #0]
 8105a9a:	6823      	ldr	r3, [r4, #0]
 8105a9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8105aa0:	6029      	str	r1, [r5, #0]
 8105aa2:	061d      	lsls	r5, r3, #24
 8105aa4:	d514      	bpl.n	8105ad0 <_printf_i+0x1ac>
 8105aa6:	07df      	lsls	r7, r3, #31
 8105aa8:	bf44      	itt	mi
 8105aaa:	f043 0320 	orrmi.w	r3, r3, #32
 8105aae:	6023      	strmi	r3, [r4, #0]
 8105ab0:	b91e      	cbnz	r6, 8105aba <_printf_i+0x196>
 8105ab2:	6823      	ldr	r3, [r4, #0]
 8105ab4:	f023 0320 	bic.w	r3, r3, #32
 8105ab8:	6023      	str	r3, [r4, #0]
 8105aba:	2310      	movs	r3, #16
 8105abc:	e7b0      	b.n	8105a20 <_printf_i+0xfc>
 8105abe:	6823      	ldr	r3, [r4, #0]
 8105ac0:	f043 0320 	orr.w	r3, r3, #32
 8105ac4:	6023      	str	r3, [r4, #0]
 8105ac6:	2378      	movs	r3, #120	; 0x78
 8105ac8:	4828      	ldr	r0, [pc, #160]	; (8105b6c <_printf_i+0x248>)
 8105aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8105ace:	e7e3      	b.n	8105a98 <_printf_i+0x174>
 8105ad0:	0659      	lsls	r1, r3, #25
 8105ad2:	bf48      	it	mi
 8105ad4:	b2b6      	uxthmi	r6, r6
 8105ad6:	e7e6      	b.n	8105aa6 <_printf_i+0x182>
 8105ad8:	4615      	mov	r5, r2
 8105ada:	e7bb      	b.n	8105a54 <_printf_i+0x130>
 8105adc:	682b      	ldr	r3, [r5, #0]
 8105ade:	6826      	ldr	r6, [r4, #0]
 8105ae0:	6961      	ldr	r1, [r4, #20]
 8105ae2:	1d18      	adds	r0, r3, #4
 8105ae4:	6028      	str	r0, [r5, #0]
 8105ae6:	0635      	lsls	r5, r6, #24
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	d501      	bpl.n	8105af0 <_printf_i+0x1cc>
 8105aec:	6019      	str	r1, [r3, #0]
 8105aee:	e002      	b.n	8105af6 <_printf_i+0x1d2>
 8105af0:	0670      	lsls	r0, r6, #25
 8105af2:	d5fb      	bpl.n	8105aec <_printf_i+0x1c8>
 8105af4:	8019      	strh	r1, [r3, #0]
 8105af6:	2300      	movs	r3, #0
 8105af8:	6123      	str	r3, [r4, #16]
 8105afa:	4615      	mov	r5, r2
 8105afc:	e7ba      	b.n	8105a74 <_printf_i+0x150>
 8105afe:	682b      	ldr	r3, [r5, #0]
 8105b00:	1d1a      	adds	r2, r3, #4
 8105b02:	602a      	str	r2, [r5, #0]
 8105b04:	681d      	ldr	r5, [r3, #0]
 8105b06:	6862      	ldr	r2, [r4, #4]
 8105b08:	2100      	movs	r1, #0
 8105b0a:	4628      	mov	r0, r5
 8105b0c:	f7fa fbe8 	bl	81002e0 <memchr>
 8105b10:	b108      	cbz	r0, 8105b16 <_printf_i+0x1f2>
 8105b12:	1b40      	subs	r0, r0, r5
 8105b14:	6060      	str	r0, [r4, #4]
 8105b16:	6863      	ldr	r3, [r4, #4]
 8105b18:	6123      	str	r3, [r4, #16]
 8105b1a:	2300      	movs	r3, #0
 8105b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8105b20:	e7a8      	b.n	8105a74 <_printf_i+0x150>
 8105b22:	6923      	ldr	r3, [r4, #16]
 8105b24:	462a      	mov	r2, r5
 8105b26:	4649      	mov	r1, r9
 8105b28:	4640      	mov	r0, r8
 8105b2a:	47d0      	blx	sl
 8105b2c:	3001      	adds	r0, #1
 8105b2e:	d0ab      	beq.n	8105a88 <_printf_i+0x164>
 8105b30:	6823      	ldr	r3, [r4, #0]
 8105b32:	079b      	lsls	r3, r3, #30
 8105b34:	d413      	bmi.n	8105b5e <_printf_i+0x23a>
 8105b36:	68e0      	ldr	r0, [r4, #12]
 8105b38:	9b03      	ldr	r3, [sp, #12]
 8105b3a:	4298      	cmp	r0, r3
 8105b3c:	bfb8      	it	lt
 8105b3e:	4618      	movlt	r0, r3
 8105b40:	e7a4      	b.n	8105a8c <_printf_i+0x168>
 8105b42:	2301      	movs	r3, #1
 8105b44:	4632      	mov	r2, r6
 8105b46:	4649      	mov	r1, r9
 8105b48:	4640      	mov	r0, r8
 8105b4a:	47d0      	blx	sl
 8105b4c:	3001      	adds	r0, #1
 8105b4e:	d09b      	beq.n	8105a88 <_printf_i+0x164>
 8105b50:	3501      	adds	r5, #1
 8105b52:	68e3      	ldr	r3, [r4, #12]
 8105b54:	9903      	ldr	r1, [sp, #12]
 8105b56:	1a5b      	subs	r3, r3, r1
 8105b58:	42ab      	cmp	r3, r5
 8105b5a:	dcf2      	bgt.n	8105b42 <_printf_i+0x21e>
 8105b5c:	e7eb      	b.n	8105b36 <_printf_i+0x212>
 8105b5e:	2500      	movs	r5, #0
 8105b60:	f104 0619 	add.w	r6, r4, #25
 8105b64:	e7f5      	b.n	8105b52 <_printf_i+0x22e>
 8105b66:	bf00      	nop
 8105b68:	0810644b 	.word	0x0810644b
 8105b6c:	0810645c 	.word	0x0810645c

08105b70 <_sbrk_r>:
 8105b70:	b538      	push	{r3, r4, r5, lr}
 8105b72:	4d06      	ldr	r5, [pc, #24]	; (8105b8c <_sbrk_r+0x1c>)
 8105b74:	2300      	movs	r3, #0
 8105b76:	4604      	mov	r4, r0
 8105b78:	4608      	mov	r0, r1
 8105b7a:	602b      	str	r3, [r5, #0]
 8105b7c:	f7fb fe16 	bl	81017ac <_sbrk>
 8105b80:	1c43      	adds	r3, r0, #1
 8105b82:	d102      	bne.n	8105b8a <_sbrk_r+0x1a>
 8105b84:	682b      	ldr	r3, [r5, #0]
 8105b86:	b103      	cbz	r3, 8105b8a <_sbrk_r+0x1a>
 8105b88:	6023      	str	r3, [r4, #0]
 8105b8a:	bd38      	pop	{r3, r4, r5, pc}
 8105b8c:	100004d8 	.word	0x100004d8

08105b90 <__swbuf_r>:
 8105b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105b92:	460e      	mov	r6, r1
 8105b94:	4614      	mov	r4, r2
 8105b96:	4605      	mov	r5, r0
 8105b98:	b118      	cbz	r0, 8105ba2 <__swbuf_r+0x12>
 8105b9a:	6983      	ldr	r3, [r0, #24]
 8105b9c:	b90b      	cbnz	r3, 8105ba2 <__swbuf_r+0x12>
 8105b9e:	f000 f9d9 	bl	8105f54 <__sinit>
 8105ba2:	4b21      	ldr	r3, [pc, #132]	; (8105c28 <__swbuf_r+0x98>)
 8105ba4:	429c      	cmp	r4, r3
 8105ba6:	d12b      	bne.n	8105c00 <__swbuf_r+0x70>
 8105ba8:	686c      	ldr	r4, [r5, #4]
 8105baa:	69a3      	ldr	r3, [r4, #24]
 8105bac:	60a3      	str	r3, [r4, #8]
 8105bae:	89a3      	ldrh	r3, [r4, #12]
 8105bb0:	071a      	lsls	r2, r3, #28
 8105bb2:	d52f      	bpl.n	8105c14 <__swbuf_r+0x84>
 8105bb4:	6923      	ldr	r3, [r4, #16]
 8105bb6:	b36b      	cbz	r3, 8105c14 <__swbuf_r+0x84>
 8105bb8:	6923      	ldr	r3, [r4, #16]
 8105bba:	6820      	ldr	r0, [r4, #0]
 8105bbc:	1ac0      	subs	r0, r0, r3
 8105bbe:	6963      	ldr	r3, [r4, #20]
 8105bc0:	b2f6      	uxtb	r6, r6
 8105bc2:	4283      	cmp	r3, r0
 8105bc4:	4637      	mov	r7, r6
 8105bc6:	dc04      	bgt.n	8105bd2 <__swbuf_r+0x42>
 8105bc8:	4621      	mov	r1, r4
 8105bca:	4628      	mov	r0, r5
 8105bcc:	f000 f92e 	bl	8105e2c <_fflush_r>
 8105bd0:	bb30      	cbnz	r0, 8105c20 <__swbuf_r+0x90>
 8105bd2:	68a3      	ldr	r3, [r4, #8]
 8105bd4:	3b01      	subs	r3, #1
 8105bd6:	60a3      	str	r3, [r4, #8]
 8105bd8:	6823      	ldr	r3, [r4, #0]
 8105bda:	1c5a      	adds	r2, r3, #1
 8105bdc:	6022      	str	r2, [r4, #0]
 8105bde:	701e      	strb	r6, [r3, #0]
 8105be0:	6963      	ldr	r3, [r4, #20]
 8105be2:	3001      	adds	r0, #1
 8105be4:	4283      	cmp	r3, r0
 8105be6:	d004      	beq.n	8105bf2 <__swbuf_r+0x62>
 8105be8:	89a3      	ldrh	r3, [r4, #12]
 8105bea:	07db      	lsls	r3, r3, #31
 8105bec:	d506      	bpl.n	8105bfc <__swbuf_r+0x6c>
 8105bee:	2e0a      	cmp	r6, #10
 8105bf0:	d104      	bne.n	8105bfc <__swbuf_r+0x6c>
 8105bf2:	4621      	mov	r1, r4
 8105bf4:	4628      	mov	r0, r5
 8105bf6:	f000 f919 	bl	8105e2c <_fflush_r>
 8105bfa:	b988      	cbnz	r0, 8105c20 <__swbuf_r+0x90>
 8105bfc:	4638      	mov	r0, r7
 8105bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8105c00:	4b0a      	ldr	r3, [pc, #40]	; (8105c2c <__swbuf_r+0x9c>)
 8105c02:	429c      	cmp	r4, r3
 8105c04:	d101      	bne.n	8105c0a <__swbuf_r+0x7a>
 8105c06:	68ac      	ldr	r4, [r5, #8]
 8105c08:	e7cf      	b.n	8105baa <__swbuf_r+0x1a>
 8105c0a:	4b09      	ldr	r3, [pc, #36]	; (8105c30 <__swbuf_r+0xa0>)
 8105c0c:	429c      	cmp	r4, r3
 8105c0e:	bf08      	it	eq
 8105c10:	68ec      	ldreq	r4, [r5, #12]
 8105c12:	e7ca      	b.n	8105baa <__swbuf_r+0x1a>
 8105c14:	4621      	mov	r1, r4
 8105c16:	4628      	mov	r0, r5
 8105c18:	f000 f80c 	bl	8105c34 <__swsetup_r>
 8105c1c:	2800      	cmp	r0, #0
 8105c1e:	d0cb      	beq.n	8105bb8 <__swbuf_r+0x28>
 8105c20:	f04f 37ff 	mov.w	r7, #4294967295
 8105c24:	e7ea      	b.n	8105bfc <__swbuf_r+0x6c>
 8105c26:	bf00      	nop
 8105c28:	08106490 	.word	0x08106490
 8105c2c:	081064b0 	.word	0x081064b0
 8105c30:	08106470 	.word	0x08106470

08105c34 <__swsetup_r>:
 8105c34:	4b32      	ldr	r3, [pc, #200]	; (8105d00 <__swsetup_r+0xcc>)
 8105c36:	b570      	push	{r4, r5, r6, lr}
 8105c38:	681d      	ldr	r5, [r3, #0]
 8105c3a:	4606      	mov	r6, r0
 8105c3c:	460c      	mov	r4, r1
 8105c3e:	b125      	cbz	r5, 8105c4a <__swsetup_r+0x16>
 8105c40:	69ab      	ldr	r3, [r5, #24]
 8105c42:	b913      	cbnz	r3, 8105c4a <__swsetup_r+0x16>
 8105c44:	4628      	mov	r0, r5
 8105c46:	f000 f985 	bl	8105f54 <__sinit>
 8105c4a:	4b2e      	ldr	r3, [pc, #184]	; (8105d04 <__swsetup_r+0xd0>)
 8105c4c:	429c      	cmp	r4, r3
 8105c4e:	d10f      	bne.n	8105c70 <__swsetup_r+0x3c>
 8105c50:	686c      	ldr	r4, [r5, #4]
 8105c52:	89a3      	ldrh	r3, [r4, #12]
 8105c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8105c58:	0719      	lsls	r1, r3, #28
 8105c5a:	d42c      	bmi.n	8105cb6 <__swsetup_r+0x82>
 8105c5c:	06dd      	lsls	r5, r3, #27
 8105c5e:	d411      	bmi.n	8105c84 <__swsetup_r+0x50>
 8105c60:	2309      	movs	r3, #9
 8105c62:	6033      	str	r3, [r6, #0]
 8105c64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8105c68:	81a3      	strh	r3, [r4, #12]
 8105c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8105c6e:	e03e      	b.n	8105cee <__swsetup_r+0xba>
 8105c70:	4b25      	ldr	r3, [pc, #148]	; (8105d08 <__swsetup_r+0xd4>)
 8105c72:	429c      	cmp	r4, r3
 8105c74:	d101      	bne.n	8105c7a <__swsetup_r+0x46>
 8105c76:	68ac      	ldr	r4, [r5, #8]
 8105c78:	e7eb      	b.n	8105c52 <__swsetup_r+0x1e>
 8105c7a:	4b24      	ldr	r3, [pc, #144]	; (8105d0c <__swsetup_r+0xd8>)
 8105c7c:	429c      	cmp	r4, r3
 8105c7e:	bf08      	it	eq
 8105c80:	68ec      	ldreq	r4, [r5, #12]
 8105c82:	e7e6      	b.n	8105c52 <__swsetup_r+0x1e>
 8105c84:	0758      	lsls	r0, r3, #29
 8105c86:	d512      	bpl.n	8105cae <__swsetup_r+0x7a>
 8105c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105c8a:	b141      	cbz	r1, 8105c9e <__swsetup_r+0x6a>
 8105c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105c90:	4299      	cmp	r1, r3
 8105c92:	d002      	beq.n	8105c9a <__swsetup_r+0x66>
 8105c94:	4630      	mov	r0, r6
 8105c96:	f7ff fb9d 	bl	81053d4 <_free_r>
 8105c9a:	2300      	movs	r3, #0
 8105c9c:	6363      	str	r3, [r4, #52]	; 0x34
 8105c9e:	89a3      	ldrh	r3, [r4, #12]
 8105ca0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8105ca4:	81a3      	strh	r3, [r4, #12]
 8105ca6:	2300      	movs	r3, #0
 8105ca8:	6063      	str	r3, [r4, #4]
 8105caa:	6923      	ldr	r3, [r4, #16]
 8105cac:	6023      	str	r3, [r4, #0]
 8105cae:	89a3      	ldrh	r3, [r4, #12]
 8105cb0:	f043 0308 	orr.w	r3, r3, #8
 8105cb4:	81a3      	strh	r3, [r4, #12]
 8105cb6:	6923      	ldr	r3, [r4, #16]
 8105cb8:	b94b      	cbnz	r3, 8105cce <__swsetup_r+0x9a>
 8105cba:	89a3      	ldrh	r3, [r4, #12]
 8105cbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8105cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105cc4:	d003      	beq.n	8105cce <__swsetup_r+0x9a>
 8105cc6:	4621      	mov	r1, r4
 8105cc8:	4630      	mov	r0, r6
 8105cca:	f000 fa09 	bl	81060e0 <__smakebuf_r>
 8105cce:	89a0      	ldrh	r0, [r4, #12]
 8105cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8105cd4:	f010 0301 	ands.w	r3, r0, #1
 8105cd8:	d00a      	beq.n	8105cf0 <__swsetup_r+0xbc>
 8105cda:	2300      	movs	r3, #0
 8105cdc:	60a3      	str	r3, [r4, #8]
 8105cde:	6963      	ldr	r3, [r4, #20]
 8105ce0:	425b      	negs	r3, r3
 8105ce2:	61a3      	str	r3, [r4, #24]
 8105ce4:	6923      	ldr	r3, [r4, #16]
 8105ce6:	b943      	cbnz	r3, 8105cfa <__swsetup_r+0xc6>
 8105ce8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8105cec:	d1ba      	bne.n	8105c64 <__swsetup_r+0x30>
 8105cee:	bd70      	pop	{r4, r5, r6, pc}
 8105cf0:	0781      	lsls	r1, r0, #30
 8105cf2:	bf58      	it	pl
 8105cf4:	6963      	ldrpl	r3, [r4, #20]
 8105cf6:	60a3      	str	r3, [r4, #8]
 8105cf8:	e7f4      	b.n	8105ce4 <__swsetup_r+0xb0>
 8105cfa:	2000      	movs	r0, #0
 8105cfc:	e7f7      	b.n	8105cee <__swsetup_r+0xba>
 8105cfe:	bf00      	nop
 8105d00:	10000010 	.word	0x10000010
 8105d04:	08106490 	.word	0x08106490
 8105d08:	081064b0 	.word	0x081064b0
 8105d0c:	08106470 	.word	0x08106470

08105d10 <abort>:
 8105d10:	b508      	push	{r3, lr}
 8105d12:	2006      	movs	r0, #6
 8105d14:	f000 fa58 	bl	81061c8 <raise>
 8105d18:	2001      	movs	r0, #1
 8105d1a:	f7fb fccf 	bl	81016bc <_exit>
	...

08105d20 <__sflush_r>:
 8105d20:	898a      	ldrh	r2, [r1, #12]
 8105d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105d26:	4605      	mov	r5, r0
 8105d28:	0710      	lsls	r0, r2, #28
 8105d2a:	460c      	mov	r4, r1
 8105d2c:	d458      	bmi.n	8105de0 <__sflush_r+0xc0>
 8105d2e:	684b      	ldr	r3, [r1, #4]
 8105d30:	2b00      	cmp	r3, #0
 8105d32:	dc05      	bgt.n	8105d40 <__sflush_r+0x20>
 8105d34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8105d36:	2b00      	cmp	r3, #0
 8105d38:	dc02      	bgt.n	8105d40 <__sflush_r+0x20>
 8105d3a:	2000      	movs	r0, #0
 8105d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8105d40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8105d42:	2e00      	cmp	r6, #0
 8105d44:	d0f9      	beq.n	8105d3a <__sflush_r+0x1a>
 8105d46:	2300      	movs	r3, #0
 8105d48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8105d4c:	682f      	ldr	r7, [r5, #0]
 8105d4e:	602b      	str	r3, [r5, #0]
 8105d50:	d032      	beq.n	8105db8 <__sflush_r+0x98>
 8105d52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8105d54:	89a3      	ldrh	r3, [r4, #12]
 8105d56:	075a      	lsls	r2, r3, #29
 8105d58:	d505      	bpl.n	8105d66 <__sflush_r+0x46>
 8105d5a:	6863      	ldr	r3, [r4, #4]
 8105d5c:	1ac0      	subs	r0, r0, r3
 8105d5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8105d60:	b10b      	cbz	r3, 8105d66 <__sflush_r+0x46>
 8105d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8105d64:	1ac0      	subs	r0, r0, r3
 8105d66:	2300      	movs	r3, #0
 8105d68:	4602      	mov	r2, r0
 8105d6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8105d6c:	6a21      	ldr	r1, [r4, #32]
 8105d6e:	4628      	mov	r0, r5
 8105d70:	47b0      	blx	r6
 8105d72:	1c43      	adds	r3, r0, #1
 8105d74:	89a3      	ldrh	r3, [r4, #12]
 8105d76:	d106      	bne.n	8105d86 <__sflush_r+0x66>
 8105d78:	6829      	ldr	r1, [r5, #0]
 8105d7a:	291d      	cmp	r1, #29
 8105d7c:	d82c      	bhi.n	8105dd8 <__sflush_r+0xb8>
 8105d7e:	4a2a      	ldr	r2, [pc, #168]	; (8105e28 <__sflush_r+0x108>)
 8105d80:	40ca      	lsrs	r2, r1
 8105d82:	07d6      	lsls	r6, r2, #31
 8105d84:	d528      	bpl.n	8105dd8 <__sflush_r+0xb8>
 8105d86:	2200      	movs	r2, #0
 8105d88:	6062      	str	r2, [r4, #4]
 8105d8a:	04d9      	lsls	r1, r3, #19
 8105d8c:	6922      	ldr	r2, [r4, #16]
 8105d8e:	6022      	str	r2, [r4, #0]
 8105d90:	d504      	bpl.n	8105d9c <__sflush_r+0x7c>
 8105d92:	1c42      	adds	r2, r0, #1
 8105d94:	d101      	bne.n	8105d9a <__sflush_r+0x7a>
 8105d96:	682b      	ldr	r3, [r5, #0]
 8105d98:	b903      	cbnz	r3, 8105d9c <__sflush_r+0x7c>
 8105d9a:	6560      	str	r0, [r4, #84]	; 0x54
 8105d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105d9e:	602f      	str	r7, [r5, #0]
 8105da0:	2900      	cmp	r1, #0
 8105da2:	d0ca      	beq.n	8105d3a <__sflush_r+0x1a>
 8105da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105da8:	4299      	cmp	r1, r3
 8105daa:	d002      	beq.n	8105db2 <__sflush_r+0x92>
 8105dac:	4628      	mov	r0, r5
 8105dae:	f7ff fb11 	bl	81053d4 <_free_r>
 8105db2:	2000      	movs	r0, #0
 8105db4:	6360      	str	r0, [r4, #52]	; 0x34
 8105db6:	e7c1      	b.n	8105d3c <__sflush_r+0x1c>
 8105db8:	6a21      	ldr	r1, [r4, #32]
 8105dba:	2301      	movs	r3, #1
 8105dbc:	4628      	mov	r0, r5
 8105dbe:	47b0      	blx	r6
 8105dc0:	1c41      	adds	r1, r0, #1
 8105dc2:	d1c7      	bne.n	8105d54 <__sflush_r+0x34>
 8105dc4:	682b      	ldr	r3, [r5, #0]
 8105dc6:	2b00      	cmp	r3, #0
 8105dc8:	d0c4      	beq.n	8105d54 <__sflush_r+0x34>
 8105dca:	2b1d      	cmp	r3, #29
 8105dcc:	d001      	beq.n	8105dd2 <__sflush_r+0xb2>
 8105dce:	2b16      	cmp	r3, #22
 8105dd0:	d101      	bne.n	8105dd6 <__sflush_r+0xb6>
 8105dd2:	602f      	str	r7, [r5, #0]
 8105dd4:	e7b1      	b.n	8105d3a <__sflush_r+0x1a>
 8105dd6:	89a3      	ldrh	r3, [r4, #12]
 8105dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8105ddc:	81a3      	strh	r3, [r4, #12]
 8105dde:	e7ad      	b.n	8105d3c <__sflush_r+0x1c>
 8105de0:	690f      	ldr	r7, [r1, #16]
 8105de2:	2f00      	cmp	r7, #0
 8105de4:	d0a9      	beq.n	8105d3a <__sflush_r+0x1a>
 8105de6:	0793      	lsls	r3, r2, #30
 8105de8:	680e      	ldr	r6, [r1, #0]
 8105dea:	bf08      	it	eq
 8105dec:	694b      	ldreq	r3, [r1, #20]
 8105dee:	600f      	str	r7, [r1, #0]
 8105df0:	bf18      	it	ne
 8105df2:	2300      	movne	r3, #0
 8105df4:	eba6 0807 	sub.w	r8, r6, r7
 8105df8:	608b      	str	r3, [r1, #8]
 8105dfa:	f1b8 0f00 	cmp.w	r8, #0
 8105dfe:	dd9c      	ble.n	8105d3a <__sflush_r+0x1a>
 8105e00:	6a21      	ldr	r1, [r4, #32]
 8105e02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8105e04:	4643      	mov	r3, r8
 8105e06:	463a      	mov	r2, r7
 8105e08:	4628      	mov	r0, r5
 8105e0a:	47b0      	blx	r6
 8105e0c:	2800      	cmp	r0, #0
 8105e0e:	dc06      	bgt.n	8105e1e <__sflush_r+0xfe>
 8105e10:	89a3      	ldrh	r3, [r4, #12]
 8105e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8105e16:	81a3      	strh	r3, [r4, #12]
 8105e18:	f04f 30ff 	mov.w	r0, #4294967295
 8105e1c:	e78e      	b.n	8105d3c <__sflush_r+0x1c>
 8105e1e:	4407      	add	r7, r0
 8105e20:	eba8 0800 	sub.w	r8, r8, r0
 8105e24:	e7e9      	b.n	8105dfa <__sflush_r+0xda>
 8105e26:	bf00      	nop
 8105e28:	20400001 	.word	0x20400001

08105e2c <_fflush_r>:
 8105e2c:	b538      	push	{r3, r4, r5, lr}
 8105e2e:	690b      	ldr	r3, [r1, #16]
 8105e30:	4605      	mov	r5, r0
 8105e32:	460c      	mov	r4, r1
 8105e34:	b913      	cbnz	r3, 8105e3c <_fflush_r+0x10>
 8105e36:	2500      	movs	r5, #0
 8105e38:	4628      	mov	r0, r5
 8105e3a:	bd38      	pop	{r3, r4, r5, pc}
 8105e3c:	b118      	cbz	r0, 8105e46 <_fflush_r+0x1a>
 8105e3e:	6983      	ldr	r3, [r0, #24]
 8105e40:	b90b      	cbnz	r3, 8105e46 <_fflush_r+0x1a>
 8105e42:	f000 f887 	bl	8105f54 <__sinit>
 8105e46:	4b14      	ldr	r3, [pc, #80]	; (8105e98 <_fflush_r+0x6c>)
 8105e48:	429c      	cmp	r4, r3
 8105e4a:	d11b      	bne.n	8105e84 <_fflush_r+0x58>
 8105e4c:	686c      	ldr	r4, [r5, #4]
 8105e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8105e52:	2b00      	cmp	r3, #0
 8105e54:	d0ef      	beq.n	8105e36 <_fflush_r+0xa>
 8105e56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8105e58:	07d0      	lsls	r0, r2, #31
 8105e5a:	d404      	bmi.n	8105e66 <_fflush_r+0x3a>
 8105e5c:	0599      	lsls	r1, r3, #22
 8105e5e:	d402      	bmi.n	8105e66 <_fflush_r+0x3a>
 8105e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105e62:	f000 f915 	bl	8106090 <__retarget_lock_acquire_recursive>
 8105e66:	4628      	mov	r0, r5
 8105e68:	4621      	mov	r1, r4
 8105e6a:	f7ff ff59 	bl	8105d20 <__sflush_r>
 8105e6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8105e70:	07da      	lsls	r2, r3, #31
 8105e72:	4605      	mov	r5, r0
 8105e74:	d4e0      	bmi.n	8105e38 <_fflush_r+0xc>
 8105e76:	89a3      	ldrh	r3, [r4, #12]
 8105e78:	059b      	lsls	r3, r3, #22
 8105e7a:	d4dd      	bmi.n	8105e38 <_fflush_r+0xc>
 8105e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105e7e:	f000 f908 	bl	8106092 <__retarget_lock_release_recursive>
 8105e82:	e7d9      	b.n	8105e38 <_fflush_r+0xc>
 8105e84:	4b05      	ldr	r3, [pc, #20]	; (8105e9c <_fflush_r+0x70>)
 8105e86:	429c      	cmp	r4, r3
 8105e88:	d101      	bne.n	8105e8e <_fflush_r+0x62>
 8105e8a:	68ac      	ldr	r4, [r5, #8]
 8105e8c:	e7df      	b.n	8105e4e <_fflush_r+0x22>
 8105e8e:	4b04      	ldr	r3, [pc, #16]	; (8105ea0 <_fflush_r+0x74>)
 8105e90:	429c      	cmp	r4, r3
 8105e92:	bf08      	it	eq
 8105e94:	68ec      	ldreq	r4, [r5, #12]
 8105e96:	e7da      	b.n	8105e4e <_fflush_r+0x22>
 8105e98:	08106490 	.word	0x08106490
 8105e9c:	081064b0 	.word	0x081064b0
 8105ea0:	08106470 	.word	0x08106470

08105ea4 <std>:
 8105ea4:	2300      	movs	r3, #0
 8105ea6:	b510      	push	{r4, lr}
 8105ea8:	4604      	mov	r4, r0
 8105eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8105eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8105eb2:	6083      	str	r3, [r0, #8]
 8105eb4:	8181      	strh	r1, [r0, #12]
 8105eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8105eb8:	81c2      	strh	r2, [r0, #14]
 8105eba:	6183      	str	r3, [r0, #24]
 8105ebc:	4619      	mov	r1, r3
 8105ebe:	2208      	movs	r2, #8
 8105ec0:	305c      	adds	r0, #92	; 0x5c
 8105ec2:	f7ff fa09 	bl	81052d8 <memset>
 8105ec6:	4b05      	ldr	r3, [pc, #20]	; (8105edc <std+0x38>)
 8105ec8:	6263      	str	r3, [r4, #36]	; 0x24
 8105eca:	4b05      	ldr	r3, [pc, #20]	; (8105ee0 <std+0x3c>)
 8105ecc:	62a3      	str	r3, [r4, #40]	; 0x28
 8105ece:	4b05      	ldr	r3, [pc, #20]	; (8105ee4 <std+0x40>)
 8105ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8105ed2:	4b05      	ldr	r3, [pc, #20]	; (8105ee8 <std+0x44>)
 8105ed4:	6224      	str	r4, [r4, #32]
 8105ed6:	6323      	str	r3, [r4, #48]	; 0x30
 8105ed8:	bd10      	pop	{r4, pc}
 8105eda:	bf00      	nop
 8105edc:	08106201 	.word	0x08106201
 8105ee0:	08106223 	.word	0x08106223
 8105ee4:	0810625b 	.word	0x0810625b
 8105ee8:	0810627f 	.word	0x0810627f

08105eec <_cleanup_r>:
 8105eec:	4901      	ldr	r1, [pc, #4]	; (8105ef4 <_cleanup_r+0x8>)
 8105eee:	f000 b8af 	b.w	8106050 <_fwalk_reent>
 8105ef2:	bf00      	nop
 8105ef4:	08105e2d 	.word	0x08105e2d

08105ef8 <__sfmoreglue>:
 8105ef8:	b570      	push	{r4, r5, r6, lr}
 8105efa:	2268      	movs	r2, #104	; 0x68
 8105efc:	1e4d      	subs	r5, r1, #1
 8105efe:	4355      	muls	r5, r2
 8105f00:	460e      	mov	r6, r1
 8105f02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8105f06:	f7ff fad1 	bl	81054ac <_malloc_r>
 8105f0a:	4604      	mov	r4, r0
 8105f0c:	b140      	cbz	r0, 8105f20 <__sfmoreglue+0x28>
 8105f0e:	2100      	movs	r1, #0
 8105f10:	e9c0 1600 	strd	r1, r6, [r0]
 8105f14:	300c      	adds	r0, #12
 8105f16:	60a0      	str	r0, [r4, #8]
 8105f18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8105f1c:	f7ff f9dc 	bl	81052d8 <memset>
 8105f20:	4620      	mov	r0, r4
 8105f22:	bd70      	pop	{r4, r5, r6, pc}

08105f24 <__sfp_lock_acquire>:
 8105f24:	4801      	ldr	r0, [pc, #4]	; (8105f2c <__sfp_lock_acquire+0x8>)
 8105f26:	f000 b8b3 	b.w	8106090 <__retarget_lock_acquire_recursive>
 8105f2a:	bf00      	nop
 8105f2c:	100004d5 	.word	0x100004d5

08105f30 <__sfp_lock_release>:
 8105f30:	4801      	ldr	r0, [pc, #4]	; (8105f38 <__sfp_lock_release+0x8>)
 8105f32:	f000 b8ae 	b.w	8106092 <__retarget_lock_release_recursive>
 8105f36:	bf00      	nop
 8105f38:	100004d5 	.word	0x100004d5

08105f3c <__sinit_lock_acquire>:
 8105f3c:	4801      	ldr	r0, [pc, #4]	; (8105f44 <__sinit_lock_acquire+0x8>)
 8105f3e:	f000 b8a7 	b.w	8106090 <__retarget_lock_acquire_recursive>
 8105f42:	bf00      	nop
 8105f44:	100004d6 	.word	0x100004d6

08105f48 <__sinit_lock_release>:
 8105f48:	4801      	ldr	r0, [pc, #4]	; (8105f50 <__sinit_lock_release+0x8>)
 8105f4a:	f000 b8a2 	b.w	8106092 <__retarget_lock_release_recursive>
 8105f4e:	bf00      	nop
 8105f50:	100004d6 	.word	0x100004d6

08105f54 <__sinit>:
 8105f54:	b510      	push	{r4, lr}
 8105f56:	4604      	mov	r4, r0
 8105f58:	f7ff fff0 	bl	8105f3c <__sinit_lock_acquire>
 8105f5c:	69a3      	ldr	r3, [r4, #24]
 8105f5e:	b11b      	cbz	r3, 8105f68 <__sinit+0x14>
 8105f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105f64:	f7ff bff0 	b.w	8105f48 <__sinit_lock_release>
 8105f68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8105f6c:	6523      	str	r3, [r4, #80]	; 0x50
 8105f6e:	4b13      	ldr	r3, [pc, #76]	; (8105fbc <__sinit+0x68>)
 8105f70:	4a13      	ldr	r2, [pc, #76]	; (8105fc0 <__sinit+0x6c>)
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	62a2      	str	r2, [r4, #40]	; 0x28
 8105f76:	42a3      	cmp	r3, r4
 8105f78:	bf04      	itt	eq
 8105f7a:	2301      	moveq	r3, #1
 8105f7c:	61a3      	streq	r3, [r4, #24]
 8105f7e:	4620      	mov	r0, r4
 8105f80:	f000 f820 	bl	8105fc4 <__sfp>
 8105f84:	6060      	str	r0, [r4, #4]
 8105f86:	4620      	mov	r0, r4
 8105f88:	f000 f81c 	bl	8105fc4 <__sfp>
 8105f8c:	60a0      	str	r0, [r4, #8]
 8105f8e:	4620      	mov	r0, r4
 8105f90:	f000 f818 	bl	8105fc4 <__sfp>
 8105f94:	2200      	movs	r2, #0
 8105f96:	60e0      	str	r0, [r4, #12]
 8105f98:	2104      	movs	r1, #4
 8105f9a:	6860      	ldr	r0, [r4, #4]
 8105f9c:	f7ff ff82 	bl	8105ea4 <std>
 8105fa0:	68a0      	ldr	r0, [r4, #8]
 8105fa2:	2201      	movs	r2, #1
 8105fa4:	2109      	movs	r1, #9
 8105fa6:	f7ff ff7d 	bl	8105ea4 <std>
 8105faa:	68e0      	ldr	r0, [r4, #12]
 8105fac:	2202      	movs	r2, #2
 8105fae:	2112      	movs	r1, #18
 8105fb0:	f7ff ff78 	bl	8105ea4 <std>
 8105fb4:	2301      	movs	r3, #1
 8105fb6:	61a3      	str	r3, [r4, #24]
 8105fb8:	e7d2      	b.n	8105f60 <__sinit+0xc>
 8105fba:	bf00      	nop
 8105fbc:	08106388 	.word	0x08106388
 8105fc0:	08105eed 	.word	0x08105eed

08105fc4 <__sfp>:
 8105fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105fc6:	4607      	mov	r7, r0
 8105fc8:	f7ff ffac 	bl	8105f24 <__sfp_lock_acquire>
 8105fcc:	4b1e      	ldr	r3, [pc, #120]	; (8106048 <__sfp+0x84>)
 8105fce:	681e      	ldr	r6, [r3, #0]
 8105fd0:	69b3      	ldr	r3, [r6, #24]
 8105fd2:	b913      	cbnz	r3, 8105fda <__sfp+0x16>
 8105fd4:	4630      	mov	r0, r6
 8105fd6:	f7ff ffbd 	bl	8105f54 <__sinit>
 8105fda:	3648      	adds	r6, #72	; 0x48
 8105fdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8105fe0:	3b01      	subs	r3, #1
 8105fe2:	d503      	bpl.n	8105fec <__sfp+0x28>
 8105fe4:	6833      	ldr	r3, [r6, #0]
 8105fe6:	b30b      	cbz	r3, 810602c <__sfp+0x68>
 8105fe8:	6836      	ldr	r6, [r6, #0]
 8105fea:	e7f7      	b.n	8105fdc <__sfp+0x18>
 8105fec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8105ff0:	b9d5      	cbnz	r5, 8106028 <__sfp+0x64>
 8105ff2:	4b16      	ldr	r3, [pc, #88]	; (810604c <__sfp+0x88>)
 8105ff4:	60e3      	str	r3, [r4, #12]
 8105ff6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8105ffa:	6665      	str	r5, [r4, #100]	; 0x64
 8105ffc:	f000 f847 	bl	810608e <__retarget_lock_init_recursive>
 8106000:	f7ff ff96 	bl	8105f30 <__sfp_lock_release>
 8106004:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8106008:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810600c:	6025      	str	r5, [r4, #0]
 810600e:	61a5      	str	r5, [r4, #24]
 8106010:	2208      	movs	r2, #8
 8106012:	4629      	mov	r1, r5
 8106014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8106018:	f7ff f95e 	bl	81052d8 <memset>
 810601c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8106020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8106024:	4620      	mov	r0, r4
 8106026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106028:	3468      	adds	r4, #104	; 0x68
 810602a:	e7d9      	b.n	8105fe0 <__sfp+0x1c>
 810602c:	2104      	movs	r1, #4
 810602e:	4638      	mov	r0, r7
 8106030:	f7ff ff62 	bl	8105ef8 <__sfmoreglue>
 8106034:	4604      	mov	r4, r0
 8106036:	6030      	str	r0, [r6, #0]
 8106038:	2800      	cmp	r0, #0
 810603a:	d1d5      	bne.n	8105fe8 <__sfp+0x24>
 810603c:	f7ff ff78 	bl	8105f30 <__sfp_lock_release>
 8106040:	230c      	movs	r3, #12
 8106042:	603b      	str	r3, [r7, #0]
 8106044:	e7ee      	b.n	8106024 <__sfp+0x60>
 8106046:	bf00      	nop
 8106048:	08106388 	.word	0x08106388
 810604c:	ffff0001 	.word	0xffff0001

08106050 <_fwalk_reent>:
 8106050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106054:	4606      	mov	r6, r0
 8106056:	4688      	mov	r8, r1
 8106058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810605c:	2700      	movs	r7, #0
 810605e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8106062:	f1b9 0901 	subs.w	r9, r9, #1
 8106066:	d505      	bpl.n	8106074 <_fwalk_reent+0x24>
 8106068:	6824      	ldr	r4, [r4, #0]
 810606a:	2c00      	cmp	r4, #0
 810606c:	d1f7      	bne.n	810605e <_fwalk_reent+0xe>
 810606e:	4638      	mov	r0, r7
 8106070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106074:	89ab      	ldrh	r3, [r5, #12]
 8106076:	2b01      	cmp	r3, #1
 8106078:	d907      	bls.n	810608a <_fwalk_reent+0x3a>
 810607a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810607e:	3301      	adds	r3, #1
 8106080:	d003      	beq.n	810608a <_fwalk_reent+0x3a>
 8106082:	4629      	mov	r1, r5
 8106084:	4630      	mov	r0, r6
 8106086:	47c0      	blx	r8
 8106088:	4307      	orrs	r7, r0
 810608a:	3568      	adds	r5, #104	; 0x68
 810608c:	e7e9      	b.n	8106062 <_fwalk_reent+0x12>

0810608e <__retarget_lock_init_recursive>:
 810608e:	4770      	bx	lr

08106090 <__retarget_lock_acquire_recursive>:
 8106090:	4770      	bx	lr

08106092 <__retarget_lock_release_recursive>:
 8106092:	4770      	bx	lr

08106094 <__swhatbuf_r>:
 8106094:	b570      	push	{r4, r5, r6, lr}
 8106096:	460e      	mov	r6, r1
 8106098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810609c:	2900      	cmp	r1, #0
 810609e:	b096      	sub	sp, #88	; 0x58
 81060a0:	4614      	mov	r4, r2
 81060a2:	461d      	mov	r5, r3
 81060a4:	da08      	bge.n	81060b8 <__swhatbuf_r+0x24>
 81060a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 81060aa:	2200      	movs	r2, #0
 81060ac:	602a      	str	r2, [r5, #0]
 81060ae:	061a      	lsls	r2, r3, #24
 81060b0:	d410      	bmi.n	81060d4 <__swhatbuf_r+0x40>
 81060b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81060b6:	e00e      	b.n	81060d6 <__swhatbuf_r+0x42>
 81060b8:	466a      	mov	r2, sp
 81060ba:	f000 f907 	bl	81062cc <_fstat_r>
 81060be:	2800      	cmp	r0, #0
 81060c0:	dbf1      	blt.n	81060a6 <__swhatbuf_r+0x12>
 81060c2:	9a01      	ldr	r2, [sp, #4]
 81060c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 81060c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 81060cc:	425a      	negs	r2, r3
 81060ce:	415a      	adcs	r2, r3
 81060d0:	602a      	str	r2, [r5, #0]
 81060d2:	e7ee      	b.n	81060b2 <__swhatbuf_r+0x1e>
 81060d4:	2340      	movs	r3, #64	; 0x40
 81060d6:	2000      	movs	r0, #0
 81060d8:	6023      	str	r3, [r4, #0]
 81060da:	b016      	add	sp, #88	; 0x58
 81060dc:	bd70      	pop	{r4, r5, r6, pc}
	...

081060e0 <__smakebuf_r>:
 81060e0:	898b      	ldrh	r3, [r1, #12]
 81060e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 81060e4:	079d      	lsls	r5, r3, #30
 81060e6:	4606      	mov	r6, r0
 81060e8:	460c      	mov	r4, r1
 81060ea:	d507      	bpl.n	81060fc <__smakebuf_r+0x1c>
 81060ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 81060f0:	6023      	str	r3, [r4, #0]
 81060f2:	6123      	str	r3, [r4, #16]
 81060f4:	2301      	movs	r3, #1
 81060f6:	6163      	str	r3, [r4, #20]
 81060f8:	b002      	add	sp, #8
 81060fa:	bd70      	pop	{r4, r5, r6, pc}
 81060fc:	ab01      	add	r3, sp, #4
 81060fe:	466a      	mov	r2, sp
 8106100:	f7ff ffc8 	bl	8106094 <__swhatbuf_r>
 8106104:	9900      	ldr	r1, [sp, #0]
 8106106:	4605      	mov	r5, r0
 8106108:	4630      	mov	r0, r6
 810610a:	f7ff f9cf 	bl	81054ac <_malloc_r>
 810610e:	b948      	cbnz	r0, 8106124 <__smakebuf_r+0x44>
 8106110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8106114:	059a      	lsls	r2, r3, #22
 8106116:	d4ef      	bmi.n	81060f8 <__smakebuf_r+0x18>
 8106118:	f023 0303 	bic.w	r3, r3, #3
 810611c:	f043 0302 	orr.w	r3, r3, #2
 8106120:	81a3      	strh	r3, [r4, #12]
 8106122:	e7e3      	b.n	81060ec <__smakebuf_r+0xc>
 8106124:	4b0d      	ldr	r3, [pc, #52]	; (810615c <__smakebuf_r+0x7c>)
 8106126:	62b3      	str	r3, [r6, #40]	; 0x28
 8106128:	89a3      	ldrh	r3, [r4, #12]
 810612a:	6020      	str	r0, [r4, #0]
 810612c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8106130:	81a3      	strh	r3, [r4, #12]
 8106132:	9b00      	ldr	r3, [sp, #0]
 8106134:	6163      	str	r3, [r4, #20]
 8106136:	9b01      	ldr	r3, [sp, #4]
 8106138:	6120      	str	r0, [r4, #16]
 810613a:	b15b      	cbz	r3, 8106154 <__smakebuf_r+0x74>
 810613c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106140:	4630      	mov	r0, r6
 8106142:	f000 f8d5 	bl	81062f0 <_isatty_r>
 8106146:	b128      	cbz	r0, 8106154 <__smakebuf_r+0x74>
 8106148:	89a3      	ldrh	r3, [r4, #12]
 810614a:	f023 0303 	bic.w	r3, r3, #3
 810614e:	f043 0301 	orr.w	r3, r3, #1
 8106152:	81a3      	strh	r3, [r4, #12]
 8106154:	89a0      	ldrh	r0, [r4, #12]
 8106156:	4305      	orrs	r5, r0
 8106158:	81a5      	strh	r5, [r4, #12]
 810615a:	e7cd      	b.n	81060f8 <__smakebuf_r+0x18>
 810615c:	08105eed 	.word	0x08105eed

08106160 <__malloc_lock>:
 8106160:	4801      	ldr	r0, [pc, #4]	; (8106168 <__malloc_lock+0x8>)
 8106162:	f7ff bf95 	b.w	8106090 <__retarget_lock_acquire_recursive>
 8106166:	bf00      	nop
 8106168:	100004d4 	.word	0x100004d4

0810616c <__malloc_unlock>:
 810616c:	4801      	ldr	r0, [pc, #4]	; (8106174 <__malloc_unlock+0x8>)
 810616e:	f7ff bf90 	b.w	8106092 <__retarget_lock_release_recursive>
 8106172:	bf00      	nop
 8106174:	100004d4 	.word	0x100004d4

08106178 <_raise_r>:
 8106178:	291f      	cmp	r1, #31
 810617a:	b538      	push	{r3, r4, r5, lr}
 810617c:	4604      	mov	r4, r0
 810617e:	460d      	mov	r5, r1
 8106180:	d904      	bls.n	810618c <_raise_r+0x14>
 8106182:	2316      	movs	r3, #22
 8106184:	6003      	str	r3, [r0, #0]
 8106186:	f04f 30ff 	mov.w	r0, #4294967295
 810618a:	bd38      	pop	{r3, r4, r5, pc}
 810618c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810618e:	b112      	cbz	r2, 8106196 <_raise_r+0x1e>
 8106190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8106194:	b94b      	cbnz	r3, 81061aa <_raise_r+0x32>
 8106196:	4620      	mov	r0, r4
 8106198:	f000 f830 	bl	81061fc <_getpid_r>
 810619c:	462a      	mov	r2, r5
 810619e:	4601      	mov	r1, r0
 81061a0:	4620      	mov	r0, r4
 81061a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81061a6:	f000 b817 	b.w	81061d8 <_kill_r>
 81061aa:	2b01      	cmp	r3, #1
 81061ac:	d00a      	beq.n	81061c4 <_raise_r+0x4c>
 81061ae:	1c59      	adds	r1, r3, #1
 81061b0:	d103      	bne.n	81061ba <_raise_r+0x42>
 81061b2:	2316      	movs	r3, #22
 81061b4:	6003      	str	r3, [r0, #0]
 81061b6:	2001      	movs	r0, #1
 81061b8:	e7e7      	b.n	810618a <_raise_r+0x12>
 81061ba:	2400      	movs	r4, #0
 81061bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 81061c0:	4628      	mov	r0, r5
 81061c2:	4798      	blx	r3
 81061c4:	2000      	movs	r0, #0
 81061c6:	e7e0      	b.n	810618a <_raise_r+0x12>

081061c8 <raise>:
 81061c8:	4b02      	ldr	r3, [pc, #8]	; (81061d4 <raise+0xc>)
 81061ca:	4601      	mov	r1, r0
 81061cc:	6818      	ldr	r0, [r3, #0]
 81061ce:	f7ff bfd3 	b.w	8106178 <_raise_r>
 81061d2:	bf00      	nop
 81061d4:	10000010 	.word	0x10000010

081061d8 <_kill_r>:
 81061d8:	b538      	push	{r3, r4, r5, lr}
 81061da:	4d07      	ldr	r5, [pc, #28]	; (81061f8 <_kill_r+0x20>)
 81061dc:	2300      	movs	r3, #0
 81061de:	4604      	mov	r4, r0
 81061e0:	4608      	mov	r0, r1
 81061e2:	4611      	mov	r1, r2
 81061e4:	602b      	str	r3, [r5, #0]
 81061e6:	f7fb fa59 	bl	810169c <_kill>
 81061ea:	1c43      	adds	r3, r0, #1
 81061ec:	d102      	bne.n	81061f4 <_kill_r+0x1c>
 81061ee:	682b      	ldr	r3, [r5, #0]
 81061f0:	b103      	cbz	r3, 81061f4 <_kill_r+0x1c>
 81061f2:	6023      	str	r3, [r4, #0]
 81061f4:	bd38      	pop	{r3, r4, r5, pc}
 81061f6:	bf00      	nop
 81061f8:	100004d8 	.word	0x100004d8

081061fc <_getpid_r>:
 81061fc:	f7fb ba46 	b.w	810168c <_getpid>

08106200 <__sread>:
 8106200:	b510      	push	{r4, lr}
 8106202:	460c      	mov	r4, r1
 8106204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106208:	f000 f894 	bl	8106334 <_read_r>
 810620c:	2800      	cmp	r0, #0
 810620e:	bfab      	itete	ge
 8106210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8106212:	89a3      	ldrhlt	r3, [r4, #12]
 8106214:	181b      	addge	r3, r3, r0
 8106216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810621a:	bfac      	ite	ge
 810621c:	6563      	strge	r3, [r4, #84]	; 0x54
 810621e:	81a3      	strhlt	r3, [r4, #12]
 8106220:	bd10      	pop	{r4, pc}

08106222 <__swrite>:
 8106222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106226:	461f      	mov	r7, r3
 8106228:	898b      	ldrh	r3, [r1, #12]
 810622a:	05db      	lsls	r3, r3, #23
 810622c:	4605      	mov	r5, r0
 810622e:	460c      	mov	r4, r1
 8106230:	4616      	mov	r6, r2
 8106232:	d505      	bpl.n	8106240 <__swrite+0x1e>
 8106234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106238:	2302      	movs	r3, #2
 810623a:	2200      	movs	r2, #0
 810623c:	f000 f868 	bl	8106310 <_lseek_r>
 8106240:	89a3      	ldrh	r3, [r4, #12]
 8106242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810624a:	81a3      	strh	r3, [r4, #12]
 810624c:	4632      	mov	r2, r6
 810624e:	463b      	mov	r3, r7
 8106250:	4628      	mov	r0, r5
 8106252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106256:	f000 b817 	b.w	8106288 <_write_r>

0810625a <__sseek>:
 810625a:	b510      	push	{r4, lr}
 810625c:	460c      	mov	r4, r1
 810625e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106262:	f000 f855 	bl	8106310 <_lseek_r>
 8106266:	1c43      	adds	r3, r0, #1
 8106268:	89a3      	ldrh	r3, [r4, #12]
 810626a:	bf15      	itete	ne
 810626c:	6560      	strne	r0, [r4, #84]	; 0x54
 810626e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8106272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8106276:	81a3      	strheq	r3, [r4, #12]
 8106278:	bf18      	it	ne
 810627a:	81a3      	strhne	r3, [r4, #12]
 810627c:	bd10      	pop	{r4, pc}

0810627e <__sclose>:
 810627e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106282:	f000 b813 	b.w	81062ac <_close_r>
	...

08106288 <_write_r>:
 8106288:	b538      	push	{r3, r4, r5, lr}
 810628a:	4d07      	ldr	r5, [pc, #28]	; (81062a8 <_write_r+0x20>)
 810628c:	4604      	mov	r4, r0
 810628e:	4608      	mov	r0, r1
 8106290:	4611      	mov	r1, r2
 8106292:	2200      	movs	r2, #0
 8106294:	602a      	str	r2, [r5, #0]
 8106296:	461a      	mov	r2, r3
 8106298:	f7fb fa37 	bl	810170a <_write>
 810629c:	1c43      	adds	r3, r0, #1
 810629e:	d102      	bne.n	81062a6 <_write_r+0x1e>
 81062a0:	682b      	ldr	r3, [r5, #0]
 81062a2:	b103      	cbz	r3, 81062a6 <_write_r+0x1e>
 81062a4:	6023      	str	r3, [r4, #0]
 81062a6:	bd38      	pop	{r3, r4, r5, pc}
 81062a8:	100004d8 	.word	0x100004d8

081062ac <_close_r>:
 81062ac:	b538      	push	{r3, r4, r5, lr}
 81062ae:	4d06      	ldr	r5, [pc, #24]	; (81062c8 <_close_r+0x1c>)
 81062b0:	2300      	movs	r3, #0
 81062b2:	4604      	mov	r4, r0
 81062b4:	4608      	mov	r0, r1
 81062b6:	602b      	str	r3, [r5, #0]
 81062b8:	f7fb fa43 	bl	8101742 <_close>
 81062bc:	1c43      	adds	r3, r0, #1
 81062be:	d102      	bne.n	81062c6 <_close_r+0x1a>
 81062c0:	682b      	ldr	r3, [r5, #0]
 81062c2:	b103      	cbz	r3, 81062c6 <_close_r+0x1a>
 81062c4:	6023      	str	r3, [r4, #0]
 81062c6:	bd38      	pop	{r3, r4, r5, pc}
 81062c8:	100004d8 	.word	0x100004d8

081062cc <_fstat_r>:
 81062cc:	b538      	push	{r3, r4, r5, lr}
 81062ce:	4d07      	ldr	r5, [pc, #28]	; (81062ec <_fstat_r+0x20>)
 81062d0:	2300      	movs	r3, #0
 81062d2:	4604      	mov	r4, r0
 81062d4:	4608      	mov	r0, r1
 81062d6:	4611      	mov	r1, r2
 81062d8:	602b      	str	r3, [r5, #0]
 81062da:	f7fb fa3e 	bl	810175a <_fstat>
 81062de:	1c43      	adds	r3, r0, #1
 81062e0:	d102      	bne.n	81062e8 <_fstat_r+0x1c>
 81062e2:	682b      	ldr	r3, [r5, #0]
 81062e4:	b103      	cbz	r3, 81062e8 <_fstat_r+0x1c>
 81062e6:	6023      	str	r3, [r4, #0]
 81062e8:	bd38      	pop	{r3, r4, r5, pc}
 81062ea:	bf00      	nop
 81062ec:	100004d8 	.word	0x100004d8

081062f0 <_isatty_r>:
 81062f0:	b538      	push	{r3, r4, r5, lr}
 81062f2:	4d06      	ldr	r5, [pc, #24]	; (810630c <_isatty_r+0x1c>)
 81062f4:	2300      	movs	r3, #0
 81062f6:	4604      	mov	r4, r0
 81062f8:	4608      	mov	r0, r1
 81062fa:	602b      	str	r3, [r5, #0]
 81062fc:	f7fb fa3d 	bl	810177a <_isatty>
 8106300:	1c43      	adds	r3, r0, #1
 8106302:	d102      	bne.n	810630a <_isatty_r+0x1a>
 8106304:	682b      	ldr	r3, [r5, #0]
 8106306:	b103      	cbz	r3, 810630a <_isatty_r+0x1a>
 8106308:	6023      	str	r3, [r4, #0]
 810630a:	bd38      	pop	{r3, r4, r5, pc}
 810630c:	100004d8 	.word	0x100004d8

08106310 <_lseek_r>:
 8106310:	b538      	push	{r3, r4, r5, lr}
 8106312:	4d07      	ldr	r5, [pc, #28]	; (8106330 <_lseek_r+0x20>)
 8106314:	4604      	mov	r4, r0
 8106316:	4608      	mov	r0, r1
 8106318:	4611      	mov	r1, r2
 810631a:	2200      	movs	r2, #0
 810631c:	602a      	str	r2, [r5, #0]
 810631e:	461a      	mov	r2, r3
 8106320:	f7fb fa36 	bl	8101790 <_lseek>
 8106324:	1c43      	adds	r3, r0, #1
 8106326:	d102      	bne.n	810632e <_lseek_r+0x1e>
 8106328:	682b      	ldr	r3, [r5, #0]
 810632a:	b103      	cbz	r3, 810632e <_lseek_r+0x1e>
 810632c:	6023      	str	r3, [r4, #0]
 810632e:	bd38      	pop	{r3, r4, r5, pc}
 8106330:	100004d8 	.word	0x100004d8

08106334 <_read_r>:
 8106334:	b538      	push	{r3, r4, r5, lr}
 8106336:	4d07      	ldr	r5, [pc, #28]	; (8106354 <_read_r+0x20>)
 8106338:	4604      	mov	r4, r0
 810633a:	4608      	mov	r0, r1
 810633c:	4611      	mov	r1, r2
 810633e:	2200      	movs	r2, #0
 8106340:	602a      	str	r2, [r5, #0]
 8106342:	461a      	mov	r2, r3
 8106344:	f7fb f9c4 	bl	81016d0 <_read>
 8106348:	1c43      	adds	r3, r0, #1
 810634a:	d102      	bne.n	8106352 <_read_r+0x1e>
 810634c:	682b      	ldr	r3, [r5, #0]
 810634e:	b103      	cbz	r3, 8106352 <_read_r+0x1e>
 8106350:	6023      	str	r3, [r4, #0]
 8106352:	bd38      	pop	{r3, r4, r5, pc}
 8106354:	100004d8 	.word	0x100004d8

08106358 <_init>:
 8106358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810635a:	bf00      	nop
 810635c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810635e:	bc08      	pop	{r3}
 8106360:	469e      	mov	lr, r3
 8106362:	4770      	bx	lr

08106364 <_fini>:
 8106364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106366:	bf00      	nop
 8106368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810636a:	bc08      	pop	{r3}
 810636c:	469e      	mov	lr, r3
 810636e:	4770      	bx	lr
