
FRA421_Project_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd4  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0810506c  0810506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08105084  08105084  00015084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08105088  08105088  00015088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  0810508c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000450  10000010  0810509c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000460  0810509c  00020460  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000eeeb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020c6  00000000  00000000  0002ef2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a50  00000000  00000000  00030ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000958  00000000  00000000  00031a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a57b  00000000  00000000  000323a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e76f  00000000  00000000  0006c91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017b77b  00000000  00000000  0007b08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f6805  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002878  00000000  00000000  001f6858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08105054 	.word	0x08105054

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08105054 	.word	0x08105054

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <YUGIOH_card_copy>:
#include "FRA421_Yugioh.h"
#include <stdlib.h>
#include <string.h>

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst)
{
 8100308:	b480      	push	{r7}
 810030a:	b083      	sub	sp, #12
 810030c:	af00      	add	r7, sp, #0
 810030e:	6078      	str	r0, [r7, #4]
 8100310:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 8100312:	687b      	ldr	r3, [r7, #4]
 8100314:	685a      	ldr	r2, [r3, #4]
 8100316:	683b      	ldr	r3, [r7, #0]
 8100318:	605a      	str	r2, [r3, #4]
	dst->cardSignature = src->cardSignature;
 810031a:	687b      	ldr	r3, [r7, #4]
 810031c:	781a      	ldrb	r2, [r3, #0]
 810031e:	683b      	ldr	r3, [r7, #0]
 8100320:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 8100322:	687b      	ldr	r3, [r7, #4]
 8100324:	789a      	ldrb	r2, [r3, #2]
 8100326:	683b      	ldr	r3, [r7, #0]
 8100328:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 810032a:	687b      	ldr	r3, [r7, #4]
 810032c:	785a      	ldrb	r2, [r3, #1]
 810032e:	683b      	ldr	r3, [r7, #0]
 8100330:	705a      	strb	r2, [r3, #1]
}
 8100332:	bf00      	nop
 8100334:	370c      	adds	r7, #12
 8100336:	46bd      	mov	sp, r7
 8100338:	f85d 7b04 	ldr.w	r7, [sp], #4
 810033c:	4770      	bx	lr

0810033e <YUGIOH_card_register>:
		ptrYUGIOHCard++;
	}
}

void YUGIOH_card_register(RFIDHandle *rfidmain)
{
 810033e:	b480      	push	{r7}
 8100340:	b087      	sub	sp, #28
 8100342:	af00      	add	r7, sp, #0
 8100344:	6078      	str	r0, [r7, #4]
	RFID *ptrRFID = rfidmain->RFID;
 8100346:	687b      	ldr	r3, [r7, #4]
 8100348:	3328      	adds	r3, #40	; 0x28
 810034a:	617b      	str	r3, [r7, #20]
	Fra421_Card *ptrCard;
	YUGIOH_Card *ptrYUGIOHCard;

	ptrRFID = &rfidmain->RFID[rfidmain->slaveNum];
 810034c:	687b      	ldr	r3, [r7, #4]
 810034e:	881b      	ldrh	r3, [r3, #0]
 8100350:	461a      	mov	r2, r3
 8100352:	4613      	mov	r3, r2
 8100354:	005b      	lsls	r3, r3, #1
 8100356:	4413      	add	r3, r2
 8100358:	011b      	lsls	r3, r3, #4
 810035a:	3328      	adds	r3, #40	; 0x28
 810035c:	687a      	ldr	r2, [r7, #4]
 810035e:	4413      	add	r3, r2
 8100360:	617b      	str	r3, [r7, #20]
	ptrCard = &ptrRFID->detectedCard;
 8100362:	697b      	ldr	r3, [r7, #20]
 8100364:	3304      	adds	r3, #4
 8100366:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard = ptrRFID->bufferCard;
 8100368:	697b      	ldr	r3, [r7, #20]
 810036a:	3310      	adds	r3, #16
 810036c:	60fb      	str	r3, [r7, #12]

	// For now fix number
	ptrYUGIOHCard->cardData = ptrCard->data;
 810036e:	693b      	ldr	r3, [r7, #16]
 8100370:	681a      	ldr	r2, [r3, #0]
 8100372:	68fb      	ldr	r3, [r7, #12]
 8100374:	605a      	str	r2, [r3, #4]
	ptrYUGIOHCard->cardSignature = 1 % 256;
 8100376:	68fb      	ldr	r3, [r7, #12]
 8100378:	2201      	movs	r2, #1
 810037a:	701a      	strb	r2, [r3, #0]
	ptrYUGIOHCard->cardState = 0 % 3;
 810037c:	68fb      	ldr	r3, [r7, #12]
 810037e:	2200      	movs	r2, #0
 8100380:	709a      	strb	r2, [r3, #2]
	ptrYUGIOHCard->cardType = 0 % 2;
 8100382:	68fb      	ldr	r3, [r7, #12]
 8100384:	2200      	movs	r2, #0
 8100386:	705a      	strb	r2, [r3, #1]

}
 8100388:	bf00      	nop
 810038a:	371c      	adds	r7, #28
 810038c:	46bd      	mov	sp, r7
 810038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100392:	4770      	bx	lr

08100394 <YUGIOH_card_Buffer_Update>:

void YUGIOH_card_Buffer_Update(RFIDHandle *rfidmain)
{
 8100394:	b580      	push	{r7, lr}
 8100396:	b086      	sub	sp, #24
 8100398:	af00      	add	r7, sp, #0
 810039a:	6078      	str	r0, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = rfidmain->RFID;
 810039c:	687b      	ldr	r3, [r7, #4]
 810039e:	3328      	adds	r3, #40	; 0x28
 81003a0:	60bb      	str	r3, [r7, #8]
	ptrRFID = &rfidmain->RFID[rfidmain->slaveNum];
 81003a2:	687b      	ldr	r3, [r7, #4]
 81003a4:	881b      	ldrh	r3, [r3, #0]
 81003a6:	461a      	mov	r2, r3
 81003a8:	4613      	mov	r3, r2
 81003aa:	005b      	lsls	r3, r3, #1
 81003ac:	4413      	add	r3, r2
 81003ae:	011b      	lsls	r3, r3, #4
 81003b0:	3328      	adds	r3, #40	; 0x28
 81003b2:	687a      	ldr	r2, [r7, #4]
 81003b4:	4413      	add	r3, r2
 81003b6:	60bb      	str	r3, [r7, #8]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = ptrRFID->bufferCard;
 81003b8:	68bb      	ldr	r3, [r7, #8]
 81003ba:	3310      	adds	r3, #16
 81003bc:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &ptrRFID->bufferCard[CARD_BUFF_LEN-2];
 81003be:	68bb      	ldr	r3, [r7, #8]
 81003c0:	3320      	adds	r3, #32
 81003c2:	617b      	str	r3, [r7, #20]

	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = ptrRFID->bufferCard;
 81003c4:	68bb      	ldr	r3, [r7, #8]
 81003c6:	3310      	adds	r3, #16
 81003c8:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &ptrRFID->bufferCard[CARD_BUFF_LEN-1];
 81003ca:	68bb      	ldr	r3, [r7, #8]
 81003cc:	3328      	adds	r3, #40	; 0x28
 81003ce:	613b      	str	r3, [r7, #16]

	for (int i = CARD_BUFF_LEN; i >= 1 ; i--)
 81003d0:	2304      	movs	r3, #4
 81003d2:	60fb      	str	r3, [r7, #12]
 81003d4:	e00c      	b.n	81003f0 <YUGIOH_card_Buffer_Update+0x5c>
	{
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 81003d6:	6939      	ldr	r1, [r7, #16]
 81003d8:	6978      	ldr	r0, [r7, #20]
 81003da:	f7ff ff95 	bl	8100308 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 81003de:	697b      	ldr	r3, [r7, #20]
 81003e0:	3b08      	subs	r3, #8
 81003e2:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 81003e4:	693b      	ldr	r3, [r7, #16]
 81003e6:	3b08      	subs	r3, #8
 81003e8:	613b      	str	r3, [r7, #16]
	for (int i = CARD_BUFF_LEN; i >= 1 ; i--)
 81003ea:	68fb      	ldr	r3, [r7, #12]
 81003ec:	3b01      	subs	r3, #1
 81003ee:	60fb      	str	r3, [r7, #12]
 81003f0:	68fb      	ldr	r3, [r7, #12]
 81003f2:	2b00      	cmp	r3, #0
 81003f4:	dcef      	bgt.n	81003d6 <YUGIOH_card_Buffer_Update+0x42>
	}

}
 81003f6:	bf00      	nop
 81003f8:	bf00      	nop
 81003fa:	3718      	adds	r7, #24
 81003fc:	46bd      	mov	sp, r7
 81003fe:	bd80      	pop	{r7, pc}

08100400 <MC14515_Latch>:


#include "MC14515.h"

void MC14515_Latch(MC14515Handle *mc14515,uint16_t selected_output)
{
 8100400:	b580      	push	{r7, lr}
 8100402:	b082      	sub	sp, #8
 8100404:	af00      	add	r7, sp, #0
 8100406:	6078      	str	r0, [r7, #4]
 8100408:	460b      	mov	r3, r1
 810040a:	807b      	strh	r3, [r7, #2]

	switch (selected_output)
 810040c:	887b      	ldrh	r3, [r7, #2]
 810040e:	2b0f      	cmp	r3, #15
 8100410:	f200 8234 	bhi.w	810087c <MC14515_Latch+0x47c>
 8100414:	a201      	add	r2, pc, #4	; (adr r2, 810041c <MC14515_Latch+0x1c>)
 8100416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810041a:	bf00      	nop
 810041c:	0810045d 	.word	0x0810045d
 8100420:	0810049f 	.word	0x0810049f
 8100424:	081004e1 	.word	0x081004e1
 8100428:	08100523 	.word	0x08100523
 810042c:	08100565 	.word	0x08100565
 8100430:	081005a7 	.word	0x081005a7
 8100434:	081005e9 	.word	0x081005e9
 8100438:	0810062b 	.word	0x0810062b
 810043c:	0810066d 	.word	0x0810066d
 8100440:	081006af 	.word	0x081006af
 8100444:	081006f1 	.word	0x081006f1
 8100448:	08100733 	.word	0x08100733
 810044c:	08100775 	.word	0x08100775
 8100450:	081007b7 	.word	0x081007b7
 8100454:	081007f9 	.word	0x081007f9
 8100458:	0810083b 	.word	0x0810083b
	{
		case 0:
			// Set Data 0000
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 810045c:	687b      	ldr	r3, [r7, #4]
 810045e:	6898      	ldr	r0, [r3, #8]
 8100460:	687b      	ldr	r3, [r7, #4]
 8100462:	8b9b      	ldrh	r3, [r3, #28]
 8100464:	2200      	movs	r2, #0
 8100466:	4619      	mov	r1, r3
 8100468:	f003 fb76 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 810046c:	687b      	ldr	r3, [r7, #4]
 810046e:	68d8      	ldr	r0, [r3, #12]
 8100470:	687b      	ldr	r3, [r7, #4]
 8100472:	8bdb      	ldrh	r3, [r3, #30]
 8100474:	2200      	movs	r2, #0
 8100476:	4619      	mov	r1, r3
 8100478:	f003 fb6e 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810047c:	687b      	ldr	r3, [r7, #4]
 810047e:	6918      	ldr	r0, [r3, #16]
 8100480:	687b      	ldr	r3, [r7, #4]
 8100482:	8c1b      	ldrh	r3, [r3, #32]
 8100484:	2200      	movs	r2, #0
 8100486:	4619      	mov	r1, r3
 8100488:	f003 fb66 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 810048c:	687b      	ldr	r3, [r7, #4]
 810048e:	6958      	ldr	r0, [r3, #20]
 8100490:	687b      	ldr	r3, [r7, #4]
 8100492:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100494:	2200      	movs	r2, #0
 8100496:	4619      	mov	r1, r3
 8100498:	f003 fb5e 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 810049c:	e1ee      	b.n	810087c <MC14515_Latch+0x47c>
		case 1:
			// Set Data 0001
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 810049e:	687b      	ldr	r3, [r7, #4]
 81004a0:	6898      	ldr	r0, [r3, #8]
 81004a2:	687b      	ldr	r3, [r7, #4]
 81004a4:	8b9b      	ldrh	r3, [r3, #28]
 81004a6:	2201      	movs	r2, #1
 81004a8:	4619      	mov	r1, r3
 81004aa:	f003 fb55 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 81004ae:	687b      	ldr	r3, [r7, #4]
 81004b0:	68d8      	ldr	r0, [r3, #12]
 81004b2:	687b      	ldr	r3, [r7, #4]
 81004b4:	8bdb      	ldrh	r3, [r3, #30]
 81004b6:	2200      	movs	r2, #0
 81004b8:	4619      	mov	r1, r3
 81004ba:	f003 fb4d 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 81004be:	687b      	ldr	r3, [r7, #4]
 81004c0:	6918      	ldr	r0, [r3, #16]
 81004c2:	687b      	ldr	r3, [r7, #4]
 81004c4:	8c1b      	ldrh	r3, [r3, #32]
 81004c6:	2200      	movs	r2, #0
 81004c8:	4619      	mov	r1, r3
 81004ca:	f003 fb45 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 81004ce:	687b      	ldr	r3, [r7, #4]
 81004d0:	6958      	ldr	r0, [r3, #20]
 81004d2:	687b      	ldr	r3, [r7, #4]
 81004d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81004d6:	2200      	movs	r2, #0
 81004d8:	4619      	mov	r1, r3
 81004da:	f003 fb3d 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 81004de:	e1cd      	b.n	810087c <MC14515_Latch+0x47c>
		case 2:
			// Set Data 0010
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 81004e0:	687b      	ldr	r3, [r7, #4]
 81004e2:	6898      	ldr	r0, [r3, #8]
 81004e4:	687b      	ldr	r3, [r7, #4]
 81004e6:	8b9b      	ldrh	r3, [r3, #28]
 81004e8:	2200      	movs	r2, #0
 81004ea:	4619      	mov	r1, r3
 81004ec:	f003 fb34 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81004f0:	687b      	ldr	r3, [r7, #4]
 81004f2:	68d8      	ldr	r0, [r3, #12]
 81004f4:	687b      	ldr	r3, [r7, #4]
 81004f6:	8bdb      	ldrh	r3, [r3, #30]
 81004f8:	2201      	movs	r2, #1
 81004fa:	4619      	mov	r1, r3
 81004fc:	f003 fb2c 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 8100500:	687b      	ldr	r3, [r7, #4]
 8100502:	6918      	ldr	r0, [r3, #16]
 8100504:	687b      	ldr	r3, [r7, #4]
 8100506:	8c1b      	ldrh	r3, [r3, #32]
 8100508:	2200      	movs	r2, #0
 810050a:	4619      	mov	r1, r3
 810050c:	f003 fb24 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 8100510:	687b      	ldr	r3, [r7, #4]
 8100512:	6958      	ldr	r0, [r3, #20]
 8100514:	687b      	ldr	r3, [r7, #4]
 8100516:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100518:	2200      	movs	r2, #0
 810051a:	4619      	mov	r1, r3
 810051c:	f003 fb1c 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 8100520:	e1ac      	b.n	810087c <MC14515_Latch+0x47c>
		case 3:
			// Set Data 0011
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 8100522:	687b      	ldr	r3, [r7, #4]
 8100524:	6898      	ldr	r0, [r3, #8]
 8100526:	687b      	ldr	r3, [r7, #4]
 8100528:	8b9b      	ldrh	r3, [r3, #28]
 810052a:	2201      	movs	r2, #1
 810052c:	4619      	mov	r1, r3
 810052e:	f003 fb13 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 8100532:	687b      	ldr	r3, [r7, #4]
 8100534:	68d8      	ldr	r0, [r3, #12]
 8100536:	687b      	ldr	r3, [r7, #4]
 8100538:	8bdb      	ldrh	r3, [r3, #30]
 810053a:	2201      	movs	r2, #1
 810053c:	4619      	mov	r1, r3
 810053e:	f003 fb0b 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 8100542:	687b      	ldr	r3, [r7, #4]
 8100544:	6918      	ldr	r0, [r3, #16]
 8100546:	687b      	ldr	r3, [r7, #4]
 8100548:	8c1b      	ldrh	r3, [r3, #32]
 810054a:	2200      	movs	r2, #0
 810054c:	4619      	mov	r1, r3
 810054e:	f003 fb03 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 8100552:	687b      	ldr	r3, [r7, #4]
 8100554:	6958      	ldr	r0, [r3, #20]
 8100556:	687b      	ldr	r3, [r7, #4]
 8100558:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810055a:	2200      	movs	r2, #0
 810055c:	4619      	mov	r1, r3
 810055e:	f003 fafb 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 8100562:	e18b      	b.n	810087c <MC14515_Latch+0x47c>
		case 4:
			// Set Data 0100
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 8100564:	687b      	ldr	r3, [r7, #4]
 8100566:	6898      	ldr	r0, [r3, #8]
 8100568:	687b      	ldr	r3, [r7, #4]
 810056a:	8b9b      	ldrh	r3, [r3, #28]
 810056c:	2200      	movs	r2, #0
 810056e:	4619      	mov	r1, r3
 8100570:	f003 faf2 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 8100574:	687b      	ldr	r3, [r7, #4]
 8100576:	68d8      	ldr	r0, [r3, #12]
 8100578:	687b      	ldr	r3, [r7, #4]
 810057a:	8bdb      	ldrh	r3, [r3, #30]
 810057c:	2200      	movs	r2, #0
 810057e:	4619      	mov	r1, r3
 8100580:	f003 faea 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100584:	687b      	ldr	r3, [r7, #4]
 8100586:	6918      	ldr	r0, [r3, #16]
 8100588:	687b      	ldr	r3, [r7, #4]
 810058a:	8c1b      	ldrh	r3, [r3, #32]
 810058c:	2201      	movs	r2, #1
 810058e:	4619      	mov	r1, r3
 8100590:	f003 fae2 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 8100594:	687b      	ldr	r3, [r7, #4]
 8100596:	6958      	ldr	r0, [r3, #20]
 8100598:	687b      	ldr	r3, [r7, #4]
 810059a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810059c:	2200      	movs	r2, #0
 810059e:	4619      	mov	r1, r3
 81005a0:	f003 fada 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 81005a4:	e16a      	b.n	810087c <MC14515_Latch+0x47c>
		case 5:
			// Set Data 0101
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 81005a6:	687b      	ldr	r3, [r7, #4]
 81005a8:	6898      	ldr	r0, [r3, #8]
 81005aa:	687b      	ldr	r3, [r7, #4]
 81005ac:	8b9b      	ldrh	r3, [r3, #28]
 81005ae:	2201      	movs	r2, #1
 81005b0:	4619      	mov	r1, r3
 81005b2:	f003 fad1 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 81005b6:	687b      	ldr	r3, [r7, #4]
 81005b8:	68d8      	ldr	r0, [r3, #12]
 81005ba:	687b      	ldr	r3, [r7, #4]
 81005bc:	8bdb      	ldrh	r3, [r3, #30]
 81005be:	2200      	movs	r2, #0
 81005c0:	4619      	mov	r1, r3
 81005c2:	f003 fac9 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 81005c6:	687b      	ldr	r3, [r7, #4]
 81005c8:	6918      	ldr	r0, [r3, #16]
 81005ca:	687b      	ldr	r3, [r7, #4]
 81005cc:	8c1b      	ldrh	r3, [r3, #32]
 81005ce:	2201      	movs	r2, #1
 81005d0:	4619      	mov	r1, r3
 81005d2:	f003 fac1 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 81005d6:	687b      	ldr	r3, [r7, #4]
 81005d8:	6958      	ldr	r0, [r3, #20]
 81005da:	687b      	ldr	r3, [r7, #4]
 81005dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81005de:	2200      	movs	r2, #0
 81005e0:	4619      	mov	r1, r3
 81005e2:	f003 fab9 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 81005e6:	e149      	b.n	810087c <MC14515_Latch+0x47c>
		case 6:
			// Set Data 0110
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 81005e8:	687b      	ldr	r3, [r7, #4]
 81005ea:	6898      	ldr	r0, [r3, #8]
 81005ec:	687b      	ldr	r3, [r7, #4]
 81005ee:	8b9b      	ldrh	r3, [r3, #28]
 81005f0:	2200      	movs	r2, #0
 81005f2:	4619      	mov	r1, r3
 81005f4:	f003 fab0 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 81005f8:	687b      	ldr	r3, [r7, #4]
 81005fa:	68d8      	ldr	r0, [r3, #12]
 81005fc:	687b      	ldr	r3, [r7, #4]
 81005fe:	8bdb      	ldrh	r3, [r3, #30]
 8100600:	2201      	movs	r2, #1
 8100602:	4619      	mov	r1, r3
 8100604:	f003 faa8 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100608:	687b      	ldr	r3, [r7, #4]
 810060a:	6918      	ldr	r0, [r3, #16]
 810060c:	687b      	ldr	r3, [r7, #4]
 810060e:	8c1b      	ldrh	r3, [r3, #32]
 8100610:	2201      	movs	r2, #1
 8100612:	4619      	mov	r1, r3
 8100614:	f003 faa0 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 8100618:	687b      	ldr	r3, [r7, #4]
 810061a:	6958      	ldr	r0, [r3, #20]
 810061c:	687b      	ldr	r3, [r7, #4]
 810061e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100620:	2200      	movs	r2, #0
 8100622:	4619      	mov	r1, r3
 8100624:	f003 fa98 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 8100628:	e128      	b.n	810087c <MC14515_Latch+0x47c>
		case 7:
			// Set Data 0111
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 810062a:	687b      	ldr	r3, [r7, #4]
 810062c:	6898      	ldr	r0, [r3, #8]
 810062e:	687b      	ldr	r3, [r7, #4]
 8100630:	8b9b      	ldrh	r3, [r3, #28]
 8100632:	2201      	movs	r2, #1
 8100634:	4619      	mov	r1, r3
 8100636:	f003 fa8f 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 810063a:	687b      	ldr	r3, [r7, #4]
 810063c:	68d8      	ldr	r0, [r3, #12]
 810063e:	687b      	ldr	r3, [r7, #4]
 8100640:	8bdb      	ldrh	r3, [r3, #30]
 8100642:	2201      	movs	r2, #1
 8100644:	4619      	mov	r1, r3
 8100646:	f003 fa87 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 810064a:	687b      	ldr	r3, [r7, #4]
 810064c:	6918      	ldr	r0, [r3, #16]
 810064e:	687b      	ldr	r3, [r7, #4]
 8100650:	8c1b      	ldrh	r3, [r3, #32]
 8100652:	2201      	movs	r2, #1
 8100654:	4619      	mov	r1, r3
 8100656:	f003 fa7f 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_RESET);
 810065a:	687b      	ldr	r3, [r7, #4]
 810065c:	6958      	ldr	r0, [r3, #20]
 810065e:	687b      	ldr	r3, [r7, #4]
 8100660:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100662:	2200      	movs	r2, #0
 8100664:	4619      	mov	r1, r3
 8100666:	f003 fa77 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 810066a:	e107      	b.n	810087c <MC14515_Latch+0x47c>
		case 8:
			// Set Data 1000
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 810066c:	687b      	ldr	r3, [r7, #4]
 810066e:	6898      	ldr	r0, [r3, #8]
 8100670:	687b      	ldr	r3, [r7, #4]
 8100672:	8b9b      	ldrh	r3, [r3, #28]
 8100674:	2200      	movs	r2, #0
 8100676:	4619      	mov	r1, r3
 8100678:	f003 fa6e 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 810067c:	687b      	ldr	r3, [r7, #4]
 810067e:	68d8      	ldr	r0, [r3, #12]
 8100680:	687b      	ldr	r3, [r7, #4]
 8100682:	8bdb      	ldrh	r3, [r3, #30]
 8100684:	2200      	movs	r2, #0
 8100686:	4619      	mov	r1, r3
 8100688:	f003 fa66 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 810068c:	687b      	ldr	r3, [r7, #4]
 810068e:	6918      	ldr	r0, [r3, #16]
 8100690:	687b      	ldr	r3, [r7, #4]
 8100692:	8c1b      	ldrh	r3, [r3, #32]
 8100694:	2200      	movs	r2, #0
 8100696:	4619      	mov	r1, r3
 8100698:	f003 fa5e 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 810069c:	687b      	ldr	r3, [r7, #4]
 810069e:	6958      	ldr	r0, [r3, #20]
 81006a0:	687b      	ldr	r3, [r7, #4]
 81006a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81006a4:	2201      	movs	r2, #1
 81006a6:	4619      	mov	r1, r3
 81006a8:	f003 fa56 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 81006ac:	e0e6      	b.n	810087c <MC14515_Latch+0x47c>
		case 9:
			// Set Data 1001
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 81006ae:	687b      	ldr	r3, [r7, #4]
 81006b0:	6898      	ldr	r0, [r3, #8]
 81006b2:	687b      	ldr	r3, [r7, #4]
 81006b4:	8b9b      	ldrh	r3, [r3, #28]
 81006b6:	2201      	movs	r2, #1
 81006b8:	4619      	mov	r1, r3
 81006ba:	f003 fa4d 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 81006be:	687b      	ldr	r3, [r7, #4]
 81006c0:	68d8      	ldr	r0, [r3, #12]
 81006c2:	687b      	ldr	r3, [r7, #4]
 81006c4:	8bdb      	ldrh	r3, [r3, #30]
 81006c6:	2200      	movs	r2, #0
 81006c8:	4619      	mov	r1, r3
 81006ca:	f003 fa45 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 81006ce:	687b      	ldr	r3, [r7, #4]
 81006d0:	6918      	ldr	r0, [r3, #16]
 81006d2:	687b      	ldr	r3, [r7, #4]
 81006d4:	8c1b      	ldrh	r3, [r3, #32]
 81006d6:	2200      	movs	r2, #0
 81006d8:	4619      	mov	r1, r3
 81006da:	f003 fa3d 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 81006de:	687b      	ldr	r3, [r7, #4]
 81006e0:	6958      	ldr	r0, [r3, #20]
 81006e2:	687b      	ldr	r3, [r7, #4]
 81006e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81006e6:	2201      	movs	r2, #1
 81006e8:	4619      	mov	r1, r3
 81006ea:	f003 fa35 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 81006ee:	e0c5      	b.n	810087c <MC14515_Latch+0x47c>
		case 10:
			// Set Data 1010
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 81006f0:	687b      	ldr	r3, [r7, #4]
 81006f2:	6898      	ldr	r0, [r3, #8]
 81006f4:	687b      	ldr	r3, [r7, #4]
 81006f6:	8b9b      	ldrh	r3, [r3, #28]
 81006f8:	2200      	movs	r2, #0
 81006fa:	4619      	mov	r1, r3
 81006fc:	f003 fa2c 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 8100700:	687b      	ldr	r3, [r7, #4]
 8100702:	68d8      	ldr	r0, [r3, #12]
 8100704:	687b      	ldr	r3, [r7, #4]
 8100706:	8bdb      	ldrh	r3, [r3, #30]
 8100708:	2201      	movs	r2, #1
 810070a:	4619      	mov	r1, r3
 810070c:	f003 fa24 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 8100710:	687b      	ldr	r3, [r7, #4]
 8100712:	6918      	ldr	r0, [r3, #16]
 8100714:	687b      	ldr	r3, [r7, #4]
 8100716:	8c1b      	ldrh	r3, [r3, #32]
 8100718:	2200      	movs	r2, #0
 810071a:	4619      	mov	r1, r3
 810071c:	f003 fa1c 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 8100720:	687b      	ldr	r3, [r7, #4]
 8100722:	6958      	ldr	r0, [r3, #20]
 8100724:	687b      	ldr	r3, [r7, #4]
 8100726:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100728:	2201      	movs	r2, #1
 810072a:	4619      	mov	r1, r3
 810072c:	f003 fa14 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 8100730:	e0a4      	b.n	810087c <MC14515_Latch+0x47c>
		case 11:
			// Set Data 1011
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 8100732:	687b      	ldr	r3, [r7, #4]
 8100734:	6898      	ldr	r0, [r3, #8]
 8100736:	687b      	ldr	r3, [r7, #4]
 8100738:	8b9b      	ldrh	r3, [r3, #28]
 810073a:	2201      	movs	r2, #1
 810073c:	4619      	mov	r1, r3
 810073e:	f003 fa0b 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 8100742:	687b      	ldr	r3, [r7, #4]
 8100744:	68d8      	ldr	r0, [r3, #12]
 8100746:	687b      	ldr	r3, [r7, #4]
 8100748:	8bdb      	ldrh	r3, [r3, #30]
 810074a:	2201      	movs	r2, #1
 810074c:	4619      	mov	r1, r3
 810074e:	f003 fa03 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_RESET);
 8100752:	687b      	ldr	r3, [r7, #4]
 8100754:	6918      	ldr	r0, [r3, #16]
 8100756:	687b      	ldr	r3, [r7, #4]
 8100758:	8c1b      	ldrh	r3, [r3, #32]
 810075a:	2200      	movs	r2, #0
 810075c:	4619      	mov	r1, r3
 810075e:	f003 f9fb 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 8100762:	687b      	ldr	r3, [r7, #4]
 8100764:	6958      	ldr	r0, [r3, #20]
 8100766:	687b      	ldr	r3, [r7, #4]
 8100768:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 810076a:	2201      	movs	r2, #1
 810076c:	4619      	mov	r1, r3
 810076e:	f003 f9f3 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 8100772:	e083      	b.n	810087c <MC14515_Latch+0x47c>
		case 12:
			// Set Data 1100
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_RESET);
 8100774:	687b      	ldr	r3, [r7, #4]
 8100776:	6898      	ldr	r0, [r3, #8]
 8100778:	687b      	ldr	r3, [r7, #4]
 810077a:	8b9b      	ldrh	r3, [r3, #28]
 810077c:	2200      	movs	r2, #0
 810077e:	4619      	mov	r1, r3
 8100780:	f003 f9ea 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 8100784:	687b      	ldr	r3, [r7, #4]
 8100786:	68d8      	ldr	r0, [r3, #12]
 8100788:	687b      	ldr	r3, [r7, #4]
 810078a:	8bdb      	ldrh	r3, [r3, #30]
 810078c:	2200      	movs	r2, #0
 810078e:	4619      	mov	r1, r3
 8100790:	f003 f9e2 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100794:	687b      	ldr	r3, [r7, #4]
 8100796:	6918      	ldr	r0, [r3, #16]
 8100798:	687b      	ldr	r3, [r7, #4]
 810079a:	8c1b      	ldrh	r3, [r3, #32]
 810079c:	2201      	movs	r2, #1
 810079e:	4619      	mov	r1, r3
 81007a0:	f003 f9da 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 81007a4:	687b      	ldr	r3, [r7, #4]
 81007a6:	6958      	ldr	r0, [r3, #20]
 81007a8:	687b      	ldr	r3, [r7, #4]
 81007aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81007ac:	2201      	movs	r2, #1
 81007ae:	4619      	mov	r1, r3
 81007b0:	f003 f9d2 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 81007b4:	e062      	b.n	810087c <MC14515_Latch+0x47c>
		case 13:
			// Set Data 1101
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 81007b6:	687b      	ldr	r3, [r7, #4]
 81007b8:	6898      	ldr	r0, [r3, #8]
 81007ba:	687b      	ldr	r3, [r7, #4]
 81007bc:	8b9b      	ldrh	r3, [r3, #28]
 81007be:	2201      	movs	r2, #1
 81007c0:	4619      	mov	r1, r3
 81007c2:	f003 f9c9 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_RESET);
 81007c6:	687b      	ldr	r3, [r7, #4]
 81007c8:	68d8      	ldr	r0, [r3, #12]
 81007ca:	687b      	ldr	r3, [r7, #4]
 81007cc:	8bdb      	ldrh	r3, [r3, #30]
 81007ce:	2200      	movs	r2, #0
 81007d0:	4619      	mov	r1, r3
 81007d2:	f003 f9c1 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 81007d6:	687b      	ldr	r3, [r7, #4]
 81007d8:	6918      	ldr	r0, [r3, #16]
 81007da:	687b      	ldr	r3, [r7, #4]
 81007dc:	8c1b      	ldrh	r3, [r3, #32]
 81007de:	2201      	movs	r2, #1
 81007e0:	4619      	mov	r1, r3
 81007e2:	f003 f9b9 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 81007e6:	687b      	ldr	r3, [r7, #4]
 81007e8:	6958      	ldr	r0, [r3, #20]
 81007ea:	687b      	ldr	r3, [r7, #4]
 81007ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 81007ee:	2201      	movs	r2, #1
 81007f0:	4619      	mov	r1, r3
 81007f2:	f003 f9b1 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 81007f6:	e041      	b.n	810087c <MC14515_Latch+0x47c>
		case 14:
			// Set Data 1110
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 81007f8:	687b      	ldr	r3, [r7, #4]
 81007fa:	6898      	ldr	r0, [r3, #8]
 81007fc:	687b      	ldr	r3, [r7, #4]
 81007fe:	8b9b      	ldrh	r3, [r3, #28]
 8100800:	2201      	movs	r2, #1
 8100802:	4619      	mov	r1, r3
 8100804:	f003 f9a8 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 8100808:	687b      	ldr	r3, [r7, #4]
 810080a:	68d8      	ldr	r0, [r3, #12]
 810080c:	687b      	ldr	r3, [r7, #4]
 810080e:	8bdb      	ldrh	r3, [r3, #30]
 8100810:	2201      	movs	r2, #1
 8100812:	4619      	mov	r1, r3
 8100814:	f003 f9a0 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 8100818:	687b      	ldr	r3, [r7, #4]
 810081a:	6918      	ldr	r0, [r3, #16]
 810081c:	687b      	ldr	r3, [r7, #4]
 810081e:	8c1b      	ldrh	r3, [r3, #32]
 8100820:	2201      	movs	r2, #1
 8100822:	4619      	mov	r1, r3
 8100824:	f003 f998 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 8100828:	687b      	ldr	r3, [r7, #4]
 810082a:	6958      	ldr	r0, [r3, #20]
 810082c:	687b      	ldr	r3, [r7, #4]
 810082e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100830:	2201      	movs	r2, #1
 8100832:	4619      	mov	r1, r3
 8100834:	f003 f990 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 8100838:	e020      	b.n	810087c <MC14515_Latch+0x47c>
		case 15:
			// Set Data 1111
			HAL_GPIO_WritePin(mc14515->D1Port, mc14515->D1Pin, GPIO_PIN_SET);
 810083a:	687b      	ldr	r3, [r7, #4]
 810083c:	6898      	ldr	r0, [r3, #8]
 810083e:	687b      	ldr	r3, [r7, #4]
 8100840:	8b9b      	ldrh	r3, [r3, #28]
 8100842:	2201      	movs	r2, #1
 8100844:	4619      	mov	r1, r3
 8100846:	f003 f987 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D2Port, mc14515->D2Pin, GPIO_PIN_SET);
 810084a:	687b      	ldr	r3, [r7, #4]
 810084c:	68d8      	ldr	r0, [r3, #12]
 810084e:	687b      	ldr	r3, [r7, #4]
 8100850:	8bdb      	ldrh	r3, [r3, #30]
 8100852:	2201      	movs	r2, #1
 8100854:	4619      	mov	r1, r3
 8100856:	f003 f97f 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D3Port, mc14515->D3Pin, GPIO_PIN_SET);
 810085a:	687b      	ldr	r3, [r7, #4]
 810085c:	6918      	ldr	r0, [r3, #16]
 810085e:	687b      	ldr	r3, [r7, #4]
 8100860:	8c1b      	ldrh	r3, [r3, #32]
 8100862:	2201      	movs	r2, #1
 8100864:	4619      	mov	r1, r3
 8100866:	f003 f977 	bl	8103b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mc14515->D4Port, mc14515->D4Pin, GPIO_PIN_SET);
 810086a:	687b      	ldr	r3, [r7, #4]
 810086c:	6958      	ldr	r0, [r3, #20]
 810086e:	687b      	ldr	r3, [r7, #4]
 8100870:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8100872:	2201      	movs	r2, #1
 8100874:	4619      	mov	r1, r3
 8100876:	f003 f96f 	bl	8103b58 <HAL_GPIO_WritePin>
			break;
 810087a:	bf00      	nop
	}

	// Set ST to High ready to store data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_SET);
 810087c:	687b      	ldr	r3, [r7, #4]
 810087e:	6818      	ldr	r0, [r3, #0]
 8100880:	687b      	ldr	r3, [r7, #4]
 8100882:	8b1b      	ldrh	r3, [r3, #24]
 8100884:	2201      	movs	r2, #1
 8100886:	4619      	mov	r1, r3
 8100888:	f003 f966 	bl	8103b58 <HAL_GPIO_WritePin>

	// Set INH to Low
	HAL_GPIO_WritePin(mc14515->INHPort, mc14515->INHPin, GPIO_PIN_RESET);
 810088c:	687b      	ldr	r3, [r7, #4]
 810088e:	6858      	ldr	r0, [r3, #4]
 8100890:	687b      	ldr	r3, [r7, #4]
 8100892:	8b5b      	ldrh	r3, [r3, #26]
 8100894:	2200      	movs	r2, #0
 8100896:	4619      	mov	r1, r3
 8100898:	f003 f95e 	bl	8103b58 <HAL_GPIO_WritePin>

	// Latch Data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_RESET);
 810089c:	687b      	ldr	r3, [r7, #4]
 810089e:	6818      	ldr	r0, [r3, #0]
 81008a0:	687b      	ldr	r3, [r7, #4]
 81008a2:	8b1b      	ldrh	r3, [r3, #24]
 81008a4:	2200      	movs	r2, #0
 81008a6:	4619      	mov	r1, r3
 81008a8:	f003 f956 	bl	8103b58 <HAL_GPIO_WritePin>

}
 81008ac:	bf00      	nop
 81008ae:	3708      	adds	r7, #8
 81008b0:	46bd      	mov	sp, r7
 81008b2:	bd80      	pop	{r7, pc}

081008b4 <MC14515_Set_Output_All_High>:

void MC14515_Set_Output_All_High(MC14515Handle *mc14515)
{
 81008b4:	b580      	push	{r7, lr}
 81008b6:	b082      	sub	sp, #8
 81008b8:	af00      	add	r7, sp, #0
 81008ba:	6078      	str	r0, [r7, #4]
	// Set INH to High
	HAL_GPIO_WritePin(mc14515->INHPort, mc14515->INHPin, GPIO_PIN_SET);
 81008bc:	687b      	ldr	r3, [r7, #4]
 81008be:	6858      	ldr	r0, [r3, #4]
 81008c0:	687b      	ldr	r3, [r7, #4]
 81008c2:	8b5b      	ldrh	r3, [r3, #26]
 81008c4:	2201      	movs	r2, #1
 81008c6:	4619      	mov	r1, r3
 81008c8:	f003 f946 	bl	8103b58 <HAL_GPIO_WritePin>

	// Set ST to High ready to store data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_SET);
 81008cc:	687b      	ldr	r3, [r7, #4]
 81008ce:	6818      	ldr	r0, [r3, #0]
 81008d0:	687b      	ldr	r3, [r7, #4]
 81008d2:	8b1b      	ldrh	r3, [r3, #24]
 81008d4:	2201      	movs	r2, #1
 81008d6:	4619      	mov	r1, r3
 81008d8:	f003 f93e 	bl	8103b58 <HAL_GPIO_WritePin>

	// Latch Data
	HAL_GPIO_WritePin(mc14515->STPort, mc14515->STPin, GPIO_PIN_RESET);
 81008dc:	687b      	ldr	r3, [r7, #4]
 81008de:	6818      	ldr	r0, [r3, #0]
 81008e0:	687b      	ldr	r3, [r7, #4]
 81008e2:	8b1b      	ldrh	r3, [r3, #24]
 81008e4:	2200      	movs	r2, #0
 81008e6:	4619      	mov	r1, r3
 81008e8:	f003 f936 	bl	8103b58 <HAL_GPIO_WritePin>
}
 81008ec:	bf00      	nop
 81008ee:	3708      	adds	r7, #8
 81008f0:	46bd      	mov	sp, r7
 81008f2:	bd80      	pop	{r7, pc}

081008f4 <MFRC522_Write_Data>:
 * Function Name: MFRC522_Write_Data
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void MFRC522_Write_Data(uint8_t addr, uint8_t val, uint16_t nss_num) {
 81008f4:	b580      	push	{r7, lr}
 81008f6:	b084      	sub	sp, #16
 81008f8:	af00      	add	r7, sp, #0
 81008fa:	4603      	mov	r3, r0
 81008fc:	71fb      	strb	r3, [r7, #7]
 81008fe:	460b      	mov	r3, r1
 8100900:	71bb      	strb	r3, [r7, #6]
 8100902:	4613      	mov	r3, r2
 8100904:	80bb      	strh	r3, [r7, #4]

	uint8_t addr_bits = (((addr<<1) & 0x7E));
 8100906:	79fb      	ldrb	r3, [r7, #7]
 8100908:	005b      	lsls	r3, r3, #1
 810090a:	b2db      	uxtb	r3, r3
 810090c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8100910:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuff[2] = {addr_bits,val};
 8100912:	7bfb      	ldrb	r3, [r7, #15]
 8100914:	733b      	strb	r3, [r7, #12]
 8100916:	79bb      	ldrb	r3, [r7, #6]
 8100918:	737b      	strb	r3, [r7, #13]
#endif

#ifdef MC14515USE

	// Slave select Low
	MC14515_Latch(&MC14515HANDLER,nss_num);
 810091a:	88bb      	ldrh	r3, [r7, #4]
 810091c:	4619      	mov	r1, r3
 810091e:	4809      	ldr	r0, [pc, #36]	; (8100944 <MFRC522_Write_Data+0x50>)
 8100920:	f7ff fd6e 	bl	8100400 <MC14515_Latch>

#endif

	// Transmit Data
	HAL_SPI_Transmit(&MFRC522_PORT, TxBuff, 2, 500);
 8100924:	f107 010c 	add.w	r1, r7, #12
 8100928:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 810092c:	2202      	movs	r2, #2
 810092e:	4806      	ldr	r0, [pc, #24]	; (8100948 <MFRC522_Write_Data+0x54>)
 8100930:	f003 fc60 	bl	81041f4 <HAL_SPI_Transmit>
#endif

#ifdef MC14515USE

	// Slave select High
	MC14515_Set_Output_All_High(&MC14515HANDLER);
 8100934:	4803      	ldr	r0, [pc, #12]	; (8100944 <MFRC522_Write_Data+0x50>)
 8100936:	f7ff ffbd 	bl	81008b4 <MC14515_Set_Output_All_High>

#endif

}
 810093a:	bf00      	nop
 810093c:	3710      	adds	r7, #16
 810093e:	46bd      	mov	sp, r7
 8100940:	bd80      	pop	{r7, pc}
 8100942:	bf00      	nop
 8100944:	100001a4 	.word	0x100001a4
 8100948:	1000002c 	.word	0x1000002c

0810094c <MFRC522_Read_Data>:
 * Function Name: MFRC522_Read_Data
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
uint8_t MFRC522_Read_Data(uint8_t addr, uint16_t nss_num) {
 810094c:	b580      	push	{r7, lr}
 810094e:	b088      	sub	sp, #32
 8100950:	af02      	add	r7, sp, #8
 8100952:	4603      	mov	r3, r0
 8100954:	460a      	mov	r2, r1
 8100956:	71fb      	strb	r3, [r7, #7]
 8100958:	4613      	mov	r3, r2
 810095a:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef hal_status;

	uint8_t addr_bits = (((addr<<1) & 0x7E) | 0x80);
 810095c:	79fb      	ldrb	r3, [r7, #7]
 810095e:	005b      	lsls	r3, r3, #1
 8100960:	b25b      	sxtb	r3, r3
 8100962:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8100966:	b25b      	sxtb	r3, r3
 8100968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 810096c:	b25b      	sxtb	r3, r3
 810096e:	75bb      	strb	r3, [r7, #22]

	uint8_t Txbuff[2] = {addr_bits,0};
 8100970:	7dbb      	ldrb	r3, [r7, #22]
 8100972:	743b      	strb	r3, [r7, #16]
 8100974:	2300      	movs	r3, #0
 8100976:	747b      	strb	r3, [r7, #17]
#endif

#ifdef MC14515USE

	// Slave select Low
	MC14515_Latch(&MC14515HANDLER,nss_num);
 8100978:	88bb      	ldrh	r3, [r7, #4]
 810097a:	4619      	mov	r1, r3
 810097c:	480e      	ldr	r0, [pc, #56]	; (81009b8 <MFRC522_Read_Data+0x6c>)
 810097e:	f7ff fd3f 	bl	8100400 <MC14515_Latch>

#endif

	hal_status = HAL_SPI_TransmitReceive(&MFRC522_PORT, Txbuff, Rxbuff, 2, 500);
 8100982:	f107 020c 	add.w	r2, r7, #12
 8100986:	f107 0110 	add.w	r1, r7, #16
 810098a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 810098e:	9300      	str	r3, [sp, #0]
 8100990:	2302      	movs	r3, #2
 8100992:	480a      	ldr	r0, [pc, #40]	; (81009bc <MFRC522_Read_Data+0x70>)
 8100994:	f003 fe1c 	bl	81045d0 <HAL_SPI_TransmitReceive>
 8100998:	4603      	mov	r3, r0
 810099a:	757b      	strb	r3, [r7, #21]

	if (hal_status == HAL_OK)
 810099c:	7d7b      	ldrb	r3, [r7, #21]
 810099e:	2b00      	cmp	r3, #0
 81009a0:	d101      	bne.n	81009a6 <MFRC522_Read_Data+0x5a>
	{
		rx_bits = Rxbuff[1];    // response is in the second byte
 81009a2:	7b7b      	ldrb	r3, [r7, #13]
 81009a4:	75fb      	strb	r3, [r7, #23]
#endif

#ifdef MC14515USE

	// Slave select High
	MC14515_Set_Output_All_High(&MC14515HANDLER);
 81009a6:	4804      	ldr	r0, [pc, #16]	; (81009b8 <MFRC522_Read_Data+0x6c>)
 81009a8:	f7ff ff84 	bl	81008b4 <MC14515_Set_Output_All_High>

#endif

	return (uint8_t) rx_bits; // return the rx bits, casting to an 8 bit int
 81009ac:	7dfb      	ldrb	r3, [r7, #23]
}
 81009ae:	4618      	mov	r0, r3
 81009b0:	3718      	adds	r7, #24
 81009b2:	46bd      	mov	sp, r7
 81009b4:	bd80      	pop	{r7, pc}
 81009b6:	bf00      	nop
 81009b8:	100001a4 	.word	0x100001a4
 81009bc:	1000002c 	.word	0x1000002c

081009c0 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uint8_t reg, uint8_t mask, uint16_t nss_num)
{
 81009c0:	b580      	push	{r7, lr}
 81009c2:	b084      	sub	sp, #16
 81009c4:	af00      	add	r7, sp, #0
 81009c6:	4603      	mov	r3, r0
 81009c8:	71fb      	strb	r3, [r7, #7]
 81009ca:	460b      	mov	r3, r1
 81009cc:	71bb      	strb	r3, [r7, #6]
 81009ce:	4613      	mov	r3, r2
 81009d0:	80bb      	strh	r3, [r7, #4]
	uint8_t tmp;
	tmp = MFRC522_Read_Data(reg, nss_num);
 81009d2:	88ba      	ldrh	r2, [r7, #4]
 81009d4:	79fb      	ldrb	r3, [r7, #7]
 81009d6:	4611      	mov	r1, r2
 81009d8:	4618      	mov	r0, r3
 81009da:	f7ff ffb7 	bl	810094c <MFRC522_Read_Data>
 81009de:	4603      	mov	r3, r0
 81009e0:	73fb      	strb	r3, [r7, #15]
	MFRC522_Write_Data(reg, tmp | mask, nss_num);  // set bit mask
 81009e2:	7bfa      	ldrb	r2, [r7, #15]
 81009e4:	79bb      	ldrb	r3, [r7, #6]
 81009e6:	4313      	orrs	r3, r2
 81009e8:	b2d9      	uxtb	r1, r3
 81009ea:	88ba      	ldrh	r2, [r7, #4]
 81009ec:	79fb      	ldrb	r3, [r7, #7]
 81009ee:	4618      	mov	r0, r3
 81009f0:	f7ff ff80 	bl	81008f4 <MFRC522_Write_Data>
}
 81009f4:	bf00      	nop
 81009f6:	3710      	adds	r7, #16
 81009f8:	46bd      	mov	sp, r7
 81009fa:	bd80      	pop	{r7, pc}

081009fc <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
 */
void ClearBitMask(uint8_t reg, uint8_t mask, uint16_t nss_num)
{
 81009fc:	b580      	push	{r7, lr}
 81009fe:	b084      	sub	sp, #16
 8100a00:	af00      	add	r7, sp, #0
 8100a02:	4603      	mov	r3, r0
 8100a04:	71fb      	strb	r3, [r7, #7]
 8100a06:	460b      	mov	r3, r1
 8100a08:	71bb      	strb	r3, [r7, #6]
 8100a0a:	4613      	mov	r3, r2
 8100a0c:	80bb      	strh	r3, [r7, #4]
	uint8_t tmp;
	tmp = MFRC522_Read_Data(reg, nss_num);
 8100a0e:	88ba      	ldrh	r2, [r7, #4]
 8100a10:	79fb      	ldrb	r3, [r7, #7]
 8100a12:	4611      	mov	r1, r2
 8100a14:	4618      	mov	r0, r3
 8100a16:	f7ff ff99 	bl	810094c <MFRC522_Read_Data>
 8100a1a:	4603      	mov	r3, r0
 8100a1c:	73fb      	strb	r3, [r7, #15]
	MFRC522_Write_Data(reg, tmp & (~mask), nss_num);  // clear bit mask
 8100a1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8100a22:	43db      	mvns	r3, r3
 8100a24:	b25a      	sxtb	r2, r3
 8100a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100a2a:	4013      	ands	r3, r2
 8100a2c:	b25b      	sxtb	r3, r3
 8100a2e:	b2d9      	uxtb	r1, r3
 8100a30:	88ba      	ldrh	r2, [r7, #4]
 8100a32:	79fb      	ldrb	r3, [r7, #7]
 8100a34:	4618      	mov	r0, r3
 8100a36:	f7ff ff5d 	bl	81008f4 <MFRC522_Write_Data>
}
 8100a3a:	bf00      	nop
 8100a3c:	3710      	adds	r7, #16
 8100a3e:	46bd      	mov	sp, r7
 8100a40:	bd80      	pop	{r7, pc}

08100a42 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(uint16_t nss_num)
{
 8100a42:	b580      	push	{r7, lr}
 8100a44:	b082      	sub	sp, #8
 8100a46:	af00      	add	r7, sp, #0
 8100a48:	4603      	mov	r3, r0
 8100a4a:	80fb      	strh	r3, [r7, #6]
	SetBitMask(TxControlReg, 0x03,nss_num);
 8100a4c:	88fb      	ldrh	r3, [r7, #6]
 8100a4e:	461a      	mov	r2, r3
 8100a50:	2103      	movs	r1, #3
 8100a52:	2014      	movs	r0, #20
 8100a54:	f7ff ffb4 	bl	81009c0 <SetBitMask>
}
 8100a58:	bf00      	nop
 8100a5a:	3708      	adds	r7, #8
 8100a5c:	46bd      	mov	sp, r7
 8100a5e:	bd80      	pop	{r7, pc}

08100a60 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(uint16_t nss_num)
{
 8100a60:	b580      	push	{r7, lr}
 8100a62:	b082      	sub	sp, #8
 8100a64:	af00      	add	r7, sp, #0
 8100a66:	4603      	mov	r3, r0
 8100a68:	80fb      	strh	r3, [r7, #6]
	MFRC522_Write_Data(CommandReg, PCD_RESETPHASE, nss_num);
 8100a6a:	88fb      	ldrh	r3, [r7, #6]
 8100a6c:	461a      	mov	r2, r3
 8100a6e:	210f      	movs	r1, #15
 8100a70:	2001      	movs	r0, #1
 8100a72:	f7ff ff3f 	bl	81008f4 <MFRC522_Write_Data>
}
 8100a76:	bf00      	nop
 8100a78:	3708      	adds	r7, #8
 8100a7a:	46bd      	mov	sp, r7
 8100a7c:	bd80      	pop	{r7, pc}

08100a7e <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Init(uint16_t nss_num)
{
 8100a7e:	b580      	push	{r7, lr}
 8100a80:	b082      	sub	sp, #8
 8100a82:	af00      	add	r7, sp, #0
 8100a84:	4603      	mov	r3, r0
 8100a86:	80fb      	strh	r3, [r7, #6]
	MFRC522_Reset(nss_num);
 8100a88:	88fb      	ldrh	r3, [r7, #6]
 8100a8a:	4618      	mov	r0, r3
 8100a8c:	f7ff ffe8 	bl	8100a60 <MFRC522_Reset>

	// Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	MFRC522_Write_Data(TModeReg, 0x80, nss_num); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8100a90:	88fb      	ldrh	r3, [r7, #6]
 8100a92:	461a      	mov	r2, r3
 8100a94:	2180      	movs	r1, #128	; 0x80
 8100a96:	202a      	movs	r0, #42	; 0x2a
 8100a98:	f7ff ff2c 	bl	81008f4 <MFRC522_Write_Data>
	MFRC522_Write_Data(TPrescalerReg, 0xA9, nss_num); //0x34); // TModeReg[3..0] + TPrescalerReg
 8100a9c:	88fb      	ldrh	r3, [r7, #6]
 8100a9e:	461a      	mov	r2, r3
 8100aa0:	21a9      	movs	r1, #169	; 0xa9
 8100aa2:	202b      	movs	r0, #43	; 0x2b
 8100aa4:	f7ff ff26 	bl	81008f4 <MFRC522_Write_Data>
	MFRC522_Write_Data(TReloadRegL, 0x03, nss_num); //30);
 8100aa8:	88fb      	ldrh	r3, [r7, #6]
 8100aaa:	461a      	mov	r2, r3
 8100aac:	2103      	movs	r1, #3
 8100aae:	202d      	movs	r0, #45	; 0x2d
 8100ab0:	f7ff ff20 	bl	81008f4 <MFRC522_Write_Data>
	MFRC522_Write_Data(TReloadRegH, 0xE8, nss_num); //0);
 8100ab4:	88fb      	ldrh	r3, [r7, #6]
 8100ab6:	461a      	mov	r2, r3
 8100ab8:	21e8      	movs	r1, #232	; 0xe8
 8100aba:	202c      	movs	r0, #44	; 0x2c
 8100abc:	f7ff ff1a 	bl	81008f4 <MFRC522_Write_Data>
	MFRC522_Write_Data(TxAutoReg, 0x40, nss_num);     // force 100% ASK modulation
 8100ac0:	88fb      	ldrh	r3, [r7, #6]
 8100ac2:	461a      	mov	r2, r3
 8100ac4:	2140      	movs	r1, #64	; 0x40
 8100ac6:	2015      	movs	r0, #21
 8100ac8:	f7ff ff14 	bl	81008f4 <MFRC522_Write_Data>
	MFRC522_Write_Data(ModeReg, 0x3D, nss_num);       // CRC Initial value 0x6363
 8100acc:	88fb      	ldrh	r3, [r7, #6]
 8100ace:	461a      	mov	r2, r3
 8100ad0:	213d      	movs	r1, #61	; 0x3d
 8100ad2:	2011      	movs	r0, #17
 8100ad4:	f7ff ff0e 	bl	81008f4 <MFRC522_Write_Data>
	////  MFRC522_Write_Data(DivlEnReg, 0x14);
	//  MFRC522_Write_Data(DivlEnReg, 0x00, nss_num);
	//  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);

	// turn antenna on
	AntennaOn(nss_num);
 8100ad8:	88fb      	ldrh	r3, [r7, #6]
 8100ada:	4618      	mov	r0, r3
 8100adc:	f7ff ffb1 	bl	8100a42 <AntennaOn>
	//  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
}
 8100ae0:	bf00      	nop
 8100ae2:	3708      	adds	r7, #8
 8100ae4:	46bd      	mov	sp, r7
 8100ae6:	bd80      	pop	{r7, pc}

08100ae8 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType, uint16_t nss_num)
{
 8100ae8:	b580      	push	{r7, lr}
 8100aea:	b086      	sub	sp, #24
 8100aec:	af02      	add	r7, sp, #8
 8100aee:	4603      	mov	r3, r0
 8100af0:	6039      	str	r1, [r7, #0]
 8100af2:	71fb      	strb	r3, [r7, #7]
 8100af4:	4613      	mov	r3, r2
 8100af6:	80bb      	strh	r3, [r7, #4]
	uint8_t status;
	uint backBits; // The received data bits

	MFRC522_Write_Data(BitFramingReg, 0x07, nss_num);   // TxLastBists = BitFramingReg[2..0]
 8100af8:	88bb      	ldrh	r3, [r7, #4]
 8100afa:	461a      	mov	r2, r3
 8100afc:	2107      	movs	r1, #7
 8100afe:	200d      	movs	r0, #13
 8100b00:	f7ff fef8 	bl	81008f4 <MFRC522_Write_Data>

	TagType[0] = reqMode;
 8100b04:	683b      	ldr	r3, [r7, #0]
 8100b06:	79fa      	ldrb	r2, [r7, #7]
 8100b08:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits, nss_num);
 8100b0a:	88bb      	ldrh	r3, [r7, #4]
 8100b0c:	9301      	str	r3, [sp, #4]
 8100b0e:	f107 0308 	add.w	r3, r7, #8
 8100b12:	9300      	str	r3, [sp, #0]
 8100b14:	683b      	ldr	r3, [r7, #0]
 8100b16:	2201      	movs	r2, #1
 8100b18:	6839      	ldr	r1, [r7, #0]
 8100b1a:	200c      	movs	r0, #12
 8100b1c:	f000 f80f 	bl	8100b3e <MFRC522_ToCard>
 8100b20:	4603      	mov	r3, r0
 8100b22:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8100b24:	7bfb      	ldrb	r3, [r7, #15]
 8100b26:	2b00      	cmp	r3, #0
 8100b28:	d102      	bne.n	8100b30 <MFRC522_Request+0x48>
 8100b2a:	68bb      	ldr	r3, [r7, #8]
 8100b2c:	2b10      	cmp	r3, #16
 8100b2e:	d001      	beq.n	8100b34 <MFRC522_Request+0x4c>
		status = MI_ERR;
 8100b30:	2302      	movs	r3, #2
 8100b32:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8100b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8100b36:	4618      	mov	r0, r3
 8100b38:	3710      	adds	r7, #16
 8100b3a:	46bd      	mov	sp, r7
 8100b3c:	bd80      	pop	{r7, pc}

08100b3e <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen, uint16_t nss_num)
{
 8100b3e:	b590      	push	{r4, r7, lr}
 8100b40:	b089      	sub	sp, #36	; 0x24
 8100b42:	af00      	add	r7, sp, #0
 8100b44:	60b9      	str	r1, [r7, #8]
 8100b46:	607b      	str	r3, [r7, #4]
 8100b48:	4603      	mov	r3, r0
 8100b4a:	73fb      	strb	r3, [r7, #15]
 8100b4c:	4613      	mov	r3, r2
 8100b4e:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8100b50:	2302      	movs	r3, #2
 8100b52:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn = 0x00;
 8100b54:	2300      	movs	r3, #0
 8100b56:	77bb      	strb	r3, [r7, #30]
	uint8_t waitIRq = 0x00;
 8100b58:	2300      	movs	r3, #0
 8100b5a:	777b      	strb	r3, [r7, #29]
	uint8_t lastBits;
	uint8_t n;
	uint i;

	switch (command)
 8100b5c:	7bfb      	ldrb	r3, [r7, #15]
 8100b5e:	2b0c      	cmp	r3, #12
 8100b60:	d006      	beq.n	8100b70 <MFRC522_ToCard+0x32>
 8100b62:	2b0e      	cmp	r3, #14
 8100b64:	d109      	bne.n	8100b7a <MFRC522_ToCard+0x3c>
	{
	case PCD_AUTHENT:     // Certification cards close
	{
		irqEn = 0x12;
 8100b66:	2312      	movs	r3, #18
 8100b68:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 8100b6a:	2310      	movs	r3, #16
 8100b6c:	777b      	strb	r3, [r7, #29]
		break;
 8100b6e:	e005      	b.n	8100b7c <MFRC522_ToCard+0x3e>
	}
	case PCD_TRANSCEIVE:  // Transmit FIFO data
	{
		irqEn = 0x77;
 8100b70:	2377      	movs	r3, #119	; 0x77
 8100b72:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 8100b74:	2330      	movs	r3, #48	; 0x30
 8100b76:	777b      	strb	r3, [r7, #29]
		break;
 8100b78:	e000      	b.n	8100b7c <MFRC522_ToCard+0x3e>
	}
	default:
		break;
 8100b7a:	bf00      	nop
	}

	MFRC522_Write_Data(CommIEnReg, irqEn|0x80, nss_num);  // Interrupt request
 8100b7c:	7fbb      	ldrb	r3, [r7, #30]
 8100b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8100b82:	b2db      	uxtb	r3, r3
 8100b84:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8100b86:	4619      	mov	r1, r3
 8100b88:	2002      	movs	r0, #2
 8100b8a:	f7ff feb3 	bl	81008f4 <MFRC522_Write_Data>
	//  MFRC522_Write_Data(CommIEnReg, 0x7F); //Edit Some

	ClearBitMask(CommIrqReg, 0x80, nss_num);         // Clear all interrupt request bit
 8100b8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100b90:	461a      	mov	r2, r3
 8100b92:	2180      	movs	r1, #128	; 0x80
 8100b94:	2004      	movs	r0, #4
 8100b96:	f7ff ff31 	bl	81009fc <ClearBitMask>

	SetBitMask(FIFOLevelReg, 0x80, nss_num);         // FlushBuffer=1, FIFO Initialization
 8100b9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100b9c:	461a      	mov	r2, r3
 8100b9e:	2180      	movs	r1, #128	; 0x80
 8100ba0:	200a      	movs	r0, #10
 8100ba2:	f7ff ff0d 	bl	81009c0 <SetBitMask>


	MFRC522_Write_Data(CommandReg, PCD_IDLE, nss_num);    // NO action; Cancel the current command
 8100ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100ba8:	461a      	mov	r2, r3
 8100baa:	2100      	movs	r1, #0
 8100bac:	2001      	movs	r0, #1
 8100bae:	f7ff fea1 	bl	81008f4 <MFRC522_Write_Data>

	// Writing data to the FIFO
	for (i=0; i<sendLen; i++)
 8100bb2:	2300      	movs	r3, #0
 8100bb4:	61bb      	str	r3, [r7, #24]
 8100bb6:	e00b      	b.n	8100bd0 <MFRC522_ToCard+0x92>
	{
		MFRC522_Write_Data(FIFODataReg, sendData[i], nss_num);
 8100bb8:	68ba      	ldr	r2, [r7, #8]
 8100bba:	69bb      	ldr	r3, [r7, #24]
 8100bbc:	4413      	add	r3, r2
 8100bbe:	781b      	ldrb	r3, [r3, #0]
 8100bc0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8100bc2:	4619      	mov	r1, r3
 8100bc4:	2009      	movs	r0, #9
 8100bc6:	f7ff fe95 	bl	81008f4 <MFRC522_Write_Data>
	for (i=0; i<sendLen; i++)
 8100bca:	69bb      	ldr	r3, [r7, #24]
 8100bcc:	3301      	adds	r3, #1
 8100bce:	61bb      	str	r3, [r7, #24]
 8100bd0:	7bbb      	ldrb	r3, [r7, #14]
 8100bd2:	69ba      	ldr	r2, [r7, #24]
 8100bd4:	429a      	cmp	r2, r3
 8100bd6:	d3ef      	bcc.n	8100bb8 <MFRC522_ToCard+0x7a>
	}

	// Execute the command
	MFRC522_Write_Data(CommandReg, command, nss_num);
 8100bd8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8100bda:	7bfb      	ldrb	r3, [r7, #15]
 8100bdc:	4619      	mov	r1, r3
 8100bde:	2001      	movs	r0, #1
 8100be0:	f7ff fe88 	bl	81008f4 <MFRC522_Write_Data>
	if (command == PCD_TRANSCEIVE)
 8100be4:	7bfb      	ldrb	r3, [r7, #15]
 8100be6:	2b0c      	cmp	r3, #12
 8100be8:	d105      	bne.n	8100bf6 <MFRC522_ToCard+0xb8>
	{
		SetBitMask(BitFramingReg, 0x80, nss_num);      // StartSend=1,transmission of data starts
 8100bea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100bec:	461a      	mov	r2, r3
 8100bee:	2180      	movs	r1, #128	; 0x80
 8100bf0:	200d      	movs	r0, #13
 8100bf2:	f7ff fee5 	bl	81009c0 <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8100bf6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8100bfa:	61bb      	str	r3, [r7, #24]
	do
	{
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_Read_Data(CommIrqReg, nss_num);
 8100bfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100bfe:	4619      	mov	r1, r3
 8100c00:	2004      	movs	r0, #4
 8100c02:	f7ff fea3 	bl	810094c <MFRC522_Read_Data>
 8100c06:	4603      	mov	r3, r0
 8100c08:	773b      	strb	r3, [r7, #28]
		i--;
 8100c0a:	69bb      	ldr	r3, [r7, #24]
 8100c0c:	3b01      	subs	r3, #1
 8100c0e:	61bb      	str	r3, [r7, #24]
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8100c10:	69bb      	ldr	r3, [r7, #24]
 8100c12:	2b00      	cmp	r3, #0
 8100c14:	d00a      	beq.n	8100c2c <MFRC522_ToCard+0xee>
 8100c16:	7f3b      	ldrb	r3, [r7, #28]
 8100c18:	f003 0301 	and.w	r3, r3, #1
 8100c1c:	2b00      	cmp	r3, #0
 8100c1e:	d105      	bne.n	8100c2c <MFRC522_ToCard+0xee>
 8100c20:	7f3a      	ldrb	r2, [r7, #28]
 8100c22:	7f7b      	ldrb	r3, [r7, #29]
 8100c24:	4013      	ands	r3, r2
 8100c26:	b2db      	uxtb	r3, r3
 8100c28:	2b00      	cmp	r3, #0
 8100c2a:	d0e7      	beq.n	8100bfc <MFRC522_ToCard+0xbe>

	ClearBitMask(BitFramingReg, 0x80, nss_num);      // StartSend=0
 8100c2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100c2e:	461a      	mov	r2, r3
 8100c30:	2180      	movs	r1, #128	; 0x80
 8100c32:	200d      	movs	r0, #13
 8100c34:	f7ff fee2 	bl	81009fc <ClearBitMask>

	if (i != 0)
 8100c38:	69bb      	ldr	r3, [r7, #24]
 8100c3a:	2b00      	cmp	r3, #0
 8100c3c:	d05a      	beq.n	8100cf4 <MFRC522_ToCard+0x1b6>
	{
		if(!(MFRC522_Read_Data(ErrorReg, nss_num) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8100c3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100c40:	4619      	mov	r1, r3
 8100c42:	2006      	movs	r0, #6
 8100c44:	f7ff fe82 	bl	810094c <MFRC522_Read_Data>
 8100c48:	4603      	mov	r3, r0
 8100c4a:	f003 031b 	and.w	r3, r3, #27
 8100c4e:	2b00      	cmp	r3, #0
 8100c50:	d14e      	bne.n	8100cf0 <MFRC522_ToCard+0x1b2>
		{
			status = MI_OK;
 8100c52:	2300      	movs	r3, #0
 8100c54:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01)
 8100c56:	7f3a      	ldrb	r2, [r7, #28]
 8100c58:	7fbb      	ldrb	r3, [r7, #30]
 8100c5a:	4013      	ands	r3, r2
 8100c5c:	b2db      	uxtb	r3, r3
 8100c5e:	f003 0301 	and.w	r3, r3, #1
 8100c62:	2b00      	cmp	r3, #0
 8100c64:	d001      	beq.n	8100c6a <MFRC522_ToCard+0x12c>
			{
				status = MI_NOTAGERR;             // ??
 8100c66:	2301      	movs	r3, #1
 8100c68:	77fb      	strb	r3, [r7, #31]
			}

			if (command == PCD_TRANSCEIVE)
 8100c6a:	7bfb      	ldrb	r3, [r7, #15]
 8100c6c:	2b0c      	cmp	r3, #12
 8100c6e:	d141      	bne.n	8100cf4 <MFRC522_ToCard+0x1b6>
			{
				n = MFRC522_Read_Data(FIFOLevelReg, nss_num);
 8100c70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100c72:	4619      	mov	r1, r3
 8100c74:	200a      	movs	r0, #10
 8100c76:	f7ff fe69 	bl	810094c <MFRC522_Read_Data>
 8100c7a:	4603      	mov	r3, r0
 8100c7c:	773b      	strb	r3, [r7, #28]
				lastBits = MFRC522_Read_Data(ControlReg, nss_num) & 0x07;
 8100c7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100c80:	4619      	mov	r1, r3
 8100c82:	200c      	movs	r0, #12
 8100c84:	f7ff fe62 	bl	810094c <MFRC522_Read_Data>
 8100c88:	4603      	mov	r3, r0
 8100c8a:	f003 0307 	and.w	r3, r3, #7
 8100c8e:	75fb      	strb	r3, [r7, #23]
				if (lastBits)
 8100c90:	7dfb      	ldrb	r3, [r7, #23]
 8100c92:	2b00      	cmp	r3, #0
 8100c94:	d008      	beq.n	8100ca8 <MFRC522_ToCard+0x16a>
				{
					*backLen = (n-1)*8 + lastBits;
 8100c96:	7f3b      	ldrb	r3, [r7, #28]
 8100c98:	3b01      	subs	r3, #1
 8100c9a:	00da      	lsls	r2, r3, #3
 8100c9c:	7dfb      	ldrb	r3, [r7, #23]
 8100c9e:	4413      	add	r3, r2
 8100ca0:	461a      	mov	r2, r3
 8100ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100ca4:	601a      	str	r2, [r3, #0]
 8100ca6:	e004      	b.n	8100cb2 <MFRC522_ToCard+0x174>
				}
				else
				{
					*backLen = n*8;
 8100ca8:	7f3b      	ldrb	r3, [r7, #28]
 8100caa:	00db      	lsls	r3, r3, #3
 8100cac:	461a      	mov	r2, r3
 8100cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100cb0:	601a      	str	r2, [r3, #0]
				}

				if (n == 0)
 8100cb2:	7f3b      	ldrb	r3, [r7, #28]
 8100cb4:	2b00      	cmp	r3, #0
 8100cb6:	d101      	bne.n	8100cbc <MFRC522_ToCard+0x17e>
				{
					n = 1;
 8100cb8:	2301      	movs	r3, #1
 8100cba:	773b      	strb	r3, [r7, #28]
				}
				if (n > MAX_LEN)
 8100cbc:	7f3b      	ldrb	r3, [r7, #28]
 8100cbe:	2b10      	cmp	r3, #16
 8100cc0:	d901      	bls.n	8100cc6 <MFRC522_ToCard+0x188>
				{
					n = MAX_LEN;
 8100cc2:	2310      	movs	r3, #16
 8100cc4:	773b      	strb	r3, [r7, #28]
				}

				// Reading the received data in FIFO
				for (i=0; i<n; i++)
 8100cc6:	2300      	movs	r3, #0
 8100cc8:	61bb      	str	r3, [r7, #24]
 8100cca:	e00c      	b.n	8100ce6 <MFRC522_ToCard+0x1a8>
				{
					backData[i] = MFRC522_Read_Data(FIFODataReg, nss_num);
 8100ccc:	687a      	ldr	r2, [r7, #4]
 8100cce:	69bb      	ldr	r3, [r7, #24]
 8100cd0:	18d4      	adds	r4, r2, r3
 8100cd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8100cd4:	4619      	mov	r1, r3
 8100cd6:	2009      	movs	r0, #9
 8100cd8:	f7ff fe38 	bl	810094c <MFRC522_Read_Data>
 8100cdc:	4603      	mov	r3, r0
 8100cde:	7023      	strb	r3, [r4, #0]
				for (i=0; i<n; i++)
 8100ce0:	69bb      	ldr	r3, [r7, #24]
 8100ce2:	3301      	adds	r3, #1
 8100ce4:	61bb      	str	r3, [r7, #24]
 8100ce6:	7f3b      	ldrb	r3, [r7, #28]
 8100ce8:	69ba      	ldr	r2, [r7, #24]
 8100cea:	429a      	cmp	r2, r3
 8100cec:	d3ee      	bcc.n	8100ccc <MFRC522_ToCard+0x18e>
 8100cee:	e001      	b.n	8100cf4 <MFRC522_ToCard+0x1b6>
				}
			}
		}
		else {
			//printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			status = MI_ERR;
 8100cf0:	2302      	movs	r3, #2
 8100cf2:	77fb      	strb	r3, [r7, #31]
	}
	else {
		//printf("~~~ request timed out\r\n");
	}

	return status;
 8100cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8100cf6:	4618      	mov	r0, r3
 8100cf8:	3724      	adds	r7, #36	; 0x24
 8100cfa:	46bd      	mov	sp, r7
 8100cfc:	bd90      	pop	{r4, r7, pc}

08100cfe <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum, uint16_t nss_num)
{
 8100cfe:	b580      	push	{r7, lr}
 8100d00:	b086      	sub	sp, #24
 8100d02:	af02      	add	r7, sp, #8
 8100d04:	6078      	str	r0, [r7, #4]
 8100d06:	460b      	mov	r3, r1
 8100d08:	807b      	strh	r3, [r7, #2]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
 8100d0a:	2300      	movs	r3, #0
 8100d0c:	737b      	strb	r3, [r7, #13]
	uint unLen;


	//ClearBitMask(Status2Reg, 0x08);		//TempSensclear
	//ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	MFRC522_Write_Data(BitFramingReg, 0x00, nss_num);		//TxLastBists = BitFramingReg[2..0]
 8100d0e:	887b      	ldrh	r3, [r7, #2]
 8100d10:	461a      	mov	r2, r3
 8100d12:	2100      	movs	r1, #0
 8100d14:	200d      	movs	r0, #13
 8100d16:	f7ff fded 	bl	81008f4 <MFRC522_Write_Data>

	serNum[0] = PICC_ANTICOLL;
 8100d1a:	687b      	ldr	r3, [r7, #4]
 8100d1c:	2293      	movs	r2, #147	; 0x93
 8100d1e:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8100d20:	687b      	ldr	r3, [r7, #4]
 8100d22:	3301      	adds	r3, #1
 8100d24:	2220      	movs	r2, #32
 8100d26:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen, nss_num);
 8100d28:	887b      	ldrh	r3, [r7, #2]
 8100d2a:	9301      	str	r3, [sp, #4]
 8100d2c:	f107 0308 	add.w	r3, r7, #8
 8100d30:	9300      	str	r3, [sp, #0]
 8100d32:	687b      	ldr	r3, [r7, #4]
 8100d34:	2202      	movs	r2, #2
 8100d36:	6879      	ldr	r1, [r7, #4]
 8100d38:	200c      	movs	r0, #12
 8100d3a:	f7ff ff00 	bl	8100b3e <MFRC522_ToCard>
 8100d3e:	4603      	mov	r3, r0
 8100d40:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK)
 8100d42:	7bfb      	ldrb	r3, [r7, #15]
 8100d44:	2b00      	cmp	r3, #0
 8100d46:	d118      	bne.n	8100d7a <MFRC522_Anticoll+0x7c>
	{
		//Check card serial number
		for (i=0; i<4; i++)
 8100d48:	2300      	movs	r3, #0
 8100d4a:	73bb      	strb	r3, [r7, #14]
 8100d4c:	e009      	b.n	8100d62 <MFRC522_Anticoll+0x64>
		{
			serNumCheck ^= serNum[i];
 8100d4e:	7bbb      	ldrb	r3, [r7, #14]
 8100d50:	687a      	ldr	r2, [r7, #4]
 8100d52:	4413      	add	r3, r2
 8100d54:	781a      	ldrb	r2, [r3, #0]
 8100d56:	7b7b      	ldrb	r3, [r7, #13]
 8100d58:	4053      	eors	r3, r2
 8100d5a:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8100d5c:	7bbb      	ldrb	r3, [r7, #14]
 8100d5e:	3301      	adds	r3, #1
 8100d60:	73bb      	strb	r3, [r7, #14]
 8100d62:	7bbb      	ldrb	r3, [r7, #14]
 8100d64:	2b03      	cmp	r3, #3
 8100d66:	d9f2      	bls.n	8100d4e <MFRC522_Anticoll+0x50>
		}
		if (serNumCheck != serNum[i])
 8100d68:	7bbb      	ldrb	r3, [r7, #14]
 8100d6a:	687a      	ldr	r2, [r7, #4]
 8100d6c:	4413      	add	r3, r2
 8100d6e:	781b      	ldrb	r3, [r3, #0]
 8100d70:	7b7a      	ldrb	r2, [r7, #13]
 8100d72:	429a      	cmp	r2, r3
 8100d74:	d001      	beq.n	8100d7a <MFRC522_Anticoll+0x7c>
		{
			status = MI_ERR;
 8100d76:	2302      	movs	r3, #2
 8100d78:	73fb      	strb	r3, [r7, #15]
		}
	}

	//SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

	return status;
 8100d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8100d7c:	4618      	mov	r0, r3
 8100d7e:	3710      	adds	r7, #16
 8100d80:	46bd      	mov	sp, r7
 8100d82:	bd80      	pop	{r7, pc}

08100d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100d84:	b580      	push	{r7, lr}
 8100d86:	b084      	sub	sp, #16
 8100d88:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8100d8a:	4b73      	ldr	r3, [pc, #460]	; (8100f58 <main+0x1d4>)
 8100d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d90:	4a71      	ldr	r2, [pc, #452]	; (8100f58 <main+0x1d4>)
 8100d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d9a:	4b6f      	ldr	r3, [pc, #444]	; (8100f58 <main+0x1d4>)
 8100d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100da4:	603b      	str	r3, [r7, #0]
 8100da6:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100da8:	2001      	movs	r0, #1
 8100daa:	f002 ff09 	bl	8103bc0 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8100dae:	f002 ff93 	bl	8103cd8 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100db2:	2201      	movs	r2, #1
 8100db4:	2102      	movs	r1, #2
 8100db6:	2000      	movs	r0, #0
 8100db8:	f002 ff14 	bl	8103be4 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100dbc:	4b67      	ldr	r3, [pc, #412]	; (8100f5c <main+0x1d8>)
 8100dbe:	681b      	ldr	r3, [r3, #0]
 8100dc0:	091b      	lsrs	r3, r3, #4
 8100dc2:	f003 030f 	and.w	r3, r3, #15
 8100dc6:	2b07      	cmp	r3, #7
 8100dc8:	d108      	bne.n	8100ddc <main+0x58>
 8100dca:	4b65      	ldr	r3, [pc, #404]	; (8100f60 <main+0x1dc>)
 8100dcc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100dd0:	4a63      	ldr	r2, [pc, #396]	; (8100f60 <main+0x1dc>)
 8100dd2:	f043 0301 	orr.w	r3, r3, #1
 8100dd6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100dda:	e007      	b.n	8100dec <main+0x68>
 8100ddc:	4b60      	ldr	r3, [pc, #384]	; (8100f60 <main+0x1dc>)
 8100dde:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100de2:	4a5f      	ldr	r2, [pc, #380]	; (8100f60 <main+0x1dc>)
 8100de4:	f043 0301 	orr.w	r3, r3, #1
 8100de8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100dec:	f000 fc02 	bl	81015f4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100df0:	f000 f9ee 	bl	81011d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8100df4:	f000 f9c4 	bl	8101180 <MX_DMA_Init>
  MX_SPI1_Init();
 8100df8:	f000 f96c 	bl	81010d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	// MC14515 Handle Init
	MC14515.STPort = GPIOC;
 8100dfc:	4b59      	ldr	r3, [pc, #356]	; (8100f64 <main+0x1e0>)
 8100dfe:	4a5a      	ldr	r2, [pc, #360]	; (8100f68 <main+0x1e4>)
 8100e00:	601a      	str	r2, [r3, #0]
	MC14515.STPin = GPIO_PIN_6;
 8100e02:	4b58      	ldr	r3, [pc, #352]	; (8100f64 <main+0x1e0>)
 8100e04:	2240      	movs	r2, #64	; 0x40
 8100e06:	831a      	strh	r2, [r3, #24]
	MC14515.INHPort = GPIOB;
 8100e08:	4b56      	ldr	r3, [pc, #344]	; (8100f64 <main+0x1e0>)
 8100e0a:	4a58      	ldr	r2, [pc, #352]	; (8100f6c <main+0x1e8>)
 8100e0c:	605a      	str	r2, [r3, #4]
	MC14515.INHPin = GPIO_PIN_8;
 8100e0e:	4b55      	ldr	r3, [pc, #340]	; (8100f64 <main+0x1e0>)
 8100e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100e14:	835a      	strh	r2, [r3, #26]
	MC14515.D1Port = GPIOB;
 8100e16:	4b53      	ldr	r3, [pc, #332]	; (8100f64 <main+0x1e0>)
 8100e18:	4a54      	ldr	r2, [pc, #336]	; (8100f6c <main+0x1e8>)
 8100e1a:	609a      	str	r2, [r3, #8]
	MC14515.D1Pin = GPIO_PIN_15;
 8100e1c:	4b51      	ldr	r3, [pc, #324]	; (8100f64 <main+0x1e0>)
 8100e1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100e22:	839a      	strh	r2, [r3, #28]
	MC14515.D2Port = GPIOB;
 8100e24:	4b4f      	ldr	r3, [pc, #316]	; (8100f64 <main+0x1e0>)
 8100e26:	4a51      	ldr	r2, [pc, #324]	; (8100f6c <main+0x1e8>)
 8100e28:	60da      	str	r2, [r3, #12]
	MC14515.D2Pin = GPIO_PIN_12;
 8100e2a:	4b4e      	ldr	r3, [pc, #312]	; (8100f64 <main+0x1e0>)
 8100e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8100e30:	83da      	strh	r2, [r3, #30]
	MC14515.D3Port = GPIOB;
 8100e32:	4b4c      	ldr	r3, [pc, #304]	; (8100f64 <main+0x1e0>)
 8100e34:	4a4d      	ldr	r2, [pc, #308]	; (8100f6c <main+0x1e8>)
 8100e36:	611a      	str	r2, [r3, #16]
	MC14515.D3Pin = GPIO_PIN_9;
 8100e38:	4b4a      	ldr	r3, [pc, #296]	; (8100f64 <main+0x1e0>)
 8100e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8100e3e:	841a      	strh	r2, [r3, #32]
	MC14515.D4Port = GPIOC;
 8100e40:	4b48      	ldr	r3, [pc, #288]	; (8100f64 <main+0x1e0>)
 8100e42:	4a49      	ldr	r2, [pc, #292]	; (8100f68 <main+0x1e4>)
 8100e44:	615a      	str	r2, [r3, #20]
	MC14515.D4Pin = GPIO_PIN_7;
 8100e46:	4b47      	ldr	r3, [pc, #284]	; (8100f64 <main+0x1e0>)
 8100e48:	2280      	movs	r2, #128	; 0x80
 8100e4a:	845a      	strh	r2, [r3, #34]	; 0x22

	// Reset MC14515
	MC14515_Set_Output_All_High(&MC14515);
 8100e4c:	4845      	ldr	r0, [pc, #276]	; (8100f64 <main+0x1e0>)
 8100e4e:	f7ff fd31 	bl	81008b4 <MC14515_Set_Output_All_High>

	// Reset MFRC522
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8100e52:	2201      	movs	r2, #1
 8100e54:	2120      	movs	r1, #32
 8100e56:	4845      	ldr	r0, [pc, #276]	; (8100f6c <main+0x1e8>)
 8100e58:	f002 fe7e 	bl	8103b58 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8100e5c:	200a      	movs	r0, #10
 8100e5e:	f000 fc7d 	bl	810175c <HAL_Delay>

	// Init MFRC522
	for (int i = 0; i < MFRC522_SLAVE_MAX; ++i)
 8100e62:	2300      	movs	r3, #0
 8100e64:	60fb      	str	r3, [r7, #12]
 8100e66:	e007      	b.n	8100e78 <main+0xf4>
	{
		MFRC522_Init(i);
 8100e68:	68fb      	ldr	r3, [r7, #12]
 8100e6a:	b29b      	uxth	r3, r3
 8100e6c:	4618      	mov	r0, r3
 8100e6e:	f7ff fe06 	bl	8100a7e <MFRC522_Init>
	for (int i = 0; i < MFRC522_SLAVE_MAX; ++i)
 8100e72:	68fb      	ldr	r3, [r7, #12]
 8100e74:	3301      	adds	r3, #1
 8100e76:	60fb      	str	r3, [r7, #12]
 8100e78:	68fb      	ldr	r3, [r7, #12]
 8100e7a:	2b0b      	cmp	r3, #11
 8100e7c:	ddf4      	ble.n	8100e68 <main+0xe4>
	}

	// RFID Handle Init
	ptrRFIDMain = &RFIDMain;
 8100e7e:	4b3c      	ldr	r3, [pc, #240]	; (8100f70 <main+0x1ec>)
 8100e80:	4a3c      	ldr	r2, [pc, #240]	; (8100f74 <main+0x1f0>)
 8100e82:	601a      	str	r2, [r3, #0]
	status = MFRC522_Read_Data(VersionReg,slave_num);
 8100e84:	4b3c      	ldr	r3, [pc, #240]	; (8100f78 <main+0x1f4>)
 8100e86:	881b      	ldrh	r3, [r3, #0]
 8100e88:	4619      	mov	r1, r3
 8100e8a:	2037      	movs	r0, #55	; 0x37
 8100e8c:	f7ff fd5e 	bl	810094c <MFRC522_Read_Data>
 8100e90:	4603      	mov	r3, r0
 8100e92:	461a      	mov	r2, r3
 8100e94:	4b39      	ldr	r3, [pc, #228]	; (8100f7c <main+0x1f8>)
 8100e96:	701a      	strb	r2, [r3, #0]
	ptrRFIDMain->status = status;
 8100e98:	4b35      	ldr	r3, [pc, #212]	; (8100f70 <main+0x1ec>)
 8100e9a:	681b      	ldr	r3, [r3, #0]
 8100e9c:	4a37      	ldr	r2, [pc, #220]	; (8100f7c <main+0x1f8>)
 8100e9e:	7812      	ldrb	r2, [r2, #0]
 8100ea0:	709a      	strb	r2, [r3, #2]
	for (uint8_t  i = 0; i < RFID_NUM_MAX; ++i)
 8100ea2:	2300      	movs	r3, #0
 8100ea4:	72fb      	strb	r3, [r7, #11]
 8100ea6:	e01a      	b.n	8100ede <main+0x15a>
	{
		ptrRFID = &RFIDMain.RFID[i];
 8100ea8:	7afa      	ldrb	r2, [r7, #11]
 8100eaa:	4613      	mov	r3, r2
 8100eac:	005b      	lsls	r3, r3, #1
 8100eae:	4413      	add	r3, r2
 8100eb0:	011b      	lsls	r3, r3, #4
 8100eb2:	3328      	adds	r3, #40	; 0x28
 8100eb4:	4a2f      	ldr	r2, [pc, #188]	; (8100f74 <main+0x1f0>)
 8100eb6:	4413      	add	r3, r2
 8100eb8:	4a31      	ldr	r2, [pc, #196]	; (8100f80 <main+0x1fc>)
 8100eba:	6013      	str	r3, [r2, #0]
		ptrRFID->slaveAddr = i;
 8100ebc:	4b30      	ldr	r3, [pc, #192]	; (8100f80 <main+0x1fc>)
 8100ebe:	681b      	ldr	r3, [r3, #0]
 8100ec0:	7afa      	ldrb	r2, [r7, #11]
 8100ec2:	b292      	uxth	r2, r2
 8100ec4:	801a      	strh	r2, [r3, #0]
		ptrRFID->status = status;
 8100ec6:	4b2e      	ldr	r3, [pc, #184]	; (8100f80 <main+0x1fc>)
 8100ec8:	681b      	ldr	r3, [r3, #0]
 8100eca:	4a2c      	ldr	r2, [pc, #176]	; (8100f7c <main+0x1f8>)
 8100ecc:	7812      	ldrb	r2, [r2, #0]
 8100ece:	709a      	strb	r2, [r3, #2]
		ptrRFID->action = 0;
 8100ed0:	4b2b      	ldr	r3, [pc, #172]	; (8100f80 <main+0x1fc>)
 8100ed2:	681b      	ldr	r3, [r3, #0]
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	70da      	strb	r2, [r3, #3]
	for (uint8_t  i = 0; i < RFID_NUM_MAX; ++i)
 8100ed8:	7afb      	ldrb	r3, [r7, #11]
 8100eda:	3301      	adds	r3, #1
 8100edc:	72fb      	strb	r3, [r7, #11]
 8100ede:	7afb      	ldrb	r3, [r7, #11]
 8100ee0:	2b0b      	cmp	r3, #11
 8100ee2:	d9e1      	bls.n	8100ea8 <main+0x124>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(HAL_GetTick() - timemsM4 > 200)
 8100ee4:	f000 fc2e 	bl	8101744 <HAL_GetTick>
 8100ee8:	4602      	mov	r2, r0
 8100eea:	4b26      	ldr	r3, [pc, #152]	; (8100f84 <main+0x200>)
 8100eec:	681b      	ldr	r3, [r3, #0]
 8100eee:	1ad3      	subs	r3, r2, r3
 8100ef0:	2bc8      	cmp	r3, #200	; 0xc8
 8100ef2:	f240 80c8 	bls.w	8101086 <main+0x302>
		{
			timemsM4 = HAL_GetTick();
 8100ef6:	f000 fc25 	bl	8101744 <HAL_GetTick>
 8100efa:	4603      	mov	r3, r0
 8100efc:	4a21      	ldr	r2, [pc, #132]	; (8100f84 <main+0x200>)
 8100efe:	6013      	str	r3, [r2, #0]
			// Update Slave number and Update RFID PTR
			slave_num = (slave_num + 1) % MFRC522_SLAVE_MAX ;
 8100f00:	4b1d      	ldr	r3, [pc, #116]	; (8100f78 <main+0x1f4>)
 8100f02:	881b      	ldrh	r3, [r3, #0]
 8100f04:	1c5a      	adds	r2, r3, #1
 8100f06:	4b20      	ldr	r3, [pc, #128]	; (8100f88 <main+0x204>)
 8100f08:	fb83 1302 	smull	r1, r3, r3, r2
 8100f0c:	1059      	asrs	r1, r3, #1
 8100f0e:	17d3      	asrs	r3, r2, #31
 8100f10:	1ac9      	subs	r1, r1, r3
 8100f12:	460b      	mov	r3, r1
 8100f14:	005b      	lsls	r3, r3, #1
 8100f16:	440b      	add	r3, r1
 8100f18:	009b      	lsls	r3, r3, #2
 8100f1a:	1ad1      	subs	r1, r2, r3
 8100f1c:	b28a      	uxth	r2, r1
 8100f1e:	4b16      	ldr	r3, [pc, #88]	; (8100f78 <main+0x1f4>)
 8100f20:	801a      	strh	r2, [r3, #0]
			ptrRFIDMain->slaveNum = slave_num;
 8100f22:	4b13      	ldr	r3, [pc, #76]	; (8100f70 <main+0x1ec>)
 8100f24:	681b      	ldr	r3, [r3, #0]
 8100f26:	4a14      	ldr	r2, [pc, #80]	; (8100f78 <main+0x1f4>)
 8100f28:	8812      	ldrh	r2, [r2, #0]
 8100f2a:	801a      	strh	r2, [r3, #0]
			ptrRFID = &RFIDMain.RFID[RFIDMain.slaveNum];
 8100f2c:	4b11      	ldr	r3, [pc, #68]	; (8100f74 <main+0x1f0>)
 8100f2e:	881b      	ldrh	r3, [r3, #0]
 8100f30:	461a      	mov	r2, r3
 8100f32:	4613      	mov	r3, r2
 8100f34:	005b      	lsls	r3, r3, #1
 8100f36:	4413      	add	r3, r2
 8100f38:	011b      	lsls	r3, r3, #4
 8100f3a:	3328      	adds	r3, #40	; 0x28
 8100f3c:	4a0d      	ldr	r2, [pc, #52]	; (8100f74 <main+0x1f0>)
 8100f3e:	4413      	add	r3, r2
 8100f40:	4a0f      	ldr	r2, [pc, #60]	; (8100f80 <main+0x1fc>)
 8100f42:	6013      	str	r3, [r2, #0]
			if(hspi1.State == HAL_SPI_STATE_READY)
 8100f44:	4b11      	ldr	r3, [pc, #68]	; (8100f8c <main+0x208>)
 8100f46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8100f4a:	b2db      	uxtb	r3, r3
 8100f4c:	2b01      	cmp	r3, #1
 8100f4e:	f040 809a 	bne.w	8101086 <main+0x302>
			{
				for (int i = 0; i < 16; i++)
 8100f52:	2300      	movs	r3, #0
 8100f54:	607b      	str	r3, [r7, #4]
 8100f56:	e02e      	b.n	8100fb6 <main+0x232>
 8100f58:	58024400 	.word	0x58024400
 8100f5c:	e000ed00 	.word	0xe000ed00
 8100f60:	58026400 	.word	0x58026400
 8100f64:	100001a4 	.word	0x100001a4
 8100f68:	58020800 	.word	0x58020800
 8100f6c:	58020400 	.word	0x58020400
 8100f70:	10000430 	.word	0x10000430
 8100f74:	100001c8 	.word	0x100001c8
 8100f78:	10000444 	.word	0x10000444
 8100f7c:	10000446 	.word	0x10000446
 8100f80:	10000434 	.word	0x10000434
 8100f84:	1000043c 	.word	0x1000043c
 8100f88:	2aaaaaab 	.word	0x2aaaaaab
 8100f8c:	1000002c 	.word	0x1000002c
				{
					// Clear cardstr
					cardstr[i] = 0;
 8100f90:	4a47      	ldr	r2, [pc, #284]	; (81010b0 <main+0x32c>)
 8100f92:	687b      	ldr	r3, [r7, #4]
 8100f94:	4413      	add	r3, r2
 8100f96:	2200      	movs	r2, #0
 8100f98:	701a      	strb	r2, [r3, #0]
					ptrRFIDMain->cardStr[i] = cardstr[i];
 8100f9a:	4b46      	ldr	r3, [pc, #280]	; (81010b4 <main+0x330>)
 8100f9c:	681a      	ldr	r2, [r3, #0]
 8100f9e:	4944      	ldr	r1, [pc, #272]	; (81010b0 <main+0x32c>)
 8100fa0:	687b      	ldr	r3, [r7, #4]
 8100fa2:	440b      	add	r3, r1
 8100fa4:	7819      	ldrb	r1, [r3, #0]
 8100fa6:	687b      	ldr	r3, [r7, #4]
 8100fa8:	4413      	add	r3, r2
 8100faa:	3303      	adds	r3, #3
 8100fac:	460a      	mov	r2, r1
 8100fae:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 16; i++)
 8100fb0:	687b      	ldr	r3, [r7, #4]
 8100fb2:	3301      	adds	r3, #1
 8100fb4:	607b      	str	r3, [r7, #4]
 8100fb6:	687b      	ldr	r3, [r7, #4]
 8100fb8:	2b0f      	cmp	r3, #15
 8100fba:	dde9      	ble.n	8100f90 <main+0x20c>
				}
				status = 99;
 8100fbc:	4b3e      	ldr	r3, [pc, #248]	; (81010b8 <main+0x334>)
 8100fbe:	2263      	movs	r2, #99	; 0x63
 8100fc0:	701a      	strb	r2, [r3, #0]
				ptrRFIDMain->status = status;
 8100fc2:	4b3c      	ldr	r3, [pc, #240]	; (81010b4 <main+0x330>)
 8100fc4:	681b      	ldr	r3, [r3, #0]
 8100fc6:	4a3c      	ldr	r2, [pc, #240]	; (81010b8 <main+0x334>)
 8100fc8:	7812      	ldrb	r2, [r2, #0]
 8100fca:	709a      	strb	r2, [r3, #2]
				ptrRFID->status =status;
 8100fcc:	4b3b      	ldr	r3, [pc, #236]	; (81010bc <main+0x338>)
 8100fce:	681b      	ldr	r3, [r3, #0]
 8100fd0:	4a39      	ldr	r2, [pc, #228]	; (81010b8 <main+0x334>)
 8100fd2:	7812      	ldrb	r2, [r2, #0]
 8100fd4:	709a      	strb	r2, [r3, #2]
				// Find cards
				status = MFRC522_Request(PICC_REQIDL, cardstr,slave_num);
 8100fd6:	4b3a      	ldr	r3, [pc, #232]	; (81010c0 <main+0x33c>)
 8100fd8:	881b      	ldrh	r3, [r3, #0]
 8100fda:	461a      	mov	r2, r3
 8100fdc:	4934      	ldr	r1, [pc, #208]	; (81010b0 <main+0x32c>)
 8100fde:	2026      	movs	r0, #38	; 0x26
 8100fe0:	f7ff fd82 	bl	8100ae8 <MFRC522_Request>
 8100fe4:	4603      	mov	r3, r0
 8100fe6:	461a      	mov	r2, r3
 8100fe8:	4b33      	ldr	r3, [pc, #204]	; (81010b8 <main+0x334>)
 8100fea:	701a      	strb	r2, [r3, #0]
				ptrRFIDMain->status = status;
 8100fec:	4b31      	ldr	r3, [pc, #196]	; (81010b4 <main+0x330>)
 8100fee:	681b      	ldr	r3, [r3, #0]
 8100ff0:	4a31      	ldr	r2, [pc, #196]	; (81010b8 <main+0x334>)
 8100ff2:	7812      	ldrb	r2, [r2, #0]
 8100ff4:	709a      	strb	r2, [r3, #2]
				ptrRFID->status =status;
 8100ff6:	4b31      	ldr	r3, [pc, #196]	; (81010bc <main+0x338>)
 8100ff8:	681b      	ldr	r3, [r3, #0]
 8100ffa:	4a2f      	ldr	r2, [pc, #188]	; (81010b8 <main+0x334>)
 8100ffc:	7812      	ldrb	r2, [r2, #0]
 8100ffe:	709a      	strb	r2, [r3, #2]
				if(status == MI_OK)
 8101000:	4b2d      	ldr	r3, [pc, #180]	; (81010b8 <main+0x334>)
 8101002:	781b      	ldrb	r3, [r3, #0]
 8101004:	2b00      	cmp	r3, #0
 8101006:	d13e      	bne.n	8101086 <main+0x302>
				{
					status = MFRC522_Anticoll(cardstr,slave_num);
 8101008:	4b2d      	ldr	r3, [pc, #180]	; (81010c0 <main+0x33c>)
 810100a:	881b      	ldrh	r3, [r3, #0]
 810100c:	4619      	mov	r1, r3
 810100e:	4828      	ldr	r0, [pc, #160]	; (81010b0 <main+0x32c>)
 8101010:	f7ff fe75 	bl	8100cfe <MFRC522_Anticoll>
 8101014:	4603      	mov	r3, r0
 8101016:	461a      	mov	r2, r3
 8101018:	4b27      	ldr	r3, [pc, #156]	; (81010b8 <main+0x334>)
 810101a:	701a      	strb	r2, [r3, #0]
					ptrRFIDMain->status = status;
 810101c:	4b25      	ldr	r3, [pc, #148]	; (81010b4 <main+0x330>)
 810101e:	681b      	ldr	r3, [r3, #0]
 8101020:	4a25      	ldr	r2, [pc, #148]	; (81010b8 <main+0x334>)
 8101022:	7812      	ldrb	r2, [r2, #0]
 8101024:	709a      	strb	r2, [r3, #2]
					ptrRFID->status =status;
 8101026:	4b25      	ldr	r3, [pc, #148]	; (81010bc <main+0x338>)
 8101028:	681b      	ldr	r3, [r3, #0]
 810102a:	4a23      	ldr	r2, [pc, #140]	; (81010b8 <main+0x334>)
 810102c:	7812      	ldrb	r2, [r2, #0]
 810102e:	709a      	strb	r2, [r3, #2]
					if(status == MI_OK)
 8101030:	4b21      	ldr	r3, [pc, #132]	; (81010b8 <main+0x334>)
 8101032:	781b      	ldrb	r3, [r3, #0]
 8101034:	2b00      	cmp	r3, #0
 8101036:	d126      	bne.n	8101086 <main+0x302>
					{
						// Update Card PTR
						ptrCard =  &RFIDMain.RFID[RFIDMain.slaveNum].detectedCard;
 8101038:	4b22      	ldr	r3, [pc, #136]	; (81010c4 <main+0x340>)
 810103a:	881b      	ldrh	r3, [r3, #0]
 810103c:	461a      	mov	r2, r3
 810103e:	4613      	mov	r3, r2
 8101040:	005b      	lsls	r3, r3, #1
 8101042:	4413      	add	r3, r2
 8101044:	011b      	lsls	r3, r3, #4
 8101046:	3328      	adds	r3, #40	; 0x28
 8101048:	4a1e      	ldr	r2, [pc, #120]	; (81010c4 <main+0x340>)
 810104a:	4413      	add	r3, r2
 810104c:	3304      	adds	r3, #4
 810104e:	4a1e      	ldr	r2, [pc, #120]	; (81010c8 <main+0x344>)
 8101050:	6013      	str	r3, [r2, #0]
						// Update detected Card
						ptrCard->Cardbit.bit0 = cardstr[0];
 8101052:	4b1d      	ldr	r3, [pc, #116]	; (81010c8 <main+0x344>)
 8101054:	681b      	ldr	r3, [r3, #0]
 8101056:	4a16      	ldr	r2, [pc, #88]	; (81010b0 <main+0x32c>)
 8101058:	7812      	ldrb	r2, [r2, #0]
 810105a:	701a      	strb	r2, [r3, #0]
						ptrCard->Cardbit.bit1 = cardstr[1];
 810105c:	4b1a      	ldr	r3, [pc, #104]	; (81010c8 <main+0x344>)
 810105e:	681b      	ldr	r3, [r3, #0]
 8101060:	4a13      	ldr	r2, [pc, #76]	; (81010b0 <main+0x32c>)
 8101062:	7852      	ldrb	r2, [r2, #1]
 8101064:	705a      	strb	r2, [r3, #1]
						ptrCard->Cardbit.bit2 = cardstr[2];
 8101066:	4b18      	ldr	r3, [pc, #96]	; (81010c8 <main+0x344>)
 8101068:	681b      	ldr	r3, [r3, #0]
 810106a:	4a11      	ldr	r2, [pc, #68]	; (81010b0 <main+0x32c>)
 810106c:	7892      	ldrb	r2, [r2, #2]
 810106e:	709a      	strb	r2, [r3, #2]
						ptrCard->Cardbit.bit3 = cardstr[3];
 8101070:	4b15      	ldr	r3, [pc, #84]	; (81010c8 <main+0x344>)
 8101072:	681b      	ldr	r3, [r3, #0]
 8101074:	4a0e      	ldr	r2, [pc, #56]	; (81010b0 <main+0x32c>)
 8101076:	78d2      	ldrb	r2, [r2, #3]
 8101078:	70da      	strb	r2, [r3, #3]
						// Update Card Memory
						YUGIOH_card_Buffer_Update(&RFIDMain);
 810107a:	4812      	ldr	r0, [pc, #72]	; (81010c4 <main+0x340>)
 810107c:	f7ff f98a 	bl	8100394 <YUGIOH_card_Buffer_Update>
						// Update New Card
						YUGIOH_card_register(&RFIDMain);
 8101080:	4810      	ldr	r0, [pc, #64]	; (81010c4 <main+0x340>)
 8101082:	f7ff f95c 	bl	810033e <YUGIOH_card_register>
			}
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(HAL_GetTick() - timemsM4_LED > 1000)
 8101086:	f000 fb5d 	bl	8101744 <HAL_GetTick>
 810108a:	4602      	mov	r2, r0
 810108c:	4b0f      	ldr	r3, [pc, #60]	; (81010cc <main+0x348>)
 810108e:	681b      	ldr	r3, [r3, #0]
 8101090:	1ad3      	subs	r3, r2, r3
 8101092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8101096:	f67f af25 	bls.w	8100ee4 <main+0x160>
		{
			timemsM4_LED = HAL_GetTick();
 810109a:	f000 fb53 	bl	8101744 <HAL_GetTick>
 810109e:	4603      	mov	r3, r0
 81010a0:	4a0a      	ldr	r2, [pc, #40]	; (81010cc <main+0x348>)
 81010a2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 81010a4:	2102      	movs	r1, #2
 81010a6:	480a      	ldr	r0, [pc, #40]	; (81010d0 <main+0x34c>)
 81010a8:	f002 fd6f 	bl	8103b8a <HAL_GPIO_TogglePin>
		if(HAL_GetTick() - timemsM4 > 200)
 81010ac:	e71a      	b.n	8100ee4 <main+0x160>
 81010ae:	bf00      	nop
 81010b0:	10000448 	.word	0x10000448
 81010b4:	10000430 	.word	0x10000430
 81010b8:	10000446 	.word	0x10000446
 81010bc:	10000434 	.word	0x10000434
 81010c0:	10000444 	.word	0x10000444
 81010c4:	100001c8 	.word	0x100001c8
 81010c8:	10000438 	.word	0x10000438
 81010cc:	10000440 	.word	0x10000440
 81010d0:	58021000 	.word	0x58021000

081010d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 81010d4:	b580      	push	{r7, lr}
 81010d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 81010d8:	4b27      	ldr	r3, [pc, #156]	; (8101178 <MX_SPI1_Init+0xa4>)
 81010da:	4a28      	ldr	r2, [pc, #160]	; (810117c <MX_SPI1_Init+0xa8>)
 81010dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81010de:	4b26      	ldr	r3, [pc, #152]	; (8101178 <MX_SPI1_Init+0xa4>)
 81010e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81010e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81010e6:	4b24      	ldr	r3, [pc, #144]	; (8101178 <MX_SPI1_Init+0xa4>)
 81010e8:	2200      	movs	r2, #0
 81010ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 81010ec:	4b22      	ldr	r3, [pc, #136]	; (8101178 <MX_SPI1_Init+0xa4>)
 81010ee:	2207      	movs	r2, #7
 81010f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81010f2:	4b21      	ldr	r3, [pc, #132]	; (8101178 <MX_SPI1_Init+0xa4>)
 81010f4:	2200      	movs	r2, #0
 81010f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 81010f8:	4b1f      	ldr	r3, [pc, #124]	; (8101178 <MX_SPI1_Init+0xa4>)
 81010fa:	2200      	movs	r2, #0
 81010fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 81010fe:	4b1e      	ldr	r3, [pc, #120]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101100:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8101104:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8101106:	4b1c      	ldr	r3, [pc, #112]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101108:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 810110c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810110e:	4b1a      	ldr	r3, [pc, #104]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101110:	2200      	movs	r2, #0
 8101112:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101114:	4b18      	ldr	r3, [pc, #96]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101116:	2200      	movs	r2, #0
 8101118:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810111a:	4b17      	ldr	r3, [pc, #92]	; (8101178 <MX_SPI1_Init+0xa4>)
 810111c:	2200      	movs	r2, #0
 810111e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101120:	4b15      	ldr	r3, [pc, #84]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101122:	2200      	movs	r2, #0
 8101124:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101126:	4b14      	ldr	r3, [pc, #80]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810112c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810112e:	4b12      	ldr	r3, [pc, #72]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101130:	2200      	movs	r2, #0
 8101132:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101134:	4b10      	ldr	r3, [pc, #64]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101136:	2200      	movs	r2, #0
 8101138:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810113a:	4b0f      	ldr	r3, [pc, #60]	; (8101178 <MX_SPI1_Init+0xa4>)
 810113c:	2200      	movs	r2, #0
 810113e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101140:	4b0d      	ldr	r3, [pc, #52]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101142:	2200      	movs	r2, #0
 8101144:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101146:	4b0c      	ldr	r3, [pc, #48]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101148:	2200      	movs	r2, #0
 810114a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810114c:	4b0a      	ldr	r3, [pc, #40]	; (8101178 <MX_SPI1_Init+0xa4>)
 810114e:	2200      	movs	r2, #0
 8101150:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101152:	4b09      	ldr	r3, [pc, #36]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101154:	2200      	movs	r2, #0
 8101156:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101158:	4b07      	ldr	r3, [pc, #28]	; (8101178 <MX_SPI1_Init+0xa4>)
 810115a:	2200      	movs	r2, #0
 810115c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810115e:	4b06      	ldr	r3, [pc, #24]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101160:	2200      	movs	r2, #0
 8101162:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101164:	4804      	ldr	r0, [pc, #16]	; (8101178 <MX_SPI1_Init+0xa4>)
 8101166:	f002 ff3f 	bl	8103fe8 <HAL_SPI_Init>
 810116a:	4603      	mov	r3, r0
 810116c:	2b00      	cmp	r3, #0
 810116e:	d001      	beq.n	8101174 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8101170:	f000 f8d8 	bl	8101324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8101174:	bf00      	nop
 8101176:	bd80      	pop	{r7, pc}
 8101178:	1000002c 	.word	0x1000002c
 810117c:	40013000 	.word	0x40013000

08101180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8101180:	b580      	push	{r7, lr}
 8101182:	b082      	sub	sp, #8
 8101184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101186:	4b11      	ldr	r3, [pc, #68]	; (81011cc <MX_DMA_Init+0x4c>)
 8101188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810118c:	4a0f      	ldr	r2, [pc, #60]	; (81011cc <MX_DMA_Init+0x4c>)
 810118e:	f043 0301 	orr.w	r3, r3, #1
 8101192:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101196:	4b0d      	ldr	r3, [pc, #52]	; (81011cc <MX_DMA_Init+0x4c>)
 8101198:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810119c:	f003 0301 	and.w	r3, r3, #1
 81011a0:	607b      	str	r3, [r7, #4]
 81011a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 81011a4:	2200      	movs	r2, #0
 81011a6:	2100      	movs	r1, #0
 81011a8:	200b      	movs	r0, #11
 81011aa:	f000 fbd6 	bl	810195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 81011ae:	200b      	movs	r0, #11
 81011b0:	f000 fbed 	bl	810198e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 81011b4:	2200      	movs	r2, #0
 81011b6:	2100      	movs	r1, #0
 81011b8:	200e      	movs	r0, #14
 81011ba:	f000 fbce 	bl	810195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 81011be:	200e      	movs	r0, #14
 81011c0:	f000 fbe5 	bl	810198e <HAL_NVIC_EnableIRQ>

}
 81011c4:	bf00      	nop
 81011c6:	3708      	adds	r7, #8
 81011c8:	46bd      	mov	sp, r7
 81011ca:	bd80      	pop	{r7, pc}
 81011cc:	58024400 	.word	0x58024400

081011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81011d0:	b580      	push	{r7, lr}
 81011d2:	b08a      	sub	sp, #40	; 0x28
 81011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81011d6:	f107 0314 	add.w	r3, r7, #20
 81011da:	2200      	movs	r2, #0
 81011dc:	601a      	str	r2, [r3, #0]
 81011de:	605a      	str	r2, [r3, #4]
 81011e0:	609a      	str	r2, [r3, #8]
 81011e2:	60da      	str	r2, [r3, #12]
 81011e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81011e6:	4b4b      	ldr	r3, [pc, #300]	; (8101314 <MX_GPIO_Init+0x144>)
 81011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011ec:	4a49      	ldr	r2, [pc, #292]	; (8101314 <MX_GPIO_Init+0x144>)
 81011ee:	f043 0304 	orr.w	r3, r3, #4
 81011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011f6:	4b47      	ldr	r3, [pc, #284]	; (8101314 <MX_GPIO_Init+0x144>)
 81011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011fc:	f003 0304 	and.w	r3, r3, #4
 8101200:	613b      	str	r3, [r7, #16]
 8101202:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101204:	4b43      	ldr	r3, [pc, #268]	; (8101314 <MX_GPIO_Init+0x144>)
 8101206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810120a:	4a42      	ldr	r2, [pc, #264]	; (8101314 <MX_GPIO_Init+0x144>)
 810120c:	f043 0301 	orr.w	r3, r3, #1
 8101210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101214:	4b3f      	ldr	r3, [pc, #252]	; (8101314 <MX_GPIO_Init+0x144>)
 8101216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810121a:	f003 0301 	and.w	r3, r3, #1
 810121e:	60fb      	str	r3, [r7, #12]
 8101220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101222:	4b3c      	ldr	r3, [pc, #240]	; (8101314 <MX_GPIO_Init+0x144>)
 8101224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101228:	4a3a      	ldr	r2, [pc, #232]	; (8101314 <MX_GPIO_Init+0x144>)
 810122a:	f043 0302 	orr.w	r3, r3, #2
 810122e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101232:	4b38      	ldr	r3, [pc, #224]	; (8101314 <MX_GPIO_Init+0x144>)
 8101234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101238:	f003 0302 	and.w	r3, r3, #2
 810123c:	60bb      	str	r3, [r7, #8]
 810123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101240:	4b34      	ldr	r3, [pc, #208]	; (8101314 <MX_GPIO_Init+0x144>)
 8101242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101246:	4a33      	ldr	r2, [pc, #204]	; (8101314 <MX_GPIO_Init+0x144>)
 8101248:	f043 0308 	orr.w	r3, r3, #8
 810124c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101250:	4b30      	ldr	r3, [pc, #192]	; (8101314 <MX_GPIO_Init+0x144>)
 8101252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101256:	f003 0308 	and.w	r3, r3, #8
 810125a:	607b      	str	r3, [r7, #4]
 810125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810125e:	4b2d      	ldr	r3, [pc, #180]	; (8101314 <MX_GPIO_Init+0x144>)
 8101260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101264:	4a2b      	ldr	r2, [pc, #172]	; (8101314 <MX_GPIO_Init+0x144>)
 8101266:	f043 0310 	orr.w	r3, r3, #16
 810126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810126e:	4b29      	ldr	r3, [pc, #164]	; (8101314 <MX_GPIO_Init+0x144>)
 8101270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101274:	f003 0310 	and.w	r3, r3, #16
 8101278:	603b      	str	r3, [r7, #0]
 810127a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MC14515_D2_Pin|MC14515_D1_Pin|RC522_Rst_Pin
 810127c:	2200      	movs	r2, #0
 810127e:	f249 3121 	movw	r1, #37665	; 0x9321
 8101282:	4825      	ldr	r0, [pc, #148]	; (8101318 <MX_GPIO_Init+0x148>)
 8101284:	f002 fc68 	bl	8103b58 <HAL_GPIO_WritePin>
                          |MC14515_INH_Pin|MC14515_D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MC14515_ST_Pin|MC14515_D4_Pin, GPIO_PIN_RESET);
 8101288:	2200      	movs	r2, #0
 810128a:	21c0      	movs	r1, #192	; 0xc0
 810128c:	4823      	ldr	r0, [pc, #140]	; (810131c <MX_GPIO_Init+0x14c>)
 810128e:	f002 fc63 	bl	8103b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8101292:	2200      	movs	r2, #0
 8101294:	2102      	movs	r1, #2
 8101296:	4822      	ldr	r0, [pc, #136]	; (8101320 <MX_GPIO_Init+0x150>)
 8101298:	f002 fc5e 	bl	8103b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 810129c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81012a2:	2300      	movs	r3, #0
 81012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012a6:	2300      	movs	r3, #0
 81012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 81012aa:	f107 0314 	add.w	r3, r7, #20
 81012ae:	4619      	mov	r1, r3
 81012b0:	481a      	ldr	r0, [pc, #104]	; (810131c <MX_GPIO_Init+0x14c>)
 81012b2:	f002 faa1 	bl	81037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MC14515_D2_Pin MC14515_D1_Pin RC522_Rst_Pin
                           MC14515_INH_Pin MC14515_D3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MC14515_D2_Pin|MC14515_D1_Pin|RC522_Rst_Pin
 81012b6:	f249 3321 	movw	r3, #37665	; 0x9321
 81012ba:	617b      	str	r3, [r7, #20]
                          |MC14515_INH_Pin|MC14515_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81012bc:	2301      	movs	r3, #1
 81012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012c0:	2300      	movs	r3, #0
 81012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012c4:	2300      	movs	r3, #0
 81012c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81012c8:	f107 0314 	add.w	r3, r7, #20
 81012cc:	4619      	mov	r1, r3
 81012ce:	4812      	ldr	r0, [pc, #72]	; (8101318 <MX_GPIO_Init+0x148>)
 81012d0:	f002 fa92 	bl	81037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MC14515_ST_Pin MC14515_D4_Pin */
  GPIO_InitStruct.Pin = MC14515_ST_Pin|MC14515_D4_Pin;
 81012d4:	23c0      	movs	r3, #192	; 0xc0
 81012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81012d8:	2301      	movs	r3, #1
 81012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012dc:	2300      	movs	r3, #0
 81012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012e0:	2300      	movs	r3, #0
 81012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81012e4:	f107 0314 	add.w	r3, r7, #20
 81012e8:	4619      	mov	r1, r3
 81012ea:	480c      	ldr	r0, [pc, #48]	; (810131c <MX_GPIO_Init+0x14c>)
 81012ec:	f002 fa84 	bl	81037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81012f0:	2302      	movs	r3, #2
 81012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81012f4:	2301      	movs	r3, #1
 81012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012f8:	2300      	movs	r3, #0
 81012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012fc:	2300      	movs	r3, #0
 81012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8101300:	f107 0314 	add.w	r3, r7, #20
 8101304:	4619      	mov	r1, r3
 8101306:	4806      	ldr	r0, [pc, #24]	; (8101320 <MX_GPIO_Init+0x150>)
 8101308:	f002 fa76 	bl	81037f8 <HAL_GPIO_Init>

}
 810130c:	bf00      	nop
 810130e:	3728      	adds	r7, #40	; 0x28
 8101310:	46bd      	mov	sp, r7
 8101312:	bd80      	pop	{r7, pc}
 8101314:	58024400 	.word	0x58024400
 8101318:	58020400 	.word	0x58020400
 810131c:	58020800 	.word	0x58020800
 8101320:	58021000 	.word	0x58021000

08101324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101324:	b480      	push	{r7}
 8101326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101328:	b672      	cpsid	i
}
 810132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 810132c:	e7fe      	b.n	810132c <Error_Handler+0x8>
	...

08101330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101330:	b480      	push	{r7}
 8101332:	b083      	sub	sp, #12
 8101334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101336:	4b0a      	ldr	r3, [pc, #40]	; (8101360 <HAL_MspInit+0x30>)
 8101338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810133c:	4a08      	ldr	r2, [pc, #32]	; (8101360 <HAL_MspInit+0x30>)
 810133e:	f043 0302 	orr.w	r3, r3, #2
 8101342:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101346:	4b06      	ldr	r3, [pc, #24]	; (8101360 <HAL_MspInit+0x30>)
 8101348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810134c:	f003 0302 	and.w	r3, r3, #2
 8101350:	607b      	str	r3, [r7, #4]
 8101352:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101354:	bf00      	nop
 8101356:	370c      	adds	r7, #12
 8101358:	46bd      	mov	sp, r7
 810135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810135e:	4770      	bx	lr
 8101360:	58024400 	.word	0x58024400

08101364 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101364:	b580      	push	{r7, lr}
 8101366:	b08a      	sub	sp, #40	; 0x28
 8101368:	af00      	add	r7, sp, #0
 810136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810136c:	f107 0314 	add.w	r3, r7, #20
 8101370:	2200      	movs	r2, #0
 8101372:	601a      	str	r2, [r3, #0]
 8101374:	605a      	str	r2, [r3, #4]
 8101376:	609a      	str	r2, [r3, #8]
 8101378:	60da      	str	r2, [r3, #12]
 810137a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 810137c:	687b      	ldr	r3, [r7, #4]
 810137e:	681b      	ldr	r3, [r3, #0]
 8101380:	4a5b      	ldr	r2, [pc, #364]	; (81014f0 <HAL_SPI_MspInit+0x18c>)
 8101382:	4293      	cmp	r3, r2
 8101384:	f040 80af 	bne.w	81014e6 <HAL_SPI_MspInit+0x182>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101388:	4b5a      	ldr	r3, [pc, #360]	; (81014f4 <HAL_SPI_MspInit+0x190>)
 810138a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810138e:	4a59      	ldr	r2, [pc, #356]	; (81014f4 <HAL_SPI_MspInit+0x190>)
 8101390:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101394:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101398:	4b56      	ldr	r3, [pc, #344]	; (81014f4 <HAL_SPI_MspInit+0x190>)
 810139a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810139e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81013a2:	613b      	str	r3, [r7, #16]
 81013a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81013a6:	4b53      	ldr	r3, [pc, #332]	; (81014f4 <HAL_SPI_MspInit+0x190>)
 81013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013ac:	4a51      	ldr	r2, [pc, #324]	; (81014f4 <HAL_SPI_MspInit+0x190>)
 81013ae:	f043 0301 	orr.w	r3, r3, #1
 81013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013b6:	4b4f      	ldr	r3, [pc, #316]	; (81014f4 <HAL_SPI_MspInit+0x190>)
 81013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013bc:	f003 0301 	and.w	r3, r3, #1
 81013c0:	60fb      	str	r3, [r7, #12]
 81013c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81013c4:	4b4b      	ldr	r3, [pc, #300]	; (81014f4 <HAL_SPI_MspInit+0x190>)
 81013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013ca:	4a4a      	ldr	r2, [pc, #296]	; (81014f4 <HAL_SPI_MspInit+0x190>)
 81013cc:	f043 0308 	orr.w	r3, r3, #8
 81013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013d4:	4b47      	ldr	r3, [pc, #284]	; (81014f4 <HAL_SPI_MspInit+0x190>)
 81013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013da:	f003 0308 	and.w	r3, r3, #8
 81013de:	60bb      	str	r3, [r7, #8]
 81013e0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 81013e2:	2370      	movs	r3, #112	; 0x70
 81013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013e6:	2302      	movs	r3, #2
 81013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013ea:	2300      	movs	r3, #0
 81013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013ee:	2300      	movs	r3, #0
 81013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81013f2:	2305      	movs	r3, #5
 81013f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81013f6:	f107 0314 	add.w	r3, r7, #20
 81013fa:	4619      	mov	r1, r3
 81013fc:	483e      	ldr	r0, [pc, #248]	; (81014f8 <HAL_SPI_MspInit+0x194>)
 81013fe:	f002 f9fb 	bl	81037f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101402:	2380      	movs	r3, #128	; 0x80
 8101404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101406:	2302      	movs	r3, #2
 8101408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810140a:	2300      	movs	r3, #0
 810140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810140e:	2300      	movs	r3, #0
 8101410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101412:	2305      	movs	r3, #5
 8101414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101416:	f107 0314 	add.w	r3, r7, #20
 810141a:	4619      	mov	r1, r3
 810141c:	4837      	ldr	r0, [pc, #220]	; (81014fc <HAL_SPI_MspInit+0x198>)
 810141e:	f002 f9eb 	bl	81037f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101422:	4b37      	ldr	r3, [pc, #220]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 8101424:	4a37      	ldr	r2, [pc, #220]	; (8101504 <HAL_SPI_MspInit+0x1a0>)
 8101426:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101428:	4b35      	ldr	r3, [pc, #212]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 810142a:	2225      	movs	r2, #37	; 0x25
 810142c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810142e:	4b34      	ldr	r3, [pc, #208]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 8101430:	2200      	movs	r2, #0
 8101432:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101434:	4b32      	ldr	r3, [pc, #200]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 8101436:	2200      	movs	r2, #0
 8101438:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810143a:	4b31      	ldr	r3, [pc, #196]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 810143c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101440:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101442:	4b2f      	ldr	r3, [pc, #188]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 8101444:	2200      	movs	r2, #0
 8101446:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101448:	4b2d      	ldr	r3, [pc, #180]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 810144a:	2200      	movs	r2, #0
 810144c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 810144e:	4b2c      	ldr	r3, [pc, #176]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 8101450:	2200      	movs	r2, #0
 8101452:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8101454:	4b2a      	ldr	r3, [pc, #168]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 8101456:	2200      	movs	r2, #0
 8101458:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810145a:	4b29      	ldr	r3, [pc, #164]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 810145c:	2200      	movs	r2, #0
 810145e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101460:	4827      	ldr	r0, [pc, #156]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 8101462:	f000 fac3 	bl	81019ec <HAL_DMA_Init>
 8101466:	4603      	mov	r3, r0
 8101468:	2b00      	cmp	r3, #0
 810146a:	d001      	beq.n	8101470 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 810146c:	f7ff ff5a 	bl	8101324 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8101470:	687b      	ldr	r3, [r7, #4]
 8101472:	4a23      	ldr	r2, [pc, #140]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 8101474:	67da      	str	r2, [r3, #124]	; 0x7c
 8101476:	4a22      	ldr	r2, [pc, #136]	; (8101500 <HAL_SPI_MspInit+0x19c>)
 8101478:	687b      	ldr	r3, [r7, #4]
 810147a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 810147c:	4b22      	ldr	r3, [pc, #136]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 810147e:	4a23      	ldr	r2, [pc, #140]	; (810150c <HAL_SPI_MspInit+0x1a8>)
 8101480:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101482:	4b21      	ldr	r3, [pc, #132]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 8101484:	2226      	movs	r2, #38	; 0x26
 8101486:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101488:	4b1f      	ldr	r3, [pc, #124]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 810148a:	2240      	movs	r2, #64	; 0x40
 810148c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810148e:	4b1e      	ldr	r3, [pc, #120]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 8101490:	2200      	movs	r2, #0
 8101492:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101494:	4b1c      	ldr	r3, [pc, #112]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 8101496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810149a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810149c:	4b1a      	ldr	r3, [pc, #104]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 810149e:	2200      	movs	r2, #0
 81014a0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81014a2:	4b19      	ldr	r3, [pc, #100]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 81014a4:	2200      	movs	r2, #0
 81014a6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 81014a8:	4b17      	ldr	r3, [pc, #92]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 81014aa:	2200      	movs	r2, #0
 81014ac:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 81014ae:	4b16      	ldr	r3, [pc, #88]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 81014b0:	2200      	movs	r2, #0
 81014b2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81014b4:	4b14      	ldr	r3, [pc, #80]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 81014b6:	2200      	movs	r2, #0
 81014b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 81014ba:	4813      	ldr	r0, [pc, #76]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 81014bc:	f000 fa96 	bl	81019ec <HAL_DMA_Init>
 81014c0:	4603      	mov	r3, r0
 81014c2:	2b00      	cmp	r3, #0
 81014c4:	d001      	beq.n	81014ca <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 81014c6:	f7ff ff2d 	bl	8101324 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 81014ca:	687b      	ldr	r3, [r7, #4]
 81014cc:	4a0e      	ldr	r2, [pc, #56]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 81014ce:	679a      	str	r2, [r3, #120]	; 0x78
 81014d0:	4a0d      	ldr	r2, [pc, #52]	; (8101508 <HAL_SPI_MspInit+0x1a4>)
 81014d2:	687b      	ldr	r3, [r7, #4]
 81014d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 81014d6:	2200      	movs	r2, #0
 81014d8:	2100      	movs	r1, #0
 81014da:	2023      	movs	r0, #35	; 0x23
 81014dc:	f000 fa3d 	bl	810195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 81014e0:	2023      	movs	r0, #35	; 0x23
 81014e2:	f000 fa54 	bl	810198e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 81014e6:	bf00      	nop
 81014e8:	3728      	adds	r7, #40	; 0x28
 81014ea:	46bd      	mov	sp, r7
 81014ec:	bd80      	pop	{r7, pc}
 81014ee:	bf00      	nop
 81014f0:	40013000 	.word	0x40013000
 81014f4:	58024400 	.word	0x58024400
 81014f8:	58020000 	.word	0x58020000
 81014fc:	58020c00 	.word	0x58020c00
 8101500:	100000b4 	.word	0x100000b4
 8101504:	40020010 	.word	0x40020010
 8101508:	1000012c 	.word	0x1000012c
 810150c:	40020058 	.word	0x40020058

08101510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101510:	b480      	push	{r7}
 8101512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101514:	e7fe      	b.n	8101514 <NMI_Handler+0x4>

08101516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101516:	b480      	push	{r7}
 8101518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810151a:	e7fe      	b.n	810151a <HardFault_Handler+0x4>

0810151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810151c:	b480      	push	{r7}
 810151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101520:	e7fe      	b.n	8101520 <MemManage_Handler+0x4>

08101522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101522:	b480      	push	{r7}
 8101524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101526:	e7fe      	b.n	8101526 <BusFault_Handler+0x4>

08101528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101528:	b480      	push	{r7}
 810152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810152c:	e7fe      	b.n	810152c <UsageFault_Handler+0x4>

0810152e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810152e:	b480      	push	{r7}
 8101530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101532:	bf00      	nop
 8101534:	46bd      	mov	sp, r7
 8101536:	f85d 7b04 	ldr.w	r7, [sp], #4
 810153a:	4770      	bx	lr

0810153c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810153c:	b480      	push	{r7}
 810153e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101540:	bf00      	nop
 8101542:	46bd      	mov	sp, r7
 8101544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101548:	4770      	bx	lr

0810154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810154a:	b480      	push	{r7}
 810154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810154e:	bf00      	nop
 8101550:	46bd      	mov	sp, r7
 8101552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101556:	4770      	bx	lr

08101558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101558:	b580      	push	{r7, lr}
 810155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810155c:	f000 f8de 	bl	810171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101560:	bf00      	nop
 8101562:	bd80      	pop	{r7, pc}

08101564 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101564:	b580      	push	{r7, lr}
 8101566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101568:	4802      	ldr	r0, [pc, #8]	; (8101574 <DMA1_Stream0_IRQHandler+0x10>)
 810156a:	f000 ffdf 	bl	810252c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 810156e:	bf00      	nop
 8101570:	bd80      	pop	{r7, pc}
 8101572:	bf00      	nop
 8101574:	100000b4 	.word	0x100000b4

08101578 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8101578:	b580      	push	{r7, lr}
 810157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 810157c:	4802      	ldr	r0, [pc, #8]	; (8101588 <DMA1_Stream3_IRQHandler+0x10>)
 810157e:	f000 ffd5 	bl	810252c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8101582:	bf00      	nop
 8101584:	bd80      	pop	{r7, pc}
 8101586:	bf00      	nop
 8101588:	1000012c 	.word	0x1000012c

0810158c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 810158c:	b580      	push	{r7, lr}
 810158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101590:	4802      	ldr	r0, [pc, #8]	; (810159c <SPI1_IRQHandler+0x10>)
 8101592:	f003 fa43 	bl	8104a1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101596:	bf00      	nop
 8101598:	bd80      	pop	{r7, pc}
 810159a:	bf00      	nop
 810159c:	1000002c 	.word	0x1000002c

081015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 81015d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81015a4:	f7fe fe98 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81015a8:	480c      	ldr	r0, [pc, #48]	; (81015dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81015aa:	490d      	ldr	r1, [pc, #52]	; (81015e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81015ac:	4a0d      	ldr	r2, [pc, #52]	; (81015e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81015b0:	e002      	b.n	81015b8 <LoopCopyDataInit>

081015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81015b6:	3304      	adds	r3, #4

081015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81015bc:	d3f9      	bcc.n	81015b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81015be:	4a0a      	ldr	r2, [pc, #40]	; (81015e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81015c0:	4c0a      	ldr	r4, [pc, #40]	; (81015ec <LoopFillZerobss+0x22>)
  movs r3, #0
 81015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81015c4:	e001      	b.n	81015ca <LoopFillZerobss>

081015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81015c8:	3204      	adds	r2, #4

081015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81015cc:	d3fb      	bcc.n	81015c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81015ce:	f003 fd1d 	bl	810500c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81015d2:	f7ff fbd7 	bl	8100d84 <main>
  bx  lr
 81015d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81015d8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81015dc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81015e0:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81015e4:	0810508c 	.word	0x0810508c
  ldr r2, =_sbss
 81015e8:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81015ec:	10000460 	.word	0x10000460

081015f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81015f0:	e7fe      	b.n	81015f0 <ADC3_IRQHandler>
	...

081015f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81015f4:	b580      	push	{r7, lr}
 81015f6:	b082      	sub	sp, #8
 81015f8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81015fa:	4b28      	ldr	r3, [pc, #160]	; (810169c <HAL_Init+0xa8>)
 81015fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101600:	4a26      	ldr	r2, [pc, #152]	; (810169c <HAL_Init+0xa8>)
 8101602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101606:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810160a:	4b24      	ldr	r3, [pc, #144]	; (810169c <HAL_Init+0xa8>)
 810160c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101614:	603b      	str	r3, [r7, #0]
 8101616:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101618:	4b21      	ldr	r3, [pc, #132]	; (81016a0 <HAL_Init+0xac>)
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101620:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101624:	4a1e      	ldr	r2, [pc, #120]	; (81016a0 <HAL_Init+0xac>)
 8101626:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810162a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810162c:	4b1c      	ldr	r3, [pc, #112]	; (81016a0 <HAL_Init+0xac>)
 810162e:	681b      	ldr	r3, [r3, #0]
 8101630:	4a1b      	ldr	r2, [pc, #108]	; (81016a0 <HAL_Init+0xac>)
 8101632:	f043 0301 	orr.w	r3, r3, #1
 8101636:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101638:	2003      	movs	r0, #3
 810163a:	f000 f983 	bl	8101944 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810163e:	f002 fb59 	bl	8103cf4 <HAL_RCC_GetSysClockFreq>
 8101642:	4602      	mov	r2, r0
 8101644:	4b15      	ldr	r3, [pc, #84]	; (810169c <HAL_Init+0xa8>)
 8101646:	699b      	ldr	r3, [r3, #24]
 8101648:	0a1b      	lsrs	r3, r3, #8
 810164a:	f003 030f 	and.w	r3, r3, #15
 810164e:	4915      	ldr	r1, [pc, #84]	; (81016a4 <HAL_Init+0xb0>)
 8101650:	5ccb      	ldrb	r3, [r1, r3]
 8101652:	f003 031f 	and.w	r3, r3, #31
 8101656:	fa22 f303 	lsr.w	r3, r2, r3
 810165a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810165c:	4b0f      	ldr	r3, [pc, #60]	; (810169c <HAL_Init+0xa8>)
 810165e:	699b      	ldr	r3, [r3, #24]
 8101660:	f003 030f 	and.w	r3, r3, #15
 8101664:	4a0f      	ldr	r2, [pc, #60]	; (81016a4 <HAL_Init+0xb0>)
 8101666:	5cd3      	ldrb	r3, [r2, r3]
 8101668:	f003 031f 	and.w	r3, r3, #31
 810166c:	687a      	ldr	r2, [r7, #4]
 810166e:	fa22 f303 	lsr.w	r3, r2, r3
 8101672:	4a0d      	ldr	r2, [pc, #52]	; (81016a8 <HAL_Init+0xb4>)
 8101674:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101676:	4b0c      	ldr	r3, [pc, #48]	; (81016a8 <HAL_Init+0xb4>)
 8101678:	681b      	ldr	r3, [r3, #0]
 810167a:	4a0c      	ldr	r2, [pc, #48]	; (81016ac <HAL_Init+0xb8>)
 810167c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810167e:	2000      	movs	r0, #0
 8101680:	f000 f816 	bl	81016b0 <HAL_InitTick>
 8101684:	4603      	mov	r3, r0
 8101686:	2b00      	cmp	r3, #0
 8101688:	d001      	beq.n	810168e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810168a:	2301      	movs	r3, #1
 810168c:	e002      	b.n	8101694 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810168e:	f7ff fe4f 	bl	8101330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101692:	2300      	movs	r3, #0
}
 8101694:	4618      	mov	r0, r3
 8101696:	3708      	adds	r7, #8
 8101698:	46bd      	mov	sp, r7
 810169a:	bd80      	pop	{r7, pc}
 810169c:	58024400 	.word	0x58024400
 81016a0:	40024400 	.word	0x40024400
 81016a4:	0810506c 	.word	0x0810506c
 81016a8:	10000004 	.word	0x10000004
 81016ac:	10000000 	.word	0x10000000

081016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81016b0:	b580      	push	{r7, lr}
 81016b2:	b082      	sub	sp, #8
 81016b4:	af00      	add	r7, sp, #0
 81016b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81016b8:	4b15      	ldr	r3, [pc, #84]	; (8101710 <HAL_InitTick+0x60>)
 81016ba:	781b      	ldrb	r3, [r3, #0]
 81016bc:	2b00      	cmp	r3, #0
 81016be:	d101      	bne.n	81016c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81016c0:	2301      	movs	r3, #1
 81016c2:	e021      	b.n	8101708 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81016c4:	4b13      	ldr	r3, [pc, #76]	; (8101714 <HAL_InitTick+0x64>)
 81016c6:	681a      	ldr	r2, [r3, #0]
 81016c8:	4b11      	ldr	r3, [pc, #68]	; (8101710 <HAL_InitTick+0x60>)
 81016ca:	781b      	ldrb	r3, [r3, #0]
 81016cc:	4619      	mov	r1, r3
 81016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 81016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 81016da:	4618      	mov	r0, r3
 81016dc:	f000 f965 	bl	81019aa <HAL_SYSTICK_Config>
 81016e0:	4603      	mov	r3, r0
 81016e2:	2b00      	cmp	r3, #0
 81016e4:	d001      	beq.n	81016ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81016e6:	2301      	movs	r3, #1
 81016e8:	e00e      	b.n	8101708 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81016ea:	687b      	ldr	r3, [r7, #4]
 81016ec:	2b0f      	cmp	r3, #15
 81016ee:	d80a      	bhi.n	8101706 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81016f0:	2200      	movs	r2, #0
 81016f2:	6879      	ldr	r1, [r7, #4]
 81016f4:	f04f 30ff 	mov.w	r0, #4294967295
 81016f8:	f000 f92f 	bl	810195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81016fc:	4a06      	ldr	r2, [pc, #24]	; (8101718 <HAL_InitTick+0x68>)
 81016fe:	687b      	ldr	r3, [r7, #4]
 8101700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101702:	2300      	movs	r3, #0
 8101704:	e000      	b.n	8101708 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101706:	2301      	movs	r3, #1
}
 8101708:	4618      	mov	r0, r3
 810170a:	3708      	adds	r7, #8
 810170c:	46bd      	mov	sp, r7
 810170e:	bd80      	pop	{r7, pc}
 8101710:	1000000c 	.word	0x1000000c
 8101714:	10000000 	.word	0x10000000
 8101718:	10000008 	.word	0x10000008

0810171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810171c:	b480      	push	{r7}
 810171e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101720:	4b06      	ldr	r3, [pc, #24]	; (810173c <HAL_IncTick+0x20>)
 8101722:	781b      	ldrb	r3, [r3, #0]
 8101724:	461a      	mov	r2, r3
 8101726:	4b06      	ldr	r3, [pc, #24]	; (8101740 <HAL_IncTick+0x24>)
 8101728:	681b      	ldr	r3, [r3, #0]
 810172a:	4413      	add	r3, r2
 810172c:	4a04      	ldr	r2, [pc, #16]	; (8101740 <HAL_IncTick+0x24>)
 810172e:	6013      	str	r3, [r2, #0]
}
 8101730:	bf00      	nop
 8101732:	46bd      	mov	sp, r7
 8101734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101738:	4770      	bx	lr
 810173a:	bf00      	nop
 810173c:	1000000c 	.word	0x1000000c
 8101740:	1000045c 	.word	0x1000045c

08101744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101744:	b480      	push	{r7}
 8101746:	af00      	add	r7, sp, #0
  return uwTick;
 8101748:	4b03      	ldr	r3, [pc, #12]	; (8101758 <HAL_GetTick+0x14>)
 810174a:	681b      	ldr	r3, [r3, #0]
}
 810174c:	4618      	mov	r0, r3
 810174e:	46bd      	mov	sp, r7
 8101750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101754:	4770      	bx	lr
 8101756:	bf00      	nop
 8101758:	1000045c 	.word	0x1000045c

0810175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810175c:	b580      	push	{r7, lr}
 810175e:	b084      	sub	sp, #16
 8101760:	af00      	add	r7, sp, #0
 8101762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101764:	f7ff ffee 	bl	8101744 <HAL_GetTick>
 8101768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810176a:	687b      	ldr	r3, [r7, #4]
 810176c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810176e:	68fb      	ldr	r3, [r7, #12]
 8101770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101774:	d005      	beq.n	8101782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101776:	4b0a      	ldr	r3, [pc, #40]	; (81017a0 <HAL_Delay+0x44>)
 8101778:	781b      	ldrb	r3, [r3, #0]
 810177a:	461a      	mov	r2, r3
 810177c:	68fb      	ldr	r3, [r7, #12]
 810177e:	4413      	add	r3, r2
 8101780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101782:	bf00      	nop
 8101784:	f7ff ffde 	bl	8101744 <HAL_GetTick>
 8101788:	4602      	mov	r2, r0
 810178a:	68bb      	ldr	r3, [r7, #8]
 810178c:	1ad3      	subs	r3, r2, r3
 810178e:	68fa      	ldr	r2, [r7, #12]
 8101790:	429a      	cmp	r2, r3
 8101792:	d8f7      	bhi.n	8101784 <HAL_Delay+0x28>
  {
  }
}
 8101794:	bf00      	nop
 8101796:	bf00      	nop
 8101798:	3710      	adds	r7, #16
 810179a:	46bd      	mov	sp, r7
 810179c:	bd80      	pop	{r7, pc}
 810179e:	bf00      	nop
 81017a0:	1000000c 	.word	0x1000000c

081017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81017a4:	b480      	push	{r7}
 81017a6:	b085      	sub	sp, #20
 81017a8:	af00      	add	r7, sp, #0
 81017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	f003 0307 	and.w	r3, r3, #7
 81017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81017b4:	4b0c      	ldr	r3, [pc, #48]	; (81017e8 <__NVIC_SetPriorityGrouping+0x44>)
 81017b6:	68db      	ldr	r3, [r3, #12]
 81017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81017ba:	68ba      	ldr	r2, [r7, #8]
 81017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81017c0:	4013      	ands	r3, r2
 81017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81017c4:	68fb      	ldr	r3, [r7, #12]
 81017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81017c8:	68bb      	ldr	r3, [r7, #8]
 81017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81017d6:	4a04      	ldr	r2, [pc, #16]	; (81017e8 <__NVIC_SetPriorityGrouping+0x44>)
 81017d8:	68bb      	ldr	r3, [r7, #8]
 81017da:	60d3      	str	r3, [r2, #12]
}
 81017dc:	bf00      	nop
 81017de:	3714      	adds	r7, #20
 81017e0:	46bd      	mov	sp, r7
 81017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e6:	4770      	bx	lr
 81017e8:	e000ed00 	.word	0xe000ed00

081017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81017ec:	b480      	push	{r7}
 81017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81017f0:	4b04      	ldr	r3, [pc, #16]	; (8101804 <__NVIC_GetPriorityGrouping+0x18>)
 81017f2:	68db      	ldr	r3, [r3, #12]
 81017f4:	0a1b      	lsrs	r3, r3, #8
 81017f6:	f003 0307 	and.w	r3, r3, #7
}
 81017fa:	4618      	mov	r0, r3
 81017fc:	46bd      	mov	sp, r7
 81017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101802:	4770      	bx	lr
 8101804:	e000ed00 	.word	0xe000ed00

08101808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101808:	b480      	push	{r7}
 810180a:	b083      	sub	sp, #12
 810180c:	af00      	add	r7, sp, #0
 810180e:	4603      	mov	r3, r0
 8101810:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101816:	2b00      	cmp	r3, #0
 8101818:	db0b      	blt.n	8101832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810181a:	88fb      	ldrh	r3, [r7, #6]
 810181c:	f003 021f 	and.w	r2, r3, #31
 8101820:	4907      	ldr	r1, [pc, #28]	; (8101840 <__NVIC_EnableIRQ+0x38>)
 8101822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101826:	095b      	lsrs	r3, r3, #5
 8101828:	2001      	movs	r0, #1
 810182a:	fa00 f202 	lsl.w	r2, r0, r2
 810182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101832:	bf00      	nop
 8101834:	370c      	adds	r7, #12
 8101836:	46bd      	mov	sp, r7
 8101838:	f85d 7b04 	ldr.w	r7, [sp], #4
 810183c:	4770      	bx	lr
 810183e:	bf00      	nop
 8101840:	e000e100 	.word	0xe000e100

08101844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101844:	b480      	push	{r7}
 8101846:	b083      	sub	sp, #12
 8101848:	af00      	add	r7, sp, #0
 810184a:	4603      	mov	r3, r0
 810184c:	6039      	str	r1, [r7, #0]
 810184e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101854:	2b00      	cmp	r3, #0
 8101856:	db0a      	blt.n	810186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101858:	683b      	ldr	r3, [r7, #0]
 810185a:	b2da      	uxtb	r2, r3
 810185c:	490c      	ldr	r1, [pc, #48]	; (8101890 <__NVIC_SetPriority+0x4c>)
 810185e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101862:	0112      	lsls	r2, r2, #4
 8101864:	b2d2      	uxtb	r2, r2
 8101866:	440b      	add	r3, r1
 8101868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810186c:	e00a      	b.n	8101884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810186e:	683b      	ldr	r3, [r7, #0]
 8101870:	b2da      	uxtb	r2, r3
 8101872:	4908      	ldr	r1, [pc, #32]	; (8101894 <__NVIC_SetPriority+0x50>)
 8101874:	88fb      	ldrh	r3, [r7, #6]
 8101876:	f003 030f 	and.w	r3, r3, #15
 810187a:	3b04      	subs	r3, #4
 810187c:	0112      	lsls	r2, r2, #4
 810187e:	b2d2      	uxtb	r2, r2
 8101880:	440b      	add	r3, r1
 8101882:	761a      	strb	r2, [r3, #24]
}
 8101884:	bf00      	nop
 8101886:	370c      	adds	r7, #12
 8101888:	46bd      	mov	sp, r7
 810188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810188e:	4770      	bx	lr
 8101890:	e000e100 	.word	0xe000e100
 8101894:	e000ed00 	.word	0xe000ed00

08101898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101898:	b480      	push	{r7}
 810189a:	b089      	sub	sp, #36	; 0x24
 810189c:	af00      	add	r7, sp, #0
 810189e:	60f8      	str	r0, [r7, #12]
 81018a0:	60b9      	str	r1, [r7, #8]
 81018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81018a4:	68fb      	ldr	r3, [r7, #12]
 81018a6:	f003 0307 	and.w	r3, r3, #7
 81018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81018ac:	69fb      	ldr	r3, [r7, #28]
 81018ae:	f1c3 0307 	rsb	r3, r3, #7
 81018b2:	2b04      	cmp	r3, #4
 81018b4:	bf28      	it	cs
 81018b6:	2304      	movcs	r3, #4
 81018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81018ba:	69fb      	ldr	r3, [r7, #28]
 81018bc:	3304      	adds	r3, #4
 81018be:	2b06      	cmp	r3, #6
 81018c0:	d902      	bls.n	81018c8 <NVIC_EncodePriority+0x30>
 81018c2:	69fb      	ldr	r3, [r7, #28]
 81018c4:	3b03      	subs	r3, #3
 81018c6:	e000      	b.n	81018ca <NVIC_EncodePriority+0x32>
 81018c8:	2300      	movs	r3, #0
 81018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81018cc:	f04f 32ff 	mov.w	r2, #4294967295
 81018d0:	69bb      	ldr	r3, [r7, #24]
 81018d2:	fa02 f303 	lsl.w	r3, r2, r3
 81018d6:	43da      	mvns	r2, r3
 81018d8:	68bb      	ldr	r3, [r7, #8]
 81018da:	401a      	ands	r2, r3
 81018dc:	697b      	ldr	r3, [r7, #20]
 81018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81018e0:	f04f 31ff 	mov.w	r1, #4294967295
 81018e4:	697b      	ldr	r3, [r7, #20]
 81018e6:	fa01 f303 	lsl.w	r3, r1, r3
 81018ea:	43d9      	mvns	r1, r3
 81018ec:	687b      	ldr	r3, [r7, #4]
 81018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81018f0:	4313      	orrs	r3, r2
         );
}
 81018f2:	4618      	mov	r0, r3
 81018f4:	3724      	adds	r7, #36	; 0x24
 81018f6:	46bd      	mov	sp, r7
 81018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018fc:	4770      	bx	lr
	...

08101900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101900:	b580      	push	{r7, lr}
 8101902:	b082      	sub	sp, #8
 8101904:	af00      	add	r7, sp, #0
 8101906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101908:	687b      	ldr	r3, [r7, #4]
 810190a:	3b01      	subs	r3, #1
 810190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101910:	d301      	bcc.n	8101916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101912:	2301      	movs	r3, #1
 8101914:	e00f      	b.n	8101936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101916:	4a0a      	ldr	r2, [pc, #40]	; (8101940 <SysTick_Config+0x40>)
 8101918:	687b      	ldr	r3, [r7, #4]
 810191a:	3b01      	subs	r3, #1
 810191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810191e:	210f      	movs	r1, #15
 8101920:	f04f 30ff 	mov.w	r0, #4294967295
 8101924:	f7ff ff8e 	bl	8101844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101928:	4b05      	ldr	r3, [pc, #20]	; (8101940 <SysTick_Config+0x40>)
 810192a:	2200      	movs	r2, #0
 810192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810192e:	4b04      	ldr	r3, [pc, #16]	; (8101940 <SysTick_Config+0x40>)
 8101930:	2207      	movs	r2, #7
 8101932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101934:	2300      	movs	r3, #0
}
 8101936:	4618      	mov	r0, r3
 8101938:	3708      	adds	r7, #8
 810193a:	46bd      	mov	sp, r7
 810193c:	bd80      	pop	{r7, pc}
 810193e:	bf00      	nop
 8101940:	e000e010 	.word	0xe000e010

08101944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101944:	b580      	push	{r7, lr}
 8101946:	b082      	sub	sp, #8
 8101948:	af00      	add	r7, sp, #0
 810194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810194c:	6878      	ldr	r0, [r7, #4]
 810194e:	f7ff ff29 	bl	81017a4 <__NVIC_SetPriorityGrouping>
}
 8101952:	bf00      	nop
 8101954:	3708      	adds	r7, #8
 8101956:	46bd      	mov	sp, r7
 8101958:	bd80      	pop	{r7, pc}

0810195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810195a:	b580      	push	{r7, lr}
 810195c:	b086      	sub	sp, #24
 810195e:	af00      	add	r7, sp, #0
 8101960:	4603      	mov	r3, r0
 8101962:	60b9      	str	r1, [r7, #8]
 8101964:	607a      	str	r2, [r7, #4]
 8101966:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101968:	f7ff ff40 	bl	81017ec <__NVIC_GetPriorityGrouping>
 810196c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810196e:	687a      	ldr	r2, [r7, #4]
 8101970:	68b9      	ldr	r1, [r7, #8]
 8101972:	6978      	ldr	r0, [r7, #20]
 8101974:	f7ff ff90 	bl	8101898 <NVIC_EncodePriority>
 8101978:	4602      	mov	r2, r0
 810197a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810197e:	4611      	mov	r1, r2
 8101980:	4618      	mov	r0, r3
 8101982:	f7ff ff5f 	bl	8101844 <__NVIC_SetPriority>
}
 8101986:	bf00      	nop
 8101988:	3718      	adds	r7, #24
 810198a:	46bd      	mov	sp, r7
 810198c:	bd80      	pop	{r7, pc}

0810198e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810198e:	b580      	push	{r7, lr}
 8101990:	b082      	sub	sp, #8
 8101992:	af00      	add	r7, sp, #0
 8101994:	4603      	mov	r3, r0
 8101996:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810199c:	4618      	mov	r0, r3
 810199e:	f7ff ff33 	bl	8101808 <__NVIC_EnableIRQ>
}
 81019a2:	bf00      	nop
 81019a4:	3708      	adds	r7, #8
 81019a6:	46bd      	mov	sp, r7
 81019a8:	bd80      	pop	{r7, pc}

081019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81019aa:	b580      	push	{r7, lr}
 81019ac:	b082      	sub	sp, #8
 81019ae:	af00      	add	r7, sp, #0
 81019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81019b2:	6878      	ldr	r0, [r7, #4]
 81019b4:	f7ff ffa4 	bl	8101900 <SysTick_Config>
 81019b8:	4603      	mov	r3, r0
}
 81019ba:	4618      	mov	r0, r3
 81019bc:	3708      	adds	r7, #8
 81019be:	46bd      	mov	sp, r7
 81019c0:	bd80      	pop	{r7, pc}
	...

081019c4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81019c4:	b480      	push	{r7}
 81019c6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81019c8:	4b07      	ldr	r3, [pc, #28]	; (81019e8 <HAL_GetCurrentCPUID+0x24>)
 81019ca:	681b      	ldr	r3, [r3, #0]
 81019cc:	091b      	lsrs	r3, r3, #4
 81019ce:	f003 030f 	and.w	r3, r3, #15
 81019d2:	2b07      	cmp	r3, #7
 81019d4:	d101      	bne.n	81019da <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81019d6:	2303      	movs	r3, #3
 81019d8:	e000      	b.n	81019dc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81019da:	2301      	movs	r3, #1
  }
}
 81019dc:	4618      	mov	r0, r3
 81019de:	46bd      	mov	sp, r7
 81019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e4:	4770      	bx	lr
 81019e6:	bf00      	nop
 81019e8:	e000ed00 	.word	0xe000ed00

081019ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81019ec:	b580      	push	{r7, lr}
 81019ee:	b086      	sub	sp, #24
 81019f0:	af00      	add	r7, sp, #0
 81019f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81019f4:	f7ff fea6 	bl	8101744 <HAL_GetTick>
 81019f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81019fa:	687b      	ldr	r3, [r7, #4]
 81019fc:	2b00      	cmp	r3, #0
 81019fe:	d101      	bne.n	8101a04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8101a00:	2301      	movs	r3, #1
 8101a02:	e314      	b.n	810202e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101a04:	687b      	ldr	r3, [r7, #4]
 8101a06:	681b      	ldr	r3, [r3, #0]
 8101a08:	4a66      	ldr	r2, [pc, #408]	; (8101ba4 <HAL_DMA_Init+0x1b8>)
 8101a0a:	4293      	cmp	r3, r2
 8101a0c:	d04a      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	681b      	ldr	r3, [r3, #0]
 8101a12:	4a65      	ldr	r2, [pc, #404]	; (8101ba8 <HAL_DMA_Init+0x1bc>)
 8101a14:	4293      	cmp	r3, r2
 8101a16:	d045      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a18:	687b      	ldr	r3, [r7, #4]
 8101a1a:	681b      	ldr	r3, [r3, #0]
 8101a1c:	4a63      	ldr	r2, [pc, #396]	; (8101bac <HAL_DMA_Init+0x1c0>)
 8101a1e:	4293      	cmp	r3, r2
 8101a20:	d040      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	681b      	ldr	r3, [r3, #0]
 8101a26:	4a62      	ldr	r2, [pc, #392]	; (8101bb0 <HAL_DMA_Init+0x1c4>)
 8101a28:	4293      	cmp	r3, r2
 8101a2a:	d03b      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a2c:	687b      	ldr	r3, [r7, #4]
 8101a2e:	681b      	ldr	r3, [r3, #0]
 8101a30:	4a60      	ldr	r2, [pc, #384]	; (8101bb4 <HAL_DMA_Init+0x1c8>)
 8101a32:	4293      	cmp	r3, r2
 8101a34:	d036      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	681b      	ldr	r3, [r3, #0]
 8101a3a:	4a5f      	ldr	r2, [pc, #380]	; (8101bb8 <HAL_DMA_Init+0x1cc>)
 8101a3c:	4293      	cmp	r3, r2
 8101a3e:	d031      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a40:	687b      	ldr	r3, [r7, #4]
 8101a42:	681b      	ldr	r3, [r3, #0]
 8101a44:	4a5d      	ldr	r2, [pc, #372]	; (8101bbc <HAL_DMA_Init+0x1d0>)
 8101a46:	4293      	cmp	r3, r2
 8101a48:	d02c      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	4a5c      	ldr	r2, [pc, #368]	; (8101bc0 <HAL_DMA_Init+0x1d4>)
 8101a50:	4293      	cmp	r3, r2
 8101a52:	d027      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	681b      	ldr	r3, [r3, #0]
 8101a58:	4a5a      	ldr	r2, [pc, #360]	; (8101bc4 <HAL_DMA_Init+0x1d8>)
 8101a5a:	4293      	cmp	r3, r2
 8101a5c:	d022      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	681b      	ldr	r3, [r3, #0]
 8101a62:	4a59      	ldr	r2, [pc, #356]	; (8101bc8 <HAL_DMA_Init+0x1dc>)
 8101a64:	4293      	cmp	r3, r2
 8101a66:	d01d      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a68:	687b      	ldr	r3, [r7, #4]
 8101a6a:	681b      	ldr	r3, [r3, #0]
 8101a6c:	4a57      	ldr	r2, [pc, #348]	; (8101bcc <HAL_DMA_Init+0x1e0>)
 8101a6e:	4293      	cmp	r3, r2
 8101a70:	d018      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	681b      	ldr	r3, [r3, #0]
 8101a76:	4a56      	ldr	r2, [pc, #344]	; (8101bd0 <HAL_DMA_Init+0x1e4>)
 8101a78:	4293      	cmp	r3, r2
 8101a7a:	d013      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	681b      	ldr	r3, [r3, #0]
 8101a80:	4a54      	ldr	r2, [pc, #336]	; (8101bd4 <HAL_DMA_Init+0x1e8>)
 8101a82:	4293      	cmp	r3, r2
 8101a84:	d00e      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a86:	687b      	ldr	r3, [r7, #4]
 8101a88:	681b      	ldr	r3, [r3, #0]
 8101a8a:	4a53      	ldr	r2, [pc, #332]	; (8101bd8 <HAL_DMA_Init+0x1ec>)
 8101a8c:	4293      	cmp	r3, r2
 8101a8e:	d009      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a90:	687b      	ldr	r3, [r7, #4]
 8101a92:	681b      	ldr	r3, [r3, #0]
 8101a94:	4a51      	ldr	r2, [pc, #324]	; (8101bdc <HAL_DMA_Init+0x1f0>)
 8101a96:	4293      	cmp	r3, r2
 8101a98:	d004      	beq.n	8101aa4 <HAL_DMA_Init+0xb8>
 8101a9a:	687b      	ldr	r3, [r7, #4]
 8101a9c:	681b      	ldr	r3, [r3, #0]
 8101a9e:	4a50      	ldr	r2, [pc, #320]	; (8101be0 <HAL_DMA_Init+0x1f4>)
 8101aa0:	4293      	cmp	r3, r2
 8101aa2:	d101      	bne.n	8101aa8 <HAL_DMA_Init+0xbc>
 8101aa4:	2301      	movs	r3, #1
 8101aa6:	e000      	b.n	8101aaa <HAL_DMA_Init+0xbe>
 8101aa8:	2300      	movs	r3, #0
 8101aaa:	2b00      	cmp	r3, #0
 8101aac:	f000 813b 	beq.w	8101d26 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	2202      	movs	r2, #2
 8101ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101ab8:	687b      	ldr	r3, [r7, #4]
 8101aba:	2200      	movs	r2, #0
 8101abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	681b      	ldr	r3, [r3, #0]
 8101ac4:	4a37      	ldr	r2, [pc, #220]	; (8101ba4 <HAL_DMA_Init+0x1b8>)
 8101ac6:	4293      	cmp	r3, r2
 8101ac8:	d04a      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	681b      	ldr	r3, [r3, #0]
 8101ace:	4a36      	ldr	r2, [pc, #216]	; (8101ba8 <HAL_DMA_Init+0x1bc>)
 8101ad0:	4293      	cmp	r3, r2
 8101ad2:	d045      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	681b      	ldr	r3, [r3, #0]
 8101ad8:	4a34      	ldr	r2, [pc, #208]	; (8101bac <HAL_DMA_Init+0x1c0>)
 8101ada:	4293      	cmp	r3, r2
 8101adc:	d040      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	4a33      	ldr	r2, [pc, #204]	; (8101bb0 <HAL_DMA_Init+0x1c4>)
 8101ae4:	4293      	cmp	r3, r2
 8101ae6:	d03b      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	681b      	ldr	r3, [r3, #0]
 8101aec:	4a31      	ldr	r2, [pc, #196]	; (8101bb4 <HAL_DMA_Init+0x1c8>)
 8101aee:	4293      	cmp	r3, r2
 8101af0:	d036      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101af2:	687b      	ldr	r3, [r7, #4]
 8101af4:	681b      	ldr	r3, [r3, #0]
 8101af6:	4a30      	ldr	r2, [pc, #192]	; (8101bb8 <HAL_DMA_Init+0x1cc>)
 8101af8:	4293      	cmp	r3, r2
 8101afa:	d031      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	681b      	ldr	r3, [r3, #0]
 8101b00:	4a2e      	ldr	r2, [pc, #184]	; (8101bbc <HAL_DMA_Init+0x1d0>)
 8101b02:	4293      	cmp	r3, r2
 8101b04:	d02c      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101b06:	687b      	ldr	r3, [r7, #4]
 8101b08:	681b      	ldr	r3, [r3, #0]
 8101b0a:	4a2d      	ldr	r2, [pc, #180]	; (8101bc0 <HAL_DMA_Init+0x1d4>)
 8101b0c:	4293      	cmp	r3, r2
 8101b0e:	d027      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	681b      	ldr	r3, [r3, #0]
 8101b14:	4a2b      	ldr	r2, [pc, #172]	; (8101bc4 <HAL_DMA_Init+0x1d8>)
 8101b16:	4293      	cmp	r3, r2
 8101b18:	d022      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101b1a:	687b      	ldr	r3, [r7, #4]
 8101b1c:	681b      	ldr	r3, [r3, #0]
 8101b1e:	4a2a      	ldr	r2, [pc, #168]	; (8101bc8 <HAL_DMA_Init+0x1dc>)
 8101b20:	4293      	cmp	r3, r2
 8101b22:	d01d      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	681b      	ldr	r3, [r3, #0]
 8101b28:	4a28      	ldr	r2, [pc, #160]	; (8101bcc <HAL_DMA_Init+0x1e0>)
 8101b2a:	4293      	cmp	r3, r2
 8101b2c:	d018      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101b2e:	687b      	ldr	r3, [r7, #4]
 8101b30:	681b      	ldr	r3, [r3, #0]
 8101b32:	4a27      	ldr	r2, [pc, #156]	; (8101bd0 <HAL_DMA_Init+0x1e4>)
 8101b34:	4293      	cmp	r3, r2
 8101b36:	d013      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101b38:	687b      	ldr	r3, [r7, #4]
 8101b3a:	681b      	ldr	r3, [r3, #0]
 8101b3c:	4a25      	ldr	r2, [pc, #148]	; (8101bd4 <HAL_DMA_Init+0x1e8>)
 8101b3e:	4293      	cmp	r3, r2
 8101b40:	d00e      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	4a24      	ldr	r2, [pc, #144]	; (8101bd8 <HAL_DMA_Init+0x1ec>)
 8101b48:	4293      	cmp	r3, r2
 8101b4a:	d009      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101b4c:	687b      	ldr	r3, [r7, #4]
 8101b4e:	681b      	ldr	r3, [r3, #0]
 8101b50:	4a22      	ldr	r2, [pc, #136]	; (8101bdc <HAL_DMA_Init+0x1f0>)
 8101b52:	4293      	cmp	r3, r2
 8101b54:	d004      	beq.n	8101b60 <HAL_DMA_Init+0x174>
 8101b56:	687b      	ldr	r3, [r7, #4]
 8101b58:	681b      	ldr	r3, [r3, #0]
 8101b5a:	4a21      	ldr	r2, [pc, #132]	; (8101be0 <HAL_DMA_Init+0x1f4>)
 8101b5c:	4293      	cmp	r3, r2
 8101b5e:	d108      	bne.n	8101b72 <HAL_DMA_Init+0x186>
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	681b      	ldr	r3, [r3, #0]
 8101b64:	681a      	ldr	r2, [r3, #0]
 8101b66:	687b      	ldr	r3, [r7, #4]
 8101b68:	681b      	ldr	r3, [r3, #0]
 8101b6a:	f022 0201 	bic.w	r2, r2, #1
 8101b6e:	601a      	str	r2, [r3, #0]
 8101b70:	e007      	b.n	8101b82 <HAL_DMA_Init+0x196>
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	681b      	ldr	r3, [r3, #0]
 8101b76:	681a      	ldr	r2, [r3, #0]
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	681b      	ldr	r3, [r3, #0]
 8101b7c:	f022 0201 	bic.w	r2, r2, #1
 8101b80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101b82:	e02f      	b.n	8101be4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101b84:	f7ff fdde 	bl	8101744 <HAL_GetTick>
 8101b88:	4602      	mov	r2, r0
 8101b8a:	693b      	ldr	r3, [r7, #16]
 8101b8c:	1ad3      	subs	r3, r2, r3
 8101b8e:	2b05      	cmp	r3, #5
 8101b90:	d928      	bls.n	8101be4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101b92:	687b      	ldr	r3, [r7, #4]
 8101b94:	2220      	movs	r2, #32
 8101b96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	2203      	movs	r2, #3
 8101b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8101ba0:	2301      	movs	r3, #1
 8101ba2:	e244      	b.n	810202e <HAL_DMA_Init+0x642>
 8101ba4:	40020010 	.word	0x40020010
 8101ba8:	40020028 	.word	0x40020028
 8101bac:	40020040 	.word	0x40020040
 8101bb0:	40020058 	.word	0x40020058
 8101bb4:	40020070 	.word	0x40020070
 8101bb8:	40020088 	.word	0x40020088
 8101bbc:	400200a0 	.word	0x400200a0
 8101bc0:	400200b8 	.word	0x400200b8
 8101bc4:	40020410 	.word	0x40020410
 8101bc8:	40020428 	.word	0x40020428
 8101bcc:	40020440 	.word	0x40020440
 8101bd0:	40020458 	.word	0x40020458
 8101bd4:	40020470 	.word	0x40020470
 8101bd8:	40020488 	.word	0x40020488
 8101bdc:	400204a0 	.word	0x400204a0
 8101be0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101be4:	687b      	ldr	r3, [r7, #4]
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	681b      	ldr	r3, [r3, #0]
 8101bea:	f003 0301 	and.w	r3, r3, #1
 8101bee:	2b00      	cmp	r3, #0
 8101bf0:	d1c8      	bne.n	8101b84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8101bfa:	697a      	ldr	r2, [r7, #20]
 8101bfc:	4b84      	ldr	r3, [pc, #528]	; (8101e10 <HAL_DMA_Init+0x424>)
 8101bfe:	4013      	ands	r3, r2
 8101c00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8101c0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101c0c:	687b      	ldr	r3, [r7, #4]
 8101c0e:	691b      	ldr	r3, [r3, #16]
 8101c10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101c16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	699b      	ldr	r3, [r3, #24]
 8101c1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101c1e:	687b      	ldr	r3, [r7, #4]
 8101c20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101c22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	6a1b      	ldr	r3, [r3, #32]
 8101c28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8101c2a:	697a      	ldr	r2, [r7, #20]
 8101c2c:	4313      	orrs	r3, r2
 8101c2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101c34:	2b04      	cmp	r3, #4
 8101c36:	d107      	bne.n	8101c48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101c3c:	687b      	ldr	r3, [r7, #4]
 8101c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101c40:	4313      	orrs	r3, r2
 8101c42:	697a      	ldr	r2, [r7, #20]
 8101c44:	4313      	orrs	r3, r2
 8101c46:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8101c48:	4b72      	ldr	r3, [pc, #456]	; (8101e14 <HAL_DMA_Init+0x428>)
 8101c4a:	681b      	ldr	r3, [r3, #0]
 8101c4c:	0c1b      	lsrs	r3, r3, #16
 8101c4e:	041b      	lsls	r3, r3, #16
 8101c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101c54:	d328      	bcc.n	8101ca8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8101c56:	687b      	ldr	r3, [r7, #4]
 8101c58:	685b      	ldr	r3, [r3, #4]
 8101c5a:	2b28      	cmp	r3, #40	; 0x28
 8101c5c:	d903      	bls.n	8101c66 <HAL_DMA_Init+0x27a>
 8101c5e:	687b      	ldr	r3, [r7, #4]
 8101c60:	685b      	ldr	r3, [r3, #4]
 8101c62:	2b2e      	cmp	r3, #46	; 0x2e
 8101c64:	d917      	bls.n	8101c96 <HAL_DMA_Init+0x2aa>
 8101c66:	687b      	ldr	r3, [r7, #4]
 8101c68:	685b      	ldr	r3, [r3, #4]
 8101c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8101c6c:	d903      	bls.n	8101c76 <HAL_DMA_Init+0x28a>
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	685b      	ldr	r3, [r3, #4]
 8101c72:	2b42      	cmp	r3, #66	; 0x42
 8101c74:	d90f      	bls.n	8101c96 <HAL_DMA_Init+0x2aa>
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	685b      	ldr	r3, [r3, #4]
 8101c7a:	2b46      	cmp	r3, #70	; 0x46
 8101c7c:	d903      	bls.n	8101c86 <HAL_DMA_Init+0x29a>
 8101c7e:	687b      	ldr	r3, [r7, #4]
 8101c80:	685b      	ldr	r3, [r3, #4]
 8101c82:	2b48      	cmp	r3, #72	; 0x48
 8101c84:	d907      	bls.n	8101c96 <HAL_DMA_Init+0x2aa>
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	685b      	ldr	r3, [r3, #4]
 8101c8a:	2b4e      	cmp	r3, #78	; 0x4e
 8101c8c:	d905      	bls.n	8101c9a <HAL_DMA_Init+0x2ae>
 8101c8e:	687b      	ldr	r3, [r7, #4]
 8101c90:	685b      	ldr	r3, [r3, #4]
 8101c92:	2b52      	cmp	r3, #82	; 0x52
 8101c94:	d801      	bhi.n	8101c9a <HAL_DMA_Init+0x2ae>
 8101c96:	2301      	movs	r3, #1
 8101c98:	e000      	b.n	8101c9c <HAL_DMA_Init+0x2b0>
 8101c9a:	2300      	movs	r3, #0
 8101c9c:	2b00      	cmp	r3, #0
 8101c9e:	d003      	beq.n	8101ca8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8101ca0:	697b      	ldr	r3, [r7, #20]
 8101ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8101ca6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8101ca8:	687b      	ldr	r3, [r7, #4]
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	697a      	ldr	r2, [r7, #20]
 8101cae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8101cb0:	687b      	ldr	r3, [r7, #4]
 8101cb2:	681b      	ldr	r3, [r3, #0]
 8101cb4:	695b      	ldr	r3, [r3, #20]
 8101cb6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8101cb8:	697b      	ldr	r3, [r7, #20]
 8101cba:	f023 0307 	bic.w	r3, r3, #7
 8101cbe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8101cc0:	687b      	ldr	r3, [r7, #4]
 8101cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101cc4:	697a      	ldr	r2, [r7, #20]
 8101cc6:	4313      	orrs	r3, r2
 8101cc8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101cca:	687b      	ldr	r3, [r7, #4]
 8101ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101cce:	2b04      	cmp	r3, #4
 8101cd0:	d117      	bne.n	8101d02 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8101cd2:	687b      	ldr	r3, [r7, #4]
 8101cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101cd6:	697a      	ldr	r2, [r7, #20]
 8101cd8:	4313      	orrs	r3, r2
 8101cda:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101ce0:	2b00      	cmp	r3, #0
 8101ce2:	d00e      	beq.n	8101d02 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8101ce4:	6878      	ldr	r0, [r7, #4]
 8101ce6:	f001 fbfd 	bl	81034e4 <DMA_CheckFifoParam>
 8101cea:	4603      	mov	r3, r0
 8101cec:	2b00      	cmp	r3, #0
 8101cee:	d008      	beq.n	8101d02 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	2240      	movs	r2, #64	; 0x40
 8101cf4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8101cf6:	687b      	ldr	r3, [r7, #4]
 8101cf8:	2201      	movs	r2, #1
 8101cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8101cfe:	2301      	movs	r3, #1
 8101d00:	e195      	b.n	810202e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8101d02:	687b      	ldr	r3, [r7, #4]
 8101d04:	681b      	ldr	r3, [r3, #0]
 8101d06:	697a      	ldr	r2, [r7, #20]
 8101d08:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8101d0a:	6878      	ldr	r0, [r7, #4]
 8101d0c:	f001 fb38 	bl	8103380 <DMA_CalcBaseAndBitshift>
 8101d10:	4603      	mov	r3, r0
 8101d12:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101d14:	687b      	ldr	r3, [r7, #4]
 8101d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101d18:	f003 031f 	and.w	r3, r3, #31
 8101d1c:	223f      	movs	r2, #63	; 0x3f
 8101d1e:	409a      	lsls	r2, r3
 8101d20:	68bb      	ldr	r3, [r7, #8]
 8101d22:	609a      	str	r2, [r3, #8]
 8101d24:	e0cb      	b.n	8101ebe <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	681b      	ldr	r3, [r3, #0]
 8101d2a:	4a3b      	ldr	r2, [pc, #236]	; (8101e18 <HAL_DMA_Init+0x42c>)
 8101d2c:	4293      	cmp	r3, r2
 8101d2e:	d022      	beq.n	8101d76 <HAL_DMA_Init+0x38a>
 8101d30:	687b      	ldr	r3, [r7, #4]
 8101d32:	681b      	ldr	r3, [r3, #0]
 8101d34:	4a39      	ldr	r2, [pc, #228]	; (8101e1c <HAL_DMA_Init+0x430>)
 8101d36:	4293      	cmp	r3, r2
 8101d38:	d01d      	beq.n	8101d76 <HAL_DMA_Init+0x38a>
 8101d3a:	687b      	ldr	r3, [r7, #4]
 8101d3c:	681b      	ldr	r3, [r3, #0]
 8101d3e:	4a38      	ldr	r2, [pc, #224]	; (8101e20 <HAL_DMA_Init+0x434>)
 8101d40:	4293      	cmp	r3, r2
 8101d42:	d018      	beq.n	8101d76 <HAL_DMA_Init+0x38a>
 8101d44:	687b      	ldr	r3, [r7, #4]
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	4a36      	ldr	r2, [pc, #216]	; (8101e24 <HAL_DMA_Init+0x438>)
 8101d4a:	4293      	cmp	r3, r2
 8101d4c:	d013      	beq.n	8101d76 <HAL_DMA_Init+0x38a>
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	681b      	ldr	r3, [r3, #0]
 8101d52:	4a35      	ldr	r2, [pc, #212]	; (8101e28 <HAL_DMA_Init+0x43c>)
 8101d54:	4293      	cmp	r3, r2
 8101d56:	d00e      	beq.n	8101d76 <HAL_DMA_Init+0x38a>
 8101d58:	687b      	ldr	r3, [r7, #4]
 8101d5a:	681b      	ldr	r3, [r3, #0]
 8101d5c:	4a33      	ldr	r2, [pc, #204]	; (8101e2c <HAL_DMA_Init+0x440>)
 8101d5e:	4293      	cmp	r3, r2
 8101d60:	d009      	beq.n	8101d76 <HAL_DMA_Init+0x38a>
 8101d62:	687b      	ldr	r3, [r7, #4]
 8101d64:	681b      	ldr	r3, [r3, #0]
 8101d66:	4a32      	ldr	r2, [pc, #200]	; (8101e30 <HAL_DMA_Init+0x444>)
 8101d68:	4293      	cmp	r3, r2
 8101d6a:	d004      	beq.n	8101d76 <HAL_DMA_Init+0x38a>
 8101d6c:	687b      	ldr	r3, [r7, #4]
 8101d6e:	681b      	ldr	r3, [r3, #0]
 8101d70:	4a30      	ldr	r2, [pc, #192]	; (8101e34 <HAL_DMA_Init+0x448>)
 8101d72:	4293      	cmp	r3, r2
 8101d74:	d101      	bne.n	8101d7a <HAL_DMA_Init+0x38e>
 8101d76:	2301      	movs	r3, #1
 8101d78:	e000      	b.n	8101d7c <HAL_DMA_Init+0x390>
 8101d7a:	2300      	movs	r3, #0
 8101d7c:	2b00      	cmp	r3, #0
 8101d7e:	f000 8095 	beq.w	8101eac <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8101d82:	687b      	ldr	r3, [r7, #4]
 8101d84:	681b      	ldr	r3, [r3, #0]
 8101d86:	4a24      	ldr	r2, [pc, #144]	; (8101e18 <HAL_DMA_Init+0x42c>)
 8101d88:	4293      	cmp	r3, r2
 8101d8a:	d021      	beq.n	8101dd0 <HAL_DMA_Init+0x3e4>
 8101d8c:	687b      	ldr	r3, [r7, #4]
 8101d8e:	681b      	ldr	r3, [r3, #0]
 8101d90:	4a22      	ldr	r2, [pc, #136]	; (8101e1c <HAL_DMA_Init+0x430>)
 8101d92:	4293      	cmp	r3, r2
 8101d94:	d01c      	beq.n	8101dd0 <HAL_DMA_Init+0x3e4>
 8101d96:	687b      	ldr	r3, [r7, #4]
 8101d98:	681b      	ldr	r3, [r3, #0]
 8101d9a:	4a21      	ldr	r2, [pc, #132]	; (8101e20 <HAL_DMA_Init+0x434>)
 8101d9c:	4293      	cmp	r3, r2
 8101d9e:	d017      	beq.n	8101dd0 <HAL_DMA_Init+0x3e4>
 8101da0:	687b      	ldr	r3, [r7, #4]
 8101da2:	681b      	ldr	r3, [r3, #0]
 8101da4:	4a1f      	ldr	r2, [pc, #124]	; (8101e24 <HAL_DMA_Init+0x438>)
 8101da6:	4293      	cmp	r3, r2
 8101da8:	d012      	beq.n	8101dd0 <HAL_DMA_Init+0x3e4>
 8101daa:	687b      	ldr	r3, [r7, #4]
 8101dac:	681b      	ldr	r3, [r3, #0]
 8101dae:	4a1e      	ldr	r2, [pc, #120]	; (8101e28 <HAL_DMA_Init+0x43c>)
 8101db0:	4293      	cmp	r3, r2
 8101db2:	d00d      	beq.n	8101dd0 <HAL_DMA_Init+0x3e4>
 8101db4:	687b      	ldr	r3, [r7, #4]
 8101db6:	681b      	ldr	r3, [r3, #0]
 8101db8:	4a1c      	ldr	r2, [pc, #112]	; (8101e2c <HAL_DMA_Init+0x440>)
 8101dba:	4293      	cmp	r3, r2
 8101dbc:	d008      	beq.n	8101dd0 <HAL_DMA_Init+0x3e4>
 8101dbe:	687b      	ldr	r3, [r7, #4]
 8101dc0:	681b      	ldr	r3, [r3, #0]
 8101dc2:	4a1b      	ldr	r2, [pc, #108]	; (8101e30 <HAL_DMA_Init+0x444>)
 8101dc4:	4293      	cmp	r3, r2
 8101dc6:	d003      	beq.n	8101dd0 <HAL_DMA_Init+0x3e4>
 8101dc8:	687b      	ldr	r3, [r7, #4]
 8101dca:	681b      	ldr	r3, [r3, #0]
 8101dcc:	4a19      	ldr	r2, [pc, #100]	; (8101e34 <HAL_DMA_Init+0x448>)
 8101dce:	4293      	cmp	r3, r2
 8101dd0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	2202      	movs	r2, #2
 8101dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101dda:	687b      	ldr	r3, [r7, #4]
 8101ddc:	2200      	movs	r2, #0
 8101dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8101de2:	687b      	ldr	r3, [r7, #4]
 8101de4:	681b      	ldr	r3, [r3, #0]
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8101dea:	697b      	ldr	r3, [r7, #20]
 8101dec:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8101df0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8101df4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	689b      	ldr	r3, [r3, #8]
 8101dfa:	2b40      	cmp	r3, #64	; 0x40
 8101dfc:	d01c      	beq.n	8101e38 <HAL_DMA_Init+0x44c>
 8101dfe:	687b      	ldr	r3, [r7, #4]
 8101e00:	689b      	ldr	r3, [r3, #8]
 8101e02:	2b80      	cmp	r3, #128	; 0x80
 8101e04:	d102      	bne.n	8101e0c <HAL_DMA_Init+0x420>
 8101e06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8101e0a:	e016      	b.n	8101e3a <HAL_DMA_Init+0x44e>
 8101e0c:	2300      	movs	r3, #0
 8101e0e:	e014      	b.n	8101e3a <HAL_DMA_Init+0x44e>
 8101e10:	fe10803f 	.word	0xfe10803f
 8101e14:	5c001000 	.word	0x5c001000
 8101e18:	58025408 	.word	0x58025408
 8101e1c:	5802541c 	.word	0x5802541c
 8101e20:	58025430 	.word	0x58025430
 8101e24:	58025444 	.word	0x58025444
 8101e28:	58025458 	.word	0x58025458
 8101e2c:	5802546c 	.word	0x5802546c
 8101e30:	58025480 	.word	0x58025480
 8101e34:	58025494 	.word	0x58025494
 8101e38:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8101e3a:	687a      	ldr	r2, [r7, #4]
 8101e3c:	68d2      	ldr	r2, [r2, #12]
 8101e3e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	691b      	ldr	r3, [r3, #16]
 8101e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8101e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	695b      	ldr	r3, [r3, #20]
 8101e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8101e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	699b      	ldr	r3, [r3, #24]
 8101e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8101e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	69db      	ldr	r3, [r3, #28]
 8101e5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8101e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8101e62:	687b      	ldr	r3, [r7, #4]
 8101e64:	6a1b      	ldr	r3, [r3, #32]
 8101e66:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8101e68:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101e6a:	697a      	ldr	r2, [r7, #20]
 8101e6c:	4313      	orrs	r3, r2
 8101e6e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	697a      	ldr	r2, [r7, #20]
 8101e76:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	681b      	ldr	r3, [r3, #0]
 8101e7c:	461a      	mov	r2, r3
 8101e7e:	4b6e      	ldr	r3, [pc, #440]	; (8102038 <HAL_DMA_Init+0x64c>)
 8101e80:	4413      	add	r3, r2
 8101e82:	4a6e      	ldr	r2, [pc, #440]	; (810203c <HAL_DMA_Init+0x650>)
 8101e84:	fba2 2303 	umull	r2, r3, r2, r3
 8101e88:	091b      	lsrs	r3, r3, #4
 8101e8a:	009a      	lsls	r2, r3, #2
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8101e90:	6878      	ldr	r0, [r7, #4]
 8101e92:	f001 fa75 	bl	8103380 <DMA_CalcBaseAndBitshift>
 8101e96:	4603      	mov	r3, r0
 8101e98:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101e9e:	f003 031f 	and.w	r3, r3, #31
 8101ea2:	2201      	movs	r2, #1
 8101ea4:	409a      	lsls	r2, r3
 8101ea6:	68fb      	ldr	r3, [r7, #12]
 8101ea8:	605a      	str	r2, [r3, #4]
 8101eaa:	e008      	b.n	8101ebe <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101eac:	687b      	ldr	r3, [r7, #4]
 8101eae:	2240      	movs	r2, #64	; 0x40
 8101eb0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	2203      	movs	r2, #3
 8101eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8101eba:	2301      	movs	r3, #1
 8101ebc:	e0b7      	b.n	810202e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	681b      	ldr	r3, [r3, #0]
 8101ec2:	4a5f      	ldr	r2, [pc, #380]	; (8102040 <HAL_DMA_Init+0x654>)
 8101ec4:	4293      	cmp	r3, r2
 8101ec6:	d072      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101ec8:	687b      	ldr	r3, [r7, #4]
 8101eca:	681b      	ldr	r3, [r3, #0]
 8101ecc:	4a5d      	ldr	r2, [pc, #372]	; (8102044 <HAL_DMA_Init+0x658>)
 8101ece:	4293      	cmp	r3, r2
 8101ed0:	d06d      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	681b      	ldr	r3, [r3, #0]
 8101ed6:	4a5c      	ldr	r2, [pc, #368]	; (8102048 <HAL_DMA_Init+0x65c>)
 8101ed8:	4293      	cmp	r3, r2
 8101eda:	d068      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101edc:	687b      	ldr	r3, [r7, #4]
 8101ede:	681b      	ldr	r3, [r3, #0]
 8101ee0:	4a5a      	ldr	r2, [pc, #360]	; (810204c <HAL_DMA_Init+0x660>)
 8101ee2:	4293      	cmp	r3, r2
 8101ee4:	d063      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101ee6:	687b      	ldr	r3, [r7, #4]
 8101ee8:	681b      	ldr	r3, [r3, #0]
 8101eea:	4a59      	ldr	r2, [pc, #356]	; (8102050 <HAL_DMA_Init+0x664>)
 8101eec:	4293      	cmp	r3, r2
 8101eee:	d05e      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	681b      	ldr	r3, [r3, #0]
 8101ef4:	4a57      	ldr	r2, [pc, #348]	; (8102054 <HAL_DMA_Init+0x668>)
 8101ef6:	4293      	cmp	r3, r2
 8101ef8:	d059      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	681b      	ldr	r3, [r3, #0]
 8101efe:	4a56      	ldr	r2, [pc, #344]	; (8102058 <HAL_DMA_Init+0x66c>)
 8101f00:	4293      	cmp	r3, r2
 8101f02:	d054      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	681b      	ldr	r3, [r3, #0]
 8101f08:	4a54      	ldr	r2, [pc, #336]	; (810205c <HAL_DMA_Init+0x670>)
 8101f0a:	4293      	cmp	r3, r2
 8101f0c:	d04f      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	681b      	ldr	r3, [r3, #0]
 8101f12:	4a53      	ldr	r2, [pc, #332]	; (8102060 <HAL_DMA_Init+0x674>)
 8101f14:	4293      	cmp	r3, r2
 8101f16:	d04a      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f18:	687b      	ldr	r3, [r7, #4]
 8101f1a:	681b      	ldr	r3, [r3, #0]
 8101f1c:	4a51      	ldr	r2, [pc, #324]	; (8102064 <HAL_DMA_Init+0x678>)
 8101f1e:	4293      	cmp	r3, r2
 8101f20:	d045      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	681b      	ldr	r3, [r3, #0]
 8101f26:	4a50      	ldr	r2, [pc, #320]	; (8102068 <HAL_DMA_Init+0x67c>)
 8101f28:	4293      	cmp	r3, r2
 8101f2a:	d040      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f2c:	687b      	ldr	r3, [r7, #4]
 8101f2e:	681b      	ldr	r3, [r3, #0]
 8101f30:	4a4e      	ldr	r2, [pc, #312]	; (810206c <HAL_DMA_Init+0x680>)
 8101f32:	4293      	cmp	r3, r2
 8101f34:	d03b      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f36:	687b      	ldr	r3, [r7, #4]
 8101f38:	681b      	ldr	r3, [r3, #0]
 8101f3a:	4a4d      	ldr	r2, [pc, #308]	; (8102070 <HAL_DMA_Init+0x684>)
 8101f3c:	4293      	cmp	r3, r2
 8101f3e:	d036      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	681b      	ldr	r3, [r3, #0]
 8101f44:	4a4b      	ldr	r2, [pc, #300]	; (8102074 <HAL_DMA_Init+0x688>)
 8101f46:	4293      	cmp	r3, r2
 8101f48:	d031      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	681b      	ldr	r3, [r3, #0]
 8101f4e:	4a4a      	ldr	r2, [pc, #296]	; (8102078 <HAL_DMA_Init+0x68c>)
 8101f50:	4293      	cmp	r3, r2
 8101f52:	d02c      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	4a48      	ldr	r2, [pc, #288]	; (810207c <HAL_DMA_Init+0x690>)
 8101f5a:	4293      	cmp	r3, r2
 8101f5c:	d027      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f5e:	687b      	ldr	r3, [r7, #4]
 8101f60:	681b      	ldr	r3, [r3, #0]
 8101f62:	4a47      	ldr	r2, [pc, #284]	; (8102080 <HAL_DMA_Init+0x694>)
 8101f64:	4293      	cmp	r3, r2
 8101f66:	d022      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	681b      	ldr	r3, [r3, #0]
 8101f6c:	4a45      	ldr	r2, [pc, #276]	; (8102084 <HAL_DMA_Init+0x698>)
 8101f6e:	4293      	cmp	r3, r2
 8101f70:	d01d      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	681b      	ldr	r3, [r3, #0]
 8101f76:	4a44      	ldr	r2, [pc, #272]	; (8102088 <HAL_DMA_Init+0x69c>)
 8101f78:	4293      	cmp	r3, r2
 8101f7a:	d018      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	681b      	ldr	r3, [r3, #0]
 8101f80:	4a42      	ldr	r2, [pc, #264]	; (810208c <HAL_DMA_Init+0x6a0>)
 8101f82:	4293      	cmp	r3, r2
 8101f84:	d013      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	681b      	ldr	r3, [r3, #0]
 8101f8a:	4a41      	ldr	r2, [pc, #260]	; (8102090 <HAL_DMA_Init+0x6a4>)
 8101f8c:	4293      	cmp	r3, r2
 8101f8e:	d00e      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	681b      	ldr	r3, [r3, #0]
 8101f94:	4a3f      	ldr	r2, [pc, #252]	; (8102094 <HAL_DMA_Init+0x6a8>)
 8101f96:	4293      	cmp	r3, r2
 8101f98:	d009      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	4a3e      	ldr	r2, [pc, #248]	; (8102098 <HAL_DMA_Init+0x6ac>)
 8101fa0:	4293      	cmp	r3, r2
 8101fa2:	d004      	beq.n	8101fae <HAL_DMA_Init+0x5c2>
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	4a3c      	ldr	r2, [pc, #240]	; (810209c <HAL_DMA_Init+0x6b0>)
 8101faa:	4293      	cmp	r3, r2
 8101fac:	d101      	bne.n	8101fb2 <HAL_DMA_Init+0x5c6>
 8101fae:	2301      	movs	r3, #1
 8101fb0:	e000      	b.n	8101fb4 <HAL_DMA_Init+0x5c8>
 8101fb2:	2300      	movs	r3, #0
 8101fb4:	2b00      	cmp	r3, #0
 8101fb6:	d032      	beq.n	810201e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8101fb8:	6878      	ldr	r0, [r7, #4]
 8101fba:	f001 fb0f 	bl	81035dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	689b      	ldr	r3, [r3, #8]
 8101fc2:	2b80      	cmp	r3, #128	; 0x80
 8101fc4:	d102      	bne.n	8101fcc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	2200      	movs	r2, #0
 8101fca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	685a      	ldr	r2, [r3, #4]
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101fd4:	b2d2      	uxtb	r2, r2
 8101fd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101fdc:	687a      	ldr	r2, [r7, #4]
 8101fde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8101fe0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	685b      	ldr	r3, [r3, #4]
 8101fe6:	2b00      	cmp	r3, #0
 8101fe8:	d010      	beq.n	810200c <HAL_DMA_Init+0x620>
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	685b      	ldr	r3, [r3, #4]
 8101fee:	2b08      	cmp	r3, #8
 8101ff0:	d80c      	bhi.n	810200c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8101ff2:	6878      	ldr	r0, [r7, #4]
 8101ff4:	f001 fb8c 	bl	8103710 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101ffc:	2200      	movs	r2, #0
 8101ffe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102004:	687a      	ldr	r2, [r7, #4]
 8102006:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102008:	605a      	str	r2, [r3, #4]
 810200a:	e008      	b.n	810201e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	2200      	movs	r2, #0
 8102010:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	2200      	movs	r2, #0
 8102016:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	2200      	movs	r2, #0
 810201c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	2200      	movs	r2, #0
 8102022:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102024:	687b      	ldr	r3, [r7, #4]
 8102026:	2201      	movs	r2, #1
 8102028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 810202c:	2300      	movs	r3, #0
}
 810202e:	4618      	mov	r0, r3
 8102030:	3718      	adds	r7, #24
 8102032:	46bd      	mov	sp, r7
 8102034:	bd80      	pop	{r7, pc}
 8102036:	bf00      	nop
 8102038:	a7fdabf8 	.word	0xa7fdabf8
 810203c:	cccccccd 	.word	0xcccccccd
 8102040:	40020010 	.word	0x40020010
 8102044:	40020028 	.word	0x40020028
 8102048:	40020040 	.word	0x40020040
 810204c:	40020058 	.word	0x40020058
 8102050:	40020070 	.word	0x40020070
 8102054:	40020088 	.word	0x40020088
 8102058:	400200a0 	.word	0x400200a0
 810205c:	400200b8 	.word	0x400200b8
 8102060:	40020410 	.word	0x40020410
 8102064:	40020428 	.word	0x40020428
 8102068:	40020440 	.word	0x40020440
 810206c:	40020458 	.word	0x40020458
 8102070:	40020470 	.word	0x40020470
 8102074:	40020488 	.word	0x40020488
 8102078:	400204a0 	.word	0x400204a0
 810207c:	400204b8 	.word	0x400204b8
 8102080:	58025408 	.word	0x58025408
 8102084:	5802541c 	.word	0x5802541c
 8102088:	58025430 	.word	0x58025430
 810208c:	58025444 	.word	0x58025444
 8102090:	58025458 	.word	0x58025458
 8102094:	5802546c 	.word	0x5802546c
 8102098:	58025480 	.word	0x58025480
 810209c:	58025494 	.word	0x58025494

081020a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81020a0:	b580      	push	{r7, lr}
 81020a2:	b084      	sub	sp, #16
 81020a4:	af00      	add	r7, sp, #0
 81020a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	2b00      	cmp	r3, #0
 81020ac:	d101      	bne.n	81020b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81020ae:	2301      	movs	r3, #1
 81020b0:	e237      	b.n	8102522 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81020b8:	b2db      	uxtb	r3, r3
 81020ba:	2b02      	cmp	r3, #2
 81020bc:	d004      	beq.n	81020c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81020be:	687b      	ldr	r3, [r7, #4]
 81020c0:	2280      	movs	r2, #128	; 0x80
 81020c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81020c4:	2301      	movs	r3, #1
 81020c6:	e22c      	b.n	8102522 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	681b      	ldr	r3, [r3, #0]
 81020cc:	4a5c      	ldr	r2, [pc, #368]	; (8102240 <HAL_DMA_Abort_IT+0x1a0>)
 81020ce:	4293      	cmp	r3, r2
 81020d0:	d04a      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	681b      	ldr	r3, [r3, #0]
 81020d6:	4a5b      	ldr	r2, [pc, #364]	; (8102244 <HAL_DMA_Abort_IT+0x1a4>)
 81020d8:	4293      	cmp	r3, r2
 81020da:	d045      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	681b      	ldr	r3, [r3, #0]
 81020e0:	4a59      	ldr	r2, [pc, #356]	; (8102248 <HAL_DMA_Abort_IT+0x1a8>)
 81020e2:	4293      	cmp	r3, r2
 81020e4:	d040      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	681b      	ldr	r3, [r3, #0]
 81020ea:	4a58      	ldr	r2, [pc, #352]	; (810224c <HAL_DMA_Abort_IT+0x1ac>)
 81020ec:	4293      	cmp	r3, r2
 81020ee:	d03b      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	681b      	ldr	r3, [r3, #0]
 81020f4:	4a56      	ldr	r2, [pc, #344]	; (8102250 <HAL_DMA_Abort_IT+0x1b0>)
 81020f6:	4293      	cmp	r3, r2
 81020f8:	d036      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 81020fa:	687b      	ldr	r3, [r7, #4]
 81020fc:	681b      	ldr	r3, [r3, #0]
 81020fe:	4a55      	ldr	r2, [pc, #340]	; (8102254 <HAL_DMA_Abort_IT+0x1b4>)
 8102100:	4293      	cmp	r3, r2
 8102102:	d031      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	681b      	ldr	r3, [r3, #0]
 8102108:	4a53      	ldr	r2, [pc, #332]	; (8102258 <HAL_DMA_Abort_IT+0x1b8>)
 810210a:	4293      	cmp	r3, r2
 810210c:	d02c      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	681b      	ldr	r3, [r3, #0]
 8102112:	4a52      	ldr	r2, [pc, #328]	; (810225c <HAL_DMA_Abort_IT+0x1bc>)
 8102114:	4293      	cmp	r3, r2
 8102116:	d027      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 8102118:	687b      	ldr	r3, [r7, #4]
 810211a:	681b      	ldr	r3, [r3, #0]
 810211c:	4a50      	ldr	r2, [pc, #320]	; (8102260 <HAL_DMA_Abort_IT+0x1c0>)
 810211e:	4293      	cmp	r3, r2
 8102120:	d022      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 8102122:	687b      	ldr	r3, [r7, #4]
 8102124:	681b      	ldr	r3, [r3, #0]
 8102126:	4a4f      	ldr	r2, [pc, #316]	; (8102264 <HAL_DMA_Abort_IT+0x1c4>)
 8102128:	4293      	cmp	r3, r2
 810212a:	d01d      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 810212c:	687b      	ldr	r3, [r7, #4]
 810212e:	681b      	ldr	r3, [r3, #0]
 8102130:	4a4d      	ldr	r2, [pc, #308]	; (8102268 <HAL_DMA_Abort_IT+0x1c8>)
 8102132:	4293      	cmp	r3, r2
 8102134:	d018      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	681b      	ldr	r3, [r3, #0]
 810213a:	4a4c      	ldr	r2, [pc, #304]	; (810226c <HAL_DMA_Abort_IT+0x1cc>)
 810213c:	4293      	cmp	r3, r2
 810213e:	d013      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 8102140:	687b      	ldr	r3, [r7, #4]
 8102142:	681b      	ldr	r3, [r3, #0]
 8102144:	4a4a      	ldr	r2, [pc, #296]	; (8102270 <HAL_DMA_Abort_IT+0x1d0>)
 8102146:	4293      	cmp	r3, r2
 8102148:	d00e      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	681b      	ldr	r3, [r3, #0]
 810214e:	4a49      	ldr	r2, [pc, #292]	; (8102274 <HAL_DMA_Abort_IT+0x1d4>)
 8102150:	4293      	cmp	r3, r2
 8102152:	d009      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 8102154:	687b      	ldr	r3, [r7, #4]
 8102156:	681b      	ldr	r3, [r3, #0]
 8102158:	4a47      	ldr	r2, [pc, #284]	; (8102278 <HAL_DMA_Abort_IT+0x1d8>)
 810215a:	4293      	cmp	r3, r2
 810215c:	d004      	beq.n	8102168 <HAL_DMA_Abort_IT+0xc8>
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	681b      	ldr	r3, [r3, #0]
 8102162:	4a46      	ldr	r2, [pc, #280]	; (810227c <HAL_DMA_Abort_IT+0x1dc>)
 8102164:	4293      	cmp	r3, r2
 8102166:	d101      	bne.n	810216c <HAL_DMA_Abort_IT+0xcc>
 8102168:	2301      	movs	r3, #1
 810216a:	e000      	b.n	810216e <HAL_DMA_Abort_IT+0xce>
 810216c:	2300      	movs	r3, #0
 810216e:	2b00      	cmp	r3, #0
 8102170:	f000 8086 	beq.w	8102280 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	2204      	movs	r2, #4
 8102178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	681b      	ldr	r3, [r3, #0]
 8102180:	4a2f      	ldr	r2, [pc, #188]	; (8102240 <HAL_DMA_Abort_IT+0x1a0>)
 8102182:	4293      	cmp	r3, r2
 8102184:	d04a      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	681b      	ldr	r3, [r3, #0]
 810218a:	4a2e      	ldr	r2, [pc, #184]	; (8102244 <HAL_DMA_Abort_IT+0x1a4>)
 810218c:	4293      	cmp	r3, r2
 810218e:	d045      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	4a2c      	ldr	r2, [pc, #176]	; (8102248 <HAL_DMA_Abort_IT+0x1a8>)
 8102196:	4293      	cmp	r3, r2
 8102198:	d040      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	681b      	ldr	r3, [r3, #0]
 810219e:	4a2b      	ldr	r2, [pc, #172]	; (810224c <HAL_DMA_Abort_IT+0x1ac>)
 81021a0:	4293      	cmp	r3, r2
 81021a2:	d03b      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	4a29      	ldr	r2, [pc, #164]	; (8102250 <HAL_DMA_Abort_IT+0x1b0>)
 81021aa:	4293      	cmp	r3, r2
 81021ac:	d036      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	681b      	ldr	r3, [r3, #0]
 81021b2:	4a28      	ldr	r2, [pc, #160]	; (8102254 <HAL_DMA_Abort_IT+0x1b4>)
 81021b4:	4293      	cmp	r3, r2
 81021b6:	d031      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 81021b8:	687b      	ldr	r3, [r7, #4]
 81021ba:	681b      	ldr	r3, [r3, #0]
 81021bc:	4a26      	ldr	r2, [pc, #152]	; (8102258 <HAL_DMA_Abort_IT+0x1b8>)
 81021be:	4293      	cmp	r3, r2
 81021c0:	d02c      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	4a25      	ldr	r2, [pc, #148]	; (810225c <HAL_DMA_Abort_IT+0x1bc>)
 81021c8:	4293      	cmp	r3, r2
 81021ca:	d027      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	681b      	ldr	r3, [r3, #0]
 81021d0:	4a23      	ldr	r2, [pc, #140]	; (8102260 <HAL_DMA_Abort_IT+0x1c0>)
 81021d2:	4293      	cmp	r3, r2
 81021d4:	d022      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	681b      	ldr	r3, [r3, #0]
 81021da:	4a22      	ldr	r2, [pc, #136]	; (8102264 <HAL_DMA_Abort_IT+0x1c4>)
 81021dc:	4293      	cmp	r3, r2
 81021de:	d01d      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	681b      	ldr	r3, [r3, #0]
 81021e4:	4a20      	ldr	r2, [pc, #128]	; (8102268 <HAL_DMA_Abort_IT+0x1c8>)
 81021e6:	4293      	cmp	r3, r2
 81021e8:	d018      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	681b      	ldr	r3, [r3, #0]
 81021ee:	4a1f      	ldr	r2, [pc, #124]	; (810226c <HAL_DMA_Abort_IT+0x1cc>)
 81021f0:	4293      	cmp	r3, r2
 81021f2:	d013      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	681b      	ldr	r3, [r3, #0]
 81021f8:	4a1d      	ldr	r2, [pc, #116]	; (8102270 <HAL_DMA_Abort_IT+0x1d0>)
 81021fa:	4293      	cmp	r3, r2
 81021fc:	d00e      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	4a1c      	ldr	r2, [pc, #112]	; (8102274 <HAL_DMA_Abort_IT+0x1d4>)
 8102204:	4293      	cmp	r3, r2
 8102206:	d009      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	681b      	ldr	r3, [r3, #0]
 810220c:	4a1a      	ldr	r2, [pc, #104]	; (8102278 <HAL_DMA_Abort_IT+0x1d8>)
 810220e:	4293      	cmp	r3, r2
 8102210:	d004      	beq.n	810221c <HAL_DMA_Abort_IT+0x17c>
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	681b      	ldr	r3, [r3, #0]
 8102216:	4a19      	ldr	r2, [pc, #100]	; (810227c <HAL_DMA_Abort_IT+0x1dc>)
 8102218:	4293      	cmp	r3, r2
 810221a:	d108      	bne.n	810222e <HAL_DMA_Abort_IT+0x18e>
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	681b      	ldr	r3, [r3, #0]
 8102220:	681a      	ldr	r2, [r3, #0]
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	f022 0201 	bic.w	r2, r2, #1
 810222a:	601a      	str	r2, [r3, #0]
 810222c:	e178      	b.n	8102520 <HAL_DMA_Abort_IT+0x480>
 810222e:	687b      	ldr	r3, [r7, #4]
 8102230:	681b      	ldr	r3, [r3, #0]
 8102232:	681a      	ldr	r2, [r3, #0]
 8102234:	687b      	ldr	r3, [r7, #4]
 8102236:	681b      	ldr	r3, [r3, #0]
 8102238:	f022 0201 	bic.w	r2, r2, #1
 810223c:	601a      	str	r2, [r3, #0]
 810223e:	e16f      	b.n	8102520 <HAL_DMA_Abort_IT+0x480>
 8102240:	40020010 	.word	0x40020010
 8102244:	40020028 	.word	0x40020028
 8102248:	40020040 	.word	0x40020040
 810224c:	40020058 	.word	0x40020058
 8102250:	40020070 	.word	0x40020070
 8102254:	40020088 	.word	0x40020088
 8102258:	400200a0 	.word	0x400200a0
 810225c:	400200b8 	.word	0x400200b8
 8102260:	40020410 	.word	0x40020410
 8102264:	40020428 	.word	0x40020428
 8102268:	40020440 	.word	0x40020440
 810226c:	40020458 	.word	0x40020458
 8102270:	40020470 	.word	0x40020470
 8102274:	40020488 	.word	0x40020488
 8102278:	400204a0 	.word	0x400204a0
 810227c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	681b      	ldr	r3, [r3, #0]
 8102284:	681a      	ldr	r2, [r3, #0]
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	681b      	ldr	r3, [r3, #0]
 810228a:	f022 020e 	bic.w	r2, r2, #14
 810228e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	681b      	ldr	r3, [r3, #0]
 8102294:	4a6c      	ldr	r2, [pc, #432]	; (8102448 <HAL_DMA_Abort_IT+0x3a8>)
 8102296:	4293      	cmp	r3, r2
 8102298:	d04a      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	681b      	ldr	r3, [r3, #0]
 810229e:	4a6b      	ldr	r2, [pc, #428]	; (810244c <HAL_DMA_Abort_IT+0x3ac>)
 81022a0:	4293      	cmp	r3, r2
 81022a2:	d045      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 81022a4:	687b      	ldr	r3, [r7, #4]
 81022a6:	681b      	ldr	r3, [r3, #0]
 81022a8:	4a69      	ldr	r2, [pc, #420]	; (8102450 <HAL_DMA_Abort_IT+0x3b0>)
 81022aa:	4293      	cmp	r3, r2
 81022ac:	d040      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	4a68      	ldr	r2, [pc, #416]	; (8102454 <HAL_DMA_Abort_IT+0x3b4>)
 81022b4:	4293      	cmp	r3, r2
 81022b6:	d03b      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	681b      	ldr	r3, [r3, #0]
 81022bc:	4a66      	ldr	r2, [pc, #408]	; (8102458 <HAL_DMA_Abort_IT+0x3b8>)
 81022be:	4293      	cmp	r3, r2
 81022c0:	d036      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	681b      	ldr	r3, [r3, #0]
 81022c6:	4a65      	ldr	r2, [pc, #404]	; (810245c <HAL_DMA_Abort_IT+0x3bc>)
 81022c8:	4293      	cmp	r3, r2
 81022ca:	d031      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	681b      	ldr	r3, [r3, #0]
 81022d0:	4a63      	ldr	r2, [pc, #396]	; (8102460 <HAL_DMA_Abort_IT+0x3c0>)
 81022d2:	4293      	cmp	r3, r2
 81022d4:	d02c      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	681b      	ldr	r3, [r3, #0]
 81022da:	4a62      	ldr	r2, [pc, #392]	; (8102464 <HAL_DMA_Abort_IT+0x3c4>)
 81022dc:	4293      	cmp	r3, r2
 81022de:	d027      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	681b      	ldr	r3, [r3, #0]
 81022e4:	4a60      	ldr	r2, [pc, #384]	; (8102468 <HAL_DMA_Abort_IT+0x3c8>)
 81022e6:	4293      	cmp	r3, r2
 81022e8:	d022      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 81022ea:	687b      	ldr	r3, [r7, #4]
 81022ec:	681b      	ldr	r3, [r3, #0]
 81022ee:	4a5f      	ldr	r2, [pc, #380]	; (810246c <HAL_DMA_Abort_IT+0x3cc>)
 81022f0:	4293      	cmp	r3, r2
 81022f2:	d01d      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	681b      	ldr	r3, [r3, #0]
 81022f8:	4a5d      	ldr	r2, [pc, #372]	; (8102470 <HAL_DMA_Abort_IT+0x3d0>)
 81022fa:	4293      	cmp	r3, r2
 81022fc:	d018      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	681b      	ldr	r3, [r3, #0]
 8102302:	4a5c      	ldr	r2, [pc, #368]	; (8102474 <HAL_DMA_Abort_IT+0x3d4>)
 8102304:	4293      	cmp	r3, r2
 8102306:	d013      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	4a5a      	ldr	r2, [pc, #360]	; (8102478 <HAL_DMA_Abort_IT+0x3d8>)
 810230e:	4293      	cmp	r3, r2
 8102310:	d00e      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	681b      	ldr	r3, [r3, #0]
 8102316:	4a59      	ldr	r2, [pc, #356]	; (810247c <HAL_DMA_Abort_IT+0x3dc>)
 8102318:	4293      	cmp	r3, r2
 810231a:	d009      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	681b      	ldr	r3, [r3, #0]
 8102320:	4a57      	ldr	r2, [pc, #348]	; (8102480 <HAL_DMA_Abort_IT+0x3e0>)
 8102322:	4293      	cmp	r3, r2
 8102324:	d004      	beq.n	8102330 <HAL_DMA_Abort_IT+0x290>
 8102326:	687b      	ldr	r3, [r7, #4]
 8102328:	681b      	ldr	r3, [r3, #0]
 810232a:	4a56      	ldr	r2, [pc, #344]	; (8102484 <HAL_DMA_Abort_IT+0x3e4>)
 810232c:	4293      	cmp	r3, r2
 810232e:	d108      	bne.n	8102342 <HAL_DMA_Abort_IT+0x2a2>
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	681b      	ldr	r3, [r3, #0]
 8102334:	681a      	ldr	r2, [r3, #0]
 8102336:	687b      	ldr	r3, [r7, #4]
 8102338:	681b      	ldr	r3, [r3, #0]
 810233a:	f022 0201 	bic.w	r2, r2, #1
 810233e:	601a      	str	r2, [r3, #0]
 8102340:	e007      	b.n	8102352 <HAL_DMA_Abort_IT+0x2b2>
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	681b      	ldr	r3, [r3, #0]
 8102346:	681a      	ldr	r2, [r3, #0]
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	681b      	ldr	r3, [r3, #0]
 810234c:	f022 0201 	bic.w	r2, r2, #1
 8102350:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	681b      	ldr	r3, [r3, #0]
 8102356:	4a3c      	ldr	r2, [pc, #240]	; (8102448 <HAL_DMA_Abort_IT+0x3a8>)
 8102358:	4293      	cmp	r3, r2
 810235a:	d072      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	681b      	ldr	r3, [r3, #0]
 8102360:	4a3a      	ldr	r2, [pc, #232]	; (810244c <HAL_DMA_Abort_IT+0x3ac>)
 8102362:	4293      	cmp	r3, r2
 8102364:	d06d      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	4a39      	ldr	r2, [pc, #228]	; (8102450 <HAL_DMA_Abort_IT+0x3b0>)
 810236c:	4293      	cmp	r3, r2
 810236e:	d068      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 8102370:	687b      	ldr	r3, [r7, #4]
 8102372:	681b      	ldr	r3, [r3, #0]
 8102374:	4a37      	ldr	r2, [pc, #220]	; (8102454 <HAL_DMA_Abort_IT+0x3b4>)
 8102376:	4293      	cmp	r3, r2
 8102378:	d063      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	681b      	ldr	r3, [r3, #0]
 810237e:	4a36      	ldr	r2, [pc, #216]	; (8102458 <HAL_DMA_Abort_IT+0x3b8>)
 8102380:	4293      	cmp	r3, r2
 8102382:	d05e      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 8102384:	687b      	ldr	r3, [r7, #4]
 8102386:	681b      	ldr	r3, [r3, #0]
 8102388:	4a34      	ldr	r2, [pc, #208]	; (810245c <HAL_DMA_Abort_IT+0x3bc>)
 810238a:	4293      	cmp	r3, r2
 810238c:	d059      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 810238e:	687b      	ldr	r3, [r7, #4]
 8102390:	681b      	ldr	r3, [r3, #0]
 8102392:	4a33      	ldr	r2, [pc, #204]	; (8102460 <HAL_DMA_Abort_IT+0x3c0>)
 8102394:	4293      	cmp	r3, r2
 8102396:	d054      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	4a31      	ldr	r2, [pc, #196]	; (8102464 <HAL_DMA_Abort_IT+0x3c4>)
 810239e:	4293      	cmp	r3, r2
 81023a0:	d04f      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	681b      	ldr	r3, [r3, #0]
 81023a6:	4a30      	ldr	r2, [pc, #192]	; (8102468 <HAL_DMA_Abort_IT+0x3c8>)
 81023a8:	4293      	cmp	r3, r2
 81023aa:	d04a      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 81023ac:	687b      	ldr	r3, [r7, #4]
 81023ae:	681b      	ldr	r3, [r3, #0]
 81023b0:	4a2e      	ldr	r2, [pc, #184]	; (810246c <HAL_DMA_Abort_IT+0x3cc>)
 81023b2:	4293      	cmp	r3, r2
 81023b4:	d045      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	4a2d      	ldr	r2, [pc, #180]	; (8102470 <HAL_DMA_Abort_IT+0x3d0>)
 81023bc:	4293      	cmp	r3, r2
 81023be:	d040      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	681b      	ldr	r3, [r3, #0]
 81023c4:	4a2b      	ldr	r2, [pc, #172]	; (8102474 <HAL_DMA_Abort_IT+0x3d4>)
 81023c6:	4293      	cmp	r3, r2
 81023c8:	d03b      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 81023ca:	687b      	ldr	r3, [r7, #4]
 81023cc:	681b      	ldr	r3, [r3, #0]
 81023ce:	4a2a      	ldr	r2, [pc, #168]	; (8102478 <HAL_DMA_Abort_IT+0x3d8>)
 81023d0:	4293      	cmp	r3, r2
 81023d2:	d036      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 81023d4:	687b      	ldr	r3, [r7, #4]
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	4a28      	ldr	r2, [pc, #160]	; (810247c <HAL_DMA_Abort_IT+0x3dc>)
 81023da:	4293      	cmp	r3, r2
 81023dc:	d031      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	681b      	ldr	r3, [r3, #0]
 81023e2:	4a27      	ldr	r2, [pc, #156]	; (8102480 <HAL_DMA_Abort_IT+0x3e0>)
 81023e4:	4293      	cmp	r3, r2
 81023e6:	d02c      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	681b      	ldr	r3, [r3, #0]
 81023ec:	4a25      	ldr	r2, [pc, #148]	; (8102484 <HAL_DMA_Abort_IT+0x3e4>)
 81023ee:	4293      	cmp	r3, r2
 81023f0:	d027      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	681b      	ldr	r3, [r3, #0]
 81023f6:	4a24      	ldr	r2, [pc, #144]	; (8102488 <HAL_DMA_Abort_IT+0x3e8>)
 81023f8:	4293      	cmp	r3, r2
 81023fa:	d022      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	681b      	ldr	r3, [r3, #0]
 8102400:	4a22      	ldr	r2, [pc, #136]	; (810248c <HAL_DMA_Abort_IT+0x3ec>)
 8102402:	4293      	cmp	r3, r2
 8102404:	d01d      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	681b      	ldr	r3, [r3, #0]
 810240a:	4a21      	ldr	r2, [pc, #132]	; (8102490 <HAL_DMA_Abort_IT+0x3f0>)
 810240c:	4293      	cmp	r3, r2
 810240e:	d018      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	4a1f      	ldr	r2, [pc, #124]	; (8102494 <HAL_DMA_Abort_IT+0x3f4>)
 8102416:	4293      	cmp	r3, r2
 8102418:	d013      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 810241a:	687b      	ldr	r3, [r7, #4]
 810241c:	681b      	ldr	r3, [r3, #0]
 810241e:	4a1e      	ldr	r2, [pc, #120]	; (8102498 <HAL_DMA_Abort_IT+0x3f8>)
 8102420:	4293      	cmp	r3, r2
 8102422:	d00e      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	681b      	ldr	r3, [r3, #0]
 8102428:	4a1c      	ldr	r2, [pc, #112]	; (810249c <HAL_DMA_Abort_IT+0x3fc>)
 810242a:	4293      	cmp	r3, r2
 810242c:	d009      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	681b      	ldr	r3, [r3, #0]
 8102432:	4a1b      	ldr	r2, [pc, #108]	; (81024a0 <HAL_DMA_Abort_IT+0x400>)
 8102434:	4293      	cmp	r3, r2
 8102436:	d004      	beq.n	8102442 <HAL_DMA_Abort_IT+0x3a2>
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	681b      	ldr	r3, [r3, #0]
 810243c:	4a19      	ldr	r2, [pc, #100]	; (81024a4 <HAL_DMA_Abort_IT+0x404>)
 810243e:	4293      	cmp	r3, r2
 8102440:	d132      	bne.n	81024a8 <HAL_DMA_Abort_IT+0x408>
 8102442:	2301      	movs	r3, #1
 8102444:	e031      	b.n	81024aa <HAL_DMA_Abort_IT+0x40a>
 8102446:	bf00      	nop
 8102448:	40020010 	.word	0x40020010
 810244c:	40020028 	.word	0x40020028
 8102450:	40020040 	.word	0x40020040
 8102454:	40020058 	.word	0x40020058
 8102458:	40020070 	.word	0x40020070
 810245c:	40020088 	.word	0x40020088
 8102460:	400200a0 	.word	0x400200a0
 8102464:	400200b8 	.word	0x400200b8
 8102468:	40020410 	.word	0x40020410
 810246c:	40020428 	.word	0x40020428
 8102470:	40020440 	.word	0x40020440
 8102474:	40020458 	.word	0x40020458
 8102478:	40020470 	.word	0x40020470
 810247c:	40020488 	.word	0x40020488
 8102480:	400204a0 	.word	0x400204a0
 8102484:	400204b8 	.word	0x400204b8
 8102488:	58025408 	.word	0x58025408
 810248c:	5802541c 	.word	0x5802541c
 8102490:	58025430 	.word	0x58025430
 8102494:	58025444 	.word	0x58025444
 8102498:	58025458 	.word	0x58025458
 810249c:	5802546c 	.word	0x5802546c
 81024a0:	58025480 	.word	0x58025480
 81024a4:	58025494 	.word	0x58025494
 81024a8:	2300      	movs	r3, #0
 81024aa:	2b00      	cmp	r3, #0
 81024ac:	d028      	beq.n	8102500 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81024b2:	681a      	ldr	r2, [r3, #0]
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81024b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81024bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81024c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81024c8:	f003 031f 	and.w	r3, r3, #31
 81024cc:	2201      	movs	r2, #1
 81024ce:	409a      	lsls	r2, r3
 81024d0:	68fb      	ldr	r3, [r7, #12]
 81024d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81024d8:	687a      	ldr	r2, [r7, #4]
 81024da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81024dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81024e2:	2b00      	cmp	r3, #0
 81024e4:	d00c      	beq.n	8102500 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81024ea:	681a      	ldr	r2, [r3, #0]
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81024f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81024f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81024fa:	687a      	ldr	r2, [r7, #4]
 81024fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81024fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8102500:	687b      	ldr	r3, [r7, #4]
 8102502:	2201      	movs	r2, #1
 8102504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	2200      	movs	r2, #0
 810250c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102514:	2b00      	cmp	r3, #0
 8102516:	d003      	beq.n	8102520 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810251c:	6878      	ldr	r0, [r7, #4]
 810251e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8102520:	2300      	movs	r3, #0
}
 8102522:	4618      	mov	r0, r3
 8102524:	3710      	adds	r7, #16
 8102526:	46bd      	mov	sp, r7
 8102528:	bd80      	pop	{r7, pc}
 810252a:	bf00      	nop

0810252c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 810252c:	b580      	push	{r7, lr}
 810252e:	b08a      	sub	sp, #40	; 0x28
 8102530:	af00      	add	r7, sp, #0
 8102532:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8102534:	2300      	movs	r3, #0
 8102536:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8102538:	4b67      	ldr	r3, [pc, #412]	; (81026d8 <HAL_DMA_IRQHandler+0x1ac>)
 810253a:	681b      	ldr	r3, [r3, #0]
 810253c:	4a67      	ldr	r2, [pc, #412]	; (81026dc <HAL_DMA_IRQHandler+0x1b0>)
 810253e:	fba2 2303 	umull	r2, r3, r2, r3
 8102542:	0a9b      	lsrs	r3, r3, #10
 8102544:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810254a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810254c:	687b      	ldr	r3, [r7, #4]
 810254e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102550:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8102552:	6a3b      	ldr	r3, [r7, #32]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8102558:	69fb      	ldr	r3, [r7, #28]
 810255a:	681b      	ldr	r3, [r3, #0]
 810255c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	4a5f      	ldr	r2, [pc, #380]	; (81026e0 <HAL_DMA_IRQHandler+0x1b4>)
 8102564:	4293      	cmp	r3, r2
 8102566:	d04a      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	4a5d      	ldr	r2, [pc, #372]	; (81026e4 <HAL_DMA_IRQHandler+0x1b8>)
 810256e:	4293      	cmp	r3, r2
 8102570:	d045      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	681b      	ldr	r3, [r3, #0]
 8102576:	4a5c      	ldr	r2, [pc, #368]	; (81026e8 <HAL_DMA_IRQHandler+0x1bc>)
 8102578:	4293      	cmp	r3, r2
 810257a:	d040      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	4a5a      	ldr	r2, [pc, #360]	; (81026ec <HAL_DMA_IRQHandler+0x1c0>)
 8102582:	4293      	cmp	r3, r2
 8102584:	d03b      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	681b      	ldr	r3, [r3, #0]
 810258a:	4a59      	ldr	r2, [pc, #356]	; (81026f0 <HAL_DMA_IRQHandler+0x1c4>)
 810258c:	4293      	cmp	r3, r2
 810258e:	d036      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	681b      	ldr	r3, [r3, #0]
 8102594:	4a57      	ldr	r2, [pc, #348]	; (81026f4 <HAL_DMA_IRQHandler+0x1c8>)
 8102596:	4293      	cmp	r3, r2
 8102598:	d031      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	681b      	ldr	r3, [r3, #0]
 810259e:	4a56      	ldr	r2, [pc, #344]	; (81026f8 <HAL_DMA_IRQHandler+0x1cc>)
 81025a0:	4293      	cmp	r3, r2
 81025a2:	d02c      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	4a54      	ldr	r2, [pc, #336]	; (81026fc <HAL_DMA_IRQHandler+0x1d0>)
 81025aa:	4293      	cmp	r3, r2
 81025ac:	d027      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	681b      	ldr	r3, [r3, #0]
 81025b2:	4a53      	ldr	r2, [pc, #332]	; (8102700 <HAL_DMA_IRQHandler+0x1d4>)
 81025b4:	4293      	cmp	r3, r2
 81025b6:	d022      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	4a51      	ldr	r2, [pc, #324]	; (8102704 <HAL_DMA_IRQHandler+0x1d8>)
 81025be:	4293      	cmp	r3, r2
 81025c0:	d01d      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	681b      	ldr	r3, [r3, #0]
 81025c6:	4a50      	ldr	r2, [pc, #320]	; (8102708 <HAL_DMA_IRQHandler+0x1dc>)
 81025c8:	4293      	cmp	r3, r2
 81025ca:	d018      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	681b      	ldr	r3, [r3, #0]
 81025d0:	4a4e      	ldr	r2, [pc, #312]	; (810270c <HAL_DMA_IRQHandler+0x1e0>)
 81025d2:	4293      	cmp	r3, r2
 81025d4:	d013      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	681b      	ldr	r3, [r3, #0]
 81025da:	4a4d      	ldr	r2, [pc, #308]	; (8102710 <HAL_DMA_IRQHandler+0x1e4>)
 81025dc:	4293      	cmp	r3, r2
 81025de:	d00e      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	4a4b      	ldr	r2, [pc, #300]	; (8102714 <HAL_DMA_IRQHandler+0x1e8>)
 81025e6:	4293      	cmp	r3, r2
 81025e8:	d009      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	681b      	ldr	r3, [r3, #0]
 81025ee:	4a4a      	ldr	r2, [pc, #296]	; (8102718 <HAL_DMA_IRQHandler+0x1ec>)
 81025f0:	4293      	cmp	r3, r2
 81025f2:	d004      	beq.n	81025fe <HAL_DMA_IRQHandler+0xd2>
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	681b      	ldr	r3, [r3, #0]
 81025f8:	4a48      	ldr	r2, [pc, #288]	; (810271c <HAL_DMA_IRQHandler+0x1f0>)
 81025fa:	4293      	cmp	r3, r2
 81025fc:	d101      	bne.n	8102602 <HAL_DMA_IRQHandler+0xd6>
 81025fe:	2301      	movs	r3, #1
 8102600:	e000      	b.n	8102604 <HAL_DMA_IRQHandler+0xd8>
 8102602:	2300      	movs	r3, #0
 8102604:	2b00      	cmp	r3, #0
 8102606:	f000 842b 	beq.w	8102e60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810260e:	f003 031f 	and.w	r3, r3, #31
 8102612:	2208      	movs	r2, #8
 8102614:	409a      	lsls	r2, r3
 8102616:	69bb      	ldr	r3, [r7, #24]
 8102618:	4013      	ands	r3, r2
 810261a:	2b00      	cmp	r3, #0
 810261c:	f000 80a2 	beq.w	8102764 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8102620:	687b      	ldr	r3, [r7, #4]
 8102622:	681b      	ldr	r3, [r3, #0]
 8102624:	4a2e      	ldr	r2, [pc, #184]	; (81026e0 <HAL_DMA_IRQHandler+0x1b4>)
 8102626:	4293      	cmp	r3, r2
 8102628:	d04a      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	681b      	ldr	r3, [r3, #0]
 810262e:	4a2d      	ldr	r2, [pc, #180]	; (81026e4 <HAL_DMA_IRQHandler+0x1b8>)
 8102630:	4293      	cmp	r3, r2
 8102632:	d045      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	681b      	ldr	r3, [r3, #0]
 8102638:	4a2b      	ldr	r2, [pc, #172]	; (81026e8 <HAL_DMA_IRQHandler+0x1bc>)
 810263a:	4293      	cmp	r3, r2
 810263c:	d040      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 810263e:	687b      	ldr	r3, [r7, #4]
 8102640:	681b      	ldr	r3, [r3, #0]
 8102642:	4a2a      	ldr	r2, [pc, #168]	; (81026ec <HAL_DMA_IRQHandler+0x1c0>)
 8102644:	4293      	cmp	r3, r2
 8102646:	d03b      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	681b      	ldr	r3, [r3, #0]
 810264c:	4a28      	ldr	r2, [pc, #160]	; (81026f0 <HAL_DMA_IRQHandler+0x1c4>)
 810264e:	4293      	cmp	r3, r2
 8102650:	d036      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	4a27      	ldr	r2, [pc, #156]	; (81026f4 <HAL_DMA_IRQHandler+0x1c8>)
 8102658:	4293      	cmp	r3, r2
 810265a:	d031      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 810265c:	687b      	ldr	r3, [r7, #4]
 810265e:	681b      	ldr	r3, [r3, #0]
 8102660:	4a25      	ldr	r2, [pc, #148]	; (81026f8 <HAL_DMA_IRQHandler+0x1cc>)
 8102662:	4293      	cmp	r3, r2
 8102664:	d02c      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 8102666:	687b      	ldr	r3, [r7, #4]
 8102668:	681b      	ldr	r3, [r3, #0]
 810266a:	4a24      	ldr	r2, [pc, #144]	; (81026fc <HAL_DMA_IRQHandler+0x1d0>)
 810266c:	4293      	cmp	r3, r2
 810266e:	d027      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	681b      	ldr	r3, [r3, #0]
 8102674:	4a22      	ldr	r2, [pc, #136]	; (8102700 <HAL_DMA_IRQHandler+0x1d4>)
 8102676:	4293      	cmp	r3, r2
 8102678:	d022      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	681b      	ldr	r3, [r3, #0]
 810267e:	4a21      	ldr	r2, [pc, #132]	; (8102704 <HAL_DMA_IRQHandler+0x1d8>)
 8102680:	4293      	cmp	r3, r2
 8102682:	d01d      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	681b      	ldr	r3, [r3, #0]
 8102688:	4a1f      	ldr	r2, [pc, #124]	; (8102708 <HAL_DMA_IRQHandler+0x1dc>)
 810268a:	4293      	cmp	r3, r2
 810268c:	d018      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	681b      	ldr	r3, [r3, #0]
 8102692:	4a1e      	ldr	r2, [pc, #120]	; (810270c <HAL_DMA_IRQHandler+0x1e0>)
 8102694:	4293      	cmp	r3, r2
 8102696:	d013      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 8102698:	687b      	ldr	r3, [r7, #4]
 810269a:	681b      	ldr	r3, [r3, #0]
 810269c:	4a1c      	ldr	r2, [pc, #112]	; (8102710 <HAL_DMA_IRQHandler+0x1e4>)
 810269e:	4293      	cmp	r3, r2
 81026a0:	d00e      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 81026a2:	687b      	ldr	r3, [r7, #4]
 81026a4:	681b      	ldr	r3, [r3, #0]
 81026a6:	4a1b      	ldr	r2, [pc, #108]	; (8102714 <HAL_DMA_IRQHandler+0x1e8>)
 81026a8:	4293      	cmp	r3, r2
 81026aa:	d009      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	4a19      	ldr	r2, [pc, #100]	; (8102718 <HAL_DMA_IRQHandler+0x1ec>)
 81026b2:	4293      	cmp	r3, r2
 81026b4:	d004      	beq.n	81026c0 <HAL_DMA_IRQHandler+0x194>
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	681b      	ldr	r3, [r3, #0]
 81026ba:	4a18      	ldr	r2, [pc, #96]	; (810271c <HAL_DMA_IRQHandler+0x1f0>)
 81026bc:	4293      	cmp	r3, r2
 81026be:	d12f      	bne.n	8102720 <HAL_DMA_IRQHandler+0x1f4>
 81026c0:	687b      	ldr	r3, [r7, #4]
 81026c2:	681b      	ldr	r3, [r3, #0]
 81026c4:	681b      	ldr	r3, [r3, #0]
 81026c6:	f003 0304 	and.w	r3, r3, #4
 81026ca:	2b00      	cmp	r3, #0
 81026cc:	bf14      	ite	ne
 81026ce:	2301      	movne	r3, #1
 81026d0:	2300      	moveq	r3, #0
 81026d2:	b2db      	uxtb	r3, r3
 81026d4:	e02e      	b.n	8102734 <HAL_DMA_IRQHandler+0x208>
 81026d6:	bf00      	nop
 81026d8:	10000000 	.word	0x10000000
 81026dc:	1b4e81b5 	.word	0x1b4e81b5
 81026e0:	40020010 	.word	0x40020010
 81026e4:	40020028 	.word	0x40020028
 81026e8:	40020040 	.word	0x40020040
 81026ec:	40020058 	.word	0x40020058
 81026f0:	40020070 	.word	0x40020070
 81026f4:	40020088 	.word	0x40020088
 81026f8:	400200a0 	.word	0x400200a0
 81026fc:	400200b8 	.word	0x400200b8
 8102700:	40020410 	.word	0x40020410
 8102704:	40020428 	.word	0x40020428
 8102708:	40020440 	.word	0x40020440
 810270c:	40020458 	.word	0x40020458
 8102710:	40020470 	.word	0x40020470
 8102714:	40020488 	.word	0x40020488
 8102718:	400204a0 	.word	0x400204a0
 810271c:	400204b8 	.word	0x400204b8
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	681b      	ldr	r3, [r3, #0]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	f003 0308 	and.w	r3, r3, #8
 810272a:	2b00      	cmp	r3, #0
 810272c:	bf14      	ite	ne
 810272e:	2301      	movne	r3, #1
 8102730:	2300      	moveq	r3, #0
 8102732:	b2db      	uxtb	r3, r3
 8102734:	2b00      	cmp	r3, #0
 8102736:	d015      	beq.n	8102764 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8102738:	687b      	ldr	r3, [r7, #4]
 810273a:	681b      	ldr	r3, [r3, #0]
 810273c:	681a      	ldr	r2, [r3, #0]
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	f022 0204 	bic.w	r2, r2, #4
 8102746:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810274c:	f003 031f 	and.w	r3, r3, #31
 8102750:	2208      	movs	r2, #8
 8102752:	409a      	lsls	r2, r3
 8102754:	6a3b      	ldr	r3, [r7, #32]
 8102756:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810275c:	f043 0201 	orr.w	r2, r3, #1
 8102760:	687b      	ldr	r3, [r7, #4]
 8102762:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102764:	687b      	ldr	r3, [r7, #4]
 8102766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102768:	f003 031f 	and.w	r3, r3, #31
 810276c:	69ba      	ldr	r2, [r7, #24]
 810276e:	fa22 f303 	lsr.w	r3, r2, r3
 8102772:	f003 0301 	and.w	r3, r3, #1
 8102776:	2b00      	cmp	r3, #0
 8102778:	d06e      	beq.n	8102858 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810277a:	687b      	ldr	r3, [r7, #4]
 810277c:	681b      	ldr	r3, [r3, #0]
 810277e:	4a69      	ldr	r2, [pc, #420]	; (8102924 <HAL_DMA_IRQHandler+0x3f8>)
 8102780:	4293      	cmp	r3, r2
 8102782:	d04a      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	681b      	ldr	r3, [r3, #0]
 8102788:	4a67      	ldr	r2, [pc, #412]	; (8102928 <HAL_DMA_IRQHandler+0x3fc>)
 810278a:	4293      	cmp	r3, r2
 810278c:	d045      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	681b      	ldr	r3, [r3, #0]
 8102792:	4a66      	ldr	r2, [pc, #408]	; (810292c <HAL_DMA_IRQHandler+0x400>)
 8102794:	4293      	cmp	r3, r2
 8102796:	d040      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	681b      	ldr	r3, [r3, #0]
 810279c:	4a64      	ldr	r2, [pc, #400]	; (8102930 <HAL_DMA_IRQHandler+0x404>)
 810279e:	4293      	cmp	r3, r2
 81027a0:	d03b      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	681b      	ldr	r3, [r3, #0]
 81027a6:	4a63      	ldr	r2, [pc, #396]	; (8102934 <HAL_DMA_IRQHandler+0x408>)
 81027a8:	4293      	cmp	r3, r2
 81027aa:	d036      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 81027ac:	687b      	ldr	r3, [r7, #4]
 81027ae:	681b      	ldr	r3, [r3, #0]
 81027b0:	4a61      	ldr	r2, [pc, #388]	; (8102938 <HAL_DMA_IRQHandler+0x40c>)
 81027b2:	4293      	cmp	r3, r2
 81027b4:	d031      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	681b      	ldr	r3, [r3, #0]
 81027ba:	4a60      	ldr	r2, [pc, #384]	; (810293c <HAL_DMA_IRQHandler+0x410>)
 81027bc:	4293      	cmp	r3, r2
 81027be:	d02c      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	681b      	ldr	r3, [r3, #0]
 81027c4:	4a5e      	ldr	r2, [pc, #376]	; (8102940 <HAL_DMA_IRQHandler+0x414>)
 81027c6:	4293      	cmp	r3, r2
 81027c8:	d027      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	681b      	ldr	r3, [r3, #0]
 81027ce:	4a5d      	ldr	r2, [pc, #372]	; (8102944 <HAL_DMA_IRQHandler+0x418>)
 81027d0:	4293      	cmp	r3, r2
 81027d2:	d022      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	681b      	ldr	r3, [r3, #0]
 81027d8:	4a5b      	ldr	r2, [pc, #364]	; (8102948 <HAL_DMA_IRQHandler+0x41c>)
 81027da:	4293      	cmp	r3, r2
 81027dc:	d01d      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	681b      	ldr	r3, [r3, #0]
 81027e2:	4a5a      	ldr	r2, [pc, #360]	; (810294c <HAL_DMA_IRQHandler+0x420>)
 81027e4:	4293      	cmp	r3, r2
 81027e6:	d018      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	681b      	ldr	r3, [r3, #0]
 81027ec:	4a58      	ldr	r2, [pc, #352]	; (8102950 <HAL_DMA_IRQHandler+0x424>)
 81027ee:	4293      	cmp	r3, r2
 81027f0:	d013      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	681b      	ldr	r3, [r3, #0]
 81027f6:	4a57      	ldr	r2, [pc, #348]	; (8102954 <HAL_DMA_IRQHandler+0x428>)
 81027f8:	4293      	cmp	r3, r2
 81027fa:	d00e      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	4a55      	ldr	r2, [pc, #340]	; (8102958 <HAL_DMA_IRQHandler+0x42c>)
 8102802:	4293      	cmp	r3, r2
 8102804:	d009      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	4a54      	ldr	r2, [pc, #336]	; (810295c <HAL_DMA_IRQHandler+0x430>)
 810280c:	4293      	cmp	r3, r2
 810280e:	d004      	beq.n	810281a <HAL_DMA_IRQHandler+0x2ee>
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	4a52      	ldr	r2, [pc, #328]	; (8102960 <HAL_DMA_IRQHandler+0x434>)
 8102816:	4293      	cmp	r3, r2
 8102818:	d10a      	bne.n	8102830 <HAL_DMA_IRQHandler+0x304>
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	695b      	ldr	r3, [r3, #20]
 8102820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102824:	2b00      	cmp	r3, #0
 8102826:	bf14      	ite	ne
 8102828:	2301      	movne	r3, #1
 810282a:	2300      	moveq	r3, #0
 810282c:	b2db      	uxtb	r3, r3
 810282e:	e003      	b.n	8102838 <HAL_DMA_IRQHandler+0x30c>
 8102830:	687b      	ldr	r3, [r7, #4]
 8102832:	681b      	ldr	r3, [r3, #0]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	2300      	movs	r3, #0
 8102838:	2b00      	cmp	r3, #0
 810283a:	d00d      	beq.n	8102858 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102840:	f003 031f 	and.w	r3, r3, #31
 8102844:	2201      	movs	r2, #1
 8102846:	409a      	lsls	r2, r3
 8102848:	6a3b      	ldr	r3, [r7, #32]
 810284a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102850:	f043 0202 	orr.w	r2, r3, #2
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102858:	687b      	ldr	r3, [r7, #4]
 810285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810285c:	f003 031f 	and.w	r3, r3, #31
 8102860:	2204      	movs	r2, #4
 8102862:	409a      	lsls	r2, r3
 8102864:	69bb      	ldr	r3, [r7, #24]
 8102866:	4013      	ands	r3, r2
 8102868:	2b00      	cmp	r3, #0
 810286a:	f000 808f 	beq.w	810298c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	4a2c      	ldr	r2, [pc, #176]	; (8102924 <HAL_DMA_IRQHandler+0x3f8>)
 8102874:	4293      	cmp	r3, r2
 8102876:	d04a      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 8102878:	687b      	ldr	r3, [r7, #4]
 810287a:	681b      	ldr	r3, [r3, #0]
 810287c:	4a2a      	ldr	r2, [pc, #168]	; (8102928 <HAL_DMA_IRQHandler+0x3fc>)
 810287e:	4293      	cmp	r3, r2
 8102880:	d045      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	681b      	ldr	r3, [r3, #0]
 8102886:	4a29      	ldr	r2, [pc, #164]	; (810292c <HAL_DMA_IRQHandler+0x400>)
 8102888:	4293      	cmp	r3, r2
 810288a:	d040      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	4a27      	ldr	r2, [pc, #156]	; (8102930 <HAL_DMA_IRQHandler+0x404>)
 8102892:	4293      	cmp	r3, r2
 8102894:	d03b      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	681b      	ldr	r3, [r3, #0]
 810289a:	4a26      	ldr	r2, [pc, #152]	; (8102934 <HAL_DMA_IRQHandler+0x408>)
 810289c:	4293      	cmp	r3, r2
 810289e:	d036      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	4a24      	ldr	r2, [pc, #144]	; (8102938 <HAL_DMA_IRQHandler+0x40c>)
 81028a6:	4293      	cmp	r3, r2
 81028a8:	d031      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	4a23      	ldr	r2, [pc, #140]	; (810293c <HAL_DMA_IRQHandler+0x410>)
 81028b0:	4293      	cmp	r3, r2
 81028b2:	d02c      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	681b      	ldr	r3, [r3, #0]
 81028b8:	4a21      	ldr	r2, [pc, #132]	; (8102940 <HAL_DMA_IRQHandler+0x414>)
 81028ba:	4293      	cmp	r3, r2
 81028bc:	d027      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	681b      	ldr	r3, [r3, #0]
 81028c2:	4a20      	ldr	r2, [pc, #128]	; (8102944 <HAL_DMA_IRQHandler+0x418>)
 81028c4:	4293      	cmp	r3, r2
 81028c6:	d022      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 81028c8:	687b      	ldr	r3, [r7, #4]
 81028ca:	681b      	ldr	r3, [r3, #0]
 81028cc:	4a1e      	ldr	r2, [pc, #120]	; (8102948 <HAL_DMA_IRQHandler+0x41c>)
 81028ce:	4293      	cmp	r3, r2
 81028d0:	d01d      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	4a1d      	ldr	r2, [pc, #116]	; (810294c <HAL_DMA_IRQHandler+0x420>)
 81028d8:	4293      	cmp	r3, r2
 81028da:	d018      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	681b      	ldr	r3, [r3, #0]
 81028e0:	4a1b      	ldr	r2, [pc, #108]	; (8102950 <HAL_DMA_IRQHandler+0x424>)
 81028e2:	4293      	cmp	r3, r2
 81028e4:	d013      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	681b      	ldr	r3, [r3, #0]
 81028ea:	4a1a      	ldr	r2, [pc, #104]	; (8102954 <HAL_DMA_IRQHandler+0x428>)
 81028ec:	4293      	cmp	r3, r2
 81028ee:	d00e      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	681b      	ldr	r3, [r3, #0]
 81028f4:	4a18      	ldr	r2, [pc, #96]	; (8102958 <HAL_DMA_IRQHandler+0x42c>)
 81028f6:	4293      	cmp	r3, r2
 81028f8:	d009      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	4a17      	ldr	r2, [pc, #92]	; (810295c <HAL_DMA_IRQHandler+0x430>)
 8102900:	4293      	cmp	r3, r2
 8102902:	d004      	beq.n	810290e <HAL_DMA_IRQHandler+0x3e2>
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	4a15      	ldr	r2, [pc, #84]	; (8102960 <HAL_DMA_IRQHandler+0x434>)
 810290a:	4293      	cmp	r3, r2
 810290c:	d12a      	bne.n	8102964 <HAL_DMA_IRQHandler+0x438>
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	681b      	ldr	r3, [r3, #0]
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	f003 0302 	and.w	r3, r3, #2
 8102918:	2b00      	cmp	r3, #0
 810291a:	bf14      	ite	ne
 810291c:	2301      	movne	r3, #1
 810291e:	2300      	moveq	r3, #0
 8102920:	b2db      	uxtb	r3, r3
 8102922:	e023      	b.n	810296c <HAL_DMA_IRQHandler+0x440>
 8102924:	40020010 	.word	0x40020010
 8102928:	40020028 	.word	0x40020028
 810292c:	40020040 	.word	0x40020040
 8102930:	40020058 	.word	0x40020058
 8102934:	40020070 	.word	0x40020070
 8102938:	40020088 	.word	0x40020088
 810293c:	400200a0 	.word	0x400200a0
 8102940:	400200b8 	.word	0x400200b8
 8102944:	40020410 	.word	0x40020410
 8102948:	40020428 	.word	0x40020428
 810294c:	40020440 	.word	0x40020440
 8102950:	40020458 	.word	0x40020458
 8102954:	40020470 	.word	0x40020470
 8102958:	40020488 	.word	0x40020488
 810295c:	400204a0 	.word	0x400204a0
 8102960:	400204b8 	.word	0x400204b8
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	681b      	ldr	r3, [r3, #0]
 8102968:	681b      	ldr	r3, [r3, #0]
 810296a:	2300      	movs	r3, #0
 810296c:	2b00      	cmp	r3, #0
 810296e:	d00d      	beq.n	810298c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102974:	f003 031f 	and.w	r3, r3, #31
 8102978:	2204      	movs	r2, #4
 810297a:	409a      	lsls	r2, r3
 810297c:	6a3b      	ldr	r3, [r7, #32]
 810297e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102984:	f043 0204 	orr.w	r2, r3, #4
 8102988:	687b      	ldr	r3, [r7, #4]
 810298a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102990:	f003 031f 	and.w	r3, r3, #31
 8102994:	2210      	movs	r2, #16
 8102996:	409a      	lsls	r2, r3
 8102998:	69bb      	ldr	r3, [r7, #24]
 810299a:	4013      	ands	r3, r2
 810299c:	2b00      	cmp	r3, #0
 810299e:	f000 80a6 	beq.w	8102aee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	4a85      	ldr	r2, [pc, #532]	; (8102bbc <HAL_DMA_IRQHandler+0x690>)
 81029a8:	4293      	cmp	r3, r2
 81029aa:	d04a      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	4a83      	ldr	r2, [pc, #524]	; (8102bc0 <HAL_DMA_IRQHandler+0x694>)
 81029b2:	4293      	cmp	r3, r2
 81029b4:	d045      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	4a82      	ldr	r2, [pc, #520]	; (8102bc4 <HAL_DMA_IRQHandler+0x698>)
 81029bc:	4293      	cmp	r3, r2
 81029be:	d040      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	4a80      	ldr	r2, [pc, #512]	; (8102bc8 <HAL_DMA_IRQHandler+0x69c>)
 81029c6:	4293      	cmp	r3, r2
 81029c8:	d03b      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	4a7f      	ldr	r2, [pc, #508]	; (8102bcc <HAL_DMA_IRQHandler+0x6a0>)
 81029d0:	4293      	cmp	r3, r2
 81029d2:	d036      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	4a7d      	ldr	r2, [pc, #500]	; (8102bd0 <HAL_DMA_IRQHandler+0x6a4>)
 81029da:	4293      	cmp	r3, r2
 81029dc:	d031      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 81029de:	687b      	ldr	r3, [r7, #4]
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	4a7c      	ldr	r2, [pc, #496]	; (8102bd4 <HAL_DMA_IRQHandler+0x6a8>)
 81029e4:	4293      	cmp	r3, r2
 81029e6:	d02c      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	4a7a      	ldr	r2, [pc, #488]	; (8102bd8 <HAL_DMA_IRQHandler+0x6ac>)
 81029ee:	4293      	cmp	r3, r2
 81029f0:	d027      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	681b      	ldr	r3, [r3, #0]
 81029f6:	4a79      	ldr	r2, [pc, #484]	; (8102bdc <HAL_DMA_IRQHandler+0x6b0>)
 81029f8:	4293      	cmp	r3, r2
 81029fa:	d022      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	4a77      	ldr	r2, [pc, #476]	; (8102be0 <HAL_DMA_IRQHandler+0x6b4>)
 8102a02:	4293      	cmp	r3, r2
 8102a04:	d01d      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	4a76      	ldr	r2, [pc, #472]	; (8102be4 <HAL_DMA_IRQHandler+0x6b8>)
 8102a0c:	4293      	cmp	r3, r2
 8102a0e:	d018      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	4a74      	ldr	r2, [pc, #464]	; (8102be8 <HAL_DMA_IRQHandler+0x6bc>)
 8102a16:	4293      	cmp	r3, r2
 8102a18:	d013      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	4a73      	ldr	r2, [pc, #460]	; (8102bec <HAL_DMA_IRQHandler+0x6c0>)
 8102a20:	4293      	cmp	r3, r2
 8102a22:	d00e      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	4a71      	ldr	r2, [pc, #452]	; (8102bf0 <HAL_DMA_IRQHandler+0x6c4>)
 8102a2a:	4293      	cmp	r3, r2
 8102a2c:	d009      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	4a70      	ldr	r2, [pc, #448]	; (8102bf4 <HAL_DMA_IRQHandler+0x6c8>)
 8102a34:	4293      	cmp	r3, r2
 8102a36:	d004      	beq.n	8102a42 <HAL_DMA_IRQHandler+0x516>
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	4a6e      	ldr	r2, [pc, #440]	; (8102bf8 <HAL_DMA_IRQHandler+0x6cc>)
 8102a3e:	4293      	cmp	r3, r2
 8102a40:	d10a      	bne.n	8102a58 <HAL_DMA_IRQHandler+0x52c>
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	681b      	ldr	r3, [r3, #0]
 8102a46:	681b      	ldr	r3, [r3, #0]
 8102a48:	f003 0308 	and.w	r3, r3, #8
 8102a4c:	2b00      	cmp	r3, #0
 8102a4e:	bf14      	ite	ne
 8102a50:	2301      	movne	r3, #1
 8102a52:	2300      	moveq	r3, #0
 8102a54:	b2db      	uxtb	r3, r3
 8102a56:	e009      	b.n	8102a6c <HAL_DMA_IRQHandler+0x540>
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	681b      	ldr	r3, [r3, #0]
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	f003 0304 	and.w	r3, r3, #4
 8102a62:	2b00      	cmp	r3, #0
 8102a64:	bf14      	ite	ne
 8102a66:	2301      	movne	r3, #1
 8102a68:	2300      	moveq	r3, #0
 8102a6a:	b2db      	uxtb	r3, r3
 8102a6c:	2b00      	cmp	r3, #0
 8102a6e:	d03e      	beq.n	8102aee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102a74:	f003 031f 	and.w	r3, r3, #31
 8102a78:	2210      	movs	r2, #16
 8102a7a:	409a      	lsls	r2, r3
 8102a7c:	6a3b      	ldr	r3, [r7, #32]
 8102a7e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102a80:	687b      	ldr	r3, [r7, #4]
 8102a82:	681b      	ldr	r3, [r3, #0]
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102a8a:	2b00      	cmp	r3, #0
 8102a8c:	d018      	beq.n	8102ac0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	681b      	ldr	r3, [r3, #0]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102a98:	2b00      	cmp	r3, #0
 8102a9a:	d108      	bne.n	8102aae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102aa0:	2b00      	cmp	r3, #0
 8102aa2:	d024      	beq.n	8102aee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102aa8:	6878      	ldr	r0, [r7, #4]
 8102aaa:	4798      	blx	r3
 8102aac:	e01f      	b.n	8102aee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102ab2:	2b00      	cmp	r3, #0
 8102ab4:	d01b      	beq.n	8102aee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102aba:	6878      	ldr	r0, [r7, #4]
 8102abc:	4798      	blx	r3
 8102abe:	e016      	b.n	8102aee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	681b      	ldr	r3, [r3, #0]
 8102ac4:	681b      	ldr	r3, [r3, #0]
 8102ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102aca:	2b00      	cmp	r3, #0
 8102acc:	d107      	bne.n	8102ade <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	681b      	ldr	r3, [r3, #0]
 8102ad2:	681a      	ldr	r2, [r3, #0]
 8102ad4:	687b      	ldr	r3, [r7, #4]
 8102ad6:	681b      	ldr	r3, [r3, #0]
 8102ad8:	f022 0208 	bic.w	r2, r2, #8
 8102adc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8102ade:	687b      	ldr	r3, [r7, #4]
 8102ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ae2:	2b00      	cmp	r3, #0
 8102ae4:	d003      	beq.n	8102aee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102aea:	6878      	ldr	r0, [r7, #4]
 8102aec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102af2:	f003 031f 	and.w	r3, r3, #31
 8102af6:	2220      	movs	r2, #32
 8102af8:	409a      	lsls	r2, r3
 8102afa:	69bb      	ldr	r3, [r7, #24]
 8102afc:	4013      	ands	r3, r2
 8102afe:	2b00      	cmp	r3, #0
 8102b00:	f000 8110 	beq.w	8102d24 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	681b      	ldr	r3, [r3, #0]
 8102b08:	4a2c      	ldr	r2, [pc, #176]	; (8102bbc <HAL_DMA_IRQHandler+0x690>)
 8102b0a:	4293      	cmp	r3, r2
 8102b0c:	d04a      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	4a2b      	ldr	r2, [pc, #172]	; (8102bc0 <HAL_DMA_IRQHandler+0x694>)
 8102b14:	4293      	cmp	r3, r2
 8102b16:	d045      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	681b      	ldr	r3, [r3, #0]
 8102b1c:	4a29      	ldr	r2, [pc, #164]	; (8102bc4 <HAL_DMA_IRQHandler+0x698>)
 8102b1e:	4293      	cmp	r3, r2
 8102b20:	d040      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	4a28      	ldr	r2, [pc, #160]	; (8102bc8 <HAL_DMA_IRQHandler+0x69c>)
 8102b28:	4293      	cmp	r3, r2
 8102b2a:	d03b      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b2c:	687b      	ldr	r3, [r7, #4]
 8102b2e:	681b      	ldr	r3, [r3, #0]
 8102b30:	4a26      	ldr	r2, [pc, #152]	; (8102bcc <HAL_DMA_IRQHandler+0x6a0>)
 8102b32:	4293      	cmp	r3, r2
 8102b34:	d036      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b36:	687b      	ldr	r3, [r7, #4]
 8102b38:	681b      	ldr	r3, [r3, #0]
 8102b3a:	4a25      	ldr	r2, [pc, #148]	; (8102bd0 <HAL_DMA_IRQHandler+0x6a4>)
 8102b3c:	4293      	cmp	r3, r2
 8102b3e:	d031      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	681b      	ldr	r3, [r3, #0]
 8102b44:	4a23      	ldr	r2, [pc, #140]	; (8102bd4 <HAL_DMA_IRQHandler+0x6a8>)
 8102b46:	4293      	cmp	r3, r2
 8102b48:	d02c      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b4a:	687b      	ldr	r3, [r7, #4]
 8102b4c:	681b      	ldr	r3, [r3, #0]
 8102b4e:	4a22      	ldr	r2, [pc, #136]	; (8102bd8 <HAL_DMA_IRQHandler+0x6ac>)
 8102b50:	4293      	cmp	r3, r2
 8102b52:	d027      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	4a20      	ldr	r2, [pc, #128]	; (8102bdc <HAL_DMA_IRQHandler+0x6b0>)
 8102b5a:	4293      	cmp	r3, r2
 8102b5c:	d022      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b5e:	687b      	ldr	r3, [r7, #4]
 8102b60:	681b      	ldr	r3, [r3, #0]
 8102b62:	4a1f      	ldr	r2, [pc, #124]	; (8102be0 <HAL_DMA_IRQHandler+0x6b4>)
 8102b64:	4293      	cmp	r3, r2
 8102b66:	d01d      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b68:	687b      	ldr	r3, [r7, #4]
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	4a1d      	ldr	r2, [pc, #116]	; (8102be4 <HAL_DMA_IRQHandler+0x6b8>)
 8102b6e:	4293      	cmp	r3, r2
 8102b70:	d018      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	4a1c      	ldr	r2, [pc, #112]	; (8102be8 <HAL_DMA_IRQHandler+0x6bc>)
 8102b78:	4293      	cmp	r3, r2
 8102b7a:	d013      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b7c:	687b      	ldr	r3, [r7, #4]
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	4a1a      	ldr	r2, [pc, #104]	; (8102bec <HAL_DMA_IRQHandler+0x6c0>)
 8102b82:	4293      	cmp	r3, r2
 8102b84:	d00e      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	4a19      	ldr	r2, [pc, #100]	; (8102bf0 <HAL_DMA_IRQHandler+0x6c4>)
 8102b8c:	4293      	cmp	r3, r2
 8102b8e:	d009      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	681b      	ldr	r3, [r3, #0]
 8102b94:	4a17      	ldr	r2, [pc, #92]	; (8102bf4 <HAL_DMA_IRQHandler+0x6c8>)
 8102b96:	4293      	cmp	r3, r2
 8102b98:	d004      	beq.n	8102ba4 <HAL_DMA_IRQHandler+0x678>
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	4a16      	ldr	r2, [pc, #88]	; (8102bf8 <HAL_DMA_IRQHandler+0x6cc>)
 8102ba0:	4293      	cmp	r3, r2
 8102ba2:	d12b      	bne.n	8102bfc <HAL_DMA_IRQHandler+0x6d0>
 8102ba4:	687b      	ldr	r3, [r7, #4]
 8102ba6:	681b      	ldr	r3, [r3, #0]
 8102ba8:	681b      	ldr	r3, [r3, #0]
 8102baa:	f003 0310 	and.w	r3, r3, #16
 8102bae:	2b00      	cmp	r3, #0
 8102bb0:	bf14      	ite	ne
 8102bb2:	2301      	movne	r3, #1
 8102bb4:	2300      	moveq	r3, #0
 8102bb6:	b2db      	uxtb	r3, r3
 8102bb8:	e02a      	b.n	8102c10 <HAL_DMA_IRQHandler+0x6e4>
 8102bba:	bf00      	nop
 8102bbc:	40020010 	.word	0x40020010
 8102bc0:	40020028 	.word	0x40020028
 8102bc4:	40020040 	.word	0x40020040
 8102bc8:	40020058 	.word	0x40020058
 8102bcc:	40020070 	.word	0x40020070
 8102bd0:	40020088 	.word	0x40020088
 8102bd4:	400200a0 	.word	0x400200a0
 8102bd8:	400200b8 	.word	0x400200b8
 8102bdc:	40020410 	.word	0x40020410
 8102be0:	40020428 	.word	0x40020428
 8102be4:	40020440 	.word	0x40020440
 8102be8:	40020458 	.word	0x40020458
 8102bec:	40020470 	.word	0x40020470
 8102bf0:	40020488 	.word	0x40020488
 8102bf4:	400204a0 	.word	0x400204a0
 8102bf8:	400204b8 	.word	0x400204b8
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	f003 0302 	and.w	r3, r3, #2
 8102c06:	2b00      	cmp	r3, #0
 8102c08:	bf14      	ite	ne
 8102c0a:	2301      	movne	r3, #1
 8102c0c:	2300      	moveq	r3, #0
 8102c0e:	b2db      	uxtb	r3, r3
 8102c10:	2b00      	cmp	r3, #0
 8102c12:	f000 8087 	beq.w	8102d24 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102c16:	687b      	ldr	r3, [r7, #4]
 8102c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c1a:	f003 031f 	and.w	r3, r3, #31
 8102c1e:	2220      	movs	r2, #32
 8102c20:	409a      	lsls	r2, r3
 8102c22:	6a3b      	ldr	r3, [r7, #32]
 8102c24:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8102c26:	687b      	ldr	r3, [r7, #4]
 8102c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102c2c:	b2db      	uxtb	r3, r3
 8102c2e:	2b04      	cmp	r3, #4
 8102c30:	d139      	bne.n	8102ca6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	681b      	ldr	r3, [r3, #0]
 8102c36:	681a      	ldr	r2, [r3, #0]
 8102c38:	687b      	ldr	r3, [r7, #4]
 8102c3a:	681b      	ldr	r3, [r3, #0]
 8102c3c:	f022 0216 	bic.w	r2, r2, #22
 8102c40:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	695a      	ldr	r2, [r3, #20]
 8102c48:	687b      	ldr	r3, [r7, #4]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102c50:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8102c52:	687b      	ldr	r3, [r7, #4]
 8102c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c56:	2b00      	cmp	r3, #0
 8102c58:	d103      	bne.n	8102c62 <HAL_DMA_IRQHandler+0x736>
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102c5e:	2b00      	cmp	r3, #0
 8102c60:	d007      	beq.n	8102c72 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	681a      	ldr	r2, [r3, #0]
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	681b      	ldr	r3, [r3, #0]
 8102c6c:	f022 0208 	bic.w	r2, r2, #8
 8102c70:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102c72:	687b      	ldr	r3, [r7, #4]
 8102c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c76:	f003 031f 	and.w	r3, r3, #31
 8102c7a:	223f      	movs	r2, #63	; 0x3f
 8102c7c:	409a      	lsls	r2, r3
 8102c7e:	6a3b      	ldr	r3, [r7, #32]
 8102c80:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	2201      	movs	r2, #1
 8102c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8102c8a:	687b      	ldr	r3, [r7, #4]
 8102c8c:	2200      	movs	r2, #0
 8102c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102c96:	2b00      	cmp	r3, #0
 8102c98:	f000 834a 	beq.w	8103330 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102ca0:	6878      	ldr	r0, [r7, #4]
 8102ca2:	4798      	blx	r3
          }
          return;
 8102ca4:	e344      	b.n	8103330 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102ca6:	687b      	ldr	r3, [r7, #4]
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102cb0:	2b00      	cmp	r3, #0
 8102cb2:	d018      	beq.n	8102ce6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	681b      	ldr	r3, [r3, #0]
 8102cb8:	681b      	ldr	r3, [r3, #0]
 8102cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102cbe:	2b00      	cmp	r3, #0
 8102cc0:	d108      	bne.n	8102cd4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8102cc2:	687b      	ldr	r3, [r7, #4]
 8102cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102cc6:	2b00      	cmp	r3, #0
 8102cc8:	d02c      	beq.n	8102d24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102cce:	6878      	ldr	r0, [r7, #4]
 8102cd0:	4798      	blx	r3
 8102cd2:	e027      	b.n	8102d24 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102cd8:	2b00      	cmp	r3, #0
 8102cda:	d023      	beq.n	8102d24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8102cdc:	687b      	ldr	r3, [r7, #4]
 8102cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102ce0:	6878      	ldr	r0, [r7, #4]
 8102ce2:	4798      	blx	r3
 8102ce4:	e01e      	b.n	8102d24 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	681b      	ldr	r3, [r3, #0]
 8102cea:	681b      	ldr	r3, [r3, #0]
 8102cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102cf0:	2b00      	cmp	r3, #0
 8102cf2:	d10f      	bne.n	8102d14 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8102cf4:	687b      	ldr	r3, [r7, #4]
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	681a      	ldr	r2, [r3, #0]
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	f022 0210 	bic.w	r2, r2, #16
 8102d02:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	2201      	movs	r2, #1
 8102d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8102d0c:	687b      	ldr	r3, [r7, #4]
 8102d0e:	2200      	movs	r2, #0
 8102d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d18:	2b00      	cmp	r3, #0
 8102d1a:	d003      	beq.n	8102d24 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d20:	6878      	ldr	r0, [r7, #4]
 8102d22:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d28:	2b00      	cmp	r3, #0
 8102d2a:	f000 8306 	beq.w	810333a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d32:	f003 0301 	and.w	r3, r3, #1
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	f000 8088 	beq.w	8102e4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	2204      	movs	r2, #4
 8102d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	4a7a      	ldr	r2, [pc, #488]	; (8102f34 <HAL_DMA_IRQHandler+0xa08>)
 8102d4a:	4293      	cmp	r3, r2
 8102d4c:	d04a      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102d4e:	687b      	ldr	r3, [r7, #4]
 8102d50:	681b      	ldr	r3, [r3, #0]
 8102d52:	4a79      	ldr	r2, [pc, #484]	; (8102f38 <HAL_DMA_IRQHandler+0xa0c>)
 8102d54:	4293      	cmp	r3, r2
 8102d56:	d045      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102d58:	687b      	ldr	r3, [r7, #4]
 8102d5a:	681b      	ldr	r3, [r3, #0]
 8102d5c:	4a77      	ldr	r2, [pc, #476]	; (8102f3c <HAL_DMA_IRQHandler+0xa10>)
 8102d5e:	4293      	cmp	r3, r2
 8102d60:	d040      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102d62:	687b      	ldr	r3, [r7, #4]
 8102d64:	681b      	ldr	r3, [r3, #0]
 8102d66:	4a76      	ldr	r2, [pc, #472]	; (8102f40 <HAL_DMA_IRQHandler+0xa14>)
 8102d68:	4293      	cmp	r3, r2
 8102d6a:	d03b      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	681b      	ldr	r3, [r3, #0]
 8102d70:	4a74      	ldr	r2, [pc, #464]	; (8102f44 <HAL_DMA_IRQHandler+0xa18>)
 8102d72:	4293      	cmp	r3, r2
 8102d74:	d036      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	681b      	ldr	r3, [r3, #0]
 8102d7a:	4a73      	ldr	r2, [pc, #460]	; (8102f48 <HAL_DMA_IRQHandler+0xa1c>)
 8102d7c:	4293      	cmp	r3, r2
 8102d7e:	d031      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102d80:	687b      	ldr	r3, [r7, #4]
 8102d82:	681b      	ldr	r3, [r3, #0]
 8102d84:	4a71      	ldr	r2, [pc, #452]	; (8102f4c <HAL_DMA_IRQHandler+0xa20>)
 8102d86:	4293      	cmp	r3, r2
 8102d88:	d02c      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102d8a:	687b      	ldr	r3, [r7, #4]
 8102d8c:	681b      	ldr	r3, [r3, #0]
 8102d8e:	4a70      	ldr	r2, [pc, #448]	; (8102f50 <HAL_DMA_IRQHandler+0xa24>)
 8102d90:	4293      	cmp	r3, r2
 8102d92:	d027      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	4a6e      	ldr	r2, [pc, #440]	; (8102f54 <HAL_DMA_IRQHandler+0xa28>)
 8102d9a:	4293      	cmp	r3, r2
 8102d9c:	d022      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102d9e:	687b      	ldr	r3, [r7, #4]
 8102da0:	681b      	ldr	r3, [r3, #0]
 8102da2:	4a6d      	ldr	r2, [pc, #436]	; (8102f58 <HAL_DMA_IRQHandler+0xa2c>)
 8102da4:	4293      	cmp	r3, r2
 8102da6:	d01d      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	681b      	ldr	r3, [r3, #0]
 8102dac:	4a6b      	ldr	r2, [pc, #428]	; (8102f5c <HAL_DMA_IRQHandler+0xa30>)
 8102dae:	4293      	cmp	r3, r2
 8102db0:	d018      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102db2:	687b      	ldr	r3, [r7, #4]
 8102db4:	681b      	ldr	r3, [r3, #0]
 8102db6:	4a6a      	ldr	r2, [pc, #424]	; (8102f60 <HAL_DMA_IRQHandler+0xa34>)
 8102db8:	4293      	cmp	r3, r2
 8102dba:	d013      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102dbc:	687b      	ldr	r3, [r7, #4]
 8102dbe:	681b      	ldr	r3, [r3, #0]
 8102dc0:	4a68      	ldr	r2, [pc, #416]	; (8102f64 <HAL_DMA_IRQHandler+0xa38>)
 8102dc2:	4293      	cmp	r3, r2
 8102dc4:	d00e      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	681b      	ldr	r3, [r3, #0]
 8102dca:	4a67      	ldr	r2, [pc, #412]	; (8102f68 <HAL_DMA_IRQHandler+0xa3c>)
 8102dcc:	4293      	cmp	r3, r2
 8102dce:	d009      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	4a65      	ldr	r2, [pc, #404]	; (8102f6c <HAL_DMA_IRQHandler+0xa40>)
 8102dd6:	4293      	cmp	r3, r2
 8102dd8:	d004      	beq.n	8102de4 <HAL_DMA_IRQHandler+0x8b8>
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	681b      	ldr	r3, [r3, #0]
 8102dde:	4a64      	ldr	r2, [pc, #400]	; (8102f70 <HAL_DMA_IRQHandler+0xa44>)
 8102de0:	4293      	cmp	r3, r2
 8102de2:	d108      	bne.n	8102df6 <HAL_DMA_IRQHandler+0x8ca>
 8102de4:	687b      	ldr	r3, [r7, #4]
 8102de6:	681b      	ldr	r3, [r3, #0]
 8102de8:	681a      	ldr	r2, [r3, #0]
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	f022 0201 	bic.w	r2, r2, #1
 8102df2:	601a      	str	r2, [r3, #0]
 8102df4:	e007      	b.n	8102e06 <HAL_DMA_IRQHandler+0x8da>
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	681b      	ldr	r3, [r3, #0]
 8102dfa:	681a      	ldr	r2, [r3, #0]
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	681b      	ldr	r3, [r3, #0]
 8102e00:	f022 0201 	bic.w	r2, r2, #1
 8102e04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8102e06:	68fb      	ldr	r3, [r7, #12]
 8102e08:	3301      	adds	r3, #1
 8102e0a:	60fb      	str	r3, [r7, #12]
 8102e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102e0e:	429a      	cmp	r2, r3
 8102e10:	d307      	bcc.n	8102e22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	681b      	ldr	r3, [r3, #0]
 8102e18:	f003 0301 	and.w	r3, r3, #1
 8102e1c:	2b00      	cmp	r3, #0
 8102e1e:	d1f2      	bne.n	8102e06 <HAL_DMA_IRQHandler+0x8da>
 8102e20:	e000      	b.n	8102e24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8102e22:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	f003 0301 	and.w	r3, r3, #1
 8102e2e:	2b00      	cmp	r3, #0
 8102e30:	d004      	beq.n	8102e3c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8102e32:	687b      	ldr	r3, [r7, #4]
 8102e34:	2203      	movs	r2, #3
 8102e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8102e3a:	e003      	b.n	8102e44 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	2201      	movs	r2, #1
 8102e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	2200      	movs	r2, #0
 8102e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102e50:	2b00      	cmp	r3, #0
 8102e52:	f000 8272 	beq.w	810333a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102e5a:	6878      	ldr	r0, [r7, #4]
 8102e5c:	4798      	blx	r3
 8102e5e:	e26c      	b.n	810333a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	681b      	ldr	r3, [r3, #0]
 8102e64:	4a43      	ldr	r2, [pc, #268]	; (8102f74 <HAL_DMA_IRQHandler+0xa48>)
 8102e66:	4293      	cmp	r3, r2
 8102e68:	d022      	beq.n	8102eb0 <HAL_DMA_IRQHandler+0x984>
 8102e6a:	687b      	ldr	r3, [r7, #4]
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	4a42      	ldr	r2, [pc, #264]	; (8102f78 <HAL_DMA_IRQHandler+0xa4c>)
 8102e70:	4293      	cmp	r3, r2
 8102e72:	d01d      	beq.n	8102eb0 <HAL_DMA_IRQHandler+0x984>
 8102e74:	687b      	ldr	r3, [r7, #4]
 8102e76:	681b      	ldr	r3, [r3, #0]
 8102e78:	4a40      	ldr	r2, [pc, #256]	; (8102f7c <HAL_DMA_IRQHandler+0xa50>)
 8102e7a:	4293      	cmp	r3, r2
 8102e7c:	d018      	beq.n	8102eb0 <HAL_DMA_IRQHandler+0x984>
 8102e7e:	687b      	ldr	r3, [r7, #4]
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	4a3f      	ldr	r2, [pc, #252]	; (8102f80 <HAL_DMA_IRQHandler+0xa54>)
 8102e84:	4293      	cmp	r3, r2
 8102e86:	d013      	beq.n	8102eb0 <HAL_DMA_IRQHandler+0x984>
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	4a3d      	ldr	r2, [pc, #244]	; (8102f84 <HAL_DMA_IRQHandler+0xa58>)
 8102e8e:	4293      	cmp	r3, r2
 8102e90:	d00e      	beq.n	8102eb0 <HAL_DMA_IRQHandler+0x984>
 8102e92:	687b      	ldr	r3, [r7, #4]
 8102e94:	681b      	ldr	r3, [r3, #0]
 8102e96:	4a3c      	ldr	r2, [pc, #240]	; (8102f88 <HAL_DMA_IRQHandler+0xa5c>)
 8102e98:	4293      	cmp	r3, r2
 8102e9a:	d009      	beq.n	8102eb0 <HAL_DMA_IRQHandler+0x984>
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	681b      	ldr	r3, [r3, #0]
 8102ea0:	4a3a      	ldr	r2, [pc, #232]	; (8102f8c <HAL_DMA_IRQHandler+0xa60>)
 8102ea2:	4293      	cmp	r3, r2
 8102ea4:	d004      	beq.n	8102eb0 <HAL_DMA_IRQHandler+0x984>
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	681b      	ldr	r3, [r3, #0]
 8102eaa:	4a39      	ldr	r2, [pc, #228]	; (8102f90 <HAL_DMA_IRQHandler+0xa64>)
 8102eac:	4293      	cmp	r3, r2
 8102eae:	d101      	bne.n	8102eb4 <HAL_DMA_IRQHandler+0x988>
 8102eb0:	2301      	movs	r3, #1
 8102eb2:	e000      	b.n	8102eb6 <HAL_DMA_IRQHandler+0x98a>
 8102eb4:	2300      	movs	r3, #0
 8102eb6:	2b00      	cmp	r3, #0
 8102eb8:	f000 823f 	beq.w	810333a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	681b      	ldr	r3, [r3, #0]
 8102ec2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8102ec4:	687b      	ldr	r3, [r7, #4]
 8102ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ec8:	f003 031f 	and.w	r3, r3, #31
 8102ecc:	2204      	movs	r2, #4
 8102ece:	409a      	lsls	r2, r3
 8102ed0:	697b      	ldr	r3, [r7, #20]
 8102ed2:	4013      	ands	r3, r2
 8102ed4:	2b00      	cmp	r3, #0
 8102ed6:	f000 80cd 	beq.w	8103074 <HAL_DMA_IRQHandler+0xb48>
 8102eda:	693b      	ldr	r3, [r7, #16]
 8102edc:	f003 0304 	and.w	r3, r3, #4
 8102ee0:	2b00      	cmp	r3, #0
 8102ee2:	f000 80c7 	beq.w	8103074 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102eea:	f003 031f 	and.w	r3, r3, #31
 8102eee:	2204      	movs	r2, #4
 8102ef0:	409a      	lsls	r2, r3
 8102ef2:	69fb      	ldr	r3, [r7, #28]
 8102ef4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102ef6:	693b      	ldr	r3, [r7, #16]
 8102ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102efc:	2b00      	cmp	r3, #0
 8102efe:	d049      	beq.n	8102f94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8102f00:	693b      	ldr	r3, [r7, #16]
 8102f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102f06:	2b00      	cmp	r3, #0
 8102f08:	d109      	bne.n	8102f1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f0e:	2b00      	cmp	r3, #0
 8102f10:	f000 8210 	beq.w	8103334 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f18:	6878      	ldr	r0, [r7, #4]
 8102f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102f1c:	e20a      	b.n	8103334 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f22:	2b00      	cmp	r3, #0
 8102f24:	f000 8206 	beq.w	8103334 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f2c:	6878      	ldr	r0, [r7, #4]
 8102f2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102f30:	e200      	b.n	8103334 <HAL_DMA_IRQHandler+0xe08>
 8102f32:	bf00      	nop
 8102f34:	40020010 	.word	0x40020010
 8102f38:	40020028 	.word	0x40020028
 8102f3c:	40020040 	.word	0x40020040
 8102f40:	40020058 	.word	0x40020058
 8102f44:	40020070 	.word	0x40020070
 8102f48:	40020088 	.word	0x40020088
 8102f4c:	400200a0 	.word	0x400200a0
 8102f50:	400200b8 	.word	0x400200b8
 8102f54:	40020410 	.word	0x40020410
 8102f58:	40020428 	.word	0x40020428
 8102f5c:	40020440 	.word	0x40020440
 8102f60:	40020458 	.word	0x40020458
 8102f64:	40020470 	.word	0x40020470
 8102f68:	40020488 	.word	0x40020488
 8102f6c:	400204a0 	.word	0x400204a0
 8102f70:	400204b8 	.word	0x400204b8
 8102f74:	58025408 	.word	0x58025408
 8102f78:	5802541c 	.word	0x5802541c
 8102f7c:	58025430 	.word	0x58025430
 8102f80:	58025444 	.word	0x58025444
 8102f84:	58025458 	.word	0x58025458
 8102f88:	5802546c 	.word	0x5802546c
 8102f8c:	58025480 	.word	0x58025480
 8102f90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8102f94:	693b      	ldr	r3, [r7, #16]
 8102f96:	f003 0320 	and.w	r3, r3, #32
 8102f9a:	2b00      	cmp	r3, #0
 8102f9c:	d160      	bne.n	8103060 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	681b      	ldr	r3, [r3, #0]
 8102fa2:	4a7f      	ldr	r2, [pc, #508]	; (81031a0 <HAL_DMA_IRQHandler+0xc74>)
 8102fa4:	4293      	cmp	r3, r2
 8102fa6:	d04a      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8102fa8:	687b      	ldr	r3, [r7, #4]
 8102faa:	681b      	ldr	r3, [r3, #0]
 8102fac:	4a7d      	ldr	r2, [pc, #500]	; (81031a4 <HAL_DMA_IRQHandler+0xc78>)
 8102fae:	4293      	cmp	r3, r2
 8102fb0:	d045      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8102fb2:	687b      	ldr	r3, [r7, #4]
 8102fb4:	681b      	ldr	r3, [r3, #0]
 8102fb6:	4a7c      	ldr	r2, [pc, #496]	; (81031a8 <HAL_DMA_IRQHandler+0xc7c>)
 8102fb8:	4293      	cmp	r3, r2
 8102fba:	d040      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	681b      	ldr	r3, [r3, #0]
 8102fc0:	4a7a      	ldr	r2, [pc, #488]	; (81031ac <HAL_DMA_IRQHandler+0xc80>)
 8102fc2:	4293      	cmp	r3, r2
 8102fc4:	d03b      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8102fc6:	687b      	ldr	r3, [r7, #4]
 8102fc8:	681b      	ldr	r3, [r3, #0]
 8102fca:	4a79      	ldr	r2, [pc, #484]	; (81031b0 <HAL_DMA_IRQHandler+0xc84>)
 8102fcc:	4293      	cmp	r3, r2
 8102fce:	d036      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	4a77      	ldr	r2, [pc, #476]	; (81031b4 <HAL_DMA_IRQHandler+0xc88>)
 8102fd6:	4293      	cmp	r3, r2
 8102fd8:	d031      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	4a76      	ldr	r2, [pc, #472]	; (81031b8 <HAL_DMA_IRQHandler+0xc8c>)
 8102fe0:	4293      	cmp	r3, r2
 8102fe2:	d02c      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	681b      	ldr	r3, [r3, #0]
 8102fe8:	4a74      	ldr	r2, [pc, #464]	; (81031bc <HAL_DMA_IRQHandler+0xc90>)
 8102fea:	4293      	cmp	r3, r2
 8102fec:	d027      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	4a73      	ldr	r2, [pc, #460]	; (81031c0 <HAL_DMA_IRQHandler+0xc94>)
 8102ff4:	4293      	cmp	r3, r2
 8102ff6:	d022      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	4a71      	ldr	r2, [pc, #452]	; (81031c4 <HAL_DMA_IRQHandler+0xc98>)
 8102ffe:	4293      	cmp	r3, r2
 8103000:	d01d      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	4a70      	ldr	r2, [pc, #448]	; (81031c8 <HAL_DMA_IRQHandler+0xc9c>)
 8103008:	4293      	cmp	r3, r2
 810300a:	d018      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	4a6e      	ldr	r2, [pc, #440]	; (81031cc <HAL_DMA_IRQHandler+0xca0>)
 8103012:	4293      	cmp	r3, r2
 8103014:	d013      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	4a6d      	ldr	r2, [pc, #436]	; (81031d0 <HAL_DMA_IRQHandler+0xca4>)
 810301c:	4293      	cmp	r3, r2
 810301e:	d00e      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	4a6b      	ldr	r2, [pc, #428]	; (81031d4 <HAL_DMA_IRQHandler+0xca8>)
 8103026:	4293      	cmp	r3, r2
 8103028:	d009      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	681b      	ldr	r3, [r3, #0]
 810302e:	4a6a      	ldr	r2, [pc, #424]	; (81031d8 <HAL_DMA_IRQHandler+0xcac>)
 8103030:	4293      	cmp	r3, r2
 8103032:	d004      	beq.n	810303e <HAL_DMA_IRQHandler+0xb12>
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	4a68      	ldr	r2, [pc, #416]	; (81031dc <HAL_DMA_IRQHandler+0xcb0>)
 810303a:	4293      	cmp	r3, r2
 810303c:	d108      	bne.n	8103050 <HAL_DMA_IRQHandler+0xb24>
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	681a      	ldr	r2, [r3, #0]
 8103044:	687b      	ldr	r3, [r7, #4]
 8103046:	681b      	ldr	r3, [r3, #0]
 8103048:	f022 0208 	bic.w	r2, r2, #8
 810304c:	601a      	str	r2, [r3, #0]
 810304e:	e007      	b.n	8103060 <HAL_DMA_IRQHandler+0xb34>
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	681b      	ldr	r3, [r3, #0]
 8103054:	681a      	ldr	r2, [r3, #0]
 8103056:	687b      	ldr	r3, [r7, #4]
 8103058:	681b      	ldr	r3, [r3, #0]
 810305a:	f022 0204 	bic.w	r2, r2, #4
 810305e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103064:	2b00      	cmp	r3, #0
 8103066:	f000 8165 	beq.w	8103334 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810306a:	687b      	ldr	r3, [r7, #4]
 810306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810306e:	6878      	ldr	r0, [r7, #4]
 8103070:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103072:	e15f      	b.n	8103334 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103078:	f003 031f 	and.w	r3, r3, #31
 810307c:	2202      	movs	r2, #2
 810307e:	409a      	lsls	r2, r3
 8103080:	697b      	ldr	r3, [r7, #20]
 8103082:	4013      	ands	r3, r2
 8103084:	2b00      	cmp	r3, #0
 8103086:	f000 80c5 	beq.w	8103214 <HAL_DMA_IRQHandler+0xce8>
 810308a:	693b      	ldr	r3, [r7, #16]
 810308c:	f003 0302 	and.w	r3, r3, #2
 8103090:	2b00      	cmp	r3, #0
 8103092:	f000 80bf 	beq.w	8103214 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810309a:	f003 031f 	and.w	r3, r3, #31
 810309e:	2202      	movs	r2, #2
 81030a0:	409a      	lsls	r2, r3
 81030a2:	69fb      	ldr	r3, [r7, #28]
 81030a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81030a6:	693b      	ldr	r3, [r7, #16]
 81030a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81030ac:	2b00      	cmp	r3, #0
 81030ae:	d018      	beq.n	81030e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81030b0:	693b      	ldr	r3, [r7, #16]
 81030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81030b6:	2b00      	cmp	r3, #0
 81030b8:	d109      	bne.n	81030ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81030be:	2b00      	cmp	r3, #0
 81030c0:	f000 813a 	beq.w	8103338 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81030c8:	6878      	ldr	r0, [r7, #4]
 81030ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81030cc:	e134      	b.n	8103338 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81030d2:	2b00      	cmp	r3, #0
 81030d4:	f000 8130 	beq.w	8103338 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81030dc:	6878      	ldr	r0, [r7, #4]
 81030de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81030e0:	e12a      	b.n	8103338 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81030e2:	693b      	ldr	r3, [r7, #16]
 81030e4:	f003 0320 	and.w	r3, r3, #32
 81030e8:	2b00      	cmp	r3, #0
 81030ea:	f040 8089 	bne.w	8103200 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	681b      	ldr	r3, [r3, #0]
 81030f2:	4a2b      	ldr	r2, [pc, #172]	; (81031a0 <HAL_DMA_IRQHandler+0xc74>)
 81030f4:	4293      	cmp	r3, r2
 81030f6:	d04a      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	681b      	ldr	r3, [r3, #0]
 81030fc:	4a29      	ldr	r2, [pc, #164]	; (81031a4 <HAL_DMA_IRQHandler+0xc78>)
 81030fe:	4293      	cmp	r3, r2
 8103100:	d045      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	4a28      	ldr	r2, [pc, #160]	; (81031a8 <HAL_DMA_IRQHandler+0xc7c>)
 8103108:	4293      	cmp	r3, r2
 810310a:	d040      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	681b      	ldr	r3, [r3, #0]
 8103110:	4a26      	ldr	r2, [pc, #152]	; (81031ac <HAL_DMA_IRQHandler+0xc80>)
 8103112:	4293      	cmp	r3, r2
 8103114:	d03b      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	4a25      	ldr	r2, [pc, #148]	; (81031b0 <HAL_DMA_IRQHandler+0xc84>)
 810311c:	4293      	cmp	r3, r2
 810311e:	d036      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	681b      	ldr	r3, [r3, #0]
 8103124:	4a23      	ldr	r2, [pc, #140]	; (81031b4 <HAL_DMA_IRQHandler+0xc88>)
 8103126:	4293      	cmp	r3, r2
 8103128:	d031      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	681b      	ldr	r3, [r3, #0]
 810312e:	4a22      	ldr	r2, [pc, #136]	; (81031b8 <HAL_DMA_IRQHandler+0xc8c>)
 8103130:	4293      	cmp	r3, r2
 8103132:	d02c      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	4a20      	ldr	r2, [pc, #128]	; (81031bc <HAL_DMA_IRQHandler+0xc90>)
 810313a:	4293      	cmp	r3, r2
 810313c:	d027      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	681b      	ldr	r3, [r3, #0]
 8103142:	4a1f      	ldr	r2, [pc, #124]	; (81031c0 <HAL_DMA_IRQHandler+0xc94>)
 8103144:	4293      	cmp	r3, r2
 8103146:	d022      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	681b      	ldr	r3, [r3, #0]
 810314c:	4a1d      	ldr	r2, [pc, #116]	; (81031c4 <HAL_DMA_IRQHandler+0xc98>)
 810314e:	4293      	cmp	r3, r2
 8103150:	d01d      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	4a1c      	ldr	r2, [pc, #112]	; (81031c8 <HAL_DMA_IRQHandler+0xc9c>)
 8103158:	4293      	cmp	r3, r2
 810315a:	d018      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	4a1a      	ldr	r2, [pc, #104]	; (81031cc <HAL_DMA_IRQHandler+0xca0>)
 8103162:	4293      	cmp	r3, r2
 8103164:	d013      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	681b      	ldr	r3, [r3, #0]
 810316a:	4a19      	ldr	r2, [pc, #100]	; (81031d0 <HAL_DMA_IRQHandler+0xca4>)
 810316c:	4293      	cmp	r3, r2
 810316e:	d00e      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	4a17      	ldr	r2, [pc, #92]	; (81031d4 <HAL_DMA_IRQHandler+0xca8>)
 8103176:	4293      	cmp	r3, r2
 8103178:	d009      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	4a16      	ldr	r2, [pc, #88]	; (81031d8 <HAL_DMA_IRQHandler+0xcac>)
 8103180:	4293      	cmp	r3, r2
 8103182:	d004      	beq.n	810318e <HAL_DMA_IRQHandler+0xc62>
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	4a14      	ldr	r2, [pc, #80]	; (81031dc <HAL_DMA_IRQHandler+0xcb0>)
 810318a:	4293      	cmp	r3, r2
 810318c:	d128      	bne.n	81031e0 <HAL_DMA_IRQHandler+0xcb4>
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	681b      	ldr	r3, [r3, #0]
 8103192:	681a      	ldr	r2, [r3, #0]
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	681b      	ldr	r3, [r3, #0]
 8103198:	f022 0214 	bic.w	r2, r2, #20
 810319c:	601a      	str	r2, [r3, #0]
 810319e:	e027      	b.n	81031f0 <HAL_DMA_IRQHandler+0xcc4>
 81031a0:	40020010 	.word	0x40020010
 81031a4:	40020028 	.word	0x40020028
 81031a8:	40020040 	.word	0x40020040
 81031ac:	40020058 	.word	0x40020058
 81031b0:	40020070 	.word	0x40020070
 81031b4:	40020088 	.word	0x40020088
 81031b8:	400200a0 	.word	0x400200a0
 81031bc:	400200b8 	.word	0x400200b8
 81031c0:	40020410 	.word	0x40020410
 81031c4:	40020428 	.word	0x40020428
 81031c8:	40020440 	.word	0x40020440
 81031cc:	40020458 	.word	0x40020458
 81031d0:	40020470 	.word	0x40020470
 81031d4:	40020488 	.word	0x40020488
 81031d8:	400204a0 	.word	0x400204a0
 81031dc:	400204b8 	.word	0x400204b8
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	681a      	ldr	r2, [r3, #0]
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	f022 020a 	bic.w	r2, r2, #10
 81031ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	2201      	movs	r2, #1
 81031f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	2200      	movs	r2, #0
 81031fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103204:	2b00      	cmp	r3, #0
 8103206:	f000 8097 	beq.w	8103338 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810320e:	6878      	ldr	r0, [r7, #4]
 8103210:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103212:	e091      	b.n	8103338 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103218:	f003 031f 	and.w	r3, r3, #31
 810321c:	2208      	movs	r2, #8
 810321e:	409a      	lsls	r2, r3
 8103220:	697b      	ldr	r3, [r7, #20]
 8103222:	4013      	ands	r3, r2
 8103224:	2b00      	cmp	r3, #0
 8103226:	f000 8088 	beq.w	810333a <HAL_DMA_IRQHandler+0xe0e>
 810322a:	693b      	ldr	r3, [r7, #16]
 810322c:	f003 0308 	and.w	r3, r3, #8
 8103230:	2b00      	cmp	r3, #0
 8103232:	f000 8082 	beq.w	810333a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	681b      	ldr	r3, [r3, #0]
 810323a:	4a41      	ldr	r2, [pc, #260]	; (8103340 <HAL_DMA_IRQHandler+0xe14>)
 810323c:	4293      	cmp	r3, r2
 810323e:	d04a      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	4a3f      	ldr	r2, [pc, #252]	; (8103344 <HAL_DMA_IRQHandler+0xe18>)
 8103246:	4293      	cmp	r3, r2
 8103248:	d045      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	681b      	ldr	r3, [r3, #0]
 810324e:	4a3e      	ldr	r2, [pc, #248]	; (8103348 <HAL_DMA_IRQHandler+0xe1c>)
 8103250:	4293      	cmp	r3, r2
 8103252:	d040      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	681b      	ldr	r3, [r3, #0]
 8103258:	4a3c      	ldr	r2, [pc, #240]	; (810334c <HAL_DMA_IRQHandler+0xe20>)
 810325a:	4293      	cmp	r3, r2
 810325c:	d03b      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	681b      	ldr	r3, [r3, #0]
 8103262:	4a3b      	ldr	r2, [pc, #236]	; (8103350 <HAL_DMA_IRQHandler+0xe24>)
 8103264:	4293      	cmp	r3, r2
 8103266:	d036      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	4a39      	ldr	r2, [pc, #228]	; (8103354 <HAL_DMA_IRQHandler+0xe28>)
 810326e:	4293      	cmp	r3, r2
 8103270:	d031      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	4a38      	ldr	r2, [pc, #224]	; (8103358 <HAL_DMA_IRQHandler+0xe2c>)
 8103278:	4293      	cmp	r3, r2
 810327a:	d02c      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	4a36      	ldr	r2, [pc, #216]	; (810335c <HAL_DMA_IRQHandler+0xe30>)
 8103282:	4293      	cmp	r3, r2
 8103284:	d027      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	4a35      	ldr	r2, [pc, #212]	; (8103360 <HAL_DMA_IRQHandler+0xe34>)
 810328c:	4293      	cmp	r3, r2
 810328e:	d022      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	681b      	ldr	r3, [r3, #0]
 8103294:	4a33      	ldr	r2, [pc, #204]	; (8103364 <HAL_DMA_IRQHandler+0xe38>)
 8103296:	4293      	cmp	r3, r2
 8103298:	d01d      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	681b      	ldr	r3, [r3, #0]
 810329e:	4a32      	ldr	r2, [pc, #200]	; (8103368 <HAL_DMA_IRQHandler+0xe3c>)
 81032a0:	4293      	cmp	r3, r2
 81032a2:	d018      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	681b      	ldr	r3, [r3, #0]
 81032a8:	4a30      	ldr	r2, [pc, #192]	; (810336c <HAL_DMA_IRQHandler+0xe40>)
 81032aa:	4293      	cmp	r3, r2
 81032ac:	d013      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	681b      	ldr	r3, [r3, #0]
 81032b2:	4a2f      	ldr	r2, [pc, #188]	; (8103370 <HAL_DMA_IRQHandler+0xe44>)
 81032b4:	4293      	cmp	r3, r2
 81032b6:	d00e      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	4a2d      	ldr	r2, [pc, #180]	; (8103374 <HAL_DMA_IRQHandler+0xe48>)
 81032be:	4293      	cmp	r3, r2
 81032c0:	d009      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	681b      	ldr	r3, [r3, #0]
 81032c6:	4a2c      	ldr	r2, [pc, #176]	; (8103378 <HAL_DMA_IRQHandler+0xe4c>)
 81032c8:	4293      	cmp	r3, r2
 81032ca:	d004      	beq.n	81032d6 <HAL_DMA_IRQHandler+0xdaa>
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	4a2a      	ldr	r2, [pc, #168]	; (810337c <HAL_DMA_IRQHandler+0xe50>)
 81032d2:	4293      	cmp	r3, r2
 81032d4:	d108      	bne.n	81032e8 <HAL_DMA_IRQHandler+0xdbc>
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	681a      	ldr	r2, [r3, #0]
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	f022 021c 	bic.w	r2, r2, #28
 81032e4:	601a      	str	r2, [r3, #0]
 81032e6:	e007      	b.n	81032f8 <HAL_DMA_IRQHandler+0xdcc>
 81032e8:	687b      	ldr	r3, [r7, #4]
 81032ea:	681b      	ldr	r3, [r3, #0]
 81032ec:	681a      	ldr	r2, [r3, #0]
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	681b      	ldr	r3, [r3, #0]
 81032f2:	f022 020e 	bic.w	r2, r2, #14
 81032f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032fc:	f003 031f 	and.w	r3, r3, #31
 8103300:	2201      	movs	r2, #1
 8103302:	409a      	lsls	r2, r3
 8103304:	69fb      	ldr	r3, [r7, #28]
 8103306:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	2201      	movs	r2, #1
 810330c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	2201      	movs	r2, #1
 8103312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	2200      	movs	r2, #0
 810331a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103322:	2b00      	cmp	r3, #0
 8103324:	d009      	beq.n	810333a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810332a:	6878      	ldr	r0, [r7, #4]
 810332c:	4798      	blx	r3
 810332e:	e004      	b.n	810333a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8103330:	bf00      	nop
 8103332:	e002      	b.n	810333a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103334:	bf00      	nop
 8103336:	e000      	b.n	810333a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103338:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810333a:	3728      	adds	r7, #40	; 0x28
 810333c:	46bd      	mov	sp, r7
 810333e:	bd80      	pop	{r7, pc}
 8103340:	40020010 	.word	0x40020010
 8103344:	40020028 	.word	0x40020028
 8103348:	40020040 	.word	0x40020040
 810334c:	40020058 	.word	0x40020058
 8103350:	40020070 	.word	0x40020070
 8103354:	40020088 	.word	0x40020088
 8103358:	400200a0 	.word	0x400200a0
 810335c:	400200b8 	.word	0x400200b8
 8103360:	40020410 	.word	0x40020410
 8103364:	40020428 	.word	0x40020428
 8103368:	40020440 	.word	0x40020440
 810336c:	40020458 	.word	0x40020458
 8103370:	40020470 	.word	0x40020470
 8103374:	40020488 	.word	0x40020488
 8103378:	400204a0 	.word	0x400204a0
 810337c:	400204b8 	.word	0x400204b8

08103380 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8103380:	b480      	push	{r7}
 8103382:	b085      	sub	sp, #20
 8103384:	af00      	add	r7, sp, #0
 8103386:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103388:	687b      	ldr	r3, [r7, #4]
 810338a:	681b      	ldr	r3, [r3, #0]
 810338c:	4a43      	ldr	r2, [pc, #268]	; (810349c <DMA_CalcBaseAndBitshift+0x11c>)
 810338e:	4293      	cmp	r3, r2
 8103390:	d04a      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	4a42      	ldr	r2, [pc, #264]	; (81034a0 <DMA_CalcBaseAndBitshift+0x120>)
 8103398:	4293      	cmp	r3, r2
 810339a:	d045      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	4a40      	ldr	r2, [pc, #256]	; (81034a4 <DMA_CalcBaseAndBitshift+0x124>)
 81033a2:	4293      	cmp	r3, r2
 81033a4:	d040      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	4a3f      	ldr	r2, [pc, #252]	; (81034a8 <DMA_CalcBaseAndBitshift+0x128>)
 81033ac:	4293      	cmp	r3, r2
 81033ae:	d03b      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	4a3d      	ldr	r2, [pc, #244]	; (81034ac <DMA_CalcBaseAndBitshift+0x12c>)
 81033b6:	4293      	cmp	r3, r2
 81033b8:	d036      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	681b      	ldr	r3, [r3, #0]
 81033be:	4a3c      	ldr	r2, [pc, #240]	; (81034b0 <DMA_CalcBaseAndBitshift+0x130>)
 81033c0:	4293      	cmp	r3, r2
 81033c2:	d031      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	681b      	ldr	r3, [r3, #0]
 81033c8:	4a3a      	ldr	r2, [pc, #232]	; (81034b4 <DMA_CalcBaseAndBitshift+0x134>)
 81033ca:	4293      	cmp	r3, r2
 81033cc:	d02c      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	4a39      	ldr	r2, [pc, #228]	; (81034b8 <DMA_CalcBaseAndBitshift+0x138>)
 81033d4:	4293      	cmp	r3, r2
 81033d6:	d027      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	4a37      	ldr	r2, [pc, #220]	; (81034bc <DMA_CalcBaseAndBitshift+0x13c>)
 81033de:	4293      	cmp	r3, r2
 81033e0:	d022      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	4a36      	ldr	r2, [pc, #216]	; (81034c0 <DMA_CalcBaseAndBitshift+0x140>)
 81033e8:	4293      	cmp	r3, r2
 81033ea:	d01d      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	4a34      	ldr	r2, [pc, #208]	; (81034c4 <DMA_CalcBaseAndBitshift+0x144>)
 81033f2:	4293      	cmp	r3, r2
 81033f4:	d018      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 81033f6:	687b      	ldr	r3, [r7, #4]
 81033f8:	681b      	ldr	r3, [r3, #0]
 81033fa:	4a33      	ldr	r2, [pc, #204]	; (81034c8 <DMA_CalcBaseAndBitshift+0x148>)
 81033fc:	4293      	cmp	r3, r2
 81033fe:	d013      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	4a31      	ldr	r2, [pc, #196]	; (81034cc <DMA_CalcBaseAndBitshift+0x14c>)
 8103406:	4293      	cmp	r3, r2
 8103408:	d00e      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	681b      	ldr	r3, [r3, #0]
 810340e:	4a30      	ldr	r2, [pc, #192]	; (81034d0 <DMA_CalcBaseAndBitshift+0x150>)
 8103410:	4293      	cmp	r3, r2
 8103412:	d009      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	4a2e      	ldr	r2, [pc, #184]	; (81034d4 <DMA_CalcBaseAndBitshift+0x154>)
 810341a:	4293      	cmp	r3, r2
 810341c:	d004      	beq.n	8103428 <DMA_CalcBaseAndBitshift+0xa8>
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	4a2d      	ldr	r2, [pc, #180]	; (81034d8 <DMA_CalcBaseAndBitshift+0x158>)
 8103424:	4293      	cmp	r3, r2
 8103426:	d101      	bne.n	810342c <DMA_CalcBaseAndBitshift+0xac>
 8103428:	2301      	movs	r3, #1
 810342a:	e000      	b.n	810342e <DMA_CalcBaseAndBitshift+0xae>
 810342c:	2300      	movs	r3, #0
 810342e:	2b00      	cmp	r3, #0
 8103430:	d026      	beq.n	8103480 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	b2db      	uxtb	r3, r3
 8103438:	3b10      	subs	r3, #16
 810343a:	4a28      	ldr	r2, [pc, #160]	; (81034dc <DMA_CalcBaseAndBitshift+0x15c>)
 810343c:	fba2 2303 	umull	r2, r3, r2, r3
 8103440:	091b      	lsrs	r3, r3, #4
 8103442:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103444:	68fb      	ldr	r3, [r7, #12]
 8103446:	f003 0307 	and.w	r3, r3, #7
 810344a:	4a25      	ldr	r2, [pc, #148]	; (81034e0 <DMA_CalcBaseAndBitshift+0x160>)
 810344c:	5cd3      	ldrb	r3, [r2, r3]
 810344e:	461a      	mov	r2, r3
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8103454:	68fb      	ldr	r3, [r7, #12]
 8103456:	2b03      	cmp	r3, #3
 8103458:	d909      	bls.n	810346e <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 810345a:	687b      	ldr	r3, [r7, #4]
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103462:	f023 0303 	bic.w	r3, r3, #3
 8103466:	1d1a      	adds	r2, r3, #4
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	659a      	str	r2, [r3, #88]	; 0x58
 810346c:	e00e      	b.n	810348c <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103476:	f023 0303 	bic.w	r3, r3, #3
 810347a:	687a      	ldr	r2, [r7, #4]
 810347c:	6593      	str	r3, [r2, #88]	; 0x58
 810347e:	e005      	b.n	810348c <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	681b      	ldr	r3, [r3, #0]
 8103484:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8103490:	4618      	mov	r0, r3
 8103492:	3714      	adds	r7, #20
 8103494:	46bd      	mov	sp, r7
 8103496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810349a:	4770      	bx	lr
 810349c:	40020010 	.word	0x40020010
 81034a0:	40020028 	.word	0x40020028
 81034a4:	40020040 	.word	0x40020040
 81034a8:	40020058 	.word	0x40020058
 81034ac:	40020070 	.word	0x40020070
 81034b0:	40020088 	.word	0x40020088
 81034b4:	400200a0 	.word	0x400200a0
 81034b8:	400200b8 	.word	0x400200b8
 81034bc:	40020410 	.word	0x40020410
 81034c0:	40020428 	.word	0x40020428
 81034c4:	40020440 	.word	0x40020440
 81034c8:	40020458 	.word	0x40020458
 81034cc:	40020470 	.word	0x40020470
 81034d0:	40020488 	.word	0x40020488
 81034d4:	400204a0 	.word	0x400204a0
 81034d8:	400204b8 	.word	0x400204b8
 81034dc:	aaaaaaab 	.word	0xaaaaaaab
 81034e0:	0810507c 	.word	0x0810507c

081034e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81034e4:	b480      	push	{r7}
 81034e6:	b085      	sub	sp, #20
 81034e8:	af00      	add	r7, sp, #0
 81034ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81034ec:	2300      	movs	r3, #0
 81034ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	699b      	ldr	r3, [r3, #24]
 81034f4:	2b00      	cmp	r3, #0
 81034f6:	d120      	bne.n	810353a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81034fc:	2b03      	cmp	r3, #3
 81034fe:	d858      	bhi.n	81035b2 <DMA_CheckFifoParam+0xce>
 8103500:	a201      	add	r2, pc, #4	; (adr r2, 8103508 <DMA_CheckFifoParam+0x24>)
 8103502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103506:	bf00      	nop
 8103508:	08103519 	.word	0x08103519
 810350c:	0810352b 	.word	0x0810352b
 8103510:	08103519 	.word	0x08103519
 8103514:	081035b3 	.word	0x081035b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810351c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103520:	2b00      	cmp	r3, #0
 8103522:	d048      	beq.n	81035b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8103524:	2301      	movs	r3, #1
 8103526:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103528:	e045      	b.n	81035b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 810352a:	687b      	ldr	r3, [r7, #4]
 810352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810352e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8103532:	d142      	bne.n	81035ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8103534:	2301      	movs	r3, #1
 8103536:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103538:	e03f      	b.n	81035ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810353a:	687b      	ldr	r3, [r7, #4]
 810353c:	699b      	ldr	r3, [r3, #24]
 810353e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103542:	d123      	bne.n	810358c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103548:	2b03      	cmp	r3, #3
 810354a:	d838      	bhi.n	81035be <DMA_CheckFifoParam+0xda>
 810354c:	a201      	add	r2, pc, #4	; (adr r2, 8103554 <DMA_CheckFifoParam+0x70>)
 810354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103552:	bf00      	nop
 8103554:	08103565 	.word	0x08103565
 8103558:	0810356b 	.word	0x0810356b
 810355c:	08103565 	.word	0x08103565
 8103560:	0810357d 	.word	0x0810357d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8103564:	2301      	movs	r3, #1
 8103566:	73fb      	strb	r3, [r7, #15]
        break;
 8103568:	e030      	b.n	81035cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810356e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103572:	2b00      	cmp	r3, #0
 8103574:	d025      	beq.n	81035c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8103576:	2301      	movs	r3, #1
 8103578:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810357a:	e022      	b.n	81035c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103580:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8103584:	d11f      	bne.n	81035c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8103586:	2301      	movs	r3, #1
 8103588:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810358a:	e01c      	b.n	81035c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103590:	2b02      	cmp	r3, #2
 8103592:	d902      	bls.n	810359a <DMA_CheckFifoParam+0xb6>
 8103594:	2b03      	cmp	r3, #3
 8103596:	d003      	beq.n	81035a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8103598:	e018      	b.n	81035cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 810359a:	2301      	movs	r3, #1
 810359c:	73fb      	strb	r3, [r7, #15]
        break;
 810359e:	e015      	b.n	81035cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81035a8:	2b00      	cmp	r3, #0
 81035aa:	d00e      	beq.n	81035ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81035ac:	2301      	movs	r3, #1
 81035ae:	73fb      	strb	r3, [r7, #15]
    break;
 81035b0:	e00b      	b.n	81035ca <DMA_CheckFifoParam+0xe6>
        break;
 81035b2:	bf00      	nop
 81035b4:	e00a      	b.n	81035cc <DMA_CheckFifoParam+0xe8>
        break;
 81035b6:	bf00      	nop
 81035b8:	e008      	b.n	81035cc <DMA_CheckFifoParam+0xe8>
        break;
 81035ba:	bf00      	nop
 81035bc:	e006      	b.n	81035cc <DMA_CheckFifoParam+0xe8>
        break;
 81035be:	bf00      	nop
 81035c0:	e004      	b.n	81035cc <DMA_CheckFifoParam+0xe8>
        break;
 81035c2:	bf00      	nop
 81035c4:	e002      	b.n	81035cc <DMA_CheckFifoParam+0xe8>
        break;
 81035c6:	bf00      	nop
 81035c8:	e000      	b.n	81035cc <DMA_CheckFifoParam+0xe8>
    break;
 81035ca:	bf00      	nop
    }
  }

  return status;
 81035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 81035ce:	4618      	mov	r0, r3
 81035d0:	3714      	adds	r7, #20
 81035d2:	46bd      	mov	sp, r7
 81035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035d8:	4770      	bx	lr
 81035da:	bf00      	nop

081035dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81035dc:	b480      	push	{r7}
 81035de:	b085      	sub	sp, #20
 81035e0:	af00      	add	r7, sp, #0
 81035e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	681b      	ldr	r3, [r3, #0]
 81035ee:	4a3a      	ldr	r2, [pc, #232]	; (81036d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81035f0:	4293      	cmp	r3, r2
 81035f2:	d022      	beq.n	810363a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	681b      	ldr	r3, [r3, #0]
 81035f8:	4a38      	ldr	r2, [pc, #224]	; (81036dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81035fa:	4293      	cmp	r3, r2
 81035fc:	d01d      	beq.n	810363a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	681b      	ldr	r3, [r3, #0]
 8103602:	4a37      	ldr	r2, [pc, #220]	; (81036e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8103604:	4293      	cmp	r3, r2
 8103606:	d018      	beq.n	810363a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	681b      	ldr	r3, [r3, #0]
 810360c:	4a35      	ldr	r2, [pc, #212]	; (81036e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810360e:	4293      	cmp	r3, r2
 8103610:	d013      	beq.n	810363a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	4a34      	ldr	r2, [pc, #208]	; (81036e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103618:	4293      	cmp	r3, r2
 810361a:	d00e      	beq.n	810363a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	4a32      	ldr	r2, [pc, #200]	; (81036ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8103622:	4293      	cmp	r3, r2
 8103624:	d009      	beq.n	810363a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	681b      	ldr	r3, [r3, #0]
 810362a:	4a31      	ldr	r2, [pc, #196]	; (81036f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 810362c:	4293      	cmp	r3, r2
 810362e:	d004      	beq.n	810363a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	681b      	ldr	r3, [r3, #0]
 8103634:	4a2f      	ldr	r2, [pc, #188]	; (81036f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8103636:	4293      	cmp	r3, r2
 8103638:	d101      	bne.n	810363e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 810363a:	2301      	movs	r3, #1
 810363c:	e000      	b.n	8103640 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 810363e:	2300      	movs	r3, #0
 8103640:	2b00      	cmp	r3, #0
 8103642:	d01c      	beq.n	810367e <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	681b      	ldr	r3, [r3, #0]
 8103648:	b2db      	uxtb	r3, r3
 810364a:	3b08      	subs	r3, #8
 810364c:	4a2a      	ldr	r2, [pc, #168]	; (81036f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810364e:	fba2 2303 	umull	r2, r3, r2, r3
 8103652:	091b      	lsrs	r3, r3, #4
 8103654:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103656:	68fb      	ldr	r3, [r7, #12]
 8103658:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 810365c:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8103660:	009b      	lsls	r3, r3, #2
 8103662:	461a      	mov	r2, r3
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	4a24      	ldr	r2, [pc, #144]	; (81036fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 810366c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810366e:	68fb      	ldr	r3, [r7, #12]
 8103670:	f003 031f 	and.w	r3, r3, #31
 8103674:	2201      	movs	r2, #1
 8103676:	409a      	lsls	r2, r3
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 810367c:	e026      	b.n	81036cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	681b      	ldr	r3, [r3, #0]
 8103682:	b2db      	uxtb	r3, r3
 8103684:	3b10      	subs	r3, #16
 8103686:	4a1e      	ldr	r2, [pc, #120]	; (8103700 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8103688:	fba2 2303 	umull	r2, r3, r2, r3
 810368c:	091b      	lsrs	r3, r3, #4
 810368e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103690:	68bb      	ldr	r3, [r7, #8]
 8103692:	4a1c      	ldr	r2, [pc, #112]	; (8103704 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8103694:	4293      	cmp	r3, r2
 8103696:	d806      	bhi.n	81036a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8103698:	68bb      	ldr	r3, [r7, #8]
 810369a:	4a1b      	ldr	r2, [pc, #108]	; (8103708 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 810369c:	4293      	cmp	r3, r2
 810369e:	d902      	bls.n	81036a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81036a0:	68fb      	ldr	r3, [r7, #12]
 81036a2:	3308      	adds	r3, #8
 81036a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81036a6:	68fb      	ldr	r3, [r7, #12]
 81036a8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81036ac:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81036b0:	009b      	lsls	r3, r3, #2
 81036b2:	461a      	mov	r2, r3
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	4a14      	ldr	r2, [pc, #80]	; (810370c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81036bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81036be:	68fb      	ldr	r3, [r7, #12]
 81036c0:	f003 031f 	and.w	r3, r3, #31
 81036c4:	2201      	movs	r2, #1
 81036c6:	409a      	lsls	r2, r3
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 81036cc:	bf00      	nop
 81036ce:	3714      	adds	r7, #20
 81036d0:	46bd      	mov	sp, r7
 81036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036d6:	4770      	bx	lr
 81036d8:	58025408 	.word	0x58025408
 81036dc:	5802541c 	.word	0x5802541c
 81036e0:	58025430 	.word	0x58025430
 81036e4:	58025444 	.word	0x58025444
 81036e8:	58025458 	.word	0x58025458
 81036ec:	5802546c 	.word	0x5802546c
 81036f0:	58025480 	.word	0x58025480
 81036f4:	58025494 	.word	0x58025494
 81036f8:	cccccccd 	.word	0xcccccccd
 81036fc:	58025880 	.word	0x58025880
 8103700:	aaaaaaab 	.word	0xaaaaaaab
 8103704:	400204b8 	.word	0x400204b8
 8103708:	4002040f 	.word	0x4002040f
 810370c:	40020880 	.word	0x40020880

08103710 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103710:	b480      	push	{r7}
 8103712:	b085      	sub	sp, #20
 8103714:	af00      	add	r7, sp, #0
 8103716:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103718:	687b      	ldr	r3, [r7, #4]
 810371a:	685b      	ldr	r3, [r3, #4]
 810371c:	b2db      	uxtb	r3, r3
 810371e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103720:	68fb      	ldr	r3, [r7, #12]
 8103722:	2b00      	cmp	r3, #0
 8103724:	d04a      	beq.n	81037bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8103726:	68fb      	ldr	r3, [r7, #12]
 8103728:	2b08      	cmp	r3, #8
 810372a:	d847      	bhi.n	81037bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810372c:	687b      	ldr	r3, [r7, #4]
 810372e:	681b      	ldr	r3, [r3, #0]
 8103730:	4a25      	ldr	r2, [pc, #148]	; (81037c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8103732:	4293      	cmp	r3, r2
 8103734:	d022      	beq.n	810377c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	681b      	ldr	r3, [r3, #0]
 810373a:	4a24      	ldr	r2, [pc, #144]	; (81037cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 810373c:	4293      	cmp	r3, r2
 810373e:	d01d      	beq.n	810377c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	681b      	ldr	r3, [r3, #0]
 8103744:	4a22      	ldr	r2, [pc, #136]	; (81037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8103746:	4293      	cmp	r3, r2
 8103748:	d018      	beq.n	810377c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810374a:	687b      	ldr	r3, [r7, #4]
 810374c:	681b      	ldr	r3, [r3, #0]
 810374e:	4a21      	ldr	r2, [pc, #132]	; (81037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8103750:	4293      	cmp	r3, r2
 8103752:	d013      	beq.n	810377c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	681b      	ldr	r3, [r3, #0]
 8103758:	4a1f      	ldr	r2, [pc, #124]	; (81037d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810375a:	4293      	cmp	r3, r2
 810375c:	d00e      	beq.n	810377c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810375e:	687b      	ldr	r3, [r7, #4]
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	4a1e      	ldr	r2, [pc, #120]	; (81037dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8103764:	4293      	cmp	r3, r2
 8103766:	d009      	beq.n	810377c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	681b      	ldr	r3, [r3, #0]
 810376c:	4a1c      	ldr	r2, [pc, #112]	; (81037e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810376e:	4293      	cmp	r3, r2
 8103770:	d004      	beq.n	810377c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103772:	687b      	ldr	r3, [r7, #4]
 8103774:	681b      	ldr	r3, [r3, #0]
 8103776:	4a1b      	ldr	r2, [pc, #108]	; (81037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8103778:	4293      	cmp	r3, r2
 810377a:	d101      	bne.n	8103780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 810377c:	2301      	movs	r3, #1
 810377e:	e000      	b.n	8103782 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8103780:	2300      	movs	r3, #0
 8103782:	2b00      	cmp	r3, #0
 8103784:	d00a      	beq.n	810379c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8103786:	68fa      	ldr	r2, [r7, #12]
 8103788:	4b17      	ldr	r3, [pc, #92]	; (81037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 810378a:	4413      	add	r3, r2
 810378c:	009b      	lsls	r3, r3, #2
 810378e:	461a      	mov	r2, r3
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103794:	687b      	ldr	r3, [r7, #4]
 8103796:	4a15      	ldr	r2, [pc, #84]	; (81037ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8103798:	671a      	str	r2, [r3, #112]	; 0x70
 810379a:	e009      	b.n	81037b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 810379c:	68fa      	ldr	r2, [r7, #12]
 810379e:	4b14      	ldr	r3, [pc, #80]	; (81037f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81037a0:	4413      	add	r3, r2
 81037a2:	009b      	lsls	r3, r3, #2
 81037a4:	461a      	mov	r2, r3
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	4a11      	ldr	r2, [pc, #68]	; (81037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81037ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81037b0:	68fb      	ldr	r3, [r7, #12]
 81037b2:	3b01      	subs	r3, #1
 81037b4:	2201      	movs	r2, #1
 81037b6:	409a      	lsls	r2, r3
 81037b8:	687b      	ldr	r3, [r7, #4]
 81037ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81037bc:	bf00      	nop
 81037be:	3714      	adds	r7, #20
 81037c0:	46bd      	mov	sp, r7
 81037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037c6:	4770      	bx	lr
 81037c8:	58025408 	.word	0x58025408
 81037cc:	5802541c 	.word	0x5802541c
 81037d0:	58025430 	.word	0x58025430
 81037d4:	58025444 	.word	0x58025444
 81037d8:	58025458 	.word	0x58025458
 81037dc:	5802546c 	.word	0x5802546c
 81037e0:	58025480 	.word	0x58025480
 81037e4:	58025494 	.word	0x58025494
 81037e8:	1600963f 	.word	0x1600963f
 81037ec:	58025940 	.word	0x58025940
 81037f0:	1000823f 	.word	0x1000823f
 81037f4:	40020940 	.word	0x40020940

081037f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81037f8:	b480      	push	{r7}
 81037fa:	b089      	sub	sp, #36	; 0x24
 81037fc:	af00      	add	r7, sp, #0
 81037fe:	6078      	str	r0, [r7, #4]
 8103800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103802:	2300      	movs	r3, #0
 8103804:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103806:	4b89      	ldr	r3, [pc, #548]	; (8103a2c <HAL_GPIO_Init+0x234>)
 8103808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810380a:	e194      	b.n	8103b36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810380c:	683b      	ldr	r3, [r7, #0]
 810380e:	681a      	ldr	r2, [r3, #0]
 8103810:	2101      	movs	r1, #1
 8103812:	69fb      	ldr	r3, [r7, #28]
 8103814:	fa01 f303 	lsl.w	r3, r1, r3
 8103818:	4013      	ands	r3, r2
 810381a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810381c:	693b      	ldr	r3, [r7, #16]
 810381e:	2b00      	cmp	r3, #0
 8103820:	f000 8186 	beq.w	8103b30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103824:	683b      	ldr	r3, [r7, #0]
 8103826:	685b      	ldr	r3, [r3, #4]
 8103828:	f003 0303 	and.w	r3, r3, #3
 810382c:	2b01      	cmp	r3, #1
 810382e:	d005      	beq.n	810383c <HAL_GPIO_Init+0x44>
 8103830:	683b      	ldr	r3, [r7, #0]
 8103832:	685b      	ldr	r3, [r3, #4]
 8103834:	f003 0303 	and.w	r3, r3, #3
 8103838:	2b02      	cmp	r3, #2
 810383a:	d130      	bne.n	810389e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	689b      	ldr	r3, [r3, #8]
 8103840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103842:	69fb      	ldr	r3, [r7, #28]
 8103844:	005b      	lsls	r3, r3, #1
 8103846:	2203      	movs	r2, #3
 8103848:	fa02 f303 	lsl.w	r3, r2, r3
 810384c:	43db      	mvns	r3, r3
 810384e:	69ba      	ldr	r2, [r7, #24]
 8103850:	4013      	ands	r3, r2
 8103852:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103854:	683b      	ldr	r3, [r7, #0]
 8103856:	68da      	ldr	r2, [r3, #12]
 8103858:	69fb      	ldr	r3, [r7, #28]
 810385a:	005b      	lsls	r3, r3, #1
 810385c:	fa02 f303 	lsl.w	r3, r2, r3
 8103860:	69ba      	ldr	r2, [r7, #24]
 8103862:	4313      	orrs	r3, r2
 8103864:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	69ba      	ldr	r2, [r7, #24]
 810386a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	685b      	ldr	r3, [r3, #4]
 8103870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103872:	2201      	movs	r2, #1
 8103874:	69fb      	ldr	r3, [r7, #28]
 8103876:	fa02 f303 	lsl.w	r3, r2, r3
 810387a:	43db      	mvns	r3, r3
 810387c:	69ba      	ldr	r2, [r7, #24]
 810387e:	4013      	ands	r3, r2
 8103880:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8103882:	683b      	ldr	r3, [r7, #0]
 8103884:	685b      	ldr	r3, [r3, #4]
 8103886:	091b      	lsrs	r3, r3, #4
 8103888:	f003 0201 	and.w	r2, r3, #1
 810388c:	69fb      	ldr	r3, [r7, #28]
 810388e:	fa02 f303 	lsl.w	r3, r2, r3
 8103892:	69ba      	ldr	r2, [r7, #24]
 8103894:	4313      	orrs	r3, r2
 8103896:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	69ba      	ldr	r2, [r7, #24]
 810389c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810389e:	683b      	ldr	r3, [r7, #0]
 81038a0:	685b      	ldr	r3, [r3, #4]
 81038a2:	f003 0303 	and.w	r3, r3, #3
 81038a6:	2b03      	cmp	r3, #3
 81038a8:	d017      	beq.n	81038da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	68db      	ldr	r3, [r3, #12]
 81038ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81038b0:	69fb      	ldr	r3, [r7, #28]
 81038b2:	005b      	lsls	r3, r3, #1
 81038b4:	2203      	movs	r2, #3
 81038b6:	fa02 f303 	lsl.w	r3, r2, r3
 81038ba:	43db      	mvns	r3, r3
 81038bc:	69ba      	ldr	r2, [r7, #24]
 81038be:	4013      	ands	r3, r2
 81038c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81038c2:	683b      	ldr	r3, [r7, #0]
 81038c4:	689a      	ldr	r2, [r3, #8]
 81038c6:	69fb      	ldr	r3, [r7, #28]
 81038c8:	005b      	lsls	r3, r3, #1
 81038ca:	fa02 f303 	lsl.w	r3, r2, r3
 81038ce:	69ba      	ldr	r2, [r7, #24]
 81038d0:	4313      	orrs	r3, r2
 81038d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	69ba      	ldr	r2, [r7, #24]
 81038d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81038da:	683b      	ldr	r3, [r7, #0]
 81038dc:	685b      	ldr	r3, [r3, #4]
 81038de:	f003 0303 	and.w	r3, r3, #3
 81038e2:	2b02      	cmp	r3, #2
 81038e4:	d123      	bne.n	810392e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81038e6:	69fb      	ldr	r3, [r7, #28]
 81038e8:	08da      	lsrs	r2, r3, #3
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	3208      	adds	r2, #8
 81038ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81038f4:	69fb      	ldr	r3, [r7, #28]
 81038f6:	f003 0307 	and.w	r3, r3, #7
 81038fa:	009b      	lsls	r3, r3, #2
 81038fc:	220f      	movs	r2, #15
 81038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8103902:	43db      	mvns	r3, r3
 8103904:	69ba      	ldr	r2, [r7, #24]
 8103906:	4013      	ands	r3, r2
 8103908:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810390a:	683b      	ldr	r3, [r7, #0]
 810390c:	691a      	ldr	r2, [r3, #16]
 810390e:	69fb      	ldr	r3, [r7, #28]
 8103910:	f003 0307 	and.w	r3, r3, #7
 8103914:	009b      	lsls	r3, r3, #2
 8103916:	fa02 f303 	lsl.w	r3, r2, r3
 810391a:	69ba      	ldr	r2, [r7, #24]
 810391c:	4313      	orrs	r3, r2
 810391e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103920:	69fb      	ldr	r3, [r7, #28]
 8103922:	08da      	lsrs	r2, r3, #3
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	3208      	adds	r2, #8
 8103928:	69b9      	ldr	r1, [r7, #24]
 810392a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103934:	69fb      	ldr	r3, [r7, #28]
 8103936:	005b      	lsls	r3, r3, #1
 8103938:	2203      	movs	r2, #3
 810393a:	fa02 f303 	lsl.w	r3, r2, r3
 810393e:	43db      	mvns	r3, r3
 8103940:	69ba      	ldr	r2, [r7, #24]
 8103942:	4013      	ands	r3, r2
 8103944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103946:	683b      	ldr	r3, [r7, #0]
 8103948:	685b      	ldr	r3, [r3, #4]
 810394a:	f003 0203 	and.w	r2, r3, #3
 810394e:	69fb      	ldr	r3, [r7, #28]
 8103950:	005b      	lsls	r3, r3, #1
 8103952:	fa02 f303 	lsl.w	r3, r2, r3
 8103956:	69ba      	ldr	r2, [r7, #24]
 8103958:	4313      	orrs	r3, r2
 810395a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	69ba      	ldr	r2, [r7, #24]
 8103960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8103962:	683b      	ldr	r3, [r7, #0]
 8103964:	685b      	ldr	r3, [r3, #4]
 8103966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810396a:	2b00      	cmp	r3, #0
 810396c:	f000 80e0 	beq.w	8103b30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103970:	4b2f      	ldr	r3, [pc, #188]	; (8103a30 <HAL_GPIO_Init+0x238>)
 8103972:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103976:	4a2e      	ldr	r2, [pc, #184]	; (8103a30 <HAL_GPIO_Init+0x238>)
 8103978:	f043 0302 	orr.w	r3, r3, #2
 810397c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103980:	4b2b      	ldr	r3, [pc, #172]	; (8103a30 <HAL_GPIO_Init+0x238>)
 8103982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103986:	f003 0302 	and.w	r3, r3, #2
 810398a:	60fb      	str	r3, [r7, #12]
 810398c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810398e:	4a29      	ldr	r2, [pc, #164]	; (8103a34 <HAL_GPIO_Init+0x23c>)
 8103990:	69fb      	ldr	r3, [r7, #28]
 8103992:	089b      	lsrs	r3, r3, #2
 8103994:	3302      	adds	r3, #2
 8103996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810399c:	69fb      	ldr	r3, [r7, #28]
 810399e:	f003 0303 	and.w	r3, r3, #3
 81039a2:	009b      	lsls	r3, r3, #2
 81039a4:	220f      	movs	r2, #15
 81039a6:	fa02 f303 	lsl.w	r3, r2, r3
 81039aa:	43db      	mvns	r3, r3
 81039ac:	69ba      	ldr	r2, [r7, #24]
 81039ae:	4013      	ands	r3, r2
 81039b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	4a20      	ldr	r2, [pc, #128]	; (8103a38 <HAL_GPIO_Init+0x240>)
 81039b6:	4293      	cmp	r3, r2
 81039b8:	d052      	beq.n	8103a60 <HAL_GPIO_Init+0x268>
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	4a1f      	ldr	r2, [pc, #124]	; (8103a3c <HAL_GPIO_Init+0x244>)
 81039be:	4293      	cmp	r3, r2
 81039c0:	d031      	beq.n	8103a26 <HAL_GPIO_Init+0x22e>
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	4a1e      	ldr	r2, [pc, #120]	; (8103a40 <HAL_GPIO_Init+0x248>)
 81039c6:	4293      	cmp	r3, r2
 81039c8:	d02b      	beq.n	8103a22 <HAL_GPIO_Init+0x22a>
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	4a1d      	ldr	r2, [pc, #116]	; (8103a44 <HAL_GPIO_Init+0x24c>)
 81039ce:	4293      	cmp	r3, r2
 81039d0:	d025      	beq.n	8103a1e <HAL_GPIO_Init+0x226>
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	4a1c      	ldr	r2, [pc, #112]	; (8103a48 <HAL_GPIO_Init+0x250>)
 81039d6:	4293      	cmp	r3, r2
 81039d8:	d01f      	beq.n	8103a1a <HAL_GPIO_Init+0x222>
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	4a1b      	ldr	r2, [pc, #108]	; (8103a4c <HAL_GPIO_Init+0x254>)
 81039de:	4293      	cmp	r3, r2
 81039e0:	d019      	beq.n	8103a16 <HAL_GPIO_Init+0x21e>
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	4a1a      	ldr	r2, [pc, #104]	; (8103a50 <HAL_GPIO_Init+0x258>)
 81039e6:	4293      	cmp	r3, r2
 81039e8:	d013      	beq.n	8103a12 <HAL_GPIO_Init+0x21a>
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	4a19      	ldr	r2, [pc, #100]	; (8103a54 <HAL_GPIO_Init+0x25c>)
 81039ee:	4293      	cmp	r3, r2
 81039f0:	d00d      	beq.n	8103a0e <HAL_GPIO_Init+0x216>
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	4a18      	ldr	r2, [pc, #96]	; (8103a58 <HAL_GPIO_Init+0x260>)
 81039f6:	4293      	cmp	r3, r2
 81039f8:	d007      	beq.n	8103a0a <HAL_GPIO_Init+0x212>
 81039fa:	687b      	ldr	r3, [r7, #4]
 81039fc:	4a17      	ldr	r2, [pc, #92]	; (8103a5c <HAL_GPIO_Init+0x264>)
 81039fe:	4293      	cmp	r3, r2
 8103a00:	d101      	bne.n	8103a06 <HAL_GPIO_Init+0x20e>
 8103a02:	2309      	movs	r3, #9
 8103a04:	e02d      	b.n	8103a62 <HAL_GPIO_Init+0x26a>
 8103a06:	230a      	movs	r3, #10
 8103a08:	e02b      	b.n	8103a62 <HAL_GPIO_Init+0x26a>
 8103a0a:	2308      	movs	r3, #8
 8103a0c:	e029      	b.n	8103a62 <HAL_GPIO_Init+0x26a>
 8103a0e:	2307      	movs	r3, #7
 8103a10:	e027      	b.n	8103a62 <HAL_GPIO_Init+0x26a>
 8103a12:	2306      	movs	r3, #6
 8103a14:	e025      	b.n	8103a62 <HAL_GPIO_Init+0x26a>
 8103a16:	2305      	movs	r3, #5
 8103a18:	e023      	b.n	8103a62 <HAL_GPIO_Init+0x26a>
 8103a1a:	2304      	movs	r3, #4
 8103a1c:	e021      	b.n	8103a62 <HAL_GPIO_Init+0x26a>
 8103a1e:	2303      	movs	r3, #3
 8103a20:	e01f      	b.n	8103a62 <HAL_GPIO_Init+0x26a>
 8103a22:	2302      	movs	r3, #2
 8103a24:	e01d      	b.n	8103a62 <HAL_GPIO_Init+0x26a>
 8103a26:	2301      	movs	r3, #1
 8103a28:	e01b      	b.n	8103a62 <HAL_GPIO_Init+0x26a>
 8103a2a:	bf00      	nop
 8103a2c:	580000c0 	.word	0x580000c0
 8103a30:	58024400 	.word	0x58024400
 8103a34:	58000400 	.word	0x58000400
 8103a38:	58020000 	.word	0x58020000
 8103a3c:	58020400 	.word	0x58020400
 8103a40:	58020800 	.word	0x58020800
 8103a44:	58020c00 	.word	0x58020c00
 8103a48:	58021000 	.word	0x58021000
 8103a4c:	58021400 	.word	0x58021400
 8103a50:	58021800 	.word	0x58021800
 8103a54:	58021c00 	.word	0x58021c00
 8103a58:	58022000 	.word	0x58022000
 8103a5c:	58022400 	.word	0x58022400
 8103a60:	2300      	movs	r3, #0
 8103a62:	69fa      	ldr	r2, [r7, #28]
 8103a64:	f002 0203 	and.w	r2, r2, #3
 8103a68:	0092      	lsls	r2, r2, #2
 8103a6a:	4093      	lsls	r3, r2
 8103a6c:	69ba      	ldr	r2, [r7, #24]
 8103a6e:	4313      	orrs	r3, r2
 8103a70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103a72:	4938      	ldr	r1, [pc, #224]	; (8103b54 <HAL_GPIO_Init+0x35c>)
 8103a74:	69fb      	ldr	r3, [r7, #28]
 8103a76:	089b      	lsrs	r3, r3, #2
 8103a78:	3302      	adds	r3, #2
 8103a7a:	69ba      	ldr	r2, [r7, #24]
 8103a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a88:	693b      	ldr	r3, [r7, #16]
 8103a8a:	43db      	mvns	r3, r3
 8103a8c:	69ba      	ldr	r2, [r7, #24]
 8103a8e:	4013      	ands	r3, r2
 8103a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103a92:	683b      	ldr	r3, [r7, #0]
 8103a94:	685b      	ldr	r3, [r3, #4]
 8103a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103a9a:	2b00      	cmp	r3, #0
 8103a9c:	d003      	beq.n	8103aa6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103a9e:	69ba      	ldr	r2, [r7, #24]
 8103aa0:	693b      	ldr	r3, [r7, #16]
 8103aa2:	4313      	orrs	r3, r2
 8103aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103aaa:	69bb      	ldr	r3, [r7, #24]
 8103aac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103ab2:	685b      	ldr	r3, [r3, #4]
 8103ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103ab6:	693b      	ldr	r3, [r7, #16]
 8103ab8:	43db      	mvns	r3, r3
 8103aba:	69ba      	ldr	r2, [r7, #24]
 8103abc:	4013      	ands	r3, r2
 8103abe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103ac0:	683b      	ldr	r3, [r7, #0]
 8103ac2:	685b      	ldr	r3, [r3, #4]
 8103ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103ac8:	2b00      	cmp	r3, #0
 8103aca:	d003      	beq.n	8103ad4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103acc:	69ba      	ldr	r2, [r7, #24]
 8103ace:	693b      	ldr	r3, [r7, #16]
 8103ad0:	4313      	orrs	r3, r2
 8103ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103ad8:	69bb      	ldr	r3, [r7, #24]
 8103ada:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103adc:	697b      	ldr	r3, [r7, #20]
 8103ade:	685b      	ldr	r3, [r3, #4]
 8103ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103ae2:	693b      	ldr	r3, [r7, #16]
 8103ae4:	43db      	mvns	r3, r3
 8103ae6:	69ba      	ldr	r2, [r7, #24]
 8103ae8:	4013      	ands	r3, r2
 8103aea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103aec:	683b      	ldr	r3, [r7, #0]
 8103aee:	685b      	ldr	r3, [r3, #4]
 8103af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	d003      	beq.n	8103b00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103af8:	69ba      	ldr	r2, [r7, #24]
 8103afa:	693b      	ldr	r3, [r7, #16]
 8103afc:	4313      	orrs	r3, r2
 8103afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103b00:	697b      	ldr	r3, [r7, #20]
 8103b02:	69ba      	ldr	r2, [r7, #24]
 8103b04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103b06:	697b      	ldr	r3, [r7, #20]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b0c:	693b      	ldr	r3, [r7, #16]
 8103b0e:	43db      	mvns	r3, r3
 8103b10:	69ba      	ldr	r2, [r7, #24]
 8103b12:	4013      	ands	r3, r2
 8103b14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103b16:	683b      	ldr	r3, [r7, #0]
 8103b18:	685b      	ldr	r3, [r3, #4]
 8103b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103b1e:	2b00      	cmp	r3, #0
 8103b20:	d003      	beq.n	8103b2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103b22:	69ba      	ldr	r2, [r7, #24]
 8103b24:	693b      	ldr	r3, [r7, #16]
 8103b26:	4313      	orrs	r3, r2
 8103b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103b2a:	697b      	ldr	r3, [r7, #20]
 8103b2c:	69ba      	ldr	r2, [r7, #24]
 8103b2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103b30:	69fb      	ldr	r3, [r7, #28]
 8103b32:	3301      	adds	r3, #1
 8103b34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103b36:	683b      	ldr	r3, [r7, #0]
 8103b38:	681a      	ldr	r2, [r3, #0]
 8103b3a:	69fb      	ldr	r3, [r7, #28]
 8103b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8103b40:	2b00      	cmp	r3, #0
 8103b42:	f47f ae63 	bne.w	810380c <HAL_GPIO_Init+0x14>
  }
}
 8103b46:	bf00      	nop
 8103b48:	bf00      	nop
 8103b4a:	3724      	adds	r7, #36	; 0x24
 8103b4c:	46bd      	mov	sp, r7
 8103b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b52:	4770      	bx	lr
 8103b54:	58000400 	.word	0x58000400

08103b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103b58:	b480      	push	{r7}
 8103b5a:	b083      	sub	sp, #12
 8103b5c:	af00      	add	r7, sp, #0
 8103b5e:	6078      	str	r0, [r7, #4]
 8103b60:	460b      	mov	r3, r1
 8103b62:	807b      	strh	r3, [r7, #2]
 8103b64:	4613      	mov	r3, r2
 8103b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103b68:	787b      	ldrb	r3, [r7, #1]
 8103b6a:	2b00      	cmp	r3, #0
 8103b6c:	d003      	beq.n	8103b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103b6e:	887a      	ldrh	r2, [r7, #2]
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103b74:	e003      	b.n	8103b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103b76:	887b      	ldrh	r3, [r7, #2]
 8103b78:	041a      	lsls	r2, r3, #16
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	619a      	str	r2, [r3, #24]
}
 8103b7e:	bf00      	nop
 8103b80:	370c      	adds	r7, #12
 8103b82:	46bd      	mov	sp, r7
 8103b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b88:	4770      	bx	lr

08103b8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103b8a:	b480      	push	{r7}
 8103b8c:	b085      	sub	sp, #20
 8103b8e:	af00      	add	r7, sp, #0
 8103b90:	6078      	str	r0, [r7, #4]
 8103b92:	460b      	mov	r3, r1
 8103b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	695b      	ldr	r3, [r3, #20]
 8103b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8103b9c:	887a      	ldrh	r2, [r7, #2]
 8103b9e:	68fb      	ldr	r3, [r7, #12]
 8103ba0:	4013      	ands	r3, r2
 8103ba2:	041a      	lsls	r2, r3, #16
 8103ba4:	68fb      	ldr	r3, [r7, #12]
 8103ba6:	43d9      	mvns	r1, r3
 8103ba8:	887b      	ldrh	r3, [r7, #2]
 8103baa:	400b      	ands	r3, r1
 8103bac:	431a      	orrs	r2, r3
 8103bae:	687b      	ldr	r3, [r7, #4]
 8103bb0:	619a      	str	r2, [r3, #24]
}
 8103bb2:	bf00      	nop
 8103bb4:	3714      	adds	r7, #20
 8103bb6:	46bd      	mov	sp, r7
 8103bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bbc:	4770      	bx	lr
	...

08103bc0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103bc0:	b480      	push	{r7}
 8103bc2:	b083      	sub	sp, #12
 8103bc4:	af00      	add	r7, sp, #0
 8103bc6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103bc8:	4b05      	ldr	r3, [pc, #20]	; (8103be0 <HAL_HSEM_ActivateNotification+0x20>)
 8103bca:	681a      	ldr	r2, [r3, #0]
 8103bcc:	4904      	ldr	r1, [pc, #16]	; (8103be0 <HAL_HSEM_ActivateNotification+0x20>)
 8103bce:	687b      	ldr	r3, [r7, #4]
 8103bd0:	4313      	orrs	r3, r2
 8103bd2:	600b      	str	r3, [r1, #0]
#endif
}
 8103bd4:	bf00      	nop
 8103bd6:	370c      	adds	r7, #12
 8103bd8:	46bd      	mov	sp, r7
 8103bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bde:	4770      	bx	lr
 8103be0:	58026510 	.word	0x58026510

08103be4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103be4:	b580      	push	{r7, lr}
 8103be6:	b084      	sub	sp, #16
 8103be8:	af00      	add	r7, sp, #0
 8103bea:	60f8      	str	r0, [r7, #12]
 8103bec:	460b      	mov	r3, r1
 8103bee:	607a      	str	r2, [r7, #4]
 8103bf0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103bf2:	4b37      	ldr	r3, [pc, #220]	; (8103cd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	f023 0201 	bic.w	r2, r3, #1
 8103bfa:	4935      	ldr	r1, [pc, #212]	; (8103cd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103bfc:	68fb      	ldr	r3, [r7, #12]
 8103bfe:	4313      	orrs	r3, r2
 8103c00:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	2b00      	cmp	r3, #0
 8103c06:	d123      	bne.n	8103c50 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103c08:	f7fd fedc 	bl	81019c4 <HAL_GetCurrentCPUID>
 8103c0c:	4603      	mov	r3, r0
 8103c0e:	2b03      	cmp	r3, #3
 8103c10:	d158      	bne.n	8103cc4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103c12:	4b2f      	ldr	r3, [pc, #188]	; (8103cd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c14:	691b      	ldr	r3, [r3, #16]
 8103c16:	4a2e      	ldr	r2, [pc, #184]	; (8103cd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c18:	f023 0301 	bic.w	r3, r3, #1
 8103c1c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103c1e:	4b2d      	ldr	r3, [pc, #180]	; (8103cd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c20:	691b      	ldr	r3, [r3, #16]
 8103c22:	4a2c      	ldr	r2, [pc, #176]	; (8103cd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c24:	f043 0304 	orr.w	r3, r3, #4
 8103c28:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103c2a:	f3bf 8f4f 	dsb	sy
}
 8103c2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103c30:	f3bf 8f6f 	isb	sy
}
 8103c34:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103c36:	7afb      	ldrb	r3, [r7, #11]
 8103c38:	2b01      	cmp	r3, #1
 8103c3a:	d101      	bne.n	8103c40 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103c3c:	bf30      	wfi
 8103c3e:	e000      	b.n	8103c42 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103c40:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103c42:	4b24      	ldr	r3, [pc, #144]	; (8103cd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c44:	691b      	ldr	r3, [r3, #16]
 8103c46:	4a23      	ldr	r2, [pc, #140]	; (8103cd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c48:	f023 0304 	bic.w	r3, r3, #4
 8103c4c:	6113      	str	r3, [r2, #16]
 8103c4e:	e03c      	b.n	8103cca <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	2b01      	cmp	r3, #1
 8103c54:	d123      	bne.n	8103c9e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103c56:	f7fd feb5 	bl	81019c4 <HAL_GetCurrentCPUID>
 8103c5a:	4603      	mov	r3, r0
 8103c5c:	2b01      	cmp	r3, #1
 8103c5e:	d133      	bne.n	8103cc8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103c60:	4b1b      	ldr	r3, [pc, #108]	; (8103cd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c62:	695b      	ldr	r3, [r3, #20]
 8103c64:	4a1a      	ldr	r2, [pc, #104]	; (8103cd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c66:	f023 0302 	bic.w	r3, r3, #2
 8103c6a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103c6c:	4b19      	ldr	r3, [pc, #100]	; (8103cd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c6e:	691b      	ldr	r3, [r3, #16]
 8103c70:	4a18      	ldr	r2, [pc, #96]	; (8103cd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c72:	f043 0304 	orr.w	r3, r3, #4
 8103c76:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103c78:	f3bf 8f4f 	dsb	sy
}
 8103c7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103c7e:	f3bf 8f6f 	isb	sy
}
 8103c82:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103c84:	7afb      	ldrb	r3, [r7, #11]
 8103c86:	2b01      	cmp	r3, #1
 8103c88:	d101      	bne.n	8103c8e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103c8a:	bf30      	wfi
 8103c8c:	e000      	b.n	8103c90 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103c8e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103c90:	4b10      	ldr	r3, [pc, #64]	; (8103cd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c92:	691b      	ldr	r3, [r3, #16]
 8103c94:	4a0f      	ldr	r2, [pc, #60]	; (8103cd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c96:	f023 0304 	bic.w	r3, r3, #4
 8103c9a:	6113      	str	r3, [r2, #16]
 8103c9c:	e015      	b.n	8103cca <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103c9e:	f7fd fe91 	bl	81019c4 <HAL_GetCurrentCPUID>
 8103ca2:	4603      	mov	r3, r0
 8103ca4:	2b03      	cmp	r3, #3
 8103ca6:	d106      	bne.n	8103cb6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103ca8:	4b09      	ldr	r3, [pc, #36]	; (8103cd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103caa:	691b      	ldr	r3, [r3, #16]
 8103cac:	4a08      	ldr	r2, [pc, #32]	; (8103cd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103cae:	f023 0304 	bic.w	r3, r3, #4
 8103cb2:	6113      	str	r3, [r2, #16]
 8103cb4:	e009      	b.n	8103cca <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103cb6:	4b06      	ldr	r3, [pc, #24]	; (8103cd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103cb8:	695b      	ldr	r3, [r3, #20]
 8103cba:	4a05      	ldr	r2, [pc, #20]	; (8103cd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103cbc:	f023 0304 	bic.w	r3, r3, #4
 8103cc0:	6153      	str	r3, [r2, #20]
 8103cc2:	e002      	b.n	8103cca <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103cc4:	bf00      	nop
 8103cc6:	e000      	b.n	8103cca <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103cc8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103cca:	3710      	adds	r7, #16
 8103ccc:	46bd      	mov	sp, r7
 8103cce:	bd80      	pop	{r7, pc}
 8103cd0:	58024800 	.word	0x58024800
 8103cd4:	e000ed00 	.word	0xe000ed00

08103cd8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103cd8:	b580      	push	{r7, lr}
 8103cda:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103cdc:	f7fd fe72 	bl	81019c4 <HAL_GetCurrentCPUID>
 8103ce0:	4603      	mov	r3, r0
 8103ce2:	2b03      	cmp	r3, #3
 8103ce4:	d101      	bne.n	8103cea <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103ce6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103ce8:	e001      	b.n	8103cee <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103cea:	bf40      	sev
    __WFE ();
 8103cec:	bf20      	wfe
}
 8103cee:	bf00      	nop
 8103cf0:	bd80      	pop	{r7, pc}
	...

08103cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103cf4:	b480      	push	{r7}
 8103cf6:	b089      	sub	sp, #36	; 0x24
 8103cf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103cfa:	4bb3      	ldr	r3, [pc, #716]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cfc:	691b      	ldr	r3, [r3, #16]
 8103cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103d02:	2b18      	cmp	r3, #24
 8103d04:	f200 8155 	bhi.w	8103fb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8103d08:	a201      	add	r2, pc, #4	; (adr r2, 8103d10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d0e:	bf00      	nop
 8103d10:	08103d75 	.word	0x08103d75
 8103d14:	08103fb3 	.word	0x08103fb3
 8103d18:	08103fb3 	.word	0x08103fb3
 8103d1c:	08103fb3 	.word	0x08103fb3
 8103d20:	08103fb3 	.word	0x08103fb3
 8103d24:	08103fb3 	.word	0x08103fb3
 8103d28:	08103fb3 	.word	0x08103fb3
 8103d2c:	08103fb3 	.word	0x08103fb3
 8103d30:	08103d9b 	.word	0x08103d9b
 8103d34:	08103fb3 	.word	0x08103fb3
 8103d38:	08103fb3 	.word	0x08103fb3
 8103d3c:	08103fb3 	.word	0x08103fb3
 8103d40:	08103fb3 	.word	0x08103fb3
 8103d44:	08103fb3 	.word	0x08103fb3
 8103d48:	08103fb3 	.word	0x08103fb3
 8103d4c:	08103fb3 	.word	0x08103fb3
 8103d50:	08103da1 	.word	0x08103da1
 8103d54:	08103fb3 	.word	0x08103fb3
 8103d58:	08103fb3 	.word	0x08103fb3
 8103d5c:	08103fb3 	.word	0x08103fb3
 8103d60:	08103fb3 	.word	0x08103fb3
 8103d64:	08103fb3 	.word	0x08103fb3
 8103d68:	08103fb3 	.word	0x08103fb3
 8103d6c:	08103fb3 	.word	0x08103fb3
 8103d70:	08103da7 	.word	0x08103da7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103d74:	4b94      	ldr	r3, [pc, #592]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d76:	681b      	ldr	r3, [r3, #0]
 8103d78:	f003 0320 	and.w	r3, r3, #32
 8103d7c:	2b00      	cmp	r3, #0
 8103d7e:	d009      	beq.n	8103d94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103d80:	4b91      	ldr	r3, [pc, #580]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	08db      	lsrs	r3, r3, #3
 8103d86:	f003 0303 	and.w	r3, r3, #3
 8103d8a:	4a90      	ldr	r2, [pc, #576]	; (8103fcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8103d90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103d92:	e111      	b.n	8103fb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103d94:	4b8d      	ldr	r3, [pc, #564]	; (8103fcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103d96:	61bb      	str	r3, [r7, #24]
    break;
 8103d98:	e10e      	b.n	8103fb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103d9a:	4b8d      	ldr	r3, [pc, #564]	; (8103fd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103d9c:	61bb      	str	r3, [r7, #24]
    break;
 8103d9e:	e10b      	b.n	8103fb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103da0:	4b8c      	ldr	r3, [pc, #560]	; (8103fd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103da2:	61bb      	str	r3, [r7, #24]
    break;
 8103da4:	e108      	b.n	8103fb8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103da6:	4b88      	ldr	r3, [pc, #544]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103daa:	f003 0303 	and.w	r3, r3, #3
 8103dae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103db0:	4b85      	ldr	r3, [pc, #532]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103db4:	091b      	lsrs	r3, r3, #4
 8103db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103dba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103dbc:	4b82      	ldr	r3, [pc, #520]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dc0:	f003 0301 	and.w	r3, r3, #1
 8103dc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103dc6:	4b80      	ldr	r3, [pc, #512]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103dca:	08db      	lsrs	r3, r3, #3
 8103dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103dd0:	68fa      	ldr	r2, [r7, #12]
 8103dd2:	fb02 f303 	mul.w	r3, r2, r3
 8103dd6:	ee07 3a90 	vmov	s15, r3
 8103dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103de2:	693b      	ldr	r3, [r7, #16]
 8103de4:	2b00      	cmp	r3, #0
 8103de6:	f000 80e1 	beq.w	8103fac <HAL_RCC_GetSysClockFreq+0x2b8>
 8103dea:	697b      	ldr	r3, [r7, #20]
 8103dec:	2b02      	cmp	r3, #2
 8103dee:	f000 8083 	beq.w	8103ef8 <HAL_RCC_GetSysClockFreq+0x204>
 8103df2:	697b      	ldr	r3, [r7, #20]
 8103df4:	2b02      	cmp	r3, #2
 8103df6:	f200 80a1 	bhi.w	8103f3c <HAL_RCC_GetSysClockFreq+0x248>
 8103dfa:	697b      	ldr	r3, [r7, #20]
 8103dfc:	2b00      	cmp	r3, #0
 8103dfe:	d003      	beq.n	8103e08 <HAL_RCC_GetSysClockFreq+0x114>
 8103e00:	697b      	ldr	r3, [r7, #20]
 8103e02:	2b01      	cmp	r3, #1
 8103e04:	d056      	beq.n	8103eb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103e06:	e099      	b.n	8103f3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103e08:	4b6f      	ldr	r3, [pc, #444]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e0a:	681b      	ldr	r3, [r3, #0]
 8103e0c:	f003 0320 	and.w	r3, r3, #32
 8103e10:	2b00      	cmp	r3, #0
 8103e12:	d02d      	beq.n	8103e70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103e14:	4b6c      	ldr	r3, [pc, #432]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	08db      	lsrs	r3, r3, #3
 8103e1a:	f003 0303 	and.w	r3, r3, #3
 8103e1e:	4a6b      	ldr	r2, [pc, #428]	; (8103fcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103e20:	fa22 f303 	lsr.w	r3, r2, r3
 8103e24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	ee07 3a90 	vmov	s15, r3
 8103e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e30:	693b      	ldr	r3, [r7, #16]
 8103e32:	ee07 3a90 	vmov	s15, r3
 8103e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e3e:	4b62      	ldr	r3, [pc, #392]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e46:	ee07 3a90 	vmov	s15, r3
 8103e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e52:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103fd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103e6e:	e087      	b.n	8103f80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103e70:	693b      	ldr	r3, [r7, #16]
 8103e72:	ee07 3a90 	vmov	s15, r3
 8103e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103fdc <HAL_RCC_GetSysClockFreq+0x2e8>
 8103e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e82:	4b51      	ldr	r3, [pc, #324]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e8a:	ee07 3a90 	vmov	s15, r3
 8103e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e96:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103fd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103eb2:	e065      	b.n	8103f80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103eb4:	693b      	ldr	r3, [r7, #16]
 8103eb6:	ee07 3a90 	vmov	s15, r3
 8103eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ebe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103fe0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ec6:	4b40      	ldr	r3, [pc, #256]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ece:	ee07 3a90 	vmov	s15, r3
 8103ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8103eda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103fd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103ef6:	e043      	b.n	8103f80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103ef8:	693b      	ldr	r3, [r7, #16]
 8103efa:	ee07 3a90 	vmov	s15, r3
 8103efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103fe4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f0a:	4b2f      	ldr	r3, [pc, #188]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f12:	ee07 3a90 	vmov	s15, r3
 8103f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103f1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103fd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103f3a:	e021      	b.n	8103f80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103f3c:	693b      	ldr	r3, [r7, #16]
 8103f3e:	ee07 3a90 	vmov	s15, r3
 8103f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103fe0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f4e:	4b1e      	ldr	r3, [pc, #120]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f56:	ee07 3a90 	vmov	s15, r3
 8103f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103f62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103fd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103f7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103f80:	4b11      	ldr	r3, [pc, #68]	; (8103fc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103f84:	0a5b      	lsrs	r3, r3, #9
 8103f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103f8a:	3301      	adds	r3, #1
 8103f8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103f8e:	683b      	ldr	r3, [r7, #0]
 8103f90:	ee07 3a90 	vmov	s15, r3
 8103f94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8103f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103fa4:	ee17 3a90 	vmov	r3, s15
 8103fa8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103faa:	e005      	b.n	8103fb8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103fac:	2300      	movs	r3, #0
 8103fae:	61bb      	str	r3, [r7, #24]
    break;
 8103fb0:	e002      	b.n	8103fb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103fb2:	4b07      	ldr	r3, [pc, #28]	; (8103fd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103fb4:	61bb      	str	r3, [r7, #24]
    break;
 8103fb6:	bf00      	nop
  }

  return sysclockfreq;
 8103fb8:	69bb      	ldr	r3, [r7, #24]
}
 8103fba:	4618      	mov	r0, r3
 8103fbc:	3724      	adds	r7, #36	; 0x24
 8103fbe:	46bd      	mov	sp, r7
 8103fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fc4:	4770      	bx	lr
 8103fc6:	bf00      	nop
 8103fc8:	58024400 	.word	0x58024400
 8103fcc:	03d09000 	.word	0x03d09000
 8103fd0:	003d0900 	.word	0x003d0900
 8103fd4:	007a1200 	.word	0x007a1200
 8103fd8:	46000000 	.word	0x46000000
 8103fdc:	4c742400 	.word	0x4c742400
 8103fe0:	4a742400 	.word	0x4a742400
 8103fe4:	4af42400 	.word	0x4af42400

08103fe8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8103fe8:	b580      	push	{r7, lr}
 8103fea:	b084      	sub	sp, #16
 8103fec:	af00      	add	r7, sp, #0
 8103fee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8103ff0:	687b      	ldr	r3, [r7, #4]
 8103ff2:	2b00      	cmp	r3, #0
 8103ff4:	d101      	bne.n	8103ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8103ff6:	2301      	movs	r3, #1
 8103ff8:	e0f1      	b.n	81041de <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8103ffa:	687b      	ldr	r3, [r7, #4]
 8103ffc:	2200      	movs	r2, #0
 8103ffe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	4a78      	ldr	r2, [pc, #480]	; (81041e8 <HAL_SPI_Init+0x200>)
 8104006:	4293      	cmp	r3, r2
 8104008:	d00f      	beq.n	810402a <HAL_SPI_Init+0x42>
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	4a77      	ldr	r2, [pc, #476]	; (81041ec <HAL_SPI_Init+0x204>)
 8104010:	4293      	cmp	r3, r2
 8104012:	d00a      	beq.n	810402a <HAL_SPI_Init+0x42>
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	4a75      	ldr	r2, [pc, #468]	; (81041f0 <HAL_SPI_Init+0x208>)
 810401a:	4293      	cmp	r3, r2
 810401c:	d005      	beq.n	810402a <HAL_SPI_Init+0x42>
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	68db      	ldr	r3, [r3, #12]
 8104022:	2b0f      	cmp	r3, #15
 8104024:	d901      	bls.n	810402a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8104026:	2301      	movs	r3, #1
 8104028:	e0d9      	b.n	81041de <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810402a:	6878      	ldr	r0, [r7, #4]
 810402c:	f000 ffd2 	bl	8104fd4 <SPI_GetPacketSize>
 8104030:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	681b      	ldr	r3, [r3, #0]
 8104036:	4a6c      	ldr	r2, [pc, #432]	; (81041e8 <HAL_SPI_Init+0x200>)
 8104038:	4293      	cmp	r3, r2
 810403a:	d00c      	beq.n	8104056 <HAL_SPI_Init+0x6e>
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	681b      	ldr	r3, [r3, #0]
 8104040:	4a6a      	ldr	r2, [pc, #424]	; (81041ec <HAL_SPI_Init+0x204>)
 8104042:	4293      	cmp	r3, r2
 8104044:	d007      	beq.n	8104056 <HAL_SPI_Init+0x6e>
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	4a69      	ldr	r2, [pc, #420]	; (81041f0 <HAL_SPI_Init+0x208>)
 810404c:	4293      	cmp	r3, r2
 810404e:	d002      	beq.n	8104056 <HAL_SPI_Init+0x6e>
 8104050:	68fb      	ldr	r3, [r7, #12]
 8104052:	2b08      	cmp	r3, #8
 8104054:	d811      	bhi.n	810407a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810405a:	4a63      	ldr	r2, [pc, #396]	; (81041e8 <HAL_SPI_Init+0x200>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d009      	beq.n	8104074 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	4a61      	ldr	r2, [pc, #388]	; (81041ec <HAL_SPI_Init+0x204>)
 8104066:	4293      	cmp	r3, r2
 8104068:	d004      	beq.n	8104074 <HAL_SPI_Init+0x8c>
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	681b      	ldr	r3, [r3, #0]
 810406e:	4a60      	ldr	r2, [pc, #384]	; (81041f0 <HAL_SPI_Init+0x208>)
 8104070:	4293      	cmp	r3, r2
 8104072:	d104      	bne.n	810407e <HAL_SPI_Init+0x96>
 8104074:	68fb      	ldr	r3, [r7, #12]
 8104076:	2b10      	cmp	r3, #16
 8104078:	d901      	bls.n	810407e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810407a:	2301      	movs	r3, #1
 810407c:	e0af      	b.n	81041de <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104084:	b2db      	uxtb	r3, r3
 8104086:	2b00      	cmp	r3, #0
 8104088:	d106      	bne.n	8104098 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	2200      	movs	r2, #0
 810408e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8104092:	6878      	ldr	r0, [r7, #4]
 8104094:	f7fd f966 	bl	8101364 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	2202      	movs	r2, #2
 810409c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81040a0:	687b      	ldr	r3, [r7, #4]
 81040a2:	681b      	ldr	r3, [r3, #0]
 81040a4:	681a      	ldr	r2, [r3, #0]
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	f022 0201 	bic.w	r2, r2, #1
 81040ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	689b      	ldr	r3, [r3, #8]
 81040b6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 81040ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	699b      	ldr	r3, [r3, #24]
 81040c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81040c4:	d119      	bne.n	81040fa <HAL_SPI_Init+0x112>
 81040c6:	687b      	ldr	r3, [r7, #4]
 81040c8:	685b      	ldr	r3, [r3, #4]
 81040ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81040ce:	d103      	bne.n	81040d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81040d4:	2b00      	cmp	r3, #0
 81040d6:	d008      	beq.n	81040ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81040dc:	2b00      	cmp	r3, #0
 81040de:	d10c      	bne.n	81040fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81040e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81040e8:	d107      	bne.n	81040fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	681b      	ldr	r3, [r3, #0]
 81040ee:	681a      	ldr	r2, [r3, #0]
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	681b      	ldr	r3, [r3, #0]
 81040f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81040f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	69da      	ldr	r2, [r3, #28]
 81040fe:	687b      	ldr	r3, [r7, #4]
 8104100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104102:	431a      	orrs	r2, r3
 8104104:	68bb      	ldr	r3, [r7, #8]
 8104106:	431a      	orrs	r2, r3
 8104108:	687b      	ldr	r3, [r7, #4]
 810410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810410c:	ea42 0103 	orr.w	r1, r2, r3
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	68da      	ldr	r2, [r3, #12]
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	430a      	orrs	r2, r1
 810411a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104124:	431a      	orrs	r2, r3
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810412a:	431a      	orrs	r2, r3
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	699b      	ldr	r3, [r3, #24]
 8104130:	431a      	orrs	r2, r3
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	691b      	ldr	r3, [r3, #16]
 8104136:	431a      	orrs	r2, r3
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	695b      	ldr	r3, [r3, #20]
 810413c:	431a      	orrs	r2, r3
 810413e:	687b      	ldr	r3, [r7, #4]
 8104140:	6a1b      	ldr	r3, [r3, #32]
 8104142:	431a      	orrs	r2, r3
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	685b      	ldr	r3, [r3, #4]
 8104148:	431a      	orrs	r2, r3
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810414e:	431a      	orrs	r2, r3
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	689b      	ldr	r3, [r3, #8]
 8104154:	431a      	orrs	r2, r3
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810415a:	ea42 0103 	orr.w	r1, r2, r3
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8104162:	687b      	ldr	r3, [r7, #4]
 8104164:	681b      	ldr	r3, [r3, #0]
 8104166:	430a      	orrs	r2, r1
 8104168:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810416a:	687b      	ldr	r3, [r7, #4]
 810416c:	685b      	ldr	r3, [r3, #4]
 810416e:	2b00      	cmp	r3, #0
 8104170:	d113      	bne.n	810419a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8104172:	687b      	ldr	r3, [r7, #4]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	689b      	ldr	r3, [r3, #8]
 8104178:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104184:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	689b      	ldr	r3, [r3, #8]
 810418c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8104198:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810419a:	687b      	ldr	r3, [r7, #4]
 810419c:	681b      	ldr	r3, [r3, #0]
 810419e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	f022 0201 	bic.w	r2, r2, #1
 81041a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	685b      	ldr	r3, [r3, #4]
 81041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81041b2:	2b00      	cmp	r3, #0
 81041b4:	d00a      	beq.n	81041cc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	681b      	ldr	r3, [r3, #0]
 81041ba:	68db      	ldr	r3, [r3, #12]
 81041bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	430a      	orrs	r2, r1
 81041ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	2200      	movs	r2, #0
 81041d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81041d4:	687b      	ldr	r3, [r7, #4]
 81041d6:	2201      	movs	r2, #1
 81041d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 81041dc:	2300      	movs	r3, #0
}
 81041de:	4618      	mov	r0, r3
 81041e0:	3710      	adds	r7, #16
 81041e2:	46bd      	mov	sp, r7
 81041e4:	bd80      	pop	{r7, pc}
 81041e6:	bf00      	nop
 81041e8:	40013000 	.word	0x40013000
 81041ec:	40003800 	.word	0x40003800
 81041f0:	40003c00 	.word	0x40003c00

081041f4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81041f4:	b580      	push	{r7, lr}
 81041f6:	b08a      	sub	sp, #40	; 0x28
 81041f8:	af02      	add	r7, sp, #8
 81041fa:	60f8      	str	r0, [r7, #12]
 81041fc:	60b9      	str	r1, [r7, #8]
 81041fe:	603b      	str	r3, [r7, #0]
 8104200:	4613      	mov	r3, r2
 8104202:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104204:	68fb      	ldr	r3, [r7, #12]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	3320      	adds	r3, #32
 810420a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810420c:	2300      	movs	r3, #0
 810420e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104210:	68fb      	ldr	r3, [r7, #12]
 8104212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104216:	2b01      	cmp	r3, #1
 8104218:	d101      	bne.n	810421e <HAL_SPI_Transmit+0x2a>
 810421a:	2302      	movs	r3, #2
 810421c:	e1d4      	b.n	81045c8 <HAL_SPI_Transmit+0x3d4>
 810421e:	68fb      	ldr	r3, [r7, #12]
 8104220:	2201      	movs	r2, #1
 8104222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104226:	f7fd fa8d 	bl	8101744 <HAL_GetTick>
 810422a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 810422c:	68fb      	ldr	r3, [r7, #12]
 810422e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104232:	b2db      	uxtb	r3, r3
 8104234:	2b01      	cmp	r3, #1
 8104236:	d007      	beq.n	8104248 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8104238:	2302      	movs	r3, #2
 810423a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 810423c:	68fb      	ldr	r3, [r7, #12]
 810423e:	2200      	movs	r2, #0
 8104240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104244:	7efb      	ldrb	r3, [r7, #27]
 8104246:	e1bf      	b.n	81045c8 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8104248:	68bb      	ldr	r3, [r7, #8]
 810424a:	2b00      	cmp	r3, #0
 810424c:	d002      	beq.n	8104254 <HAL_SPI_Transmit+0x60>
 810424e:	88fb      	ldrh	r3, [r7, #6]
 8104250:	2b00      	cmp	r3, #0
 8104252:	d107      	bne.n	8104264 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8104254:	2301      	movs	r3, #1
 8104256:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8104258:	68fb      	ldr	r3, [r7, #12]
 810425a:	2200      	movs	r2, #0
 810425c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104260:	7efb      	ldrb	r3, [r7, #27]
 8104262:	e1b1      	b.n	81045c8 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8104264:	68fb      	ldr	r3, [r7, #12]
 8104266:	2203      	movs	r2, #3
 8104268:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810426c:	68fb      	ldr	r3, [r7, #12]
 810426e:	2200      	movs	r2, #0
 8104270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8104274:	68fb      	ldr	r3, [r7, #12]
 8104276:	68ba      	ldr	r2, [r7, #8]
 8104278:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810427a:	68fb      	ldr	r3, [r7, #12]
 810427c:	88fa      	ldrh	r2, [r7, #6]
 810427e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8104282:	68fb      	ldr	r3, [r7, #12]
 8104284:	88fa      	ldrh	r2, [r7, #6]
 8104286:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 810428a:	68fb      	ldr	r3, [r7, #12]
 810428c:	2200      	movs	r2, #0
 810428e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8104290:	68fb      	ldr	r3, [r7, #12]
 8104292:	2200      	movs	r2, #0
 8104294:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8104298:	68fb      	ldr	r3, [r7, #12]
 810429a:	2200      	movs	r2, #0
 810429c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 81042a0:	68fb      	ldr	r3, [r7, #12]
 81042a2:	2200      	movs	r2, #0
 81042a4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 81042a6:	68fb      	ldr	r3, [r7, #12]
 81042a8:	2200      	movs	r2, #0
 81042aa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 81042ac:	68fb      	ldr	r3, [r7, #12]
 81042ae:	689b      	ldr	r3, [r3, #8]
 81042b0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 81042b4:	d107      	bne.n	81042c6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 81042b6:	68fb      	ldr	r3, [r7, #12]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	681a      	ldr	r2, [r3, #0]
 81042bc:	68fb      	ldr	r3, [r7, #12]
 81042be:	681b      	ldr	r3, [r3, #0]
 81042c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81042c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81042c6:	68fb      	ldr	r3, [r7, #12]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	685b      	ldr	r3, [r3, #4]
 81042cc:	0c1b      	lsrs	r3, r3, #16
 81042ce:	041b      	lsls	r3, r3, #16
 81042d0:	88f9      	ldrh	r1, [r7, #6]
 81042d2:	68fa      	ldr	r2, [r7, #12]
 81042d4:	6812      	ldr	r2, [r2, #0]
 81042d6:	430b      	orrs	r3, r1
 81042d8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 81042da:	68fb      	ldr	r3, [r7, #12]
 81042dc:	681b      	ldr	r3, [r3, #0]
 81042de:	681a      	ldr	r2, [r3, #0]
 81042e0:	68fb      	ldr	r3, [r7, #12]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	f042 0201 	orr.w	r2, r2, #1
 81042e8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81042ea:	68fb      	ldr	r3, [r7, #12]
 81042ec:	685b      	ldr	r3, [r3, #4]
 81042ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81042f2:	d107      	bne.n	8104304 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81042f4:	68fb      	ldr	r3, [r7, #12]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	681a      	ldr	r2, [r3, #0]
 81042fa:	68fb      	ldr	r3, [r7, #12]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	68db      	ldr	r3, [r3, #12]
 8104308:	2b0f      	cmp	r3, #15
 810430a:	d947      	bls.n	810439c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810430c:	e03f      	b.n	810438e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810430e:	68fb      	ldr	r3, [r7, #12]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	695b      	ldr	r3, [r3, #20]
 8104314:	f003 0302 	and.w	r3, r3, #2
 8104318:	2b02      	cmp	r3, #2
 810431a:	d114      	bne.n	8104346 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810431c:	68fb      	ldr	r3, [r7, #12]
 810431e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104320:	68fb      	ldr	r3, [r7, #12]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	6812      	ldr	r2, [r2, #0]
 8104326:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104328:	68fb      	ldr	r3, [r7, #12]
 810432a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810432c:	1d1a      	adds	r2, r3, #4
 810432e:	68fb      	ldr	r3, [r7, #12]
 8104330:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8104332:	68fb      	ldr	r3, [r7, #12]
 8104334:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104338:	b29b      	uxth	r3, r3
 810433a:	3b01      	subs	r3, #1
 810433c:	b29a      	uxth	r2, r3
 810433e:	68fb      	ldr	r3, [r7, #12]
 8104340:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104344:	e023      	b.n	810438e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104346:	f7fd f9fd 	bl	8101744 <HAL_GetTick>
 810434a:	4602      	mov	r2, r0
 810434c:	697b      	ldr	r3, [r7, #20]
 810434e:	1ad3      	subs	r3, r2, r3
 8104350:	683a      	ldr	r2, [r7, #0]
 8104352:	429a      	cmp	r2, r3
 8104354:	d803      	bhi.n	810435e <HAL_SPI_Transmit+0x16a>
 8104356:	683b      	ldr	r3, [r7, #0]
 8104358:	f1b3 3fff 	cmp.w	r3, #4294967295
 810435c:	d102      	bne.n	8104364 <HAL_SPI_Transmit+0x170>
 810435e:	683b      	ldr	r3, [r7, #0]
 8104360:	2b00      	cmp	r3, #0
 8104362:	d114      	bne.n	810438e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104364:	68f8      	ldr	r0, [r7, #12]
 8104366:	f000 fd67 	bl	8104e38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810436a:	68fb      	ldr	r3, [r7, #12]
 810436c:	2200      	movs	r2, #0
 810436e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104378:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810437c:	68fb      	ldr	r3, [r7, #12]
 810437e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104382:	68fb      	ldr	r3, [r7, #12]
 8104384:	2201      	movs	r2, #1
 8104386:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810438a:	2303      	movs	r3, #3
 810438c:	e11c      	b.n	81045c8 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810438e:	68fb      	ldr	r3, [r7, #12]
 8104390:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104394:	b29b      	uxth	r3, r3
 8104396:	2b00      	cmp	r3, #0
 8104398:	d1b9      	bne.n	810430e <HAL_SPI_Transmit+0x11a>
 810439a:	e0ef      	b.n	810457c <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810439c:	68fb      	ldr	r3, [r7, #12]
 810439e:	68db      	ldr	r3, [r3, #12]
 81043a0:	2b07      	cmp	r3, #7
 81043a2:	f240 80e4 	bls.w	810456e <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81043a6:	e05d      	b.n	8104464 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81043a8:	68fb      	ldr	r3, [r7, #12]
 81043aa:	681b      	ldr	r3, [r3, #0]
 81043ac:	695b      	ldr	r3, [r3, #20]
 81043ae:	f003 0302 	and.w	r3, r3, #2
 81043b2:	2b02      	cmp	r3, #2
 81043b4:	d132      	bne.n	810441c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81043b6:	68fb      	ldr	r3, [r7, #12]
 81043b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81043bc:	b29b      	uxth	r3, r3
 81043be:	2b01      	cmp	r3, #1
 81043c0:	d918      	bls.n	81043f4 <HAL_SPI_Transmit+0x200>
 81043c2:	68fb      	ldr	r3, [r7, #12]
 81043c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81043c6:	2b00      	cmp	r3, #0
 81043c8:	d014      	beq.n	81043f4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81043ca:	68fb      	ldr	r3, [r7, #12]
 81043cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81043ce:	68fb      	ldr	r3, [r7, #12]
 81043d0:	681b      	ldr	r3, [r3, #0]
 81043d2:	6812      	ldr	r2, [r2, #0]
 81043d4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81043da:	1d1a      	adds	r2, r3, #4
 81043dc:	68fb      	ldr	r3, [r7, #12]
 81043de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81043e6:	b29b      	uxth	r3, r3
 81043e8:	3b02      	subs	r3, #2
 81043ea:	b29a      	uxth	r2, r3
 81043ec:	68fb      	ldr	r3, [r7, #12]
 81043ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81043f2:	e037      	b.n	8104464 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81043f4:	68fb      	ldr	r3, [r7, #12]
 81043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81043f8:	881a      	ldrh	r2, [r3, #0]
 81043fa:	69fb      	ldr	r3, [r7, #28]
 81043fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81043fe:	68fb      	ldr	r3, [r7, #12]
 8104400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104402:	1c9a      	adds	r2, r3, #2
 8104404:	68fb      	ldr	r3, [r7, #12]
 8104406:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810440e:	b29b      	uxth	r3, r3
 8104410:	3b01      	subs	r3, #1
 8104412:	b29a      	uxth	r2, r3
 8104414:	68fb      	ldr	r3, [r7, #12]
 8104416:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810441a:	e023      	b.n	8104464 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810441c:	f7fd f992 	bl	8101744 <HAL_GetTick>
 8104420:	4602      	mov	r2, r0
 8104422:	697b      	ldr	r3, [r7, #20]
 8104424:	1ad3      	subs	r3, r2, r3
 8104426:	683a      	ldr	r2, [r7, #0]
 8104428:	429a      	cmp	r2, r3
 810442a:	d803      	bhi.n	8104434 <HAL_SPI_Transmit+0x240>
 810442c:	683b      	ldr	r3, [r7, #0]
 810442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104432:	d102      	bne.n	810443a <HAL_SPI_Transmit+0x246>
 8104434:	683b      	ldr	r3, [r7, #0]
 8104436:	2b00      	cmp	r3, #0
 8104438:	d114      	bne.n	8104464 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810443a:	68f8      	ldr	r0, [r7, #12]
 810443c:	f000 fcfc 	bl	8104e38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104440:	68fb      	ldr	r3, [r7, #12]
 8104442:	2200      	movs	r2, #0
 8104444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104448:	68fb      	ldr	r3, [r7, #12]
 810444a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810444e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104452:	68fb      	ldr	r3, [r7, #12]
 8104454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104458:	68fb      	ldr	r3, [r7, #12]
 810445a:	2201      	movs	r2, #1
 810445c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104460:	2303      	movs	r3, #3
 8104462:	e0b1      	b.n	81045c8 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8104464:	68fb      	ldr	r3, [r7, #12]
 8104466:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810446a:	b29b      	uxth	r3, r3
 810446c:	2b00      	cmp	r3, #0
 810446e:	d19b      	bne.n	81043a8 <HAL_SPI_Transmit+0x1b4>
 8104470:	e084      	b.n	810457c <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104472:	68fb      	ldr	r3, [r7, #12]
 8104474:	681b      	ldr	r3, [r3, #0]
 8104476:	695b      	ldr	r3, [r3, #20]
 8104478:	f003 0302 	and.w	r3, r3, #2
 810447c:	2b02      	cmp	r3, #2
 810447e:	d152      	bne.n	8104526 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8104480:	68fb      	ldr	r3, [r7, #12]
 8104482:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104486:	b29b      	uxth	r3, r3
 8104488:	2b03      	cmp	r3, #3
 810448a:	d918      	bls.n	81044be <HAL_SPI_Transmit+0x2ca>
 810448c:	68fb      	ldr	r3, [r7, #12]
 810448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104490:	2b40      	cmp	r3, #64	; 0x40
 8104492:	d914      	bls.n	81044be <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104494:	68fb      	ldr	r3, [r7, #12]
 8104496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104498:	68fb      	ldr	r3, [r7, #12]
 810449a:	681b      	ldr	r3, [r3, #0]
 810449c:	6812      	ldr	r2, [r2, #0]
 810449e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81044a0:	68fb      	ldr	r3, [r7, #12]
 81044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81044a4:	1d1a      	adds	r2, r3, #4
 81044a6:	68fb      	ldr	r3, [r7, #12]
 81044a8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 81044aa:	68fb      	ldr	r3, [r7, #12]
 81044ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81044b0:	b29b      	uxth	r3, r3
 81044b2:	3b04      	subs	r3, #4
 81044b4:	b29a      	uxth	r2, r3
 81044b6:	68fb      	ldr	r3, [r7, #12]
 81044b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81044bc:	e057      	b.n	810456e <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81044be:	68fb      	ldr	r3, [r7, #12]
 81044c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81044c4:	b29b      	uxth	r3, r3
 81044c6:	2b01      	cmp	r3, #1
 81044c8:	d917      	bls.n	81044fa <HAL_SPI_Transmit+0x306>
 81044ca:	68fb      	ldr	r3, [r7, #12]
 81044cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81044ce:	2b00      	cmp	r3, #0
 81044d0:	d013      	beq.n	81044fa <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81044d2:	68fb      	ldr	r3, [r7, #12]
 81044d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81044d6:	881a      	ldrh	r2, [r3, #0]
 81044d8:	69fb      	ldr	r3, [r7, #28]
 81044da:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81044dc:	68fb      	ldr	r3, [r7, #12]
 81044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81044e0:	1c9a      	adds	r2, r3, #2
 81044e2:	68fb      	ldr	r3, [r7, #12]
 81044e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81044e6:	68fb      	ldr	r3, [r7, #12]
 81044e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81044ec:	b29b      	uxth	r3, r3
 81044ee:	3b02      	subs	r3, #2
 81044f0:	b29a      	uxth	r2, r3
 81044f2:	68fb      	ldr	r3, [r7, #12]
 81044f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81044f8:	e039      	b.n	810456e <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 81044fa:	68fb      	ldr	r3, [r7, #12]
 81044fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81044fe:	68fb      	ldr	r3, [r7, #12]
 8104500:	681b      	ldr	r3, [r3, #0]
 8104502:	3320      	adds	r3, #32
 8104504:	7812      	ldrb	r2, [r2, #0]
 8104506:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104508:	68fb      	ldr	r3, [r7, #12]
 810450a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810450c:	1c5a      	adds	r2, r3, #1
 810450e:	68fb      	ldr	r3, [r7, #12]
 8104510:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104512:	68fb      	ldr	r3, [r7, #12]
 8104514:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104518:	b29b      	uxth	r3, r3
 810451a:	3b01      	subs	r3, #1
 810451c:	b29a      	uxth	r2, r3
 810451e:	68fb      	ldr	r3, [r7, #12]
 8104520:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104524:	e023      	b.n	810456e <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104526:	f7fd f90d 	bl	8101744 <HAL_GetTick>
 810452a:	4602      	mov	r2, r0
 810452c:	697b      	ldr	r3, [r7, #20]
 810452e:	1ad3      	subs	r3, r2, r3
 8104530:	683a      	ldr	r2, [r7, #0]
 8104532:	429a      	cmp	r2, r3
 8104534:	d803      	bhi.n	810453e <HAL_SPI_Transmit+0x34a>
 8104536:	683b      	ldr	r3, [r7, #0]
 8104538:	f1b3 3fff 	cmp.w	r3, #4294967295
 810453c:	d102      	bne.n	8104544 <HAL_SPI_Transmit+0x350>
 810453e:	683b      	ldr	r3, [r7, #0]
 8104540:	2b00      	cmp	r3, #0
 8104542:	d114      	bne.n	810456e <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104544:	68f8      	ldr	r0, [r7, #12]
 8104546:	f000 fc77 	bl	8104e38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810454a:	68fb      	ldr	r3, [r7, #12]
 810454c:	2200      	movs	r2, #0
 810454e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104552:	68fb      	ldr	r3, [r7, #12]
 8104554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104558:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810455c:	68fb      	ldr	r3, [r7, #12]
 810455e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104562:	68fb      	ldr	r3, [r7, #12]
 8104564:	2201      	movs	r2, #1
 8104566:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810456a:	2303      	movs	r3, #3
 810456c:	e02c      	b.n	81045c8 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810456e:	68fb      	ldr	r3, [r7, #12]
 8104570:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104574:	b29b      	uxth	r3, r3
 8104576:	2b00      	cmp	r3, #0
 8104578:	f47f af7b 	bne.w	8104472 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810457c:	683b      	ldr	r3, [r7, #0]
 810457e:	9300      	str	r3, [sp, #0]
 8104580:	697b      	ldr	r3, [r7, #20]
 8104582:	2200      	movs	r2, #0
 8104584:	2108      	movs	r1, #8
 8104586:	68f8      	ldr	r0, [r7, #12]
 8104588:	f000 fcf6 	bl	8104f78 <SPI_WaitOnFlagUntilTimeout>
 810458c:	4603      	mov	r3, r0
 810458e:	2b00      	cmp	r3, #0
 8104590:	d007      	beq.n	81045a2 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8104592:	68fb      	ldr	r3, [r7, #12]
 8104594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104598:	f043 0220 	orr.w	r2, r3, #32
 810459c:	68fb      	ldr	r3, [r7, #12]
 810459e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81045a2:	68f8      	ldr	r0, [r7, #12]
 81045a4:	f000 fc48 	bl	8104e38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81045a8:	68fb      	ldr	r3, [r7, #12]
 81045aa:	2200      	movs	r2, #0
 81045ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 81045b0:	68fb      	ldr	r3, [r7, #12]
 81045b2:	2201      	movs	r2, #1
 81045b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81045b8:	68fb      	ldr	r3, [r7, #12]
 81045ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81045be:	2b00      	cmp	r3, #0
 81045c0:	d001      	beq.n	81045c6 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 81045c2:	2301      	movs	r3, #1
 81045c4:	e000      	b.n	81045c8 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 81045c6:	7efb      	ldrb	r3, [r7, #27]
}
 81045c8:	4618      	mov	r0, r3
 81045ca:	3720      	adds	r7, #32
 81045cc:	46bd      	mov	sp, r7
 81045ce:	bd80      	pop	{r7, pc}

081045d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 81045d0:	b580      	push	{r7, lr}
 81045d2:	b08e      	sub	sp, #56	; 0x38
 81045d4:	af02      	add	r7, sp, #8
 81045d6:	60f8      	str	r0, [r7, #12]
 81045d8:	60b9      	str	r1, [r7, #8]
 81045da:	607a      	str	r2, [r7, #4]
 81045dc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 81045de:	2300      	movs	r3, #0
 81045e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81045e4:	68fb      	ldr	r3, [r7, #12]
 81045e6:	681b      	ldr	r3, [r3, #0]
 81045e8:	3320      	adds	r3, #32
 81045ea:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 81045ec:	68fb      	ldr	r3, [r7, #12]
 81045ee:	681b      	ldr	r3, [r3, #0]
 81045f0:	3330      	adds	r3, #48	; 0x30
 81045f2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 81045f4:	68fb      	ldr	r3, [r7, #12]
 81045f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81045fa:	2b01      	cmp	r3, #1
 81045fc:	d101      	bne.n	8104602 <HAL_SPI_TransmitReceive+0x32>
 81045fe:	2302      	movs	r3, #2
 8104600:	e207      	b.n	8104a12 <HAL_SPI_TransmitReceive+0x442>
 8104602:	68fb      	ldr	r3, [r7, #12]
 8104604:	2201      	movs	r2, #1
 8104606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810460a:	f7fd f89b 	bl	8101744 <HAL_GetTick>
 810460e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8104610:	887b      	ldrh	r3, [r7, #2]
 8104612:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8104614:	887b      	ldrh	r3, [r7, #2]
 8104616:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8104618:	68fb      	ldr	r3, [r7, #12]
 810461a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810461e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8104620:	68fb      	ldr	r3, [r7, #12]
 8104622:	685b      	ldr	r3, [r3, #4]
 8104624:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8104626:	7efb      	ldrb	r3, [r7, #27]
 8104628:	2b01      	cmp	r3, #1
 810462a:	d014      	beq.n	8104656 <HAL_SPI_TransmitReceive+0x86>
 810462c:	697b      	ldr	r3, [r7, #20]
 810462e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104632:	d106      	bne.n	8104642 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104634:	68fb      	ldr	r3, [r7, #12]
 8104636:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8104638:	2b00      	cmp	r3, #0
 810463a:	d102      	bne.n	8104642 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 810463c:	7efb      	ldrb	r3, [r7, #27]
 810463e:	2b04      	cmp	r3, #4
 8104640:	d009      	beq.n	8104656 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8104642:	2302      	movs	r3, #2
 8104644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8104648:	68fb      	ldr	r3, [r7, #12]
 810464a:	2200      	movs	r2, #0
 810464c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104650:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104654:	e1dd      	b.n	8104a12 <HAL_SPI_TransmitReceive+0x442>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8104656:	68bb      	ldr	r3, [r7, #8]
 8104658:	2b00      	cmp	r3, #0
 810465a:	d005      	beq.n	8104668 <HAL_SPI_TransmitReceive+0x98>
 810465c:	687b      	ldr	r3, [r7, #4]
 810465e:	2b00      	cmp	r3, #0
 8104660:	d002      	beq.n	8104668 <HAL_SPI_TransmitReceive+0x98>
 8104662:	887b      	ldrh	r3, [r7, #2]
 8104664:	2b00      	cmp	r3, #0
 8104666:	d109      	bne.n	810467c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8104668:	2301      	movs	r3, #1
 810466a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810466e:	68fb      	ldr	r3, [r7, #12]
 8104670:	2200      	movs	r2, #0
 8104672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810467a:	e1ca      	b.n	8104a12 <HAL_SPI_TransmitReceive+0x442>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810467c:	68fb      	ldr	r3, [r7, #12]
 810467e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104682:	b2db      	uxtb	r3, r3
 8104684:	2b04      	cmp	r3, #4
 8104686:	d003      	beq.n	8104690 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8104688:	68fb      	ldr	r3, [r7, #12]
 810468a:	2205      	movs	r2, #5
 810468c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104690:	68fb      	ldr	r3, [r7, #12]
 8104692:	2200      	movs	r2, #0
 8104694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8104698:	68fb      	ldr	r3, [r7, #12]
 810469a:	687a      	ldr	r2, [r7, #4]
 810469c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 810469e:	68fb      	ldr	r3, [r7, #12]
 81046a0:	887a      	ldrh	r2, [r7, #2]
 81046a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 81046a6:	68fb      	ldr	r3, [r7, #12]
 81046a8:	887a      	ldrh	r2, [r7, #2]
 81046aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 81046ae:	68fb      	ldr	r3, [r7, #12]
 81046b0:	68ba      	ldr	r2, [r7, #8]
 81046b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 81046b4:	68fb      	ldr	r3, [r7, #12]
 81046b6:	887a      	ldrh	r2, [r7, #2]
 81046b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 81046bc:	68fb      	ldr	r3, [r7, #12]
 81046be:	887a      	ldrh	r2, [r7, #2]
 81046c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 81046c4:	68fb      	ldr	r3, [r7, #12]
 81046c6:	2200      	movs	r2, #0
 81046c8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 81046ca:	68fb      	ldr	r3, [r7, #12]
 81046cc:	2200      	movs	r2, #0
 81046ce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81046d0:	68fb      	ldr	r3, [r7, #12]
 81046d2:	681b      	ldr	r3, [r3, #0]
 81046d4:	685b      	ldr	r3, [r3, #4]
 81046d6:	0c1b      	lsrs	r3, r3, #16
 81046d8:	041b      	lsls	r3, r3, #16
 81046da:	8879      	ldrh	r1, [r7, #2]
 81046dc:	68fa      	ldr	r2, [r7, #12]
 81046de:	6812      	ldr	r2, [r2, #0]
 81046e0:	430b      	orrs	r3, r1
 81046e2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 81046e4:	68fb      	ldr	r3, [r7, #12]
 81046e6:	681b      	ldr	r3, [r3, #0]
 81046e8:	681a      	ldr	r2, [r3, #0]
 81046ea:	68fb      	ldr	r3, [r7, #12]
 81046ec:	681b      	ldr	r3, [r3, #0]
 81046ee:	f042 0201 	orr.w	r2, r2, #1
 81046f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81046f4:	68fb      	ldr	r3, [r7, #12]
 81046f6:	685b      	ldr	r3, [r3, #4]
 81046f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81046fc:	d107      	bne.n	810470e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81046fe:	68fb      	ldr	r3, [r7, #12]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	681a      	ldr	r2, [r3, #0]
 8104704:	68fb      	ldr	r3, [r7, #12]
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810470c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810470e:	68fb      	ldr	r3, [r7, #12]
 8104710:	68db      	ldr	r3, [r3, #12]
 8104712:	2b0f      	cmp	r3, #15
 8104714:	d970      	bls.n	81047f8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104716:	e068      	b.n	81047ea <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104718:	68fb      	ldr	r3, [r7, #12]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	695b      	ldr	r3, [r3, #20]
 810471e:	f003 0302 	and.w	r3, r3, #2
 8104722:	2b02      	cmp	r3, #2
 8104724:	d11a      	bne.n	810475c <HAL_SPI_TransmitReceive+0x18c>
 8104726:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104728:	2b00      	cmp	r3, #0
 810472a:	d017      	beq.n	810475c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810472c:	68fb      	ldr	r3, [r7, #12]
 810472e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104730:	68fb      	ldr	r3, [r7, #12]
 8104732:	681b      	ldr	r3, [r3, #0]
 8104734:	6812      	ldr	r2, [r2, #0]
 8104736:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104738:	68fb      	ldr	r3, [r7, #12]
 810473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810473c:	1d1a      	adds	r2, r3, #4
 810473e:	68fb      	ldr	r3, [r7, #12]
 8104740:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8104742:	68fb      	ldr	r3, [r7, #12]
 8104744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104748:	b29b      	uxth	r3, r3
 810474a:	3b01      	subs	r3, #1
 810474c:	b29a      	uxth	r2, r3
 810474e:	68fb      	ldr	r3, [r7, #12]
 8104750:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810475a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	695a      	ldr	r2, [r3, #20]
 8104762:	f248 0308 	movw	r3, #32776	; 0x8008
 8104766:	4013      	ands	r3, r2
 8104768:	2b00      	cmp	r3, #0
 810476a:	d01a      	beq.n	81047a2 <HAL_SPI_TransmitReceive+0x1d2>
 810476c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810476e:	2b00      	cmp	r3, #0
 8104770:	d017      	beq.n	81047a2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104772:	68fb      	ldr	r3, [r7, #12]
 8104774:	681a      	ldr	r2, [r3, #0]
 8104776:	68fb      	ldr	r3, [r7, #12]
 8104778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810477a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810477c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810477e:	68fb      	ldr	r3, [r7, #12]
 8104780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104782:	1d1a      	adds	r2, r3, #4
 8104784:	68fb      	ldr	r3, [r7, #12]
 8104786:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8104788:	68fb      	ldr	r3, [r7, #12]
 810478a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810478e:	b29b      	uxth	r3, r3
 8104790:	3b01      	subs	r3, #1
 8104792:	b29a      	uxth	r2, r3
 8104794:	68fb      	ldr	r3, [r7, #12]
 8104796:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 810479a:	68fb      	ldr	r3, [r7, #12]
 810479c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81047a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81047a2:	f7fc ffcf 	bl	8101744 <HAL_GetTick>
 81047a6:	4602      	mov	r2, r0
 81047a8:	69fb      	ldr	r3, [r7, #28]
 81047aa:	1ad3      	subs	r3, r2, r3
 81047ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81047ae:	429a      	cmp	r2, r3
 81047b0:	d803      	bhi.n	81047ba <HAL_SPI_TransmitReceive+0x1ea>
 81047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81047b8:	d102      	bne.n	81047c0 <HAL_SPI_TransmitReceive+0x1f0>
 81047ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047bc:	2b00      	cmp	r3, #0
 81047be:	d114      	bne.n	81047ea <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81047c0:	68f8      	ldr	r0, [r7, #12]
 81047c2:	f000 fb39 	bl	8104e38 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81047c6:	68fb      	ldr	r3, [r7, #12]
 81047c8:	2200      	movs	r2, #0
 81047ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81047ce:	68fb      	ldr	r3, [r7, #12]
 81047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81047d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81047d8:	68fb      	ldr	r3, [r7, #12]
 81047da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81047de:	68fb      	ldr	r3, [r7, #12]
 81047e0:	2201      	movs	r2, #1
 81047e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81047e6:	2303      	movs	r3, #3
 81047e8:	e113      	b.n	8104a12 <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81047ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81047ec:	2b00      	cmp	r3, #0
 81047ee:	d193      	bne.n	8104718 <HAL_SPI_TransmitReceive+0x148>
 81047f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81047f2:	2b00      	cmp	r3, #0
 81047f4:	d190      	bne.n	8104718 <HAL_SPI_TransmitReceive+0x148>
 81047f6:	e0e5      	b.n	81049c4 <HAL_SPI_TransmitReceive+0x3f4>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81047f8:	68fb      	ldr	r3, [r7, #12]
 81047fa:	68db      	ldr	r3, [r3, #12]
 81047fc:	2b07      	cmp	r3, #7
 81047fe:	f240 80db 	bls.w	81049b8 <HAL_SPI_TransmitReceive+0x3e8>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104802:	e066      	b.n	81048d2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8104804:	68fb      	ldr	r3, [r7, #12]
 8104806:	681b      	ldr	r3, [r3, #0]
 8104808:	695b      	ldr	r3, [r3, #20]
 810480a:	f003 0302 	and.w	r3, r3, #2
 810480e:	2b02      	cmp	r3, #2
 8104810:	d119      	bne.n	8104846 <HAL_SPI_TransmitReceive+0x276>
 8104812:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104814:	2b00      	cmp	r3, #0
 8104816:	d016      	beq.n	8104846 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104818:	68fb      	ldr	r3, [r7, #12]
 810481a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810481c:	881a      	ldrh	r2, [r3, #0]
 810481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104820:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8104822:	68fb      	ldr	r3, [r7, #12]
 8104824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104826:	1c9a      	adds	r2, r3, #2
 8104828:	68fb      	ldr	r3, [r7, #12]
 810482a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 810482c:	68fb      	ldr	r3, [r7, #12]
 810482e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104832:	b29b      	uxth	r3, r3
 8104834:	3b01      	subs	r3, #1
 8104836:	b29a      	uxth	r2, r3
 8104838:	68fb      	ldr	r3, [r7, #12]
 810483a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810483e:	68fb      	ldr	r3, [r7, #12]
 8104840:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104844:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8104846:	68fb      	ldr	r3, [r7, #12]
 8104848:	681b      	ldr	r3, [r3, #0]
 810484a:	695b      	ldr	r3, [r3, #20]
 810484c:	f003 0301 	and.w	r3, r3, #1
 8104850:	2b01      	cmp	r3, #1
 8104852:	d11a      	bne.n	810488a <HAL_SPI_TransmitReceive+0x2ba>
 8104854:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104856:	2b00      	cmp	r3, #0
 8104858:	d017      	beq.n	810488a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810485a:	68fb      	ldr	r3, [r7, #12]
 810485c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810485e:	6a3a      	ldr	r2, [r7, #32]
 8104860:	8812      	ldrh	r2, [r2, #0]
 8104862:	b292      	uxth	r2, r2
 8104864:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8104866:	68fb      	ldr	r3, [r7, #12]
 8104868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810486a:	1c9a      	adds	r2, r3, #2
 810486c:	68fb      	ldr	r3, [r7, #12]
 810486e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104870:	68fb      	ldr	r3, [r7, #12]
 8104872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104876:	b29b      	uxth	r3, r3
 8104878:	3b01      	subs	r3, #1
 810487a:	b29a      	uxth	r2, r3
 810487c:	68fb      	ldr	r3, [r7, #12]
 810487e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104882:	68fb      	ldr	r3, [r7, #12]
 8104884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104888:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810488a:	f7fc ff5b 	bl	8101744 <HAL_GetTick>
 810488e:	4602      	mov	r2, r0
 8104890:	69fb      	ldr	r3, [r7, #28]
 8104892:	1ad3      	subs	r3, r2, r3
 8104894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104896:	429a      	cmp	r2, r3
 8104898:	d803      	bhi.n	81048a2 <HAL_SPI_TransmitReceive+0x2d2>
 810489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81048a0:	d102      	bne.n	81048a8 <HAL_SPI_TransmitReceive+0x2d8>
 81048a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81048a4:	2b00      	cmp	r3, #0
 81048a6:	d114      	bne.n	81048d2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81048a8:	68f8      	ldr	r0, [r7, #12]
 81048aa:	f000 fac5 	bl	8104e38 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81048ae:	68fb      	ldr	r3, [r7, #12]
 81048b0:	2200      	movs	r2, #0
 81048b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81048b6:	68fb      	ldr	r3, [r7, #12]
 81048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81048bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81048c0:	68fb      	ldr	r3, [r7, #12]
 81048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81048c6:	68fb      	ldr	r3, [r7, #12]
 81048c8:	2201      	movs	r2, #1
 81048ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81048ce:	2303      	movs	r3, #3
 81048d0:	e09f      	b.n	8104a12 <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81048d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81048d4:	2b00      	cmp	r3, #0
 81048d6:	d195      	bne.n	8104804 <HAL_SPI_TransmitReceive+0x234>
 81048d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81048da:	2b00      	cmp	r3, #0
 81048dc:	d192      	bne.n	8104804 <HAL_SPI_TransmitReceive+0x234>
 81048de:	e071      	b.n	81049c4 <HAL_SPI_TransmitReceive+0x3f4>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81048e0:	68fb      	ldr	r3, [r7, #12]
 81048e2:	681b      	ldr	r3, [r3, #0]
 81048e4:	695b      	ldr	r3, [r3, #20]
 81048e6:	f003 0302 	and.w	r3, r3, #2
 81048ea:	2b02      	cmp	r3, #2
 81048ec:	d11b      	bne.n	8104926 <HAL_SPI_TransmitReceive+0x356>
 81048ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81048f0:	2b00      	cmp	r3, #0
 81048f2:	d018      	beq.n	8104926 <HAL_SPI_TransmitReceive+0x356>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 81048f4:	68fb      	ldr	r3, [r7, #12]
 81048f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81048f8:	68fb      	ldr	r3, [r7, #12]
 81048fa:	681b      	ldr	r3, [r3, #0]
 81048fc:	3320      	adds	r3, #32
 81048fe:	7812      	ldrb	r2, [r2, #0]
 8104900:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8104902:	68fb      	ldr	r3, [r7, #12]
 8104904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104906:	1c5a      	adds	r2, r3, #1
 8104908:	68fb      	ldr	r3, [r7, #12]
 810490a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 810490c:	68fb      	ldr	r3, [r7, #12]
 810490e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104912:	b29b      	uxth	r3, r3
 8104914:	3b01      	subs	r3, #1
 8104916:	b29a      	uxth	r2, r3
 8104918:	68fb      	ldr	r3, [r7, #12]
 810491a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810491e:	68fb      	ldr	r3, [r7, #12]
 8104920:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104924:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8104926:	68fb      	ldr	r3, [r7, #12]
 8104928:	681b      	ldr	r3, [r3, #0]
 810492a:	695b      	ldr	r3, [r3, #20]
 810492c:	f003 0301 	and.w	r3, r3, #1
 8104930:	2b01      	cmp	r3, #1
 8104932:	d11d      	bne.n	8104970 <HAL_SPI_TransmitReceive+0x3a0>
 8104934:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104936:	2b00      	cmp	r3, #0
 8104938:	d01a      	beq.n	8104970 <HAL_SPI_TransmitReceive+0x3a0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810493a:	68fb      	ldr	r3, [r7, #12]
 810493c:	681b      	ldr	r3, [r3, #0]
 810493e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104942:	68fb      	ldr	r3, [r7, #12]
 8104944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104946:	7812      	ldrb	r2, [r2, #0]
 8104948:	b2d2      	uxtb	r2, r2
 810494a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 810494c:	68fb      	ldr	r3, [r7, #12]
 810494e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104950:	1c5a      	adds	r2, r3, #1
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104956:	68fb      	ldr	r3, [r7, #12]
 8104958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810495c:	b29b      	uxth	r3, r3
 810495e:	3b01      	subs	r3, #1
 8104960:	b29a      	uxth	r2, r3
 8104962:	68fb      	ldr	r3, [r7, #12]
 8104964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104968:	68fb      	ldr	r3, [r7, #12]
 810496a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810496e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104970:	f7fc fee8 	bl	8101744 <HAL_GetTick>
 8104974:	4602      	mov	r2, r0
 8104976:	69fb      	ldr	r3, [r7, #28]
 8104978:	1ad3      	subs	r3, r2, r3
 810497a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810497c:	429a      	cmp	r2, r3
 810497e:	d803      	bhi.n	8104988 <HAL_SPI_TransmitReceive+0x3b8>
 8104980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104986:	d102      	bne.n	810498e <HAL_SPI_TransmitReceive+0x3be>
 8104988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810498a:	2b00      	cmp	r3, #0
 810498c:	d114      	bne.n	81049b8 <HAL_SPI_TransmitReceive+0x3e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810498e:	68f8      	ldr	r0, [r7, #12]
 8104990:	f000 fa52 	bl	8104e38 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104994:	68fb      	ldr	r3, [r7, #12]
 8104996:	2200      	movs	r2, #0
 8104998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810499c:	68fb      	ldr	r3, [r7, #12]
 810499e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81049a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81049a6:	68fb      	ldr	r3, [r7, #12]
 81049a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81049ac:	68fb      	ldr	r3, [r7, #12]
 81049ae:	2201      	movs	r2, #1
 81049b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81049b4:	2303      	movs	r3, #3
 81049b6:	e02c      	b.n	8104a12 <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81049b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81049ba:	2b00      	cmp	r3, #0
 81049bc:	d190      	bne.n	81048e0 <HAL_SPI_TransmitReceive+0x310>
 81049be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81049c0:	2b00      	cmp	r3, #0
 81049c2:	d18d      	bne.n	81048e0 <HAL_SPI_TransmitReceive+0x310>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81049c6:	9300      	str	r3, [sp, #0]
 81049c8:	69fb      	ldr	r3, [r7, #28]
 81049ca:	2200      	movs	r2, #0
 81049cc:	2108      	movs	r1, #8
 81049ce:	68f8      	ldr	r0, [r7, #12]
 81049d0:	f000 fad2 	bl	8104f78 <SPI_WaitOnFlagUntilTimeout>
 81049d4:	4603      	mov	r3, r0
 81049d6:	2b00      	cmp	r3, #0
 81049d8:	d007      	beq.n	81049ea <HAL_SPI_TransmitReceive+0x41a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81049da:	68fb      	ldr	r3, [r7, #12]
 81049dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81049e0:	f043 0220 	orr.w	r2, r3, #32
 81049e4:	68fb      	ldr	r3, [r7, #12]
 81049e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81049ea:	68f8      	ldr	r0, [r7, #12]
 81049ec:	f000 fa24 	bl	8104e38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81049f0:	68fb      	ldr	r3, [r7, #12]
 81049f2:	2200      	movs	r2, #0
 81049f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 81049f8:	68fb      	ldr	r3, [r7, #12]
 81049fa:	2201      	movs	r2, #1
 81049fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104a00:	68fb      	ldr	r3, [r7, #12]
 8104a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104a06:	2b00      	cmp	r3, #0
 8104a08:	d001      	beq.n	8104a0e <HAL_SPI_TransmitReceive+0x43e>
  {
    return HAL_ERROR;
 8104a0a:	2301      	movs	r3, #1
 8104a0c:	e001      	b.n	8104a12 <HAL_SPI_TransmitReceive+0x442>
  }
  return errorcode;
 8104a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8104a12:	4618      	mov	r0, r3
 8104a14:	3730      	adds	r7, #48	; 0x30
 8104a16:	46bd      	mov	sp, r7
 8104a18:	bd80      	pop	{r7, pc}
	...

08104a1c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8104a1c:	b580      	push	{r7, lr}
 8104a1e:	b08a      	sub	sp, #40	; 0x28
 8104a20:	af00      	add	r7, sp, #0
 8104a22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	691b      	ldr	r3, [r3, #16]
 8104a2a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8104a2c:	687b      	ldr	r3, [r7, #4]
 8104a2e:	681b      	ldr	r3, [r3, #0]
 8104a30:	695b      	ldr	r3, [r3, #20]
 8104a32:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8104a34:	6a3a      	ldr	r2, [r7, #32]
 8104a36:	69fb      	ldr	r3, [r7, #28]
 8104a38:	4013      	ands	r3, r2
 8104a3a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8104a3c:	687b      	ldr	r3, [r7, #4]
 8104a3e:	681b      	ldr	r3, [r3, #0]
 8104a40:	689b      	ldr	r3, [r3, #8]
 8104a42:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8104a44:	2300      	movs	r3, #0
 8104a46:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104a4e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	681b      	ldr	r3, [r3, #0]
 8104a54:	3330      	adds	r3, #48	; 0x30
 8104a56:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8104a58:	69bb      	ldr	r3, [r7, #24]
 8104a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104a5e:	2b00      	cmp	r3, #0
 8104a60:	d113      	bne.n	8104a8a <HAL_SPI_IRQHandler+0x6e>
 8104a62:	69bb      	ldr	r3, [r7, #24]
 8104a64:	f003 0320 	and.w	r3, r3, #32
 8104a68:	2b00      	cmp	r3, #0
 8104a6a:	d10e      	bne.n	8104a8a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8104a6c:	69bb      	ldr	r3, [r7, #24]
 8104a6e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8104a72:	2b00      	cmp	r3, #0
 8104a74:	d009      	beq.n	8104a8a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8104a76:	687b      	ldr	r3, [r7, #4]
 8104a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104a7a:	6878      	ldr	r0, [r7, #4]
 8104a7c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a82:	6878      	ldr	r0, [r7, #4]
 8104a84:	4798      	blx	r3
    handled = 1UL;
 8104a86:	2301      	movs	r3, #1
 8104a88:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8104a8a:	69bb      	ldr	r3, [r7, #24]
 8104a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104a90:	2b00      	cmp	r3, #0
 8104a92:	d10f      	bne.n	8104ab4 <HAL_SPI_IRQHandler+0x98>
 8104a94:	69bb      	ldr	r3, [r7, #24]
 8104a96:	f003 0301 	and.w	r3, r3, #1
 8104a9a:	2b00      	cmp	r3, #0
 8104a9c:	d00a      	beq.n	8104ab4 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8104a9e:	69bb      	ldr	r3, [r7, #24]
 8104aa0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8104aa4:	2b00      	cmp	r3, #0
 8104aa6:	d105      	bne.n	8104ab4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104aac:	6878      	ldr	r0, [r7, #4]
 8104aae:	4798      	blx	r3
    handled = 1UL;
 8104ab0:	2301      	movs	r3, #1
 8104ab2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8104ab4:	69bb      	ldr	r3, [r7, #24]
 8104ab6:	f003 0320 	and.w	r3, r3, #32
 8104aba:	2b00      	cmp	r3, #0
 8104abc:	d10f      	bne.n	8104ade <HAL_SPI_IRQHandler+0xc2>
 8104abe:	69bb      	ldr	r3, [r7, #24]
 8104ac0:	f003 0302 	and.w	r3, r3, #2
 8104ac4:	2b00      	cmp	r3, #0
 8104ac6:	d00a      	beq.n	8104ade <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8104ac8:	69bb      	ldr	r3, [r7, #24]
 8104aca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8104ace:	2b00      	cmp	r3, #0
 8104ad0:	d105      	bne.n	8104ade <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104ad6:	6878      	ldr	r0, [r7, #4]
 8104ad8:	4798      	blx	r3
    handled = 1UL;
 8104ada:	2301      	movs	r3, #1
 8104adc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8104ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ae0:	2b00      	cmp	r3, #0
 8104ae2:	f040 815c 	bne.w	8104d9e <HAL_SPI_IRQHandler+0x382>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8104ae6:	69bb      	ldr	r3, [r7, #24]
 8104ae8:	f003 0308 	and.w	r3, r3, #8
 8104aec:	2b00      	cmp	r3, #0
 8104aee:	f000 808b 	beq.w	8104c08 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8104af2:	687b      	ldr	r3, [r7, #4]
 8104af4:	681b      	ldr	r3, [r3, #0]
 8104af6:	699a      	ldr	r2, [r3, #24]
 8104af8:	687b      	ldr	r3, [r7, #4]
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	f042 0208 	orr.w	r2, r2, #8
 8104b00:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8104b02:	687b      	ldr	r3, [r7, #4]
 8104b04:	681b      	ldr	r3, [r3, #0]
 8104b06:	699a      	ldr	r2, [r3, #24]
 8104b08:	687b      	ldr	r3, [r7, #4]
 8104b0a:	681b      	ldr	r3, [r3, #0]
 8104b0c:	f042 0210 	orr.w	r2, r2, #16
 8104b10:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8104b12:	687b      	ldr	r3, [r7, #4]
 8104b14:	681b      	ldr	r3, [r3, #0]
 8104b16:	699a      	ldr	r2, [r3, #24]
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104b20:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	681b      	ldr	r3, [r3, #0]
 8104b26:	691a      	ldr	r2, [r3, #16]
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	f022 0208 	bic.w	r2, r2, #8
 8104b30:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	689b      	ldr	r3, [r3, #8]
 8104b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8104b3c:	2b00      	cmp	r3, #0
 8104b3e:	d13d      	bne.n	8104bbc <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8104b40:	e036      	b.n	8104bb0 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	68db      	ldr	r3, [r3, #12]
 8104b46:	2b0f      	cmp	r3, #15
 8104b48:	d90b      	bls.n	8104b62 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104b4a:	687b      	ldr	r3, [r7, #4]
 8104b4c:	681a      	ldr	r2, [r3, #0]
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104b54:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b5a:	1d1a      	adds	r2, r3, #4
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	665a      	str	r2, [r3, #100]	; 0x64
 8104b60:	e01d      	b.n	8104b9e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	68db      	ldr	r3, [r3, #12]
 8104b66:	2b07      	cmp	r3, #7
 8104b68:	d90b      	bls.n	8104b82 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b6e:	68fa      	ldr	r2, [r7, #12]
 8104b70:	8812      	ldrh	r2, [r2, #0]
 8104b72:	b292      	uxth	r2, r2
 8104b74:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b7a:	1c9a      	adds	r2, r3, #2
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	665a      	str	r2, [r3, #100]	; 0x64
 8104b80:	e00d      	b.n	8104b9e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104b82:	687b      	ldr	r3, [r7, #4]
 8104b84:	681b      	ldr	r3, [r3, #0]
 8104b86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104b8a:	687b      	ldr	r3, [r7, #4]
 8104b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b8e:	7812      	ldrb	r2, [r2, #0]
 8104b90:	b2d2      	uxtb	r2, r2
 8104b92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b98:	1c5a      	adds	r2, r3, #1
 8104b9a:	687b      	ldr	r3, [r7, #4]
 8104b9c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104ba4:	b29b      	uxth	r3, r3
 8104ba6:	3b01      	subs	r3, #1
 8104ba8:	b29a      	uxth	r2, r3
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104bb6:	b29b      	uxth	r3, r3
 8104bb8:	2b00      	cmp	r3, #0
 8104bba:	d1c2      	bne.n	8104b42 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8104bbc:	6878      	ldr	r0, [r7, #4]
 8104bbe:	f000 f93b 	bl	8104e38 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	2201      	movs	r2, #1
 8104bc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104bca:	687b      	ldr	r3, [r7, #4]
 8104bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104bd0:	2b00      	cmp	r3, #0
 8104bd2:	d003      	beq.n	8104bdc <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8104bd4:	6878      	ldr	r0, [r7, #4]
 8104bd6:	f000 f90b 	bl	8104df0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8104bda:	e0e5      	b.n	8104da8 <HAL_SPI_IRQHandler+0x38c>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8104bdc:	7cfb      	ldrb	r3, [r7, #19]
 8104bde:	2b05      	cmp	r3, #5
 8104be0:	d103      	bne.n	8104bea <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8104be2:	6878      	ldr	r0, [r7, #4]
 8104be4:	f000 f8fa 	bl	8104ddc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8104be8:	e0db      	b.n	8104da2 <HAL_SPI_IRQHandler+0x386>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8104bea:	7cfb      	ldrb	r3, [r7, #19]
 8104bec:	2b04      	cmp	r3, #4
 8104bee:	d103      	bne.n	8104bf8 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8104bf0:	6878      	ldr	r0, [r7, #4]
 8104bf2:	f000 f8e9 	bl	8104dc8 <HAL_SPI_RxCpltCallback>
    return;
 8104bf6:	e0d4      	b.n	8104da2 <HAL_SPI_IRQHandler+0x386>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8104bf8:	7cfb      	ldrb	r3, [r7, #19]
 8104bfa:	2b03      	cmp	r3, #3
 8104bfc:	f040 80d1 	bne.w	8104da2 <HAL_SPI_IRQHandler+0x386>
      HAL_SPI_TxCpltCallback(hspi);
 8104c00:	6878      	ldr	r0, [r7, #4]
 8104c02:	f000 f8d7 	bl	8104db4 <HAL_SPI_TxCpltCallback>
    return;
 8104c06:	e0cc      	b.n	8104da2 <HAL_SPI_IRQHandler+0x386>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8104c08:	69fb      	ldr	r3, [r7, #28]
 8104c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104c0e:	2b00      	cmp	r3, #0
 8104c10:	d00d      	beq.n	8104c2e <HAL_SPI_IRQHandler+0x212>
 8104c12:	6a3b      	ldr	r3, [r7, #32]
 8104c14:	f003 0308 	and.w	r3, r3, #8
 8104c18:	2b00      	cmp	r3, #0
 8104c1a:	d008      	beq.n	8104c2e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	699a      	ldr	r2, [r3, #24]
 8104c22:	687b      	ldr	r3, [r7, #4]
 8104c24:	681b      	ldr	r3, [r3, #0]
 8104c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104c2a:	619a      	str	r2, [r3, #24]

    return;
 8104c2c:	e0bc      	b.n	8104da8 <HAL_SPI_IRQHandler+0x38c>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8104c2e:	69bb      	ldr	r3, [r7, #24]
 8104c30:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8104c34:	2b00      	cmp	r3, #0
 8104c36:	f000 80b7 	beq.w	8104da8 <HAL_SPI_IRQHandler+0x38c>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8104c3a:	69bb      	ldr	r3, [r7, #24]
 8104c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104c40:	2b00      	cmp	r3, #0
 8104c42:	d00f      	beq.n	8104c64 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c4a:	f043 0204 	orr.w	r2, r3, #4
 8104c4e:	687b      	ldr	r3, [r7, #4]
 8104c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8104c54:	687b      	ldr	r3, [r7, #4]
 8104c56:	681b      	ldr	r3, [r3, #0]
 8104c58:	699a      	ldr	r2, [r3, #24]
 8104c5a:	687b      	ldr	r3, [r7, #4]
 8104c5c:	681b      	ldr	r3, [r3, #0]
 8104c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8104c62:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8104c64:	69bb      	ldr	r3, [r7, #24]
 8104c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104c6a:	2b00      	cmp	r3, #0
 8104c6c:	d00f      	beq.n	8104c8e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8104c6e:	687b      	ldr	r3, [r7, #4]
 8104c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c74:	f043 0201 	orr.w	r2, r3, #1
 8104c78:	687b      	ldr	r3, [r7, #4]
 8104c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	681b      	ldr	r3, [r3, #0]
 8104c82:	699a      	ldr	r2, [r3, #24]
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104c8c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8104c8e:	69bb      	ldr	r3, [r7, #24]
 8104c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104c94:	2b00      	cmp	r3, #0
 8104c96:	d00f      	beq.n	8104cb8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c9e:	f043 0208 	orr.w	r2, r3, #8
 8104ca2:	687b      	ldr	r3, [r7, #4]
 8104ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8104ca8:	687b      	ldr	r3, [r7, #4]
 8104caa:	681b      	ldr	r3, [r3, #0]
 8104cac:	699a      	ldr	r2, [r3, #24]
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104cb6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8104cb8:	69bb      	ldr	r3, [r7, #24]
 8104cba:	f003 0320 	and.w	r3, r3, #32
 8104cbe:	2b00      	cmp	r3, #0
 8104cc0:	d00f      	beq.n	8104ce2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104cc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104ccc:	687b      	ldr	r3, [r7, #4]
 8104cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	681b      	ldr	r3, [r3, #0]
 8104cd6:	699a      	ldr	r2, [r3, #24]
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	f042 0220 	orr.w	r2, r2, #32
 8104ce0:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104ce8:	2b00      	cmp	r3, #0
 8104cea:	d05c      	beq.n	8104da6 <HAL_SPI_IRQHandler+0x38a>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8104cec:	687b      	ldr	r3, [r7, #4]
 8104cee:	681b      	ldr	r3, [r3, #0]
 8104cf0:	681a      	ldr	r2, [r3, #0]
 8104cf2:	687b      	ldr	r3, [r7, #4]
 8104cf4:	681b      	ldr	r3, [r3, #0]
 8104cf6:	f022 0201 	bic.w	r2, r2, #1
 8104cfa:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8104cfc:	687b      	ldr	r3, [r7, #4]
 8104cfe:	681b      	ldr	r3, [r3, #0]
 8104d00:	691b      	ldr	r3, [r3, #16]
 8104d02:	687a      	ldr	r2, [r7, #4]
 8104d04:	6812      	ldr	r2, [r2, #0]
 8104d06:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8104d0a:	f023 0303 	bic.w	r3, r3, #3
 8104d0e:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8104d10:	697b      	ldr	r3, [r7, #20]
 8104d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8104d16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8104d1a:	d138      	bne.n	8104d8e <HAL_SPI_IRQHandler+0x372>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8104d1c:	687b      	ldr	r3, [r7, #4]
 8104d1e:	681b      	ldr	r3, [r3, #0]
 8104d20:	689a      	ldr	r2, [r3, #8]
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8104d2a:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104d30:	2b00      	cmp	r3, #0
 8104d32:	d013      	beq.n	8104d5c <HAL_SPI_IRQHandler+0x340>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104d38:	4a1d      	ldr	r2, [pc, #116]	; (8104db0 <HAL_SPI_IRQHandler+0x394>)
 8104d3a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104d40:	4618      	mov	r0, r3
 8104d42:	f7fd f9ad 	bl	81020a0 <HAL_DMA_Abort_IT>
 8104d46:	4603      	mov	r3, r0
 8104d48:	2b00      	cmp	r3, #0
 8104d4a:	d007      	beq.n	8104d5c <HAL_SPI_IRQHandler+0x340>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8104d56:	687b      	ldr	r3, [r7, #4]
 8104d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104d60:	2b00      	cmp	r3, #0
 8104d62:	d020      	beq.n	8104da6 <HAL_SPI_IRQHandler+0x38a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104d68:	4a11      	ldr	r2, [pc, #68]	; (8104db0 <HAL_SPI_IRQHandler+0x394>)
 8104d6a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104d70:	4618      	mov	r0, r3
 8104d72:	f7fd f995 	bl	81020a0 <HAL_DMA_Abort_IT>
 8104d76:	4603      	mov	r3, r0
 8104d78:	2b00      	cmp	r3, #0
 8104d7a:	d014      	beq.n	8104da6 <HAL_SPI_IRQHandler+0x38a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8104d86:	687b      	ldr	r3, [r7, #4]
 8104d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8104d8c:	e00b      	b.n	8104da6 <HAL_SPI_IRQHandler+0x38a>
        hspi->State = HAL_SPI_STATE_READY;
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	2201      	movs	r2, #1
 8104d92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8104d96:	6878      	ldr	r0, [r7, #4]
 8104d98:	f000 f82a 	bl	8104df0 <HAL_SPI_ErrorCallback>
    return;
 8104d9c:	e003      	b.n	8104da6 <HAL_SPI_IRQHandler+0x38a>
    return;
 8104d9e:	bf00      	nop
 8104da0:	e002      	b.n	8104da8 <HAL_SPI_IRQHandler+0x38c>
    return;
 8104da2:	bf00      	nop
 8104da4:	e000      	b.n	8104da8 <HAL_SPI_IRQHandler+0x38c>
    return;
 8104da6:	bf00      	nop
  }
}
 8104da8:	3728      	adds	r7, #40	; 0x28
 8104daa:	46bd      	mov	sp, r7
 8104dac:	bd80      	pop	{r7, pc}
 8104dae:	bf00      	nop
 8104db0:	08104e05 	.word	0x08104e05

08104db4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8104db4:	b480      	push	{r7}
 8104db6:	b083      	sub	sp, #12
 8104db8:	af00      	add	r7, sp, #0
 8104dba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8104dbc:	bf00      	nop
 8104dbe:	370c      	adds	r7, #12
 8104dc0:	46bd      	mov	sp, r7
 8104dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dc6:	4770      	bx	lr

08104dc8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8104dc8:	b480      	push	{r7}
 8104dca:	b083      	sub	sp, #12
 8104dcc:	af00      	add	r7, sp, #0
 8104dce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8104dd0:	bf00      	nop
 8104dd2:	370c      	adds	r7, #12
 8104dd4:	46bd      	mov	sp, r7
 8104dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dda:	4770      	bx	lr

08104ddc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8104ddc:	b480      	push	{r7}
 8104dde:	b083      	sub	sp, #12
 8104de0:	af00      	add	r7, sp, #0
 8104de2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8104de4:	bf00      	nop
 8104de6:	370c      	adds	r7, #12
 8104de8:	46bd      	mov	sp, r7
 8104dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dee:	4770      	bx	lr

08104df0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8104df0:	b480      	push	{r7}
 8104df2:	b083      	sub	sp, #12
 8104df4:	af00      	add	r7, sp, #0
 8104df6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8104df8:	bf00      	nop
 8104dfa:	370c      	adds	r7, #12
 8104dfc:	46bd      	mov	sp, r7
 8104dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e02:	4770      	bx	lr

08104e04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8104e04:	b580      	push	{r7, lr}
 8104e06:	b084      	sub	sp, #16
 8104e08:	af00      	add	r7, sp, #0
 8104e0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8104e0c:	687b      	ldr	r3, [r7, #4]
 8104e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104e10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8104e12:	68fb      	ldr	r3, [r7, #12]
 8104e14:	2200      	movs	r2, #0
 8104e16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8104e1a:	68fb      	ldr	r3, [r7, #12]
 8104e1c:	2200      	movs	r2, #0
 8104e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8104e22:	68fb      	ldr	r3, [r7, #12]
 8104e24:	2201      	movs	r2, #1
 8104e26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8104e2a:	68f8      	ldr	r0, [r7, #12]
 8104e2c:	f7ff ffe0 	bl	8104df0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8104e30:	bf00      	nop
 8104e32:	3710      	adds	r7, #16
 8104e34:	46bd      	mov	sp, r7
 8104e36:	bd80      	pop	{r7, pc}

08104e38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8104e38:	b480      	push	{r7}
 8104e3a:	b085      	sub	sp, #20
 8104e3c:	af00      	add	r7, sp, #0
 8104e3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8104e40:	687b      	ldr	r3, [r7, #4]
 8104e42:	681b      	ldr	r3, [r3, #0]
 8104e44:	695b      	ldr	r3, [r3, #20]
 8104e46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8104e48:	687b      	ldr	r3, [r7, #4]
 8104e4a:	681b      	ldr	r3, [r3, #0]
 8104e4c:	699a      	ldr	r2, [r3, #24]
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	681b      	ldr	r3, [r3, #0]
 8104e52:	f042 0208 	orr.w	r2, r2, #8
 8104e56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8104e58:	687b      	ldr	r3, [r7, #4]
 8104e5a:	681b      	ldr	r3, [r3, #0]
 8104e5c:	699a      	ldr	r2, [r3, #24]
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	f042 0210 	orr.w	r2, r2, #16
 8104e66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	681a      	ldr	r2, [r3, #0]
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	f022 0201 	bic.w	r2, r2, #1
 8104e76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	681b      	ldr	r3, [r3, #0]
 8104e7c:	691b      	ldr	r3, [r3, #16]
 8104e7e:	687a      	ldr	r2, [r7, #4]
 8104e80:	6812      	ldr	r2, [r2, #0]
 8104e82:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8104e86:	f023 0303 	bic.w	r3, r3, #3
 8104e8a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	689a      	ldr	r2, [r3, #8]
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	681b      	ldr	r3, [r3, #0]
 8104e96:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8104e9a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104ea2:	b2db      	uxtb	r3, r3
 8104ea4:	2b04      	cmp	r3, #4
 8104ea6:	d014      	beq.n	8104ed2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8104ea8:	68fb      	ldr	r3, [r7, #12]
 8104eaa:	f003 0320 	and.w	r3, r3, #32
 8104eae:	2b00      	cmp	r3, #0
 8104eb0:	d00f      	beq.n	8104ed2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104eb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	699a      	ldr	r2, [r3, #24]
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	f042 0220 	orr.w	r2, r2, #32
 8104ed0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8104ed2:	687b      	ldr	r3, [r7, #4]
 8104ed4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104ed8:	b2db      	uxtb	r3, r3
 8104eda:	2b03      	cmp	r3, #3
 8104edc:	d014      	beq.n	8104f08 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8104ede:	68fb      	ldr	r3, [r7, #12]
 8104ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104ee4:	2b00      	cmp	r3, #0
 8104ee6:	d00f      	beq.n	8104f08 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8104ee8:	687b      	ldr	r3, [r7, #4]
 8104eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104eee:	f043 0204 	orr.w	r2, r3, #4
 8104ef2:	687b      	ldr	r3, [r7, #4]
 8104ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8104ef8:	687b      	ldr	r3, [r7, #4]
 8104efa:	681b      	ldr	r3, [r3, #0]
 8104efc:	699a      	ldr	r2, [r3, #24]
 8104efe:	687b      	ldr	r3, [r7, #4]
 8104f00:	681b      	ldr	r3, [r3, #0]
 8104f02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8104f06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8104f08:	68fb      	ldr	r3, [r7, #12]
 8104f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104f0e:	2b00      	cmp	r3, #0
 8104f10:	d00f      	beq.n	8104f32 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104f18:	f043 0201 	orr.w	r2, r3, #1
 8104f1c:	687b      	ldr	r3, [r7, #4]
 8104f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	699a      	ldr	r2, [r3, #24]
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104f30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8104f32:	68fb      	ldr	r3, [r7, #12]
 8104f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104f38:	2b00      	cmp	r3, #0
 8104f3a:	d00f      	beq.n	8104f5c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104f42:	f043 0208 	orr.w	r2, r3, #8
 8104f46:	687b      	ldr	r3, [r7, #4]
 8104f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8104f4c:	687b      	ldr	r3, [r7, #4]
 8104f4e:	681b      	ldr	r3, [r3, #0]
 8104f50:	699a      	ldr	r2, [r3, #24]
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	681b      	ldr	r3, [r3, #0]
 8104f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104f5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	2200      	movs	r2, #0
 8104f60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	2200      	movs	r2, #0
 8104f68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8104f6c:	bf00      	nop
 8104f6e:	3714      	adds	r7, #20
 8104f70:	46bd      	mov	sp, r7
 8104f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f76:	4770      	bx	lr

08104f78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8104f78:	b580      	push	{r7, lr}
 8104f7a:	b084      	sub	sp, #16
 8104f7c:	af00      	add	r7, sp, #0
 8104f7e:	60f8      	str	r0, [r7, #12]
 8104f80:	60b9      	str	r1, [r7, #8]
 8104f82:	603b      	str	r3, [r7, #0]
 8104f84:	4613      	mov	r3, r2
 8104f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8104f88:	e010      	b.n	8104fac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104f8a:	f7fc fbdb 	bl	8101744 <HAL_GetTick>
 8104f8e:	4602      	mov	r2, r0
 8104f90:	683b      	ldr	r3, [r7, #0]
 8104f92:	1ad3      	subs	r3, r2, r3
 8104f94:	69ba      	ldr	r2, [r7, #24]
 8104f96:	429a      	cmp	r2, r3
 8104f98:	d803      	bhi.n	8104fa2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8104f9a:	69bb      	ldr	r3, [r7, #24]
 8104f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104fa0:	d102      	bne.n	8104fa8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8104fa2:	69bb      	ldr	r3, [r7, #24]
 8104fa4:	2b00      	cmp	r3, #0
 8104fa6:	d101      	bne.n	8104fac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8104fa8:	2303      	movs	r3, #3
 8104faa:	e00f      	b.n	8104fcc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8104fac:	68fb      	ldr	r3, [r7, #12]
 8104fae:	681b      	ldr	r3, [r3, #0]
 8104fb0:	695a      	ldr	r2, [r3, #20]
 8104fb2:	68bb      	ldr	r3, [r7, #8]
 8104fb4:	4013      	ands	r3, r2
 8104fb6:	68ba      	ldr	r2, [r7, #8]
 8104fb8:	429a      	cmp	r2, r3
 8104fba:	bf0c      	ite	eq
 8104fbc:	2301      	moveq	r3, #1
 8104fbe:	2300      	movne	r3, #0
 8104fc0:	b2db      	uxtb	r3, r3
 8104fc2:	461a      	mov	r2, r3
 8104fc4:	79fb      	ldrb	r3, [r7, #7]
 8104fc6:	429a      	cmp	r2, r3
 8104fc8:	d0df      	beq.n	8104f8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8104fca:	2300      	movs	r3, #0
}
 8104fcc:	4618      	mov	r0, r3
 8104fce:	3710      	adds	r7, #16
 8104fd0:	46bd      	mov	sp, r7
 8104fd2:	bd80      	pop	{r7, pc}

08104fd4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8104fd4:	b480      	push	{r7}
 8104fd6:	b085      	sub	sp, #20
 8104fd8:	af00      	add	r7, sp, #0
 8104fda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104fe0:	095b      	lsrs	r3, r3, #5
 8104fe2:	3301      	adds	r3, #1
 8104fe4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	68db      	ldr	r3, [r3, #12]
 8104fea:	3301      	adds	r3, #1
 8104fec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8104fee:	68bb      	ldr	r3, [r7, #8]
 8104ff0:	3307      	adds	r3, #7
 8104ff2:	08db      	lsrs	r3, r3, #3
 8104ff4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8104ff6:	68bb      	ldr	r3, [r7, #8]
 8104ff8:	68fa      	ldr	r2, [r7, #12]
 8104ffa:	fb02 f303 	mul.w	r3, r2, r3
}
 8104ffe:	4618      	mov	r0, r3
 8105000:	3714      	adds	r7, #20
 8105002:	46bd      	mov	sp, r7
 8105004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105008:	4770      	bx	lr
	...

0810500c <__libc_init_array>:
 810500c:	b570      	push	{r4, r5, r6, lr}
 810500e:	4d0d      	ldr	r5, [pc, #52]	; (8105044 <__libc_init_array+0x38>)
 8105010:	4c0d      	ldr	r4, [pc, #52]	; (8105048 <__libc_init_array+0x3c>)
 8105012:	1b64      	subs	r4, r4, r5
 8105014:	10a4      	asrs	r4, r4, #2
 8105016:	2600      	movs	r6, #0
 8105018:	42a6      	cmp	r6, r4
 810501a:	d109      	bne.n	8105030 <__libc_init_array+0x24>
 810501c:	4d0b      	ldr	r5, [pc, #44]	; (810504c <__libc_init_array+0x40>)
 810501e:	4c0c      	ldr	r4, [pc, #48]	; (8105050 <__libc_init_array+0x44>)
 8105020:	f000 f818 	bl	8105054 <_init>
 8105024:	1b64      	subs	r4, r4, r5
 8105026:	10a4      	asrs	r4, r4, #2
 8105028:	2600      	movs	r6, #0
 810502a:	42a6      	cmp	r6, r4
 810502c:	d105      	bne.n	810503a <__libc_init_array+0x2e>
 810502e:	bd70      	pop	{r4, r5, r6, pc}
 8105030:	f855 3b04 	ldr.w	r3, [r5], #4
 8105034:	4798      	blx	r3
 8105036:	3601      	adds	r6, #1
 8105038:	e7ee      	b.n	8105018 <__libc_init_array+0xc>
 810503a:	f855 3b04 	ldr.w	r3, [r5], #4
 810503e:	4798      	blx	r3
 8105040:	3601      	adds	r6, #1
 8105042:	e7f2      	b.n	810502a <__libc_init_array+0x1e>
 8105044:	08105084 	.word	0x08105084
 8105048:	08105084 	.word	0x08105084
 810504c:	08105084 	.word	0x08105084
 8105050:	08105088 	.word	0x08105088

08105054 <_init>:
 8105054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105056:	bf00      	nop
 8105058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810505a:	bc08      	pop	{r3}
 810505c:	469e      	mov	lr, r3
 810505e:	4770      	bx	lr

08105060 <_fini>:
 8105060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105062:	bf00      	nop
 8105064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105066:	bc08      	pop	{r3}
 8105068:	469e      	mov	lr, r3
 810506a:	4770      	bx	lr
