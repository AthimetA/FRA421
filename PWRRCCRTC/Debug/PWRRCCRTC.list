
PWRRCCRTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003394  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003454  08003454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c0  080034c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c8  080034c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  080034dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080034dc  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a636  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001954  00000000  00000000  0002a66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002c890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ac4  00000000  00000000  0002d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b354  00000000  00000000  0003db7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000677c3  00000000  00000000  00048ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b0693  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ea4  00000000  00000000  000b06e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800343c 	.word	0x0800343c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800343c 	.word	0x0800343c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b096      	sub	sp, #88	; 0x58
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fb83 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f8cd 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 fa21 	bl	80008fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ba:	f000 f9ef 	bl	800089c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80004be:	f000 f93b 	bl	8000738 <MX_RTC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //setting Time by pressing S1
	  if(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin)==GPIO_PIN_RESET)
 80004c2:	23a0      	movs	r3, #160	; 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2101      	movs	r1, #1
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fe87 	bl	80011dc <HAL_GPIO_ReadPin>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d12d      	bne.n	800052e <main+0x86>
	  {
		  RTC_TimeTypeDef sTime={0};
 80004d2:	2444      	movs	r4, #68	; 0x44
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	0018      	movs	r0, r3
 80004d8:	2314      	movs	r3, #20
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f002 ffa5 	bl	800342c <memset>
		  sTime.Hours =0x14;
 80004e2:	0021      	movs	r1, r4
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2214      	movs	r2, #20
 80004e8:	701a      	strb	r2, [r3, #0]
		  sTime.Minutes =0x30;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2230      	movs	r2, #48	; 0x30
 80004ee:	705a      	strb	r2, [r3, #1]
		  sTime.Seconds =0;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	709a      	strb	r2, [r3, #2]

		  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	4b52      	ldr	r3, [pc, #328]	; (8000644 <main+0x19c>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fe8d 	bl	800221c <HAL_RTC_SetTime>


		  RTC_DateTypeDef sDate ={0};
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
		  sDate.Date = 0x20;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2220      	movs	r2, #32
 800050e:	709a      	strb	r2, [r3, #2]
		  sDate.Month = 0x10;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2210      	movs	r2, #16
 8000514:	705a      	strb	r2, [r3, #1]
		  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2203      	movs	r2, #3
 800051a:	701a      	strb	r2, [r3, #0]
		  sDate.Year = 0x21;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2221      	movs	r2, #33	; 0x21
 8000520:	70da      	strb	r2, [r3, #3]

		  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000522:	1879      	adds	r1, r7, r1
 8000524:	4b47      	ldr	r3, [pc, #284]	; (8000644 <main+0x19c>)
 8000526:	2201      	movs	r2, #1
 8000528:	0018      	movs	r0, r3
 800052a:	f001 ff97 	bl	800245c <HAL_RTC_SetDate>
	  }
	  //set alarm at next 10s , and Sleep CPU
	  if(HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin)==GPIO_PIN_RESET)
 800052e:	23a0      	movs	r3, #160	; 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	2102      	movs	r1, #2
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fe51 	bl	80011dc <HAL_GPIO_ReadPin>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d16c      	bne.n	8000618 <main+0x170>
	  {

			RTC_AlarmTypeDef sAlarm = { 0 };
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	0018      	movs	r0, r3
 8000542:	2328      	movs	r3, #40	; 0x28
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f002 ff70 	bl	800342c <memset>
			RTC_TimeTypeDef sTime = NowTime;
 800054c:	212c      	movs	r1, #44	; 0x2c
 800054e:	187b      	adds	r3, r7, r1
 8000550:	4a3d      	ldr	r2, [pc, #244]	; (8000648 <main+0x1a0>)
 8000552:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000554:	c331      	stmia	r3!, {r0, r4, r5}
 8000556:	ca11      	ldmia	r2!, {r0, r4}
 8000558:	c311      	stmia	r3!, {r0, r4}

			//sett alarm at now + 10 s
			sTime.Seconds += 0x10;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	789b      	ldrb	r3, [r3, #2]
 800055e:	3310      	adds	r3, #16
 8000560:	b2da      	uxtb	r2, r3
 8000562:	187b      	adds	r3, r7, r1
 8000564:	709a      	strb	r2, [r3, #2]
			//corrected over time

			if (sTime.Seconds >= 0x60) {
 8000566:	187b      	adds	r3, r7, r1
 8000568:	789b      	ldrb	r3, [r3, #2]
 800056a:	2b5f      	cmp	r3, #95	; 0x5f
 800056c:	d925      	bls.n	80005ba <main+0x112>
				sTime.Seconds -= 0x60;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	789b      	ldrb	r3, [r3, #2]
 8000572:	3b60      	subs	r3, #96	; 0x60
 8000574:	b2da      	uxtb	r2, r3
 8000576:	187b      	adds	r3, r7, r1
 8000578:	709a      	strb	r2, [r3, #2]
				sTime.Minutes++;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	785b      	ldrb	r3, [r3, #1]
 800057e:	3301      	adds	r3, #1
 8000580:	b2da      	uxtb	r2, r3
 8000582:	187b      	adds	r3, r7, r1
 8000584:	705a      	strb	r2, [r3, #1]
				if (sTime.Minutes >= 0x60) {
 8000586:	187b      	adds	r3, r7, r1
 8000588:	785b      	ldrb	r3, [r3, #1]
 800058a:	2b5f      	cmp	r3, #95	; 0x5f
 800058c:	d915      	bls.n	80005ba <main+0x112>
					sTime.Minutes -= 0x60;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	785b      	ldrb	r3, [r3, #1]
 8000592:	3b60      	subs	r3, #96	; 0x60
 8000594:	b2da      	uxtb	r2, r3
 8000596:	187b      	adds	r3, r7, r1
 8000598:	705a      	strb	r2, [r3, #1]
					sTime.Hours++;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	701a      	strb	r2, [r3, #0]
					if (sTime.Hours >= 0x24) {
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b23      	cmp	r3, #35	; 0x23
 80005ac:	d905      	bls.n	80005ba <main+0x112>
						sTime.Hours -= 0x24;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	3b24      	subs	r3, #36	; 0x24
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			//setting alarm mask
			sAlarm.AlarmTime = sTime;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	222c      	movs	r2, #44	; 0x2c
 80005be:	18ba      	adds	r2, r7, r2
 80005c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005c2:	c313      	stmia	r3!, {r0, r1, r4}
 80005c4:	ca03      	ldmia	r2!, {r0, r1}
 80005c6:	c303      	stmia	r3!, {r0, r1}
			sAlarm.Alarm = RTC_ALARM_A;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	0052      	lsls	r2, r2, #1
 80005ce:	625a      	str	r2, [r3, #36]	; 0x24
			sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	0612      	lsls	r2, r2, #24
 80005d6:	615a      	str	r2, [r3, #20]
			sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	22f0      	movs	r2, #240	; 0xf0
 80005dc:	0512      	lsls	r2, r2, #20
 80005de:	619a      	str	r2, [r3, #24]
			sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
			sAlarm.AlarmDateWeekDay = 0x1;
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2220      	movs	r2, #32
 80005ea:	2101      	movs	r1, #1
 80005ec:	5499      	strb	r1, [r3, r2]
			//stop LED (For save energy)
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fe0d 	bl	8001216 <HAL_GPIO_WritePin>

			//set alarm
			HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <main+0x19c>)
 8000600:	2201      	movs	r2, #1
 8000602:	0018      	movs	r0, r3
 8000604:	f002 f826 	bl	8002654 <HAL_RTC_SetAlarm_IT>

			//put cpu to stop mode
			HAL_SuspendTick();
 8000608:	f000 fb70 	bl	8000cec <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode( PWR_MAINREGULATOR_ON,PWR_STOPENTRY_WFE);
 800060c:	2102      	movs	r1, #2
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fe48 	bl	80012a4 <HAL_PWR_EnterSLEEPMode>

			//code stop / resume here

			//reconfig clock to normal operation
			//SystemClock_Config();
			HAL_ResumeTick();
 8000614:	f000 fb78 	bl	8000d08 <HAL_ResumeTick>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //simulate task
	  HAL_Delay(100);
 8000618:	2064      	movs	r0, #100	; 0x64
 800061a:	f000 fb43 	bl	8000ca4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800061e:	23a0      	movs	r3, #160	; 0xa0
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	2120      	movs	r1, #32
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fe13 	bl	8001250 <HAL_GPIO_TogglePin>

	  //read RTC NEED TO READ BOTH IN OTHER
	  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 800062a:	4907      	ldr	r1, [pc, #28]	; (8000648 <main+0x1a0>)
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <main+0x19c>)
 800062e:	2201      	movs	r2, #1
 8000630:	0018      	movs	r0, r3
 8000632:	f001 feb7 	bl	80023a4 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8000636:	4905      	ldr	r1, [pc, #20]	; (800064c <main+0x1a4>)
 8000638:	4b02      	ldr	r3, [pc, #8]	; (8000644 <main+0x19c>)
 800063a:	2201      	movs	r2, #1
 800063c:	0018      	movs	r0, r3
 800063e:	f001 ffbb 	bl	80025b8 <HAL_RTC_GetDate>
	  if(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin)==GPIO_PIN_RESET)
 8000642:	e73e      	b.n	80004c2 <main+0x1a>
 8000644:	20000028 	.word	0x20000028
 8000648:	200000d0 	.word	0x200000d0
 800064c:	200000e4 	.word	0x200000e4

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b099      	sub	sp, #100	; 0x64
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	242c      	movs	r4, #44	; 0x2c
 8000658:	193b      	adds	r3, r7, r4
 800065a:	0018      	movs	r0, r3
 800065c:	2334      	movs	r3, #52	; 0x34
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f002 fee3 	bl	800342c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	2318      	movs	r3, #24
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	0018      	movs	r0, r3
 800066c:	2314      	movs	r3, #20
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f002 fedb 	bl	800342c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000676:	003b      	movs	r3, r7
 8000678:	0018      	movs	r0, r3
 800067a:	2318      	movs	r3, #24
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f002 fed4 	bl	800342c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xdc>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xdc>)
 800068a:	21c0      	movs	r1, #192	; 0xc0
 800068c:	0149      	lsls	r1, r1, #5
 800068e:	430a      	orrs	r2, r1
 8000690:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000692:	f000 fdf9 	bl	8001288 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <SystemClock_Config+0xe0>)
 8000698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xe0>)
 800069c:	4925      	ldr	r1, [pc, #148]	; (8000734 <SystemClock_Config+0xe4>)
 800069e:	400a      	ands	r2, r1
 80006a0:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2205      	movs	r2, #5
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	22a0      	movs	r2, #160	; 0xa0
 80006ac:	02d2      	lsls	r2, r2, #11
 80006ae:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fe47 	bl	8001354 <HAL_RCC_OscConfig>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006ca:	f000 f98b 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	2118      	movs	r1, #24
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	220f      	movs	r2, #15
 80006d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2202      	movs	r2, #2
 80006da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2100      	movs	r1, #0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 f9aa 	bl	8001a4c <HAL_RCC_ClockConfig>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006fc:	f000 f972 	bl	80009e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8000700:	003b      	movs	r3, r7
 8000702:	2222      	movs	r2, #34	; 0x22
 8000704:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000706:	003b      	movs	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800070c:	003b      	movs	r3, r7
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	0252      	lsls	r2, r2, #9
 8000712:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000714:	003b      	movs	r3, r7
 8000716:	0018      	movs	r0, r3
 8000718:	f001 fbbc 	bl	8001e94 <HAL_RCCEx_PeriphCLKConfig>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000720:	f000 f960 	bl	80009e4 <Error_Handler>
  }
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b019      	add	sp, #100	; 0x64
 800072a:	bd90      	pop	{r4, r7, pc}
 800072c:	40007000 	.word	0x40007000
 8000730:	40021000 	.word	0x40021000
 8000734:	ffffe7ff 	.word	0xffffe7ff

08000738 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b090      	sub	sp, #64	; 0x40
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800073e:	232c      	movs	r3, #44	; 0x2c
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	0018      	movs	r0, r3
 8000744:	2314      	movs	r3, #20
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f002 fe6f 	bl	800342c <memset>
  RTC_DateTypeDef sDate = {0};
 800074e:	2328      	movs	r3, #40	; 0x28
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000756:	003b      	movs	r3, r7
 8000758:	0018      	movs	r0, r3
 800075a:	2328      	movs	r3, #40	; 0x28
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f002 fe64 	bl	800342c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000764:	4b49      	ldr	r3, [pc, #292]	; (800088c <MX_RTC_Init+0x154>)
 8000766:	4a4a      	ldr	r2, [pc, #296]	; (8000890 <MX_RTC_Init+0x158>)
 8000768:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <MX_RTC_Init+0x154>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000770:	4b46      	ldr	r3, [pc, #280]	; (800088c <MX_RTC_Init+0x154>)
 8000772:	227f      	movs	r2, #127	; 0x7f
 8000774:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <MX_RTC_Init+0x154>)
 8000778:	22ff      	movs	r2, #255	; 0xff
 800077a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800077c:	4b43      	ldr	r3, [pc, #268]	; (800088c <MX_RTC_Init+0x154>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <MX_RTC_Init+0x154>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000788:	4b40      	ldr	r3, [pc, #256]	; (800088c <MX_RTC_Init+0x154>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800078e:	4b3f      	ldr	r3, [pc, #252]	; (800088c <MX_RTC_Init+0x154>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000794:	4b3d      	ldr	r3, [pc, #244]	; (800088c <MX_RTC_Init+0x154>)
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fca2 	bl	80020e0 <HAL_RTC_Init>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80007a0:	f000 f920 	bl	80009e4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
if(HAL_RTCEx_BKUPRead(&hrtc, 0)!=0x1234)//checking lost power rtc reset
 80007a4:	4b39      	ldr	r3, [pc, #228]	; (800088c <MX_RTC_Init+0x154>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 f9a1 	bl	8002af0 <HAL_RTCEx_BKUPRead>
 80007ae:	0003      	movs	r3, r0
 80007b0:	4a38      	ldr	r2, [pc, #224]	; (8000894 <MX_RTC_Init+0x15c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d065      	beq.n	8000882 <MX_RTC_Init+0x14a>
{
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007b6:	212c      	movs	r1, #44	; 0x2c
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	02d2      	lsls	r2, r2, #11
 80007d6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007d8:	1879      	adds	r1, r7, r1
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_RTC_Init+0x154>)
 80007dc:	2201      	movs	r2, #1
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 fd1c 	bl	800221c <HAL_RTC_SetTime>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80007e8:	f000 f8fc 	bl	80009e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007ec:	2128      	movs	r1, #40	; 0x28
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2201      	movs	r2, #1
 80007f8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2201      	movs	r2, #1
 80007fe:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000806:	1879      	adds	r1, r7, r1
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_RTC_Init+0x154>)
 800080a:	2201      	movs	r2, #1
 800080c:	0018      	movs	r0, r3
 800080e:	f001 fe25 	bl	800245c <HAL_RTC_SetDate>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000816:	f000 f8e5 	bl	80009e4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800081a:	003b      	movs	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000820:	003b      	movs	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000826:	003b      	movs	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000832:	003b      	movs	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_SET;
 8000838:	003b      	movs	r3, r7
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	02d2      	lsls	r2, r2, #11
 800083e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES
 8000840:	003b      	movs	r3, r7
 8000842:	4a15      	ldr	r2, [pc, #84]	; (8000898 <MX_RTC_Init+0x160>)
 8000844:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800084c:	003b      	movs	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000852:	003b      	movs	r3, r7
 8000854:	2220      	movs	r2, #32
 8000856:	2101      	movs	r1, #1
 8000858:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800085a:	003b      	movs	r3, r7
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000862:	0039      	movs	r1, r7
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_RTC_Init+0x154>)
 8000866:	2201      	movs	r2, #1
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fef3 	bl	8002654 <HAL_RTC_SetAlarm_IT>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 8000872:	f000 f8b7 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, 0, 0x1234); //write Private "Key" data
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <MX_RTC_Init+0x15c>)
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <MX_RTC_Init+0x154>)
 800087a:	2100      	movs	r1, #0
 800087c:	0018      	movs	r0, r3
 800087e:	f002 f921 	bl	8002ac4 <HAL_RTCEx_BKUPWrite>
}
  /* USER CODE END RTC_Init 2 */

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b010      	add	sp, #64	; 0x40
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000028 	.word	0x20000028
 8000890:	40002800 	.word	0x40002800
 8000894:	00001234 	.word	0x00001234
 8000898:	00808080 	.word	0x00808080

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_USART2_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a8:	22e1      	movs	r2, #225	; 0xe1
 80008aa:	0252      	lsls	r2, r2, #9
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 f921 	bl	8002b28 <HAL_UART_Init>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f87b 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000004c 	.word	0x2000004c
 80008f8:	40004400 	.word	0x40004400

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	240c      	movs	r4, #12
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	2314      	movs	r3, #20
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f002 fd8d 	bl	800342c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <MX_GPIO_Init+0xe0>)
 8000914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <MX_GPIO_Init+0xe0>)
 8000918:	2104      	movs	r1, #4
 800091a:	430a      	orrs	r2, r1
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <MX_GPIO_Init+0xe0>)
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	2204      	movs	r2, #4
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_GPIO_Init+0xe0>)
 800092c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_GPIO_Init+0xe0>)
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	430a      	orrs	r2, r1
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <MX_GPIO_Init+0xe0>)
 8000938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	4013      	ands	r3, r2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_GPIO_Init+0xe0>)
 8000944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_GPIO_Init+0xe0>)
 8000948:	2101      	movs	r1, #1
 800094a:	430a      	orrs	r2, r1
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <MX_GPIO_Init+0xe0>)
 8000950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000952:	2201      	movs	r2, #1
 8000954:	4013      	ands	r3, r2
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095a:	23a0      	movs	r3, #160	; 0xa0
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2200      	movs	r2, #0
 8000960:	2120      	movs	r1, #32
 8000962:	0018      	movs	r0, r3
 8000964:	f000 fc57 	bl	8001216 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	0192      	lsls	r2, r2, #6
 800096e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2290      	movs	r2, #144	; 0x90
 8000974:	0352      	lsls	r2, r2, #13
 8000976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097e:	193b      	adds	r3, r7, r4
 8000980:	4a17      	ldr	r2, [pc, #92]	; (80009e0 <MX_GPIO_Init+0xe4>)
 8000982:	0019      	movs	r1, r3
 8000984:	0010      	movs	r0, r2
 8000986:	f000 faab 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2203      	movs	r2, #3
 800098e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	193a      	adds	r2, r7, r4
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fa9b 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009aa:	0021      	movs	r1, r4
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2220      	movs	r2, #32
 80009b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2201      	movs	r2, #1
 80009b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c4:	187a      	adds	r2, r7, r1
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	0011      	movs	r1, r2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 fa87 	bl	8000ee0 <HAL_GPIO_Init>

}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b009      	add	sp, #36	; 0x24
 80009d8:	bd90      	pop	{r4, r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000
 80009e0:	50000800 	.word	0x50000800

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <HAL_MspInit+0x24>)
 80009f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x24>)
 80009fa:	2101      	movs	r1, #1
 80009fc:	430a      	orrs	r2, r1
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <HAL_MspInit+0x24>)
 8000a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_MspInit+0x24>)
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	0549      	lsls	r1, r1, #21
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_RTC_MspInit+0x38>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10e      	bne.n	8000a48 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_RTC_MspInit+0x3c>)
 8000a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_RTC_MspInit+0x3c>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	02c9      	lsls	r1, r1, #11
 8000a34:	430a      	orrs	r2, r1
 8000a36:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f000 fa1d 	bl	8000e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000a42:	2002      	movs	r0, #2
 8000a44:	f000 fa2f 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40002800 	.word	0x40002800
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	240c      	movs	r4, #12
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f002 fcde 	bl	800342c <memset>
  if(huart->Instance==USART2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <HAL_UART_MspInit+0x80>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d129      	bne.n	8000ace <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_UART_MspInit+0x84>)
 8000a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_UART_MspInit+0x84>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0289      	lsls	r1, r1, #10
 8000a84:	430a      	orrs	r2, r1
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_UART_MspInit+0x84>)
 8000a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <HAL_UART_MspInit+0x84>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	430a      	orrs	r2, r1
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_UART_MspInit+0x84>)
 8000a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa0:	0021      	movs	r1, r4
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2202      	movs	r2, #2
 8000aac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2204      	movs	r2, #4
 8000abe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	187a      	adds	r2, r7, r1
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 fa09 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b009      	add	sp, #36	; 0x24
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	40021000 	.word	0x40021000

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f8b2 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <RTC_IRQHandler+0x14>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 fee8 	bl	80028ec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000028 	.word	0x20000028

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <LoopForever+0x6>)
    LDR R1, [R0]
 8000b3a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b3c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <LoopForever+0xa>)
    CMP R1, R2
 8000b40:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b42:	d105      	bne.n	8000b50 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b46:	4913      	ldr	r1, [pc, #76]	; (8000b94 <LoopForever+0x12>)
    STR R1, [R0]
 8000b48:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b4a:	4813      	ldr	r0, [pc, #76]	; (8000b98 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b4c:	4913      	ldr	r1, [pc, #76]	; (8000b9c <LoopForever+0x1a>)
    STR R1, [R0]
 8000b4e:	6001      	str	r1, [r0, #0]

08000b50 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b52:	4914      	ldr	r1, [pc, #80]	; (8000ba4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <LoopForever+0x26>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b68:	4c11      	ldr	r4, [pc, #68]	; (8000bb0 <LoopForever+0x2e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b76:	f7ff ffd7 	bl	8000b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f002 fc33 	bl	80033e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fc93 	bl	80004a8 <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
   ldr   r0, =_estack
 8000b84:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000b88:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b8c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000b90:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000b94:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b98:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b9c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba8:	080034d0 	.word	0x080034d0
  ldr r2, =_sbss
 8000bac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb0:	200000ec 	.word	0x200000ec

08000bb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_Init+0x48>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_Init+0x48>)
 8000bca:	2140      	movs	r1, #64	; 0x40
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_Init+0x48>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_Init+0x48>)
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 f811 	bl	8000c04 <HAL_InitTick>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d003      	beq.n	8000bee <HAL_Init+0x36>
  {
    status = HAL_ERROR;
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
 8000bec:	e001      	b.n	8000bf2 <HAL_Init+0x3a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bee:	f7ff feff 	bl	80009f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c0e:	681c      	ldr	r4, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_InitTick+0x60>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	0019      	movs	r1, r3
 8000c16:	23fa      	movs	r3, #250	; 0xfa
 8000c18:	0098      	lsls	r0, r3, #2
 8000c1a:	f7ff fa75 	bl	8000108 <__udivsi3>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	0019      	movs	r1, r3
 8000c22:	0020      	movs	r0, r4
 8000c24:	f7ff fa70 	bl	8000108 <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f94b 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e00f      	b.n	8000c58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d80b      	bhi.n	8000c56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f918 	bl	8000e7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_InitTick+0x64>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	001a      	movs	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	18d2      	adds	r2, r2, r3
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200000e8 	.word	0x200000e8

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	200000e8 	.word	0x200000e8

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff fff0 	bl	8000c90 <HAL_GetTick>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	189b      	adds	r3, r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	f7ff ffe0 	bl	8000c90 <HAL_GetTick>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b004      	add	sp, #16
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <HAL_SuspendTick+0x18>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_SuspendTick+0x18>)
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	438a      	bics	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <HAL_ResumeTick+0x18>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_ResumeTick+0x18>)
 8000d12:	2102      	movs	r1, #2
 8000d14:	430a      	orrs	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b7f      	cmp	r3, #127	; 0x7f
 8000d36:	d809      	bhi.n	8000d4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	231f      	movs	r3, #31
 8000d40:	401a      	ands	r2, r3
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_EnableIRQ+0x30>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
  }
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6c:	d828      	bhi.n	8000dc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <__NVIC_SetPriority+0xd4>)
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	33c0      	adds	r3, #192	; 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	589b      	ldr	r3, [r3, r2]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	; 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	481f      	ldr	r0, [pc, #124]	; (8000e2c <__NVIC_SetPriority+0xd4>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	430a      	orrs	r2, r1
 8000db8:	33c0      	adds	r3, #192	; 0xc0
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dbe:	e031      	b.n	8000e24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <__NVIC_SetPriority+0xd8>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	230f      	movs	r3, #15
 8000dca:	400b      	ands	r3, r1
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3306      	adds	r3, #6
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	; 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	; 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001c      	movs	r4, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	4023      	ands	r3, r4
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	18c3      	adds	r3, r0, r3
 8000e20:	3304      	adds	r3, #4
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	045b      	lsls	r3, r3, #17
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d301      	bcc.n	8000e4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e010      	b.n	8000e6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <SysTick_Config+0x44>)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	3a01      	subs	r2, #1
 8000e52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e54:	2301      	movs	r3, #1
 8000e56:	425b      	negs	r3, r3
 8000e58:	2103      	movs	r1, #3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff ff7c 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x44>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x44>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	210f      	movs	r1, #15
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	1c02      	adds	r2, r0, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	0002      	movs	r2, r0
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff ff33 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff ffaf 	bl	8000e34 <SysTick_Config>
 8000ed6:	0003      	movs	r3, r0
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ef6:	e155      	b.n	80011a4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2101      	movs	r1, #1
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4091      	lsls	r1, r2
 8000f02:	000a      	movs	r2, r1
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d100      	bne.n	8000f10 <HAL_GPIO_Init+0x30>
 8000f0e:	e146      	b.n	800119e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2203      	movs	r2, #3
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d005      	beq.n	8000f28 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	43da      	mvns	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	2201      	movs	r2, #1
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d017      	beq.n	8000fc6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2203      	movs	r2, #3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d123      	bne.n	800101a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	58d3      	ldr	r3, [r2, r3]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	691a      	ldr	r2, [r3, #16]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2107      	movs	r1, #7
 8000ffe:	400b      	ands	r3, r1
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	6939      	ldr	r1, [r7, #16]
 8001018:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	43da      	mvns	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2203      	movs	r2, #3
 8001038:	401a      	ands	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	23c0      	movs	r3, #192	; 0xc0
 8001054:	029b      	lsls	r3, r3, #10
 8001056:	4013      	ands	r3, r2
 8001058:	d100      	bne.n	800105c <HAL_GPIO_Init+0x17c>
 800105a:	e0a0      	b.n	800119e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105c:	4b57      	ldr	r3, [pc, #348]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 800105e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001060:	4b56      	ldr	r3, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 8001062:	2101      	movs	r1, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_GPIO_Init+0x2e0>)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	589b      	ldr	r3, [r3, r2]
 8001074:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2203      	movs	r2, #3
 800107a:	4013      	ands	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	409a      	lsls	r2, r3
 8001082:	0013      	movs	r3, r2
 8001084:	43da      	mvns	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	23a0      	movs	r3, #160	; 0xa0
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	429a      	cmp	r2, r3
 8001094:	d01f      	beq.n	80010d6 <HAL_GPIO_Init+0x1f6>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4a      	ldr	r2, [pc, #296]	; (80011c4 <HAL_GPIO_Init+0x2e4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0x1f2>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a49      	ldr	r2, [pc, #292]	; (80011c8 <HAL_GPIO_Init+0x2e8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a48      	ldr	r2, [pc, #288]	; (80011cc <HAL_GPIO_Init+0x2ec>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x1ea>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a47      	ldr	r2, [pc, #284]	; (80011d0 <HAL_GPIO_Init+0x2f0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x1e6>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a46      	ldr	r2, [pc, #280]	; (80011d4 <HAL_GPIO_Init+0x2f4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x1e2>
 80010be:	2305      	movs	r3, #5
 80010c0:	e00a      	b.n	80010d8 <HAL_GPIO_Init+0x1f8>
 80010c2:	2306      	movs	r3, #6
 80010c4:	e008      	b.n	80010d8 <HAL_GPIO_Init+0x1f8>
 80010c6:	2304      	movs	r3, #4
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x1f8>
 80010ca:	2303      	movs	r3, #3
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x1f8>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x1f8>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x1f8>
 80010d6:	2300      	movs	r3, #0
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	2103      	movs	r1, #3
 80010dc:	400a      	ands	r2, r1
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e8:	4935      	ldr	r1, [pc, #212]	; (80011c0 <HAL_GPIO_Init+0x2e0>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43da      	mvns	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	025b      	lsls	r3, r3, #9
 800110e:	4013      	ands	r3, r2
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43da      	mvns	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43da      	mvns	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	035b      	lsls	r3, r3, #13
 8001162:	4013      	ands	r3, r2
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	039b      	lsls	r3, r3, #14
 800118c:	4013      	ands	r3, r2
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	40da      	lsrs	r2, r3
 80011ac:	1e13      	subs	r3, r2, #0
 80011ae:	d000      	beq.n	80011b2 <HAL_GPIO_Init+0x2d2>
 80011b0:	e6a2      	b.n	8000ef8 <HAL_GPIO_Init+0x18>
  }
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b006      	add	sp, #24
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	50000400 	.word	0x50000400
 80011c8:	50000800 	.word	0x50000800
 80011cc:	50000c00 	.word	0x50000c00
 80011d0:	50001000 	.word	0x50001000
 80011d4:	50001c00 	.word	0x50001c00
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	000a      	movs	r2, r1
 80011e6:	1cbb      	adds	r3, r7, #2
 80011e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	1cba      	adds	r2, r7, #2
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	4013      	ands	r3, r2
 80011f4:	d004      	beq.n	8001200 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011f6:	230f      	movs	r3, #15
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001200:	230f      	movs	r3, #15
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001208:	230f      	movs	r3, #15
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	781b      	ldrb	r3, [r3, #0]
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	0008      	movs	r0, r1
 8001220:	0011      	movs	r1, r2
 8001222:	1cbb      	adds	r3, r7, #2
 8001224:	1c02      	adds	r2, r0, #0
 8001226:	801a      	strh	r2, [r3, #0]
 8001228:	1c7b      	adds	r3, r7, #1
 800122a:	1c0a      	adds	r2, r1, #0
 800122c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800122e:	1c7b      	adds	r3, r7, #1
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	1cbb      	adds	r3, r7, #2
 8001238:	881a      	ldrh	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800123e:	e003      	b.n	8001248 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001240:	1cbb      	adds	r3, r7, #2
 8001242:	881a      	ldrh	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	000a      	movs	r2, r1
 800125a:	1cbb      	adds	r3, r7, #2
 800125c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001264:	1cbb      	adds	r3, r7, #2
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	1cb9      	adds	r1, r7, #2
 8001274:	8809      	ldrh	r1, [r1, #0]
 8001276:	400b      	ands	r3, r1
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b004      	add	sp, #16
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	0049      	lsls	r1, r1, #1
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40007000 	.word	0x40007000

080012a4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	000a      	movs	r2, r1
 80012ae:	1cfb      	adds	r3, r7, #3
 80012b0:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_PWR_EnterSLEEPMode+0xa4>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	2201      	movs	r2, #1
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d008      	beq.n	80012e4 <HAL_PWR_EnterSLEEPMode+0x40>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80012de:	491b      	ldr	r1, [pc, #108]	; (800134c <HAL_PWR_EnterSLEEPMode+0xa8>)
 80012e0:	400a      	ands	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4393      	bics	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001306:	2104      	movs	r1, #4
 8001308:	438a      	bics	r2, r1
 800130a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800130c:	1cfb      	adds	r3, r7, #3
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001314:	bf30      	wfi
 8001316:	e002      	b.n	800131e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001318:	bf40      	sev
    __WFE();
 800131a:	bf20      	wfe
    __WFE();
 800131c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d009      	beq.n	8001338 <HAL_PWR_EnterSLEEPMode+0x94>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	0089      	lsls	r1, r1, #2
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8001338:	46c0      	nop			; (mov r8, r8)

}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b006      	add	sp, #24
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40007000 	.word	0x40007000
 8001348:	40010000 	.word	0x40010000
 800134c:	fffffdff 	.word	0xfffffdff
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	f000 fb6c 	bl	8001a40 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001368:	4bc8      	ldr	r3, [pc, #800]	; (800168c <HAL_RCC_OscConfig+0x338>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	220c      	movs	r2, #12
 800136e:	4013      	ands	r3, r2
 8001370:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001372:	4bc6      	ldr	r3, [pc, #792]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	025b      	lsls	r3, r3, #9
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2201      	movs	r2, #1
 8001384:	4013      	ands	r3, r2
 8001386:	d100      	bne.n	800138a <HAL_RCC_OscConfig+0x36>
 8001388:	e07d      	b.n	8001486 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b08      	cmp	r3, #8
 800138e:	d007      	beq.n	80013a0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	2b0c      	cmp	r3, #12
 8001394:	d112      	bne.n	80013bc <HAL_RCC_OscConfig+0x68>
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	025b      	lsls	r3, r3, #9
 800139c:	429a      	cmp	r2, r3
 800139e:	d10d      	bne.n	80013bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	4bba      	ldr	r3, [pc, #744]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	029b      	lsls	r3, r3, #10
 80013a8:	4013      	ands	r3, r2
 80013aa:	d100      	bne.n	80013ae <HAL_RCC_OscConfig+0x5a>
 80013ac:	e06a      	b.n	8001484 <HAL_RCC_OscConfig+0x130>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d166      	bne.n	8001484 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	f000 fb42 	bl	8001a40 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d107      	bne.n	80013d8 <HAL_RCC_OscConfig+0x84>
 80013c8:	4bb0      	ldr	r3, [pc, #704]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4baf      	ldr	r3, [pc, #700]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	0249      	lsls	r1, r1, #9
 80013d2:	430a      	orrs	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e027      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	23a0      	movs	r3, #160	; 0xa0
 80013de:	02db      	lsls	r3, r3, #11
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d10e      	bne.n	8001402 <HAL_RCC_OscConfig+0xae>
 80013e4:	4ba9      	ldr	r3, [pc, #676]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4ba8      	ldr	r3, [pc, #672]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	02c9      	lsls	r1, r1, #11
 80013ee:	430a      	orrs	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	4ba6      	ldr	r3, [pc, #664]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4ba5      	ldr	r3, [pc, #660]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	0249      	lsls	r1, r1, #9
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e012      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 8001402:	4ba2      	ldr	r3, [pc, #648]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4ba1      	ldr	r3, [pc, #644]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001408:	49a1      	ldr	r1, [pc, #644]	; (8001690 <HAL_RCC_OscConfig+0x33c>)
 800140a:	400a      	ands	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	4b9f      	ldr	r3, [pc, #636]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	025b      	lsls	r3, r3, #9
 8001416:	4013      	ands	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4b9b      	ldr	r3, [pc, #620]	; (800168c <HAL_RCC_OscConfig+0x338>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b9a      	ldr	r3, [pc, #616]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001422:	499c      	ldr	r1, [pc, #624]	; (8001694 <HAL_RCC_OscConfig+0x340>)
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d014      	beq.n	800145a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fc2e 	bl	8000c90 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143a:	f7ff fc29 	bl	8000c90 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b64      	cmp	r3, #100	; 0x64
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e2f9      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800144c:	4b8f      	ldr	r3, [pc, #572]	; (800168c <HAL_RCC_OscConfig+0x338>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	029b      	lsls	r3, r3, #10
 8001454:	4013      	ands	r3, r2
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0xe6>
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fc19 	bl	8000c90 <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fc14 	bl	8000c90 <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e2e4      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001476:	4b85      	ldr	r3, [pc, #532]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	029b      	lsls	r3, r3, #10
 800147e:	4013      	ands	r3, r2
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x110>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d100      	bne.n	8001492 <HAL_RCC_OscConfig+0x13e>
 8001490:	e099      	b.n	80015c6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	2220      	movs	r2, #32
 800149c:	4013      	ands	r3, r2
 800149e:	d009      	beq.n	80014b4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014a0:	4b7a      	ldr	r3, [pc, #488]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b79      	ldr	r3, [pc, #484]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80014a6:	2120      	movs	r1, #32
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	2220      	movs	r2, #32
 80014b0:	4393      	bics	r3, r2
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	d13e      	bne.n	800153e <HAL_RCC_OscConfig+0x1ea>
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d13b      	bne.n	800153e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014c6:	4b71      	ldr	r3, [pc, #452]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2204      	movs	r2, #4
 80014cc:	4013      	ands	r3, r2
 80014ce:	d004      	beq.n	80014da <HAL_RCC_OscConfig+0x186>
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e2b2      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b6c      	ldr	r3, [pc, #432]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a6e      	ldr	r2, [pc, #440]	; (8001698 <HAL_RCC_OscConfig+0x344>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	021a      	lsls	r2, r3, #8
 80014ea:	4b68      	ldr	r3, [pc, #416]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014f0:	4b66      	ldr	r3, [pc, #408]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2209      	movs	r2, #9
 80014f6:	4393      	bics	r3, r2
 80014f8:	0019      	movs	r1, r3
 80014fa:	4b64      	ldr	r3, [pc, #400]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80014fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fe:	430a      	orrs	r2, r1
 8001500:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001502:	f000 fbeb 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001506:	0001      	movs	r1, r0
 8001508:	4b60      	ldr	r3, [pc, #384]	; (800168c <HAL_RCC_OscConfig+0x338>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	220f      	movs	r2, #15
 8001510:	4013      	ands	r3, r2
 8001512:	4a62      	ldr	r2, [pc, #392]	; (800169c <HAL_RCC_OscConfig+0x348>)
 8001514:	5cd3      	ldrb	r3, [r2, r3]
 8001516:	000a      	movs	r2, r1
 8001518:	40da      	lsrs	r2, r3
 800151a:	4b61      	ldr	r3, [pc, #388]	; (80016a0 <HAL_RCC_OscConfig+0x34c>)
 800151c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <HAL_RCC_OscConfig+0x350>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2513      	movs	r5, #19
 8001524:	197c      	adds	r4, r7, r5
 8001526:	0018      	movs	r0, r3
 8001528:	f7ff fb6c 	bl	8000c04 <HAL_InitTick>
 800152c:	0003      	movs	r3, r0
 800152e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001530:	197b      	adds	r3, r7, r5
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d046      	beq.n	80015c6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001538:	197b      	adds	r3, r7, r5
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	e280      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	2b00      	cmp	r3, #0
 8001542:	d027      	beq.n	8001594 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001544:	4b51      	ldr	r3, [pc, #324]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2209      	movs	r2, #9
 800154a:	4393      	bics	r3, r2
 800154c:	0019      	movs	r1, r3
 800154e:	4b4f      	ldr	r3, [pc, #316]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7ff fb9b 	bl	8000c90 <HAL_GetTick>
 800155a:	0003      	movs	r3, r0
 800155c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff fb96 	bl	8000c90 <HAL_GetTick>
 8001564:	0002      	movs	r2, r0
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e266      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001572:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2204      	movs	r2, #4
 8001578:	4013      	ands	r3, r2
 800157a:	d0f1      	beq.n	8001560 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_RCC_OscConfig+0x338>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a45      	ldr	r2, [pc, #276]	; (8001698 <HAL_RCC_OscConfig+0x344>)
 8001582:	4013      	ands	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	021a      	lsls	r2, r3, #8
 800158c:	4b3f      	ldr	r3, [pc, #252]	; (800168c <HAL_RCC_OscConfig+0x338>)
 800158e:	430a      	orrs	r2, r1
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	e018      	b.n	80015c6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001594:	4b3d      	ldr	r3, [pc, #244]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b3c      	ldr	r3, [pc, #240]	; (800168c <HAL_RCC_OscConfig+0x338>)
 800159a:	2101      	movs	r1, #1
 800159c:	438a      	bics	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb76 	bl	8000c90 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb71 	bl	8000c90 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e241      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015bc:	4b33      	ldr	r3, [pc, #204]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2204      	movs	r2, #4
 80015c2:	4013      	ands	r3, r2
 80015c4:	d1f1      	bne.n	80015aa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2210      	movs	r2, #16
 80015cc:	4013      	ands	r3, r2
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_OscConfig+0x27e>
 80015d0:	e0a1      	b.n	8001716 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d140      	bne.n	800165a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015d8:	4b2c      	ldr	r3, [pc, #176]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4013      	ands	r3, r2
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_OscConfig+0x29c>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e227      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f0:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a2c      	ldr	r2, [pc, #176]	; (80016a8 <HAL_RCC_OscConfig+0x354>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	0019      	movs	r1, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001600:	430a      	orrs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	0a19      	lsrs	r1, r3, #8
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	061a      	lsls	r2, r3, #24
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	0b5b      	lsrs	r3, r3, #13
 800161e:	3301      	adds	r3, #1
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	0212      	lsls	r2, r2, #8
 8001624:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	210f      	movs	r1, #15
 800162e:	400b      	ands	r3, r1
 8001630:	491a      	ldr	r1, [pc, #104]	; (800169c <HAL_RCC_OscConfig+0x348>)
 8001632:	5ccb      	ldrb	r3, [r1, r3]
 8001634:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_RCC_OscConfig+0x34c>)
 8001638:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_RCC_OscConfig+0x350>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2513      	movs	r5, #19
 8001640:	197c      	adds	r4, r7, r5
 8001642:	0018      	movs	r0, r3
 8001644:	f7ff fade 	bl	8000c04 <HAL_InitTick>
 8001648:	0003      	movs	r3, r0
 800164a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800164c:	197b      	adds	r3, r7, r5
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d060      	beq.n	8001716 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001654:	197b      	adds	r3, r7, r5
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	e1f2      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d03f      	beq.n	80016e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	0049      	lsls	r1, r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb0e 	bl	8000c90 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001678:	e018      	b.n	80016ac <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800167a:	f7ff fb09 	bl	8000c90 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d911      	bls.n	80016ac <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1d9      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
 800168c:	40021000 	.word	0x40021000
 8001690:	fffeffff 	.word	0xfffeffff
 8001694:	fffbffff 	.word	0xfffbffff
 8001698:	ffffe0ff 	.word	0xffffe0ff
 800169c:	08003454 	.word	0x08003454
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004
 80016a8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016ac:	4bc9      	ldr	r3, [pc, #804]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d0e0      	beq.n	800167a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b8:	4bc6      	ldr	r3, [pc, #792]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4ac6      	ldr	r2, [pc, #792]	; (80019d8 <HAL_RCC_OscConfig+0x684>)
 80016be:	4013      	ands	r3, r2
 80016c0:	0019      	movs	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	4bc3      	ldr	r3, [pc, #780]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016cc:	4bc1      	ldr	r3, [pc, #772]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	0a19      	lsrs	r1, r3, #8
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	061a      	lsls	r2, r3, #24
 80016da:	4bbe      	ldr	r3, [pc, #760]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	e019      	b.n	8001716 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016e2:	4bbc      	ldr	r3, [pc, #752]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4bbb      	ldr	r3, [pc, #748]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80016e8:	49bc      	ldr	r1, [pc, #752]	; (80019dc <HAL_RCC_OscConfig+0x688>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff facf 	bl	8000c90 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f8:	f7ff faca 	bl	8000c90 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e19a      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800170a:	4bb2      	ldr	r3, [pc, #712]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2208      	movs	r2, #8
 800171c:	4013      	ands	r3, r2
 800171e:	d036      	beq.n	800178e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d019      	beq.n	800175c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001728:	4baa      	ldr	r3, [pc, #680]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800172a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800172c:	4ba9      	ldr	r3, [pc, #676]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800172e:	2101      	movs	r1, #1
 8001730:	430a      	orrs	r2, r1
 8001732:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff faac 	bl	8000c90 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173e:	f7ff faa7 	bl	8000c90 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e177      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001750:	4ba0      	ldr	r3, [pc, #640]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001754:	2202      	movs	r2, #2
 8001756:	4013      	ands	r3, r2
 8001758:	d0f1      	beq.n	800173e <HAL_RCC_OscConfig+0x3ea>
 800175a:	e018      	b.n	800178e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175c:	4b9d      	ldr	r3, [pc, #628]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800175e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001760:	4b9c      	ldr	r3, [pc, #624]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001762:	2101      	movs	r1, #1
 8001764:	438a      	bics	r2, r1
 8001766:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff fa92 	bl	8000c90 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001772:	f7ff fa8d 	bl	8000c90 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e15d      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001784:	4b93      	ldr	r3, [pc, #588]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001788:	2202      	movs	r2, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d1f1      	bne.n	8001772 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2204      	movs	r2, #4
 8001794:	4013      	ands	r3, r2
 8001796:	d100      	bne.n	800179a <HAL_RCC_OscConfig+0x446>
 8001798:	e0ae      	b.n	80018f8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2023      	movs	r0, #35	; 0x23
 800179c:	183b      	adds	r3, r7, r0
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b8c      	ldr	r3, [pc, #560]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80017a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	055b      	lsls	r3, r3, #21
 80017aa:	4013      	ands	r3, r2
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b89      	ldr	r3, [pc, #548]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80017b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b2:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	0549      	lsls	r1, r1, #21
 80017b8:	430a      	orrs	r2, r1
 80017ba:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017bc:	183b      	adds	r3, r7, r0
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b87      	ldr	r3, [pc, #540]	; (80019e0 <HAL_RCC_OscConfig+0x68c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	d11a      	bne.n	8001804 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b84      	ldr	r3, [pc, #528]	; (80019e0 <HAL_RCC_OscConfig+0x68c>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b83      	ldr	r3, [pc, #524]	; (80019e0 <HAL_RCC_OscConfig+0x68c>)
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	0049      	lsls	r1, r1, #1
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fa58 	bl	8000c90 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fa53 	bl	8000c90 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	; 0x64
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e123      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <HAL_RCC_OscConfig+0x68c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4013      	ands	r3, r2
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	429a      	cmp	r2, r3
 800180e:	d107      	bne.n	8001820 <HAL_RCC_OscConfig+0x4cc>
 8001810:	4b70      	ldr	r3, [pc, #448]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001814:	4b6f      	ldr	r3, [pc, #444]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	0049      	lsls	r1, r1, #1
 800181a:	430a      	orrs	r2, r1
 800181c:	651a      	str	r2, [r3, #80]	; 0x50
 800181e:	e031      	b.n	8001884 <HAL_RCC_OscConfig+0x530>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10c      	bne.n	8001842 <HAL_RCC_OscConfig+0x4ee>
 8001828:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800182a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800182c:	4b69      	ldr	r3, [pc, #420]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800182e:	496b      	ldr	r1, [pc, #428]	; (80019dc <HAL_RCC_OscConfig+0x688>)
 8001830:	400a      	ands	r2, r1
 8001832:	651a      	str	r2, [r3, #80]	; 0x50
 8001834:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001838:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800183a:	496a      	ldr	r1, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x690>)
 800183c:	400a      	ands	r2, r1
 800183e:	651a      	str	r2, [r3, #80]	; 0x50
 8001840:	e020      	b.n	8001884 <HAL_RCC_OscConfig+0x530>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	23a0      	movs	r3, #160	; 0xa0
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	429a      	cmp	r2, r3
 800184c:	d10e      	bne.n	800186c <HAL_RCC_OscConfig+0x518>
 800184e:	4b61      	ldr	r3, [pc, #388]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001852:	4b60      	ldr	r3, [pc, #384]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	00c9      	lsls	r1, r1, #3
 8001858:	430a      	orrs	r2, r1
 800185a:	651a      	str	r2, [r3, #80]	; 0x50
 800185c:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800185e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001860:	4b5c      	ldr	r3, [pc, #368]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	0049      	lsls	r1, r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	651a      	str	r2, [r3, #80]	; 0x50
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0x530>
 800186c:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800186e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001870:	4b58      	ldr	r3, [pc, #352]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001872:	495a      	ldr	r1, [pc, #360]	; (80019dc <HAL_RCC_OscConfig+0x688>)
 8001874:	400a      	ands	r2, r1
 8001876:	651a      	str	r2, [r3, #80]	; 0x50
 8001878:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800187a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800187c:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800187e:	4959      	ldr	r1, [pc, #356]	; (80019e4 <HAL_RCC_OscConfig+0x690>)
 8001880:	400a      	ands	r2, r1
 8001882:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d015      	beq.n	80018b8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7ff fa00 	bl	8000c90 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001894:	e009      	b.n	80018aa <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff f9fb 	bl	8000c90 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <HAL_RCC_OscConfig+0x694>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e0ca      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018aa:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80018ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d0ef      	beq.n	8001896 <HAL_RCC_OscConfig+0x542>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b8:	f7ff f9ea 	bl	8000c90 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018c0:	e009      	b.n	80018d6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff f9e5 	bl	8000c90 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_RCC_OscConfig+0x694>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e0b4      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80018d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d1ef      	bne.n	80018c2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018e2:	2323      	movs	r3, #35	; 0x23
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80018ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f0:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80018f2:	493e      	ldr	r1, [pc, #248]	; (80019ec <HAL_RCC_OscConfig+0x698>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d100      	bne.n	8001902 <HAL_RCC_OscConfig+0x5ae>
 8001900:	e09d      	b.n	8001a3e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b0c      	cmp	r3, #12
 8001906:	d100      	bne.n	800190a <HAL_RCC_OscConfig+0x5b6>
 8001908:	e076      	b.n	80019f8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	2b02      	cmp	r3, #2
 8001910:	d145      	bne.n	800199e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001918:	4935      	ldr	r1, [pc, #212]	; (80019f0 <HAL_RCC_OscConfig+0x69c>)
 800191a:	400a      	ands	r2, r1
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff f9b7 	bl	8000c90 <HAL_GetTick>
 8001922:	0003      	movs	r3, r0
 8001924:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f9b2 	bl	8000c90 <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e082      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	049b      	lsls	r3, r3, #18
 8001942:	4013      	ands	r3, r2
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <HAL_RCC_OscConfig+0x6a0>)
 800194c:	4013      	ands	r3, r2
 800194e:	0019      	movs	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	431a      	orrs	r2, r3
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001962:	430a      	orrs	r2, r1
 8001964:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	0449      	lsls	r1, r1, #17
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff f98c 	bl	8000c90 <HAL_GetTick>
 8001978:	0003      	movs	r3, r0
 800197a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff f987 	bl	8000c90 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e057      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	049b      	lsls	r3, r3, #18
 8001998:	4013      	ands	r3, r2
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x62a>
 800199c:	e04f      	b.n	8001a3e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80019a4:	4912      	ldr	r1, [pc, #72]	; (80019f0 <HAL_RCC_OscConfig+0x69c>)
 80019a6:	400a      	ands	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff f971 	bl	8000c90 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f96c 	bl	8000c90 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e03c      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019c6:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	049b      	lsls	r3, r3, #18
 80019ce:	4013      	ands	r3, r2
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x660>
 80019d2:	e034      	b.n	8001a3e <HAL_RCC_OscConfig+0x6ea>
 80019d4:	40021000 	.word	0x40021000
 80019d8:	ffff1fff 	.word	0xffff1fff
 80019dc:	fffffeff 	.word	0xfffffeff
 80019e0:	40007000 	.word	0x40007000
 80019e4:	fffffbff 	.word	0xfffffbff
 80019e8:	00001388 	.word	0x00001388
 80019ec:	efffffff 	.word	0xefffffff
 80019f0:	feffffff 	.word	0xfeffffff
 80019f4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e01d      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_RCC_OscConfig+0x6f4>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	025b      	lsls	r3, r3, #9
 8001a10:	401a      	ands	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d10f      	bne.n	8001a3a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	23f0      	movs	r3, #240	; 0xf0
 8001a1e:	039b      	lsls	r3, r3, #14
 8001a20:	401a      	ands	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	23c0      	movs	r3, #192	; 0xc0
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	401a      	ands	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b00a      	add	sp, #40	; 0x28
 8001a46:	bdb0      	pop	{r4, r5, r7, pc}
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e128      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b96      	ldr	r3, [pc, #600]	; (8001cbc <HAL_RCC_ClockConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2201      	movs	r2, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d91e      	bls.n	8001aac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b93      	ldr	r3, [pc, #588]	; (8001cbc <HAL_RCC_ClockConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	4393      	bics	r3, r2
 8001a76:	0019      	movs	r1, r3
 8001a78:	4b90      	ldr	r3, [pc, #576]	; (8001cbc <HAL_RCC_ClockConfig+0x270>)
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a80:	f7ff f906 	bl	8000c90 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7ff f901 	bl	8000c90 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a8a      	ldr	r2, [pc, #552]	; (8001cc0 <HAL_RCC_ClockConfig+0x274>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e109      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b87      	ldr	r3, [pc, #540]	; (8001cbc <HAL_RCC_ClockConfig+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d1ee      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab6:	4b83      	ldr	r3, [pc, #524]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	22f0      	movs	r2, #240	; 0xf0
 8001abc:	4393      	bics	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b7f      	ldr	r3, [pc, #508]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x8a>
 8001ad4:	e089      	b.n	8001bea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ade:	4b79      	ldr	r3, [pc, #484]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	029b      	lsls	r3, r3, #10
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d120      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0e1      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001af6:	4b73      	ldr	r3, [pc, #460]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	049b      	lsls	r3, r3, #18
 8001afe:	4013      	ands	r3, r2
 8001b00:	d114      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0d5      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d106      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b0e:	4b6d      	ldr	r3, [pc, #436]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2204      	movs	r2, #4
 8001b14:	4013      	ands	r3, r2
 8001b16:	d109      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0ca      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b1c:	4b69      	ldr	r3, [pc, #420]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4013      	ands	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0c2      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2c:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2203      	movs	r2, #3
 8001b32:	4393      	bics	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4b62      	ldr	r3, [pc, #392]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7ff f8a6 	bl	8000c90 <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d111      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7ff f89d 	bl	8000c90 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x274>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0a5      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b66:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d1ef      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x106>
 8001b72:	e03a      	b.n	8001bea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d111      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7c:	e009      	b.n	8001b92 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7e:	f7ff f887 	bl	8000c90 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	4a4d      	ldr	r2, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x274>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e08f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b92:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	220c      	movs	r2, #12
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d1ef      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x132>
 8001b9e:	e024      	b.n	8001bea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d11b      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001baa:	f7ff f871 	bl	8000c90 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4a42      	ldr	r2, [pc, #264]	; (8001cc0 <HAL_RCC_ClockConfig+0x274>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e079      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d1ef      	bne.n	8001baa <HAL_RCC_ClockConfig+0x15e>
 8001bca:	e00e      	b.n	8001bea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bcc:	f7ff f860 	bl	8000c90 <HAL_GetTick>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	4a3a      	ldr	r2, [pc, #232]	; (8001cc0 <HAL_RCC_ClockConfig+0x274>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e068      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001be0:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	220c      	movs	r2, #12
 8001be6:	4013      	ands	r3, r2
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bea:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_RCC_ClockConfig+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d21e      	bcs.n	8001c36 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <HAL_RCC_ClockConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4393      	bics	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_RCC_ClockConfig+0x270>)
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c0a:	f7ff f841 	bl	8000c90 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	e009      	b.n	8001c28 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c14:	f7ff f83c 	bl	8000c90 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <HAL_RCC_ClockConfig+0x274>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e044      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_ClockConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d1ee      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_RCC_ClockConfig+0x27c>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d00a      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	4a1a      	ldr	r2, [pc, #104]	; (8001ccc <HAL_RCC_ClockConfig+0x280>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	00da      	lsls	r2, r3, #3
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c74:	f000 f832 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c78:	0001      	movs	r1, r0
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	220f      	movs	r2, #15
 8001c82:	4013      	ands	r3, r2
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_RCC_ClockConfig+0x284>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	000a      	movs	r2, r1
 8001c8a:	40da      	lsrs	r2, r3
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_RCC_ClockConfig+0x288>)
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_ClockConfig+0x28c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	250b      	movs	r5, #11
 8001c96:	197c      	adds	r4, r7, r5
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe ffb3 	bl	8000c04 <HAL_InitTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ca2:	197b      	adds	r3, r7, r5
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001caa:	197b      	adds	r3, r7, r5
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b004      	add	sp, #16
 8001cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	00001388 	.word	0x00001388
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	fffff8ff 	.word	0xfffff8ff
 8001ccc:	ffffc7ff 	.word	0xffffc7ff
 8001cd0:	08003454 	.word	0x08003454
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	b5b0      	push	{r4, r5, r7, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cea:	230c      	movs	r3, #12
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d014      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x40>
 8001cf2:	d900      	bls.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001cf4:	e07b      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x112>
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d002      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x24>
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d00b      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cfe:	e076      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d00:	4b44      	ldr	r3, [pc, #272]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2210      	movs	r2, #16
 8001d06:	4013      	ands	r3, r2
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d0a:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d0e:	e07c      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d10:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x140>)
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d14:	e079      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d16:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d1a:	e076      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1e:	0c9a      	lsrs	r2, r3, #18
 8001d20:	230f      	movs	r3, #15
 8001d22:	401a      	ands	r2, r3
 8001d24:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x148>)
 8001d26:	5c9b      	ldrb	r3, [r3, r2]
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	0d9a      	lsrs	r2, r3, #22
 8001d2e:	2303      	movs	r3, #3
 8001d30:	4013      	ands	r3, r2
 8001d32:	3301      	adds	r3, #1
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d36:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	025b      	lsls	r3, r3, #9
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d01a      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	4a35      	ldr	r2, [pc, #212]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	69b8      	ldr	r0, [r7, #24]
 8001d50:	69f9      	ldr	r1, [r7, #28]
 8001d52:	f7fe fa85 	bl	8000260 <__aeabi_lmul>
 8001d56:	0002      	movs	r2, r0
 8001d58:	000b      	movs	r3, r1
 8001d5a:	0010      	movs	r0, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f7fe fa59 	bl	8000220 <__aeabi_uldivmod>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	000b      	movs	r3, r1
 8001d72:	0013      	movs	r3, r2
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
 8001d76:	e037      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d01a      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	68f9      	ldr	r1, [r7, #12]
 8001d92:	f7fe fa65 	bl	8000260 <__aeabi_lmul>
 8001d96:	0002      	movs	r2, r0
 8001d98:	000b      	movs	r3, r1
 8001d9a:	0010      	movs	r0, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f7fe fa39 	bl	8000220 <__aeabi_uldivmod>
 8001dae:	0002      	movs	r2, r0
 8001db0:	000b      	movs	r3, r1
 8001db2:	0013      	movs	r3, r2
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
 8001db6:	e017      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	0018      	movs	r0, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x140>)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f7fe fa4c 	bl	8000260 <__aeabi_lmul>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	000b      	movs	r3, r1
 8001dcc:	0010      	movs	r0, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	001c      	movs	r4, r3
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	001d      	movs	r5, r3
 8001dd8:	0022      	movs	r2, r4
 8001dda:	002b      	movs	r3, r5
 8001ddc:	f7fe fa20 	bl	8000220 <__aeabi_uldivmod>
 8001de0:	0002      	movs	r2, r0
 8001de2:	000b      	movs	r3, r1
 8001de4:	0013      	movs	r3, r2
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dec:	e00d      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	0b5b      	lsrs	r3, r3, #13
 8001df4:	2207      	movs	r2, #7
 8001df6:	4013      	ands	r3, r2
 8001df8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	0212      	lsls	r2, r2, #8
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e08:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b00e      	add	sp, #56	; 0x38
 8001e12:	bdb0      	pop	{r4, r5, r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	003d0900 	.word	0x003d0900
 8001e1c:	00f42400 	.word	0x00f42400
 8001e20:	007a1200 	.word	0x007a1200
 8001e24:	0800346c 	.word	0x0800346c

08001e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e2c:	4b02      	ldr	r3, [pc, #8]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e40:	f7ff fff2 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e44:	0001      	movs	r1, r0
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	4013      	ands	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	40d9      	lsrs	r1, r3
 8001e56:	000b      	movs	r3, r1
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08003464 	.word	0x08003464

08001e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e6c:	f7ff ffdc 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e70:	0001      	movs	r1, r0
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	0adb      	lsrs	r3, r3, #11
 8001e78:	2207      	movs	r2, #7
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e7e:	5cd3      	ldrb	r3, [r2, r3]
 8001e80:	40d9      	lsrs	r1, r3
 8001e82:	000b      	movs	r3, r1
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08003464 	.word	0x08003464

08001e94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e9c:	2017      	movs	r0, #23
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d100      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001eae:	e0c2      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb0:	4b81      	ldr	r3, [pc, #516]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	055b      	lsls	r3, r3, #21
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d109      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebc:	4b7e      	ldr	r3, [pc, #504]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec0:	4b7d      	ldr	r3, [pc, #500]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	0549      	lsls	r1, r1, #21
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001eca:	183b      	adds	r3, r7, r0
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b7a      	ldr	r3, [pc, #488]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d11a      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001edc:	4b77      	ldr	r3, [pc, #476]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	0049      	lsls	r1, r1, #1
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7fe fed1 	bl	8000c90 <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	e008      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef4:	f7fe fecc 	bl	8000c90 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0d4      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	4b6d      	ldr	r3, [pc, #436]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f12:	4b69      	ldr	r3, [pc, #420]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	23c0      	movs	r3, #192	; 0xc0
 8001f18:	039b      	lsls	r3, r3, #14
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	23c0      	movs	r3, #192	; 0xc0
 8001f24:	039b      	lsls	r3, r3, #14
 8001f26:	4013      	ands	r3, r2
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d013      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	23c0      	movs	r3, #192	; 0xc0
 8001f34:	029b      	lsls	r3, r3, #10
 8001f36:	401a      	ands	r2, r3
 8001f38:	23c0      	movs	r3, #192	; 0xc0
 8001f3a:	029b      	lsls	r3, r3, #10
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10a      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f40:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	029b      	lsls	r3, r3, #10
 8001f48:	401a      	ands	r2, r3
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	029b      	lsls	r3, r3, #10
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d101      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0ac      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f56:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f5a:	23c0      	movs	r3, #192	; 0xc0
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d03b      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	23c0      	movs	r3, #192	; 0xc0
 8001f6e:	029b      	lsls	r3, r3, #10
 8001f70:	4013      	ands	r3, r2
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d033      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d02e      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f82:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f86:	4a4e      	ldr	r2, [pc, #312]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f8c:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f90:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	0309      	lsls	r1, r1, #12
 8001f96:	430a      	orrs	r2, r1
 8001f98:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f9a:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9e:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fa0:	4948      	ldr	r1, [pc, #288]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001fa6:	4b44      	ldr	r3, [pc, #272]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d014      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fe6b 	bl	8000c90 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fbe:	e009      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7fe fe66 	bl	8000c90 <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	4a3f      	ldr	r2, [pc, #252]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e06d      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d0ef      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	23c0      	movs	r3, #192	; 0xc0
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	401a      	ands	r2, r3
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	029b      	lsls	r3, r3, #10
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d10c      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a35      	ldr	r2, [pc, #212]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	23c0      	movs	r3, #192	; 0xc0
 8002002:	039b      	lsls	r3, r3, #14
 8002004:	401a      	ands	r2, r3
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800200e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	23c0      	movs	r3, #192	; 0xc0
 8002016:	029b      	lsls	r3, r3, #10
 8002018:	401a      	ands	r2, r3
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800201c:	430a      	orrs	r2, r1
 800201e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002020:	2317      	movs	r3, #23
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d105      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800202c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002030:	4927      	ldr	r1, [pc, #156]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002032:	400a      	ands	r2, r1
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002044:	220c      	movs	r2, #12
 8002046:	4393      	bics	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002050:	430a      	orrs	r2, r1
 8002052:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2204      	movs	r2, #4
 800205a:	4013      	ands	r3, r2
 800205c:	d009      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002064:	4013      	ands	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800206e:	430a      	orrs	r2, r1
 8002070:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2208      	movs	r2, #8
 8002078:	4013      	ands	r3, r2
 800207a:	d009      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002082:	4013      	ands	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800208c:	430a      	orrs	r2, r1
 800208e:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	4013      	ands	r3, r2
 8002098:	d009      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020aa:	430a      	orrs	r2, r1
 80020ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b006      	add	sp, #24
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
 80020c0:	fffcffff 	.word	0xfffcffff
 80020c4:	fff7ffff 	.word	0xfff7ffff
 80020c8:	00001388 	.word	0x00001388
 80020cc:	ffcfffff 	.word	0xffcfffff
 80020d0:	efffffff 	.word	0xefffffff
 80020d4:	fffff3ff 	.word	0xfffff3ff
 80020d8:	ffffcfff 	.word	0xffffcfff
 80020dc:	fff3ffff 	.word	0xfff3ffff

080020e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e08e      	b.n	8002210 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2221      	movs	r2, #33	; 0x21
 80020f6:	5c9b      	ldrb	r3, [r3, r2]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2220      	movs	r2, #32
 8002102:	2100      	movs	r1, #0
 8002104:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f7fe fc85 	bl	8000a18 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2221      	movs	r2, #33	; 0x21
 8002112:	2102      	movs	r1, #2
 8002114:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	22ca      	movs	r2, #202	; 0xca
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2253      	movs	r2, #83	; 0x53
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 fc5c 	bl	80029e6 <RTC_EnterInitMode>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d009      	beq.n	8002146 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	22ff      	movs	r2, #255	; 0xff
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2221      	movs	r2, #33	; 0x21
 800213e:	2104      	movs	r1, #4
 8002140:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e064      	b.n	8002210 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4931      	ldr	r1, [pc, #196]	; (8002218 <HAL_RTC_Init+0x138>)
 8002152:	400a      	ands	r2, r1
 8002154:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6899      	ldr	r1, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68d2      	ldr	r2, [r2, #12]
 800217c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6919      	ldr	r1, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	438a      	bics	r2, r1
 80021a0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2103      	movs	r1, #3
 80021ae:	438a      	bics	r2, r1
 80021b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2220      	movs	r2, #32
 80021d2:	4013      	ands	r3, r2
 80021d4:	d113      	bne.n	80021fe <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 fbdd 	bl	8002998 <HAL_RTC_WaitForSynchro>
 80021de:	1e03      	subs	r3, r0, #0
 80021e0:	d00d      	beq.n	80021fe <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2221      	movs	r2, #33	; 0x21
 80021ee:	2104      	movs	r1, #4
 80021f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	2100      	movs	r1, #0
 80021f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e008      	b.n	8002210 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	22ff      	movs	r2, #255	; 0xff
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2221      	movs	r2, #33	; 0x21
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800220e:	2300      	movs	r3, #0
  }
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}
 8002218:	ff8fffbf 	.word	0xff8fffbf

0800221c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	5c9b      	ldrb	r3, [r3, r2]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_RTC_SetTime+0x1a>
 8002232:	2302      	movs	r3, #2
 8002234:	e0ad      	b.n	8002392 <HAL_RTC_SetTime+0x176>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	2101      	movs	r1, #1
 800223c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2221      	movs	r2, #33	; 0x21
 8002242:	2102      	movs	r1, #2
 8002244:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d125      	bne.n	8002298 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	4013      	ands	r3, r2
 8002256:	d102      	bne.n	800225e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2200      	movs	r2, #0
 800225c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	0018      	movs	r0, r3
 8002264:	f000 fbe9 	bl	8002a3a <RTC_ByteToBcd2>
 8002268:	0003      	movs	r3, r0
 800226a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	785b      	ldrb	r3, [r3, #1]
 8002270:	0018      	movs	r0, r3
 8002272:	f000 fbe2 	bl	8002a3a <RTC_ByteToBcd2>
 8002276:	0003      	movs	r3, r0
 8002278:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800227a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	789b      	ldrb	r3, [r3, #2]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 fbda 	bl	8002a3a <RTC_ByteToBcd2>
 8002286:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002288:	0022      	movs	r2, r4
 800228a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	78db      	ldrb	r3, [r3, #3]
 8002290:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e017      	b.n	80022c8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	4013      	ands	r3, r2
 80022a2:	d102      	bne.n	80022aa <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2200      	movs	r2, #0
 80022a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80022b6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80022bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	78db      	ldrb	r3, [r3, #3]
 80022c2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	22ca      	movs	r2, #202	; 0xca
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2253      	movs	r2, #83	; 0x53
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 fb83 	bl	80029e6 <RTC_EnterInitMode>
 80022e0:	1e03      	subs	r3, r0, #0
 80022e2:	d00d      	beq.n	8002300 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	22ff      	movs	r2, #255	; 0xff
 80022ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2221      	movs	r2, #33	; 0x21
 80022f0:	2104      	movs	r1, #4
 80022f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	2100      	movs	r1, #0
 80022fa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e048      	b.n	8002392 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4925      	ldr	r1, [pc, #148]	; (800239c <HAL_RTC_SetTime+0x180>)
 8002308:	400a      	ands	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4922      	ldr	r1, [pc, #136]	; (80023a0 <HAL_RTC_SetTime+0x184>)
 8002318:	400a      	ands	r2, r1
 800231a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	431a      	orrs	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2180      	movs	r1, #128	; 0x80
 8002340:	438a      	bics	r2, r1
 8002342:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2220      	movs	r2, #32
 800234c:	4013      	ands	r3, r2
 800234e:	d113      	bne.n	8002378 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	0018      	movs	r0, r3
 8002354:	f000 fb20 	bl	8002998 <HAL_RTC_WaitForSynchro>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d00d      	beq.n	8002378 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	22ff      	movs	r2, #255	; 0xff
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2221      	movs	r2, #33	; 0x21
 8002368:	2104      	movs	r1, #4
 800236a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	2100      	movs	r1, #0
 8002372:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e00c      	b.n	8002392 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	22ff      	movs	r2, #255	; 0xff
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2221      	movs	r2, #33	; 0x21
 8002384:	2101      	movs	r1, #1
 8002386:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002390:	2300      	movs	r3, #0
  }
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b007      	add	sp, #28
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	007f7f7f 	.word	0x007f7f7f
 80023a0:	fffbffff 	.word	0xfffbffff

080023a4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	045b      	lsls	r3, r3, #17
 80023c2:	0c5a      	lsrs	r2, r3, #17
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a22      	ldr	r2, [pc, #136]	; (8002458 <HAL_RTC_GetTime+0xb4>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	0c1b      	lsrs	r3, r3, #16
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	223f      	movs	r2, #63	; 0x3f
 80023dc:	4013      	ands	r3, r2
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	227f      	movs	r2, #127	; 0x7f
 80023ec:	4013      	ands	r3, r2
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	227f      	movs	r2, #127	; 0x7f
 80023fa:	4013      	ands	r3, r2
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2240      	movs	r2, #64	; 0x40
 800240a:	4013      	ands	r3, r2
 800240c:	b2da      	uxtb	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d11a      	bne.n	800244e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 fb34 	bl	8002a8a <RTC_Bcd2ToByte>
 8002422:	0003      	movs	r3, r0
 8002424:	001a      	movs	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	785b      	ldrb	r3, [r3, #1]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fb2b 	bl	8002a8a <RTC_Bcd2ToByte>
 8002434:	0003      	movs	r3, r0
 8002436:	001a      	movs	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	789b      	ldrb	r3, [r3, #2]
 8002440:	0018      	movs	r0, r3
 8002442:	f000 fb22 	bl	8002a8a <RTC_Bcd2ToByte>
 8002446:	0003      	movs	r3, r0
 8002448:	001a      	movs	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b006      	add	sp, #24
 8002456:	bd80      	pop	{r7, pc}
 8002458:	007f7f7f 	.word	0x007f7f7f

0800245c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	5c9b      	ldrb	r3, [r3, r2]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_RTC_SetDate+0x1a>
 8002472:	2302      	movs	r3, #2
 8002474:	e099      	b.n	80025aa <HAL_RTC_SetDate+0x14e>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2221      	movs	r2, #33	; 0x21
 8002482:	2102      	movs	r1, #2
 8002484:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10e      	bne.n	80024aa <HAL_RTC_SetDate+0x4e>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	001a      	movs	r2, r3
 8002492:	2310      	movs	r3, #16
 8002494:	4013      	ands	r3, r2
 8002496:	d008      	beq.n	80024aa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	2210      	movs	r2, #16
 800249e:	4393      	bics	r3, r2
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	330a      	adds	r3, #10
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d11c      	bne.n	80024ea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	78db      	ldrb	r3, [r3, #3]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 fac0 	bl	8002a3a <RTC_ByteToBcd2>
 80024ba:	0003      	movs	r3, r0
 80024bc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fab9 	bl	8002a3a <RTC_ByteToBcd2>
 80024c8:	0003      	movs	r3, r0
 80024ca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80024cc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	789b      	ldrb	r3, [r3, #2]
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 fab1 	bl	8002a3a <RTC_ByteToBcd2>
 80024d8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80024da:	0022      	movs	r2, r4
 80024dc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e00e      	b.n	8002508 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	78db      	ldrb	r3, [r3, #3]
 80024ee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80024f6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80024fc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	22ca      	movs	r2, #202	; 0xca
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2253      	movs	r2, #83	; 0x53
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fa63 	bl	80029e6 <RTC_EnterInitMode>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d00d      	beq.n	8002540 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	22ff      	movs	r2, #255	; 0xff
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2221      	movs	r2, #33	; 0x21
 8002530:	2104      	movs	r1, #4
 8002532:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	2100      	movs	r1, #0
 800253a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e034      	b.n	80025aa <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	491b      	ldr	r1, [pc, #108]	; (80025b4 <HAL_RTC_SetDate+0x158>)
 8002548:	400a      	ands	r2, r1
 800254a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	438a      	bics	r2, r1
 800255a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2220      	movs	r2, #32
 8002564:	4013      	ands	r3, r2
 8002566:	d113      	bne.n	8002590 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 fa14 	bl	8002998 <HAL_RTC_WaitForSynchro>
 8002570:	1e03      	subs	r3, r0, #0
 8002572:	d00d      	beq.n	8002590 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2221      	movs	r2, #33	; 0x21
 8002580:	2104      	movs	r1, #4
 8002582:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	2100      	movs	r1, #0
 800258a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e00c      	b.n	80025aa <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	22ff      	movs	r2, #255	; 0xff
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2221      	movs	r2, #33	; 0x21
 800259c:	2101      	movs	r1, #1
 800259e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	2100      	movs	r1, #0
 80025a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
  }
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b007      	add	sp, #28
 80025b0:	bd90      	pop	{r4, r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	00ffff3f 	.word	0x00ffff3f

080025b8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a21      	ldr	r2, [pc, #132]	; (8002650 <HAL_RTC_GetDate+0x98>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	0c1b      	lsrs	r3, r3, #16
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	221f      	movs	r2, #31
 80025e2:	4013      	ands	r3, r2
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	223f      	movs	r2, #63	; 0x3f
 80025f0:	4013      	ands	r3, r2
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	0b5b      	lsrs	r3, r3, #13
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2207      	movs	r2, #7
 8002600:	4013      	ands	r3, r2
 8002602:	b2da      	uxtb	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11a      	bne.n	8002644 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	78db      	ldrb	r3, [r3, #3]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 fa39 	bl	8002a8a <RTC_Bcd2ToByte>
 8002618:	0003      	movs	r3, r0
 800261a:	001a      	movs	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 fa30 	bl	8002a8a <RTC_Bcd2ToByte>
 800262a:	0003      	movs	r3, r0
 800262c:	001a      	movs	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	789b      	ldrb	r3, [r3, #2]
 8002636:	0018      	movs	r0, r3
 8002638:	f000 fa27 	bl	8002a8a <RTC_Bcd2ToByte>
 800263c:	0003      	movs	r3, r0
 800263e:	001a      	movs	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b006      	add	sp, #24
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	00ffff3f 	.word	0x00ffff3f

08002654 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	5c9b      	ldrb	r3, [r3, r2]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_RTC_SetAlarm_IT+0x1a>
 800266a:	2302      	movs	r3, #2
 800266c:	e130      	b.n	80028d0 <HAL_RTC_SetAlarm_IT+0x27c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2221      	movs	r2, #33	; 0x21
 800267a:	2102      	movs	r1, #2
 800267c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d136      	bne.n	80026f2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2240      	movs	r2, #64	; 0x40
 800268c:	4013      	ands	r3, r2
 800268e:	d102      	bne.n	8002696 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	0018      	movs	r0, r3
 800269c:	f000 f9cd 	bl	8002a3a <RTC_ByteToBcd2>
 80026a0:	0003      	movs	r3, r0
 80026a2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	785b      	ldrb	r3, [r3, #1]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 f9c6 	bl	8002a3a <RTC_ByteToBcd2>
 80026ae:	0003      	movs	r3, r0
 80026b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80026b2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	789b      	ldrb	r3, [r3, #2]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f9be 	bl	8002a3a <RTC_ByteToBcd2>
 80026be:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80026c0:	0022      	movs	r2, r4
 80026c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	78db      	ldrb	r3, [r3, #3]
 80026c8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80026ca:	431a      	orrs	r2, r3
 80026cc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2220      	movs	r2, #32
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f9b0 	bl	8002a3a <RTC_ByteToBcd2>
 80026da:	0003      	movs	r3, r0
 80026dc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80026de:	0022      	movs	r2, r4
 80026e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80026e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	e022      	b.n	8002738 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2240      	movs	r2, #64	; 0x40
 80026fa:	4013      	ands	r3, r2
 80026fc:	d102      	bne.n	8002704 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2200      	movs	r2, #0
 8002702:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	785b      	ldrb	r3, [r3, #1]
 800270e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002710:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002716:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	78db      	ldrb	r3, [r3, #3]
 800271c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800271e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2120      	movs	r1, #32
 8002724:	5c5b      	ldrb	r3, [r3, r1]
 8002726:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002728:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800272e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002734:	4313      	orrs	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	22ca      	movs	r2, #202	; 0xca
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2253      	movs	r2, #83	; 0x53
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	429a      	cmp	r2, r3
 800275e:	d14e      	bne.n	80027fe <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	495b      	ldr	r1, [pc, #364]	; (80028d8 <HAL_RTC_SetAlarm_IT+0x284>)
 800276c:	400a      	ands	r2, r1
 800276e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	22ff      	movs	r2, #255	; 0xff
 8002778:	401a      	ands	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4957      	ldr	r1, [pc, #348]	; (80028dc <HAL_RTC_SetAlarm_IT+0x288>)
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002784:	f7fe fa84 	bl	8000c90 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800278c:	e016      	b.n	80027bc <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800278e:	f7fe fa7f 	bl	8000c90 <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	1ad2      	subs	r2, r2, r3
 8002798:	23fa      	movs	r3, #250	; 0xfa
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d90d      	bls.n	80027bc <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	22ff      	movs	r2, #255	; 0xff
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2221      	movs	r2, #33	; 0x21
 80027ac:	2103      	movs	r1, #3
 80027ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e089      	b.n	80028d0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d0e2      	beq.n	800278e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	0049      	lsls	r1, r1, #1
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	0149      	lsls	r1, r1, #5
 80027f8:	430a      	orrs	r2, r1
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	e04d      	b.n	800289a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4935      	ldr	r1, [pc, #212]	; (80028e0 <HAL_RTC_SetAlarm_IT+0x28c>)
 800280a:	400a      	ands	r2, r1
 800280c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	22ff      	movs	r2, #255	; 0xff
 8002816:	401a      	ands	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4931      	ldr	r1, [pc, #196]	; (80028e4 <HAL_RTC_SetAlarm_IT+0x290>)
 800281e:	430a      	orrs	r2, r1
 8002820:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002822:	f7fe fa35 	bl	8000c90 <HAL_GetTick>
 8002826:	0003      	movs	r3, r0
 8002828:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800282a:	e016      	b.n	800285a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800282c:	f7fe fa30 	bl	8000c90 <HAL_GetTick>
 8002830:	0002      	movs	r2, r0
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	1ad2      	subs	r2, r2, r3
 8002836:	23fa      	movs	r3, #250	; 0xfa
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	429a      	cmp	r2, r3
 800283c:	d90d      	bls.n	800285a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	22ff      	movs	r2, #255	; 0xff
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2221      	movs	r2, #33	; 0x21
 800284a:	2103      	movs	r1, #3
 800284c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	2100      	movs	r1, #0
 8002854:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e03a      	b.n	80028d0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d0e2      	beq.n	800282c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	0089      	lsls	r1, r1, #2
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	0189      	lsls	r1, r1, #6
 8002896:	430a      	orrs	r2, r1
 8002898:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <HAL_RTC_SetAlarm_IT+0x294>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_RTC_SetAlarm_IT+0x294>)
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	0289      	lsls	r1, r1, #10
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_RTC_SetAlarm_IT+0x294>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_RTC_SetAlarm_IT+0x294>)
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	0289      	lsls	r1, r1, #10
 80028b2:	430a      	orrs	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	22ff      	movs	r2, #255	; 0xff
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	; 0x21
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	2100      	movs	r1, #0
 80028cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b009      	add	sp, #36	; 0x24
 80028d6:	bd90      	pop	{r4, r7, pc}
 80028d8:	fffffeff 	.word	0xfffffeff
 80028dc:	fffffe7f 	.word	0xfffffe7f
 80028e0:	fffffdff 	.word	0xfffffdff
 80028e4:	fffffd7f 	.word	0xfffffd7f
 80028e8:	40010400 	.word	0x40010400

080028ec <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	015b      	lsls	r3, r3, #5
 80028fe:	4013      	ands	r3, r2
 8002900:	d014      	beq.n	800292c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4013      	ands	r3, r2
 800290e:	d00d      	beq.n	800292c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 f838 	bl	8002988 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	22ff      	movs	r2, #255	; 0xff
 8002920:	401a      	ands	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4915      	ldr	r1, [pc, #84]	; (800297c <HAL_RTC_AlarmIRQHandler+0x90>)
 8002928:	430a      	orrs	r2, r1
 800292a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	019b      	lsls	r3, r3, #6
 8002936:	4013      	ands	r3, r2
 8002938:	d014      	beq.n	8002964 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4013      	ands	r3, r2
 8002946:	d00d      	beq.n	8002964 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	0018      	movs	r0, r3
 800294c:	f000 f8e4 	bl	8002b18 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	22ff      	movs	r2, #255	; 0xff
 8002958:	401a      	ands	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002960:	430a      	orrs	r2, r1
 8002962:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	0292      	lsls	r2, r2, #10
 800296a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2221      	movs	r2, #33	; 0x21
 8002970:	2101      	movs	r1, #1
 8002972:	5499      	strb	r1, [r3, r2]
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}
 800297c:	fffffe7f 	.word	0xfffffe7f
 8002980:	fffffd7f 	.word	0xfffffd7f
 8002984:	40010400 	.word	0x40010400

08002988 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b002      	add	sp, #8
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	21a0      	movs	r1, #160	; 0xa0
 80029ac:	438a      	bics	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80029b0:	f7fe f96e 	bl	8000c90 <HAL_GetTick>
 80029b4:	0003      	movs	r3, r0
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80029b8:	e00a      	b.n	80029d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029ba:	f7fe f969 	bl	8000c90 <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad2      	subs	r2, r2, r3
 80029c4:	23fa      	movs	r3, #250	; 0xfa
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d901      	bls.n	80029d0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e006      	b.n	80029de <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	4013      	ands	r3, r2
 80029da:	d0ee      	beq.n	80029ba <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b004      	add	sp, #16
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2240      	movs	r2, #64	; 0x40
 80029f6:	4013      	ands	r3, r2
 80029f8:	d11a      	bne.n	8002a30 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4252      	negs	r2, r2
 8002a02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a04:	f7fe f944 	bl	8000c90 <HAL_GetTick>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002a0c:	e00a      	b.n	8002a24 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002a0e:	f7fe f93f 	bl	8000c90 <HAL_GetTick>
 8002a12:	0002      	movs	r2, r0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1ad2      	subs	r2, r2, r3
 8002a18:	23fa      	movs	r3, #250	; 0xfa
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d901      	bls.n	8002a24 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e006      	b.n	8002a32 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d0ee      	beq.n	8002a0e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b004      	add	sp, #16
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	0002      	movs	r2, r0
 8002a42:	1dfb      	adds	r3, r7, #7
 8002a44:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002a4a:	230b      	movs	r3, #11
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	1dfa      	adds	r2, r7, #7
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002a54:	e008      	b.n	8002a68 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002a5c:	220b      	movs	r2, #11
 8002a5e:	18bb      	adds	r3, r7, r2
 8002a60:	18ba      	adds	r2, r7, r2
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	3a0a      	subs	r2, #10
 8002a66:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002a68:	210b      	movs	r1, #11
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b09      	cmp	r3, #9
 8002a70:	d8f1      	bhi.n	8002a56 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	b2db      	uxtb	r3, r3
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b004      	add	sp, #16
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	0002      	movs	r2, r0
 8002a92:	1dfb      	adds	r3, r7, #7
 8002a94:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002a96:	1dfb      	adds	r3, r7, #7
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	001a      	movs	r2, r3
 8002aa0:	0013      	movs	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	189b      	adds	r3, r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	1dfb      	adds	r3, r7, #7
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	210f      	movs	r1, #15
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	18d3      	adds	r3, r2, r3
 8002aba:	b2db      	uxtb	r3, r3
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b004      	add	sp, #16
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3350      	adds	r3, #80	; 0x50
 8002ad6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	18d3      	adds	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	601a      	str	r2, [r3, #0]
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b006      	add	sp, #24
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3350      	adds	r3, #80	; 0x50
 8002b00:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	18d3      	adds	r3, r2, r3
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b004      	add	sp, #16
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e044      	b.n	8002bc4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2274      	movs	r2, #116	; 0x74
 8002b46:	2100      	movs	r1, #0
 8002b48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7fd ff83 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2224      	movs	r2, #36	; 0x24
 8002b56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2101      	movs	r1, #1
 8002b64:	438a      	bics	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f830 	bl	8002bd0 <UART_SetConfig>
 8002b70:	0003      	movs	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e024      	b.n	8002bc4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	0018      	movs	r0, r3
 8002b86:	f000 fa6d 	bl	8003064 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	490d      	ldr	r1, [pc, #52]	; (8002bcc <HAL_UART_Init+0xa4>)
 8002b96:	400a      	ands	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	212a      	movs	r1, #42	; 0x2a
 8002ba6:	438a      	bics	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 fb05 	bl	80031cc <UART_CheckIdleState>
 8002bc2:	0003      	movs	r3, r0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	ffffb7ff 	.word	0xffffb7ff

08002bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd0:	b5b0      	push	{r4, r5, r7, lr}
 8002bd2:	b08e      	sub	sp, #56	; 0x38
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd8:	231a      	movs	r3, #26
 8002bda:	2218      	movs	r2, #24
 8002bdc:	189b      	adds	r3, r3, r2
 8002bde:	19db      	adds	r3, r3, r7
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	431a      	orrs	r2, r3
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4ab4      	ldr	r2, [pc, #720]	; (8002ed4 <UART_SetConfig+0x304>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	0019      	movs	r1, r3
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4aaf      	ldr	r2, [pc, #700]	; (8002ed8 <UART_SetConfig+0x308>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4aa9      	ldr	r2, [pc, #676]	; (8002edc <UART_SetConfig+0x30c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d004      	beq.n	8002c44 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c40:	4313      	orrs	r3, r2
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4aa5      	ldr	r2, [pc, #660]	; (8002ee0 <UART_SetConfig+0x310>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c56:	430a      	orrs	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4aa1      	ldr	r2, [pc, #644]	; (8002ee4 <UART_SetConfig+0x314>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d131      	bne.n	8002cc8 <UART_SetConfig+0xf8>
 8002c64:	4ba0      	ldr	r3, [pc, #640]	; (8002ee8 <UART_SetConfig+0x318>)
 8002c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c68:	220c      	movs	r2, #12
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d01d      	beq.n	8002cac <UART_SetConfig+0xdc>
 8002c70:	d823      	bhi.n	8002cba <UART_SetConfig+0xea>
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d00c      	beq.n	8002c90 <UART_SetConfig+0xc0>
 8002c76:	d820      	bhi.n	8002cba <UART_SetConfig+0xea>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <UART_SetConfig+0xb2>
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d00e      	beq.n	8002c9e <UART_SetConfig+0xce>
 8002c80:	e01b      	b.n	8002cba <UART_SetConfig+0xea>
 8002c82:	231b      	movs	r3, #27
 8002c84:	2218      	movs	r2, #24
 8002c86:	189b      	adds	r3, r3, r2
 8002c88:	19db      	adds	r3, r3, r7
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e065      	b.n	8002d5c <UART_SetConfig+0x18c>
 8002c90:	231b      	movs	r3, #27
 8002c92:	2218      	movs	r2, #24
 8002c94:	189b      	adds	r3, r3, r2
 8002c96:	19db      	adds	r3, r3, r7
 8002c98:	2202      	movs	r2, #2
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e05e      	b.n	8002d5c <UART_SetConfig+0x18c>
 8002c9e:	231b      	movs	r3, #27
 8002ca0:	2218      	movs	r2, #24
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	19db      	adds	r3, r3, r7
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e057      	b.n	8002d5c <UART_SetConfig+0x18c>
 8002cac:	231b      	movs	r3, #27
 8002cae:	2218      	movs	r2, #24
 8002cb0:	189b      	adds	r3, r3, r2
 8002cb2:	19db      	adds	r3, r3, r7
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e050      	b.n	8002d5c <UART_SetConfig+0x18c>
 8002cba:	231b      	movs	r3, #27
 8002cbc:	2218      	movs	r2, #24
 8002cbe:	189b      	adds	r3, r3, r2
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e049      	b.n	8002d5c <UART_SetConfig+0x18c>
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a83      	ldr	r2, [pc, #524]	; (8002edc <UART_SetConfig+0x30c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d13e      	bne.n	8002d50 <UART_SetConfig+0x180>
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <UART_SetConfig+0x318>)
 8002cd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cd6:	23c0      	movs	r3, #192	; 0xc0
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	4013      	ands	r3, r2
 8002cdc:	22c0      	movs	r2, #192	; 0xc0
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d027      	beq.n	8002d34 <UART_SetConfig+0x164>
 8002ce4:	22c0      	movs	r2, #192	; 0xc0
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d82a      	bhi.n	8002d42 <UART_SetConfig+0x172>
 8002cec:	2280      	movs	r2, #128	; 0x80
 8002cee:	0112      	lsls	r2, r2, #4
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d011      	beq.n	8002d18 <UART_SetConfig+0x148>
 8002cf4:	2280      	movs	r2, #128	; 0x80
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d822      	bhi.n	8002d42 <UART_SetConfig+0x172>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d004      	beq.n	8002d0a <UART_SetConfig+0x13a>
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	00d2      	lsls	r2, r2, #3
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <UART_SetConfig+0x156>
 8002d08:	e01b      	b.n	8002d42 <UART_SetConfig+0x172>
 8002d0a:	231b      	movs	r3, #27
 8002d0c:	2218      	movs	r2, #24
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	19db      	adds	r3, r3, r7
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e021      	b.n	8002d5c <UART_SetConfig+0x18c>
 8002d18:	231b      	movs	r3, #27
 8002d1a:	2218      	movs	r2, #24
 8002d1c:	189b      	adds	r3, r3, r2
 8002d1e:	19db      	adds	r3, r3, r7
 8002d20:	2202      	movs	r2, #2
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e01a      	b.n	8002d5c <UART_SetConfig+0x18c>
 8002d26:	231b      	movs	r3, #27
 8002d28:	2218      	movs	r2, #24
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	19db      	adds	r3, r3, r7
 8002d2e:	2204      	movs	r2, #4
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e013      	b.n	8002d5c <UART_SetConfig+0x18c>
 8002d34:	231b      	movs	r3, #27
 8002d36:	2218      	movs	r2, #24
 8002d38:	189b      	adds	r3, r3, r2
 8002d3a:	19db      	adds	r3, r3, r7
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e00c      	b.n	8002d5c <UART_SetConfig+0x18c>
 8002d42:	231b      	movs	r3, #27
 8002d44:	2218      	movs	r2, #24
 8002d46:	189b      	adds	r3, r3, r2
 8002d48:	19db      	adds	r3, r3, r7
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e005      	b.n	8002d5c <UART_SetConfig+0x18c>
 8002d50:	231b      	movs	r3, #27
 8002d52:	2218      	movs	r2, #24
 8002d54:	189b      	adds	r3, r3, r2
 8002d56:	19db      	adds	r3, r3, r7
 8002d58:	2210      	movs	r2, #16
 8002d5a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a5e      	ldr	r2, [pc, #376]	; (8002edc <UART_SetConfig+0x30c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d000      	beq.n	8002d68 <UART_SetConfig+0x198>
 8002d66:	e084      	b.n	8002e72 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d68:	231b      	movs	r3, #27
 8002d6a:	2218      	movs	r2, #24
 8002d6c:	189b      	adds	r3, r3, r2
 8002d6e:	19db      	adds	r3, r3, r7
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d01d      	beq.n	8002db2 <UART_SetConfig+0x1e2>
 8002d76:	dc20      	bgt.n	8002dba <UART_SetConfig+0x1ea>
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d015      	beq.n	8002da8 <UART_SetConfig+0x1d8>
 8002d7c:	dc1d      	bgt.n	8002dba <UART_SetConfig+0x1ea>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <UART_SetConfig+0x1b8>
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d005      	beq.n	8002d92 <UART_SetConfig+0x1c2>
 8002d86:	e018      	b.n	8002dba <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d88:	f7ff f858 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d90:	e01c      	b.n	8002dcc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d92:	4b55      	ldr	r3, [pc, #340]	; (8002ee8 <UART_SetConfig+0x318>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2210      	movs	r2, #16
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d002      	beq.n	8002da2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d9c:	4b53      	ldr	r3, [pc, #332]	; (8002eec <UART_SetConfig+0x31c>)
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002da0:	e014      	b.n	8002dcc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002da2:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <UART_SetConfig+0x320>)
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002da6:	e011      	b.n	8002dcc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da8:	f7fe ff98 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8002dac:	0003      	movs	r3, r0
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002db0:	e00c      	b.n	8002dcc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002db8:	e008      	b.n	8002dcc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002dbe:	231a      	movs	r3, #26
 8002dc0:	2218      	movs	r2, #24
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	19db      	adds	r3, r3, r7
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
        break;
 8002dca:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d100      	bne.n	8002dd4 <UART_SetConfig+0x204>
 8002dd2:	e130      	b.n	8003036 <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	0013      	movs	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d305      	bcc.n	8002df0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d906      	bls.n	8002dfe <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002df0:	231a      	movs	r3, #26
 8002df2:	2218      	movs	r2, #24
 8002df4:	189b      	adds	r3, r3, r2
 8002df6:	19db      	adds	r3, r3, r7
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e11b      	b.n	8003036 <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	6939      	ldr	r1, [r7, #16]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	000b      	movs	r3, r1
 8002e0c:	0e1b      	lsrs	r3, r3, #24
 8002e0e:	0010      	movs	r0, r2
 8002e10:	0205      	lsls	r5, r0, #8
 8002e12:	431d      	orrs	r5, r3
 8002e14:	000b      	movs	r3, r1
 8002e16:	021c      	lsls	r4, r3, #8
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68b8      	ldr	r0, [r7, #8]
 8002e26:	68f9      	ldr	r1, [r7, #12]
 8002e28:	1900      	adds	r0, r0, r4
 8002e2a:	4169      	adcs	r1, r5
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f7fd f9f1 	bl	8000220 <__aeabi_uldivmod>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	000b      	movs	r3, r1
 8002e42:	0013      	movs	r3, r2
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e48:	23c0      	movs	r3, #192	; 0xc0
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d309      	bcc.n	8002e64 <UART_SetConfig+0x294>
 8002e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	035b      	lsls	r3, r3, #13
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d204      	bcs.n	8002e64 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	e0e8      	b.n	8003036 <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002e64:	231a      	movs	r3, #26
 8002e66:	2218      	movs	r2, #24
 8002e68:	189b      	adds	r3, r3, r2
 8002e6a:	19db      	adds	r3, r3, r7
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e0e1      	b.n	8003036 <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d000      	beq.n	8002e80 <UART_SetConfig+0x2b0>
 8002e7e:	e083      	b.n	8002f88 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002e80:	231b      	movs	r3, #27
 8002e82:	2218      	movs	r2, #24
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	19db      	adds	r3, r3, r7
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d834      	bhi.n	8002ef8 <UART_SetConfig+0x328>
 8002e8e:	009a      	lsls	r2, r3, #2
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <UART_SetConfig+0x324>)
 8002e92:	18d3      	adds	r3, r2, r3
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e98:	f7fe ffd0 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ea0:	e033      	b.n	8002f0a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ea2:	f7fe ffe1 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eaa:	e02e      	b.n	8002f0a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <UART_SetConfig+0x318>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d002      	beq.n	8002ebc <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <UART_SetConfig+0x31c>)
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002eba:	e026      	b.n	8002f0a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <UART_SetConfig+0x320>)
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ec0:	e023      	b.n	8002f0a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ec2:	f7fe ff0b 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eca:	e01e      	b.n	8002f0a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ed2:	e01a      	b.n	8002f0a <UART_SetConfig+0x33a>
 8002ed4:	efff69f3 	.word	0xefff69f3
 8002ed8:	ffffcfff 	.word	0xffffcfff
 8002edc:	40004800 	.word	0x40004800
 8002ee0:	fffff4ff 	.word	0xfffff4ff
 8002ee4:	40004400 	.word	0x40004400
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	003d0900 	.word	0x003d0900
 8002ef0:	00f42400 	.word	0x00f42400
 8002ef4:	08003478 	.word	0x08003478
      default:
        pclk = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002efc:	231a      	movs	r3, #26
 8002efe:	2218      	movs	r2, #24
 8002f00:	189b      	adds	r3, r3, r2
 8002f02:	19db      	adds	r3, r3, r7
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
        break;
 8002f08:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d100      	bne.n	8002f12 <UART_SetConfig+0x342>
 8002f10:	e091      	b.n	8003036 <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	005a      	lsls	r2, r3, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	18d2      	adds	r2, r2, r3
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	0019      	movs	r1, r3
 8002f24:	0010      	movs	r0, r2
 8002f26:	f7fd f8ef 	bl	8000108 <__udivsi3>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	2b0f      	cmp	r3, #15
 8002f34:	d921      	bls.n	8002f7a <UART_SetConfig+0x3aa>
 8002f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	025b      	lsls	r3, r3, #9
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d21c      	bcs.n	8002f7a <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	200e      	movs	r0, #14
 8002f46:	2418      	movs	r4, #24
 8002f48:	1903      	adds	r3, r0, r4
 8002f4a:	19db      	adds	r3, r3, r7
 8002f4c:	210f      	movs	r1, #15
 8002f4e:	438a      	bics	r2, r1
 8002f50:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2207      	movs	r2, #7
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b299      	uxth	r1, r3
 8002f5e:	1903      	adds	r3, r0, r4
 8002f60:	19db      	adds	r3, r3, r7
 8002f62:	1902      	adds	r2, r0, r4
 8002f64:	19d2      	adds	r2, r2, r7
 8002f66:	8812      	ldrh	r2, [r2, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1902      	adds	r2, r0, r4
 8002f72:	19d2      	adds	r2, r2, r7
 8002f74:	8812      	ldrh	r2, [r2, #0]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	e05d      	b.n	8003036 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002f7a:	231a      	movs	r3, #26
 8002f7c:	2218      	movs	r2, #24
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	19db      	adds	r3, r3, r7
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e056      	b.n	8003036 <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f88:	231b      	movs	r3, #27
 8002f8a:	2218      	movs	r2, #24
 8002f8c:	189b      	adds	r3, r3, r2
 8002f8e:	19db      	adds	r3, r3, r7
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d822      	bhi.n	8002fdc <UART_SetConfig+0x40c>
 8002f96:	009a      	lsls	r2, r3, #2
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <UART_SetConfig+0x484>)
 8002f9a:	18d3      	adds	r3, r2, r3
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f7fe ff4c 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fa8:	e021      	b.n	8002fee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002faa:	f7fe ff5d 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fb2:	e01c      	b.n	8002fee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <UART_SetConfig+0x488>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2210      	movs	r2, #16
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d002      	beq.n	8002fc4 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002fbe:	4b27      	ldr	r3, [pc, #156]	; (800305c <UART_SetConfig+0x48c>)
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002fc2:	e014      	b.n	8002fee <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <UART_SetConfig+0x490>)
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fc8:	e011      	b.n	8002fee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fca:	f7fe fe87 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fd2:	e00c      	b.n	8002fee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fda:	e008      	b.n	8002fee <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002fe0:	231a      	movs	r3, #26
 8002fe2:	2218      	movs	r2, #24
 8002fe4:	189b      	adds	r3, r3, r2
 8002fe6:	19db      	adds	r3, r3, r7
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
        break;
 8002fec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	085a      	lsrs	r2, r3, #1
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	18d2      	adds	r2, r2, r3
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0019      	movs	r1, r3
 8003004:	0010      	movs	r0, r2
 8003006:	f7fd f87f 	bl	8000108 <__udivsi3>
 800300a:	0003      	movs	r3, r0
 800300c:	b29b      	uxth	r3, r3
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	2b0f      	cmp	r3, #15
 8003014:	d909      	bls.n	800302a <UART_SetConfig+0x45a>
 8003016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	025b      	lsls	r3, r3, #9
 800301c:	429a      	cmp	r2, r3
 800301e:	d204      	bcs.n	800302a <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	e005      	b.n	8003036 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 800302a:	231a      	movs	r3, #26
 800302c:	2218      	movs	r2, #24
 800302e:	189b      	adds	r3, r3, r2
 8003030:	19db      	adds	r3, r3, r7
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2200      	movs	r2, #0
 800303a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2200      	movs	r2, #0
 8003040:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003042:	231a      	movs	r3, #26
 8003044:	2218      	movs	r2, #24
 8003046:	189b      	adds	r3, r3, r2
 8003048:	19db      	adds	r3, r3, r7
 800304a:	781b      	ldrb	r3, [r3, #0]
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b00e      	add	sp, #56	; 0x38
 8003052:	bdb0      	pop	{r4, r5, r7, pc}
 8003054:	0800349c 	.word	0x0800349c
 8003058:	40021000 	.word	0x40021000
 800305c:	003d0900 	.word	0x003d0900
 8003060:	00f42400 	.word	0x00f42400

08003064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2201      	movs	r2, #1
 8003072:	4013      	ands	r3, r2
 8003074:	d00b      	beq.n	800308e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <UART_AdvFeatureConfig+0x144>)
 800307e:	4013      	ands	r3, r2
 8003080:	0019      	movs	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d00b      	beq.n	80030b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a43      	ldr	r2, [pc, #268]	; (80031ac <UART_AdvFeatureConfig+0x148>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2204      	movs	r2, #4
 80030b6:	4013      	ands	r3, r2
 80030b8:	d00b      	beq.n	80030d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a3b      	ldr	r2, [pc, #236]	; (80031b0 <UART_AdvFeatureConfig+0x14c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	2208      	movs	r2, #8
 80030d8:	4013      	ands	r3, r2
 80030da:	d00b      	beq.n	80030f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a34      	ldr	r2, [pc, #208]	; (80031b4 <UART_AdvFeatureConfig+0x150>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2210      	movs	r2, #16
 80030fa:	4013      	ands	r3, r2
 80030fc:	d00b      	beq.n	8003116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <UART_AdvFeatureConfig+0x154>)
 8003106:	4013      	ands	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	2220      	movs	r2, #32
 800311c:	4013      	ands	r3, r2
 800311e:	d00b      	beq.n	8003138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	4a25      	ldr	r2, [pc, #148]	; (80031bc <UART_AdvFeatureConfig+0x158>)
 8003128:	4013      	ands	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2240      	movs	r2, #64	; 0x40
 800313e:	4013      	ands	r3, r2
 8003140:	d01d      	beq.n	800317e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <UART_AdvFeatureConfig+0x15c>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	035b      	lsls	r3, r3, #13
 8003162:	429a      	cmp	r2, r3
 8003164:	d10b      	bne.n	800317e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <UART_AdvFeatureConfig+0x160>)
 800316e:	4013      	ands	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	2280      	movs	r2, #128	; 0x80
 8003184:	4013      	ands	r3, r2
 8003186:	d00b      	beq.n	80031a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <UART_AdvFeatureConfig+0x164>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	fffdffff 	.word	0xfffdffff
 80031ac:	fffeffff 	.word	0xfffeffff
 80031b0:	fffbffff 	.word	0xfffbffff
 80031b4:	ffff7fff 	.word	0xffff7fff
 80031b8:	ffffefff 	.word	0xffffefff
 80031bc:	ffffdfff 	.word	0xffffdfff
 80031c0:	ffefffff 	.word	0xffefffff
 80031c4:	ff9fffff 	.word	0xff9fffff
 80031c8:	fff7ffff 	.word	0xfff7ffff

080031cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	2100      	movs	r1, #0
 80031da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031dc:	f7fd fd58 	bl	8000c90 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2208      	movs	r2, #8
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d10c      	bne.n	800320c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2280      	movs	r2, #128	; 0x80
 80031f6:	0391      	lsls	r1, r2, #14
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4a17      	ldr	r2, [pc, #92]	; (8003258 <UART_CheckIdleState+0x8c>)
 80031fc:	9200      	str	r2, [sp, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	f000 f82c 	bl	800325c <UART_WaitOnFlagUntilTimeout>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e021      	b.n	8003250 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2204      	movs	r2, #4
 8003214:	4013      	ands	r3, r2
 8003216:	2b04      	cmp	r3, #4
 8003218:	d10c      	bne.n	8003234 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	03d1      	lsls	r1, r2, #15
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <UART_CheckIdleState+0x8c>)
 8003224:	9200      	str	r2, [sp, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	f000 f818 	bl	800325c <UART_WaitOnFlagUntilTimeout>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d001      	beq.n	8003234 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e00d      	b.n	8003250 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2274      	movs	r2, #116	; 0x74
 800324a:	2100      	movs	r1, #0
 800324c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b004      	add	sp, #16
 8003256:	bd80      	pop	{r7, pc}
 8003258:	01ffffff 	.word	0x01ffffff

0800325c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b094      	sub	sp, #80	; 0x50
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	1dfb      	adds	r3, r7, #7
 800326a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326c:	e0a3      	b.n	80033b6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003270:	3301      	adds	r3, #1
 8003272:	d100      	bne.n	8003276 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003274:	e09f      	b.n	80033b6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7fd fd0b 	bl	8000c90 <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <UART_WaitOnFlagUntilTimeout+0x30>
 8003286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003288:	2b00      	cmp	r3, #0
 800328a:	d13d      	bne.n	8003308 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328c:	f3ef 8310 	mrs	r3, PRIMASK
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
 8003296:	2301      	movs	r3, #1
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	f383 8810 	msr	PRIMASK, r3
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	494c      	ldr	r1, [pc, #304]	; (80033e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	f383 8810 	msr	PRIMASK, r3
}
 80032bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032be:	f3ef 8310 	mrs	r3, PRIMASK
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80032c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c6:	643b      	str	r3, [r7, #64]	; 0x40
 80032c8:	2301      	movs	r3, #1
 80032ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	f383 8810 	msr	PRIMASK, r3
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2101      	movs	r1, #1
 80032e0:	438a      	bics	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ea:	f383 8810 	msr	PRIMASK, r3
}
 80032ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2274      	movs	r2, #116	; 0x74
 8003300:	2100      	movs	r1, #0
 8003302:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e067      	b.n	80033d8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2204      	movs	r2, #4
 8003310:	4013      	ands	r3, r2
 8003312:	d050      	beq.n	80033b6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	401a      	ands	r2, r3
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	429a      	cmp	r2, r3
 8003326:	d146      	bne.n	80033b6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2280      	movs	r2, #128	; 0x80
 800332e:	0112      	lsls	r2, r2, #4
 8003330:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003332:	f3ef 8310 	mrs	r3, PRIMASK
 8003336:	613b      	str	r3, [r7, #16]
  return(result);
 8003338:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800333c:	2301      	movs	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4923      	ldr	r1, [pc, #140]	; (80033e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003354:	400a      	ands	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	f383 8810 	msr	PRIMASK, r3
}
 8003362:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003364:	f3ef 8310 	mrs	r3, PRIMASK
 8003368:	61fb      	str	r3, [r7, #28]
  return(result);
 800336a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336c:	64bb      	str	r3, [r7, #72]	; 0x48
 800336e:	2301      	movs	r3, #1
 8003370:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	f383 8810 	msr	PRIMASK, r3
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	438a      	bics	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	f383 8810 	msr	PRIMASK, r3
}
 8003394:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	2120      	movs	r1, #32
 80033a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2274      	movs	r2, #116	; 0x74
 80033ae:	2100      	movs	r1, #0
 80033b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e010      	b.n	80033d8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	4013      	ands	r3, r2
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	425a      	negs	r2, r3
 80033c6:	4153      	adcs	r3, r2
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	001a      	movs	r2, r3
 80033cc:	1dfb      	adds	r3, r7, #7
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d100      	bne.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80033d4:	e74b      	b.n	800326e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	b014      	add	sp, #80	; 0x50
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	fffffe5f 	.word	0xfffffe5f

080033e4 <__libc_init_array>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	2600      	movs	r6, #0
 80033e8:	4d0c      	ldr	r5, [pc, #48]	; (800341c <__libc_init_array+0x38>)
 80033ea:	4c0d      	ldr	r4, [pc, #52]	; (8003420 <__libc_init_array+0x3c>)
 80033ec:	1b64      	subs	r4, r4, r5
 80033ee:	10a4      	asrs	r4, r4, #2
 80033f0:	42a6      	cmp	r6, r4
 80033f2:	d109      	bne.n	8003408 <__libc_init_array+0x24>
 80033f4:	2600      	movs	r6, #0
 80033f6:	f000 f821 	bl	800343c <_init>
 80033fa:	4d0a      	ldr	r5, [pc, #40]	; (8003424 <__libc_init_array+0x40>)
 80033fc:	4c0a      	ldr	r4, [pc, #40]	; (8003428 <__libc_init_array+0x44>)
 80033fe:	1b64      	subs	r4, r4, r5
 8003400:	10a4      	asrs	r4, r4, #2
 8003402:	42a6      	cmp	r6, r4
 8003404:	d105      	bne.n	8003412 <__libc_init_array+0x2e>
 8003406:	bd70      	pop	{r4, r5, r6, pc}
 8003408:	00b3      	lsls	r3, r6, #2
 800340a:	58eb      	ldr	r3, [r5, r3]
 800340c:	4798      	blx	r3
 800340e:	3601      	adds	r6, #1
 8003410:	e7ee      	b.n	80033f0 <__libc_init_array+0xc>
 8003412:	00b3      	lsls	r3, r6, #2
 8003414:	58eb      	ldr	r3, [r5, r3]
 8003416:	4798      	blx	r3
 8003418:	3601      	adds	r6, #1
 800341a:	e7f2      	b.n	8003402 <__libc_init_array+0x1e>
 800341c:	080034c8 	.word	0x080034c8
 8003420:	080034c8 	.word	0x080034c8
 8003424:	080034c8 	.word	0x080034c8
 8003428:	080034cc 	.word	0x080034cc

0800342c <memset>:
 800342c:	0003      	movs	r3, r0
 800342e:	1882      	adds	r2, r0, r2
 8003430:	4293      	cmp	r3, r2
 8003432:	d100      	bne.n	8003436 <memset+0xa>
 8003434:	4770      	bx	lr
 8003436:	7019      	strb	r1, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	e7f9      	b.n	8003430 <memset+0x4>

0800343c <_init>:
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003442:	bc08      	pop	{r3}
 8003444:	469e      	mov	lr, r3
 8003446:	4770      	bx	lr

08003448 <_fini>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344e:	bc08      	pop	{r3}
 8003450:	469e      	mov	lr, r3
 8003452:	4770      	bx	lr
